/*!
 * devextreme-react
 * Version: 20.1.6
 * Build date: Fri Jul 17 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

/// <reference types="react" />
import dxDiagram, { IOptions } from "devextreme/ui/diagram";
import { Component as BaseComponent, IHtmlOptions } from "./core/component";
import NestedOption from "./core/nested-option";
interface IDiagramOptions extends IOptions, IHtmlOptions {
    customShapeRender?: (...params: any) => React.ReactNode;
    customShapeComponent?: React.ComponentType<any>;
    customShapeKeyFn?: (data: any) => string;
}
declare class Diagram extends BaseComponent<IDiagramOptions> {
    get instance(): dxDiagram;
    protected _WidgetClass: typeof dxDiagram;
    protected _expectedChildren: {
        contextMenu: {
            optionName: string;
            isCollectionItem: boolean;
        };
        contextToolbox: {
            optionName: string;
            isCollectionItem: boolean;
        };
        customShape: {
            optionName: string;
            isCollectionItem: boolean;
        };
        defaultItemProperties: {
            optionName: string;
            isCollectionItem: boolean;
        };
        edges: {
            optionName: string;
            isCollectionItem: boolean;
        };
        export: {
            optionName: string;
            isCollectionItem: boolean;
        };
        gridSize: {
            optionName: string;
            isCollectionItem: boolean;
        };
        historyToolbar: {
            optionName: string;
            isCollectionItem: boolean;
        };
        mainToolbar: {
            optionName: string;
            isCollectionItem: boolean;
        };
        nodes: {
            optionName: string;
            isCollectionItem: boolean;
        };
        pageSize: {
            optionName: string;
            isCollectionItem: boolean;
        };
        propertiesPanel: {
            optionName: string;
            isCollectionItem: boolean;
        };
        toolbox: {
            optionName: string;
            isCollectionItem: boolean;
        };
        viewToolbar: {
            optionName: string;
            isCollectionItem: boolean;
        };
        zoomLevel: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
    protected _templateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare class AutoLayout extends NestedOption<{
    orientation?: any;
    type?: any;
}> {
    static OptionName: string;
}
declare class Command extends NestedOption<{
    icon?: any;
    items?: any;
    name?: any;
    text?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
}
declare class CommandItem extends NestedOption<{
    icon?: any;
    items?: any;
    name?: any;
    text?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
}
declare class ConnectionPoint extends NestedOption<{
    x?: any;
    y?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
}
declare class ContextMenu extends NestedOption<{
    commands?: any;
    enabled?: any;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        command: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class ContextToolbox extends NestedOption<{
    category?: any;
    displayMode?: any;
    enabled?: any;
    shapes?: any;
}> {
    static OptionName: string;
}
declare class CustomShape extends NestedOption<{
    allowEditImage?: any;
    allowEditText?: any;
    allowResize?: any;
    backgroundImageHeight?: any;
    backgroundImageLeft?: any;
    backgroundImageToolboxUrl?: any;
    backgroundImageTop?: any;
    backgroundImageUrl?: any;
    backgroundImageWidth?: any;
    baseType?: any;
    category?: any;
    connectionPoints?: {
        x?: any;
        y?: any;
    };
    defaultHeight?: any;
    defaultImageUrl?: any;
    defaultText?: any;
    defaultWidth?: any;
    imageHeight?: any;
    imageLeft?: any;
    imageTop?: any;
    imageWidth?: any;
    maxHeight?: any;
    maxWidth?: any;
    minHeight?: any;
    minWidth?: any;
    template?: any;
    templateHeight?: any;
    templateLeft?: any;
    templateTop?: any;
    templateWidth?: any;
    textHeight?: any;
    textLeft?: any;
    textTop?: any;
    textWidth?: any;
    title?: any;
    type?: any;
    render?: (...params: any) => React.ReactNode;
    component?: React.ComponentType<any>;
    keyFn?: (data: any) => string;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static ExpectedChildren: {
        connectionPoint: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare class DefaultItemProperties extends NestedOption<{
    connectorLineEnd?: any;
    connectorLineStart?: any;
    connectorLineType?: any;
    style?: any;
    textStyle?: any;
}> {
    static OptionName: string;
}
declare class Edges extends NestedOption<{
    dataSource?: any;
    fromExpr?: any;
    fromLineEndExpr?: any;
    fromPointIndexExpr?: any;
    keyExpr?: any;
    lineTypeExpr?: any;
    lockedExpr?: any;
    pointsExpr?: any;
    styleExpr?: any;
    textExpr?: any;
    textStyleExpr?: any;
    toExpr?: any;
    toLineEndExpr?: any;
    toPointIndexExpr?: any;
    zIndexExpr?: any;
}> {
    static OptionName: string;
}
declare class Export extends NestedOption<{
    fileName?: any;
    proxyUrl?: any;
}> {
    static OptionName: string;
}
declare class GridSize extends NestedOption<{
    items?: any;
    value?: any;
}> {
    static OptionName: string;
}
declare class Group extends NestedOption<{
    commands?: any;
    title?: any;
    category?: any;
    displayMode?: any;
    expanded?: any;
    shapes?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
}
declare class HistoryToolbar extends NestedOption<{
    commands?: any;
    visible?: any;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        command: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class Item extends NestedOption<{
    icon?: any;
    items?: any;
    name?: any;
    text?: any;
    height?: any;
    width?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
}
declare class MainToolbar extends NestedOption<{
    commands?: any;
    visible?: any;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        command: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class Nodes extends NestedOption<{
    autoLayout?: {
        orientation?: any;
        type?: any;
    };
    containerChildrenExpr?: any;
    containerKeyExpr?: any;
    dataSource?: any;
    heightExpr?: any;
    imageUrlExpr?: any;
    itemsExpr?: any;
    keyExpr?: any;
    leftExpr?: any;
    lockedExpr?: any;
    parentKeyExpr?: any;
    styleExpr?: any;
    textExpr?: any;
    textStyleExpr?: any;
    topExpr?: any;
    typeExpr?: any;
    widthExpr?: any;
    zIndexExpr?: any;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        autoLayout: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class PageSize extends NestedOption<{
    height?: any;
    items?: {
        height?: any;
        text?: any;
        width?: any;
    };
    width?: any;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        item: {
            optionName: string;
            isCollectionItem: boolean;
        };
        pageSizeItem: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class PageSizeItem extends NestedOption<{
    height?: any;
    text?: any;
    width?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
}
declare class PropertiesPanel extends NestedOption<{
    tabs?: {
        commands?: any;
        groups?: {
            commands?: any;
            title?: any;
        };
        title?: any;
    };
    visibility?: any;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        tab: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class Tab extends NestedOption<{
    commands?: any;
    groups?: {
        commands?: any;
        title?: any;
    };
    title?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static ExpectedChildren: {
        command: {
            optionName: string;
            isCollectionItem: boolean;
        };
        group: {
            optionName: string;
            isCollectionItem: boolean;
        };
        tabGroup: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class TabGroup extends NestedOption<{
    commands?: any;
    title?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static ExpectedChildren: {
        command: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class Toolbox extends NestedOption<{
    groups?: {
        category?: any;
        displayMode?: any;
        expanded?: any;
        shapes?: any;
        title?: any;
    };
    visibility?: any;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        group: {
            optionName: string;
            isCollectionItem: boolean;
        };
        toolboxGroup: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class ToolboxGroup extends NestedOption<{
    category?: any;
    displayMode?: any;
    expanded?: any;
    shapes?: any;
    title?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
}
declare class ViewToolbar extends NestedOption<{
    commands?: any;
    visible?: any;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        command: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class ZoomLevel extends NestedOption<{
    items?: any;
    value?: any;
}> {
    static OptionName: string;
}
export default Diagram;
export { Diagram, IDiagramOptions, AutoLayout, Command, CommandItem, ConnectionPoint, ContextMenu, ContextToolbox, CustomShape, DefaultItemProperties, Edges, Export, GridSize, Group, HistoryToolbar, Item, MainToolbar, Nodes, PageSize, PageSizeItem, PropertiesPanel, Tab, TabGroup, Toolbox, ToolboxGroup, ViewToolbar, ZoomLevel };
