"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("react");
var constants_1 = require("./constants");
exports.useScrollIndicator = function (options) {
    if (options === void 0) { options = {}; }
    var _a = options.onElement, onElement = _a === void 0 ? constants_1.INITIAL_ON_ELEMENT : _a, _b = options.precision, precision = _b === void 0 ? constants_1.INITIAL_PRECISION : _b, _c = options.initialValue, initialValue = _c === void 0 ? constants_1.INITIAL_VALUE : _c;
    var roundFactor = react_1.useMemo(function () { return Math.pow(constants_1.PRECISION_BASE, precision); }, [
        precision
    ]);
    var targetElement = react_1.useRef(null);
    var _d = react_1.useState(initialValue), value = _d[0], setValue = _d[1];
    var handleValue = react_1.useCallback(function (scrolled) {
        var value = Math.round(scrolled * roundFactor) / roundFactor;
        setValue(Math.max(Math.min(value, constants_1.VALUE_MAX), constants_1.VALUE_MIN));
    }, [roundFactor]);
    var handleElementScroll = react_1.useCallback(function () {
        var _a = targetElement.current.getBoundingClientRect(), height = _a.height, top = _a.top;
        handleValue(((top * -1) / height) * constants_1.VALUE_MAX);
    }, []);
    var handlePageScroll = react_1.useCallback(function () {
        var _a = document.documentElement, scrollHeight = _a.scrollHeight, clientHeight = _a.clientHeight, scrollTop = _a.scrollTop;
        var winScroll = document.body.scrollTop || scrollTop;
        handleValue((winScroll / (scrollHeight - clientHeight)) * constants_1.VALUE_MAX);
    }, []);
    var listener = react_1.useMemo(function () { return (onElement ? handleElementScroll : handlePageScroll); }, [onElement]);
    react_1.useEffect(function () {
        window.addEventListener('scroll', listener);
        return function () {
            window.removeEventListener('scroll', listener);
        };
    }, []);
    var state = __assign({ value: value }, (onElement ? { targetElement: targetElement } : null));
    var api = react_1.useMemo(function () { return ({
        activeListener: listener,
        setScrollState: handleValue
    }); }, [listener, handleValue]);
    return [state, api];
};
