{"version":3,"file":"useMergedRefs.js","sourceRoot":"../src/","sources":["useMergedRefs.ts"],"names":[],"mappings":";;;AAAA,+BAA2D;AAC3D;;;;GAIG;AACH,SAAgB,aAAa;IAAI,cAA+B;SAA/B,UAA+B,EAA/B,qBAA+B,EAA/B,IAA+B;QAA/B,yBAA+B;;IAC9D,OAAO,mBAAW,CAChB,UAAC,KAAQ;QACP,KAAkB,UAAI,EAAJ,aAAI,EAAJ,kBAAI,EAAJ,IAAI,EAAE;YAAnB,IAAM,GAAG,aAAA;YACZ,IAAI,OAAO,GAAG,KAAK,UAAU,EAAE;gBAC7B,GAAG,CAAC,KAAK,CAAC,CAAC;aACZ;iBAAM,IAAI,GAAG,EAAE;gBACd,qDAAqD;gBACnD,GAAuC,CAAC,OAAO,GAAG,KAAK,CAAC;aAC3D;SACF;IACH,CAAC,yBAEG,IAAI,EACT,CAAC;AACJ,CAAC;AAfD,sCAeC","sourcesContent":["import { useCallback, Ref, MutableRefObject } from 'react';\n/**\n * React hook to merge multiple React refs (either MutableRefObjects or ref callbacks) into a single ref callback that\n * updates all provided refs\n * @param refs- Refs to collectively update with one ref value.\n */\nexport function useMergedRefs<T>(...refs: (Ref<T> | undefined)[]): (instance: T) => void {\n  return useCallback(\n    (value: T) => {\n      for (const ref of refs) {\n        if (typeof ref === 'function') {\n          ref(value);\n        } else if (ref) {\n          // work around the immutability of the React.Ref type\n          ((ref as unknown) as MutableRefObject<T>).current = value;\n        }\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- already exhaustive\n    [...refs],\n  );\n}\n"]}