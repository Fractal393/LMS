/*!
 * devextreme-react
 * Version: 20.1.6
 * Build date: Fri Jul 17 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

/// <reference types="react" />
import dxGantt, { IOptions } from "devextreme/ui/gantt";
import { Component as BaseComponent, IHtmlOptions } from "./core/component";
import NestedOption from "./core/nested-option";
interface IGanttOptions extends IOptions, IHtmlOptions {
}
declare class Gantt extends BaseComponent<IGanttOptions> {
    get instance(): dxGantt;
    protected _WidgetClass: typeof dxGantt;
    protected _expectedChildren: {
        column: {
            optionName: string;
            isCollectionItem: boolean;
        };
        dependencies: {
            optionName: string;
            isCollectionItem: boolean;
        };
        editing: {
            optionName: string;
            isCollectionItem: boolean;
        };
        resourceAssignments: {
            optionName: string;
            isCollectionItem: boolean;
        };
        resources: {
            optionName: string;
            isCollectionItem: boolean;
        };
        stripLine: {
            optionName: string;
            isCollectionItem: boolean;
        };
        tasks: {
            optionName: string;
            isCollectionItem: boolean;
        };
        toolbar: {
            optionName: string;
            isCollectionItem: boolean;
        };
        validation: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class AsyncRule extends NestedOption<{
    ignoreEmptyValue?: any;
    message?: any;
    reevaluate?: any;
    type?: any;
    validationCallback?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static PredefinedProps: {
        type: string;
    };
}
declare class Button extends NestedOption<{
    cssClass?: any;
    hint?: any;
    icon?: any;
    name?: any;
    onClick?: any;
    template?: any;
    text?: any;
    visible?: any;
    render?: (...params: any) => React.ReactNode;
    component?: React.ComponentType<any>;
    keyFn?: (data: any) => string;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare class Column extends NestedOption<{
    alignment?: any;
    allowEditing?: any;
    allowFiltering?: any;
    allowFixing?: any;
    allowHeaderFiltering?: any;
    allowHiding?: any;
    allowReordering?: any;
    allowResizing?: any;
    allowSearch?: any;
    allowSorting?: any;
    buttons?: any;
    calculateCellValue?: any;
    calculateDisplayValue?: any;
    calculateFilterExpression?: any;
    calculateSortValue?: any;
    caption?: any;
    cellTemplate?: any;
    columns?: any;
    cssClass?: any;
    customizeText?: any;
    dataField?: any;
    dataType?: any;
    editCellTemplate?: any;
    editorOptions?: any;
    encodeHtml?: any;
    falseText?: any;
    filterOperations?: any;
    filterType?: any;
    filterValue?: any;
    filterValues?: any;
    fixed?: any;
    fixedPosition?: any;
    format?: any;
    formItem?: any;
    headerCellTemplate?: any;
    headerFilter?: {
        allowSearch?: any;
        dataSource?: any;
        groupInterval?: any;
        height?: any;
        searchMode?: any;
        width?: any;
    };
    hidingPriority?: any;
    isBand?: any;
    lookup?: {
        allowClearing?: any;
        dataSource?: any;
        displayExpr?: any;
        valueExpr?: any;
    };
    minWidth?: any;
    name?: any;
    ownerBand?: any;
    renderAsync?: any;
    selectedFilterOperation?: any;
    setCellValue?: any;
    showEditorAlways?: any;
    showInColumnChooser?: any;
    sortIndex?: any;
    sortingMethod?: any;
    sortOrder?: any;
    trueText?: any;
    type?: any;
    validationRules?: any;
    visible?: any;
    visibleIndex?: any;
    width?: any;
    defaultFilterValue?: any;
    defaultFilterValues?: any;
    defaultSelectedFilterOperation?: any;
    defaultSortIndex?: any;
    defaultSortOrder?: any;
    defaultVisible?: any;
    defaultVisibleIndex?: any;
    cellRender?: (...params: any) => React.ReactNode;
    cellComponent?: React.ComponentType<any>;
    cellKeyFn?: (data: any) => string;
    editCellRender?: (...params: any) => React.ReactNode;
    editCellComponent?: React.ComponentType<any>;
    editCellKeyFn?: (data: any) => string;
    headerCellRender?: (...params: any) => React.ReactNode;
    headerCellComponent?: React.ComponentType<any>;
    headerCellKeyFn?: (data: any) => string;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static DefaultsProps: {
        defaultFilterValue: string;
        defaultFilterValues: string;
        defaultSelectedFilterOperation: string;
        defaultSortIndex: string;
        defaultSortOrder: string;
        defaultVisible: string;
        defaultVisibleIndex: string;
    };
    static ExpectedChildren: {
        AsyncRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        button: {
            optionName: string;
            isCollectionItem: boolean;
        };
        CompareRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        CustomRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        EmailRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        format: {
            optionName: string;
            isCollectionItem: boolean;
        };
        formItem: {
            optionName: string;
            isCollectionItem: boolean;
        };
        headerFilter: {
            optionName: string;
            isCollectionItem: boolean;
        };
        lookup: {
            optionName: string;
            isCollectionItem: boolean;
        };
        NumericRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        PatternRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        RangeRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        RequiredRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        StringLengthRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        validationRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare class CompareRule extends NestedOption<{
    comparisonTarget?: any;
    comparisonType?: any;
    ignoreEmptyValue?: any;
    message?: any;
    reevaluate?: any;
    type?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static PredefinedProps: {
        type: string;
    };
}
declare class CustomRule extends NestedOption<{
    ignoreEmptyValue?: any;
    message?: any;
    reevaluate?: any;
    type?: any;
    validationCallback?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static PredefinedProps: {
        type: string;
    };
}
declare class Dependencies extends NestedOption<{
    dataSource?: any;
    keyExpr?: any;
    predecessorIdExpr?: any;
    successorIdExpr?: any;
    typeExpr?: any;
}> {
    static OptionName: string;
}
declare class Editing extends NestedOption<{
    allowDependencyAdding?: any;
    allowDependencyDeleting?: any;
    allowResourceAdding?: any;
    allowResourceDeleting?: any;
    allowResourceUpdating?: any;
    allowTaskAdding?: any;
    allowTaskDeleting?: any;
    allowTaskUpdating?: any;
    enabled?: any;
}> {
    static OptionName: string;
}
declare class EmailRule extends NestedOption<{
    ignoreEmptyValue?: any;
    message?: any;
    type?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static PredefinedProps: {
        type: string;
    };
}
declare class Format extends NestedOption<{
    currency?: any;
    formatter?: any;
    parser?: any;
    precision?: any;
    type?: any;
}> {
    static OptionName: string;
}
declare class FormItem extends NestedOption<{
    colSpan?: any;
    cssClass?: any;
    dataField?: any;
    editorOptions?: any;
    editorType?: any;
    helpText?: any;
    isRequired?: any;
    itemType?: any;
    label?: {
        alignment?: any;
        location?: any;
        showColon?: any;
        text?: any;
        visible?: any;
    };
    name?: any;
    template?: any;
    validationRules?: any;
    visible?: any;
    visibleIndex?: any;
    render?: (...params: any) => React.ReactNode;
    component?: React.ComponentType<any>;
    keyFn?: (data: any) => string;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        AsyncRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        CompareRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        CustomRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        EmailRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        label: {
            optionName: string;
            isCollectionItem: boolean;
        };
        NumericRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        PatternRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        RangeRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        RequiredRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        StringLengthRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        validationRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare class HeaderFilter extends NestedOption<{
    allowSearch?: any;
    dataSource?: any;
    groupInterval?: any;
    height?: any;
    searchMode?: any;
    width?: any;
}> {
    static OptionName: string;
}
declare class Item extends NestedOption<{
    cssClass?: any;
    disabled?: any;
    html?: any;
    locateInMenu?: any;
    location?: any;
    menuItemTemplate?: any;
    name?: any;
    options?: any;
    showText?: any;
    template?: any;
    text?: any;
    visible?: any;
    widget?: any;
    menuItemRender?: (...params: any) => React.ReactNode;
    menuItemComponent?: React.ComponentType<any>;
    menuItemKeyFn?: (data: any) => string;
    render?: (...params: any) => React.ReactNode;
    component?: React.ComponentType<any>;
    keyFn?: (data: any) => string;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare class Label extends NestedOption<{
    alignment?: any;
    location?: any;
    showColon?: any;
    text?: any;
    visible?: any;
}> {
    static OptionName: string;
}
declare class Lookup extends NestedOption<{
    allowClearing?: any;
    dataSource?: any;
    displayExpr?: any;
    valueExpr?: any;
}> {
    static OptionName: string;
}
declare class NumericRule extends NestedOption<{
    ignoreEmptyValue?: any;
    message?: any;
    type?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static PredefinedProps: {
        type: string;
    };
}
declare class PatternRule extends NestedOption<{
    ignoreEmptyValue?: any;
    message?: any;
    pattern?: any;
    type?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static PredefinedProps: {
        type: string;
    };
}
declare class RangeRule extends NestedOption<{
    ignoreEmptyValue?: any;
    max?: any;
    message?: any;
    min?: any;
    reevaluate?: any;
    type?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static PredefinedProps: {
        type: string;
    };
}
declare class RequiredRule extends NestedOption<{
    message?: any;
    trim?: any;
    type?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static PredefinedProps: {
        type: string;
    };
}
declare class ResourceAssignments extends NestedOption<{
    dataSource?: any;
    keyExpr?: any;
    resourceIdExpr?: any;
    taskIdExpr?: any;
}> {
    static OptionName: string;
}
declare class Resources extends NestedOption<{
    colorExpr?: any;
    dataSource?: any;
    keyExpr?: any;
    textExpr?: any;
}> {
    static OptionName: string;
}
declare class StringLengthRule extends NestedOption<{
    ignoreEmptyValue?: any;
    max?: any;
    message?: any;
    min?: any;
    trim?: any;
    type?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static PredefinedProps: {
        type: string;
    };
}
declare class StripLine extends NestedOption<{
    cssClass?: any;
    end?: any;
    start?: any;
    title?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
}
declare class Tasks extends NestedOption<{
    colorExpr?: any;
    dataSource?: any;
    endExpr?: any;
    keyExpr?: any;
    parentIdExpr?: any;
    progressExpr?: any;
    startExpr?: any;
    titleExpr?: any;
}> {
    static OptionName: string;
}
declare class Toolbar extends NestedOption<{
    items?: any;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        item: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class Validation extends NestedOption<{
    autoUpdateParentTasks?: any;
    validateDependencies?: any;
}> {
    static OptionName: string;
}
declare class ValidationRule extends NestedOption<{
    message?: any;
    trim?: any;
    type?: any;
    ignoreEmptyValue?: any;
    max?: any;
    min?: any;
    reevaluate?: any;
    validationCallback?: any;
    comparisonTarget?: any;
    comparisonType?: any;
    pattern?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static PredefinedProps: {
        type: string;
    };
}
export default Gantt;
export { Gantt, IGanttOptions, AsyncRule, Button, Column, CompareRule, CustomRule, Dependencies, Editing, EmailRule, Format, FormItem, HeaderFilter, Item, Label, Lookup, NumericRule, PatternRule, RangeRule, RequiredRule, ResourceAssignments, Resources, StringLengthRule, StripLine, Tasks, Toolbar, Validation, ValidationRule };
