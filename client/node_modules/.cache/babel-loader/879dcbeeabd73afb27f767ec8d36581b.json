{"ast":null,"code":"/**\r\n * DevExtreme (events/core/emitter.feedback.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar Class = require(\"../../core/class\");\n\nvar commonUtils = require(\"../../core/utils/common\");\n\nvar contains = require(\"../../core/utils/dom\").contains;\n\nvar devices = require(\"../../core/devices\");\n\nvar eventUtils = require(\"../utils\");\n\nvar pointerEvents = require(\"../pointer\");\n\nvar Emitter = require(\"./emitter\");\n\nvar registerEmitter = require(\"./emitter_registrator\");\n\nvar ACTIVE_EVENT_NAME = \"dxactive\";\nvar INACTIVE_EVENT_NAME = \"dxinactive\";\nvar ACTIVE_TIMEOUT = 30;\nvar INACTIVE_TIMEOUT = 400;\nvar FeedbackEvent = Class.inherit({\n  ctor: function (timeout, fire) {\n    this._timeout = timeout;\n    this._fire = fire;\n  },\n  start: function () {\n    var that = this;\n\n    this._schedule(function () {\n      that.force();\n    });\n  },\n  _schedule: function (fn) {\n    this.stop();\n    this._timer = setTimeout(fn, this._timeout);\n  },\n  stop: function () {\n    clearTimeout(this._timer);\n  },\n  force: function () {\n    if (this._fired) {\n      return;\n    }\n\n    this.stop();\n\n    this._fire();\n\n    this._fired = true;\n  },\n  fired: function () {\n    return this._fired;\n  }\n});\nvar activeFeedback;\nvar FeedbackEmitter = Emitter.inherit({\n  ctor: function () {\n    this.callBase.apply(this, arguments);\n    this._active = new FeedbackEvent(0, commonUtils.noop);\n    this._inactive = new FeedbackEvent(0, commonUtils.noop);\n  },\n  configure: function (data, eventName) {\n    switch (eventName) {\n      case ACTIVE_EVENT_NAME:\n        data.activeTimeout = data.timeout;\n        break;\n\n      case INACTIVE_EVENT_NAME:\n        data.inactiveTimeout = data.timeout;\n    }\n\n    this.callBase(data);\n  },\n  start: function (e) {\n    if (activeFeedback) {\n      var activeChildExists = contains(this.getElement().get(0), activeFeedback.getElement().get(0));\n      var childJustActivated = !activeFeedback._active.fired();\n\n      if (activeChildExists && childJustActivated) {\n        this._cancel();\n\n        return;\n      }\n\n      activeFeedback._inactive.force();\n    }\n\n    activeFeedback = this;\n\n    this._initEvents(e);\n\n    this._active.start();\n  },\n  _initEvents: function (e) {\n    var that = this;\n\n    var eventTarget = this._getEmitterTarget(e);\n\n    var mouseEvent = eventUtils.isMouseEvent(e);\n    var isSimulator = devices.isSimulator();\n    var deferFeedback = isSimulator || !mouseEvent;\n    var activeTimeout = commonUtils.ensureDefined(this.activeTimeout, ACTIVE_TIMEOUT);\n    var inactiveTimeout = commonUtils.ensureDefined(this.inactiveTimeout, INACTIVE_TIMEOUT);\n    this._active = new FeedbackEvent(deferFeedback ? activeTimeout : 0, function () {\n      that._fireEvent(ACTIVE_EVENT_NAME, e, {\n        target: eventTarget\n      });\n    });\n    this._inactive = new FeedbackEvent(deferFeedback ? inactiveTimeout : 0, function () {\n      that._fireEvent(INACTIVE_EVENT_NAME, e, {\n        target: eventTarget\n      });\n\n      activeFeedback = null;\n    });\n  },\n  cancel: function (e) {\n    this.end(e);\n  },\n  end: function (e) {\n    var skipTimers = e.type !== pointerEvents.up;\n\n    if (skipTimers) {\n      this._active.stop();\n    } else {\n      this._active.force();\n    }\n\n    this._inactive.start();\n\n    if (skipTimers) {\n      this._inactive.force();\n    }\n  },\n  dispose: function () {\n    this._active.stop();\n\n    this._inactive.stop();\n\n    this.callBase();\n  },\n  lockInactive: function () {\n    this._active.force();\n\n    this._inactive.stop();\n\n    activeFeedback = null;\n\n    this._cancel();\n\n    return this._inactive.force.bind(this._inactive);\n  }\n});\n\nFeedbackEmitter.lock = function (deferred) {\n  var lockInactive = activeFeedback ? activeFeedback.lockInactive() : commonUtils.noop;\n  deferred.done(lockInactive);\n};\n\nregisterEmitter({\n  emitter: FeedbackEmitter,\n  events: [ACTIVE_EVENT_NAME, INACTIVE_EVENT_NAME]\n});\nexports.lock = FeedbackEmitter.lock;\nexports.active = ACTIVE_EVENT_NAME;\nexports.inactive = INACTIVE_EVENT_NAME;","map":null,"metadata":{},"sourceType":"script"}