{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { PdfBorders, PdfPaddings } from './pdf-borders';\nimport { PdfBorderOverlapStyle } from './../../tables/light-tables/enum';\n/**\n * Base class for the `grid style`,\n */\n\nvar PdfGridStyleBase =\n/** @class */\nfunction () {\n  function PdfGridStyleBase() {}\n\n  Object.defineProperty(PdfGridStyleBase.prototype, \"backgroundBrush\", {\n    // Properties\n\n    /**\n     * Gets or sets the `background brush`.\n     * @private\n     */\n    get: function () {\n      return this.gridBackgroundBrush;\n    },\n    set: function (value) {\n      this.gridBackgroundBrush = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridStyleBase.prototype, \"textBrush\", {\n    /**\n     * Gets or sets the `text brush`.\n     * @private\n     */\n    get: function () {\n      return this.gridTextBrush;\n    },\n    set: function (value) {\n      this.gridTextBrush = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridStyleBase.prototype, \"textPen\", {\n    /**\n     * Gets or sets the `text pen`.\n     * @private\n     */\n    get: function () {\n      return this.gridTextPen;\n    },\n    set: function (value) {\n      this.gridTextPen = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridStyleBase.prototype, \"font\", {\n    /**\n     * Gets or sets the `font`.\n     * @private\n     */\n    get: function () {\n      return this.gridFont;\n    },\n    set: function (value) {\n      this.gridFont = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridStyleBase.prototype, \"backgroundImage\", {\n    /**\n     * Gets or sets the `background Image`.\n     * @private\n     */\n    get: function () {\n      return this.gridBackgroundImage;\n    },\n    set: function (value) {\n      this.gridBackgroundImage = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfGridStyleBase;\n}();\n\nexport { PdfGridStyleBase };\n/**\n * `PdfGridStyle` class provides customization of the appearance for the 'PdfGrid'.\n */\n\nvar PdfGridStyle =\n/** @class */\nfunction (_super) {\n  __extends(PdfGridStyle, _super); //constructor\n\n  /**\n   * Initialize a new instance for `PdfGridStyle` class.\n   * @private\n   */\n\n\n  function PdfGridStyle() {\n    var _this = _super.call(this) || this;\n\n    _this.gridBorderOverlapStyle = PdfBorderOverlapStyle.Overlap;\n    _this.bAllowHorizontalOverflow = false;\n    _this.gridHorizontalOverflowType = PdfHorizontalOverflowType.LastPage;\n    return _this;\n  }\n\n  Object.defineProperty(PdfGridStyle.prototype, \"cellSpacing\", {\n    //Properties\n\n    /**\n     * Gets or sets the `cell spacing` of the 'PdfGrid'.\n     * @private\n     */\n    get: function () {\n      if (typeof this.gridCellSpacing === 'undefined') {\n        this.gridCellSpacing = 0;\n      }\n\n      return this.gridCellSpacing;\n    },\n    set: function (value) {\n      this.gridCellSpacing = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridStyle.prototype, \"horizontalOverflowType\", {\n    /**\n     * Gets or sets the type of the `horizontal overflow` of the 'PdfGrid'.\n     * @private\n     */\n    get: function () {\n      return this.gridHorizontalOverflowType;\n    },\n    set: function (value) {\n      this.gridHorizontalOverflowType = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridStyle.prototype, \"allowHorizontalOverflow\", {\n    /**\n     * Gets or sets a value indicating whether to `allow horizontal overflow`.\n     * @private\n     */\n    get: function () {\n      return this.bAllowHorizontalOverflow;\n    },\n    set: function (value) {\n      this.bAllowHorizontalOverflow = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridStyle.prototype, \"cellPadding\", {\n    /**\n     * Gets or sets the `cell padding`.\n     * @private\n     */\n    get: function () {\n      if (typeof this.gridCellPadding === 'undefined') {\n        this.gridCellPadding = new PdfPaddings();\n      }\n\n      return this.gridCellPadding;\n    },\n    set: function (value) {\n      if (typeof this.gridCellPadding === 'undefined') {\n        this.gridCellPadding = new PdfPaddings();\n        this.gridCellPadding = value;\n      } else {\n        this.gridCellPadding = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridStyle.prototype, \"borderOverlapStyle\", {\n    /**\n     * Gets or sets the `border overlap style` of the 'PdfGrid'.\n     * @private\n     */\n    get: function () {\n      return this.gridBorderOverlapStyle;\n    },\n    set: function (value) {\n      this.gridBorderOverlapStyle = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfGridStyle;\n}(PdfGridStyleBase);\n\nexport { PdfGridStyle };\n/**\n * `PdfGridCellStyle` class provides customization of the appearance for the 'PdfGridCell'.\n */\n\nvar PdfGridCellStyle =\n/** @class */\nfunction (_super) {\n  __extends(PdfGridCellStyle, _super);\n  /**\n   * Initializes a new instance of the `PdfGridCellStyle` class.\n   * @private\n   */\n\n\n  function PdfGridCellStyle() {\n    var _this = _super.call(this) || this;\n    /**\n     * @hidden\n     * @private\n     */\n\n\n    _this.gridCellBorders = PdfBorders.default;\n    return _this;\n  }\n\n  Object.defineProperty(PdfGridCellStyle.prototype, \"stringFormat\", {\n    //Properties\n\n    /**\n     * Gets the `string format` of the 'PdfGridCell'.\n     * @private\n     */\n    get: function () {\n      return this.format;\n    },\n    set: function (value) {\n      this.format = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCellStyle.prototype, \"borders\", {\n    /**\n     * Gets or sets the `border` of the 'PdfGridCell'.\n     * @private\n     */\n    get: function () {\n      return this.gridCellBorders;\n    },\n    set: function (value) {\n      this.gridCellBorders = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCellStyle.prototype, \"cellPadding\", {\n    /**\n     * Gets or sets the `cell padding`.\n     * @private\n     */\n    get: function () {\n      return this.gridCellPadding;\n    },\n    set: function (value) {\n      if (this.gridCellPadding == null || typeof this.gridCellPadding === 'undefined') {\n        this.gridCellPadding = new PdfPaddings();\n      }\n\n      this.gridCellPadding = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfGridCellStyle;\n}(PdfGridStyleBase);\n\nexport { PdfGridCellStyle };\n/**\n * `PdfGridRowStyle` class provides customization of the appearance for the `PdfGridRow`.\n */\n\nvar PdfGridRowStyle =\n/** @class */\nfunction () {\n  // public setBackgroundImage(value : PdfImage) : void {\n  //     this.gridRowBackgroundImage = value;\n  //     if (typeof this.parent !== 'undefined') {\n  //         for (let i : number = 0; i < this.parent.cells.count; i++) {\n  //             this.parent.cells.getCell(i).style.backgroundImage = value;\n  //         }\n  //     }\n  // }\n  // Constructor\n\n  /**\n   * Initializes a new instance of the `PdfGridRowStyle` class.\n   * @private\n   */\n  function PdfGridRowStyle() {//\n  }\n\n  Object.defineProperty(PdfGridRowStyle.prototype, \"backgroundBrush\", {\n    // Properties\n\n    /**\n     * Gets or sets the `background brush`.\n     * @private\n     */\n    get: function () {\n      return this.gridRowBackgroundBrush;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PdfGridRowStyle.prototype.setBackgroundBrush = function (value) {\n    this.gridRowBackgroundBrush = value;\n\n    if (typeof this.parent !== 'undefined') {\n      for (var i = 0; i < this.parent.cells.count; i++) {\n        this.parent.cells.getCell(i).style.backgroundBrush = value;\n      }\n    }\n  };\n\n  Object.defineProperty(PdfGridRowStyle.prototype, \"textBrush\", {\n    /**\n     * Gets or sets the `text brush`.\n     * @private\n     */\n    get: function () {\n      return this.gridRowTextBrush;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PdfGridRowStyle.prototype.setTextBrush = function (value) {\n    this.gridRowTextBrush = value;\n\n    if (typeof this.parent !== 'undefined') {\n      for (var i = 0; i < this.parent.cells.count; i++) {\n        this.parent.cells.getCell(i).style.textBrush = value;\n      }\n    }\n  };\n\n  Object.defineProperty(PdfGridRowStyle.prototype, \"textPen\", {\n    /**\n     * Gets or sets the `text pen`.\n     * @private\n     */\n    get: function () {\n      return this.gridRowTextPen;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PdfGridRowStyle.prototype.setTextPen = function (value) {\n    this.gridRowTextPen = value;\n\n    if (typeof this.parent !== 'undefined') {\n      for (var i = 0; i < this.parent.cells.count; i++) {\n        this.parent.cells.getCell(i).style.textPen = value;\n      }\n    }\n  };\n\n  Object.defineProperty(PdfGridRowStyle.prototype, \"font\", {\n    /**\n     * Gets or sets the `font`.\n     * @private\n     */\n    get: function () {\n      return this.gridRowFont;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PdfGridRowStyle.prototype.setFont = function (value) {\n    this.gridRowFont = value;\n\n    if (typeof this.parent !== 'undefined') {\n      for (var i = 0; i < this.parent.cells.count; i++) {\n        this.parent.cells.getCell(i).style.font = value;\n      }\n    }\n  };\n\n  Object.defineProperty(PdfGridRowStyle.prototype, \"border\", {\n    /**\n     * Gets or sets the `border` of the current row.\n     * @private\n     */\n    get: function () {\n      if (typeof this.gridRowBorder === 'undefined') {\n        this.setBorder(new PdfBorders());\n      }\n\n      return this.gridRowBorder;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PdfGridRowStyle.prototype.setBorder = function (value) {\n    this.gridRowBorder = value;\n\n    if (typeof this.parent !== 'undefined') {\n      for (var i = 0; i < this.parent.cells.count; i++) {\n        this.parent.cells.getCell(i).style.borders = value;\n      }\n    }\n  };\n  /**\n   * sets the `parent row` of the current object.\n   * @private\n   */\n\n\n  PdfGridRowStyle.prototype.setParent = function (parent) {\n    this.parent = parent;\n  };\n\n  Object.defineProperty(PdfGridRowStyle.prototype, \"backgroundImage\", {\n    /**\n     * Gets or sets the `backgroundImage` of the 'PdfGridCell'.\n     * @private\n     */\n    get: function () {\n      return this.gridRowBackgroundImage;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfGridRowStyle;\n}();\n\nexport { PdfGridRowStyle };\n/**\n * public Enum for `PdfHorizontalOverflowType`.\n * @private\n */\n\nexport var PdfHorizontalOverflowType;\n\n(function (PdfHorizontalOverflowType) {\n  /**\n   * Specifies the type of `NextPage`.\n   * @private\n   */\n  PdfHorizontalOverflowType[PdfHorizontalOverflowType[\"NextPage\"] = 0] = \"NextPage\";\n  /**\n   * Specifies the type of `LastPage`.\n   * @private\n   */\n\n  PdfHorizontalOverflowType[PdfHorizontalOverflowType[\"LastPage\"] = 1] = \"LastPage\";\n})(PdfHorizontalOverflowType || (PdfHorizontalOverflowType = {}));","map":null,"metadata":{},"sourceType":"module"}