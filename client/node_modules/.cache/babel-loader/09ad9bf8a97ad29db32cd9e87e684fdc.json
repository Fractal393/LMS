{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.virtual_scrolling.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _window = require(\"../../core/utils/window\");\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _uiGrid_core = require(\"./ui.grid_core.virtual_scrolling_core\");\n\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\n\nvar _uiGrid_core3 = require(\"./ui.grid_core.utils\");\n\nvar _uiGrid_core4 = _interopRequireDefault(_uiGrid_core3);\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nvar _translator = require(\"../../animation/translator\");\n\nvar _translator2 = _interopRequireDefault(_translator);\n\nvar _load_indicator = require(\"../load_indicator\");\n\nvar _load_indicator2 = _interopRequireDefault(_load_indicator);\n\nvar _browser = require(\"../../core/utils/browser\");\n\nvar _browser2 = _interopRequireDefault(_browser);\n\nvar _position = require(\"../../core/utils/position\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar TABLE_CLASS = \"table\";\nvar BOTTOM_LOAD_PANEL_CLASS = \"bottom-load-panel\";\nvar TABLE_CONTENT_CLASS = \"table-content\";\nvar GROUP_SPACE_CLASS = \"group-space\";\nvar CONTENT_CLASS = \"content\";\nvar ROW_CLASS = \"dx-row\";\nvar FREESPACE_CLASS = \"dx-freespace-row\";\nvar COLUMN_LINES_CLASS = \"dx-column-lines\";\nvar VIRTUAL_ROW_CLASS = \"dx-virtual-row\";\nvar SCROLLING_MODE_INFINITE = \"infinite\";\nvar SCROLLING_MODE_VIRTUAL = \"virtual\";\nvar SCROLLING_MODE_STANDARD = \"standard\";\nvar PIXELS_LIMIT = 25e4;\nvar LOAD_TIMEOUT = 300;\n\nvar isVirtualMode = function (that) {\n  return that.option(\"scrolling.mode\") === SCROLLING_MODE_VIRTUAL;\n};\n\nvar isAppendMode = function (that) {\n  return that.option(\"scrolling.mode\") === SCROLLING_MODE_INFINITE;\n};\n\nvar isVirtualRowRendering = function (that) {\n  var rowRenderingMode = that.option(\"scrolling.rowRenderingMode\");\n\n  if (rowRenderingMode === SCROLLING_MODE_VIRTUAL) {\n    return true;\n  } else {\n    if (rowRenderingMode === SCROLLING_MODE_STANDARD) {\n      return false;\n    }\n  }\n};\n\nvar _correctCount = function (items, count, fromEnd, isItemCountableFunc) {\n  var countCorrection = fromEnd ? 0 : 1;\n\n  for (var i = 0; i < count + countCorrection; i++) {\n    var item = items[fromEnd ? items.length - 1 - i : i];\n\n    if (item && !isItemCountableFunc(item, i === count)) {\n      count++;\n    }\n  }\n\n  return count;\n};\n\nvar VirtualScrollingDataSourceAdapterExtender = function () {\n  var _updateLoading = function (that) {\n    var beginPageIndex = that._virtualScrollController.beginPageIndex(-1);\n\n    if (isVirtualMode(that)) {\n      if (beginPageIndex < 0 || that.viewportSize() >= 0 && that.getViewportItemIndex() >= 0 && (beginPageIndex * that.pageSize() > that.getViewportItemIndex() || beginPageIndex * that.pageSize() + that.itemsCount() < that.getViewportItemIndex() + that.viewportSize()) && that._dataSource.isLoading()) {\n        if (!that._isLoading) {\n          that._isLoading = true;\n          that.loadingChanged.fire(true);\n        }\n      } else {\n        if (that._isLoading) {\n          that._isLoading = false;\n          that.loadingChanged.fire(false);\n        }\n      }\n    }\n  };\n\n  var result = {\n    init: function (dataSource) {\n      var that = this;\n      that.callBase.apply(that, arguments);\n      that._items = [];\n      that._isLoaded = true;\n      that._virtualScrollController = new _uiGrid_core2.default.VirtualScrollController(that.component, {\n        pageSize: function () {\n          return that.pageSize();\n        },\n        totalItemsCount: function () {\n          return that.totalItemsCount();\n        },\n        hasKnownLastPage: function () {\n          return that.hasKnownLastPage();\n        },\n        pageIndex: function (index) {\n          return dataSource.pageIndex(index);\n        },\n        isLoading: function () {\n          return dataSource.isLoading() && !that.isCustomLoading();\n        },\n        pageCount: function () {\n          return that.pageCount();\n        },\n        load: function () {\n          return dataSource.load();\n        },\n        updateLoading: function () {\n          _updateLoading(that);\n        },\n        itemsCount: function () {\n          return that.itemsCount(true);\n        },\n        items: function () {\n          return dataSource.items();\n        },\n        viewportItems: function (items) {\n          if (items) {\n            that._items = items;\n          }\n\n          return that._items;\n        },\n        onChanged: function (e) {\n          that.changed.fire(e);\n        },\n        changingDuration: function (e) {\n          if (that.isLoading()) {\n            return LOAD_TIMEOUT;\n          }\n\n          return that._renderTime || 0;\n        }\n      });\n    },\n    _handleLoadingChanged: function (isLoading) {\n      var that = this;\n\n      if (!isVirtualMode(that)) {\n        that._isLoading = isLoading;\n        that.callBase.apply(that, arguments);\n      }\n\n      if (isLoading) {\n        that._startLoadTime = new Date();\n      } else {\n        that._startLoadTime = void 0;\n      }\n    },\n    _handleLoadError: function () {\n      var that = this;\n      that._isLoading = false;\n      that.loadingChanged.fire(false);\n      that.callBase.apply(that, arguments);\n    },\n    _handleDataChanged: function (e) {\n      var callBase = this.callBase.bind(this);\n\n      this._virtualScrollController.handleDataChanged(callBase, e);\n    },\n    _customizeRemoteOperations: function (options, isReload, operationTypes) {\n      var that = this;\n\n      if (!that.option(\"legacyRendering\") && isVirtualMode(that) && !(operationTypes.reload || isReload) && operationTypes.skip && that._renderTime < that.option(\"scrolling.renderingThreshold\")) {\n        options.delay = void 0;\n      }\n\n      that.callBase.apply(that, arguments);\n    },\n    items: function () {\n      return this._items;\n    },\n    itemsCount: function (isBase) {\n      if (isBase) {\n        return this.callBase();\n      }\n\n      return this._virtualScrollController.itemsCount();\n    },\n    load: function (loadOptions) {\n      if (loadOptions) {\n        return this.callBase(loadOptions);\n      }\n\n      return this._virtualScrollController.load();\n    },\n    isLoading: function () {\n      return this._isLoading;\n    },\n    isLoaded: function () {\n      return this._dataSource.isLoaded() && this._isLoaded;\n    },\n    resetPagesCache: function (isLiveUpdate) {\n      if (!isLiveUpdate) {\n        this._virtualScrollController.reset(true);\n      }\n\n      this.callBase.apply(this, arguments);\n    },\n    _changeRowExpandCore: function () {\n      var result = this.callBase.apply(this, arguments);\n      this.resetPagesCache();\n\n      _updateLoading(this);\n\n      return result;\n    },\n    reload: function () {\n      this._dataSource.pageIndex(this.pageIndex());\n\n      var virtualScrollController = this._virtualScrollController;\n\n      if (virtualScrollController) {\n        var d = new _deferred.Deferred();\n        this.callBase.apply(this, arguments).done(function (r) {\n          var delayDeferred = virtualScrollController._delayDeferred;\n\n          if (delayDeferred) {\n            delayDeferred.done(d.resolve).fail(d.reject);\n          } else {\n            d.resolve(r);\n          }\n        }).fail(d.reject);\n        return d;\n      } else {\n        return this.callBase.apply(this, arguments);\n      }\n    },\n    refresh: function (options, isReload, operationTypes) {\n      var that = this;\n      var storeLoadOptions = options.storeLoadOptions;\n      var dataSource = that._dataSource;\n\n      if (isReload || operationTypes.reload) {\n        that._virtualScrollController.reset();\n\n        dataSource.items().length = 0;\n        that._isLoaded = false;\n\n        _updateLoading(that);\n\n        that._isLoaded = true;\n\n        if (isAppendMode(that)) {\n          that.pageIndex(0);\n          dataSource.pageIndex(0);\n          storeLoadOptions.pageIndex = 0;\n          options.pageIndex = 0;\n          storeLoadOptions.skip = 0;\n        } else {\n          dataSource.pageIndex(that.pageIndex());\n\n          if (dataSource.paginate()) {\n            options.pageIndex = that.pageIndex();\n            storeLoadOptions.skip = that.pageIndex() * that.pageSize();\n          }\n        }\n      } else {\n        if (isAppendMode(that) && storeLoadOptions.skip) {\n          storeLoadOptions.skip += that._skipCorrection;\n        }\n      }\n\n      return that.callBase.apply(that, arguments);\n    },\n    dispose: function () {\n      this._virtualScrollController.dispose();\n\n      this.callBase.apply(this, arguments);\n    }\n  };\n  [\"virtualItemsCount\", \"getContentOffset\", \"getVirtualContentSize\", \"setContentSize\", \"setViewportPosition\", \"getViewportItemIndex\", \"setViewportItemIndex\", \"getItemIndexByPosition\", \"viewportSize\", \"viewportItemSize\", \"getItemSize\", \"getItemSizes\", \"pageIndex\", \"beginPageIndex\", \"endPageIndex\", \"loadIfNeed\"].forEach(function (name) {\n    result[name] = function () {\n      var virtualScrollController = this._virtualScrollController;\n      return virtualScrollController[name].apply(virtualScrollController, arguments);\n    };\n  });\n  return result;\n}();\n\nvar VirtualScrollingRowsViewExtender = function () {\n  var removeEmptyRows = function ($emptyRows, className) {\n    var getRowParent = function (row) {\n      return (0, _renderer2.default)(row).parent(\".\" + className).get(0);\n    };\n\n    var tBodies = $emptyRows.toArray().map(getRowParent).filter(function (row) {\n      return row;\n    });\n\n    if (tBodies.length) {\n      $emptyRows = (0, _renderer2.default)(tBodies);\n    }\n\n    var rowCount = className === FREESPACE_CLASS ? $emptyRows.length - 1 : $emptyRows.length;\n\n    for (var i = 0; i < rowCount; i++) {\n      $emptyRows.eq(i).remove();\n    }\n  };\n\n  return {\n    init: function () {\n      var _dataController$state,\n          _this = this;\n\n      var dataController = this.getController(\"data\");\n      this.callBase();\n      dataController.pageChanged.add(function () {\n        _this.scrollToPage(dataController.pageIndex());\n      });\n      null === (_dataController$state = dataController.stateLoaded) || void 0 === _dataController$state ? void 0 : _dataController$state.add(function () {\n        _this._scrollToCurrentPageOnResize();\n      });\n\n      this._scrollToCurrentPageOnResize();\n    },\n    _scrollToCurrentPageOnResize: function () {\n      var _this2 = this;\n\n      var dataController = this.getController(\"data\");\n\n      if (!this.option(\"legacyRendering\") && dataController.pageIndex() > 0) {\n        var resizeHandler = function resizeHandler() {\n          _this2.resizeCompleted.remove(resizeHandler);\n\n          _this2.scrollToPage(dataController.pageIndex());\n        };\n\n        this.resizeCompleted.add(resizeHandler);\n      }\n    },\n    scrollToPage: function (pageIndex) {\n      var that = this;\n      var dataController = that._dataController;\n      var pageSize = dataController ? dataController.pageSize() : 0;\n      var scrollPosition;\n\n      if (isVirtualMode(that) || isAppendMode(that)) {\n        var itemSize = dataController.getItemSize();\n        var itemSizes = dataController.getItemSizes();\n        var itemIndex = pageIndex * pageSize;\n        scrollPosition = itemIndex * itemSize;\n\n        for (var index in itemSizes) {\n          if (index <= itemIndex) {\n            scrollPosition += itemSizes[index] - itemSize;\n          }\n        }\n      } else {\n        scrollPosition = 0;\n      }\n\n      that.scrollTo({\n        y: scrollPosition,\n        x: that._scrollLeft\n      });\n    },\n    renderDelayedTemplates: function (e) {\n      this._updateContentPosition(true);\n\n      this.callBase.apply(this, arguments);\n    },\n    _renderCore: function (e) {\n      var that = this;\n      var startRenderTime = new Date();\n      that.callBase.apply(that, arguments);\n      var dataSource = that._dataController._dataSource;\n\n      if (dataSource && e) {\n        var itemCount = e.items ? e.items.length : 20;\n        var viewportSize = that._dataController.viewportSize() || 20;\n\n        if (isVirtualRowRendering(that)) {\n          dataSource._renderTime = (new Date() - startRenderTime) * viewportSize / itemCount;\n        } else {\n          dataSource._renderTime = new Date() - startRenderTime;\n        }\n      }\n    },\n    _getRowElements: function (tableElement) {\n      var $rows = this.callBase(tableElement);\n      return $rows && $rows.not(\".\" + VIRTUAL_ROW_CLASS);\n    },\n    _renderContent: function (contentElement, tableElement) {\n      var that = this;\n\n      var virtualItemsCount = that._dataController.virtualItemsCount();\n\n      if (virtualItemsCount && that.option(\"legacyRendering\")) {\n        if ((0, _window.hasWindow)()) {\n          tableElement.addClass(that.addWidgetPrefix(TABLE_CONTENT_CLASS));\n        }\n\n        if (!contentElement.children().length) {\n          contentElement.append(tableElement);\n        } else {\n          contentElement.children().first().replaceWith(tableElement);\n        }\n\n        if (1 === contentElement.children(\"table\").length) {\n          contentElement.append(that._createTable());\n          that._contentHeight = 0;\n        }\n\n        return contentElement;\n      }\n\n      return that.callBase.apply(that, arguments);\n    },\n    _removeRowsElements: function (contentTable, removeCount, changeType) {\n      var rowElements = this._getRowElements(contentTable).toArray();\n\n      if (\"append\" === changeType) {\n        rowElements = rowElements.slice(0, removeCount);\n      } else {\n        rowElements = rowElements.slice(-removeCount);\n      }\n\n      var errorHandlingController = this.getController(\"errorHandling\");\n      rowElements.map(function (rowElement) {\n        var $rowElement = (0, _renderer2.default)(rowElement);\n        errorHandlingController && errorHandlingController.removeErrorRow($rowElement.next());\n        $rowElement.remove();\n      });\n    },\n    _restoreErrorRow: function (contentTable) {\n      var editingController = this.getController(\"editing\");\n      editingController && editingController.hasChanges() && this._getRowElements(contentTable).each(function (_, item) {\n        var rowOptions = (0, _renderer2.default)(item).data(\"options\");\n\n        if (rowOptions) {\n          var editData = editingController.getEditDataByKey(rowOptions.key);\n          editData && editingController._showErrorRow(editData);\n        }\n      });\n    },\n    _updateContent: function (tableElement, change) {\n      var that = this;\n      var $freeSpaceRowElements;\n\n      var contentElement = that._findContentElement();\n\n      var changeType = change && change.changeType;\n\n      if (\"append\" === changeType || \"prepend\" === changeType) {\n        var contentTable = contentElement.children().first();\n\n        var $tBodies = that._getBodies(tableElement);\n\n        if (!that.option(\"legacyRendering\") && 1 === $tBodies.length) {\n          that._getBodies(contentTable)[\"append\" === changeType ? \"append\" : \"prepend\"]($tBodies.children());\n        } else {\n          $tBodies[\"append\" === changeType ? \"appendTo\" : \"prependTo\"](contentTable);\n        }\n\n        tableElement.remove();\n        $freeSpaceRowElements = that._getFreeSpaceRowElements(contentTable);\n        removeEmptyRows($freeSpaceRowElements, FREESPACE_CLASS);\n\n        if (change.removeCount) {\n          that._removeRowsElements(contentTable, change.removeCount, changeType);\n        }\n\n        that._restoreErrorRow(contentTable);\n      } else {\n        that.callBase.apply(that, arguments);\n      }\n\n      that._updateBottomLoading();\n    },\n    _addVirtualRow: function ($table, isFixed, location, position) {\n      if (!position) {\n        return;\n      }\n\n      var $virtualRow = this._createEmptyRow(VIRTUAL_ROW_CLASS, isFixed, position);\n\n      $virtualRow = this._wrapRowIfNeed($table, $virtualRow);\n\n      this._appendEmptyRow($table, $virtualRow, location);\n    },\n    _updateContentPosition: function (isRender) {\n      var that = this;\n      var dataController = that._dataController;\n      var rowHeight = that._rowHeight || 20;\n      dataController.viewportItemSize(rowHeight);\n\n      if (!that.option(\"legacyRendering\") && (isVirtualMode(that) || isVirtualRowRendering(that))) {\n        if (!isRender) {\n          var rowHeights = that._getRowElements(that._tableElement).toArray().map(function (row) {\n            return (0, _position.getBoundingRect)(row).height;\n          });\n\n          dataController.setContentSize(rowHeights);\n        }\n\n        var top = dataController.getContentOffset(\"begin\");\n        var bottom = dataController.getContentOffset(\"end\");\n        var $tables = that.getTableElements();\n        var $virtualRows = $tables.children(\"tbody\").children(\".\" + VIRTUAL_ROW_CLASS);\n        removeEmptyRows($virtualRows, VIRTUAL_ROW_CLASS);\n        $tables.each(function (index) {\n          var isFixed = index > 0;\n          that._isFixedTableRendering = isFixed;\n\n          that._addVirtualRow((0, _renderer2.default)(this), isFixed, \"top\", top);\n\n          that._addVirtualRow((0, _renderer2.default)(this), isFixed, \"bottom\", bottom);\n\n          that._isFixedTableRendering = false;\n        });\n      } else {\n        (0, _common.deferUpdate)(function () {\n          that._updateContentPositionCore();\n        });\n      }\n    },\n    _updateContentPositionCore: function () {\n      var that = this;\n      var contentHeight;\n      var $tables;\n      var $contentTable;\n      var rowHeight = that._rowHeight || 20;\n\n      var virtualItemsCount = that._dataController.virtualItemsCount();\n\n      if (virtualItemsCount) {\n        var contentElement = that._findContentElement();\n\n        $tables = contentElement.children();\n        $contentTable = $tables.eq(0);\n        var virtualTable = $tables.eq(1);\n        that._contentTableHeight = $contentTable[0].offsetHeight;\n\n        that._dataController.viewportItemSize(rowHeight);\n\n        that._dataController.setContentSize(that._contentTableHeight);\n\n        contentHeight = that._dataController.getVirtualContentSize();\n\n        var top = that._dataController.getContentOffset();\n\n        (0, _common.deferRender)(function () {\n          _translator2.default.move($contentTable, {\n            left: 0,\n            top: top\n          });\n\n          var isRenderVirtualTableContentRequired = that._contentHeight !== contentHeight || 0 === contentHeight || !that._isTableLinesDisplaysCorrect(virtualTable) || !that._isColumnElementsEqual($contentTable.find(\"col\"), virtualTable.find(\"col\"));\n\n          if (isRenderVirtualTableContentRequired) {\n            that._contentHeight = contentHeight;\n\n            that._renderVirtualTableContent(virtualTable, contentHeight);\n          }\n        });\n      }\n    },\n    _isTableLinesDisplaysCorrect: function (table) {\n      var hasColumnLines = table.find(\".\" + COLUMN_LINES_CLASS).length > 0;\n      return hasColumnLines === this.option(\"showColumnLines\");\n    },\n    _isColumnElementsEqual: function ($columns, $virtualColumns) {\n      var result = $columns.length === $virtualColumns.length;\n\n      if (result) {\n        (0, _iterator.each)($columns, function (index, element) {\n          if (element.style.width !== $virtualColumns[index].style.width) {\n            result = false;\n            return result;\n          }\n        });\n      }\n\n      return result;\n    },\n    _renderVirtualTableContent: function (container, height) {\n      var that = this;\n\n      var columns = that._columnsController.getVisibleColumns();\n\n      var html = that._createColGroup(columns).prop(\"outerHTML\");\n\n      var freeSpaceCellsHtml = \"\";\n      var columnLinesClass = that.option(\"showColumnLines\") ? COLUMN_LINES_CLASS : \"\";\n\n      var createFreeSpaceRowHtml = function (height) {\n        return \"<tr style='height:\" + height + \"px;' class='\" + FREESPACE_CLASS + \" \" + ROW_CLASS + \" \" + columnLinesClass + \"' >\" + freeSpaceCellsHtml + \"</tr>\";\n      };\n\n      for (var i = 0; i < columns.length; i++) {\n        var classes = that._getCellClasses(columns[i]);\n\n        var classString = classes.length ? \" class='\" + classes.join(\" \") + \"'\" : \"\";\n        freeSpaceCellsHtml += \"<td\" + classString + \"/>\";\n      }\n\n      while (height > PIXELS_LIMIT) {\n        html += createFreeSpaceRowHtml(PIXELS_LIMIT);\n        height -= PIXELS_LIMIT;\n      }\n\n      html += createFreeSpaceRowHtml(height);\n      container.addClass(that.addWidgetPrefix(TABLE_CLASS));\n      container.html(html);\n    },\n    _getCellClasses: function (column) {\n      var classes = [];\n      var cssClass = column.cssClass;\n      var isExpandColumn = \"expand\" === column.command;\n      cssClass && classes.push(cssClass);\n      isExpandColumn && classes.push(this.addWidgetPrefix(GROUP_SPACE_CLASS));\n      return classes;\n    },\n    _findBottomLoadPanel: function ($contentElement) {\n      var $element = $contentElement || this.element();\n      var $bottomLoadPanel = $element && $element.find(\".\" + this.addWidgetPrefix(BOTTOM_LOAD_PANEL_CLASS));\n\n      if ($bottomLoadPanel && $bottomLoadPanel.length) {\n        return $bottomLoadPanel;\n      }\n    },\n    _updateBottomLoading: function () {\n      var that = this;\n      var scrollingMode = that.option(\"scrolling.mode\");\n      var virtualMode = scrollingMode === SCROLLING_MODE_VIRTUAL;\n      var appendMode = scrollingMode === SCROLLING_MODE_INFINITE;\n      var showBottomLoading = !that._dataController.hasKnownLastPage() && that._dataController.isLoaded() && (virtualMode || appendMode);\n\n      var $contentElement = that._findContentElement();\n\n      var bottomLoadPanelElement = that._findBottomLoadPanel($contentElement);\n\n      if (showBottomLoading) {\n        if (!bottomLoadPanelElement) {\n          (0, _renderer2.default)(\"<div>\").addClass(that.addWidgetPrefix(BOTTOM_LOAD_PANEL_CLASS)).append(that._createComponent((0, _renderer2.default)(\"<div>\"), _load_indicator2.default).$element()).appendTo($contentElement);\n        }\n      } else {\n        if (bottomLoadPanelElement) {\n          bottomLoadPanelElement.remove();\n        }\n      }\n    },\n    _handleScroll: function (e) {\n      var that = this;\n\n      if (that._hasHeight && that._rowHeight) {\n        that._dataController.setViewportPosition(e.scrollOffset.top);\n      }\n\n      that.callBase.apply(that, arguments);\n    },\n    _needUpdateRowHeight: function (itemsCount) {\n      var that = this;\n      return that.callBase.apply(that, arguments) || itemsCount > 0 && that.option(\"scrolling.mode\") === SCROLLING_MODE_INFINITE && that.option(\"scrolling.rowRenderingMode\") !== SCROLLING_MODE_VIRTUAL;\n    },\n    _updateRowHeight: function () {\n      var that = this;\n      that.callBase.apply(that, arguments);\n\n      if (that._rowHeight) {\n        that._updateContentPosition();\n\n        var viewportHeight = that._hasHeight ? that.element().outerHeight() : (0, _renderer2.default)((0, _window.getWindow)()).outerHeight();\n\n        that._dataController.viewportSize(Math.ceil(viewportHeight / that._rowHeight));\n      }\n    },\n    updateFreeSpaceRowHeight: function () {\n      var result = this.callBase.apply(this, arguments);\n\n      if (result) {\n        this._updateContentPosition();\n      }\n\n      return result;\n    },\n    setLoading: function (isLoading, messageText) {\n      var that = this;\n      var callBase = that.callBase;\n      var dataController = that._dataController;\n      var hasBottomLoadPanel = dataController.pageIndex() > 0 && dataController.isLoaded() && !!that._findBottomLoadPanel();\n\n      if (hasBottomLoadPanel) {\n        isLoading = false;\n      }\n\n      callBase.call(that, isLoading, messageText);\n    },\n    _resizeCore: function () {\n      var that = this;\n      var $element = that.element();\n      that.callBase();\n\n      if (that.component.$element() && !that._windowScroll && $element.closest((0, _window.getWindow)().document).length) {\n        that._windowScroll = _uiGrid_core2.default.subscribeToExternalScrollers($element, function (scrollPos) {\n          if (!that._hasHeight && that._rowHeight) {\n            that._dataController.setViewportPosition(scrollPos);\n          }\n        }, that.component.$element());\n        that.on(\"disposing\", function () {\n          that._windowScroll.dispose();\n        });\n      }\n\n      that.loadIfNeed();\n    },\n    loadIfNeed: function () {\n      var dataController = this._dataController;\n\n      if (dataController && dataController.loadIfNeed) {\n        dataController.loadIfNeed();\n      }\n    },\n    setColumnWidths: function (widths) {\n      var scrollable = this.getScrollable();\n      var $content;\n      this.callBase.apply(this, arguments);\n\n      if (\"virtual\" === this.option(\"scrolling.mode\")) {\n        $content = scrollable ? scrollable.$content() : this.element();\n        this.callBase(widths, $content.children(\".\" + this.addWidgetPrefix(CONTENT_CLASS)).children(\":not(.\" + this.addWidgetPrefix(TABLE_CONTENT_CLASS) + \")\"));\n      }\n    },\n    dispose: function () {\n      clearTimeout(this._scrollTimeoutID);\n      this.callBase();\n    }\n  };\n}();\n\nmodule.exports = {\n  defaultOptions: function () {\n    return {\n      scrolling: {\n        timeout: 300,\n        updateTimeout: 300,\n        minTimeout: 0,\n        renderingThreshold: 100,\n        removeInvisiblePages: true,\n        rowPageSize: 5,\n        mode: \"standard\",\n        preloadEnabled: false,\n        rowRenderingMode: \"standard\"\n      }\n    };\n  },\n  extenders: {\n    dataSourceAdapter: VirtualScrollingDataSourceAdapterExtender,\n    controllers: {\n      data: function () {\n        var members = {\n          _refreshDataSource: function () {\n            var baseResult = this.callBase.apply(this, arguments) || new _deferred.Deferred().resolve().promise();\n            baseResult.done(this.initVirtualRows.bind(this));\n            return baseResult;\n          },\n          getRowPageSize: function () {\n            var rowPageSize = this.option(\"scrolling.rowPageSize\");\n            var pageSize = this.pageSize();\n            return pageSize && pageSize < rowPageSize ? pageSize : rowPageSize;\n          },\n          reload: function () {\n            var that = this;\n            var rowsScrollController = that._rowsScrollController || that._dataSource;\n            var itemIndex = rowsScrollController && rowsScrollController.getItemIndexByPosition();\n            var result = this.callBase.apply(this, arguments);\n            return result && result.done(function () {\n              if (isVirtualMode(that) || isVirtualRowRendering(that)) {\n                var rowIndexOffset = that.getRowIndexOffset();\n                var rowIndex = Math.floor(itemIndex) - rowIndexOffset;\n                var component = that.component;\n                var scrollable = component.getScrollable && component.getScrollable();\n                var isSortingOperation = that.dataSource().operationTypes().sorting;\n\n                if (scrollable && !that.option(\"legacyRendering\") && !isSortingOperation) {\n                  var rowElement = component.getRowElement(rowIndex);\n                  var $rowElement = rowElement && rowElement[0] && (0, _renderer2.default)(rowElement[0]);\n                  var top = $rowElement && $rowElement.position().top;\n                  var allowedTopOffset = _browser2.default.mozilla || _browser2.default.msie ? 1 : 0;\n\n                  if (top > allowedTopOffset) {\n                    top = Math.round(top + $rowElement.outerHeight() * (itemIndex % 1));\n                    scrollable.scrollTo({\n                      y: top\n                    });\n                  }\n                }\n              }\n            });\n          },\n          initVirtualRows: function () {\n            var that = this;\n            var virtualRowsRendering = isVirtualRowRendering(that);\n\n            if (\"virtual\" !== that.option(\"scrolling.mode\") && true !== virtualRowsRendering || false === virtualRowsRendering || that.option(\"legacyRendering\") || !that.option(\"scrolling.rowPageSize\")) {\n              that._visibleItems = null;\n              that._rowsScrollController = null;\n              return;\n            }\n\n            that._rowPageIndex = Math.ceil(that.pageIndex() * that.pageSize() / that.getRowPageSize());\n            that._visibleItems = [];\n\n            var isItemCountable = function (item) {\n              return \"data\" === item.rowType && !item.isNewRow || \"group\" === item.rowType && that._dataSource.isGroupItemCountable(item.data);\n            };\n\n            that._rowsScrollController = new _uiGrid_core2.default.VirtualScrollController(that.component, {\n              pageSize: function () {\n                return that.getRowPageSize();\n              },\n              totalItemsCount: function () {\n                return isVirtualMode(that) ? that.totalItemsCount() : that._items.filter(isItemCountable).length;\n              },\n              hasKnownLastPage: function () {\n                return true;\n              },\n              pageIndex: function (index) {\n                if (void 0 !== index) {\n                  that._rowPageIndex = index;\n                }\n\n                return that._rowPageIndex;\n              },\n              isLoading: function () {\n                return that.isLoading();\n              },\n              pageCount: function pageCount() {\n                var pageCount = Math.ceil(this.totalItemsCount() / this.pageSize());\n                return pageCount ? pageCount : 1;\n              },\n              load: function () {\n                if (that._rowsScrollController.pageIndex() >= this.pageCount()) {\n                  that._rowPageIndex = this.pageCount() - 1;\n\n                  that._rowsScrollController.pageIndex(that._rowPageIndex);\n                }\n\n                if (!that._rowsScrollController._dataSource.items().length && this.totalItemsCount()) {\n                  return;\n                }\n\n                that._rowsScrollController.handleDataChanged(function (change) {\n                  change = change || {};\n                  change.changeType = change.changeType || \"refresh\";\n                  change.items = change.items || that._visibleItems;\n\n                  that._visibleItems.forEach(function (item, index) {\n                    item.rowIndex = index;\n                  });\n\n                  that._fireChanged(change);\n                });\n              },\n              updateLoading: function () {},\n              itemsCount: function () {\n                return that._rowsScrollController._dataSource.items().filter(isItemCountable).length;\n              },\n              correctCount: function (items, count, fromEnd) {\n                return _correctCount(items, count, fromEnd, isItemCountable);\n              },\n              items: function (countableOnly) {\n                var dataSource = that.dataSource();\n                var virtualItemsCount = dataSource && dataSource.virtualItemsCount();\n                var begin = virtualItemsCount ? virtualItemsCount.begin : 0;\n                var rowPageSize = that.getRowPageSize();\n                var skip = that._rowPageIndex * rowPageSize - begin;\n                var take = rowPageSize;\n                var result = that._items;\n\n                if (skip < 0) {\n                  return [];\n                }\n\n                if (skip) {\n                  skip = this.correctCount(result, skip);\n                  result = result.slice(skip);\n                }\n\n                if (take) {\n                  take = this.correctCount(result, take);\n                  result = result.slice(0, take);\n                }\n\n                return countableOnly ? result.filter(isItemCountable) : result;\n              },\n              viewportItems: function (items) {\n                if (items) {\n                  that._visibleItems = items;\n                }\n\n                return that._visibleItems;\n              },\n              onChanged: function () {},\n              changingDuration: function (e) {\n                var dataSource = that.dataSource();\n\n                if (dataSource.isLoading()) {\n                  return LOAD_TIMEOUT;\n                }\n\n                return (null === dataSource || void 0 === dataSource ? void 0 : dataSource._renderTime) || 0;\n              }\n            }, true);\n\n            that._rowsScrollController.positionChanged.add(function () {\n              var _that$_dataSource;\n\n              null === (_that$_dataSource = that._dataSource) || void 0 === _that$_dataSource ? void 0 : _that$_dataSource.setViewportItemIndex(that._rowsScrollController.getViewportItemIndex());\n            });\n\n            if (that.isLoaded()) {\n              that._rowsScrollController.load();\n            }\n          },\n          _updateItemsCore: function (change) {\n            var _this3 = this;\n\n            var delta = this.getRowIndexDelta();\n            this.callBase.apply(this, arguments);\n            var rowsScrollController = this._rowsScrollController;\n\n            if (rowsScrollController) {\n              var visibleItems = this._visibleItems;\n              var isRefresh = \"refresh\" === change.changeType || change.isLiveUpdate;\n\n              if (\"append\" === change.changeType && change.items && !change.items.length) {\n                return;\n              }\n\n              if (isRefresh || \"append\" === change.changeType || \"prepend\" === change.changeType) {\n                change.cancel = true;\n                isRefresh && rowsScrollController.reset(true);\n                rowsScrollController.load();\n              } else {\n                if (\"update\" === change.changeType) {\n                  change.rowIndices.forEach(function (rowIndex, index) {\n                    var changeType = change.changeTypes[index];\n                    var newItem = change.items[index];\n\n                    if (\"update\" === changeType) {\n                      visibleItems[rowIndex] = newItem;\n                    } else {\n                      if (\"insert\" === changeType) {\n                        visibleItems.splice(rowIndex, 0, newItem);\n                      } else {\n                        if (\"remove\" === changeType) {\n                          visibleItems.splice(rowIndex, 1);\n                        }\n                      }\n                    }\n                  });\n                } else {\n                  visibleItems.forEach(function (item, index) {\n                    visibleItems[index] = _this3._items[index + delta] || visibleItems[index];\n                  });\n                  change.items = visibleItems;\n                }\n\n                visibleItems.forEach(function (item, index) {\n                  item.rowIndex = index;\n                });\n              }\n            }\n          },\n          _applyChange: function (change) {\n            var that = this;\n            var items = change.items;\n            var changeType = change.changeType;\n            var removeCount = change.removeCount;\n\n            if (removeCount) {\n              var fromEnd = \"prepend\" === changeType;\n              removeCount = _correctCount(that._items, removeCount, fromEnd, function (item, isNextAfterLast) {\n                return \"data\" === item.rowType && !item.isNewRow || \"group\" === item.rowType && (that._dataSource.isGroupItemCountable(item.data) || isNextAfterLast);\n              });\n              change.removeCount = removeCount;\n            }\n\n            switch (changeType) {\n              case \"prepend\":\n                that._items.unshift.apply(that._items, items);\n\n                if (removeCount) {\n                  that._items.splice(-removeCount);\n                }\n\n                break;\n\n              case \"append\":\n                that._items.push.apply(that._items, items);\n\n                if (removeCount) {\n                  that._items.splice(0, removeCount);\n                }\n\n                break;\n\n              default:\n                that.callBase(change);\n            }\n          },\n          items: function (allItems) {\n            return allItems ? this._items : this._visibleItems || this._items;\n          },\n          getRowIndexDelta: function () {\n            var visibleItems = this._visibleItems;\n            var delta = 0;\n\n            if (visibleItems && visibleItems[0]) {\n              delta = this._items.indexOf(visibleItems[0]);\n            }\n\n            return delta < 0 ? 0 : delta;\n          },\n          getRowIndexOffset: function () {\n            var offset = 0;\n            var dataSource = this.dataSource();\n            var rowsScrollController = this._rowsScrollController;\n\n            if (rowsScrollController) {\n              offset = rowsScrollController.beginPageIndex() * rowsScrollController._dataSource.pageSize();\n            } else {\n              if (\"virtual\" === this.option(\"scrolling.mode\") && dataSource) {\n                offset = dataSource.beginPageIndex() * dataSource.pageSize();\n              }\n            }\n\n            return offset;\n          },\n          viewportSize: function () {\n            var rowsScrollController = this._rowsScrollController;\n            rowsScrollController && rowsScrollController.viewportSize.apply(rowsScrollController, arguments);\n            var dataSource = this._dataSource;\n            return dataSource && dataSource.viewportSize.apply(dataSource, arguments);\n          },\n          viewportItemSize: function () {\n            var rowsScrollController = this._rowsScrollController;\n            rowsScrollController && rowsScrollController.viewportItemSize.apply(rowsScrollController, arguments);\n            var dataSource = this._dataSource;\n            return dataSource && dataSource.viewportItemSize.apply(dataSource, arguments);\n          },\n          setViewportPosition: function () {\n            var rowsScrollController = this._rowsScrollController;\n            var dataSource = this._dataSource;\n\n            if (rowsScrollController) {\n              rowsScrollController.setViewportPosition.apply(rowsScrollController, arguments);\n            } else {\n              null === dataSource || void 0 === dataSource ? void 0 : dataSource.setViewportPosition.apply(dataSource, arguments);\n            }\n          },\n          setContentSize: function (sizes) {\n            var rowsScrollController = this._rowsScrollController;\n            rowsScrollController && rowsScrollController.setContentSize(sizes);\n            var dataSource = this._dataSource;\n            return dataSource && dataSource.setContentSize(sizes);\n          },\n          loadIfNeed: function () {\n            var rowsScrollController = this._rowsScrollController;\n            rowsScrollController && rowsScrollController.loadIfNeed();\n            var dataSource = this._dataSource;\n            return dataSource && dataSource.loadIfNeed();\n          },\n          getItemSize: function () {\n            var rowsScrollController = this._rowsScrollController;\n\n            if (rowsScrollController) {\n              return rowsScrollController.getItemSize.apply(rowsScrollController, arguments);\n            }\n\n            var dataSource = this._dataSource;\n            return dataSource && dataSource.getItemSize.apply(dataSource, arguments);\n          },\n          getItemSizes: function () {\n            var rowsScrollController = this._rowsScrollController;\n\n            if (rowsScrollController) {\n              return rowsScrollController.getItemSizes.apply(rowsScrollController, arguments);\n            }\n\n            var dataSource = this._dataSource;\n            return dataSource && dataSource.getItemSizes.apply(dataSource, arguments);\n          },\n          getContentOffset: function () {\n            var rowsScrollController = this._rowsScrollController;\n\n            if (rowsScrollController) {\n              return rowsScrollController.getContentOffset.apply(rowsScrollController, arguments);\n            }\n\n            var dataSource = this._dataSource;\n            return dataSource && dataSource.getContentOffset.apply(dataSource, arguments);\n          },\n          dispose: function () {\n            var rowsScrollController = this._rowsScrollController;\n            rowsScrollController && rowsScrollController.dispose();\n            this.callBase.apply(this, arguments);\n          }\n        };\n\n        _uiGrid_core4.default.proxyMethod(members, \"virtualItemsCount\");\n\n        _uiGrid_core4.default.proxyMethod(members, \"getVirtualContentSize\");\n\n        _uiGrid_core4.default.proxyMethod(members, \"setViewportItemIndex\");\n\n        return members;\n      }(),\n      resizing: {\n        resize: function () {\n          var that = this;\n          var callBase = that.callBase;\n          var result;\n\n          if (!that.option(\"legacyRendering\") && (isVirtualMode(that) || isVirtualRowRendering(that))) {\n            clearTimeout(that._resizeTimeout);\n            var diff = new Date() - that._lastTime;\n            var updateTimeout = that.option(\"scrolling.updateTimeout\");\n\n            if (that._lastTime && diff < updateTimeout) {\n              result = new _deferred.Deferred();\n              that._resizeTimeout = setTimeout(function () {\n                callBase.apply(that).done(result.resolve).fail(result.reject);\n                that._lastTime = new Date();\n              }, updateTimeout);\n              that._lastTime = new Date();\n            } else {\n              result = callBase.apply(that);\n\n              if (that._dataController.isLoaded()) {\n                that._lastTime = new Date();\n              }\n            }\n          } else {\n            result = callBase.apply(that);\n          }\n\n          return result;\n        },\n        dispose: function () {\n          this.callBase.apply(this, arguments);\n          clearTimeout(this._resizeTimeout);\n        }\n      }\n    },\n    views: {\n      rowsView: VirtualScrollingRowsViewExtender\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}