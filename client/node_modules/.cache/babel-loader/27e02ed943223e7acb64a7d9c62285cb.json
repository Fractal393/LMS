{"ast":null,"code":"/**\n * PdfBorders.ts class for EJ2-PDF\n */\nimport { PdfPen } from './../../../graphics/pdf-pen';\nimport { PdfDashStyle } from './../../../graphics/enum';\nimport { PdfColor } from './../../../graphics/pdf-color';\n/**\n * `PdfBorders` class used represents the cell border of the PDF grid.\n */\n\nvar PdfBorders =\n/** @class */\nfunction () {\n  // Constructor\n\n  /**\n   * Create a new instance for `PdfBorders` class.\n   * @private\n   */\n  function PdfBorders() {\n    var defaultBorderPenLeft = new PdfPen(new PdfColor(0, 0, 0));\n    defaultBorderPenLeft.dashStyle = PdfDashStyle.Solid;\n    var defaultBorderPenRight = new PdfPen(new PdfColor(0, 0, 0));\n    defaultBorderPenRight.dashStyle = PdfDashStyle.Solid;\n    var defaultBorderPenTop = new PdfPen(new PdfColor(0, 0, 0));\n    defaultBorderPenTop.dashStyle = PdfDashStyle.Solid;\n    var defaultBorderPenBottom = new PdfPen(new PdfColor(0, 0, 0));\n    defaultBorderPenBottom.dashStyle = PdfDashStyle.Solid;\n    this.leftPen = defaultBorderPenLeft;\n    this.rightPen = defaultBorderPenRight;\n    this.topPen = defaultBorderPenTop;\n    this.bottomPen = defaultBorderPenBottom;\n  }\n\n  Object.defineProperty(PdfBorders.prototype, \"left\", {\n    // Properties\n\n    /**\n     * Gets or sets the `Left`.\n     * @private\n     */\n    get: function () {\n      return this.leftPen;\n    },\n    set: function (value) {\n      this.leftPen = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfBorders.prototype, \"right\", {\n    /**\n     * Gets or sets the `Right`.\n     * @private\n     */\n    get: function () {\n      return this.rightPen;\n    },\n    set: function (value) {\n      this.rightPen = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfBorders.prototype, \"top\", {\n    /**\n     * Gets or sets the `Top`.\n     * @private\n     */\n    get: function () {\n      return this.topPen;\n    },\n    set: function (value) {\n      this.topPen = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfBorders.prototype, \"bottom\", {\n    /**\n     * Gets or sets the `Bottom`.\n     * @private\n     */\n    get: function () {\n      return this.bottomPen;\n    },\n    set: function (value) {\n      this.bottomPen = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfBorders.prototype, \"all\", {\n    /**\n     * sets the `All`.\n     * @private\n     */\n    set: function (value) {\n      this.leftPen = this.rightPen = this.topPen = this.bottomPen = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfBorders.prototype, \"isAll\", {\n    /**\n     * Gets a value indicating whether this instance `is all`.\n     * @private\n     */\n    get: function () {\n      return this.leftPen === this.rightPen && this.leftPen === this.topPen && this.leftPen === this.bottomPen;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfBorders, \"default\", {\n    /**\n     * Gets the `default`.\n     * @private\n     */\n    get: function () {\n      return new PdfBorders();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfBorders;\n}();\n\nexport { PdfBorders };\n\nvar PdfPaddings =\n/** @class */\nfunction () {\n  function PdfPaddings(left, right, top, bottom) {\n    /**\n     * The 'left' border padding set.\n     * @private\n     */\n    this.hasLeftPad = false;\n    /**\n     * The 'right' border padding set.\n     * @private\n     */\n\n    this.hasRightPad = false;\n    /**\n     * The 'top' border padding set.\n     * @private\n     */\n\n    this.hasTopPad = false;\n    /**\n     * The 'bottom' border padding set.\n     * @private\n     */\n\n    this.hasBottomPad = false;\n\n    if (typeof left === 'undefined') {\n      //5.76 and 0 are taken from ms-word default table margins.\n      this.leftPad = this.rightPad = 5.76; //0.5 is set for top and bottom by default.\n\n      this.bottomPad = this.topPad = 0.5;\n    } else {\n      this.leftPad = left;\n      this.rightPad = right;\n      this.topPad = top;\n      this.bottomPad = bottom;\n      this.hasLeftPad = true;\n      this.hasRightPad = true;\n      this.hasTopPad = true;\n      this.hasBottomPad = true;\n    }\n  }\n\n  Object.defineProperty(PdfPaddings.prototype, \"left\", {\n    // Properties\n\n    /**\n     * Gets or sets the `left` value of the edge\n     * @private\n     */\n    get: function () {\n      return this.leftPad;\n    },\n    set: function (value) {\n      this.leftPad = value;\n      this.hasLeftPad = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPaddings.prototype, \"right\", {\n    /**\n     * Gets or sets the `right` value of the edge.\n     * @private\n     */\n    get: function () {\n      return this.rightPad;\n    },\n    set: function (value) {\n      this.rightPad = value;\n      this.hasRightPad = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPaddings.prototype, \"top\", {\n    /**\n     * Gets or sets the `top` value of the edge\n     * @private\n     */\n    get: function () {\n      return this.topPad;\n    },\n    set: function (value) {\n      this.topPad = value;\n      this.hasTopPad = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPaddings.prototype, \"bottom\", {\n    /**\n     * Gets or sets the `bottom` value of the edge.\n     * @private\n     */\n    get: function () {\n      return this.bottomPad;\n    },\n    set: function (value) {\n      this.bottomPad = value;\n      this.hasBottomPad = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPaddings.prototype, \"all\", {\n    /**\n     * Sets value to all sides `left,right,top and bottom`.s\n     * @private\n     */\n    set: function (value) {\n      this.leftPad = this.rightPad = this.topPad = this.bottomPad = value;\n      this.hasLeftPad = true;\n      this.hasRightPad = true;\n      this.hasTopPad = true;\n      this.hasBottomPad = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfPaddings;\n}();\n\nexport { PdfPaddings };","map":null,"metadata":{},"sourceType":"module"}