{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Component, NotifyPropertyChanges, Property, closest } from '@syncfusion/ej2-base';\nimport { Event, EventHandler, isBlazor } from '@syncfusion/ej2-base';\nimport { addClass, isRippleEnabled, removeClass, rippleEffect, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { rippleMouseHandler, destroy, preRender, setHiddenInput } from './../common/common';\nvar CHECK = 'e-check';\nvar DISABLED = 'e-switch-disabled';\nvar RIPPLE = 'e-ripple-container';\nvar RIPPLE_CHECK = 'e-ripple-check';\nvar RTL = 'e-rtl';\nvar WRAPPER = 'e-switch-wrapper';\nvar ACTIVE = 'e-switch-active';\n/**\n * The Switch is a graphical user interface element that allows you to toggle between checked and unchecked states.\n * ```html\n * <input type=\"checkbox\" id=\"switch\"/>\n * <script>\n * var switchObj = new Switch({});\n * switchObj.appendTo(\"#switch\");\n * </script>\n * ```\n */\n\nvar Switch =\n/** @class */\nfunction (_super) {\n  __extends(Switch, _super);\n  /**\n   * Constructor for creating the widget.\n   * @private\n   */\n\n\n  function Switch(options, element) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.isFocused = false;\n    _this.isDrag = false;\n    return _this;\n  }\n\n  Switch.prototype.changeState = function (state) {\n    var ariaState;\n    var rippleSpan;\n    var wrapper = this.getWrapper();\n    var bar = wrapper.querySelector('.e-switch-inner');\n    var handle = wrapper.querySelector('.e-switch-handle');\n\n    if (isRippleEnabled) {\n      rippleSpan = wrapper.getElementsByClassName(RIPPLE)[0];\n    }\n\n    if (state) {\n      addClass([bar, handle], ACTIVE);\n      ariaState = 'true';\n      this.element.checked = true;\n      this.checked = true;\n\n      if (rippleSpan) {\n        addClass([rippleSpan], [RIPPLE_CHECK]);\n      }\n    } else {\n      removeClass([bar, handle], ACTIVE);\n      ariaState = 'false';\n      this.element.checked = false;\n      this.checked = false;\n\n      if (rippleSpan) {\n        removeClass([rippleSpan], [RIPPLE_CHECK]);\n      }\n    }\n\n    wrapper.setAttribute('aria-checked', ariaState);\n  };\n\n  Switch.prototype.clickHandler = function (evt) {\n    this.isDrag = false;\n    this.focusOutHandler();\n    this.changeState(!this.checked);\n    this.element.focus();\n    var changeEventArgs = {\n      checked: this.element.checked,\n      event: evt\n    };\n    this.trigger('change', changeEventArgs);\n  };\n  /**\n   * Destroys the Switch widget.\n   * @returns void\n   */\n\n\n  Switch.prototype.destroy = function () {\n    if (isBlazor() && this.isServerRendered) {\n      if (!this.disabled) {\n        this.unWireEvents();\n      }\n    } else {\n      _super.prototype.destroy.call(this);\n\n      if (!this.disabled) {\n        this.unWireEvents();\n      }\n\n      destroy(this, this.getWrapper(), this.tagName);\n    }\n  };\n\n  Switch.prototype.focusHandler = function () {\n    this.isFocused = true;\n  };\n\n  Switch.prototype.focusOutHandler = function () {\n    this.getWrapper().classList.remove('e-focus');\n  };\n  /**\n   * Gets the module name.\n   * @private\n   */\n\n\n  Switch.prototype.getModuleName = function () {\n    return 'switch';\n  };\n  /**\n   * Gets the properties to be maintained in the persistence state.\n   * @private\n   */\n\n\n  Switch.prototype.getPersistData = function () {\n    return this.addOnPersist(['checked']);\n  };\n\n  Switch.prototype.getWrapper = function () {\n    return this.element.parentElement;\n  };\n\n  Switch.prototype.initialize = function () {\n    if (isNullOrUndefined(this.initialSwitchCheckedValue)) {\n      this.initialSwitchCheckedValue = this.checked;\n    }\n\n    if (this.name) {\n      this.element.setAttribute('name', this.name);\n    }\n\n    if (this.value) {\n      this.element.setAttribute('value', this.value);\n    }\n\n    if (this.checked) {\n      this.changeState(true);\n    }\n\n    if (this.disabled) {\n      this.setDisabled();\n    }\n\n    if (this.onLabel || this.offLabel) {\n      this.setLabel(this.onLabel, this.offLabel);\n    }\n  };\n\n  Switch.prototype.initWrapper = function () {\n    var wrapper = this.element.parentElement;\n\n    if (!wrapper.classList.contains(WRAPPER)) {\n      wrapper = this.createElement('div', {\n        className: WRAPPER,\n        attrs: {\n          'role': 'switch',\n          'aria-checked': 'false'\n        }\n      });\n      this.element.parentNode.insertBefore(wrapper, this.element);\n    }\n\n    var switchInner = this.createElement('span', {\n      className: 'e-switch-inner'\n    });\n    var onLabel = this.createElement('span', {\n      className: 'e-switch-on'\n    });\n    var offLabel = this.createElement('span', {\n      className: 'e-switch-off'\n    });\n    var handle = this.createElement('span', {\n      className: 'e-switch-handle'\n    });\n    wrapper.appendChild(this.element);\n    setHiddenInput(this, wrapper);\n    switchInner.appendChild(onLabel);\n    switchInner.appendChild(offLabel);\n    wrapper.appendChild(switchInner);\n    wrapper.appendChild(handle);\n\n    if (isRippleEnabled) {\n      var rippleSpan = this.createElement('span', {\n        className: RIPPLE\n      });\n      handle.appendChild(rippleSpan);\n      rippleEffect(rippleSpan, {\n        duration: 400,\n        isCenterRipple: true\n      });\n    }\n\n    wrapper.classList.add('e-wrapper');\n\n    if (this.enableRtl) {\n      wrapper.classList.add(RTL);\n    }\n\n    if (this.cssClass) {\n      addClass([wrapper], this.cssClass.split(' '));\n    }\n  };\n  /**\n   * Called internally if any of the property value changes.\n   * @private\n   */\n\n\n  Switch.prototype.onPropertyChanged = function (newProp, oldProp) {\n    var wrapper = this.getWrapper();\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'checked':\n          this.changeState(newProp.checked);\n          break;\n\n        case 'disabled':\n          if (newProp.disabled) {\n            this.setDisabled();\n            this.unWireEvents();\n          } else {\n            this.element.disabled = false;\n            wrapper.classList.remove(DISABLED);\n            wrapper.setAttribute('aria-disabled', 'false');\n            this.wireEvents();\n          }\n\n          break;\n\n        case 'value':\n          this.element.setAttribute('value', newProp.value);\n          break;\n\n        case 'name':\n          this.element.setAttribute('name', newProp.name);\n          break;\n\n        case 'onLabel':\n        case 'offLabel':\n          this.setLabel(newProp.onLabel, newProp.offLabel);\n          break;\n\n        case 'enableRtl':\n          if (newProp.enableRtl) {\n            wrapper.classList.add(RTL);\n          } else {\n            wrapper.classList.remove(RTL);\n          }\n\n          break;\n\n        case 'cssClass':\n          if (oldProp.cssClass) {\n            removeClass([wrapper], oldProp.cssClass.split(' '));\n          }\n\n          if (newProp.cssClass) {\n            addClass([wrapper], newProp.cssClass.split(' '));\n          }\n\n          break;\n      }\n    }\n  };\n  /**\n   * Initialize Angular, React and Unique ID support.\n   * @private\n   */\n\n\n  Switch.prototype.preRender = function () {\n    if (isBlazor() && this.isServerRendered) {\n      return;\n    }\n\n    var element = this.element;\n    this.formElement = closest(this.element, 'form');\n    this.tagName = this.element.tagName;\n    preRender(this, 'EJS-SWITCH', WRAPPER, element, this.getModuleName());\n  };\n  /**\n   * Initialize control rendering.\n   * @private\n   */\n\n\n  Switch.prototype.render = function () {\n    if (isBlazor() && this.isServerRendered) {\n      if (isRippleEnabled) {\n        rippleEffect(this.element.parentElement, {\n          duration: 400,\n          isCenterRipple: true\n        });\n      }\n    } else {\n      this.initWrapper();\n      this.initialize();\n    }\n\n    if (!this.disabled) {\n      this.wireEvents();\n    }\n\n    this.renderComplete();\n  };\n\n  Switch.prototype.rippleHandler = function (e) {\n    var rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE)[0];\n    rippleMouseHandler(e, rippleSpan);\n\n    if (e.type === 'mousedown' && e.currentTarget.classList.contains('e-switch-wrapper') && e.which === 1) {\n      this.isDrag = true;\n      this.isFocused = false;\n    }\n  };\n\n  Switch.prototype.rippleTouchHandler = function (eventType) {\n    var rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE)[0];\n\n    if (rippleSpan) {\n      var event_1 = document.createEvent('MouseEvents');\n      event_1.initEvent(eventType, false, true);\n      rippleSpan.dispatchEvent(event_1);\n    }\n  };\n\n  Switch.prototype.setDisabled = function () {\n    var wrapper = this.getWrapper();\n    this.element.disabled = true;\n    wrapper.classList.add(DISABLED);\n    wrapper.setAttribute('aria-disabled', 'true');\n  };\n\n  Switch.prototype.setLabel = function (onText, offText) {\n    var wrapper = this.getWrapper();\n\n    if (onText) {\n      wrapper.querySelector('.e-switch-on').textContent = onText;\n    }\n\n    if (offText) {\n      wrapper.querySelector('.e-switch-off').textContent = offText;\n    }\n  };\n\n  Switch.prototype.switchFocusHandler = function () {\n    if (this.isFocused) {\n      this.getWrapper().classList.add('e-focus');\n    }\n  };\n\n  Switch.prototype.switchMouseUp = function (e) {\n    var target = e.target;\n    var rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE)[0];\n\n    if (e.type === 'touchmove') {\n      e.preventDefault();\n    }\n\n    if (e.type === 'touchstart') {\n      this.isDrag = true;\n      this.rippleTouchHandler('mousedown');\n    }\n\n    if (this.isDrag) {\n      if (e.type === 'mouseup' && target.className.indexOf('e-switch') < 0 || e.type === 'touchend') {\n        this.clickHandler(e);\n        this.rippleTouchHandler('mouseup');\n        e.preventDefault();\n      }\n    }\n  };\n\n  Switch.prototype.formResetHandler = function () {\n    this.checked = this.initialSwitchCheckedValue;\n    this.element.checked = this.initialSwitchCheckedValue;\n  };\n  /**\n   * Toggle the Switch component state into checked/unchecked.\n   * @returns void\n   */\n\n\n  Switch.prototype.toggle = function () {\n    this.clickHandler();\n  };\n\n  Switch.prototype.wireEvents = function () {\n    var wrapper = this.getWrapper();\n    var handle = wrapper.querySelector('.e-switch-handle');\n    this.delegateMouseUpHandler = this.switchMouseUp.bind(this);\n    this.delegateKeyUpHandler = this.switchFocusHandler.bind(this);\n    EventHandler.add(wrapper, 'click', this.clickHandler, this);\n    EventHandler.add(this.element, 'focus', this.focusHandler, this);\n    EventHandler.add(this.element, 'focusout', this.focusOutHandler, this);\n    EventHandler.add(this.element, 'mouseup', this.delegateMouseUpHandler, this);\n    EventHandler.add(this.element, 'keyup', this.delegateKeyUpHandler, this);\n    EventHandler.add(wrapper, 'mousedown mouseup', this.rippleHandler, this);\n    EventHandler.add(wrapper, 'touchstart touchmove touchend', this.switchMouseUp, this);\n\n    if (this.formElement) {\n      EventHandler.add(this.formElement, 'reset', this.formResetHandler, this);\n    }\n  };\n\n  Switch.prototype.unWireEvents = function () {\n    var wrapper = this.getWrapper();\n    var handle = wrapper.querySelector('.e-switch-handle');\n    EventHandler.remove(wrapper, 'click', this.clickHandler);\n    EventHandler.remove(this.element, 'focus', this.focusHandler);\n    EventHandler.remove(this.element, 'focusout', this.focusOutHandler);\n    EventHandler.remove(this.element, 'mouseup', this.delegateMouseUpHandler);\n    EventHandler.remove(this.element, 'keyup', this.delegateKeyUpHandler);\n    EventHandler.remove(wrapper, 'mousedown mouseup', this.rippleHandler);\n    EventHandler.remove(wrapper, 'touchstart touchmove touchend', this.switchMouseUp);\n\n    if (this.formElement) {\n      EventHandler.remove(this.formElement, 'reset', this.formResetHandler);\n    }\n  };\n  /**\n   * Click the switch element\n   * its native method\n   * @public\n   */\n\n\n  Switch.prototype.click = function () {\n    this.element.click();\n  };\n  /**\n   * Sets the focus to Switch\n   * its native method\n   * @public\n   */\n\n\n  Switch.prototype.focusIn = function () {\n    this.element.focus();\n  };\n\n  __decorate([Event()], Switch.prototype, \"change\", void 0);\n\n  __decorate([Event()], Switch.prototype, \"created\", void 0);\n\n  __decorate([Property(false)], Switch.prototype, \"checked\", void 0);\n\n  __decorate([Property('')], Switch.prototype, \"cssClass\", void 0);\n\n  __decorate([Property(false)], Switch.prototype, \"disabled\", void 0);\n\n  __decorate([Property('')], Switch.prototype, \"name\", void 0);\n\n  __decorate([Property('')], Switch.prototype, \"onLabel\", void 0);\n\n  __decorate([Property('')], Switch.prototype, \"offLabel\", void 0);\n\n  __decorate([Property('')], Switch.prototype, \"value\", void 0);\n\n  Switch = __decorate([NotifyPropertyChanges], Switch);\n  return Switch;\n}(Component);\n\nexport { Switch };","map":null,"metadata":{},"sourceType":"module"}