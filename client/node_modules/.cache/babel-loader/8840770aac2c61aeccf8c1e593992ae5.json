{"ast":null,"code":"/**\r\n * DevExtreme (ui/form/ui.form.items_runtime_info.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _guid = require(\"../../core/guid\");\n\nvar _guid2 = _interopRequireDefault(_guid);\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _type = require(\"../../core/utils/type\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nvar FormItemsRunTimeInfo = function () {\n  function FormItemsRunTimeInfo() {\n    _classCallCheck(this, FormItemsRunTimeInfo);\n\n    this._map = {};\n  }\n\n  _createClass(FormItemsRunTimeInfo, [{\n    key: \"_findWidgetInstance\",\n    value: function (condition) {\n      var result;\n      (0, _iterator.each)(this._map, function (guid, _ref) {\n        var widgetInstance = _ref.widgetInstance,\n            item = _ref.item;\n\n        if (condition(item)) {\n          result = widgetInstance;\n          return false;\n        }\n      });\n      return result;\n    }\n  }, {\n    key: \"_findFieldByCondition\",\n    value: function (callback, valueExpr) {\n      var result;\n      (0, _iterator.each)(this._map, function (key, value) {\n        if (callback(value)) {\n          result = \"guid\" === valueExpr ? key : value[valueExpr];\n          return false;\n        }\n      });\n      return result;\n    }\n  }, {\n    key: \"clear\",\n    value: function () {\n      this._map = {};\n    }\n  }, {\n    key: \"removeItemsByItems\",\n    value: function (itemsRunTimeInfo) {\n      var _this = this;\n\n      (0, _iterator.each)(itemsRunTimeInfo.getItems(), function (guid) {\n        return _this.removeItemByKey(guid);\n      });\n    }\n  }, {\n    key: \"removeItemByKey\",\n    value: function (key) {\n      delete this._map[key];\n    }\n  }, {\n    key: \"add\",\n    value: function (options) {\n      var key = options.guid || new _guid2.default();\n      this._map[key] = options;\n      return key;\n    }\n  }, {\n    key: \"addItemsOrExtendFrom\",\n    value: function (itemsRunTimeInfo) {\n      var _this2 = this;\n\n      itemsRunTimeInfo.each(function (key, itemRunTimeInfo) {\n        if (_this2._map[key]) {\n          if (itemRunTimeInfo.widgetInstance) {\n            _this2._map[key].widgetInstance = itemRunTimeInfo.widgetInstance;\n          }\n\n          _this2._map[key].$itemContainer = itemRunTimeInfo.$itemContainer;\n        } else {\n          _this2.add({\n            item: itemRunTimeInfo.item,\n            widgetInstance: itemRunTimeInfo.widgetInstance,\n            guid: key,\n            $itemContainer: itemRunTimeInfo.$itemContainer\n          });\n        }\n      });\n    }\n  }, {\n    key: \"extendRunTimeItemInfoByKey\",\n    value: function (key, options) {\n      if (this._map[key]) {\n        this._map[key] = (0, _extend.extend)(this._map[key], options);\n      }\n    }\n  }, {\n    key: \"findWidgetInstanceByItem\",\n    value: function (item) {\n      return this._findWidgetInstance(function (storedItem) {\n        return storedItem === item;\n      });\n    }\n  }, {\n    key: \"getGroupOrTabLayoutManagerByPath\",\n    value: function (targetPath) {\n      return this._findFieldByCondition(function (_ref2) {\n        var path = _ref2.path;\n        return path === targetPath;\n      }, \"layoutManager\");\n    }\n  }, {\n    key: \"getKeyByPath\",\n    value: function (targetPath) {\n      return this._findFieldByCondition(function (_ref3) {\n        var path = _ref3.path;\n        return path === targetPath;\n      }, \"guid\");\n    }\n  }, {\n    key: \"getPathFromItem\",\n    value: function (targetItem) {\n      return this._findFieldByCondition(function (_ref4) {\n        var item = _ref4.item;\n        return item === targetItem;\n      }, \"path\");\n    }\n  }, {\n    key: \"findWidgetInstanceByName\",\n    value: function (name) {\n      return this._findWidgetInstance(function (item) {\n        return name === item.name;\n      });\n    }\n  }, {\n    key: \"findWidgetInstanceByDataField\",\n    value: function (dataField) {\n      return this._findWidgetInstance(function (item) {\n        return dataField === ((0, _type.isString)(item) ? item : item.dataField);\n      });\n    }\n  }, {\n    key: \"findItemContainerByItem\",\n    value: function (item) {\n      for (var key in this._map) {\n        if (this._map[key].item === item) {\n          return this._map[key].$itemContainer;\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"findItemIndexByItem\",\n    value: function (targetItem) {\n      return this._findFieldByCondition(function (_ref5) {\n        var item = _ref5.item;\n        return item === targetItem;\n      }, \"itemIndex\");\n    }\n  }, {\n    key: \"getItems\",\n    value: function () {\n      return this._map;\n    }\n  }, {\n    key: \"each\",\n    value: function (handler) {\n      (0, _iterator.each)(this._map, function (key, itemRunTimeInfo) {\n        handler(key, itemRunTimeInfo);\n      });\n    }\n  }, {\n    key: \"removeItemsByPathStartWith\",\n    value: function (path) {\n      var _this3 = this;\n\n      var keys = Object.keys(this._map);\n      var filteredKeys = keys.filter(function (key) {\n        return _this3._map[key].path.indexOf(path, 0) > -1;\n      });\n      filteredKeys.forEach(function (key) {\n        return _this3.removeItemByKey(key);\n      });\n    }\n  }]);\n\n  return FormItemsRunTimeInfo;\n}();\n\nexports.default = FormItemsRunTimeInfo;","map":null,"metadata":{},"sourceType":"script"}