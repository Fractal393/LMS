{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * PdfAutomaticField.ts class for EJ2-PDF\n */\n\n\nimport { PdfAutomaticField } from './automatic-field';\nimport { TemporaryDictionary } from './../../collections/object-object-pair/dictionary';\nimport { PdfTemplateValuePair } from './pdf-template-value-pair';\nimport { SizeF, PointF } from './../../drawing/pdf-drawing';\nimport { PdfTemplate } from './../../graphics/figures/pdf-template';\n/**\n * Represents automatic field which has the same value within the `PdfGraphics`.\n */\n\nvar PdfMultipleValueField =\n/** @class */\nfunction (_super) {\n  __extends(PdfMultipleValueField, _super);\n\n  function PdfMultipleValueField() {\n    var _this = _super.call(this) || this; //  Fields\n\n    /**\n     * Stores the instance of dictionary values of `graphics and template value pair`.\n     * @private\n     */\n\n\n    _this.list = new TemporaryDictionary();\n    return _this;\n  } // Implementation\n\n  /* tslint:disable */\n\n\n  PdfMultipleValueField.prototype.performDraw = function (graphics, location, scalingX, scalingY) {\n    _super.prototype.performDrawHelper.call(this, graphics, location, scalingX, scalingY);\n\n    var value = this.getValue(graphics);\n    var template = new PdfTemplate(this.getSize());\n    this.list.setValue(graphics, new PdfTemplateValuePair(template, value));\n    var g = template.graphics;\n    var size = this.getSize();\n    template.graphics.drawString(value, this.getFont(), this.pen, this.getBrush(), 0, 0, size.width, size.height, this.stringFormat);\n    var drawLocation = new PointF(location.x + this.location.x, location.y + this.location.y);\n    graphics.drawPdfTemplate(template, drawLocation, new SizeF(template.width * scalingX, template.height * scalingY));\n  };\n\n  return PdfMultipleValueField;\n}(PdfAutomaticField);\n\nexport { PdfMultipleValueField };","map":null,"metadata":{},"sourceType":"module"}