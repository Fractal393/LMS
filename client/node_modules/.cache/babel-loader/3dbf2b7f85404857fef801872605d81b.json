{"ast":null,"code":"import { extend, isBlazor } from '@syncfusion/ej2-base';\nimport { DatePicker, DateTimePicker } from '@syncfusion/ej2-calendars';\nimport { isEditable, getComplexFieldID, getObject, getCustomDateFormat } from '../base/util';\n/**\n * `DatePickerEditCell` is used to handle datepicker cell type editing.\n * @hidden\n */\n\nvar DatePickerEditCell =\n/** @class */\nfunction () {\n  function DatePickerEditCell(parent) {\n    this.parent = parent;\n  }\n\n  DatePickerEditCell.prototype.create = function (args) {\n    /* tslint:disable-next-line:no-any */\n    var complexFieldName = getComplexFieldID(args.column.field);\n    return this.parent.createElement('input', {\n      className: 'e-field',\n      attrs: {\n        id: this.parent.element.id + complexFieldName,\n        name: complexFieldName,\n        type: 'text',\n        'e-mappinguid': args.column.uid\n      }\n    });\n  };\n\n  DatePickerEditCell.prototype.read = function (element) {\n    return element.ej2_instances[0].value;\n  };\n\n  DatePickerEditCell.prototype.write = function (args) {\n    if (args.column.editType === 'datepickeredit') {\n      this.obj = new DatePicker(extend(dateanddatetimerender(args, this.parent.editSettings.mode, this.parent.enableRtl), args.column.edit.params));\n    } else if (args.column.editType === 'datetimepickeredit') {\n      this.obj = new DateTimePicker(extend(dateanddatetimerender(args, this.parent.editSettings.mode, this.parent.enableRtl), args.column.edit.params));\n    }\n\n    if (isBlazor()) {\n      this.obj.locale = this.parent.locale;\n    }\n\n    this.obj.appendTo(args.element);\n  };\n\n  DatePickerEditCell.prototype.destroy = function () {\n    if (this.obj) {\n      this.obj.destroy();\n    }\n  };\n\n  return DatePickerEditCell;\n}();\n\nexport { DatePickerEditCell };\n\nfunction dateanddatetimerender(args, mode, rtl) {\n  var isInline = mode !== 'Dialog';\n  var format = getCustomDateFormat(args.column.format, args.column.type);\n  var value = getObject(args.column.field, args.rowData);\n  value = value ? new Date(value) : null;\n  return {\n    floatLabelType: isInline ? 'Never' : 'Always',\n    value: value,\n    format: format,\n    placeholder: isInline ? '' : args.column.headerText,\n    enableRtl: rtl,\n    enabled: isEditable(args.column, args.requestType, args.element)\n  };\n}","map":null,"metadata":{},"sourceType":"module"}