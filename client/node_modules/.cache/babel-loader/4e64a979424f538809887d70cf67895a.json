{"ast":null,"code":"import { PdfPage } from './pdf-page';\nimport { PageAddedEventArgs } from './page-added-event-arguments';\nimport { PdfReferenceHolder } from './../primitives/pdf-reference';\nimport { PdfArray } from './../primitives/pdf-array';\nimport { PdfNumber } from './../primitives/pdf-number';\nimport { PdfName } from './../primitives/pdf-name';\nimport { PdfDictionary } from './../primitives/pdf-dictionary';\nimport { SaveSectionEventHandler } from './../primitives/pdf-dictionary';\nimport { DictionaryProperties } from './../input-output/pdf-dictionary-properties';\nimport { PdfSectionCollection } from './pdf-section-collection';\nimport { PdfSectionPageCollection } from './pdf-section-page-collection';\nimport { RectangleF } from './../drawing/pdf-drawing';\nimport { PdfSectionTemplate } from './pdf-section-templates';\n/**\n * Represents a `section` entity. A section it's a set of the pages with similar page settings.\n */\n\nvar PdfSection =\n/** @class */\nfunction () {\n  function PdfSection(document, pageSettings) {\n    //Fields\n    //public PageAdded() : PageAddedEventArgs.PageAddedEventHandler = new PageAddedEventArgs.PageAddedEventHandler(Object,args)\n\n    /**\n     * @hidden\n     * @private\n     */\n    this.pageAdded = new PageAddedEventArgs();\n    /**\n     * @hidden\n     * @private\n     */\n\n    this.pdfPages = [];\n    /**\n     * @hidden\n     * @private\n     */\n\n    this.dictionaryProperties = new DictionaryProperties();\n    this.pdfDocument = document;\n\n    if (typeof pageSettings === 'undefined') {\n      this.settings = document.pageSettings.clone();\n      this.initialSettings = this.settings.clone();\n    } else {\n      this.settings = pageSettings.clone();\n      this.initialSettings = this.settings.clone();\n    }\n\n    this.initialize();\n  }\n\n  Object.defineProperty(PdfSection.prototype, \"parent\", {\n    //Property\n\n    /**\n     * Gets or sets the `parent`.\n     * @private\n     */\n    get: function () {\n      return this.sectionCollection;\n    },\n    set: function (value) {\n      this.sectionCollection = value;\n      this.section.items.setValue(this.dictionaryProperties.parent, new PdfReferenceHolder(value));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfSection.prototype, \"parentDocument\", {\n    /**\n     * Gets the `parent document`.\n     * @private\n     */\n    get: function () {\n      return this.pdfDocument;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfSection.prototype, \"pageSettings\", {\n    /**\n     * Gets or sets the `page settings` of the section.\n     * @private\n     */\n    get: function () {\n      return this.settings;\n    },\n    set: function (value) {\n      if (value != null) {\n        this.settings = value;\n      } else {\n        throw Error('Value can not be null.');\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfSection.prototype, \"element\", {\n    /**\n     * Gets the wrapped `element`.\n     * @private\n     */\n    get: function () {\n      return this.section;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfSection.prototype, \"count\", {\n    /**\n     * Gets the `count` of the pages in the section.\n     * @private\n     */\n    get: function () {\n      return this.pagesReferences.count;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfSection.prototype, \"template\", {\n    /**\n     * Gets or sets a `template` for the pages in the section.\n     * @private\n     */\n    get: function () {\n      if (this.pageTemplate == null) {\n        this.pageTemplate = new PdfSectionTemplate();\n      }\n\n      return this.pageTemplate;\n    },\n    set: function (value) {\n      this.pageTemplate = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfSection.prototype, \"document\", {\n    /**\n     * Gets the `document`.\n     * @private\n     */\n    get: function () {\n      return this.sectionCollection.document;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfSection.prototype, \"pages\", {\n    /**\n     * Gets the collection of `pages` in a section (Read only)\n     * @private\n     */\n    get: function () {\n      if (this.pagesCollection == null || typeof this.pagesCollection === 'undefined') {\n        this.pagesCollection = new PdfSectionPageCollection(this);\n      }\n\n      return this.pagesCollection;\n    },\n    enumerable: true,\n    configurable: true\n  }); //methods\n\n  /**\n   * `Return the page collection` of current section.\n   * @private\n   */\n\n  PdfSection.prototype.getPages = function () {\n    return this.pdfPages;\n  };\n  /**\n   * `Translates` point into native coordinates of the page.\n   * @private\n   */\n\n\n  PdfSection.prototype.pointToNativePdf = function (page, point) {\n    var bounds = this.getActualBounds(page, true);\n    point.x += bounds.x;\n    point.y = this.pageSettings.height - point.y;\n    return point;\n  };\n  /**\n   * Sets the page setting of the current section.\n   * @public\n   * @param settings Instance of `PdfPageSettings`\n   */\n\n\n  PdfSection.prototype.setPageSettings = function (settings) {\n    this.settings = settings;\n    this.state.orientation = settings.orientation;\n    this.state.rotate = settings.rotate;\n    this.state.size = settings.size;\n    this.state.origin = settings.origin;\n  };\n  /**\n   * `Initializes` the object.\n   * @private\n   */\n\n\n  PdfSection.prototype.initialize = function () {\n    this.pagesReferences = new PdfArray();\n    this.section = new PdfDictionary();\n    this.state = new PageSettingsState(this.pdfDocument);\n    this.section.sectionBeginSave = new SaveSectionEventHandler(this, this.state);\n    this.pageCount = new PdfNumber(0);\n    this.section.items.setValue(this.dictionaryProperties.count, this.pageCount);\n    this.section.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.pages));\n    this.section.items.setValue(this.dictionaryProperties.kids, this.pagesReferences);\n  };\n  /**\n   * Checks whether any template should be printed on this layer.\n   * @private\n   * @param document The parent document.\n   * @param page The parent page.\n   * @param foreground Layer z-order.\n   * @returns True - if some content should be printed on the layer, False otherwise.\n   */\n\n\n  PdfSection.prototype.containsTemplates = function (document, page, foreground) {\n    var documentHeaders = this.getDocumentTemplates(document, page, foreground);\n    var sectionTemplates = this.getSectionTemplates(page, foreground);\n    return documentHeaders.length > 0 || sectionTemplates.length > 0;\n  };\n  /**\n   * Returns array of the document templates.\n   * @private\n   * @param document The parent document.\n   * @param page The parent page.\n   * @param foreground If true - return foreground templates, if false - return background templates.\n   * @returns Returns array of the document templates.\n   */\n\n  /* tslint:disable */\n\n\n  PdfSection.prototype.getDocumentTemplates = function (document, page, foreground) {\n    var templates = [];\n\n    if (this.template.applyDocumentTopTemplate && document.template.getTop(page) != null) {\n      if (!(document.template.getTop(page).foreground || foreground) || document.template.getTop(page).foreground && foreground) {\n        templates.push(document.template.getTop(page));\n      }\n    }\n\n    if (this.template.applyDocumentBottomTemplate && document.template.getBottom(page) != null) {\n      if (!(document.template.getBottom(page).foreground || foreground) || document.template.getBottom(page).foreground && foreground) {\n        templates.push(document.template.getBottom(page));\n      }\n    }\n\n    if (this.template.applyDocumentLeftTemplate && document.template.getLeft(page) != null) {\n      if (!(document.template.getLeft(page).foreground || foreground) || document.template.getLeft(page).foreground && foreground) {\n        templates.push(document.template.getLeft(page));\n      }\n    }\n\n    if (this.template.applyDocumentRightTemplate && document.template.getRight(page) != null) {\n      if (!(document.template.getRight(page).foreground || foreground) || document.template.getRight(page).foreground && foreground) {\n        templates.push(document.template.getRight(page));\n      }\n    }\n\n    return templates;\n  };\n  /**\n   * Returns array of the section templates.\n   * @private\n   * @param page The parent page.\n   * @param foreground If true - return foreground templates, if false - return background templates.\n   * @returns Returns array of the section templates.\n   */\n\n  /* tslint:disable */\n\n\n  PdfSection.prototype.getSectionTemplates = function (page, foreground) {\n    var templates = [];\n\n    if (this.template.getTop(page) != null) {\n      var pageTemplate = this.template.getTop(page);\n\n      if (!(pageTemplate.foreground || foreground) || pageTemplate.foreground && foreground) {\n        templates.push(pageTemplate);\n      }\n    }\n\n    if (this.template.getBottom(page) != null) {\n      var pageTemplate = this.template.getBottom(page);\n\n      if (!(pageTemplate.foreground || foreground) || pageTemplate.foreground && foreground) {\n        templates.push(pageTemplate);\n      }\n    }\n\n    if (this.template.getLeft(page) != null) {\n      var pageTemplate = this.template.getLeft(page);\n\n      if (!(pageTemplate.foreground || foreground) || pageTemplate.foreground && foreground) {\n        templates.push(pageTemplate);\n      }\n    }\n\n    if (this.template.getRight(page) != null) {\n      var pageTemplate = this.template.getRight(page);\n\n      if (!(pageTemplate.foreground || foreground) || pageTemplate.foreground && foreground) {\n        templates.push(pageTemplate);\n      }\n    }\n\n    return templates;\n  };\n  /* tslint:enable */\n\n  /**\n   * `Adds` the specified page.\n   * @private\n   */\n\n\n  PdfSection.prototype.add = function (page) {\n    if (typeof page === 'undefined') {\n      var page_1 = new PdfPage();\n      this.add(page_1);\n      return page_1;\n    } else {\n      var r = this.checkPresence(page);\n      this.pdfPages.push(page);\n      this.pagesReferences.add(r);\n      page.setSection(this);\n      page.resetProgress();\n      this.pageAddedMethod(page);\n    }\n  };\n  /**\n   * `Checks the presence`.\n   * @private\n   */\n\n\n  PdfSection.prototype.checkPresence = function (page) {\n    var rh = new PdfReferenceHolder(page);\n    var contains = false;\n    var sc = this.parent;\n\n    for (var index = 0; index < sc.section.length; index++) {\n      var section = sc.section[index];\n      contains = contains || section.contains(page);\n    }\n\n    return rh;\n  };\n  /**\n   * `Determines` whether the page in within the section.\n   * @private\n   */\n\n\n  PdfSection.prototype.contains = function (page) {\n    var index = this.indexOf(page);\n    return 0 <= index;\n  };\n  /**\n   * Get the `index of` the page.\n   * @private\n   */\n\n\n  PdfSection.prototype.indexOf = function (page) {\n    for (var index = 0; index < this.pdfPages.length; index++) {\n      if (this.pdfPages[index] === page) {\n        return this.pdfPages.indexOf(page);\n      }\n    }\n\n    var r = new PdfReferenceHolder(page);\n    return this.pagesReferences.indexOf(r);\n  };\n  /**\n   * Call two event's methods.\n   * @hidden\n   * @private\n   */\n\n\n  PdfSection.prototype.pageAddedMethod = function (page) {\n    //Create event's arguments\n    var args = new PageAddedEventArgs(page);\n    this.onPageAdded(args);\n    var parent = this.parent;\n    parent.document.pages.onPageAdded(args);\n    this.pageCount.intValue = this.count;\n  };\n  /**\n   * Called when the page has been added.\n   * @hidden\n   * @private\n   */\n\n\n  PdfSection.prototype.onPageAdded = function (args) {//\n  };\n\n  PdfSection.prototype.getActualBounds = function (arg1, arg2, arg3) {\n    if (arg1 instanceof PdfPage && typeof arg2 === 'boolean') {\n      var result = void 0;\n      var document_1 = this.parent.document;\n      result = this.getActualBounds(document_1, arg1, arg2);\n      return result;\n    } else {\n      arg1 = arg1;\n      arg2 = arg2;\n      arg3 = arg3;\n      var bounds = new RectangleF(0, 0, 0, 0);\n      bounds.height = arg3 ? this.pageSettings.size.height : this.pageSettings.getActualSize().height;\n      bounds.width = arg3 ? this.pageSettings.size.width : this.pageSettings.getActualSize().width;\n      var left = this.getLeftIndentWidth(arg1, arg2, arg3);\n      var top_1 = this.getTopIndentHeight(arg1, arg2, arg3);\n      var right = this.getRightIndentWidth(arg1, arg2, arg3);\n      var bottom = this.getBottomIndentHeight(arg1, arg2, arg3);\n      bounds.x += left;\n      bounds.y += top_1;\n      bounds.width -= left + right;\n      bounds.height -= top_1 + bottom;\n      return bounds;\n    }\n  };\n  /**\n   * Calculates width of the `left indent`.\n   * @private\n   */\n\n\n  PdfSection.prototype.getLeftIndentWidth = function (document, page, includeMargins) {\n    if (document == null) {\n      throw new Error('ArgumentNullException:document');\n    }\n\n    if (page == null) {\n      throw new Error('ArgumentNullException:page');\n    }\n\n    var value = includeMargins ? this.pageSettings.margins.left : 0;\n    var templateWidth = this.template.getLeft(page) != null ? this.template.getLeft(page).width : 0;\n    var docTemplateWidth = document.template.getLeft(page) != null ? document.template.getLeft(page).width : 0;\n    value += this.template.applyDocumentLeftTemplate ? Math.max(templateWidth, docTemplateWidth) : templateWidth;\n    return value;\n  };\n  /**\n   * Calculates `Height` of the top indent.\n   * @private\n   */\n\n\n  PdfSection.prototype.getTopIndentHeight = function (document, page, includeMargins) {\n    if (document == null) {\n      throw new Error('ArgumentNullException:document');\n    }\n\n    if (page == null) {\n      throw new Error('ArgumentNullException:page');\n    }\n\n    var value = includeMargins ? this.pageSettings.margins.top : 0;\n    var templateHeight = this.template.getTop(page) != null ? this.template.getTop(page).height : 0;\n    var docTemplateHeight = document.template.getTop(page) != null ? document.template.getTop(page).height : 0;\n    value += this.template.applyDocumentTopTemplate ? Math.max(templateHeight, docTemplateHeight) : templateHeight;\n    return value;\n  };\n  /**\n   * Calculates `width` of the right indent.\n   * @private\n   */\n\n\n  PdfSection.prototype.getRightIndentWidth = function (document, page, includeMargins) {\n    if (document == null) {\n      throw new Error('ArgumentNullException:document');\n    }\n\n    if (page == null) {\n      throw new Error('ArgumentNullException:page');\n    }\n\n    var value = includeMargins ? this.pageSettings.margins.right : 0;\n    var templateWidth = this.template.getRight(page) != null ? this.template.getRight(page).width : 0;\n    var docTemplateWidth = document.template.getRight(page) != null ? document.template.getRight(page).width : 0;\n    value += this.template.applyDocumentRightTemplate ? Math.max(templateWidth, docTemplateWidth) : templateWidth;\n    return value;\n  };\n  /**\n   * Calculates `Height` of the bottom indent.\n   * @private\n   */\n\n\n  PdfSection.prototype.getBottomIndentHeight = function (document, page, includeMargins) {\n    if (document == null) {\n      throw new Error('ArgumentNullException:document');\n    }\n\n    if (page == null) {\n      throw new Error('ArgumentNullException:page');\n    }\n\n    var value = includeMargins ? this.pageSettings.margins.bottom : 0;\n    var templateHeight = this.template.getBottom(page) != null ? this.template.getBottom(page).height : 0;\n    var docTemplateHeight = document.template.getBottom(page) != null ? document.template.getBottom(page).height : 0;\n    value += this.template.applyDocumentBottomTemplate ? Math.max(templateHeight, docTemplateHeight) : templateHeight;\n    return value;\n  };\n  /**\n   * `Removes` the page from the section.\n   * @private\n   */\n\n\n  PdfSection.prototype.remove = function (page) {\n    if (page == null) {\n      throw Error('ArgumentNullException(\"page\")');\n    }\n\n    var index = this.pdfPages.indexOf(page);\n    this.pagesReferences.removeAt(index);\n    var temproaryPages = [];\n\n    for (var j = 0; j < index; j++) {\n      temproaryPages.push(this.pdfPages[j]);\n    }\n\n    for (var j = index + 1; j < this.pdfPages.length; j++) {\n      temproaryPages.push(this.pdfPages[j]);\n    }\n\n    this.pdfPages = temproaryPages;\n  };\n  /**\n   * In fills dictionary by the data from `Page settings`.\n   * @private\n   */\n\n\n  PdfSection.prototype.applyPageSettings = function (container, parentSettings, state) {\n    var bounds = new RectangleF(state.origin, state.size);\n    container.items.setValue(this.dictionaryProperties.mediaBox, PdfArray.fromRectangle(bounds));\n    var rotate = 0;\n    rotate = PdfSectionCollection.rotateFactor * state.rotate;\n    var angle = new PdfNumber(rotate);\n    container.items.setValue(this.dictionaryProperties.rotate, angle);\n  };\n  /**\n   * Catches the Save event of the dictionary.\n   * @hidden\n   * @private\n   */\n\n\n  PdfSection.prototype.beginSave = function (state, writer) {\n    var doc = writer.document;\n    this.applyPageSettings(this.section, doc.pageSettings, state);\n  };\n  /**\n   * Draws page templates on the page.\n   * @private\n   */\n\n\n  PdfSection.prototype.drawTemplates = function (page, layer, document, foreground) {\n    var documentHeaders = this.getDocumentTemplates(document, page, foreground);\n    var sectionHeaders = this.getSectionTemplates(page, foreground);\n    this.drawTemplatesHelper(layer, document, documentHeaders);\n    this.drawTemplatesHelper(layer, document, sectionHeaders);\n  };\n  /**\n   * Draws page templates on the page.\n   * @private\n   */\n\n\n  PdfSection.prototype.drawTemplatesHelper = function (layer, document, templates) {\n    if (templates != null && templates.length > 0) {\n      var len = templates.length;\n\n      for (var i = 0; i < len; i++) {\n        var template = templates[i];\n        template.draw(layer, document);\n      }\n    }\n  };\n\n  return PdfSection;\n}();\n\nexport { PdfSection };\n\nvar PageSettingsState =\n/** @class */\nfunction () {\n  //Public Constructor\n\n  /**\n   * New instance to store the `PageSettings`.\n   * @private\n   */\n  function PageSettingsState(document) {\n    this.pageOrientation = document.pageSettings.orientation;\n    this.pageRotate = document.pageSettings.rotate;\n    this.pageSize = document.pageSettings.size;\n    this.pageOrigin = document.pageSettings.origin;\n  }\n\n  Object.defineProperty(PageSettingsState.prototype, \"orientation\", {\n    //public Properties\n\n    /**\n     * @hidden\n     * @private\n     */\n    get: function () {\n      return this.pageOrientation;\n    },\n    set: function (value) {\n      this.pageOrientation = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PageSettingsState.prototype, \"rotate\", {\n    /**\n     * @hidden\n     * @private\n     */\n    get: function () {\n      return this.pageRotate;\n    },\n    set: function (value) {\n      this.pageRotate = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PageSettingsState.prototype, \"size\", {\n    /**\n     * @hidden\n     * @private\n     */\n    get: function () {\n      return this.pageSize;\n    },\n    set: function (value) {\n      this.pageSize = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PageSettingsState.prototype, \"origin\", {\n    /**\n     * @hidden\n     * @private\n     */\n    get: function () {\n      return this.pageOrigin;\n    },\n    set: function (value) {\n      this.pageOrigin = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PageSettingsState;\n}();\n\nexport { PageSettingsState };","map":null,"metadata":{},"sourceType":"module"}