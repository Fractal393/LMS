{"ast":null,"code":"import { isNullOrUndefined, isBlazor } from '@syncfusion/ej2-base';\nimport { CheckBox } from '@syncfusion/ej2-buttons';\nimport { extend } from '@syncfusion/ej2-base';\nimport { isEditable, addRemoveActiveClasses, getComplexFieldID, getObject } from '../base/util';\n/**\n * `BooleanEditCell` is used to handle boolean cell type editing.\n * @hidden\n */\n\nvar BooleanEditCell =\n/** @class */\nfunction () {\n  function BooleanEditCell(parent) {\n    this.activeClasses = ['e-selectionbackground', 'e-active'];\n    this.parent = parent;\n  }\n\n  BooleanEditCell.prototype.create = function (args) {\n    var col = args.column;\n    var classNames = 'e-field e-boolcell';\n\n    if (col.type === 'checkbox') {\n      classNames = 'e-field e-boolcell e-edit-checkselect';\n    }\n\n    var complexFieldName = getComplexFieldID(args.column.field);\n    return this.parent.createElement('input', {\n      className: classNames,\n      attrs: {\n        type: 'checkbox',\n        value: args.value,\n        'e-mappinguid': col.uid,\n        id: this.parent.element.id + complexFieldName,\n        name: complexFieldName\n      }\n    });\n  };\n\n  BooleanEditCell.prototype.read = function (element) {\n    return element.checked;\n  };\n\n  BooleanEditCell.prototype.write = function (args) {\n    var selectChkBox;\n    var chkState;\n    var isAddRow = args.requestType === 'add' || args.row.classList.contains('e-addedrow');\n\n    if (!isNullOrUndefined(args.row)) {\n      selectChkBox = args.row.querySelector('.e-edit-checkselect');\n    }\n\n    if (getObject(args.column.field, args.rowData)) {\n      chkState = JSON.parse(getObject(args.column.field, args.rowData).toString().toLowerCase());\n    }\n\n    if (!isNullOrUndefined(selectChkBox) && args.column.type === 'checkbox') {\n      this.editType = this.parent.editSettings.mode;\n      this.editRow = args.row;\n\n      if (args.requestType !== 'add') {\n        var row = this.parent.getRowObjectFromUID(args.row.getAttribute('data-uid'));\n        chkState = row ? row.isSelected : false;\n      }\n\n      addRemoveActiveClasses.apply(void 0, [[].slice.call(args.row.querySelectorAll('.e-rowcell')), chkState].concat(this.activeClasses));\n    }\n\n    this.obj = new CheckBox(extend({\n      label: this.parent.editSettings.mode !== 'Dialog' ? ' ' : args.column.headerText,\n      checked: chkState,\n      disabled: !isEditable(args.column, args.requestType, args.element),\n      enableRtl: this.parent.enableRtl,\n      change: this.checkBoxChange.bind(this)\n    }, args.column.edit.params));\n\n    if (isBlazor()) {\n      this.obj.locale = this.parent.locale;\n    }\n\n    this.obj.appendTo(args.element);\n  };\n\n  BooleanEditCell.prototype.checkBoxChange = function (args) {\n    if (this.editRow && this.editType !== 'Dialog') {\n      var add = false;\n\n      if (!args.checked) {\n        this.editRow.removeAttribute('aria-selected');\n      } else {\n        add = true;\n        this.editRow.setAttribute('aria-selected', add.toString());\n      }\n\n      addRemoveActiveClasses.apply(void 0, [[].slice.call(this.editRow.querySelectorAll('.e-rowcell')), add].concat(this.activeClasses));\n    }\n  };\n\n  BooleanEditCell.prototype.destroy = function () {\n    if (this.obj) {\n      this.obj.destroy();\n    }\n  };\n\n  return BooleanEditCell;\n}();\n\nexport { BooleanEditCell };","map":null,"metadata":{},"sourceType":"module"}