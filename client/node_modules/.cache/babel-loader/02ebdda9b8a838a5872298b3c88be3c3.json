{"ast":null,"code":"import { isNullOrUndefined, isBlazor } from '@syncfusion/ej2-base';\nimport { Internationalization, setCulture } from '@syncfusion/ej2-base';\n/**\n * ValueFormatter class to globalize the value.\n * @hidden\n */\n\nvar ValueFormatter =\n/** @class */\nfunction () {\n  function ValueFormatter(cultureName) {\n    this.intl = new Internationalization();\n\n    if (!isNullOrUndefined(cultureName)) {\n      this.intl.culture = cultureName;\n    }\n  }\n\n  ValueFormatter.prototype.getFormatFunction = function (format) {\n    if (format.type) {\n      if (isBlazor()) {\n        var isServerRendered = 'isServerRendered';\n        format[isServerRendered] = true;\n      }\n\n      return this.intl.getDateFormat(format);\n    } else {\n      return this.intl.getNumberFormat(format);\n    }\n  };\n\n  ValueFormatter.prototype.getParserFunction = function (format) {\n    if (format.type) {\n      if (isBlazor()) {\n        var isServerRendered = 'isServerRendered';\n        format[isServerRendered] = true;\n      }\n\n      return this.intl.getDateParser(format);\n    } else {\n      return this.intl.getNumberParser(format);\n    }\n  };\n\n  ValueFormatter.prototype.fromView = function (value, format, type) {\n    if ((type === 'date' || type === 'datetime' || type === 'number') && !isNullOrUndefined(format)) {\n      return format(value);\n    } else {\n      return value;\n    }\n  };\n\n  ValueFormatter.prototype.toView = function (value, format) {\n    var result = value;\n\n    if (!isNullOrUndefined(format) && !isNullOrUndefined(value)) {\n      result = format(value);\n    }\n\n    return result;\n  };\n\n  ValueFormatter.prototype.setCulture = function (cultureName) {\n    if (!isNullOrUndefined(cultureName)) {\n      setCulture(cultureName);\n    }\n  };\n\n  return ValueFormatter;\n}();\n\nexport { ValueFormatter };","map":null,"metadata":{},"sourceType":"module"}