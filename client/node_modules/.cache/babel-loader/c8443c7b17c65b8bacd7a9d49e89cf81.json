{"ast":null,"code":"/**\r\n * DevExtreme (ui/form/ui.form.utils.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _type = require(\"../../core/utils/type\");\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) {\n    return;\n  }\n\n  if (\"string\" === typeof o) {\n    return _arrayLikeToArray(o, minLen);\n  }\n\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n\n  if (\"Object\" === n && o.constructor) {\n    n = o.constructor.name;\n  }\n\n  if (\"Map\" === n || \"Set\" === n) {\n    return Array.from(o);\n  }\n\n  if (\"Arguments\" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) {\n    return _arrayLikeToArray(o, minLen);\n  }\n}\n\nfunction _iterableToArray(iter) {\n  if (\"undefined\" !== typeof Symbol && Symbol.iterator in Object(iter)) {\n    return Array.from(iter);\n  }\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    return _arrayLikeToArray(arr);\n  }\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (null == len || len > arr.length) {\n    len = arr.length;\n  }\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nvar createItemPathByIndex = function (index, isTabs) {\n  return \"\".concat(isTabs ? \"tabs\" : \"items\", \"[\").concat(index, \"]\");\n};\n\nvar concatPaths = function (path1, path2) {\n  if ((0, _type.isDefined)(path1) && (0, _type.isDefined)(path2)) {\n    return \"\".concat(path1, \".\").concat(path2);\n  }\n\n  return path1 || path2;\n};\n\nvar getTextWithoutSpaces = function (text) {\n  return text ? text.replace(/\\s/g, \"\") : void 0;\n};\n\nvar isExpectedItem = function (item, fieldName) {\n  return item && (item.dataField === fieldName || item.name === fieldName || getTextWithoutSpaces(item.title) === fieldName || \"group\" === item.itemType && getTextWithoutSpaces(item.caption) === fieldName);\n};\n\nvar getFullOptionName = function (path, optionName) {\n  return \"\".concat(path, \".\").concat(optionName);\n};\n\nvar getOptionNameFromFullName = function (fullName) {\n  var parts = fullName.split(\".\");\n  return parts[parts.length - 1].replace(/\\[\\d+]/, \"\");\n};\n\nvar tryGetTabPath = function (fullPath) {\n  var pathParts = fullPath.split(\".\");\n\n  var resultPathParts = _toConsumableArray(pathParts);\n\n  for (var i = pathParts.length - 1; i >= 0; i--) {\n    if (isFullPathContainsTabs(pathParts[i])) {\n      return resultPathParts.join(\".\");\n    }\n\n    resultPathParts.splice(i, 1);\n  }\n\n  return \"\";\n};\n\nvar isFullPathContainsTabs = function (fullPath) {\n  return fullPath.indexOf(\"tabs\") > -1;\n};\n\nexports.getOptionNameFromFullName = getOptionNameFromFullName;\nexports.getFullOptionName = getFullOptionName;\nexports.getTextWithoutSpaces = getTextWithoutSpaces;\nexports.isExpectedItem = isExpectedItem;\nexports.createItemPathByIndex = createItemPathByIndex;\nexports.concatPaths = concatPaths;\nexports.tryGetTabPath = tryGetTabPath;\nexports.isFullPathContainsTabs = isFullPathContainsTabs;","map":null,"metadata":{},"sourceType":"script"}