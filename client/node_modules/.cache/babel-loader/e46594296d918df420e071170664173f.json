{"ast":null,"code":"/**\n * PdfGraphics.ts class for EJ2-PDF\n */\nimport { PdfColorSpace, TextRenderingMode, PdfFillMode, PdfTextAlignment } from './enum';\nimport { PdfVerticalAlignment, PdfBlendMode } from './enum';\nimport { PdfSubSuperScript } from './fonts/enum';\nimport { PdfStreamWriter } from './../input-output/pdf-stream-writer';\nimport { PdfPen } from './pdf-pen';\nimport { PdfBrush } from './brushes/pdf-brush';\nimport { PdfSolidBrush } from './brushes/pdf-solid-brush';\nimport { PdfFont } from './fonts/pdf-font';\nimport { PdfTransformationMatrix } from './pdf-transformation-matrix';\nimport { PointF, SizeF, RectangleF } from './../drawing/pdf-drawing';\nimport { ProcedureSets } from './constants';\nimport { PdfString } from './../primitives/pdf-string';\nimport { PdfStringFormat } from './fonts/pdf-string-format';\nimport { TemporaryDictionary } from './../collections/object-object-pair/dictionary';\nimport { PdfTransparency } from './pdf-transparency';\nimport { PdfStringLayouter, LineType } from './fonts/string-layouter';\nimport { DictionaryProperties } from './../input-output/pdf-dictionary-properties';\nimport { StringTokenizer } from './fonts/string-tokenizer';\nimport { PdfAutomaticFieldInfoCollection } from './../document/automatic-fields/automatic-field-info-collection';\nimport { PdfAutomaticFieldInfo } from './../document/automatic-fields/automatic-field-info';\nimport { Operators } from './../input-output/pdf-operators';\nimport { UnicodeTrueTypeFont } from './fonts/unicode-true-type-font';\nimport { InternalEnum } from './../primitives/pdf-string';\nimport { RtlRenderer } from './fonts/rtl-renderer';\nimport { PdfTextDirection } from './enum';\nimport { PathPointType } from './figures/enum';\nimport { PdfGradientBrush } from './../../implementation/graphics/brushes/pdf-gradient-brush';\nimport { PdfTilingBrush } from './brushes/pdf-tiling-brush';\n/**\n * `PdfGraphics` class represents a graphics context of the objects.\n * It's used for performing all the graphics operations.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a new page to the document\n * let page1 : PdfPage = document.pages.add();\n * // set the font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * // create black brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n * //\n * //graphics of the page\n * let page1Graphics : PdfGraphics = page1.graphics;\n * // draw the text on the page1 graphics\n * page1Graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n * //\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\n\nvar PdfGraphics =\n/** @class */\nfunction () {\n  function PdfGraphics(arg1, arg2, arg3) {\n    /**\n     * Represents the `Current color space`.\n     * @private\n     */\n    this.currentColorSpace = PdfColorSpace.Rgb;\n    /**\n     * Stores `previous rendering mode`.\n     * @private\n     */\n\n    this.previousTextRenderingMode = TextRenderingMode.Fill;\n    /**\n     * Previous `character spacing` value or 0.\n     * @private\n     */\n\n    this.previousCharacterSpacing = 0.0;\n    /**\n     * Previous `word spacing` value or 0.\n     * @private\n     */\n\n    this.previousWordSpacing = 0.0;\n    /**\n     * The `previously used text scaling` value.\n     * @private\n     */\n\n    this.previousTextScaling = 100.0;\n    /**\n     * Instance of `ProcedureSets` class.\n     * @private\n     */\n\n    this.procedureSets = new ProcedureSets();\n    /**\n     * To check wihether it is a `direct text rendering`.\n     * @default true\n     * @private\n     */\n\n    this.isNormalRender = true;\n    /**\n     * check whether to `use font size` to calculate the shift.\n     * @default false\n     * @private\n     */\n\n    this.isUseFontSize = false;\n    /**\n     * check whether the font is in `italic type`.\n     * @default false\n     * @private\n     */\n\n    this.isItalic = false;\n    /**\n     * Check whether it is an `emf Text Matrix`.\n     * @default false\n     * @private\n     */\n\n    this.isEmfTextScaled = false;\n    /**\n     * Check whether it is an `emf` call.\n     * @default false\n     * @private\n     */\n\n    this.isEmf = false;\n    /**\n     * Check whether it is an `emf plus` call.\n     * @default false\n     * @private\n     */\n\n    this.isEmfPlus = false;\n    /**\n     * Check whether it is in `base line format`.\n     * @default true\n     * @private\n     */\n\n    this.isBaselineFormat = true;\n    /**\n     * Emf Text `Scaling Factor`.\n     * @private\n     */\n\n    this.emfScalingFactor = new SizeF(0, 0);\n    /**\n     * To check whether the `last color space` of document and garphics is saved.\n     * @private\n     */\n\n    this.colorSpaceChanged = false;\n    /**\n     * Stores an instance of `DictionaryProperties`.\n     * @private\n     */\n\n    this.dictionaryProperties = new DictionaryProperties();\n    /**\n     * Checks whether the x co-ordinate is need to set as client size or not.\n     * @hidden\n     * @private\n     */\n\n    this.isOverloadWithPosition = false;\n    /**\n     * Checks whether the x co-ordinate is need to set as client size or not.\n     * @hidden\n     * @private\n     */\n\n    this.isPointOverload = false;\n    /**\n     * Current colorspaces.\n     * @hidden\n     * @private\n     */\n\n    this.currentColorSpaces = ['RGB', 'CMYK', 'GrayScale', 'Indexed'];\n    /**\n     * Checks the current image `is optimized` or not.\n     * @default false.\n     * @private\n     */\n\n    this.isImageOptimized = false;\n    /**\n     * Stores the `graphics states`.\n     * @private\n     */\n\n    this.graphicsState = [];\n    /**\n     * Indicates whether the object `had trasparency`.\n     * @default false\n     * @private\n     */\n\n    this.istransparencySet = false;\n    /**\n     * Stores the instance of `PdfAutomaticFieldInfoCollection` class .\n     * @default null\n     * @private\n     */\n\n    this.internalAutomaticFields = null;\n    /**\n     * Stores the index of the start line that should draw with in the next page.\n     * @private\n     */\n\n    this.startCutIndex = -1;\n    this.getResources = arg2;\n    this.canvasSize = arg1;\n\n    if (arg3 instanceof PdfStreamWriter) {\n      this.pdfStreamWriter = arg3;\n    } else {\n      this.pdfStreamWriter = new PdfStreamWriter(arg3);\n    }\n\n    this.initialize();\n  }\n\n  Object.defineProperty(PdfGraphics.prototype, \"stringLayoutResult\", {\n    //  Properties\n\n    /**\n     * Returns the `result` after drawing string.\n     * @private\n     */\n    get: function () {\n      return this.pdfStringLayoutResult;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphics.prototype, \"size\", {\n    /**\n     * Gets the `size` of the canvas.\n     * @private\n     */\n    get: function () {\n      return this.canvasSize;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphics.prototype, \"mediaBoxUpperRightBound\", {\n    /**\n     * Gets and Sets the value of `MediaBox upper right bound`.\n     * @private\n     */\n    get: function () {\n      if (typeof this.internalMediaBoxUpperRightBound === 'undefined') {\n        this.internalMediaBoxUpperRightBound = 0;\n      }\n\n      return this.internalMediaBoxUpperRightBound;\n    },\n    set: function (value) {\n      this.internalMediaBoxUpperRightBound = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphics.prototype, \"clientSize\", {\n    /**\n     * Gets the `size` of the canvas reduced by margins and page templates.\n     * @private\n     */\n    get: function () {\n      return new SizeF(this.clipBounds.width, this.clipBounds.height);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphics.prototype, \"colorSpace\", {\n    /**\n     * Gets or sets the current `color space` of the document\n     * @private\n     */\n    get: function () {\n      return this.currentColorSpace;\n    },\n    set: function (value) {\n      this.currentColorSpace = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphics.prototype, \"streamWriter\", {\n    /**\n     * Gets the `stream writer`.\n     * @private\n     */\n    get: function () {\n      return this.pdfStreamWriter;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphics.prototype, \"matrix\", {\n    /**\n     * Gets the `transformation matrix` reflecting current transformation.\n     * @private\n     */\n    get: function () {\n      if (this.transformationMatrix == null) {\n        this.transformationMatrix = new PdfTransformationMatrix();\n      }\n\n      return this.transformationMatrix;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphics.prototype, \"layer\", {\n    /**\n     * Gets the `layer` for the graphics, if exists.\n     * @private\n     */\n    get: function () {\n      return this.pageLayer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphics.prototype, \"page\", {\n    /**\n     * Gets the `page` for this graphics, if exists.\n     * @private\n     */\n    get: function () {\n      return this.pageLayer.page;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphics.prototype, \"automaticFields\", {\n    get: function () {\n      if (this.internalAutomaticFields == null || typeof this.internalAutomaticFields === 'undefined') {\n        this.internalAutomaticFields = new PdfAutomaticFieldInfoCollection();\n      }\n\n      return this.internalAutomaticFields;\n    },\n    enumerable: true,\n    configurable: true\n  }); //Implementation\n\n  /**\n   * `Initializes` this instance.\n   * @private\n   */\n\n  PdfGraphics.prototype.initialize = function () {\n    this.bStateSaved = false;\n    this.currentPen = null;\n    this.currentBrush = null;\n    this.currentFont = null;\n    this.currentColorSpace = PdfColorSpace.Rgb;\n    this.bCSInitialized = false;\n    this.transformationMatrix = null;\n    this.previousTextRenderingMode = -1; //.Fill;\n\n    this.previousCharacterSpacing = -1.0;\n    this.previousWordSpacing = -1.0;\n    this.previousTextScaling = -100.0; // this.m_trasparencies = null;\n\n    this.currentStringFormat = null;\n    this.clipBounds = new RectangleF(new PointF(0, 0), this.size);\n    this.getResources.getResources().requireProcedureSet(this.procedureSets.pdf);\n  };\n\n  PdfGraphics.prototype.drawPdfTemplate = function (template, location, size) {\n    if (typeof size === 'undefined') {\n      if (template == null) {\n        throw Error('ArgumentNullException-template');\n      }\n\n      this.drawPdfTemplate(template, location, template.size);\n    } else {\n      // let crossTable : PdfCrossTable = null;\n      // if (this.pageLayer != null) {\n      //     crossTable = (this.page as PdfPage).section.parentDocument.crossTable;\n      // }\n      if (template == null) {\n        throw Error('ArgumentNullException-template');\n      }\n\n      var scaleX = template.width > 0 ? size.width / template.width : 1;\n      var scaleY = template.height > 0 ? size.height / template.height : 1;\n      var bNeedScale = !(scaleX === 1 && scaleY === 1); // Save state.\n\n      var state = this.save(); // Take into consideration that rect location is bottom/left.\n\n      var matrix = new PdfTransformationMatrix();\n\n      if (this.pageLayer != null) {\n        this.getTranslateTransform(location.x, location.y + size.height, matrix);\n      }\n\n      if (bNeedScale) {\n        this.getScaleTransform(scaleX, scaleY, matrix);\n      }\n\n      this.pdfStreamWriter.modifyCtm(matrix); // Output template.\n\n      var resources = this.getResources.getResources();\n      var name_1 = resources.getName(template);\n      this.pdfStreamWriter.executeObject(name_1); // Restore state.\n\n      this.restore(state); //Transfer automatic fields from template.\n\n      var g = template.graphics;\n\n      if (g != null) {\n        for (var index = 0; index < g.automaticFields.automaticFields.length; index++) {\n          var fieldInfo = g.automaticFields.automaticFields[index];\n          var newLocation = new PointF(fieldInfo.location.x + location.x, fieldInfo.location.y + location.y);\n          var scalingX = template.size.width == 0 ? 0 : size.width / template.size.width;\n          var scalingY = template.size.height == 0 ? 0 : size.height / template.size.height;\n          this.automaticFields.add(new PdfAutomaticFieldInfo(fieldInfo.field, newLocation, scalingX, scalingY));\n          this.page.dictionary.modify();\n        }\n      }\n\n      this.getResources.getResources().requireProcedureSet(this.procedureSets.imageB);\n      this.getResources.getResources().requireProcedureSet(this.procedureSets.imageC);\n      this.getResources.getResources().requireProcedureSet(this.procedureSets.imageI);\n      this.getResources.getResources().requireProcedureSet(this.procedureSets.text);\n    }\n  };\n  /* tslint:disable */\n\n  /**\n   * @public\n   */\n\n\n  PdfGraphics.prototype.drawString = function (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) {\n    if (typeof arg1 === 'string' && arg2 instanceof PdfFont && (arg3 instanceof PdfPen || arg3 === null) && (arg4 instanceof PdfBrush || arg4 === null) && typeof arg5 === 'number' && typeof arg6 === 'number' && (arg7 instanceof PdfStringFormat || arg7 === null) && typeof arg8 === 'undefined') {\n      this.isOverloadWithPosition = true;\n      this.drawString(arg1, arg2, arg3, arg4, arg5, arg6, this.clientSize.width - arg5, 0, arg7);\n    } else {\n      var temparg3 = arg3;\n      var temparg4 = arg4;\n      var temparg5 = arg5;\n      var temparg6 = arg6;\n      var temparg7 = arg7;\n      var temparg8 = arg8;\n      var temparg9 = arg9;\n      var layouter = new PdfStringLayouter();\n      var result = layouter.layout(arg1, arg2, temparg9, new SizeF(temparg7, temparg8), this.isOverloadWithPosition, this.clientSize);\n\n      if (!result.empty) {\n        var rect = this.checkCorrectLayoutRectangle(result.actualSize, temparg5, temparg6, temparg9);\n\n        if (temparg7 <= 0) {\n          temparg5 = rect.x;\n          temparg7 = rect.width;\n        }\n\n        if (temparg8 <= 0) {\n          temparg6 = rect.y;\n          temparg8 = rect.height;\n        }\n\n        this.drawStringLayoutResult(result, arg2, temparg3, temparg4, new RectangleF(temparg5, temparg6, temparg7, temparg8), temparg9);\n        this.isEmfTextScaled = false;\n        this.emfScalingFactor = new SizeF(0, 0);\n      }\n\n      this.getResources.getResources().requireProcedureSet(this.procedureSets.text);\n      this.isNormalRender = true;\n      this.pdfStringLayoutResult = result;\n      this.isUseFontSize = false;\n    }\n  };\n  /* tslint:enable */\n\n\n  PdfGraphics.prototype.drawLine = function (arg1, arg2, arg3, arg4, arg5) {\n    if (arg2 instanceof PointF) {\n      var temparg2 = arg2;\n      var temparg3 = arg3;\n      this.drawLine(arg1, temparg2.x, temparg2.y, temparg3.x, temparg3.y);\n    } else {\n      var temparg2 = arg2;\n      var temparg3 = arg3;\n      var temparg4 = arg4;\n      var temparg5 = arg5;\n      this.stateControl(arg1, null, null);\n      var sw = this.streamWriter;\n      sw.beginPath(temparg2, temparg3);\n      sw.appendLineSegment(temparg4, temparg5);\n      sw.strokePath();\n      this.getResources.getResources().requireProcedureSet(this.procedureSets.pdf);\n    }\n  };\n  /* tslint:disable */\n\n\n  PdfGraphics.prototype.drawRectangle = function (arg1, arg2, arg3, arg4, arg5, arg6) {\n    if (arg1 instanceof PdfPen && typeof arg2 === 'number') {\n      var temparg3 = arg3;\n      this.drawRectangle(arg1, null, arg2, temparg3, arg4, arg5);\n    } else if (arg1 instanceof PdfBrush && typeof arg2 === 'number') {\n      var temparg3 = arg3;\n      this.drawRectangle(null, arg1, arg2, temparg3, arg4, arg5);\n    } else {\n      var temparg3 = arg3;\n      var temparg4 = arg4;\n      var temparg5 = arg5;\n      var temparg6 = arg6;\n\n      if (arg2 instanceof PdfTilingBrush) {\n        this.bCSInitialized = false;\n        var xOffset = this.matrix.matrix.offsetX + temparg3;\n        var yOffset = void 0;\n\n        if (this.layer != null && this.layer.page != null) {\n          yOffset = this.layer.page.size.height - this.matrix.matrix.offsetY + temparg4;\n        } else {\n          yOffset = this.clientSize.height - this.matrix.matrix.offsetY + temparg4;\n        }\n\n        arg2.location = new PointF(xOffset, yOffset);\n        arg2.graphics.colorSpace = this.colorSpace;\n      } else if (arg2 instanceof PdfGradientBrush) {\n        arg2.colorSpace = this.colorSpace;\n      }\n\n      if (arg2 instanceof PdfSolidBrush && arg2.color.isEmpty) {\n        arg2 = null;\n      }\n\n      var temparg1 = arg1;\n      var temparg2 = arg2;\n      this.stateControl(temparg1, temparg2, null);\n      this.streamWriter.appendRectangle(temparg3, temparg4, temparg5, temparg6);\n      this.drawPathHelper(temparg1, temparg2, false);\n    }\n  };\n\n  PdfGraphics.prototype.drawPathHelper = function (arg1, arg2, arg3, arg4) {\n    if (typeof arg3 === 'boolean') {\n      var temparg3 = arg3;\n      this.drawPathHelper(arg1, arg2, PdfFillMode.Winding, temparg3);\n    } else {\n      var temparg3 = arg3;\n      var temparg4 = arg4;\n      var isPen = arg1 != null;\n      var isBrush = arg2 != null;\n      var isEvenOdd = temparg3 === PdfFillMode.Alternate;\n\n      if (isPen && isBrush) {\n        this.streamWriter.fillStrokePath(isEvenOdd);\n      } else if (!isPen && !isBrush) {\n        this.streamWriter.endPath();\n      } else if (isPen) {\n        this.streamWriter.strokePath();\n      } else {\n        this.streamWriter.fillPath(isEvenOdd);\n      }\n    }\n  };\n  /* tslint:disable */\n\n\n  PdfGraphics.prototype.drawImage = function (arg1, arg2, arg3, arg4, arg5) {\n    if (typeof arg2 === 'number' && typeof arg3 === 'number' && typeof arg4 === 'undefined') {\n      var size = arg1.physicalDimension;\n      this.drawImage(arg1, arg2, arg3, size.width, size.height);\n    } else {\n      var temparg2 = arg2;\n      var temparg3 = arg3;\n      var temparg4 = arg4;\n      var temparg5 = arg5;\n      arg1.save();\n      var matrix = new PdfTransformationMatrix();\n      this.getTranslateTransform(temparg2, temparg3 + temparg5, matrix);\n      this.getScaleTransform(arg4, arg5, matrix);\n      this.pdfStreamWriter.write('q');\n      this.pdfStreamWriter.modifyCtm(matrix); // Output template.\n\n      var resources = this.getResources.getResources();\n\n      if (typeof this.pageLayer !== 'undefined' && this.page != null) {\n        resources.document = this.page.document;\n      }\n\n      var name_2 = resources.getName(arg1);\n\n      if (typeof this.pageLayer !== 'undefined') {\n        this.page.setResources(resources);\n      }\n\n      this.pdfStreamWriter.executeObject(name_2);\n      this.pdfStreamWriter.write(Operators.restoreState);\n      this.pdfStreamWriter.write(Operators.newLine);\n      var resource = this.getResources.getResources();\n      resource.requireProcedureSet(this.procedureSets.imageB);\n      resource.requireProcedureSet(this.procedureSets.imageC);\n      resource.requireProcedureSet(this.procedureSets.imageI);\n      resource.requireProcedureSet(this.procedureSets.text);\n    }\n  }; //Implementation\n\n  /* tslint:disable */\n\n  /**\n   * Returns `bounds` of the line info.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.getLineBounds = function (lineIndex, result, font, layoutRectangle, format) {\n    var bounds;\n\n    if (!result.empty && lineIndex < result.lineCount && lineIndex >= 0) {\n      var line = result.lines[lineIndex];\n      var vShift = this.getTextVerticalAlignShift(result.actualSize.height, layoutRectangle.height, format);\n      var y = vShift + layoutRectangle.y + result.lineHeight * lineIndex;\n      var lineWidth = line.width;\n      var hShift = this.getHorizontalAlignShift(lineWidth, layoutRectangle.width, format);\n      var lineIndent = this.getLineIndent(line, format, layoutRectangle, lineIndex === 0);\n      hShift += !this.rightToLeft(format) ? lineIndent : 0;\n      var x = layoutRectangle.x + hShift;\n      /* tslint:disable */\n\n      var width = !this.shouldJustify(line, layoutRectangle.width, format) ? lineWidth - lineIndent : layoutRectangle.width - lineIndent;\n      /* tslint:enable */\n\n      var height = result.lineHeight;\n      bounds = new RectangleF(x, y, width, height);\n    } else {\n      bounds = new RectangleF(0, 0, 0, 0);\n    }\n\n    return bounds;\n  };\n  /**\n   * Creates `lay outed rectangle` depending on the text settings.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.checkCorrectLayoutRectangle = function (textSize, x, y, format) {\n    var layoutedRectangle = new RectangleF(x, y, textSize.width, textSize.width);\n\n    if (format != null) {\n      switch (format.alignment) {\n        case PdfTextAlignment.Center:\n          layoutedRectangle.x -= layoutedRectangle.width / 2;\n          break;\n\n        case PdfTextAlignment.Right:\n          layoutedRectangle.x -= layoutedRectangle.width;\n          break;\n      }\n\n      switch (format.lineAlignment) {\n        case PdfVerticalAlignment.Middle:\n          layoutedRectangle.y -= layoutedRectangle.height / 2;\n          break;\n\n        case PdfVerticalAlignment.Bottom:\n          layoutedRectangle.y -= layoutedRectangle.height;\n          break;\n      }\n    }\n\n    return layoutedRectangle;\n  };\n  /**\n   * Sets the `layer` for the graphics.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.setLayer = function (layer) {\n    this.pageLayer = layer;\n    var page = layer.page;\n\n    if (page != null && typeof page !== 'undefined') {\n      page.beginSave = this.pageSave;\n    }\n  };\n  /**\n   * Adding page number field before page saving.\n   * @private\n   */\n\n  /* tslint:disable */\n\n\n  PdfGraphics.prototype.pageSave = function (page) {\n    if (page.graphics.automaticFields != null) {\n      for (var i = 0; i < page.graphics.automaticFields.automaticFields.length; i++) {\n        var fieldInfo = page.graphics.automaticFields.automaticFields[i];\n        fieldInfo.field.performDraw(page.graphics, fieldInfo.location, fieldInfo.scalingX, fieldInfo.scalingY);\n      }\n    }\n  };\n  /**\n   * `Draws a layout result`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.drawStringLayoutResult = function (result, font, pen, brush, layoutRectangle, format) {\n    if (!result.empty) {\n      this.applyStringSettings(font, pen, brush, format, layoutRectangle); // Set text scaling\n\n      var textScaling = format != null ? format.horizontalScalingFactor : 100.0;\n\n      if (textScaling !== this.previousTextScaling && !this.isEmfTextScaled) {\n        this.pdfStreamWriter.setTextScaling(textScaling);\n        this.previousTextScaling = textScaling;\n      }\n\n      var height = format == null || format.lineSpacing === 0 ? font.height : format.lineSpacing + font.height;\n      var subScript = format != null && format.subSuperScript === PdfSubSuperScript.SubScript;\n      var shift = 0;\n      shift = subScript ? height - (font.height + font.metrics.getDescent(format)) : height - font.metrics.getAscent(format);\n      this.shift = shift;\n      this.pdfStreamWriter.startNextLine(layoutRectangle.x, layoutRectangle.y - shift);\n      this.pdfStreamWriter.setLeading(+height);\n      var resultHeight = 0;\n      var remainingString = '';\n\n      for (var i = 0; i < result.lines.length; i++) {\n        resultHeight += result.lineHeight;\n\n        if (layoutRectangle.y + resultHeight > this.clientSize.height) {\n          this.startCutIndex = i;\n          break;\n        }\n      }\n\n      for (var j = this.startCutIndex; j < result.lines.length && j >= 0; j++) {\n        remainingString += result.lines[j].text;\n      }\n\n      var bounds = new RectangleF(layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height);\n      this.drawLayoutResult(result, font, format, layoutRectangle);\n      this.underlineStrikeoutText(pen, brush, result, font, bounds, format);\n      this.isEmfPlus = false;\n      this.isUseFontSize = false;\n\n      if (this.startCutIndex !== -1) {\n        var page = this.getNextPage();\n        page.graphics.drawString(remainingString, font, pen, brush, layoutRectangle.x, 0, layoutRectangle.width, 0, format);\n      }\n    } else {\n      throw new Error('ArgumentNullException:result');\n    }\n  };\n  /**\n   * Gets the `next page`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.getNextPage = function () {\n    var section = this.currentPage.section;\n    var nextPage = null;\n    var index = section.indexOf(this.currentPage);\n\n    if (index === section.count - 1) {\n      nextPage = section.add();\n    } else {\n      nextPage = section.getPages()[index + 1];\n    }\n\n    return nextPage;\n  };\n\n  PdfGraphics.prototype.setClip = function (rectangle, mode) {\n    if (typeof mode === 'undefined') {\n      this.setClip(rectangle, PdfFillMode.Winding);\n    } else {\n      this.pdfStreamWriter.appendRectangle(rectangle);\n      this.pdfStreamWriter.clipPath(mode === PdfFillMode.Alternate);\n    }\n  };\n  /**\n   * Applies all the `text settings`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.applyStringSettings = function (font, pen, brush, format, bounds) {\n    if (brush instanceof PdfTilingBrush) {\n      this.bCSInitialized = false;\n      brush.graphics.colorSpace = this.colorSpace;\n    } else if (brush instanceof PdfGradientBrush) {\n      this.bCSInitialized = false;\n      brush.colorSpace = this.colorSpace;\n    }\n\n    var setLineWidth = false;\n    var tm = this.getTextRenderingMode(pen, brush, format);\n    this.stateControl(pen, brush, font, format);\n    this.pdfStreamWriter.beginText();\n\n    if (tm !== this.previousTextRenderingMode) {\n      this.pdfStreamWriter.setTextRenderingMode(tm);\n      this.previousTextRenderingMode = tm;\n    } // Set character spacing.\n\n\n    var cs = format != null ? format.characterSpacing : 0;\n\n    if (cs !== this.previousCharacterSpacing && !this.isEmfTextScaled) {\n      this.pdfStreamWriter.setCharacterSpacing(cs);\n      this.previousCharacterSpacing = cs;\n    } // Set word spacing.\n    // NOTE: it works only if the space code is equal to 32 (0x20).\n\n\n    var ws = format != null ? format.wordSpacing : 0;\n\n    if (ws !== this.previousWordSpacing) {\n      this.pdfStreamWriter.setWordSpacing(ws);\n      this.previousWordSpacing = ws;\n    }\n  };\n  /**\n   * Calculates `shift value` if the text is vertically aligned.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.getTextVerticalAlignShift = function (textHeight, boundsHeight, format) {\n    var shift = 0;\n\n    if (boundsHeight >= 0 && format != null && format.lineAlignment !== PdfVerticalAlignment.Top) {\n      switch (format.lineAlignment) {\n        case PdfVerticalAlignment.Middle:\n          shift = (boundsHeight - textHeight) / 2;\n          break;\n\n        case PdfVerticalAlignment.Bottom:\n          shift = boundsHeight - textHeight;\n          break;\n      }\n    }\n\n    return shift;\n  };\n  /* tslint:disable */\n\n  /**\n   * `Draws layout result`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.drawLayoutResult = function (result, font, format, layoutRectangle) {\n    var vAlignShift = this.getTextVerticalAlignShift(result.actualSize.height, layoutRectangle.height, format);\n\n    if (vAlignShift !== 0) {\n      this.pdfStreamWriter.startNextLine(0, vAlignShift);\n    }\n\n    var ttfFont = font;\n    var unicode = ttfFont != null && ttfFont.isUnicode;\n    var embed = ttfFont != null && ttfFont.isEmbedFont;\n    var lines = result.lines;\n\n    for (var i = 0, len = lines.length; i < len && i !== this.startCutIndex; i++) {\n      var lineInfo = lines[i];\n      var line = lineInfo.text;\n      var lineWidth = lineInfo.width;\n      var hAlignShift = this.getHorizontalAlignShift(lineWidth, layoutRectangle.width, format);\n      var lineIndent = this.getLineIndent(lineInfo, format, layoutRectangle, i === 0);\n      hAlignShift += !this.rightToLeft(format) ? lineIndent : 0;\n\n      if (hAlignShift !== 0 && !this.isEmfTextScaled) {\n        this.pdfStreamWriter.startNextLine(hAlignShift, 0);\n      }\n\n      if (unicode) {\n        this.drawUnicodeLine(lineInfo, layoutRectangle, font, format);\n      } else {\n        this.drawAsciiLine(lineInfo, layoutRectangle, font, format);\n      }\n\n      if (hAlignShift !== 0 && !this.isEmfTextScaled) {\n        this.pdfStreamWriter.startNextLine(-hAlignShift, 0);\n      }\n\n      if (this.isOverloadWithPosition && lines.length > 1) {\n        this.pdfStreamWriter.startNextLine(-layoutRectangle.x, 0);\n        layoutRectangle.x = 0;\n        layoutRectangle.width = this.clientSize.width;\n        this.isOverloadWithPosition = false;\n        this.isPointOverload = true;\n      }\n    }\n\n    this.getResources.getResources().requireProcedureSet(this.procedureSets.text);\n\n    if (vAlignShift !== 0) {\n      this.pdfStreamWriter.startNextLine(0, -(vAlignShift - result.lineHeight));\n    }\n\n    this.pdfStreamWriter.endText();\n  };\n  /**\n   * `Draws Ascii line`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.drawAsciiLine = function (lineInfo, layoutRectangle, font, format) {\n    this.justifyLine(lineInfo, layoutRectangle.width, format);\n    var value = '';\n\n    if (lineInfo.text.indexOf('(') !== -1 || lineInfo.text.indexOf(')') !== -1) {\n      for (var i = 0; i < lineInfo.text.length; i++) {\n        if (lineInfo.text[i] === '(') {\n          value += '\\\\\\(';\n        } else if (lineInfo.text[i] === ')') {\n          value += '\\\\\\)';\n        } else {\n          value += lineInfo.text[i];\n        }\n      }\n    }\n\n    if (value === '') {\n      value = lineInfo.text;\n    }\n\n    var line = '(' + value + ')';\n    this.pdfStreamWriter.showNextLineText(new PdfString(line));\n  };\n  /**\n   * Draws unicode line.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.drawUnicodeLine = function (lineInfo, layoutRectangle, font, format) {\n    var line = lineInfo.text;\n    var lineWidth = lineInfo.width;\n    var rtl = format !== null && format.rightToLeft;\n    var useWordSpace = format !== null && (format.wordSpacing !== 0 || format.alignment === PdfTextAlignment.Justify);\n    var ttfFont = font;\n    var wordSpacing = this.justifyLine(lineInfo, layoutRectangle.width, format);\n    var rtlRender = new RtlRenderer();\n\n    if (rtl || format !== null && format.textDirection !== PdfTextDirection.None) {\n      var blocks = null;\n      var rightAlign = format !== null && format.alignment === PdfTextAlignment.Right;\n\n      if (format !== null && format.textDirection !== PdfTextDirection.None) {\n        /* tslint:disable-next-line:max-line-length */\n        blocks = rtlRender.layout(line, ttfFont, format.textDirection === PdfTextDirection.RightToLeft ? true : false, useWordSpace, format);\n      } else {\n        blocks = rtlRender.layout(line, ttfFont, rightAlign, useWordSpace, format);\n      }\n\n      var words = null;\n\n      if (blocks.length > 1) {\n        if (format !== null && format.textDirection !== PdfTextDirection.None) {\n          /* tslint:disable-next-line:max-line-length */\n          words = rtlRender.splitLayout(line, ttfFont, format.textDirection === PdfTextDirection.RightToLeft ? true : false, useWordSpace, format);\n        } else {\n          words = rtlRender.splitLayout(line, ttfFont, rightAlign, useWordSpace, format);\n        }\n      } else {\n        words = [line];\n      }\n\n      this.drawUnicodeBlocks(blocks, words, ttfFont, format, wordSpacing);\n    } else {\n      if (useWordSpace) {\n        var result = this.breakUnicodeLine(line, ttfFont, null);\n        var blocks = result.tokens;\n        var words = result.words;\n        this.drawUnicodeBlocks(blocks, words, ttfFont, format, wordSpacing);\n      } else {\n        var token = this.convertToUnicode(line, ttfFont);\n        var value = this.getUnicodeString(token);\n        this.streamWriter.showNextLineText(value);\n      }\n    }\n  };\n  /**\n   * Draws array of unicode tokens.\n   */\n\n  /* tslint:disable */\n\n\n  PdfGraphics.prototype.drawUnicodeBlocks = function (blocks, words, font, format, wordSpacing) {\n    /* tslint:enable */\n    if (blocks == null) {\n      throw new Error('Argument Null Exception : blocks');\n    }\n\n    if (words == null) {\n      throw new Error('Argument Null Exception : words');\n    }\n\n    if (font == null) {\n      throw new Error('Argument Null Exception : font');\n    }\n\n    this.streamWriter.startNextLine();\n    var x = 0;\n    var xShift = 0;\n    var firstLineIndent = 0;\n    var paragraphIndent = 0;\n\n    try {\n      if (format !== null) {\n        firstLineIndent = format.firstLineIndent;\n        paragraphIndent = format.paragraphIndent;\n        format.firstLineIndent = 0;\n        format.paragraphIndent = 0;\n      }\n\n      var spaceWidth = font.getCharWidth(StringTokenizer.whiteSpace, format) + wordSpacing;\n      var characterSpacing = format != null ? format.characterSpacing : 0;\n      var wordSpace = format !== null && wordSpacing === 0 ? format.wordSpacing : 0;\n      spaceWidth += characterSpacing + wordSpace;\n\n      for (var i = 0; i < blocks.length; i++) {\n        var token = blocks[i];\n        var word = words[i];\n        var tokenWidth = 0;\n\n        if (x !== 0) {\n          this.streamWriter.startNextLine(x, 0);\n        }\n\n        if (word.length > 0) {\n          tokenWidth +=\n          /*Utils.Round(*/\n          font.measureString(word, format).width\n          /*)*/\n          ;\n          tokenWidth += characterSpacing;\n          var val = this.getUnicodeString(token);\n          this.streamWriter.showText(val);\n        }\n\n        if (i !== blocks.length - 1) {\n          x = tokenWidth + spaceWidth;\n          xShift += x;\n        }\n      } // Rolback current line position.\n\n\n      if (xShift > 0) {\n        this.streamWriter.startNextLine(-xShift, 0);\n      }\n    } finally {\n      if (format !== null) {\n        format.firstLineIndent = firstLineIndent;\n        format.paragraphIndent = paragraphIndent;\n      }\n    }\n  };\n  /**\n   * Breakes the unicode line to the words and converts symbols to glyphs.\n   */\n\n\n  PdfGraphics.prototype.breakUnicodeLine = function (line, ttfFont, words) {\n    if (line === null) {\n      throw new Error('Argument Null Exception : line');\n    }\n\n    words = line.split(null);\n    var tokens = [];\n\n    for (var i = 0; i < words.length; i++) {\n      // Reconvert string according to unicode standard.\n      var word = words[i];\n      var token = this.convertToUnicode(word, ttfFont);\n      tokens[i] = token;\n    }\n\n    return {\n      tokens: tokens,\n      words: words\n    };\n  };\n  /**\n   * Creates PdfString from the unicode text.\n   */\n\n\n  PdfGraphics.prototype.getUnicodeString = function (token) {\n    if (token === null) {\n      throw new Error('Argument Null Exception : token');\n    }\n\n    var val = new PdfString(token);\n    val.converted = true;\n    val.encode = InternalEnum.ForceEncoding.Ascii;\n    return val;\n  };\n  /**\n   * Converts to unicode format.\n   */\n\n\n  PdfGraphics.prototype.convertToUnicode = function (text, ttfFont) {\n    var token = null;\n\n    if (text == null) {\n      throw new Error('Argument Null Exception : text');\n    }\n\n    if (ttfFont == null) {\n      throw new Error('Argument Null Exception : ttfFont');\n    }\n\n    if (ttfFont.fontInternal instanceof UnicodeTrueTypeFont) {\n      var ttfReader = ttfFont.fontInternal.ttfReader;\n      ttfFont.setSymbols(text);\n      token = ttfReader.convertString(text);\n      var bytes = PdfString.toUnicodeArray(token, false);\n      token = PdfString.byteToString(bytes);\n    }\n\n    return token;\n  };\n  /**\n   * `Justifies` the line if needed.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.justifyLine = function (lineInfo, boundsWidth, format) {\n    var line = lineInfo.text;\n    var lineWidth = lineInfo.width;\n    var shouldJustify = this.shouldJustify(lineInfo, boundsWidth, format);\n    var hasWordSpacing = format != null && format.wordSpacing !== 0;\n    var symbols = StringTokenizer.spaces;\n    var whitespacesCount = StringTokenizer.getCharsCount(line, symbols);\n    var wordSpace = 0;\n\n    if (shouldJustify) {\n      // Correct line width.\n      if (hasWordSpacing) {\n        lineWidth -= whitespacesCount * format.wordSpacing;\n      }\n\n      var difference = boundsWidth - lineWidth;\n      wordSpace = difference / whitespacesCount;\n      this.pdfStreamWriter.setWordSpacing(wordSpace);\n    } else {\n      // If there is justifying, but the line shouldn't be justified, restore default word spacing.\n      if (hasWordSpacing) {\n        this.pdfStreamWriter.setWordSpacing(format.wordSpacing);\n      } else {\n        this.pdfStreamWriter.setWordSpacing(0);\n      }\n    }\n\n    return wordSpace;\n  };\n  /**\n   * `Reset` or reinitialize the current graphic value.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.reset = function (size) {\n    this.canvasSize = size;\n    this.streamWriter.clear();\n    this.initialize();\n    this.initializeCoordinates();\n  };\n  /**\n   * Checks whether the line should be `justified`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.shouldJustify = function (lineInfo, boundsWidth, format) {\n    var line = lineInfo.text;\n    var lineWidth = lineInfo.width;\n    var justifyStyle = format != null && format.alignment === PdfTextAlignment.Justify;\n    var goodWidth = boundsWidth >= 0 && lineWidth < boundsWidth;\n    var symbols = StringTokenizer.spaces;\n    var whitespacesCount = StringTokenizer.getCharsCount(line, symbols);\n    var hasSpaces = whitespacesCount > 0 && line[0] !== StringTokenizer.whiteSpace;\n    var goodLineBreakStyle = (lineInfo.lineType & LineType.LayoutBreak) > 0;\n    /* tslint:disable */\n\n    var shouldJustify = justifyStyle && goodWidth && hasSpaces && (goodLineBreakStyle || format.alignment === PdfTextAlignment.Justify);\n    /* tslint:enable */\n\n    return shouldJustify;\n  };\n  /* tslint:disable */\n\n  /**\n   * Emulates `Underline, Strikeout` of the text if needed.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.underlineStrikeoutText = function (pen, brush, result, font, layoutRectangle, format) {\n    if (font.underline || font.strikeout) {\n      // Calculate line width.\n      var linePen = this.createUnderlineStikeoutPen(pen, brush, font, format);\n\n      if (linePen != null) {\n        // Approximate line positions.\n        var vShift = this.getTextVerticalAlignShift(result.actualSize.height, layoutRectangle.height, format);\n        var underlineYOffset = 0;\n        underlineYOffset = layoutRectangle.y + vShift + font.metrics.getAscent(format) + 1.5 * linePen.width;\n        var strikeoutYOffset = layoutRectangle.y + vShift + font.metrics.getHeight(format) / 2 + 1.5 * linePen.width;\n        var lines = result.lines; // Run through the text and draw lines.\n\n        for (var i = 0, len = result.lineCount; i < len; i++) {\n          var lineInfo = lines[i];\n          var line = lineInfo.text;\n          var lineWidth = lineInfo.width;\n          var hShift = this.getHorizontalAlignShift(lineWidth, layoutRectangle.width, format);\n          var lineIndent = this.getLineIndent(lineInfo, format, layoutRectangle, i === 0);\n          hShift += !this.rightToLeft(format) ? lineIndent : 0;\n          var x1 = layoutRectangle.x + hShift;\n          /* tslint:disable */\n\n          var x2 = !this.shouldJustify(lineInfo, layoutRectangle.width, format) ? x1 + lineWidth - lineIndent : x1 + layoutRectangle.width - lineIndent;\n          /* tslint:enable */\n\n          if (font.underline) {\n            var y = underlineYOffset;\n            this.drawLine(linePen, x1, y, x2, y);\n            underlineYOffset += result.lineHeight;\n          }\n\n          if (font.strikeout) {\n            var y = strikeoutYOffset;\n            this.drawLine(linePen, x1, y, x2, y);\n            strikeoutYOffset += result.lineHeight;\n          }\n\n          if (this.isPointOverload && lines.length > 1) {\n            layoutRectangle.x = 0;\n            layoutRectangle.width = this.clientSize.width;\n          }\n        }\n\n        this.isPointOverload = false;\n      }\n    }\n  };\n  /**\n   * `Creates a pen` for drawing lines in the text.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.createUnderlineStikeoutPen = function (pen, brush, font, format) {\n    // Calculate line width.\n    var lineWidth = font.metrics.getSize(format) / 20;\n    var linePen = null; // Create a pen fo the lines.\n\n    if (pen != null) {\n      linePen = new PdfPen(pen.color, lineWidth);\n    } else if (brush != null) {\n      linePen = new PdfPen(brush, lineWidth);\n    }\n\n    return linePen;\n  };\n  /**\n   * Return `text rendering mode`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.getTextRenderingMode = function (pen, brush, format) {\n    var tm = TextRenderingMode.None;\n\n    if (pen != null && brush != null) {\n      tm = TextRenderingMode.FillStroke;\n    } else if (pen != null) {\n      tm = TextRenderingMode.Stroke;\n    } else {\n      tm = TextRenderingMode.Fill;\n    }\n\n    if (format != null && format.clipPath) {\n      tm |= TextRenderingMode.ClipFlag;\n    }\n\n    return tm;\n  };\n  /**\n   * Returns `line indent` for the line.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.getLineIndent = function (lineInfo, format, layoutBounds, firstLine) {\n    var lineIndent = 0;\n    var firstParagraphLine = (lineInfo.lineType & LineType.FirstParagraphLine) > 0;\n\n    if (format != null && firstParagraphLine) {\n      lineIndent = firstLine ? format.firstLineIndent : format.paragraphIndent;\n      lineIndent = layoutBounds.width > 0 ? Math.min(layoutBounds.width, lineIndent) : lineIndent;\n    }\n\n    return lineIndent;\n  };\n  /**\n   * Calculates shift value if the line is `horizontaly aligned`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.getHorizontalAlignShift = function (lineWidth, boundsWidth, format) {\n    var shift = 0;\n\n    if (boundsWidth >= 0 && format != null && format.alignment !== PdfTextAlignment.Left) {\n      switch (format.alignment) {\n        case PdfTextAlignment.Center:\n          shift = (boundsWidth - lineWidth) / 2;\n          break;\n\n        case PdfTextAlignment.Right:\n          shift = boundsWidth - lineWidth;\n          break;\n      }\n    }\n\n    return shift;\n  };\n  /**\n   * Gets or sets the value that indicates `text direction` mode.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.rightToLeft = function (format) {\n    var rtl = format != null && format.rightToLeft;\n\n    if (format !== null && typeof format !== 'undefined') {\n      if (format.textDirection !== PdfTextDirection.None && typeof format.textDirection !== 'undefined') {\n        rtl = true;\n      }\n    }\n\n    return rtl;\n  };\n\n  PdfGraphics.prototype.stateControl = function (pen, brush, font, format) {\n    if (typeof format === 'undefined') {\n      this.stateControl(pen, brush, font, null);\n    } else {\n      if (brush instanceof PdfGradientBrush) {\n        this.bCSInitialized = false;\n        brush.colorSpace = this.colorSpace;\n      }\n\n      if (brush instanceof PdfTilingBrush) {\n        this.bCSInitialized = false;\n        brush.graphics.colorSpace = this.colorSpace;\n      }\n\n      var saveState = false;\n\n      if (brush !== null) {\n        var solidBrush = brush;\n\n        if (typeof this.pageLayer !== 'undefined' && this.pageLayer != null) {\n          if (this.colorSpaceChanged === false) {\n            this.lastDocumentCS = this.pageLayer.page.document.colorSpace;\n            this.lastGraphicsCS = this.pageLayer.page.graphics.colorSpace;\n            this.colorSpace = this.pageLayer.page.document.colorSpace;\n            this.currentColorSpace = this.pageLayer.page.document.colorSpace;\n            this.colorSpaceChanged = true;\n          }\n        }\n\n        this.initCurrentColorSpace(this.currentColorSpace);\n      } else if (pen != null) {\n        var pdfPen = pen;\n\n        if (typeof this.pageLayer !== 'undefined' && this.pageLayer != null) {\n          /* tslint:disable */\n          this.colorSpace = this.pageLayer.page.document.colorSpace;\n          this.currentColorSpace = this.pageLayer.page.document.colorSpace;\n        }\n\n        this.initCurrentColorSpace(this.currentColorSpace);\n      }\n\n      this.penControl(pen, saveState);\n      this.brushControl(brush, saveState);\n      this.fontControl(font, format, saveState);\n    }\n  };\n  /**\n   * Initializes the `current color space`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.initCurrentColorSpace = function (colorspace) {\n    var re = this.getResources.getResources();\n\n    if (!this.bCSInitialized) {\n      if (this.currentColorSpace != PdfColorSpace.GrayScale) {\n        this.pdfStreamWriter.setColorSpace('Device' + this.currentColorSpaces[this.currentColorSpace], true);\n        this.pdfStreamWriter.setColorSpace('Device' + this.currentColorSpaces[this.currentColorSpace], false);\n        this.bCSInitialized = true;\n      } else {\n        this.pdfStreamWriter.setColorSpace('DeviceGray', true);\n        this.pdfStreamWriter.setColorSpace('DeviceGray', false);\n        this.bCSInitialized = true;\n      }\n    }\n  };\n  /**\n   * Controls the `pen state`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.penControl = function (pen, saveState) {\n    if (pen != null) {\n      this.currentPen = pen;\n      /* tslint:disable */\n\n      pen.monitorChanges(this.currentPen, this.pdfStreamWriter, this.getResources, saveState, this.colorSpace, this.matrix.clone());\n      /* tslint:enable */\n\n      this.currentPen = pen.clone();\n    }\n  };\n  /**\n   * Controls the `brush state`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.brushControl = function (brush, saveState) {\n    if (brush != null && typeof brush !== 'undefined') {\n      var b = brush.clone();\n      var lgb = b;\n\n      if (lgb !== null && typeof lgb !== 'undefined' && !(brush instanceof PdfSolidBrush) && !(brush instanceof PdfTilingBrush)) {\n        var m = lgb.matrix;\n        var matrix = this.matrix.clone();\n\n        if (m != null) {\n          m.multiply(matrix);\n          matrix = m;\n        }\n\n        lgb.matrix = matrix;\n      }\n\n      this.currentBrush = lgb;\n      var br = brush;\n      /* tslint:disable */\n\n      b.monitorChanges(this.currentBrush, this.pdfStreamWriter, this.getResources, saveState, this.colorSpace);\n      /* tslint:enable */\n\n      this.currentBrush = brush;\n      brush = null;\n    }\n  };\n  /**\n   * Saves the font and other `font settings`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.fontControl = function (font, format, saveState) {\n    if (font != null) {\n      var curSubSuper = format != null ? format.subSuperScript : PdfSubSuperScript.None;\n      /* tslint:disable */\n\n      var prevSubSuper = this.currentStringFormat != null ? this.currentStringFormat.subSuperScript : PdfSubSuperScript.None;\n      /* tslint:enable */\n\n      if (saveState || font !== this.currentFont || curSubSuper !== prevSubSuper) {\n        var resources = this.getResources.getResources();\n        this.currentFont = font;\n        this.currentStringFormat = format;\n        var size = font.metrics.getSize(format);\n        /* tslint:disable */\n\n        this.isEmfTextScaled = false;\n        var fontName = resources.getName(font);\n        this.pdfStreamWriter.setFont(font, fontName, size);\n      }\n    }\n  };\n\n  PdfGraphics.prototype.setTransparency = function (arg1, arg2, arg3) {\n    if (typeof arg2 === 'undefined') {\n      this.istransparencySet = true;\n      this.setTransparency(arg1, arg1, PdfBlendMode.Normal);\n    } else if (typeof arg2 === 'number' && typeof arg3 === 'undefined') {\n      this.setTransparency(arg1, arg2, PdfBlendMode.Normal);\n    } else {\n      if (this.trasparencies == null) {\n        this.trasparencies = new TemporaryDictionary();\n      }\n\n      var transp = null;\n      var td = new TransparencyData(arg1, arg2, arg3);\n\n      if (this.trasparencies.containsKey(td)) {\n        transp = this.trasparencies.getValue(td);\n      }\n\n      if (transp == null) {\n        transp = new PdfTransparency(arg1, arg2, arg3);\n        this.trasparencies.setValue(td, transp);\n      }\n\n      var resources = this.getResources.getResources();\n      var name_3 = resources.getName(transp);\n      var sw = this.streamWriter;\n      sw.setGraphicsState(name_3);\n    }\n  };\n\n  PdfGraphics.prototype.clipTranslateMargins = function (x, y, left, top, right, bottom) {\n    if (x instanceof RectangleF && typeof y === 'undefined') {\n      this.clipBounds = x;\n      this.pdfStreamWriter.writeComment('Clip margins.');\n      this.pdfStreamWriter.appendRectangle(x);\n      this.pdfStreamWriter.closePath();\n      this.pdfStreamWriter.clipPath(false);\n      this.pdfStreamWriter.writeComment('Translate co-ordinate system.');\n      this.translateTransform(x.x, x.y);\n    } else if (typeof x === 'number') {\n      var clipArea = new RectangleF(left, top, this.size.width - left - right, this.size.height - top - bottom);\n      this.clipBounds = clipArea;\n      this.pdfStreamWriter.writeComment(\"Clip margins.\");\n      this.pdfStreamWriter.appendRectangle(clipArea);\n      this.pdfStreamWriter.closePath();\n      this.pdfStreamWriter.clipPath(false);\n      this.pdfStreamWriter.writeComment(\"Translate co-ordinate system.\");\n      this.translateTransform(x, y);\n    }\n  };\n  /**\n   * `Updates y` co-ordinate.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.updateY = function (y) {\n    return -y;\n  };\n  /**\n   * Used to `translate the transformation`.\n   * ```typescript\n   * // create a new PDF document\n   * let document : PdfDocument = new PdfDocument();\n   * // create a new page\n   * let page1 : PdfPage = document.pages.add();\n   * // set pen\n   * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n   * //\n   * // set translate transform\n   * page1.graphics.translateTransform(100, 100);\n   * //\n   * // draw the rectangle after applying translate transform\n   * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));\n   * // save the document.\n   * document.save('output.pdf');\n   * // destroy the document\n   * document.destroy();\n   * ```\n   * @param offsetX The x-coordinate of the translation.\n   * @param offsetY The y-coordinate of the translation.\n   */\n\n\n  PdfGraphics.prototype.translateTransform = function (offsetX, offsetY) {\n    var matrix = new PdfTransformationMatrix();\n    this.getTranslateTransform(offsetX, offsetY, matrix);\n    this.pdfStreamWriter.modifyCtm(matrix);\n    this.matrix.multiply(matrix);\n  };\n  /**\n   * `Translates` coordinates of the input matrix.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.getTranslateTransform = function (x, y, input) {\n    input.translate(x, this.updateY(y));\n    return input;\n  };\n  /* tslint:disable */\n\n  /**\n   * Applies the specified `scaling operation` to the transformation matrix of this Graphics by prepending it to the object's transformation matrix.\n   * ```typescript\n   * // create a new PDF document\n   * let document : PdfDocument = new PdfDocument();\n   * // create a new page\n   * let page1 : PdfPage = document.pages.add();\n   * // create pen\n   * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n   * //\n   * // apply scaling trasformation\n   * page1.graphics.scaleTransform(1.5, 2);\n   * //\n   * // draw the rectangle after applying scaling transform\n   * page1.graphics.drawRectangle(pen, new RectangleF({x : 100, y : 100}, {width : 100, height : 50}));\n   * // save the document.\n   * document.save('output.pdf');\n   * // destroy the document\n   * document.destroy();\n   * ```\n   * @param scaleX Scale factor in the x direction.\n   * @param scaleY Scale factor in the y direction.\n   */\n\n  /* tslint:enable */\n\n\n  PdfGraphics.prototype.scaleTransform = function (scaleX, scaleY) {\n    var matrix = new PdfTransformationMatrix();\n    this.getScaleTransform(scaleX, scaleY, matrix);\n    this.pdfStreamWriter.modifyCtm(matrix);\n    this.matrix.multiply(matrix);\n  };\n  /**\n   * `Scales` coordinates of the input matrix.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.getScaleTransform = function (x, y, input) {\n    if (input == null) {\n      input = new PdfTransformationMatrix();\n    }\n\n    input.scale(x, y);\n    return input;\n  };\n  /**\n   * Applies the specified `rotation` to the transformation matrix of this Graphics.\n   * ```typescript\n   * // create a new PDF document\n   * let document : PdfDocument = new PdfDocument();\n   * // create a new page\n   * let page1 : PdfPage = document.pages.add();\n   * // create pen\n   * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n   * //\n   * // set RotateTransform with 25 degree of angle\n   * page1.graphics.rotateTransform(25);\n   * //\n   * // draw the rectangle after RotateTransformation\n   * page1.graphics.drawRectangle(pen, new RectangleF({x : 100, y : 100}, {width : 100, height : 50}));\n   * // save the document.\n   * document.save('output.pdf');\n   * // destroy the document\n   * document.destroy();\n   * ```\n   * @param angle Angle of rotation in degrees.\n   */\n\n\n  PdfGraphics.prototype.rotateTransform = function (angle) {\n    var matrix = new PdfTransformationMatrix();\n    this.getRotateTransform(angle, matrix);\n    this.pdfStreamWriter.modifyCtm(matrix);\n    this.matrix.multiply(matrix);\n  };\n  /**\n   * `Initializes coordinate system`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.initializeCoordinates = function () {\n    // Matrix equation: TM(T-1)=M', where T=[1 0 0 -1 0 h]\n    this.pdfStreamWriter.writeComment('Change co-ordinate system to left/top.'); // Translate co-ordinates only, don't flip.\n\n    if (this.mediaBoxUpperRightBound !== -this.size.height) {\n      if (this.cropBox == null) {\n        if (this.mediaBoxUpperRightBound === this.size.height || this.mediaBoxUpperRightBound === 0) {\n          this.translateTransform(0, this.updateY(this.size.height));\n        } else {\n          this.translateTransform(0, this.updateY(this.mediaBoxUpperRightBound));\n        }\n      }\n    }\n  };\n  /**\n   * `Rotates` coordinates of the input matrix.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.getRotateTransform = function (angle, input) {\n    if (input == null || typeof input === 'undefined') {\n      input = new PdfTransformationMatrix();\n    }\n\n    input.rotate(this.updateY(angle));\n    return input;\n  };\n  /**\n   * `Saves` the current state of this Graphics and identifies the saved state with a GraphicsState.\n   * ```typescript\n   * // create a new PDF document\n   * let document : PdfDocument = new PdfDocument();\n   * // create a new page\n   * let page1 : PdfPage = document.pages.add();\n   * // create pen\n   * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n   * //\n   * // save the graphics state\n   * let state1 : PdfGraphicsState = page1.graphics.save();\n   * //\n   * page1.graphics.scaleTransform(1.5, 2);\n   * // draw the rectangle\n   * page1.graphics.drawRectangle(pen, new RectangleF({x : 100, y : 100}, {width : 100, height : 50}));\n   * // restore the graphics state\n   * page1.graphics.restore(state1);\n   * // save the document.\n   * document.save('output.pdf');\n   * // destroy the document\n   * document.destroy();\n   * ```\n   */\n\n\n  PdfGraphics.prototype.save = function () {\n    var state = new PdfGraphicsState(this, this.matrix.clone());\n    state.brush = this.currentBrush;\n    state.pen = this.currentPen;\n    state.font = this.currentFont;\n    state.colorSpace = this.currentColorSpace;\n    state.characterSpacing = this.previousCharacterSpacing;\n    state.wordSpacing = this.previousWordSpacing;\n    state.textScaling = this.previousTextScaling;\n    state.textRenderingMode = this.previousTextRenderingMode;\n    this.graphicsState.push(state);\n    this.pdfStreamWriter.saveGraphicsState();\n    return state;\n  };\n\n  PdfGraphics.prototype.restore = function (state) {\n    if (typeof state === 'undefined') {\n      if (this.graphicsState.length > 0) {\n        this.doRestoreState();\n      }\n    } else {\n      if (this.graphicsState.indexOf(state) !== -1) {\n        for (;;) {\n          if (this.graphicsState.length === 0) {\n            break;\n          }\n\n          var popState = this.doRestoreState();\n\n          if (popState === state) {\n            break;\n          }\n        }\n      }\n    }\n  };\n  /**\n   * `Restores graphics state`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.doRestoreState = function () {\n    var state = this.graphicsState.pop();\n    this.transformationMatrix = state.matrix;\n    this.currentBrush = state.brush;\n    this.currentPen = state.pen;\n    this.currentFont = state.font;\n    this.currentColorSpace = state.colorSpace;\n    this.previousCharacterSpacing = state.characterSpacing;\n    this.previousWordSpacing = state.wordSpacing;\n    this.previousTextScaling = state.textScaling;\n    this.previousTextRenderingMode = state.textRenderingMode;\n    this.pdfStreamWriter.restoreGraphicsState();\n    return state;\n  };\n  /* tslint:enable */\n\n  /**\n   * `Draws the specified path`, using its original physical size, at the location specified by a coordinate pair.\n   * ```typescript\n   * // create a new PDF document.\n   * let document : PdfDocument = new PdfDocument();\n   * // add a page to the document.\n   * let page1 : PdfPage = document.pages.add();\n   * //Create new PDF path.\n   * let path : PdfPath = new PdfPath();\n   * //Add line path points.\n   * path.addLine(new PointF(10, 100), new PointF(10, 200));\n   * path.addLine(new PointF(100, 100), new PointF(100, 200));\n   * path.addLine(new PointF(100, 200), new PointF(55, 150));\n   * // set pen\n   * let pen : PdfPen = new PdfPen(new PdfColor(255, 0, 0));\n   * // set brush\n   * let brush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n   * // draw the path\n   * page1.graphics.drawPath(pen, brush, path);\n   * //\n   * // save the document.\n   * document.save('output.pdf');\n   * // destroy the document\n   * document.destroy();\n   * ```\n   * @param pen Color of the text.\n   * @param brush Color of the text.\n   * @param path Draw path.\n   */\n\n\n  PdfGraphics.prototype.drawPath = function (pen, brush, path) {\n    if (brush instanceof PdfTilingBrush) {\n      this.bCSInitialized = false;\n      brush.graphics.colorSpace = this.colorSpace;\n    } else if (brush instanceof PdfGradientBrush) {\n      this.bCSInitialized = false;\n      brush.colorSpace = this.colorSpace;\n    }\n\n    this.stateControl(pen, brush, null);\n    this.buildUpPath(path.pathPoints, path.pathTypes);\n    this.drawPathHelper(pen, brush, path.fillMode, false);\n  };\n  /* tslint:disable-next-line:max-line-length */\n\n\n  PdfGraphics.prototype.drawArc = function (arg1, arg2, arg3, arg4, arg5, arg6, arg7) {\n    if (arg2 instanceof RectangleF) {\n      this.drawArc(arg1, arg2.x, arg2.y, arg2.width, arg2.height, arg3, arg4);\n    } else {\n      if (arg7 !== 0) {\n        this.stateControl(arg1, null, null);\n        this.constructArcPath(arg2, arg3, arg2 + arg4, arg3 + arg5, arg6, arg7);\n        this.drawPathHelper(arg1, null, false);\n      }\n    }\n  };\n  /**\n   * Builds up the path.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.buildUpPath = function (arg1, arg2) {\n    var cnt = arg1.length;\n\n    for (var i = 0; i < cnt; ++i) {\n      var typeValue = 0;\n      var point = arg1[i];\n\n      switch (arg2[i] & PdfGraphics.pathTypesValuesMask) {\n        case PathPointType.Start:\n          this.pdfStreamWriter.beginPath(point.x, point.y);\n          break;\n\n        case PathPointType.Bezier3:\n          var p2 = new PointF(0, 0);\n          var p3 = new PointF(0, 0);\n          var result1 = this.getBezierPoints(arg1, arg2, i, p2, p3);\n          this.pdfStreamWriter.appendBezierSegment(point, result1.p2, result1.p3);\n          i = result1.i;\n          break;\n\n        case PathPointType.Line:\n          this.pdfStreamWriter.appendLineSegment(point);\n          break;\n\n        default:\n          throw new Error('ArithmeticException - Incorrect path formation.');\n      }\n\n      typeValue = arg2[i];\n      this.checkFlags(typeValue);\n    }\n  };\n  /**\n   * Gets the bezier points from respective arrays.\n   * @private\n   */\n\n  /* tslint:disable-next-line:max-line-length */\n\n\n  PdfGraphics.prototype.getBezierPoints = function (points, types, i, p2, p3) {\n    var errorMsg = 'Malforming path.';\n    ++i;\n\n    if ((types[i] & PdfGraphics.pathTypesValuesMask) === PathPointType.Bezier3) {\n      p2 = points[i];\n      ++i;\n\n      if ((types[i] & PdfGraphics.pathTypesValuesMask) === PathPointType.Bezier3) {\n        p3 = points[i];\n      } else {\n        throw new Error('ArgumentException : errorMsg');\n      }\n    } else {\n      throw new Error('ArgumentException : errorMsg');\n    }\n\n    return {\n      i: i,\n      p2: p2,\n      p3: p3\n    };\n  };\n  /**\n   * Checks path point type flags.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.checkFlags = function (type) {\n    if ((type & PathPointType.CloseSubpath) === PathPointType.CloseSubpath) {\n      this.pdfStreamWriter.closePath();\n    }\n  };\n  /**\n   * Constructs the arc path using Bezier curves.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.constructArcPath = function (x1, y1, x2, y2, startAng, sweepAngle) {\n    var points = this.getBezierArc(x1, y1, x2, y2, startAng, sweepAngle);\n\n    if (points.length === 0) {\n      return;\n    }\n\n    var pt = [points[0], points[1], points[2], points[3], points[4], points[5], points[6], points[7]];\n    this.pdfStreamWriter.beginPath(pt[0], pt[1]);\n    var i = 0;\n\n    for (i = 0; i < points.length; i = i + 8) {\n      pt = [points[i], points[i + 1], points[i + 2], points[i + 3], points[i + 4], points[i + 5], points[i + 6], points[i + 7]];\n      this.pdfStreamWriter.appendBezierSegment(pt[2], pt[3], pt[4], pt[5], pt[6], pt[7]);\n    }\n  };\n  /**\n   * Gets the bezier points for arc constructing.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.getBezierArc = function (numX1, numY1, numX2, numY2, s1, e1) {\n    if (numX1 > numX2) {\n      var tmp = void 0;\n      tmp = numX1;\n      numX1 = numX2;\n      numX2 = tmp;\n    }\n\n    if (numY2 > numY1) {\n      var tmp = void 0;\n      tmp = numY1;\n      numY1 = numY2;\n      numY2 = tmp;\n    }\n\n    var fragAngle1;\n    var numFragments;\n\n    if (Math.abs(e1) <= 90) {\n      fragAngle1 = e1;\n      numFragments = 1;\n    } else {\n      numFragments = Math.ceil(Math.abs(e1) / 90);\n      fragAngle1 = e1 / numFragments;\n    }\n\n    var xcen = (numX1 + numX2) / 2;\n    var ycen = (numY1 + numY2) / 2;\n    var rx = (numX2 - numX1) / 2;\n    var ry = (numY2 - numY1) / 2;\n    var halfAng = fragAngle1 * (Math.PI / 360);\n    var kappa = Math.abs(4.0 / 3.0 * (1.0 - Math.cos(halfAng)) / Math.sin(halfAng));\n    var pointsList = [];\n\n    for (var i = 0; i < numFragments; i++) {\n      var thetaValue0 = (s1 + i * fragAngle1) * (Math.PI / 180);\n      var thetaValue1 = (s1 + (i + 1) * fragAngle1) * (Math.PI / 180);\n      var cos0 = Math.cos(thetaValue0);\n      var cos1 = Math.cos(thetaValue1);\n      var sin0 = Math.sin(thetaValue0);\n      var sin1 = Math.sin(thetaValue1);\n\n      if (fragAngle1 > 0) {\n        /* tslint:disable-next-line:max-line-length */\n        pointsList.push(xcen + rx * cos0, ycen - ry * sin0, xcen + rx * (cos0 - kappa * sin0), ycen - ry * (sin0 + kappa * cos0), xcen + rx * (cos1 + kappa * sin1), ycen - ry * (sin1 - kappa * cos1), xcen + rx * cos1, ycen - ry * sin1);\n      } else {\n        /* tslint:disable-next-line:max-line-length */\n        pointsList.push(xcen + rx * cos0, ycen - ry * sin0, xcen + rx * (cos0 + kappa * sin0), ycen - ry * (sin0 - kappa * cos0), xcen + rx * (cos1 - kappa * sin1), ycen - ry * (sin1 + kappa * cos1), xcen + rx * cos1, ycen - ry * sin1);\n      }\n    }\n\n    return pointsList;\n  }; // Constants\n\n  /**\n   * Specifies the mask of `path type values`.\n   * @private\n   */\n\n\n  PdfGraphics.pathTypesValuesMask = 0xf;\n  /**\n   * Checks whether the object is `transparencyObject`.\n   * @hidden\n   * @private\n   */\n\n  PdfGraphics.transparencyObject = false;\n  return PdfGraphics;\n}();\n\nexport { PdfGraphics };\n/**\n * `GetResourceEventHandler` class is alternate for event handlers and delegates.\n * @private\n * @hidden\n */\n\nvar GetResourceEventHandler =\n/** @class */\nfunction () {\n  /**\n   * Initialize instance of `GetResourceEventHandler` class.\n   * Alternate for event handlers and delegates.\n   * @private\n   */\n  function GetResourceEventHandler(sender) {\n    this.sender = sender;\n  }\n  /**\n   * Return the instance of `PdfResources` class.\n   * @private\n   */\n\n\n  GetResourceEventHandler.prototype.getResources = function () {\n    return this.sender.getResources();\n  };\n\n  return GetResourceEventHandler;\n}();\n\nexport { GetResourceEventHandler };\n\nvar PdfGraphicsState =\n/** @class */\nfunction () {\n  function PdfGraphicsState(graphics, matrix) {\n    /**\n     * Stores `previous rendering mode`.\n     * @default TextRenderingMode.Fill\n     * @private\n     */\n    this.internalTextRenderingMode = TextRenderingMode.Fill;\n    /**\n     * `Previous character spacing` value or 0.\n     * @default 0.0\n     * @private\n     */\n\n    this.internalCharacterSpacing = 0.0;\n    /**\n     * `Previous word spacing` value or 0.\n     * @default 0.0\n     * @private\n     */\n\n    this.internalWordSpacing = 0.0;\n    /**\n     * The previously used `text scaling value`.\n     * @default 100.0\n     * @private\n     */\n\n    this.internalTextScaling = 100.0;\n    /**\n     * `Current color space`.\n     * @default PdfColorSpace.Rgb\n     * @private\n     */\n\n    this.pdfColorSpace = PdfColorSpace.Rgb;\n\n    if (typeof graphics !== 'undefined') {\n      this.pdfGraphics = graphics;\n      this.transformationMatrix = matrix;\n    }\n  }\n\n  Object.defineProperty(PdfGraphicsState.prototype, \"graphics\", {\n    // Properties\n\n    /**\n     * Gets the parent `graphics object`.\n     * @private\n     */\n    get: function () {\n      return this.pdfGraphics;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphicsState.prototype, \"matrix\", {\n    /**\n     * Gets the `current matrix`.\n     * @private\n     */\n    get: function () {\n      return this.transformationMatrix;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphicsState.prototype, \"characterSpacing\", {\n    /**\n     * Gets or sets the `current character spacing`.\n     * @private\n     */\n    get: function () {\n      return this.internalCharacterSpacing;\n    },\n    set: function (value) {\n      this.internalCharacterSpacing = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphicsState.prototype, \"wordSpacing\", {\n    /**\n     * Gets or sets the `word spacing` value.\n     * @private\n     */\n    get: function () {\n      return this.internalWordSpacing;\n    },\n    set: function (value) {\n      this.internalWordSpacing = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphicsState.prototype, \"textScaling\", {\n    /**\n     * Gets or sets the `text scaling` value.\n     * @private\n     */\n    get: function () {\n      return this.internalTextScaling;\n    },\n    set: function (value) {\n      this.internalTextScaling = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphicsState.prototype, \"pen\", {\n    /**\n     * Gets or sets the `current pen` object.\n     * @private\n     */\n    get: function () {\n      return this.pdfPen;\n    },\n    set: function (value) {\n      this.pdfPen = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphicsState.prototype, \"brush\", {\n    /**\n     * Gets or sets the `brush`.\n     * @private\n     */\n    get: function () {\n      return this.pdfBrush;\n    },\n    set: function (value) {\n      this.pdfBrush = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphicsState.prototype, \"font\", {\n    /**\n     * Gets or sets the `current font` object.\n     * @private\n     */\n    get: function () {\n      return this.pdfFont;\n    },\n    set: function (value) {\n      this.pdfFont = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphicsState.prototype, \"colorSpace\", {\n    /**\n     * Gets or sets the `current color space` value.\n     * @private\n     */\n    get: function () {\n      return this.pdfColorSpace;\n    },\n    set: function (value) {\n      this.pdfColorSpace = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphicsState.prototype, \"textRenderingMode\", {\n    /**\n     * Gets or sets the `text rendering mode`.\n     * @private\n     */\n    get: function () {\n      return this.internalTextRenderingMode;\n    },\n    set: function (value) {\n      this.internalTextRenderingMode = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfGraphicsState;\n}();\n\nexport { PdfGraphicsState };\n\nvar TransparencyData =\n/** @class */\nfunction () {\n  // Constructors\n\n  /**\n   * Initializes a new instance of the `TransparencyData` class.\n   * @private\n   */\n  function TransparencyData(alphaPen, alphaBrush, blendMode) {\n    this.alphaPen = alphaPen;\n    this.alphaBrush = alphaBrush;\n    this.blendMode = blendMode;\n  }\n\n  return TransparencyData;\n}();","map":null,"metadata":{},"sourceType":"module"}