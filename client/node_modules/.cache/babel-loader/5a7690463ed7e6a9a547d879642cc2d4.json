{"ast":null,"code":"import * as events from '../base/constant';\nimport { RenderType } from '../base/enum';\nimport { FreezeRender, FreezeContentRender } from '../renderer/freeze-renderer';\nimport { VirtualFreezeRenderer, VirtualFreezeHdrRenderer } from '../renderer/virtual-freeze-renderer';\n/**\n * `Freeze` module is used to handle Frozen rows and columns.\n * @hidden\n */\n\nvar Freeze =\n/** @class */\nfunction () {\n  function Freeze(parent, locator) {\n    this.parent = parent;\n    this.locator = locator;\n    this.addEventListener();\n  }\n\n  Freeze.prototype.getModuleName = function () {\n    return 'freeze';\n  };\n\n  Freeze.prototype.addEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.on(events.initialLoad, this.instantiateRenderer, this);\n  };\n\n  Freeze.prototype.instantiateRenderer = function () {\n    this.parent.log('limitation', this.getModuleName());\n    var renderer = this.locator.getService('rendererFactory');\n\n    if (this.parent.getFrozenColumns()) {\n      this.parent.enableColumnVirtualization ? renderer.addRenderer(RenderType.Header, new VirtualFreezeHdrRenderer(this.parent, this.locator)) : renderer.addRenderer(RenderType.Header, new FreezeRender(this.parent, this.locator));\n      this.parent.enableVirtualization ? renderer.addRenderer(RenderType.Content, new VirtualFreezeRenderer(this.parent, this.locator)) : renderer.addRenderer(RenderType.Content, new FreezeContentRender(this.parent, this.locator));\n    }\n  };\n\n  Freeze.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(events.initialLoad, this.instantiateRenderer);\n  };\n\n  Freeze.prototype.destroy = function () {\n    this.removeEventListener();\n  };\n\n  return Freeze;\n}();\n\nexport { Freeze };","map":null,"metadata":{},"sourceType":"module"}