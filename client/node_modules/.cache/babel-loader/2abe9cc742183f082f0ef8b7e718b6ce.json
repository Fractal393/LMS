{"ast":null,"code":"/**\n * Template Engine\n */\nvar LINES = new RegExp('\\\\n|\\\\r|\\\\s\\\\s+', 'g');\nvar QUOTES = new RegExp(/'|\"/g);\nvar IF_STMT = new RegExp('if ?\\\\(');\nvar ELSEIF_STMT = new RegExp('else if ?\\\\(');\nvar ELSE_STMT = new RegExp('else');\nvar FOR_STMT = new RegExp('for ?\\\\(');\nvar IF_OR_FOR = new RegExp('(\\/if|\\/for)');\nvar CALL_FUNCTION = new RegExp('\\\\((.*)\\\\)', '');\nvar NOT_NUMBER = new RegExp('^[0-9]+$', 'g');\nvar WORD = new RegExp('[\\\\w\"\\'.\\\\s+]+', 'g');\nvar DBL_QUOTED_STR = new RegExp('\"(.*?)\"', 'g');\nvar WORDIF = new RegExp('[\\\\w\"\\'@#$.\\\\s+]+', 'g');\nvar exp = new RegExp('\\\\${([^}]*)}', 'g'); // let cachedTemplate: Object = {};\n\nvar ARR_OBJ = /^\\..*/gm;\nvar SINGLE_SLASH = /\\\\/gi;\nvar DOUBLE_SLASH = /\\\\\\\\/gi;\nvar WORDFUNC = new RegExp('[\\\\w\"\\'@#$.\\\\s+]+', 'g');\nvar WINDOWFUNC = /\\window\\./gm;\n/**\n * The function to set regular expression for template expression string.\n * @param  {RegExp} value - Value expression.\n * @private\n */\n\nexport function expression(value) {\n  if (value) {\n    exp = value;\n  }\n\n  return exp;\n} // /**\n//  * To render the template string from the given data.\n//  * @param  {string} template - String Template.\n//  * @param  {Object[]|JSON} data - DataSource for the template.\n//  * @param  {Object} helper? - custom helper object.\n//  */\n// export function template(template: string, data: JSON, helper?: Object): string {\n//     let hash: string = hashCode(template);\n//     let tmpl: Function;\n//     if (!cachedTemplate[hash]) {\n//         tmpl = cachedTemplate[hash] = compile(template, helper);\n//     } else {\n//         tmpl = cachedTemplate[hash];\n//     }\n//     return tmpl(data);\n// }\n\n/**\n * Compile the template string into template function.\n * @param  {string} template - The template string which is going to convert.\n * @param  {Object} helper? - Helper functions as an object.\n * @private\n */\n\nexport function compile(template, helper) {\n  var argName = 'data';\n  var evalExpResult = evalExp(template, argName, helper);\n  var fnCode = \"var str=\\\"\" + evalExpResult + \"\\\"; return str;\"; // tslint:disable-next-line:no-function-constructor-with-string-args\n\n  var fn = new Function(argName, fnCode);\n  return fn.bind(helper);\n} // function used to evaluate the function expression\n\nfunction evalExp(str, nameSpace, helper) {\n  var varCOunt = 0;\n  /**\n   * Variable containing Local Keys\n   */\n\n  var localKeys = [];\n  var isClass = str.match(/class=\"([^\\\"]+|)\\s{2}/g);\n  var singleSpace = '';\n\n  if (isClass) {\n    isClass.forEach(function (value) {\n      singleSpace = value.replace(/\\s\\s+/g, ' ');\n      str = str.replace(value, singleSpace);\n    });\n  }\n\n  return str.replace(LINES, '').replace(DBL_QUOTED_STR, '\\'$1\\'').replace(exp, function (match, cnt, offset, matchStr) {\n    var SPECIAL_CHAR = /\\@|\\#|\\$/gm;\n    var matches = cnt.match(CALL_FUNCTION); // matches to detect any function calls\n\n    if (matches) {\n      var rlStr = matches[1];\n\n      if (ELSEIF_STMT.test(cnt)) {\n        //handling else-if condition\n        cnt = '\";} ' + cnt.replace(matches[1], rlStr.replace(WORD, function (str) {\n          str = str.trim();\n          return addNameSpace(str, !QUOTES.test(str) && localKeys.indexOf(str) === -1, nameSpace, localKeys);\n        })) + '{ \\n str = str + \"';\n      } else if (IF_STMT.test(cnt)) {\n        //handling if condition\n        cnt = '\"; ' + cnt.replace(matches[1], rlStr.replace(WORDIF, function (strs) {\n          return HandleSpecialCharArrObj(strs, nameSpace, localKeys);\n        })) + '{ \\n str = str + \"';\n      } else if (FOR_STMT.test(cnt)) {\n        //handling for condition\n        var rlStr_1 = matches[1].split(' of '); // replace for each into actual JavaScript\n\n        cnt = '\"; ' + cnt.replace(matches[1], function (mtc) {\n          localKeys.push(rlStr_1[0]);\n          localKeys.push(rlStr_1[0] + 'Index');\n          varCOunt = varCOunt + 1; // tslint:disable-next-line\n\n          return 'var i' + varCOunt + '=0; i' + varCOunt + ' < ' + addNameSpace(rlStr_1[1], true, nameSpace, localKeys) + '.length; i' + varCOunt + '++';\n        }) + '{ \\n ' + rlStr_1[0] + '= ' + addNameSpace(rlStr_1[1], true, nameSpace, localKeys) + '[i' + varCOunt + ']; \\n var ' + rlStr_1[0] + 'Index=i' + varCOunt + '; \\n str = str + \"';\n      } else {\n        //helper function handling\n        var fnStr = cnt.split('(');\n        var fNameSpace = helper && helper.hasOwnProperty(fnStr[0]) ? 'this.' : 'global';\n        fNameSpace = /\\./.test(fnStr[0]) ? '' : fNameSpace;\n        var ftArray = matches[1].split(',');\n\n        if (matches[1].length !== 0 && !/data/.test(ftArray[0]) && !/window./.test(ftArray[0])) {\n          matches[1] = fNameSpace === 'global' ? nameSpace + '.' + matches[1] : matches[1];\n        }\n\n        var splRegexp = /\\@|\\$|\\#/gm;\n        var arrObj = /\\]\\./gm;\n\n        if (WINDOWFUNC.test(cnt) && arrObj.test(cnt) || splRegexp.test(cnt)) {\n          var splArrRegexp = /\\@|\\$|\\#|\\]\\./gm;\n\n          if (splArrRegexp.test(cnt)) {\n            // tslint:disable-next-line\n            cnt = '\"+ ' + (fNameSpace === 'global' ? '' : fNameSpace) + cnt.replace(matches[1], rlStr.replace(WORDFUNC, function (strs) {\n              return HandleSpecialCharArrObj(strs, nameSpace, localKeys);\n            })) + '+ \"';\n          }\n        } else {\n          cnt = '\" + ' + (fNameSpace === 'global' ? '' : fNameSpace) + cnt.replace(rlStr, addNameSpace(matches[1].replace(/,( |)data.|,/gi, ',' + nameSpace + '.').replace(/,( |)data.window/gi, ',window'), fNameSpace === 'global' ? false : true, nameSpace, localKeys)) + '+\"';\n        }\n      }\n    } else if (ELSE_STMT.test(cnt)) {\n      // handling else condition\n      cnt = '\"; ' + cnt.replace(ELSE_STMT, '} else { \\n str = str + \"');\n    } else if (!!cnt.match(IF_OR_FOR)) {\n      // close condition \n      cnt = cnt.replace(IF_OR_FOR, '\"; \\n } \\n str = str + \"');\n    } else if (SPECIAL_CHAR.test(cnt)) {\n      // template string with double slash with special character\n      if (cnt.match(SINGLE_SLASH)) {\n        cnt = SlashReplace(cnt);\n      }\n\n      cnt = '\"+' + NameSpaceForspecialChar(cnt, localKeys.indexOf(cnt) === -1, nameSpace, localKeys) + '\"]+\"';\n    } else {\n      // template string with double slash\n      if (cnt.match(SINGLE_SLASH)) {\n        cnt = SlashReplace(cnt);\n        cnt = '\"+' + NameSpaceForspecialChar(cnt, localKeys.indexOf(cnt) === -1, nameSpace, localKeys) + '\"]+\"';\n      } else {\n        // evaluate normal expression\n        cnt = '\"+' + addNameSpace(cnt.replace(/\\,/gi, '+' + nameSpace + '.'), localKeys.indexOf(cnt) === -1, nameSpace, localKeys) + '+\"';\n      }\n    }\n\n    return cnt;\n  });\n}\n\nfunction addNameSpace(str, addNS, nameSpace, ignoreList) {\n  return addNS && !NOT_NUMBER.test(str) && ignoreList.indexOf(str.split('.')[0]) === -1 ? nameSpace + '.' + str : str;\n}\n\nfunction NameSpaceArrObj(str, addNS, nameSpace, ignoreList) {\n  var arrObjReg = /^\\..*/gm;\n  return addNS && !NOT_NUMBER.test(str) && ignoreList.indexOf(str.split('.')[0]) === -1 && !arrObjReg.test(str) ? nameSpace + '.' + str : str;\n} // // Create hashCode for template string to storeCached function\n// function hashCode(str: string): string {\n//     return str.split('').reduce((a: number, b: string) => { a = ((a << 5) - a) + b.charCodeAt(0); return a & a; }, 0).toString();\n// }\n\n\nfunction NameSpaceForspecialChar(str, addNS, nameSpace, ignoreList) {\n  return addNS && !NOT_NUMBER.test(str) && ignoreList.indexOf(str.split('.')[0]) === -1 ? nameSpace + '[\"' + str : str;\n} // tslint:disable-next-line\n\n\nfunction SlashReplace(tempStr) {\n  // tslint:disable-next-line\n  var double = \"\\\\\\\\\";\n\n  if (tempStr.match(DOUBLE_SLASH)) {\n    tempStr = tempStr;\n  } else {\n    tempStr = tempStr.replace(SINGLE_SLASH, double);\n  }\n\n  return tempStr;\n}\n\nfunction HandleSpecialCharArrObj(str, nameSpaceNew, keys) {\n  str = str.trim();\n  var windowFunc = /\\window\\./gm;\n\n  if (!windowFunc.test(str)) {\n    var quotes = /'|\"/gm;\n    var splRegexp = /\\@|\\$|\\#/gm;\n\n    if (splRegexp.test(str)) {\n      str = NameSpaceForspecialChar(str, keys.indexOf(str) === -1, nameSpaceNew, keys) + '\"]';\n    }\n\n    if (ARR_OBJ.test(str)) {\n      return NameSpaceArrObj(str, !quotes.test(str) && keys.indexOf(str) === -1, nameSpaceNew, keys);\n    } else {\n      return addNameSpace(str, !quotes.test(str) && keys.indexOf(str) === -1, nameSpaceNew, keys);\n    }\n  } else {\n    return str;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}