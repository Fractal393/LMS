{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { merge, formatUnit, isNullOrUndefined, append, detach, isBlazor, extend } from '@syncfusion/ej2-base';\nimport { attributes, addClass, removeClass, prepend, closest, remove } from '@syncfusion/ej2-base';\nimport { Component, EventHandler, Property, Complex, Event } from '@syncfusion/ej2-base';\nimport { NotifyPropertyChanges, ChildProperty } from '@syncfusion/ej2-base';\nimport { compile, SanitizeHtmlHelper } from '@syncfusion/ej2-base';\nimport { Animation, rippleEffect, Touch } from '@syncfusion/ej2-base';\nimport { DataManager, Query } from '@syncfusion/ej2-data';\nimport { createCheckBox } from '@syncfusion/ej2-buttons';\nimport { ListBase, getFieldValues } from '../common/list-base';\nimport { updateBlazorTemplate, resetBlazorTemplate, blazorTemplates } from '@syncfusion/ej2-base'; // Effect Configuration Effect[] =  [fromViewBackward,fromViewForward,toViewBackward,toviewForward];\n\nvar effectsConfig = {\n  'None': [],\n  'SlideLeft': ['SlideRightOut', 'SlideLeftOut', 'SlideLeftIn', 'SlideRightIn'],\n  'SlideDown': ['SlideTopOut', 'SlideBottomOut', 'SlideBottomIn', 'SlideTopIn'],\n  'Zoom': ['FadeOut', 'FadeZoomOut', 'FadeZoomIn', 'FadeIn'],\n  'Fade': ['FadeOut', 'FadeOut', 'FadeIn', 'FadeIn']\n};\nvar effectsRTLConfig = {\n  'None': [],\n  'SlideLeft': ['SlideLeftOut', 'SlideRightOut', 'SlideRightIn', 'SlideLeftIn'],\n  'SlideDown': ['SlideBottomOut', 'SlideTopOut', 'SlideTopIn', 'SlideBottomIn'],\n  'Zoom': ['FadeZoomOut', 'FadeOut', 'FadeIn', 'FadeZoomIn'],\n  'Fade': ['FadeOut', 'FadeOut', 'FadeIn', 'FadeIn']\n}; // don't use space in classnames.\n\nexport var classNames = {\n  root: 'e-listview',\n  hover: 'e-hover',\n  selected: 'e-active',\n  focused: 'e-focused',\n  parentItem: 'e-list-parent',\n  listItem: 'e-list-item',\n  listIcon: 'e-list-icon',\n  textContent: 'e-text-content',\n  listItemText: 'e-list-text',\n  groupListItem: 'e-list-group-item',\n  hasChild: 'e-has-child',\n  view: 'e-view',\n  header: 'e-list-header',\n  headerText: 'e-headertext',\n  headerTemplateText: 'e-headertemplate-text',\n  text: 'e-text',\n  disable: 'e-disabled',\n  content: 'e-content',\n  icon: 'e-icons',\n  backIcon: 'e-icon-back',\n  checkboxWrapper: 'e-checkbox-wrapper',\n  checkbox: 'e-checkbox',\n  checked: 'e-check',\n  checklist: 'e-checklist',\n  checkboxIcon: 'e-frame',\n  checkboxRight: 'e-checkbox-right',\n  checkboxLeft: 'e-checkbox-left',\n  listviewCheckbox: 'e-listview-checkbox',\n  itemCheckList: 'e-checklist',\n  virtualElementContainer: 'e-list-virtualcontainer'\n};\nvar LISTVIEW_TEMPLATE_PROPERTY = 'Template';\nvar LISTVIEW_GROUPTEMPLATE_PROPERTY = 'GroupTemplate';\nvar LISTVIEW_HEADERTEMPLATE_PROPERTY = 'HeaderTemplate';\nvar swipeVelocity = 0.5;\n/**\n * Represents the field settings of the ListView.\n */\n\nvar FieldSettings =\n/** @class */\nfunction (_super) {\n  __extends(FieldSettings, _super);\n\n  function FieldSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property('id')], FieldSettings.prototype, \"id\", void 0);\n\n  __decorate([Property('text')], FieldSettings.prototype, \"text\", void 0);\n\n  __decorate([Property('isChecked')], FieldSettings.prototype, \"isChecked\", void 0);\n\n  __decorate([Property('isVisible')], FieldSettings.prototype, \"isVisible\", void 0);\n\n  __decorate([Property('enabled')], FieldSettings.prototype, \"enabled\", void 0);\n\n  __decorate([Property('iconCss')], FieldSettings.prototype, \"iconCss\", void 0);\n\n  __decorate([Property('child')], FieldSettings.prototype, \"child\", void 0);\n\n  __decorate([Property('tooltip')], FieldSettings.prototype, \"tooltip\", void 0);\n\n  __decorate([Property('groupBy')], FieldSettings.prototype, \"groupBy\", void 0);\n\n  __decorate([Property('text')], FieldSettings.prototype, \"sortBy\", void 0);\n\n  __decorate([Property('htmlAttributes')], FieldSettings.prototype, \"htmlAttributes\", void 0);\n\n  __decorate([Property('tableName')], FieldSettings.prototype, \"tableName\", void 0);\n\n  return FieldSettings;\n}(ChildProperty);\n\nexport { FieldSettings };\n/**\n * Represents the EJ2 ListView control.\n * ```html\n * <div id=\"listview\">\n * <ul>\n * <li>Favorite</li>\n * <li>Documents</li>\n * <li>Downloads</li>\n * </ul>\n * </div>\n * ```\n * ```typescript\n *   var listviewObject = new ListView({});\n *   listviewObject.appendTo(\"#listview\");\n * ```\n */\n\nvar ListView =\n/** @class */\nfunction (_super) {\n  __extends(ListView, _super);\n  /**\n   * Constructor for creating the widget\n   */\n\n\n  function ListView(options, element) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.itemReRender = false;\n    _this.previousSelectedItems = [];\n    _this.hiddenItems = [];\n    _this.enabledItems = [];\n    _this.disabledItems = [];\n    return _this;\n  }\n  /**\n   * @private\n   */\n\n\n  ListView.prototype.onPropertyChanged = function (newProp, oldProp) {\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'htmlAttributes':\n          this.setHTMLAttribute();\n          break;\n\n        case 'cssClass':\n          this.setCSSClass(oldProp.cssClass);\n          break;\n\n        case 'enable':\n          this.setEnable();\n          break;\n\n        case 'width':\n        case 'height':\n          this.setSize();\n          break;\n\n        case 'enableRtl':\n          this.setEnableRTL();\n          break;\n\n        case 'fields':\n          this.listBaseOption.fields = this.fields.properties;\n\n          if (this.enableVirtualization) {\n            if (!(this.isServerRendered && isBlazor())) {\n              this.virtualizationModule.reRenderUiVirtualization();\n            }\n          } else {\n            if (isBlazor() && this.isServerRendered && !this.enableVirtualization) {\n              this.itemReRender = true;\n            }\n\n            this.reRender();\n          }\n\n          break;\n\n        case 'headerTitle':\n          if (!this.curDSLevel.length) {\n            this.header(this.headerTitle, false);\n          }\n\n          break;\n\n        case 'query':\n          if (this.enableVirtualization) {\n            if (!(isBlazor() && this.isServerRendered)) {\n              this.virtualizationModule.reRenderUiVirtualization();\n            }\n          } else {\n            if (isBlazor() && this.isServerRendered && !this.enableVirtualization) {\n              this.itemReRender = true;\n            }\n\n            this.reRender();\n          }\n\n          break;\n\n        case 'showHeader':\n          this.header(this.headerTitle, false);\n          break;\n\n        case 'enableVirtualization':\n          if (!isNullOrUndefined(this.contentContainer)) {\n            detach(this.contentContainer);\n          }\n\n          this.refresh();\n          break;\n\n        case 'showCheckBox':\n        case 'checkBoxPosition':\n          if (!isBlazor() || !this.isServerRendered) {\n            if (this.enableVirtualization) {\n              this.virtualizationModule.reRenderUiVirtualization();\n            } else {\n              this.setCheckbox();\n            }\n          }\n\n          break;\n\n        case 'dataSource':\n          if (this.enableVirtualization) {\n            if (!(this.isServerRendered && isBlazor())) {\n              this.virtualizationModule.reRenderUiVirtualization();\n            }\n          } else {\n            if (isBlazor() && this.isServerRendered && !this.enableVirtualization) {\n              this.itemReRender = true;\n            }\n\n            this.reRender();\n          }\n\n          break;\n\n        case 'sortOrder':\n        case 'showIcon':\n          if (isBlazor() && this.isServerRendered) {\n            // tslint:disable\n            this.interopAdaptor.invokeMethodAsync('ItemSorting'); //tslint:enable\n          } else {\n            if (this.enableVirtualization) {\n              this.virtualizationModule.reRenderUiVirtualization();\n            } else {\n              this.listBaseOption.showIcon = this.showIcon;\n              this.curViewDS = this.getSubDS();\n              this.resetCurrentList();\n            }\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    }\n  }; // Model Changes\n\n\n  ListView.prototype.setHTMLAttribute = function () {\n    if (Object.keys(this.htmlAttributes).length) {\n      attributes(this.element, this.htmlAttributes);\n    }\n  };\n\n  ListView.prototype.setCSSClass = function (oldCSSClass) {\n    if (this.cssClass) {\n      addClass([this.element], this.cssClass.split(' ').filter(function (css) {\n        return css;\n      }));\n    }\n\n    if (oldCSSClass) {\n      removeClass([this.element], oldCSSClass.split(' ').filter(function (css) {\n        return css;\n      }));\n    }\n  };\n\n  ListView.prototype.setSize = function () {\n    this.element.style.height = formatUnit(this.height);\n    this.element.style.width = formatUnit(this.width);\n    this.isWindow = this.element.clientHeight ? false : true;\n  };\n\n  ListView.prototype.setEnable = function () {\n    this.enableElement(this.element, this.enable);\n  };\n\n  ListView.prototype.setEnableRTL = function () {\n    if (this.enableRtl) {\n      this.element.classList.add('e-rtl');\n    } else {\n      this.element.classList.remove('e-rtl');\n    }\n  };\n\n  ListView.prototype.enableElement = function (element, isEnabled) {\n    if (isEnabled) {\n      element.classList.remove(classNames.disable);\n    } else {\n      element.classList.add(classNames.disable);\n    }\n  }; // Support Component Functions\n\n\n  ListView.prototype.header = function (text, showBack) {\n    if (isBlazor() && this.isServerRendered) {\n      var args = {\n        HeaderText: text,\n        BackButton: showBack\n      }; // tslint:disable\n\n      this.interopAdaptor.invokeMethodAsync('HeaderTitle', args); // tslint:disable\n    } else {\n      if (this.headerEle === undefined && this.showHeader) {\n        if (this.enableHtmlSanitizer) {\n          this.setProperties({\n            headerTitle: SanitizeHtmlHelper.sanitize(this.headerTitle)\n          }, true);\n        }\n\n        this.headerEle = this.createElement('div', {\n          className: classNames.header\n        });\n        var innerHeaderEle = this.createElement('span', {\n          className: classNames.headerText,\n          innerHTML: this.headerTitle\n        });\n        var textEle = this.createElement('div', {\n          className: classNames.text,\n          innerHTML: innerHeaderEle.outerHTML\n        });\n        var hedBackButton = this.createElement('div', {\n          className: classNames.icon + ' ' + classNames.backIcon + ' e-but-back',\n          attrs: {\n            style: 'display:none;'\n          }\n        });\n        this.headerEle.appendChild(hedBackButton);\n        this.headerEle.appendChild(textEle);\n\n        if (this.headerTemplate) {\n          var compiledString = compile(this.headerTemplate);\n          var headerTemplateEle = this.createElement('div', {\n            className: classNames.headerTemplateText\n          });\n          append(compiledString({}, null, null, this.LISTVIEW_HEADERTEMPLATE_ID), headerTemplateEle);\n          append([headerTemplateEle], this.headerEle);\n          this.updateBlazorTemplates(false, true, true);\n        }\n\n        if (this.headerTemplate && this.headerTitle) {\n          textEle.classList.add('header');\n        }\n\n        this.element.classList.add('e-has-header');\n        prepend([this.headerEle], this.element);\n      } else if (this.headerEle) {\n        if (this.showHeader) {\n          this.headerEle.style.display = '';\n          var textEle = this.headerEle.querySelector('.' + classNames.headerText);\n          var hedBackButton = this.headerEle.querySelector('.' + classNames.backIcon);\n\n          if (this.enableHtmlSanitizer) {\n            text = SanitizeHtmlHelper.sanitize(text);\n          }\n\n          textEle.innerHTML = text;\n\n          if (this.headerTemplate && showBack) {\n            textEle.parentElement.classList.remove('header');\n            this.headerEle.querySelector('.' + classNames.headerTemplateText).classList.add('nested-header');\n          }\n\n          if (this.headerTemplate && !showBack) {\n            textEle.parentElement.classList.add('header');\n            this.headerEle.querySelector('.' + classNames.headerTemplateText).classList.remove('nested-header');\n            this.headerEle.querySelector('.' + classNames.headerTemplateText).classList.add('header');\n          }\n\n          if (showBack === true) {\n            hedBackButton.style.display = '';\n          } else {\n            hedBackButton.style.display = 'none';\n          }\n        } else {\n          this.headerEle.style.display = 'none';\n        }\n      }\n    }\n  }; // Animation Related Functions\n\n\n  ListView.prototype.switchView = function (fromView, toView, reverse) {\n    var _this = this;\n\n    if (fromView && toView) {\n      var fPos_1 = fromView.style.position;\n      var overflow_1 = this.element.style.overflow !== 'hidden' ? this.element.style.overflow : '';\n      fromView.style.position = 'absolute';\n      fromView.classList.add('e-view');\n      var anim = void 0;\n      var duration = this.animation.duration;\n\n      if (this.animation.effect) {\n        anim = this.enableRtl ? effectsRTLConfig[this.animation.effect] : effectsConfig[this.animation.effect];\n      } else {\n        var slideLeft = 'SlideLeft';\n        anim = effectsConfig[slideLeft];\n        reverse = this.enableRtl;\n        duration = 0;\n      }\n\n      this.element.style.overflow = 'hidden';\n      this.aniObj.animate(fromView, {\n        name: reverse === true ? anim[0] : anim[1],\n        duration: duration,\n        timingFunction: this.animation.easing,\n        end: function (model) {\n          fromView.style.display = 'none';\n          _this.element.style.overflow = overflow_1;\n          fromView.style.position = fPos_1;\n          fromView.classList.remove('e-view');\n        }\n      });\n      toView.style.display = '';\n      this.aniObj.animate(toView, {\n        name: reverse === true ? anim[2] : anim[3],\n        duration: duration,\n        timingFunction: this.animation.easing,\n        end: function () {\n          _this.trigger('actionComplete');\n        }\n      });\n      this.curUL = toView;\n    }\n  };\n\n  ListView.prototype.preRender = function () {\n    this.listBaseOption = {\n      template: this.template,\n      headerTemplate: this.headerTemplate,\n      groupTemplate: this.groupTemplate,\n      expandCollapse: true,\n      listClass: '',\n      ariaAttributes: {\n        itemRole: 'option',\n        listRole: 'presentation',\n        itemText: '',\n        groupItemRole: 'group',\n        wrapperRole: 'presentation'\n      },\n      fields: this.fields.properties,\n      sortOrder: this.sortOrder,\n      showIcon: this.showIcon,\n      itemCreated: this.renderCheckbox.bind(this),\n      templateID: \"\" + this.element.id + LISTVIEW_TEMPLATE_PROPERTY,\n      groupTemplateID: \"\" + this.element.id + LISTVIEW_GROUPTEMPLATE_PROPERTY,\n      enableHtmlSanitizer: this.enableHtmlSanitizer,\n      removeBlazorID: true\n    };\n    this.initialization();\n  };\n\n  ListView.prototype.updateLiElementHeight = function () {\n    var liContainer = this.element.querySelector('.' + classNames.virtualElementContainer);\n\n    if (liContainer.children[0]) {\n      this.liElementHeight = liContainer.children[0].getBoundingClientRect().height; // tslint:disable\n\n      this.interopAdaptor.invokeMethodAsync('LiElementHeight', this.liElementHeight); // tslint:enable\n    }\n  };\n\n  ListView.prototype.initialization = function () {\n    if (isBlazor() && this.isServerRendered && this.enableVirtualization) {\n      var ulContainer = this.element.querySelector('.' + classNames.virtualElementContainer);\n\n      if (ulContainer !== null) {\n        if (this.height === '') {\n          // tslint:disable\n          this.interopAdaptor.invokeMethodAsync('SetComponentHeight', window.innerHeight); // tslint:enable\n\n          this.isWindow = true;\n          ulContainer.scrollIntoView();\n        }\n\n        if (this.height.toString().indexOf('%') !== -1) {\n          // tslint:disable\n          this.interopAdaptor.invokeMethodAsync('SetContainerHeight', this.element.getBoundingClientRect().height.toString()); // tslint:enable\n        }\n\n        if (ulContainer.children[0]) {\n          this.liElementHeight = ulContainer.children[0].getBoundingClientRect().height; // tslint:disable\n\n          this.interopAdaptor.invokeMethodAsync('LiElementHeight', this.liElementHeight); // tslint:enable\n        }\n      }\n    }\n\n    this.curDSLevel = [];\n    this.animateOptions = {};\n    this.curViewDS = [];\n    this.currentLiElements = [];\n    this.isNestedList = false;\n    this.selectedData = [];\n    this.selectedId = [];\n    this.LISTVIEW_TEMPLATE_ID = \"\" + this.element.id + LISTVIEW_TEMPLATE_PROPERTY;\n    this.LISTVIEW_GROUPTEMPLATE_ID = \"\" + this.element.id + LISTVIEW_GROUPTEMPLATE_PROPERTY;\n    this.LISTVIEW_HEADERTEMPLATE_ID = \"\" + this.element.id + LISTVIEW_HEADERTEMPLATE_PROPERTY;\n    this.aniObj = new Animation(this.animateOptions);\n    this.removeElement(this.curUL);\n    this.removeElement(this.ulElement);\n    this.removeElement(this.headerEle);\n    this.removeElement(this.contentContainer);\n    this.curUL = this.ulElement = this.liCollection = this.headerEle = this.contentContainer = undefined;\n  };\n\n  ListView.prototype.renderCheckbox = function (args) {\n    if (args.item.classList.contains(classNames.hasChild)) {\n      this.isNestedList = true;\n    }\n\n    if (this.showCheckBox && this.isValidLI(args.item)) {\n      var checkboxElement = void 0;\n      var fieldData = void 0;\n      checkboxElement = createCheckBox(this.createElement, false, {\n        checked: false,\n        enableRtl: this.enableRtl,\n        cssClass: classNames.listviewCheckbox\n      });\n      checkboxElement.setAttribute('role', 'checkbox');\n      var frameElement_1 = checkboxElement.querySelector('.' + classNames.checkboxIcon);\n      args.item.classList.add(classNames.itemCheckList);\n      args.item.firstElementChild.classList.add(classNames.checkbox);\n\n      if (typeof this.dataSource[0] !== 'string' && typeof this.dataSource[0] !== 'number') {\n        fieldData = getFieldValues(args.curData, this.listBaseOption.fields);\n\n        if (fieldData[this.listBaseOption.fields.isChecked]) {\n          this.checkInternally(args, checkboxElement);\n        }\n      } else if ((typeof this.dataSource[0] === 'string' || typeof this.dataSource[0] === 'number') && this.selectedData.indexOf(args.text) !== -1) {\n        this.checkInternally(args, checkboxElement);\n      }\n\n      checkboxElement.setAttribute('aria-checked', frameElement_1.classList.contains(classNames.checked) ? 'true' : 'false');\n\n      if (this.checkBoxPosition === 'Left') {\n        checkboxElement.classList.add(classNames.checkboxLeft);\n        args.item.firstElementChild.classList.add(classNames.checkboxLeft);\n        args.item.firstElementChild.insertBefore(checkboxElement, args.item.firstElementChild.childNodes[0]);\n      } else {\n        checkboxElement.classList.add(classNames.checkboxRight);\n        args.item.firstElementChild.classList.add(classNames.checkboxRight);\n        args.item.firstElementChild.appendChild(checkboxElement);\n      }\n\n      this.currentLiElements.push(args.item);\n      this.checkBoxPosition === 'Left' ? this.virtualCheckBox = args.item.firstElementChild.children[0] : this.virtualCheckBox = args.item.firstElementChild.lastElementChild;\n    }\n  };\n\n  ListView.prototype.checkInternally = function (args, checkboxElement) {\n    args.item.classList.add(classNames.selected);\n    args.item.setAttribute('aria-selected', 'true');\n    checkboxElement.querySelector('.' + classNames.checkboxIcon).classList.add(classNames.checked);\n    checkboxElement.setAttribute('aria-checked', 'true');\n  };\n  /**\n   * Checks the specific list item by passing the unchecked fields as an argument to this method.\n   * @param  {Fields | HTMLElement | Element} item - It accepts Fields or HTML list element as an argument.\n   */\n\n\n  ListView.prototype.checkItem = function (item) {\n    this.toggleCheckBase(item, true);\n  };\n\n  ListView.prototype.toggleCheckBase = function (item, checked) {\n    if (this.showCheckBox) {\n      var liElement = item;\n\n      if (item instanceof Object && item.constructor !== HTMLLIElement) {\n        liElement = this.getLiFromObjOrElement(item);\n      }\n\n      if (!isNullOrUndefined(liElement)) {\n        var checkboxIcon = liElement.querySelector('.' + classNames.checkboxIcon);\n        checked ? liElement.classList.add(classNames.selected) : liElement.classList.remove(classNames.selected);\n        liElement.setAttribute('aria-selected', checked ? 'true' : 'false');\n        checked ? checkboxIcon.classList.add(classNames.checked) : checkboxIcon.classList.remove(classNames.checked);\n        checkboxIcon.parentElement.setAttribute('aria-checked', checked ? 'true' : 'false');\n      }\n\n      this.setSelectedItemData(liElement);\n    }\n  };\n  /**\n   * Uncheck the specific list item by passing the checked fields as an argument to this method.\n   * @param  {Fields | HTMLElement | Element} item - It accepts Fields or HTML list element as an argument.\n   */\n\n\n  ListView.prototype.uncheckItem = function (item) {\n    this.toggleCheckBase(item, false);\n  };\n  /**\n   * Checks all the unchecked items in the ListView.\n   */\n\n\n  ListView.prototype.checkAllItems = function () {\n    this.toggleAllCheckBase(true);\n  };\n  /**\n   * Uncheck all the checked items in ListView.\n   */\n\n\n  ListView.prototype.uncheckAllItems = function () {\n    this.toggleAllCheckBase(false);\n  };\n\n  ListView.prototype.toggleAllCheckBase = function (checked) {\n    if (this.showCheckBox) {\n      for (var i = 0; i < this.liCollection.length; i++) {\n        var checkIcon = this.liCollection[i].querySelector('.' + classNames.checkboxIcon);\n\n        if (checkIcon) {\n          if (checked) {\n            if (!checkIcon.classList.contains(classNames.checked)) {\n              this.checkItem(this.liCollection[i]);\n            }\n          } else {\n            if (checkIcon.classList.contains(classNames.checked)) {\n              this.uncheckItem(this.liCollection[i]);\n            }\n          }\n        }\n      }\n\n      if (this.enableVirtualization) {\n        this.virtualizationModule.checkedItem(checked);\n      }\n    }\n  };\n\n  ListView.prototype.setCheckbox = function () {\n    if (this.showCheckBox) {\n      var liCollection = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.listItem));\n      var args = {\n        item: undefined,\n        curData: undefined,\n        dataSource: undefined,\n        fields: undefined,\n        options: undefined,\n        text: ''\n      };\n\n      for (var i = 0; i < liCollection.length; i++) {\n        var element = liCollection[i];\n        args.item = element;\n        args.curData = this.getItemData(element);\n\n        if (element.querySelector('.' + classNames.checkboxWrapper)) {\n          this.removeElement(element.querySelector('.' + classNames.checkboxWrapper));\n        }\n\n        this.renderCheckbox(args);\n\n        if (args.item.classList.contains(classNames.selected)) {\n          this.checkInternally(args, args.item.querySelector('.' + classNames.checkboxWrapper));\n        }\n      }\n    } else {\n      var liCollection = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.itemCheckList));\n\n      for (var i = 0; i < liCollection.length; i++) {\n        var element = liCollection[i];\n        element.classList.remove(classNames.selected);\n        element.firstElementChild.classList.remove(classNames.checkbox);\n        this.removeElement(element.querySelector('.' + classNames.checkboxWrapper));\n      }\n\n      if (this.selectedItems) {\n        this.selectedItems.item.classList.add(classNames.selected);\n      }\n    }\n  };\n  /**\n   * Refresh the height of the list item.\n   */\n\n\n  ListView.prototype.refreshItemHeight = function () {\n    this.virtualizationModule.refreshItemHeight();\n  };\n\n  ListView.prototype.clickHandler = function (e) {\n    var target = e.target;\n    var classList = target.classList;\n    var closestElement;\n\n    if (classList.contains(classNames.backIcon) || classList.contains(classNames.headerText)) {\n      if (this.showCheckBox && this.curDSLevel[this.curDSLevel.length - 1]) {\n        this.uncheckAllItems();\n      }\n\n      this.back();\n    } else {\n      var li = closest(target.parentNode, '.' + classNames.listItem);\n\n      if (li === null) {\n        li = target;\n      }\n\n      this.removeFocus();\n\n      if (this.enable && this.showCheckBox && this.isValidLI(li)) {\n        if (e.target.classList.contains(classNames.checkboxIcon)) {\n          li.classList.add(classNames.focused);\n\n          if (isNullOrUndefined(li.querySelector('.' + classNames.checked))) {\n            var args = {\n              curData: undefined,\n              dataSource: undefined,\n              fields: undefined,\n              options: undefined,\n              text: undefined,\n              item: li\n            };\n            this.checkInternally(args, args.item.querySelector('.' + classNames.checkboxWrapper));\n          } else {\n            this.uncheckItem(li);\n            li.classList.add(classNames.focused);\n          }\n\n          if (this.enableVirtualization) {\n            this.virtualizationModule.setCheckboxLI(li, e);\n          }\n\n          if (e) {\n            var eventArgs = this.selectEventData(li, e);\n            var checkIcon = li.querySelector('.' + classNames.checkboxIcon);\n            merge(eventArgs, {\n              isChecked: checkIcon.classList.contains(classNames.checked)\n            });\n            this.trigger('select', eventArgs);\n          }\n        } else if (li.classList.contains(classNames.hasChild)) {\n          this.removeHover();\n          this.removeSelect();\n          this.removeSelect(li);\n          this.setSelectLI(li, e);\n          li.classList.remove(classNames.selected);\n        } else {\n          this.setCheckboxLI(li, e);\n        }\n      } else {\n        this.setSelectLI(li, e);\n      }\n\n      closestElement = closest(e.target, 'li');\n\n      if (closestElement !== undefined) {\n        if (closestElement.classList.contains('e-has-child') && !e.target.parentElement.classList.contains('e-listview-checkbox')) {\n          closestElement.classList.add(classNames.disable);\n        }\n      }\n    }\n\n    if (isBlazor() && this.isServerRendered && this.enableVirtualization) {\n      var ulElementContainer = this.element.querySelector('.' + classNames.virtualElementContainer);\n\n      if (ulElementContainer.querySelector('.e-active')) {\n        // tslint:disable-next-line:no-any\n        var selectedElements = ulElementContainer.querySelectorAll('.e-active'); // tslint:enable-next-line:no-any\n\n        if (this.showCheckBox) {\n          for (var i = 0; i < selectedElements.length; i++) {\n            // tslint:disable-next-line:no-any\n            if (!this.previousSelectedItems.includes(selectedElements[i].getAttribute('data-uid'))) {\n              this.previousSelectedItems.push(selectedElements[i].getAttribute('data-uid'));\n            } // tslint:enable-next-line:no-any\n\n          }\n        } else {\n          this.previousSelectedItems[0] = ulElementContainer.querySelector('.e-active').getAttribute('data-uid');\n        }\n      }\n\n      if (ulElementContainer.querySelector('.e-focused')) {\n        // tslint:disable-next-line:no-any\n        var focusElement = ulElementContainer.querySelector('.e-focused'); // tslint:enable-next-line:no-any\n\n        if (!focusElement.classList.contains('e-active')) {\n          var focusElementId = focusElement.getAttribute('data-uid'); // tslint:disable-next-line:no-any\n\n          if (this.previousSelectedItems.includes(focusElementId)) {\n            var selectedElement1 = this.previousSelectedItems.slice(0, this.previousSelectedItems.indexOf(focusElementId));\n            var selectedElement2 = this.previousSelectedItems.slice(this.previousSelectedItems.indexOf(focusElementId) + 1, this.previousSelectedItems.length);\n            this.previousSelectedItems = selectedElement1.concat(selectedElement2);\n          } // tslint:enable-next-line:no-any\n\n        }\n      }\n    }\n  };\n\n  ListView.prototype.removeElement = function (element) {\n    return element && element.parentNode && element.parentNode.removeChild(element);\n  };\n\n  ListView.prototype.hoverHandler = function (e) {\n    var curLi = closest(e.target.parentNode, '.' + classNames.listItem);\n    this.setHoverLI(curLi);\n  };\n\n  ListView.prototype.leaveHandler = function (e) {\n    this.removeHover();\n  };\n\n  ;\n\n  ListView.prototype.homeKeyHandler = function (e, end) {\n    if (Object.keys(this.dataSource).length && this.curUL) {\n      if (this.selectedItems) {\n        this.selectedItems.item.setAttribute('aria-selected', 'false');\n      }\n\n      var li = this.curUL.querySelectorAll('.' + classNames.listItem);\n      var focusedElement = this.curUL.querySelector('.' + classNames.focused) || this.curUL.querySelector('.' + classNames.selected);\n\n      if (focusedElement) {\n        focusedElement.classList.remove(classNames.focused);\n\n        if (!this.showCheckBox) {\n          focusedElement.classList.remove(classNames.selected);\n        }\n      }\n\n      var index = !end ? 0 : li.length - 1;\n\n      if (li[index].classList.contains(classNames.hasChild) || this.showCheckBox) {\n        li[index].classList.add(classNames.focused);\n      } else {\n        this.setSelectLI(li[index], e);\n      }\n\n      if (li[index]) {\n        this.element.setAttribute('aria-activedescendant', li[index].id.toString());\n      } else {\n        this.element.removeAttribute('aria-activedescendant');\n      }\n    }\n  };\n\n  ListView.prototype.onArrowKeyDown = function (e, prev) {\n    var siblingLI;\n    var li;\n    var hasChild = !isNullOrUndefined(this.curUL.querySelector('.' + classNames.hasChild)) ? true : false;\n\n    if (hasChild || this.showCheckBox) {\n      li = this.curUL.querySelector('.' + classNames.focused) || this.curUL.querySelector('.' + classNames.selected);\n      siblingLI = ListBase.getSiblingLI(this.curUL.querySelectorAll('.' + classNames.listItem), li, prev);\n\n      if (!isNullOrUndefined(siblingLI)) {\n        if (li) {\n          li.classList.remove(classNames.focused);\n\n          if (!this.showCheckBox) {\n            li.classList.remove(classNames.selected);\n          }\n        }\n\n        if (siblingLI.classList.contains(classNames.hasChild) || this.showCheckBox) {\n          siblingLI.classList.add(classNames.focused);\n        } else {\n          this.setSelectLI(siblingLI, e);\n        }\n      }\n    } else {\n      li = this.curUL.querySelector('.' + classNames.selected);\n      siblingLI = ListBase.getSiblingLI(this.curUL.querySelectorAll('.' + classNames.listItem), li, prev);\n      this.setSelectLI(siblingLI, e);\n    }\n\n    if (siblingLI) {\n      this.element.setAttribute('aria-activedescendant', siblingLI.id.toString());\n    } else {\n      this.element.removeAttribute('aria-activedescendant');\n    }\n\n    return siblingLI;\n  };\n\n  ListView.prototype.arrowKeyHandler = function (e, prev) {\n    var _this = this;\n\n    e.preventDefault();\n\n    if (Object.keys(this.dataSource).length && this.curUL) {\n      var siblingLI = this.onArrowKeyDown(e, prev);\n      var elementTop = this.element.getBoundingClientRect().top;\n      var elementHeight = this.element.getBoundingClientRect().height;\n      var firstItemBounds = this.curUL.querySelector('.' + classNames.listItem).getBoundingClientRect();\n      var heightDiff = void 0;\n      var groupItemBounds = void 0;\n\n      if (this.fields.groupBy) {\n        groupItemBounds = this.curUL.querySelector('.' + classNames.groupListItem).getBoundingClientRect();\n      }\n\n      if (siblingLI) {\n        var siblingTop = siblingLI.getBoundingClientRect().top;\n        var siblingHeight = siblingLI.getBoundingClientRect().height;\n\n        if (!prev) {\n          var height = this.isWindow ? window.innerHeight : elementHeight;\n          heightDiff = this.isWindow ? siblingTop + siblingHeight : siblingTop - elementTop + siblingHeight;\n\n          if (heightDiff > height) {\n            this.isWindow ? window.scroll(0, pageYOffset + (heightDiff - height)) : this.element.scrollTop = this.element.scrollTop + (heightDiff - height);\n          }\n        } else {\n          heightDiff = this.isWindow ? siblingTop : siblingTop - elementTop;\n\n          if (heightDiff < 0) {\n            this.isWindow ? window.scroll(0, pageYOffset + heightDiff) : this.element.scrollTop = this.element.scrollTop + heightDiff;\n          }\n        }\n      } else if (this.enableVirtualization && prev && this.virtualizationModule.uiFirstIndex) {\n        this.onUIScrolled = function () {\n          _this.onArrowKeyDown(e, prev);\n\n          _this.onUIScrolled = undefined;\n        };\n\n        heightDiff = this.virtualizationModule.listItemHeight;\n        this.isWindow ? window.scroll(0, pageYOffset - heightDiff) : this.element.scrollTop = this.element.scrollTop - heightDiff;\n      } else if (prev) {\n        if (this.showHeader && this.headerEle) {\n          var topHeight = groupItemBounds ? groupItemBounds.top : firstItemBounds.top;\n          var headerBounds = this.headerEle.getBoundingClientRect();\n          heightDiff = headerBounds.top < 0 ? headerBounds.height - topHeight : 0;\n          this.isWindow ? window.scroll(0, pageYOffset - heightDiff) : this.element.scrollTop = 0;\n        } else if (this.fields.groupBy) {\n          heightDiff = this.isWindow ? groupItemBounds.top < 0 ? groupItemBounds.top : 0 : elementTop - firstItemBounds.top + groupItemBounds.height;\n          this.isWindow ? window.scroll(0, pageYOffset + heightDiff) : this.element.scrollTop = this.element.scrollTop - heightDiff;\n        }\n      }\n    }\n  };\n\n  ListView.prototype.enterKeyHandler = function (e) {\n    if (Object.keys(this.dataSource).length && this.curUL) {\n      var hasChild = !isNullOrUndefined(this.curUL.querySelector('.' + classNames.hasChild)) ? true : false;\n      var li = this.curUL.querySelector('.' + classNames.focused);\n\n      if (hasChild && li) {\n        li.classList.remove(classNames.focused);\n\n        if (this.showCheckBox) {\n          this.removeSelect();\n          this.removeSelect(li);\n          this.removeHover();\n        }\n\n        this.setSelectLI(li, e);\n      }\n    }\n  };\n\n  ListView.prototype.spaceKeyHandler = function (e) {\n    if (this.enable && this.showCheckBox && Object.keys(this.dataSource).length && this.curUL) {\n      var li = this.curUL.querySelector('.' + classNames.focused);\n\n      if (!isNullOrUndefined(li) && isNullOrUndefined(li.querySelector('.' + classNames.checked))) {\n        var args = {\n          curData: undefined,\n          dataSource: undefined,\n          fields: undefined,\n          options: undefined,\n          text: undefined,\n          item: li\n        };\n        this.checkInternally(args, args.item.querySelector('.' + classNames.checkboxWrapper));\n      } else {\n        this.uncheckItem(li);\n      }\n    }\n  };\n\n  ListView.prototype.keyActionHandler = function (e) {\n    switch (e.keyCode) {\n      case 36:\n        this.homeKeyHandler(e);\n        break;\n\n      case 35:\n        this.homeKeyHandler(e, true);\n        break;\n\n      case 40:\n        this.arrowKeyHandler(e);\n        break;\n\n      case 38:\n        this.arrowKeyHandler(e, true);\n        break;\n\n      case 13:\n        this.enterKeyHandler(e);\n        break;\n\n      case 8:\n        if (this.showCheckBox && this.curDSLevel[this.curDSLevel.length - 1]) {\n          this.uncheckAllItems();\n        }\n\n        this.back();\n        break;\n\n      case 32:\n        this.spaceKeyHandler(e);\n        break;\n    }\n  };\n\n  ListView.prototype.swipeActionHandler = function (e) {\n    if (e.swipeDirection === 'Right' && e.velocity > swipeVelocity && e.originalEvent.type === 'touchend') {\n      if (this.showCheckBox && this.curDSLevel[this.curDSLevel.length - 1]) {\n        this.uncheckAllItems();\n      }\n\n      this.back();\n    }\n  };\n\n  ListView.prototype.focusout = function () {\n    if (Object.keys(this.dataSource).length && this.curUL) {\n      var focusedElement = this.curUL.querySelector('.' + classNames.focused);\n      var activeElement = this.curUL.querySelector('[aria-selected = true]');\n\n      if (focusedElement) {\n        focusedElement.classList.remove(classNames.focused);\n\n        if (activeElement && !this.showCheckBox) {\n          activeElement.classList.add(classNames.selected);\n        }\n      }\n    }\n  };\n\n  ListView.prototype.wireEvents = function () {\n    EventHandler.add(this.element, 'keydown', this.keyActionHandler, this);\n    EventHandler.add(this.element, 'click', this.clickHandler, this);\n\n    if (!this.enableVirtualization) {\n      EventHandler.add(this.element, 'mouseover', this.hoverHandler, this);\n      EventHandler.add(this.element, 'mouseout', this.leaveHandler, this);\n    }\n\n    EventHandler.add(this.element, 'focusout', this.focusout, this);\n    this.touchModule = new Touch(this.element, {\n      swipe: this.swipeActionHandler.bind(this)\n    });\n  };\n\n  ListView.prototype.unWireEvents = function () {\n    EventHandler.remove(this.element, 'click', this.clickHandler);\n\n    if (!this.enableVirtualization) {\n      EventHandler.remove(this.element, 'mouseover', this.hoverHandler);\n      EventHandler.remove(this.element, 'mouseout', this.leaveHandler);\n    }\n\n    EventHandler.remove(this.element, 'mouseover', this.hoverHandler);\n    EventHandler.remove(this.element, 'mouseout', this.leaveHandler);\n    this.touchModule.destroy();\n  };\n\n  ListView.prototype.removeFocus = function () {\n    var focusedLI = this.element.querySelectorAll('.' + classNames.focused);\n\n    for (var _i = 0, focusedLI_1 = focusedLI; _i < focusedLI_1.length; _i++) {\n      var ele = focusedLI_1[_i];\n      ele.classList.remove(classNames.focused);\n    }\n  };\n\n  ListView.prototype.removeHover = function () {\n    var hoverLI = this.element.querySelector('.' + classNames.hover);\n\n    if (hoverLI) {\n      hoverLI.classList.remove(classNames.hover);\n    }\n  };\n\n  ListView.prototype.removeSelect = function (li) {\n    if (isNullOrUndefined(li)) {\n      var selectedLI = this.element.querySelectorAll('.' + classNames.selected);\n\n      for (var _i = 0, selectedLI_1 = selectedLI; _i < selectedLI_1.length; _i++) {\n        var ele = selectedLI_1[_i];\n\n        if (this.showCheckBox && ele.querySelector('.' + classNames.checked)) {\n          continue;\n        } else {\n          ele.setAttribute('aria-selected', 'false');\n          ele.classList.remove(classNames.selected);\n        }\n      }\n    } else {\n      li.classList.remove(classNames.selected);\n      li.setAttribute('aria-selected', 'false');\n    }\n  };\n\n  ListView.prototype.isValidLI = function (li) {\n    return li && li.classList.contains(classNames.listItem) && !li.classList.contains(classNames.groupListItem) && !li.classList.contains(classNames.disable);\n  };\n\n  ListView.prototype.setCheckboxLI = function (li, e) {\n    if (this.isValidLI(li) && this.enable && this.showCheckBox) {\n      if (this.curUL.querySelector('.' + classNames.focused)) {\n        this.curUL.querySelector('.' + classNames.focused).classList.remove(classNames.focused);\n      }\n\n      li.classList.add(classNames.focused);\n      var checkboxElement = li.querySelector('.' + classNames.checkboxWrapper);\n      var checkIcon = checkboxElement.querySelector('.' + classNames.checkboxIcon + '.' + classNames.icon);\n      this.removeHover();\n\n      if (!checkIcon.classList.contains(classNames.checked)) {\n        checkIcon.classList.add(classNames.checked);\n        li.classList.add(classNames.selected);\n        li.setAttribute('aria-selected', 'true');\n      } else {\n        checkIcon.classList.remove(classNames.checked);\n        li.classList.remove(classNames.selected);\n        li.setAttribute('aria-selected', 'false');\n      }\n\n      checkboxElement.setAttribute('aria-checked', checkIcon.classList.contains(classNames.checked) ? 'true' : 'false');\n      var eventArgs = this.selectEventData(li, e);\n      merge(eventArgs, {\n        isChecked: checkIcon.classList.contains(classNames.checked)\n      });\n\n      if (this.enableVirtualization) {\n        this.virtualizationModule.setCheckboxLI(li, e);\n      }\n\n      this.trigger('select', eventArgs);\n      this.setSelectedItemData(li);\n      this.renderSubList(li);\n    }\n  };\n\n  ListView.prototype.selectEventData = function (li, e) {\n    var data = this.getItemData(li);\n    var fieldData = getFieldValues(data, this.listBaseOption.fields);\n    var selectedItem;\n\n    if (!isNullOrUndefined(data) && typeof this.dataSource[0] === 'string' || typeof this.dataSource[0] === 'number') {\n      selectedItem = {\n        item: li,\n        text: li && li.innerText.trim(),\n        data: this.dataSource\n      };\n    } else {\n      selectedItem = {\n        item: li,\n        text: fieldData && fieldData[this.listBaseOption.fields.text],\n        data: data\n      };\n    }\n\n    var eventArgs = {};\n    merge(eventArgs, selectedItem);\n\n    if (e) {\n      merge(eventArgs, {\n        isInteracted: true,\n        event: e,\n        index: this.curUL && Array.prototype.indexOf.call(this.curUL.children, li)\n      });\n    }\n\n    return eventArgs;\n  };\n\n  ListView.prototype.setSelectedItemData = function (li) {\n    var data = this.getItemData(li);\n    var fieldData = getFieldValues(data, this.listBaseOption.fields);\n\n    if (!isNullOrUndefined(data) && (typeof this.dataSource[0] === 'string' || typeof this.dataSource[0] === 'number')) {\n      this.selectedItems = {\n        item: li,\n        text: li && li.innerText.trim(),\n        data: this.dataSource\n      };\n    } else {\n      this.selectedItems = {\n        item: li,\n        text: fieldData && fieldData[this.listBaseOption.fields.text],\n        data: data\n      };\n    }\n  };\n\n  ListView.prototype.setSelectLI = function (li, e) {\n    if (this.isValidLI(li) && !li.classList.contains(classNames.selected) && this.enable) {\n      if (!this.showCheckBox) {\n        this.removeSelect();\n      }\n\n      li.classList.add(classNames.selected);\n      li.setAttribute('aria-selected', 'true');\n      this.removeHover();\n      this.setSelectedItemData(li);\n\n      if (this.enableVirtualization) {\n        this.virtualizationModule.setSelectLI(li, e);\n      }\n\n      var eventArgs = this.selectEventData(li, e);\n      this.trigger('select', eventArgs);\n      this.selectedLI = li;\n      this.renderSubList(li);\n    }\n  };\n\n  ListView.prototype.setHoverLI = function (li) {\n    if (this.isValidLI(li) && !li.classList.contains(classNames.hover) && this.enable) {\n      var lastLi = this.element.querySelectorAll('.' + classNames.hover);\n\n      if (lastLi && lastLi.length) {\n        removeClass(lastLi, classNames.hover);\n      }\n\n      if (!li.classList.contains(classNames.selected) || this.showCheckBox) {\n        li.classList.add(classNames.hover);\n      }\n    }\n  }; //Data Source Related Functions\n\n\n  ListView.prototype.getSubDS = function () {\n    var levelKeys = this.curDSLevel;\n\n    if (levelKeys.length) {\n      var ds = this.localData;\n\n      for (var _i = 0, levelKeys_1 = levelKeys; _i < levelKeys_1.length; _i++) {\n        var key = levelKeys_1[_i];\n        var field = {};\n        field[this.fields.id] = key;\n        this.curDSJSON = this.findItemFromDS(ds, field);\n        var fieldData = getFieldValues(this.curDSJSON, this.listBaseOption.fields);\n        ds = this.curDSJSON ? fieldData[this.fields.child] : ds;\n      }\n\n      return ds;\n    }\n\n    return this.localData;\n  };\n\n  ListView.prototype.getItemData = function (li) {\n    var dataSource = this.dataSource instanceof DataManager ? this.localData : this.dataSource;\n    var fields = this.getElementUID(li);\n    var curDS;\n\n    if (isNullOrUndefined(this.element.querySelector('.' + classNames.hasChild)) && this.fields.groupBy) {\n      curDS = this.curViewDS;\n    } else {\n      curDS = dataSource;\n    }\n\n    return this.findItemFromDS(curDS, fields);\n  };\n\n  ListView.prototype.findItemFromDS = function (dataSource, fields, parent) {\n    var _this = this;\n\n    var resultJSON;\n\n    if (dataSource && dataSource.length && fields) {\n      dataSource.some(function (data) {\n        var fieldData = getFieldValues(data, _this.listBaseOption.fields); //(!(fid) || id === fid) && (!(ftext) || text === ftext) && (!!fid || !!ftext)\n\n        if ((fields[_this.fields.id] || fields[_this.fields.text]) && (!fields[_this.fields.id] || (!isNullOrUndefined(fieldData[_this.fields.id]) && fieldData[_this.fields.id].toString()) === fields[_this.fields.id].toString()) && (!fields[_this.fields.text] || fieldData[_this.fields.text] === fields[_this.fields.text])) {\n          resultJSON = parent ? dataSource : data;\n        } else if (typeof data !== 'object' && dataSource.indexOf(data) !== -1) {\n          resultJSON = parent ? dataSource : data;\n        } else if (!isNullOrUndefined(fields[_this.fields.id]) && isNullOrUndefined(fieldData[_this.fields.id])) {\n          var li = _this.element.querySelector('[data-uid=\"' + fields[_this.fields.id] + '\"]');\n\n          if (li && li.innerText.trim() === fieldData[_this.fields.text]) {\n            resultJSON = data;\n          }\n        } else if (fieldData.hasOwnProperty(_this.fields.child) && fieldData[_this.fields.child].length) {\n          resultJSON = _this.findItemFromDS(fieldData[_this.fields.child], fields, parent);\n        }\n\n        return !!resultJSON;\n      });\n    } else {\n      resultJSON = dataSource;\n    }\n\n    return resultJSON;\n  };\n\n  ListView.prototype.getQuery = function () {\n    var columns = [];\n    var query = this.query ? this.query : new Query();\n\n    if (!this.query) {\n      for (var _i = 0, _a = Object.keys(this.fields.properties); _i < _a.length; _i++) {\n        var column = _a[_i];\n\n        if (column !== 'tableName' && !!this.fields[column] && this.fields[column] !== ListBase.defaultMappedFields[column] && columns.indexOf(this.fields[column]) === -1) {\n          columns.push(this.fields[column]);\n        }\n      }\n\n      query.select(columns);\n\n      if (this.fields.properties.hasOwnProperty('tableName')) {\n        query.from(this.fields.tableName);\n      }\n    }\n\n    return query;\n  };\n\n  ListView.prototype.setViewDataSource = function (dataSource) {\n    if (dataSource === void 0) {\n      dataSource = this.localData;\n    }\n\n    if (dataSource && this.fields.groupBy) {\n      if (this.sortOrder !== 'None') {\n        this.curViewDS = ListBase.groupDataSource(ListBase.getDataSource(dataSource, ListBase.addSorting(this.sortOrder, this.fields.sortBy)), this.listBaseOption.fields, this.sortOrder);\n      } else {\n        this.curViewDS = ListBase.groupDataSource(dataSource, this.listBaseOption.fields, this.sortOrder);\n      }\n    } else if (dataSource && this.sortOrder !== 'None') {\n      this.curViewDS = ListBase.getDataSource(dataSource, ListBase.addSorting(this.sortOrder, this.fields.sortBy));\n    } else {\n      this.curViewDS = dataSource;\n    }\n  };\n\n  ListView.prototype.isInAnimation = function () {\n    return this.curUL.classList.contains('.e-animate');\n  };\n\n  ListView.prototype.setLocalData = function () {\n    var _this = this;\n\n    this.trigger('actionBegin');\n    var listViewComponent = this;\n\n    if (this.dataSource instanceof DataManager) {\n      this.dataSource.executeQuery(this.getQuery()).then(function (e) {\n        if (_this.isDestroyed) {\n          return;\n        }\n\n        _this.localData = e.result;\n\n        if (!_this.isServerRendered || !isBlazor()) {\n          listViewComponent.removeElement(listViewComponent.contentContainer);\n        }\n\n        _this.renderList();\n\n        _this.trigger('actionComplete', e);\n      }).catch(function (e) {\n        if (_this.isDestroyed) {\n          return;\n        }\n\n        _this.trigger('actionFailure', e);\n      });\n    } else if (!this.dataSource || !this.dataSource.length) {\n      var ul = this.element.querySelector('ul');\n\n      if (ul) {\n        remove(ul);\n        this.setProperties({\n          dataSource: ListBase.createJsonFromElement(ul)\n        }, true);\n        this.localData = this.dataSource;\n        this.renderList();\n        this.trigger('actionComplete', {\n          data: this.localData\n        });\n      }\n    } else {\n      this.localData = this.dataSource;\n      this.renderList();\n      this.trigger('actionComplete', {\n        data: this.localData\n      });\n    }\n  };\n\n  ListView.prototype.reRender = function () {\n    if (!isBlazor() || !this.isServerRendered || this.enableVirtualization) {\n      this.resetBlazorTemplates();\n      this.removeElement(this.headerEle);\n      this.removeElement(this.ulElement);\n      this.removeElement(this.contentContainer);\n\n      if (Object.keys(window).indexOf('ejsInterop') === -1) {\n        this.element.innerHTML = '';\n      }\n\n      this.headerEle = this.ulElement = this.liCollection = undefined;\n      this.header();\n    }\n\n    this.setLocalData();\n  };\n\n  ListView.prototype.resetCurrentList = function () {\n    this.resetBlazorTemplates();\n    this.setViewDataSource(this.curViewDS);\n    this.contentContainer.innerHTML = '';\n    this.createList();\n    this.renderIntoDom(this.curUL);\n  };\n\n  ListView.prototype.setAttributes = function (liElements) {\n    for (var i = 0; i < liElements.length; i++) {\n      var element = liElements[i];\n\n      if (element.classList.contains('e-list-item')) {\n        element.setAttribute('id', this.element.id + '_' + element.getAttribute('data-uid'));\n        element.setAttribute('aria-selected', 'false');\n        element.setAttribute('tabindex', '-1');\n      }\n    }\n  };\n\n  ListView.prototype.createList = function () {\n    this.currentLiElements = [];\n    this.isNestedList = false;\n    this.ulElement = this.curUL = ListBase.createList(this.createElement, this.curViewDS, this.listBaseOption);\n    this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);\n    this.setAttributes(this.liCollection);\n    this.updateBlazorTemplates(true);\n  };\n\n  ListView.prototype.resetBlazorTemplates = function () {\n    // tslint:disable-next-line:no-any\n    var templateCollection = blazorTemplates;\n\n    if (this.template) {\n      templateCollection[this.LISTVIEW_TEMPLATE_ID] = [];\n      resetBlazorTemplate(this.LISTVIEW_TEMPLATE_ID, LISTVIEW_TEMPLATE_PROPERTY);\n    }\n\n    if (this.groupTemplate) {\n      templateCollection[this.LISTVIEW_GROUPTEMPLATE_ID] = [];\n      resetBlazorTemplate(this.LISTVIEW_GROUPTEMPLATE_ID, LISTVIEW_GROUPTEMPLATE_PROPERTY);\n    }\n\n    if (this.headerTemplate) {\n      resetBlazorTemplate(this.LISTVIEW_HEADERTEMPLATE_ID, LISTVIEW_HEADERTEMPLATE_PROPERTY);\n    }\n  };\n\n  ListView.prototype.updateBlazorTemplates = function (template, headerTemplate, resetExistingElements) {\n    if (template === void 0) {\n      template = false;\n    }\n\n    if (headerTemplate === void 0) {\n      headerTemplate = false;\n    }\n\n    if (resetExistingElements === void 0) {\n      resetExistingElements = false;\n    }\n\n    if (this.template && template && !this.enableVirtualization) {\n      updateBlazorTemplate(this.LISTVIEW_TEMPLATE_ID, LISTVIEW_TEMPLATE_PROPERTY, this, resetExistingElements);\n    }\n\n    if (this.groupTemplate && template && !this.enableVirtualization) {\n      updateBlazorTemplate(this.LISTVIEW_GROUPTEMPLATE_ID, LISTVIEW_GROUPTEMPLATE_PROPERTY, this, resetExistingElements);\n    }\n\n    if (this.headerTemplate && headerTemplate) {\n      updateBlazorTemplate(this.LISTVIEW_HEADERTEMPLATE_ID, LISTVIEW_HEADERTEMPLATE_PROPERTY, this, resetExistingElements);\n    }\n  };\n\n  ListView.prototype.exceptionEvent = function (e) {\n    this.trigger('actionFailure', e);\n  };\n\n  ListView.prototype.UpdateCurrentUL = function () {\n    this.ulElement = this.curUL = this.element.querySelector('.' + classNames.parentItem);\n\n    if (this.curUL) {\n      // tslint:disable\n      this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem); // tslint:enable\n    }\n  };\n\n  ListView.prototype.removeActiveClass = function () {\n    var listViewComponent = this;\n    setTimeout(function () {\n      var ulContainer = listViewComponent.element.querySelector('.' + classNames.virtualElementContainer);\n\n      for (var i = 0; i < ulContainer.childElementCount; i++) {\n        var selectedElement = ulContainer.children[i];\n        var elementIndex = void 0;\n        var hiddenElementIndex = void 0;\n\n        if (listViewComponent.showCheckBox) {\n          if (listViewComponent.previousSelectedItems.length > 0) {\n            for (var j = 0; j < listViewComponent.previousSelectedItems.length; j++) {\n              if (selectedElement.getAttribute('data-uid') === listViewComponent.previousSelectedItems[j]) {\n                selectedElement.classList.add('e-active');\n                selectedElement.setAttribute('aria-selected', 'true');\n\n                if (selectedElement.querySelector('.e-frame.e-icons')) {\n                  selectedElement.querySelector('.e-frame.e-icons').classList.add('e-check');\n                }\n\n                elementIndex = i;\n              } else {\n                if (elementIndex !== i) {\n                  selectedElement.classList.remove('e-active');\n                  selectedElement.removeAttribute('aria-selected');\n\n                  if (selectedElement.querySelector('.e-check')) {\n                    selectedElement.querySelector('.e-check').classList.remove('e-check');\n                  }\n                }\n              }\n            }\n          } else {\n            selectedElement.classList.remove('e-active');\n            selectedElement.removeAttribute('aria-selected');\n\n            if (selectedElement.querySelector('.e-check')) {\n              selectedElement.querySelector('.e-check').classList.remove('e-check');\n            }\n          }\n        } else {\n          if (selectedElement.getAttribute('data-uid') === listViewComponent.previousSelectedItems[0]) {\n            selectedElement.classList.add('e-active');\n            selectedElement.setAttribute('aria-selected', 'true');\n          } else {\n            selectedElement.classList.remove('e-active');\n            selectedElement.removeAttribute('aria-selected');\n          }\n        }\n\n        if (listViewComponent.hiddenItems.length > 0) {\n          for (var k = 0; k < listViewComponent.hiddenItems.length; k++) {\n            if (selectedElement.getAttribute('data-uid') === listViewComponent.previousSelectedItems[k]) {\n              selectedElement.style.display = 'none';\n              hiddenElementIndex = i;\n            } else {\n              if (hiddenElementIndex !== i) {\n                selectedElement.style.display = null;\n              }\n            }\n          }\n        }\n\n        if (listViewComponent.enabledItems.length > 0) {\n          for (var x = 0; x < listViewComponent.enabledItems.length; x++) {\n            if (selectedElement.getAttribute('data-uid') === listViewComponent.enabledItems[x]) {\n              if (selectedElement.classList.contains('e-disabled')) {\n                selectedElement.classList.remove('e-disabled');\n              }\n            }\n          }\n        }\n\n        if (listViewComponent.disabledItems.length > 0) {\n          for (var y = 0; y < listViewComponent.disabledItems.length; y++) {\n            if (selectedElement.getAttribute('data-uid') === listViewComponent.disabledItems[y]) {\n              if (!selectedElement.classList.contains('e-disabled')) {\n                selectedElement.classList.add('e-disabled');\n              }\n            }\n          }\n        }\n      }\n    }, 200);\n  };\n\n  ListView.prototype.renderingNestedList = function () {\n    var ul = closest(this.liElement.parentNode, '.' + classNames.parentItem);\n    var ctrlId = this.element.id;\n    var ulElement = document.getElementById(ctrlId);\n    var currentListItem = ulElement.getElementsByTagName('UL')[ulElement.getElementsByTagName('UL').length - 1];\n    this.switchView(ul, currentListItem);\n    this.liElement = null;\n  };\n\n  ListView.prototype.renderSubList = function (li) {\n    this.liElement = li;\n    var uID = li.getAttribute('data-uid');\n\n    if (li.classList.contains(classNames.hasChild) && uID) {\n      var ul = closest(li.parentNode, '.' + classNames.parentItem);\n      var ele = this.element.querySelector('[pid=\\'' + uID + '\\']');\n      this.curDSLevel.push(uID);\n      this.setViewDataSource(this.getSubDS());\n\n      if (!ele) {\n        var data = this.curViewDS;\n\n        if (isBlazor() && this.isServerRendered) {\n          // tslint:disable\n          this.interopAdaptor.invokeMethodAsync('ListChildDataSource', data); // tslint:enable\n        } else {\n          ele = ListBase.createListFromJson(this.createElement, data, this.listBaseOption, this.curDSLevel.length);\n          var lists = ele.querySelectorAll('.' + classNames.listItem);\n          this.setAttributes(lists);\n          ele.setAttribute('pID', uID);\n          ele.style.display = 'none';\n          this.renderIntoDom(ele);\n          this.updateBlazorTemplates(true);\n        }\n      }\n\n      if (!isBlazor() || !this.isServerRendered || this.enableVirtualization) {\n        this.switchView(ul, ele);\n      }\n\n      this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);\n\n      if (this.selectedItems) {\n        var fieldData = getFieldValues(this.selectedItems.data, this.listBaseOption.fields);\n        this.header(fieldData[this.listBaseOption.fields.text], true);\n      }\n\n      this.selectedLI = undefined;\n    }\n  };\n\n  ListView.prototype.renderIntoDom = function (ele) {\n    this.contentContainer.appendChild(ele);\n  };\n\n  ListView.prototype.renderList = function (data) {\n    this.setViewDataSource(data);\n\n    if (!isBlazor() || !this.isServerRendered || this.enableVirtualization) {\n      if (this.enableVirtualization) {\n        if (Object.keys(this.dataSource).length) {\n          if (!(isBlazor() && this.isServerRendered)) {\n            if ((this.template || this.groupTemplate) && !this.virtualizationModule.isNgTemplate()) {\n              this.listBaseOption.template = null;\n              this.listBaseOption.groupTemplate = null;\n              this.listBaseOption.itemCreated = this.virtualizationModule.createUIItem.bind(this.virtualizationModule);\n            }\n          }\n        }\n\n        this.virtualizationModule.uiVirtualization();\n      } else {\n        this.createList();\n        this.contentContainer = this.createElement('div', {\n          className: classNames.content\n        });\n        this.element.appendChild(this.contentContainer);\n        this.renderIntoDom(this.ulElement);\n      }\n    }\n  };\n\n  ListView.prototype.getElementUID = function (obj) {\n    var fields = {};\n\n    if (obj instanceof Element) {\n      fields[this.fields.id] = obj.getAttribute('data-uid');\n    } else {\n      fields = obj;\n    }\n\n    return fields;\n  };\n  /**\n   * Initializes the ListView component rendering.\n   */\n\n\n  ListView.prototype.render = function () {\n    if (!isBlazor() || !this.isServerRendered) {\n      this.element.classList.add(classNames.root);\n      attributes(this.element, {\n        role: 'list',\n        tabindex: '0'\n      });\n      this.setCSSClass();\n      this.setEnableRTL();\n      this.setEnable();\n      this.setSize();\n      this.wireEvents();\n      this.header();\n      this.setLocalData();\n      this.setHTMLAttribute();\n    } else {\n      this.initBlazor(true);\n    }\n\n    this.rippleFn = rippleEffect(this.element, {\n      selector: '.' + classNames.listItem\n    });\n    this.renderComplete();\n  };\n\n  ListView.prototype.initBlazor = function (firstRender) {\n    if (firstRender === null) {\n      firstRender = false;\n    }\n\n    this.setLocalData();\n    this.setViewDataSource(this.localData);\n    this.contentContainer = this.element.querySelector('.' + classNames.content);\n\n    if (firstRender) {\n      this.wireEvents();\n    }\n  };\n  /**\n   * It is used to destroy the ListView component.\n   */\n\n\n  ListView.prototype.destroy = function () {\n    this.resetBlazorTemplates();\n    this.unWireEvents();\n    var classAr = [classNames.root, classNames.disable, 'e-rtl', 'e-has-header', 'e-lib'].concat(this.cssClass.split(' ').filter(function (css) {\n      return css;\n    }));\n    removeClass([this.element], classAr);\n    this.element.removeAttribute('role');\n    this.element.removeAttribute('tabindex');\n    this.curUL = this.ulElement = this.liCollection = this.headerEle = undefined;\n\n    if (!(isBlazor() && this.isServerRendered)) {\n      this.element.innerHTML = '';\n\n      _super.prototype.destroy.call(this);\n    } else {\n      this.element.style.display = 'none';\n    }\n  };\n  /**\n   * Switches back from the navigated sub list item.\n   */\n\n\n  ListView.prototype.back = function () {\n    var pID = this.curDSLevel[this.curDSLevel.length - 1];\n\n    if (pID === undefined || this.isInAnimation()) {\n      return;\n    }\n\n    this.curDSLevel.pop();\n    this.setViewDataSource(this.getSubDS());\n    var toUL = this.element.querySelector('[data-uid=\\'' + pID + '\\']');\n    var fromUL = this.curUL;\n\n    if (!toUL) {\n      this.createList();\n      this.renderIntoDom(this.ulElement);\n      toUL = this.curUL;\n    } else {\n      if (isBlazor() && this.isServerRendered && this.enableVirtualization) {\n        toUL = toUL.parentElement.parentElement.parentElement;\n      } else {\n        toUL = toUL.parentElement;\n      }\n    }\n\n    var fieldData = getFieldValues(this.curDSJSON, this.listBaseOption.fields);\n    var text = fieldData[this.fields.text];\n    this.switchView(fromUL, toUL, true);\n    this.removeFocus();\n    var li = this.element.querySelector('[data-uid=\\'' + pID + '\\']');\n    li.classList.remove(classNames.disable);\n    li.classList.add(classNames.focused);\n\n    if (this.showCheckBox && li.querySelector('.' + classNames.checkboxIcon).classList.contains(classNames.checked)) {\n      li.setAttribute('aria-selected', 'true');\n    } else {\n      li.classList.remove(classNames.selected);\n      li.setAttribute('aria-selected', 'false');\n    }\n\n    this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);\n\n    if (this.enableHtmlSanitizer) {\n      this.setProperties({\n        headerTitle: SanitizeHtmlHelper.sanitize(this.headerTitle)\n      }, true);\n    }\n\n    this.header(this.curDSLevel.length ? text : this.headerTitle, this.curDSLevel.length ? true : false);\n  };\n  /**\n   * Selects the list item from the ListView by passing the elements or field object.\n   * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.\n   */\n\n\n  ListView.prototype.selectItem = function (item) {\n    if (this.enableVirtualization) {\n      this.virtualizationModule.selectItem(item);\n    } else if (this.showCheckBox) {\n      this.setCheckboxLI(this.getLiFromObjOrElement(item));\n    } else {\n      isNullOrUndefined(item) ? this.removeSelect() : this.setSelectLI(this.getLiFromObjOrElement(item));\n    }\n  };\n\n  ListView.prototype.getLiFromObjOrElement = function (obj) {\n    var li;\n    var dataSource = this.dataSource instanceof DataManager ? this.localData : this.dataSource;\n\n    if (!isNullOrUndefined(obj)) {\n      if (typeof dataSource[0] === 'string' || typeof dataSource[0] === 'number') {\n        if (obj instanceof Element) {\n          var uid = obj.getAttribute('data-uid').toString();\n\n          for (var i = 0; i < this.liCollection.length; i++) {\n            if (this.liCollection[i].getAttribute('data-uid').toString() === uid) {\n              li = this.liCollection[i];\n              break;\n            }\n          }\n        } else {\n          Array.prototype.some.call(this.curUL.querySelectorAll('.' + classNames.listItem), function (item) {\n            if (item.innerText.trim() === obj.toString()) {\n              li = item;\n              return true;\n            } else {\n              return false;\n            }\n          });\n        }\n      } else {\n        var resultJSON = this.getItemData(obj);\n        var fieldData = getFieldValues(resultJSON, this.listBaseOption.fields);\n\n        if (resultJSON) {\n          li = this.element.querySelector('[data-uid=\"' + fieldData[this.fields.id] + '\"]');\n\n          if (!this.enableVirtualization && isNullOrUndefined(li)) {\n            var curLi = this.element.querySelectorAll('.' + classNames.listItem);\n\n            for (var i = 0; i < curLi.length; i++) {\n              if (curLi[i].innerText.trim() === fieldData[this.fields.text]) {\n                li = curLi[i];\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return li;\n  };\n  /**\n   * Selects multiple list items from the ListView.\n   * @param  {Fields[] | HTMLElement[] | Element[]} item - We can pass array of\n   *  elements or array of fields Object with ID and Text fields.\n   */\n\n\n  ListView.prototype.selectMultipleItems = function (item) {\n    if (!isNullOrUndefined(item)) {\n      for (var i = 0; i < item.length; i++) {\n        if (!isNullOrUndefined(item[i])) {\n          this.selectItem(item[i]);\n        }\n      }\n    }\n  };\n\n  ListView.prototype.getParentId = function () {\n    var parentId = [];\n\n    if (this.isNestedList) {\n      for (var i = this.curDSLevel.length - 1; i >= 0; i--) {\n        parentId.push(this.curDSLevel[i]);\n      }\n    }\n\n    return parentId;\n  };\n  /**\n   * Gets the details of the currently selected item from the list items.\n   * @blazorType ListSelectedItem<TValue>\n   */\n\n\n  ListView.prototype.getSelectedItems = function () {\n    // tslint:disable-next-line:no-any\n    var finalValue;\n    var isCompleted = false;\n    this.selectedId = [];\n    var dataSource = this.dataSource instanceof DataManager ? this.localData : this.dataSource;\n\n    if (this.enableVirtualization && !isCompleted) {\n      finalValue = this.virtualizationModule.getSelectedItems();\n      isCompleted = true;\n    } else if (this.showCheckBox && !isCompleted) {\n      // tslint:disable-next-line:no-any\n      var liCollection = this.curUL.getElementsByClassName(classNames.selected);\n      var liTextCollection = [];\n      var liDataCollection = [];\n      this.selectedId = [];\n      var dataParent = [];\n\n      for (var i = 0; i < liCollection.length; i++) {\n        if (typeof dataSource[0] === 'string' || typeof dataSource[0] === 'number') {\n          liTextCollection.push(liCollection[i].innerText.trim());\n        } else {\n          var tempData = this.getItemData(liCollection[i]);\n          var fieldData = getFieldValues(tempData, this.listBaseOption.fields);\n\n          if (this.isNestedList) {\n            dataParent.push({\n              data: tempData,\n              parentId: this.getParentId()\n            });\n          } else {\n            liDataCollection.push(tempData);\n          }\n\n          if (fieldData) {\n            liTextCollection.push(fieldData[this.listBaseOption.fields.text]);\n            this.selectedId.push(fieldData[this.listBaseOption.fields.id]);\n          } else {\n            liTextCollection.push(undefined);\n            this.selectedId.push(undefined);\n          }\n        }\n      }\n\n      if ((typeof dataSource[0] === 'string' || typeof dataSource[0] === 'number') && !isCompleted) {\n        finalValue = {\n          item: liCollection,\n          data: dataSource,\n          text: liTextCollection\n        };\n        isCompleted = true;\n      }\n\n      if (this.isNestedList && !isCompleted) {\n        finalValue = {\n          item: liCollection,\n          data: dataParent,\n          text: liTextCollection\n        };\n        isCompleted = true;\n      } else if (!isCompleted) {\n        finalValue = {\n          item: liCollection,\n          data: liDataCollection,\n          text: liTextCollection\n        };\n        isCompleted = true;\n      }\n    } else if (!isCompleted) {\n      var liElement = this.element.getElementsByClassName(classNames.selected)[0];\n      var fieldData = getFieldValues(this.getItemData(liElement), this.listBaseOption.fields);\n\n      if ((typeof dataSource[0] === 'string' || typeof dataSource[0] === 'number') && !isCompleted) {\n        finalValue = !isNullOrUndefined(liElement) ? {\n          item: liElement,\n          data: dataSource,\n          text: liElement.innerText.trim()\n        } : undefined;\n        isCompleted = true;\n      } else if (!isCompleted) {\n        if (isNullOrUndefined(fieldData) || isNullOrUndefined(liElement)) {\n          finalValue = undefined;\n          isCompleted = true;\n        } else {\n          this.selectedId.push(fieldData[this.listBaseOption.fields.id]);\n          finalValue = {\n            text: fieldData[this.listBaseOption.fields.text],\n            item: liElement,\n            data: this.getItemData(liElement)\n          };\n          isCompleted = true;\n        }\n      }\n    }\n\n    if (isBlazor()) {\n      // tslint:disable-next-line:no-any\n      return this.blazorGetSelectedItems(finalValue);\n    } else {\n      return finalValue;\n    }\n  }; // tslint:disable-next-line:no-any\n\n\n  ListView.prototype.blazorGetSelectedItems = function (finalGetSelectedItem) {\n    var blazorSelectedItem = {\n      data: [],\n      index: [],\n      parentId: [],\n      text: []\n    };\n\n    if (!isNullOrUndefined(finalGetSelectedItem)) {\n      if (!isNullOrUndefined(finalGetSelectedItem.data)) {\n        if (this.showCheckBox && this.isNestedList) {\n          for (var i = 0; i < finalGetSelectedItem.data.length; i++) {\n            blazorSelectedItem.data.push(finalGetSelectedItem.data[i].data);\n          }\n\n          if (!isNullOrUndefined(finalGetSelectedItem.data[0]) && !isNullOrUndefined(finalGetSelectedItem.data[0].parentId)) {\n            blazorSelectedItem.parentId = finalGetSelectedItem.data[0].parentId;\n          }\n        } else {\n          blazorSelectedItem.data = this.convertItemsToArray(finalGetSelectedItem.data);\n        }\n      }\n\n      if (!isNullOrUndefined(finalGetSelectedItem.text)) {\n        blazorSelectedItem.text = this.convertItemsToArray(finalGetSelectedItem.text);\n      }\n\n      if (!isNullOrUndefined(finalGetSelectedItem.index)) {\n        blazorSelectedItem.index = this.convertItemsToArray(finalGetSelectedItem.index);\n      }\n    }\n\n    return blazorSelectedItem;\n  }; // tslint:disable-next-line:no-any\n\n\n  ListView.prototype.convertItemsToArray = function (items) {\n    return Array.isArray(items) ? items.slice() : [items];\n  };\n  /**\n   * Finds out an item details from the current list.\n   * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.\n   * @blazorType TValue\n   */\n\n\n  ListView.prototype.findItem = function (item) {\n    return this.getItemData(item);\n  };\n  /**\n   * Enables the disabled list items by passing the Id and text fields.\n   * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.\n   */\n\n\n  ListView.prototype.enableItem = function (item) {\n    this.setItemState(item, true);\n\n    if (this.enableVirtualization) {\n      this.virtualizationModule.enableItem(item);\n    }\n  };\n  /**\n   * Disables the list items by passing the Id and text fields.\n   * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.\n   */\n\n\n  ListView.prototype.disableItem = function (item) {\n    this.setItemState(item, false);\n\n    if (this.enableVirtualization) {\n      this.virtualizationModule.disableItem(item);\n    }\n  }; //A function that used to set state of the list item like enable, disable.\n\n\n  ListView.prototype.setItemState = function (item, isEnable) {\n    var resultJSON = this.getItemData(item);\n    var fieldData = getFieldValues(resultJSON, this.listBaseOption.fields);\n\n    if (resultJSON) {\n      var li = this.element.querySelector('[data-uid=\"' + fieldData[this.fields.id] + '\"]');\n\n      if (isEnable) {\n        if (li) {\n          li.classList.remove(classNames.disable);\n        }\n\n        delete resultJSON[this.fields.enabled];\n      } else if (!isEnable) {\n        if (li) {\n          li.classList.add(classNames.disable);\n        }\n\n        resultJSON[this.fields.enabled] = false;\n      }\n    }\n  };\n  /**\n   * Shows the hide list item from the ListView.\n   * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.\n   */\n\n\n  ListView.prototype.showItem = function (item) {\n    this.showHideItem(item, false, '');\n\n    if (this.enableVirtualization) {\n      this.virtualizationModule.showItem(item);\n    }\n  };\n  /**\n   * Hides an list item from the ListView.\n   * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.\n   */\n\n\n  ListView.prototype.hideItem = function (item) {\n    this.showHideItem(item, true, 'none');\n\n    if (this.enableVirtualization) {\n      this.virtualizationModule.hideItem(item);\n    }\n  };\n\n  ListView.prototype.showHideItem = function (obj, isHide, display) {\n    var resultJSON = this.getItemData(obj);\n    var fieldData = getFieldValues(resultJSON, this.listBaseOption.fields);\n\n    if (resultJSON) {\n      var li = this.element.querySelector('[data-uid=\"' + fieldData[this.fields.id] + '\"]');\n\n      if (li) {\n        li.style.display = display;\n      }\n\n      if (isHide) {\n        resultJSON[this.fields.isVisible] = false;\n      } else {\n        delete resultJSON[this.fields.isVisible];\n      }\n    }\n  };\n  /**\n   * Adds the new list item(s) to the current ListView.\n   * To add a new list item(s) in the ListView, we need to pass the `data` as an array of items that need\n   * to be added and `fields` as the target item to which we need to add the given item(s) as its children.\n   * For example fields: { text: 'Name', tooltip: 'Name', id:'id'}\n   * @param  {{[key:string]:Object}[]} data - JSON Array Data that need to add.\n   * @param  {Fields} fields - Target item to add the given data as its children (can be null).\n   * @blazorArgsType data|object,fields|object\n   */\n\n\n  ListView.prototype.addItem = function (data, fields) {\n    if (fields === void 0) {\n      fields = undefined;\n    }\n\n    var dataSource = this.dataSource instanceof DataManager ? this.localData : this.dataSource;\n    this.addItemInternally(data, fields, dataSource);\n  };\n\n  ListView.prototype.addItemInternally = function (data, fields, dataSource) {\n    if (data instanceof Array) {\n      if (this.enableVirtualization) {\n        this.virtualizationModule.addItem(data, fields, dataSource);\n      } else {\n        var ds = this.findItemFromDS(dataSource, fields);\n        var child = void 0;\n\n        if (ds) {\n          var fieldData = getFieldValues(ds, this.listBaseOption.fields);\n          child = fieldData[this.fields.child];\n\n          if (!child) {\n            child = [];\n          }\n\n          child = child.concat(data);\n        } // check for whether target is nested level or top level in list\n\n\n        if (ds instanceof Array) {\n          for (var i = 0; i < data.length; i++) {\n            dataSource.push(data[i]);\n            this.setViewDataSource(dataSource); // since it is top level target, get the content container's first child\n            // as it is always the top level UL\n\n            var targetUL = this.contentContainer ? this.contentContainer.children[0] : null; // check for whether the list was previously empty or not, if it is\n            // proceed to call initial render\n\n            if (this.contentContainer && targetUL) {\n              this.addItemIntoDom(data[i], targetUL, this.curViewDS);\n            } else {\n              this.reRender();\n            }\n          }\n\n          if (this.curUL) {\n            this.updateBlazorTemplates(true);\n          }\n\n          this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);\n        } else {\n          // proceed as target item is in nested level, only if it is a valid target ds\n          if (ds) {\n            ds[this.fields.child] = child;\n            this.addItemInNestedList(ds, data);\n          }\n        }\n      }\n    }\n  };\n\n  ListView.prototype.addItemInNestedList = function (targetItemData, itemQueue) {\n    var targetItemId = targetItemData[this.fields.id];\n    var targetChildDS = targetItemData[this.fields.child];\n    var isAlreadyRenderedUL = this.element.querySelector('[pid=\\'' + targetItemId + '\\']');\n    var targetLi = this.element.querySelector('[data-uid=\\'' + targetItemId + '\\']');\n    var targetUL = isAlreadyRenderedUL ? isAlreadyRenderedUL : targetLi ? closest(targetLi, 'ul') : null;\n    var targetDS = isAlreadyRenderedUL ? targetChildDS : [targetItemData];\n    var isTargetEmptyChild = targetLi ? !targetLi.classList.contains(classNames.hasChild) : false;\n    var isRefreshTemplateNeeded = false; // if li element is already rendered, that element needs to be refreshed so that\n    // it becomes child viewable due to new child items are added now\n\n    if (isTargetEmptyChild) {\n      var targetRefreshedElement = ListBase.createListItemFromJson(this.createElement, targetDS, this.listBaseOption);\n      this.setAttributes(targetRefreshedElement);\n      targetUL.insertBefore(targetRefreshedElement[0], targetLi);\n      detach(targetLi);\n      isRefreshTemplateNeeded = true;\n    } // if it is already rendered element, we need to create and append new elements\n\n\n    if (isAlreadyRenderedUL && itemQueue) {\n      for (var i = 0; i < itemQueue.length; i++) {\n        targetDS.push(itemQueue[i]);\n        this.addItemIntoDom(itemQueue[i], targetUL, targetDS);\n      }\n\n      isRefreshTemplateNeeded = true;\n    }\n\n    if (isRefreshTemplateNeeded) {\n      this.updateBlazorTemplates(true);\n    }\n  };\n\n  ListView.prototype.addItemIntoDom = function (currentItem, targetUL, curViewDS) {\n    var index = curViewDS.indexOf(currentItem);\n    this.addListItem(currentItem, index, targetUL, curViewDS);\n    var curItemDS = curViewDS[index - 1];\n\n    if (curItemDS && curItemDS.isHeader && curItemDS.items.length === 1) {\n      this.addListItem(curItemDS, index - 1, targetUL, curViewDS);\n    }\n  };\n\n  ListView.prototype.addListItem = function (dataSource, index, ulElement, curViewDS) {\n    var target = this.getLiFromObjOrElement(curViewDS[index + 1]) || this.getLiFromObjOrElement(curViewDS[index + 2]) || null;\n    var li = ListBase.createListItemFromJson(this.createElement, [dataSource], this.listBaseOption);\n    this.setAttributes(li);\n    ulElement.insertBefore(li[0], target);\n  };\n  /**\n   * Removes the list item from the data source based on a passed\n   *  element like fields: { text: 'Name', tooltip: 'Name', id:'id'}\n   * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.\n   */\n\n\n  ListView.prototype.removeItem = function (item) {\n    var listDataSource = this.dataSource instanceof DataManager ? this.localData : this.dataSource;\n\n    if (this.enableVirtualization) {\n      this.virtualizationModule.removeItem(item);\n    } else {\n      this.removeItemFromList(item, listDataSource);\n      this.updateBlazorTemplates(true);\n    }\n  };\n\n  ListView.prototype.removeItemFromList = function (obj, listDataSource) {\n    var _this = this;\n\n    var curViewDS = this.curViewDS;\n    var fields = obj instanceof Element ? this.getElementUID(obj) : obj;\n    var dataSource;\n    dataSource = this.findItemFromDS(listDataSource, fields, true);\n\n    if (dataSource) {\n      var data_1;\n      data_1 = this.findItemFromDS(dataSource, fields);\n      var index = curViewDS.indexOf(data_1);\n      var li = this.getLiFromObjOrElement(obj);\n      var groupLi = void 0;\n      this.validateNestedView(li);\n\n      if (this.fields.groupBy && this.curViewDS[index - 1] && curViewDS[index - 1].isHeader && curViewDS[index - 1].items.length === 1) {\n        if (li && li.previousElementSibling.classList.contains(classNames.groupListItem) && (isNullOrUndefined(li.nextElementSibling) || li.nextElementSibling && li.nextElementSibling.classList.contains(classNames.groupListItem))) {\n          groupLi = li.previousElementSibling;\n        }\n      }\n\n      if (li) {\n        detach(li);\n      }\n\n      if (groupLi) {\n        detach(groupLi);\n      } // tslint:disable-next-line:no-any\n\n\n      var foundData = dataSource.length - 1 <= 0 ? this.findParent(this.localData, this.fields.id, function (value) {\n        return value === data_1[_this.fields.id];\n      }, null) : null;\n      var dsIndex = dataSource.indexOf(data_1);\n      dataSource.splice(dsIndex, 1);\n      this.setViewDataSource(listDataSource);\n\n      if (foundData && foundData.parent && Array.isArray(foundData.parent[this.fields.child]) && foundData.parent[this.fields.child].length <= 0) {\n        var parentLi = this.getLiFromObjOrElement(foundData.parent);\n\n        if (parentLi) {\n          var li_1 = ListBase.createListItemFromJson(this.createElement, [foundData.parent], this.listBaseOption);\n          this.setAttributes(li_1);\n          parentLi.parentElement.insertBefore(li_1[0], parentLi);\n          parentLi.parentElement.removeChild(parentLi);\n        }\n      }\n\n      if (dataSource.length <= 0) {\n        this.back();\n      }\n\n      this.liCollection = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.listItem));\n    }\n  }; // validate before removing an element whether the current view is inside target element's child view\n\n\n  ListView.prototype.validateNestedView = function (li) {\n    var liID = li ? li.getAttribute('data-uid').toString().toLowerCase() : null;\n\n    if (liID && this.curDSLevel && this.curDSLevel.length > 0) {\n      while (this.curDSLevel.some(function (id) {\n        return id.toString().toLowerCase() === liID;\n      })) {\n        this.back();\n      }\n    }\n  };\n  /**\n   * Removes multiple items from the ListView by passing the array of elements or array of field objects.\n   * @param  {Fields[] | HTMLElement[] | Element[]} item - We can pass array of elements or array of field Object with ID and Text fields.\n   */\n\n\n  ListView.prototype.removeMultipleItems = function (item) {\n    if (item.length) {\n      for (var i = 0; i < item.length; i++) {\n        this.removeItem(item[i]);\n      }\n\n      this.updateBlazorTemplates(true);\n    }\n  }; // tslint:disable-next-line:no-any\n\n\n  ListView.prototype.findParent = function (dataSource, id, callback, parent) {\n    if (dataSource.hasOwnProperty(id) && callback(dataSource[id]) === true) {\n      return extend({}, dataSource);\n    }\n\n    for (var i = 0; i < Object.keys(dataSource).length; i++) {\n      if (dataSource[Object.keys(dataSource)[i]] && typeof dataSource[Object.keys(dataSource)[i]] === 'object') {\n        // tslint:disable-next-line:no-any\n        var result = this.findParent(dataSource[Object.keys(dataSource)[i]], id, callback, dataSource);\n\n        if (result != null) {\n          if (!result.parent) {\n            result.parent = parent;\n          }\n\n          return result;\n        }\n      }\n    }\n\n    return null;\n  }; // Module Required function\n\n\n  ListView.prototype.getModuleName = function () {\n    return 'listview';\n  };\n\n  ListView.prototype.requiredModules = function () {\n    var modules = [];\n\n    if (this.enableVirtualization) {\n      modules.push({\n        args: [this],\n        member: 'virtualization'\n      });\n    }\n\n    return modules;\n  };\n  /**\n   * Get the properties to be maintained in the persisted state.\n   */\n\n\n  ListView.prototype.getPersistData = function () {\n    return this.addOnPersist(['cssClass', 'enableRtl', 'htmlAttributes', 'enable', 'fields', 'animation', 'headerTitle', 'sortOrder', 'showIcon', 'height', 'width', 'showCheckBox', 'checkBoxPosition']);\n  };\n\n  __decorate([Property('')], ListView.prototype, \"cssClass\", void 0);\n\n  __decorate([Property(false)], ListView.prototype, \"enableVirtualization\", void 0);\n\n  __decorate([Property({})], ListView.prototype, \"htmlAttributes\", void 0);\n\n  __decorate([Property(true)], ListView.prototype, \"enable\", void 0);\n\n  __decorate([Property([])], ListView.prototype, \"dataSource\", void 0);\n\n  __decorate([Property()], ListView.prototype, \"query\", void 0);\n\n  __decorate([Complex(ListBase.defaultMappedFields, FieldSettings)], ListView.prototype, \"fields\", void 0);\n\n  __decorate([Property({\n    effect: 'SlideLeft',\n    duration: 400,\n    easing: 'ease'\n  })], ListView.prototype, \"animation\", void 0);\n\n  __decorate([Property('None')], ListView.prototype, \"sortOrder\", void 0);\n\n  __decorate([Property(false)], ListView.prototype, \"showIcon\", void 0);\n\n  __decorate([Property(false)], ListView.prototype, \"showCheckBox\", void 0);\n\n  __decorate([Property('Left')], ListView.prototype, \"checkBoxPosition\", void 0);\n\n  __decorate([Property('')], ListView.prototype, \"headerTitle\", void 0);\n\n  __decorate([Property(false)], ListView.prototype, \"showHeader\", void 0);\n\n  __decorate([Property(false)], ListView.prototype, \"enableHtmlSanitizer\", void 0);\n\n  __decorate([Property('')], ListView.prototype, \"height\", void 0);\n\n  __decorate([Property('')], ListView.prototype, \"width\", void 0);\n\n  __decorate([Property(null)], ListView.prototype, \"template\", void 0);\n\n  __decorate([Property(null)], ListView.prototype, \"headerTemplate\", void 0);\n\n  __decorate([Property(null)], ListView.prototype, \"groupTemplate\", void 0);\n\n  __decorate([Event()], ListView.prototype, \"select\", void 0);\n\n  __decorate([Event()], ListView.prototype, \"actionBegin\", void 0);\n\n  __decorate([Event()], ListView.prototype, \"actionComplete\", void 0);\n\n  __decorate([Event()], ListView.prototype, \"actionFailure\", void 0);\n\n  ListView = __decorate([NotifyPropertyChanges], ListView);\n  return ListView;\n}(Component);\n\nexport { ListView };","map":null,"metadata":{},"sourceType":"module"}