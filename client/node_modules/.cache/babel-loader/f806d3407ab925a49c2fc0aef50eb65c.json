{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { PdfDictionary } from './pdf-dictionary';\nimport { PdfNumber } from './pdf-number';\nimport { Operators } from './../input-output/pdf-operators';\nimport { PdfName } from './pdf-name';\nimport { PdfArray } from './pdf-array';\nimport { PdfReferenceHolder } from './pdf-reference';\nimport { CompressedStreamWriter } from '@syncfusion/ej2-compression';\n/**\n * `PdfStream` class is used to perform stream related primitive operations.\n * @private\n */\n\nvar PdfStream =\n/** @class */\nfunction (_super) {\n  __extends(PdfStream, _super);\n\n  function PdfStream(dictionary, data) {\n    var _this = _super.call(this, dictionary) || this; //Constants\n\n    /**\n     * @hidden\n     * @private\n     */\n\n\n    _this.dicPrefix = 'stream';\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.dicSuffix = 'endstream';\n    /**\n     * Internal variable to hold `cloned object`.\n     * @private\n     */\n\n    _this.clonedObject2 = null;\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.bCompress = true;\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.isImageStream = false;\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.isFontStream = false;\n\n    if (typeof dictionary !== 'undefined' || typeof data !== 'undefined') {\n      _this.dataStream2 = [];\n      _this.dataStream2 = data;\n      _this.bCompress2 = false;\n    } else {\n      _this.dataStream2 = [];\n      _this.bCompress2 = true; //Pending\n    }\n\n    return _this;\n  }\n\n  Object.defineProperty(PdfStream.prototype, \"internalStream\", {\n    /**\n     * Gets the `internal` stream.\n     * @private\n     */\n    get: function () {\n      return this.dataStream2;\n    },\n    set: function (value) {\n      this.dataStream2 = [];\n      this.dataStream2 = value;\n      this.modify();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStream.prototype, \"isImage\", {\n    /**\n     * Gets or sets 'is image' flag.\n     * @private\n     */\n    get: function () {\n      return this.isImageStream;\n    },\n    set: function (value) {\n      this.isImageStream = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStream.prototype, \"isFont\", {\n    /**\n     * Gets or sets 'is font' flag.\n     * @private\n     */\n    get: function () {\n      return this.isFontStream;\n    },\n    set: function (value) {\n      this.isFontStream = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStream.prototype, \"compress\", {\n    /**\n     * Gets or sets `compression` flag.\n     * @private\n     */\n    get: function () {\n      return this.bCompress;\n    },\n    set: function (value) {\n      this.bCompress = value;\n      this.modify();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStream.prototype, \"data\", {\n    /**\n     * Gets or sets the `data`.\n     * @private\n     */\n    get: function () {\n      return this.dataStream2;\n    },\n    set: function (value) {\n      this.dataStream2 = [];\n      this.dataStream2 = value;\n      this.modify();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * `Clear` the internal stream.\n   * @private\n   */\n\n  PdfStream.prototype.clearStream = function () {\n    this.internalStream = [];\n\n    if (this.items.containsKey(this.dictionaryProperties.filter)) {\n      this.remove(this.dictionaryProperties.filter);\n    }\n\n    this.bCompress = true;\n    this.modify();\n  };\n  /**\n   * `Writes` the specified string.\n   * @private\n   */\n\n\n  PdfStream.prototype.write = function (text) {\n    if (text == null) {\n      throw new Error('ArgumentNullException:text');\n    }\n\n    if (text.length <= 0) {\n      throw new Error('ArgumentException: Can not write an empty string, text');\n    }\n\n    this.dataStream2.push(text);\n    this.modify();\n  };\n  /**\n   * `Writes` the specified bytes.\n   * @private\n   */\n\n\n  PdfStream.prototype.writeBytes = function (data) {\n    if (data === null) {\n      throw new Error('ArgumentNullException:data');\n    }\n\n    if (data.length <= 0) {\n      throw new Error('ArgumentException: Can not write an empty bytes, data');\n    }\n\n    var text = '';\n\n    for (var i = 0; i < data.length; i++) {\n      text += String.fromCharCode(data[i]);\n    }\n\n    this.dataStream2.push(text);\n    this.modify();\n  };\n  /**\n   * Raises event `Cmap BeginSave`.\n   * @private\n   */\n\n\n  PdfStream.prototype.onCmapBeginSave = function () {\n    this.cmapBeginSave.sender.cmapBeginSave();\n  };\n  /**\n   * Raises event `Font Program BeginSave`.\n   * @private\n   */\n\n\n  PdfStream.prototype.onFontProgramBeginSave = function () {\n    this.fontProgramBeginSave.sender.fontProgramBeginSave();\n  };\n  /**\n   * `Compresses the content` if it's required.\n   * @private\n   */\n\n\n  PdfStream.prototype.compressContent = function (data, writer) {\n    if (this.bCompress) {\n      var byteArray = [];\n\n      for (var i = 0; i < data.length; i++) {\n        byteArray.push(data.charCodeAt(i));\n      }\n\n      var dataArray = new Uint8Array(byteArray);\n      var sw = new CompressedStreamWriter(); // data = 'Hello World!!!';\n\n      sw.write(dataArray, 0, dataArray.length);\n      sw.close();\n      data = sw.getCompressedString;\n      this.addFilter(this.dictionaryProperties.flatedecode);\n    }\n\n    return data;\n  };\n  /**\n   * `Adds a filter` to the filter array.\n   * @private\n   */\n\n\n  PdfStream.prototype.addFilter = function (filterName) {\n    var obj = this.items.getValue(this.dictionaryProperties.filter);\n\n    if (obj instanceof PdfReferenceHolder) {\n      var rh = obj;\n      obj = rh.object;\n    }\n\n    var array = obj;\n    var name = obj;\n\n    if (name != null) {\n      array = new PdfArray();\n      array.insert(0, name);\n      this.items.setValue(this.dictionaryProperties.filter, array);\n    }\n\n    name = new PdfName(filterName);\n\n    if (array == null) {\n      this.items.setValue(this.dictionaryProperties.filter, name);\n    } else {\n      array.insert(0, name);\n    }\n  };\n  /**\n   * `Saves` the object using the specified writer.\n   * @private\n   */\n\n\n  PdfStream.prototype.save = function (writer) {\n    if (typeof this.cmapBeginSave !== 'undefined') {\n      this.onCmapBeginSave();\n    }\n\n    if (typeof this.fontProgramBeginSave !== 'undefined') {\n      this.onFontProgramBeginSave();\n    }\n\n    var data = '';\n\n    for (var i = 0; i < this.data.length; i++) {\n      data = data + this.data[i];\n    }\n\n    if (data.length > 1 && !this.isImage && !this.isFont) {\n      data = 'q\\r\\n' + data + 'Q\\r\\n';\n    }\n\n    data = this.compressContent(data, writer);\n    var length = data.length;\n    this.items.setValue(this.dictionaryProperties.length, new PdfNumber(length));\n\n    _super.prototype.save.call(this, writer, false);\n\n    writer.write(this.dicPrefix);\n    writer.write(Operators.newLine);\n\n    if (data.length > 0) {\n      writer.write(data);\n    }\n\n    writer.write(Operators.newLine);\n    writer.write(this.dicSuffix);\n    writer.write(Operators.newLine);\n  };\n  /**\n   * Converts `bytes to string`.\n   * @private\n   */\n\n\n  PdfStream.bytesToString = function (byteArray) {\n    var output = '';\n\n    for (var i = 0; i < byteArray.length; i++) {\n      output = output + String.fromCharCode(byteArray[i]);\n    }\n\n    return output;\n  };\n\n  return PdfStream;\n}(PdfDictionary);\n\nexport { PdfStream };\n\nvar SaveCmapEventHandler =\n/** @class */\nfunction () {\n  /**\n   * New instance for `save section collection event handler` class.\n   * @private\n   */\n  function SaveCmapEventHandler(sender) {\n    this.sender = sender;\n  }\n\n  return SaveCmapEventHandler;\n}();\n\nexport { SaveCmapEventHandler };\n\nvar SaveFontProgramEventHandler =\n/** @class */\nfunction () {\n  /**\n   * New instance for `save section collection event handler` class.\n   * @private\n   */\n  function SaveFontProgramEventHandler(sender) {\n    this.sender = sender;\n  }\n\n  return SaveFontProgramEventHandler;\n}();\n\nexport { SaveFontProgramEventHandler };","map":null,"metadata":{},"sourceType":"module"}