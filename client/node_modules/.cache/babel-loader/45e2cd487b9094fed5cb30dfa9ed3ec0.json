{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { isNullOrUndefined, remove } from '@syncfusion/ej2-base';\nimport { formatUnit } from '@syncfusion/ej2-base';\nimport { Browser } from '@syncfusion/ej2-base';\nimport { colGroupRefresh, columnWidthChanged, scroll, columnVisibilityChanged, refreshFooterRenderer } from '../base/constant';\nimport { ContentRender } from './content-renderer';\nimport { RowRenderer } from './row-renderer';\nimport { SummaryModelGenerator } from '../services/summary-model-generator';\nimport { renderMovable, calculateAggregate, iterateExtend } from '../base/util';\nimport { DataUtil } from '@syncfusion/ej2-data';\n/**\n * Footer module is used to render grid content\n * @hidden\n */\n\nvar FooterRenderer =\n/** @class */\nfunction (_super) {\n  __extends(FooterRenderer, _super);\n\n  function FooterRenderer(gridModule, serviceLocator) {\n    var _this = _super.call(this, gridModule, serviceLocator) || this;\n\n    _this.aggregates = {};\n    _this.parent = gridModule;\n    _this.locator = serviceLocator;\n    _this.modelGenerator = new SummaryModelGenerator(_this.parent);\n\n    _this.addEventListener();\n\n    return _this;\n  }\n  /**\n   * The function is used to render grid footer div\n   */\n\n\n  FooterRenderer.prototype.renderPanel = function () {\n    var div = this.parent.createElement('div', {\n      className: 'e-gridfooter'\n    });\n    var innerDiv = this.parent.createElement('div', {\n      className: 'e-summarycontent'\n    });\n    var movableContent = innerDiv;\n\n    if (this.parent.getFrozenColumns()) {\n      var fDiv = this.parent.createElement('div', {\n        className: 'e-frozenfootercontent'\n      });\n      var mDiv = this.parent.createElement('div', {\n        className: 'e-movablefootercontent'\n      });\n      innerDiv.appendChild(fDiv);\n      innerDiv.appendChild(mDiv);\n      this.frozenContent = fDiv;\n      this.movableContent = mDiv;\n      movableContent = mDiv;\n    }\n\n    if (Browser.isDevice) {\n      movableContent.style.overflowX = 'scroll';\n    }\n\n    div.appendChild(innerDiv);\n    this.setPanel(div);\n\n    if (this.parent.getPager() != null) {\n      this.parent.element.insertBefore(div, this.parent.getPager());\n    } else {\n      this.parent.element.appendChild(div);\n    }\n  };\n  /**\n   * The function is used to render grid footer table\n   */\n\n\n  FooterRenderer.prototype.renderTable = function () {\n    var contentDiv = this.getPanel();\n    var innerDiv = this.createContentTable('_footer_table');\n    var table = innerDiv.querySelector('.e-table');\n    var tFoot = this.parent.createElement('tfoot');\n    table.appendChild(tFoot);\n\n    if (this.parent.getFrozenColumns()) {\n      var freezeTable = table.cloneNode(true);\n      this.frozenContent.appendChild(freezeTable);\n      this.freezeTable = freezeTable;\n      this.movableContent.appendChild(table);\n      remove(table.querySelector('colgroup'));\n      var colGroup = this.parent.getHeaderContent().querySelector('.e-movableheader').querySelector('colgroup').cloneNode(true);\n      table.insertBefore(colGroup, table.querySelector('tbody'));\n      this.setColGroup(colGroup);\n    }\n\n    this.setTable(table);\n  };\n\n  FooterRenderer.prototype.renderSummaryContent = function (e, table, cStart, cEnd) {\n    var input = this.parent.dataSource instanceof Array ? this.parent.dataSource : this.parent.currentViewData;\n    var summaries = this.modelGenerator.getData();\n    var dummies = isNullOrUndefined(cStart) ? this.modelGenerator.getColumns() : this.modelGenerator.getColumns(cStart, cEnd);\n    var rows = isNullOrUndefined(cStart) ? this.modelGenerator.generateRows(input, e || this.aggregates) : this.modelGenerator.generateRows(input, e || this.aggregates, cStart, cEnd);\n    var fragment = document.createDocumentFragment();\n    var rowrenderer = new RowRenderer(this.locator, null, this.parent);\n    rowrenderer.element = this.parent.createElement('TR', {\n      className: 'e-summaryrow'\n    });\n\n    for (var srow = 0, len = summaries.length; srow < len; srow++) {\n      var row = rows[srow];\n\n      if (!row) {\n        continue;\n      }\n\n      var tr = rowrenderer.render(row, dummies);\n      fragment.appendChild(tr);\n    }\n\n    table.tFoot.appendChild(fragment);\n    this.aggregates = !isNullOrUndefined(e) ? e : this.aggregates;\n  };\n\n  FooterRenderer.prototype.refresh = function (e) {\n    if (this.parent.getFrozenColumns()) {\n      remove(this.getPanel());\n      this.renderPanel();\n      this.renderTable();\n      this.freezeTable.tFoot.innerHTML = '';\n      this.renderSummaryContent(e, this.freezeTable, 0, this.parent.getFrozenColumns());\n    }\n\n    this.getTable().tFoot.innerHTML = '';\n    this.renderSummaryContent(e, this.getTable(), this.parent.getFrozenColumns()); // check freeze content have no row case\n\n    if (this.parent.getFrozenColumns()) {\n      var frozenCnt = [].slice.call(this.parent.element.querySelector('.e-frozenfootercontent').querySelectorAll('.e-summaryrow'));\n      var movableCnt = [].slice.call(this.parent.element.querySelector('.e-movablefootercontent').querySelectorAll('.e-summaryrow'));\n\n      for (var i = 0; i < frozenCnt.length; i++) {\n        var frozenHeight = frozenCnt[i].getBoundingClientRect().height;\n        var movableHeight = movableCnt[i].getBoundingClientRect().height;\n\n        if (frozenHeight < movableHeight) {\n          frozenCnt[i].classList.remove('e-hide');\n          frozenCnt[i].style.height = movableHeight + 'px';\n        } else if (frozenHeight > movableHeight) {\n          movableCnt[i].classList.remove('e-hide');\n          movableCnt[i].style.height = frozenHeight + 'px';\n        }\n      }\n\n      var frozenDiv = this.frozenContent;\n\n      if (!frozenDiv.offsetHeight) {\n        frozenDiv.style.height = this.getTable().offsetHeight + 'px';\n      }\n\n      if (this.parent.allowResizing) {\n        this.updateFooterTableWidth(this.getTable());\n      }\n    }\n\n    this.onScroll();\n  };\n\n  FooterRenderer.prototype.refreshCol = function () {\n    // frozen table \n    var mheaderCol;\n    var fheaderCol = mheaderCol = this.parent.element.querySelector('.e-gridheader').querySelector('colgroup').cloneNode(true);\n\n    if (this.parent.getFrozenColumns()) {\n      var isXaxis = this.parent.enableColumnVirtualization && this.parent.contentModule.isXaxis();\n\n      if (isXaxis) {\n        mheaderCol = this.parent.getMovableVirtualHeader().querySelector('colgroup').cloneNode(true);\n      } else {\n        mheaderCol = renderMovable(fheaderCol, this.parent.getFrozenColumns());\n        this.freezeTable.replaceChild(fheaderCol, this.freezeTable.querySelector('colGroup'));\n      }\n    }\n\n    this.getTable().replaceChild(mheaderCol, this.getColGroup());\n    this.setColGroup(mheaderCol);\n  };\n\n  FooterRenderer.prototype.onWidthChange = function (args) {\n    this.getColFromIndex(args.index).style.width = formatUnit(args.width);\n\n    if (this.parent.allowResizing && args.module === 'resize') {\n      this.updateFooterTableWidth(this.getTable());\n    }\n  };\n\n  FooterRenderer.prototype.onScroll = function (e) {\n    if (e === void 0) {\n      e = {\n        left: this.parent.getFrozenColumns() ? this.parent.getContent().querySelector('.e-movablecontent').scrollLeft : this.parent.getContent().firstChild.scrollLeft\n      };\n    }\n\n    this.getTable().parentElement.scrollLeft = e.left;\n  };\n\n  FooterRenderer.prototype.getColFromIndex = function (index) {\n    var fCol = this.parent.getFrozenColumns();\n\n    if (fCol && fCol > index) {\n      return this.freezeTable.querySelector('colGroup').children[index];\n    }\n\n    return this.getColGroup().children[index - fCol];\n  };\n\n  FooterRenderer.prototype.columnVisibilityChanged = function () {\n    this.refresh();\n  };\n\n  FooterRenderer.prototype.addEventListener = function () {\n    this.parent.on(colGroupRefresh, this.refreshCol, this);\n    this.parent.on(columnWidthChanged, this.onWidthChange, this);\n    this.parent.on(scroll, this.onScroll, this);\n    this.parent.on(columnVisibilityChanged, this.columnVisibilityChanged, this);\n    this.parent.on(refreshFooterRenderer, this.refreshFooterRenderer, this);\n  };\n\n  FooterRenderer.prototype.removeEventListener = function () {\n    this.parent.off(colGroupRefresh, this.refreshCol);\n    this.parent.off(columnWidthChanged, this.onWidthChange);\n    this.parent.off(scroll, this.onScroll);\n    this.parent.off(columnVisibilityChanged, this.columnVisibilityChanged);\n    this.parent.off(refreshFooterRenderer, this.refreshFooterRenderer);\n  };\n\n  FooterRenderer.prototype.updateFooterTableWidth = function (tFoot) {\n    var tHead = this.parent.getHeaderTable();\n\n    if (tHead && tFoot) {\n      tFoot.style.width = tHead.style.width;\n    }\n  };\n\n  FooterRenderer.prototype.refreshFooterRenderer = function (editedData) {\n    var aggregates = this.onAggregates(editedData);\n    this.refresh(aggregates);\n  };\n\n  FooterRenderer.prototype.getIndexByKey = function (data, ds) {\n    var key = this.parent.getPrimaryKeyFieldNames()[0];\n\n    for (var i = 0; i < ds.length; i++) {\n      if (ds[i][key] === data[key]) {\n        return i;\n      }\n    }\n\n    return -1;\n  };\n\n  FooterRenderer.prototype.onAggregates = function (editedData) {\n    editedData = editedData instanceof Array ? editedData : [];\n    var field = this.parent.getPrimaryKeyFieldNames()[0];\n    var dataSource = [];\n    var isModified = false;\n    var batchChanges = {};\n    var gridData = 'dataSource';\n    var changedRecords = 'changedRecords';\n    var addedRecords = 'addedRecords';\n    var deletedRecords = 'deletedRecords';\n    var currentViewData = this.parent.dataSource instanceof Array ? this.parent.dataSource : this.parent.dataSource[gridData].json.length ? this.parent.dataSource[gridData].json : this.parent.getCurrentViewRecords();\n\n    if (this.parent.editModule) {\n      batchChanges = this.parent.editModule.getBatchChanges();\n    }\n\n    if (Object.keys(batchChanges).length) {\n      for (var i = 0; i < currentViewData.length; i++) {\n        isModified = false;\n\n        if (batchChanges[changedRecords].length && this.getIndexByKey(currentViewData[i], batchChanges[changedRecords]) > -1) {\n          isModified = true;\n          dataSource.push(batchChanges[changedRecords][this.getIndexByKey(currentViewData[i], batchChanges[changedRecords])]);\n        }\n\n        if (batchChanges[deletedRecords].length && this.getIndexByKey(currentViewData[i], batchChanges[deletedRecords]) > -1) {\n          isModified = true;\n        } else if (!isModified) {\n          dataSource.push(currentViewData[i]);\n        }\n      }\n\n      if (batchChanges[addedRecords].length) {\n        for (var i = 0; i < batchChanges[addedRecords].length; i++) {\n          dataSource.push(batchChanges[addedRecords][i]);\n        }\n      }\n    } else {\n      if (editedData.length) {\n        var data = iterateExtend(currentViewData);\n        dataSource = data.map(function (item) {\n          var idVal = DataUtil.getObject(field, item);\n          var value;\n          var hasVal = editedData.some(function (cItem) {\n            value = cItem;\n            return idVal === DataUtil.getObject(field, cItem);\n          });\n          return hasVal ? value : item;\n        });\n      } else {\n        dataSource = currentViewData;\n      }\n    }\n\n    var eData = editedData;\n\n    if (eData.type && eData.type === 'cancel') {\n      dataSource = currentViewData;\n    }\n\n    var aggregate = {};\n    var agrVal;\n    var aggregateRows = this.parent.aggregates;\n\n    for (var i = 0; i < aggregateRows.length; i++) {\n      for (var j = 0; j < aggregateRows[i].columns.length; j++) {\n        var data = [];\n        var type = aggregateRows[i].columns[j].type.toString();\n        data = dataSource;\n        agrVal = calculateAggregate(type, data, aggregateRows[i].columns[j], this.parent);\n        aggregate[aggregateRows[i].columns[j].field + ' - ' + type.toLowerCase()] = agrVal;\n      }\n    }\n\n    var result = {\n      result: dataSource,\n      count: dataSource.length,\n      aggregates: aggregate\n    };\n    return result;\n  };\n\n  return FooterRenderer;\n}(ContentRender);\n\nexport { FooterRenderer };","map":null,"metadata":{},"sourceType":"module"}