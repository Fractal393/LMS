{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { isNullOrUndefined, isBlazor } from '@syncfusion/ej2-base';\nimport { appendChildren } from '../base/util';\nimport { CellRenderer } from './cell-renderer';\nimport { refreshAggregateCell } from '../base/constant';\n/**\n * SummaryCellRenderer class which responsible for building summary cell content.\n * @hidden\n */\n\nvar SummaryCellRenderer =\n/** @class */\nfunction (_super) {\n  __extends(SummaryCellRenderer, _super);\n\n  function SummaryCellRenderer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.element = _this.parent.createElement('TD', {\n      className: 'e-summarycell',\n      attrs: {\n        role: 'gridcell',\n        tabindex: '-1'\n      }\n    });\n    return _this;\n  }\n\n  SummaryCellRenderer.prototype.getValue = function (field, data, column) {\n    var key;\n    key = !isNullOrUndefined(column.type) ? column.field + ' - ' + (typeof column.type === 'string' ? column.type.toLowerCase() : '') : column.columnName;\n    return data[column.columnName] ? data[column.columnName][key] : '';\n  };\n\n  SummaryCellRenderer.prototype.evaluate = function (node, cell, data, attributes) {\n    var column = cell.column;\n    this.parent.on(refreshAggregateCell, this.refreshWithAggregate(node, cell), this);\n\n    if (!(column.footerTemplate || column.groupFooterTemplate || column.groupCaptionTemplate)) {\n      return true;\n    }\n\n    var tempObj = column.getTemplate(cell.cellType);\n    var tempID = '';\n    var gColumn = this.parent.getColumnByField(data[column.columnName].field);\n\n    if (!isNullOrUndefined(gColumn)) {\n      data[column.columnName].headerText = gColumn.headerText;\n\n      if (gColumn.isForeignColumn()) {\n        var fData = gColumn.columnData.filter(function (e) {\n          return e[data[column.columnName].field] === data[column.columnName].key;\n        })[0];\n        data[column.columnName].foreignKey = fData[gColumn.foreignKeyValue];\n      }\n    }\n\n    if (isBlazor()) {\n      var guid = 'guid';\n      tempID = this.parent.element.id + column[guid] + tempObj.property;\n    }\n\n    appendChildren(node, tempObj.fn(data[column.columnName], this.parent, tempObj.property, tempID));\n    return false;\n  };\n\n  SummaryCellRenderer.prototype.refreshWithAggregate = function (node, cell) {\n    var _this = this;\n\n    var cellNode = cell;\n    return function (args) {\n      var cell = cellNode;\n      var field = cell.column.columnName ? cell.column.columnName : null;\n      var curCell = !isNullOrUndefined(field) ? args.cells.filter(function (cell) {\n        return cell.column.columnName === field;\n      })[0] : null;\n\n      if (node.parentElement && node.parentElement.getAttribute('data-uid') === args.dataUid && field && field === curCell.column.columnName) {\n        _this.refreshTD(node, curCell, args.data);\n      }\n    };\n  };\n\n  return SummaryCellRenderer;\n}(CellRenderer);\n\nexport { SummaryCellRenderer };","map":null,"metadata":{},"sourceType":"module"}