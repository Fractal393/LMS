{"ast":null,"code":"/**\r\n * DevExtreme (ui/file_manager/ui.file_manager.files_tree_view.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _events_engine = require(\"../../events/core/events_engine\");\n\nvar _events_engine2 = _interopRequireDefault(_events_engine);\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _icon = require(\"../../core/utils/icon\");\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _ui = require(\"../widget/ui.widget\");\n\nvar _ui2 = _interopRequireDefault(_ui);\n\nvar _uiTree_view = require(\"../tree_view/ui.tree_view.search\");\n\nvar _uiTree_view2 = _interopRequireDefault(_uiTree_view);\n\nvar _uiFile_manager = require(\"./ui.file_manager.file_actions_button\");\n\nvar _uiFile_manager2 = _interopRequireDefault(_uiFile_manager);\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nfunction _get(target, property, receiver) {\n  if (\"undefined\" !== typeof Reflect && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function (target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) {\n        return;\n      }\n\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n\n    if (null === object) {\n      break;\n    }\n  }\n\n  return object;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (\"function\" !== typeof superClass && null !== superClass) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (superClass) {\n    _setPrototypeOf(subClass, superClass);\n  }\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function (o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var result,\n        Super = _getPrototypeOf(Derived);\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (\"object\" === _typeof(call) || \"function\" === typeof call)) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (void 0 === self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (\"undefined\" === typeof Reflect || !Reflect.construct) {\n    return false;\n  }\n\n  if (Reflect.construct.sham) {\n    return false;\n  }\n\n  if (\"function\" === typeof Proxy) {\n    return true;\n  }\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function (o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar FILE_MANAGER_DIRS_TREE_CLASS = \"dx-filemanager-dirs-tree\";\nvar FILE_MANAGER_DIRS_TREE_FOCUSED_ITEM_CLASS = \"dx-filemanager-focused-item\";\nvar FILE_MANAGER_DIRS_TREE_ITEM_TEXT_CLASS = \"dx-filemanager-dirs-tree-item-text\";\nvar TREE_VIEW_ITEM_CLASS = \"dx-treeview-item\";\n\nvar FileManagerFilesTreeView = function (_Widget) {\n  _inherits(FileManagerFilesTreeView, _Widget);\n\n  var _super = _createSuper(FileManagerFilesTreeView);\n\n  function FileManagerFilesTreeView() {\n    _classCallCheck(this, FileManagerFilesTreeView);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FileManagerFilesTreeView, [{\n    key: \"_initMarkup\",\n    value: function () {\n      var _this = this;\n\n      this._getCurrentDirectory = this.option(\"getCurrentDirectory\");\n      this._createFileActionsButton = _common.noop;\n      this._storeExpandedState = this.option(\"storeExpandedState\") || false;\n      var $treeView = (0, _renderer2.default)(\"<div>\").addClass(FILE_MANAGER_DIRS_TREE_CLASS).appendTo(this.$element());\n      var treeViewOptions = {\n        dataStructure: \"plain\",\n        rootValue: \"\",\n        createChildren: this._onFilesTreeViewCreateSubDirectories.bind(this),\n        itemTemplate: this._createFilesTreeViewItemTemplate.bind(this),\n        keyExpr: \"getInternalKey\",\n        parentIdExpr: \"parentDirectory.getInternalKey\",\n        displayExpr: function (itemInfo) {\n          return itemInfo.getDisplayName();\n        },\n        hasItemsExpr: \"fileItem.hasSubDirectories\",\n        onItemClick: this._createActionByOption(\"onDirectoryClick\"),\n        onItemExpanded: function (e) {\n          return _this._onFilesTreeViewItemExpanded(e);\n        },\n        onItemCollapsed: function (e) {\n          return _this._onFilesTreeViewItemCollapsed(e);\n        },\n        onItemRendered: function (e) {\n          return _this._onFilesTreeViewItemRendered(e);\n        }\n      };\n\n      if (this._contextMenu) {\n        this._contextMenu.option(\"onContextMenuHidden\", function () {\n          return _this._onContextMenuHidden();\n        });\n\n        treeViewOptions.onItemContextMenu = function (e) {\n          return _this._onFilesTreeViewItemContextMenu(e);\n        };\n\n        this._createFileActionsButton = function (element, options) {\n          return _this._createComponent(element, _uiFile_manager2.default, options);\n        };\n      }\n\n      this._filesTreeView = this._createComponent($treeView, _uiTree_view2.default, treeViewOptions);\n\n      _events_engine2.default.on($treeView, \"click\", this._createActionByOption(\"onClick\"));\n    }\n  }, {\n    key: \"_render\",\n    value: function () {\n      _get(_getPrototypeOf(FileManagerFilesTreeView.prototype), \"_render\", this).call(this);\n\n      var that = this;\n      setTimeout(function () {\n        that._updateFocusedElement();\n      });\n    }\n  }, {\n    key: \"_onFilesTreeViewCreateSubDirectories\",\n    value: function (rootItem) {\n      var getDirectories = this.option(\"getDirectories\");\n      var directoryInfo = rootItem && rootItem.itemData || null;\n      return getDirectories && getDirectories(directoryInfo, true);\n    }\n  }, {\n    key: \"_onFilesTreeViewItemRendered\",\n    value: function (_ref) {\n      var itemData = _ref.itemData;\n\n      var currentDirectory = this._getCurrentDirectory();\n\n      if (currentDirectory && currentDirectory.fileItem.equals(itemData.fileItem)) {\n        this._updateFocusedElement();\n      }\n    }\n  }, {\n    key: \"_onFilesTreeViewItemExpanded\",\n    value: function (_ref2) {\n      var itemData = _ref2.itemData,\n          node = _ref2.node;\n\n      if (this._storeExpandedState) {\n        itemData.expanded = true;\n      }\n\n      if (node.expandedDeferred) {\n        node.expandedDeferred.resolve();\n        delete node.expandedDeferred;\n      }\n    }\n  }, {\n    key: \"_onFilesTreeViewItemCollapsed\",\n    value: function (_ref3) {\n      var itemData = _ref3.itemData;\n\n      if (this._storeExpandedState) {\n        itemData.expanded = false;\n      }\n    }\n  }, {\n    key: \"_createFilesTreeViewItemTemplate\",\n    value: function (itemData, itemIndex, itemElement) {\n      var _this2 = this;\n\n      var $itemElement = (0, _renderer2.default)(itemElement);\n      var $itemWrapper = $itemElement.closest(this._filesTreeViewItemSelector);\n      $itemWrapper.data(\"item\", itemData);\n      var $image = (0, _icon.getImageContainer)(itemData.icon);\n      var $text = (0, _renderer2.default)(\"<span>\").text(itemData.getDisplayName()).addClass(FILE_MANAGER_DIRS_TREE_ITEM_TEXT_CLASS);\n      var $button = (0, _renderer2.default)(\"<div>\");\n      $itemElement.append($image, $text, $button);\n\n      this._createFileActionsButton($button, {\n        onClick: function (e) {\n          return _this2._onFileItemActionButtonClick(e);\n        }\n      });\n    }\n  }, {\n    key: \"_onFilesTreeViewItemContextMenu\",\n    value: function (_ref4) {\n      var itemElement = _ref4.itemElement,\n          event = _ref4.event;\n      event.preventDefault();\n      var itemData = (0, _renderer2.default)(itemElement).data(\"item\");\n\n      this._contextMenu.showAt([itemData], itemElement, event);\n    }\n  }, {\n    key: \"_onFileItemActionButtonClick\",\n    value: function (_ref5) {\n      var component = _ref5.component,\n          element = _ref5.element,\n          event = _ref5.event;\n      event.stopPropagation();\n      var $item = component.$element().closest(this._filesTreeViewItemSelector);\n      var item = $item.data(\"item\");\n\n      this._contextMenu.showAt([item], element);\n\n      this._activeFileActionsButton = component;\n\n      this._activeFileActionsButton.setActive(true);\n    }\n  }, {\n    key: \"_onContextMenuHidden\",\n    value: function () {\n      if (this._activeFileActionsButton) {\n        this._activeFileActionsButton.setActive(false);\n      }\n    }\n  }, {\n    key: \"_updateFocusedElement\",\n    value: function () {\n      var directoryInfo = this._getCurrentDirectory();\n\n      var $element = this._getItemElementByKey(directoryInfo.getInternalKey());\n\n      if (this._$focusedElement) {\n        this._$focusedElement.toggleClass(FILE_MANAGER_DIRS_TREE_FOCUSED_ITEM_CLASS, false);\n      }\n\n      this._$focusedElement = $element || (0, _renderer2.default)();\n\n      this._$focusedElement.toggleClass(FILE_MANAGER_DIRS_TREE_FOCUSED_ITEM_CLASS, true);\n    }\n  }, {\n    key: \"_getItemElementByKey\",\n    value: function (key) {\n      var node = this._filesTreeView && this._filesTreeView._dataAdapter.getNodeByKey(key);\n\n      if (node) {\n        var $node = this._filesTreeView._getNodeElement(node);\n\n        if ($node) {\n          return $node.children(this._filesTreeViewItemSelector);\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function () {\n      return (0, _extend.extend)(_get(_getPrototypeOf(FileManagerFilesTreeView.prototype), \"_getDefaultOptions\", this).call(this), {\n        storeExpandedState: false,\n        initialFolder: null,\n        contextMenu: null,\n        getItems: null,\n        getCurrentDirectory: null,\n        onDirectoryClick: null\n      });\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function (args) {\n      var name = args.name;\n\n      switch (name) {\n        case \"storeExpandedState\":\n          this._storeExpandedState = this.option(name);\n          break;\n\n        case \"getItems\":\n        case \"rootFolderDisplayName\":\n        case \"initialFolder\":\n        case \"contextMenu\":\n          this.repaint();\n          break;\n\n        case \"getCurrentDirectory\":\n          this.getCurrentDirectory = this.option(name);\n          break;\n\n        case \"onDirectoryClick\":\n          this._filesTreeView.option(\"onItemClick\", this._createActionByOption(\"onDirectoryClick\"));\n\n          break;\n\n        default:\n          _get(_getPrototypeOf(FileManagerFilesTreeView.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }, {\n    key: \"expandDirectory\",\n    value: function (directoryInfo) {\n      var deferred = new _deferred.Deferred();\n\n      if (!directoryInfo || 0 === directoryInfo.items.length) {\n        return deferred.reject().promise();\n      }\n\n      var treeViewNode = this._filesTreeView._dataAdapter.getNodeByKey(directoryInfo.getInternalKey());\n\n      if (!treeViewNode) {\n        return deferred.reject().promise();\n      }\n\n      if (treeViewNode.expanded) {\n        return deferred.resolve().promise();\n      }\n\n      treeViewNode.expandedDeferred = deferred;\n\n      this._filesTreeView.expandItem(directoryInfo.getInternalKey());\n\n      return deferred.promise();\n    }\n  }, {\n    key: \"refresh\",\n    value: function () {\n      this._$focusedElement = null;\n\n      this._filesTreeView.option(\"dataSource\", []);\n    }\n  }, {\n    key: \"updateCurrentDirectory\",\n    value: function () {\n      this._updateFocusedElement();\n\n      this._storeExpandedState && this._updateExpandedStateToCurrentDirectory();\n    }\n  }, {\n    key: \"_updateExpandedStateToCurrentDirectory\",\n    value: function () {\n      var dirLine = [];\n\n      for (var dirInfo = this._getCurrentDirectory(); dirInfo; dirInfo = dirInfo.parentDirectory) {\n        dirLine.unshift(dirInfo);\n      }\n\n      this.expandDirectoryLineRecursive(dirLine);\n    }\n  }, {\n    key: \"expandDirectoryLineRecursive\",\n    value: function (dirLine) {\n      var _this3 = this;\n\n      if (!dirLine.length) {\n        return new _deferred.Deferred().resolve().promise();\n      }\n\n      return this.expandDirectory(dirLine.shift()).then(function () {\n        return _this3.expandDirectoryLineRecursive(dirLine);\n      });\n    }\n  }, {\n    key: \"_filesTreeViewItemSelector\",\n    get: function () {\n      return \".\".concat(TREE_VIEW_ITEM_CLASS);\n    }\n  }, {\n    key: \"_contextMenu\",\n    get: function () {\n      return this.option(\"contextMenu\");\n    }\n  }]);\n\n  return FileManagerFilesTreeView;\n}(_ui2.default);\n\nmodule.exports = FileManagerFilesTreeView;","map":null,"metadata":{},"sourceType":"script"}