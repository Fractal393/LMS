{"ast":null,"code":"/**\r\n * DevExtreme (ui/button.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _devices = require(\"../core/devices\");\n\nvar _devices2 = _interopRequireDefault(_devices);\n\nvar _utils = require(\"./widget/utils.ink_ripple\");\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _component_registrator = require(\"../core/component_registrator\");\n\nvar _component_registrator2 = _interopRequireDefault(_component_registrator);\n\nvar _themes = require(\"./themes\");\n\nvar _themes2 = _interopRequireDefault(_themes);\n\nvar _action = require(\"../core/action\");\n\nvar _action2 = _interopRequireDefault(_action);\n\nvar _validation_engine = require(\"./validation_engine\");\n\nvar _validation_engine2 = _interopRequireDefault(_validation_engine);\n\nvar _ui = require(\"./widget/ui.widget\");\n\nvar _ui2 = _interopRequireDefault(_ui);\n\nvar _short = require(\"../events/short\");\n\nvar _extend = require(\"../core/utils/extend\");\n\nvar _function_template = require(\"../core/templates/function_template\");\n\nvar _icon = require(\"../core/utils/icon\");\n\nvar _dom = require(\"../core/utils/dom\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nfunction _get(target, property, receiver) {\n  if (\"undefined\" !== typeof Reflect && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function (target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) {\n        return;\n      }\n\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n\n    if (null === object) {\n      break;\n    }\n  }\n\n  return object;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (\"function\" !== typeof superClass && null !== superClass) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (superClass) {\n    _setPrototypeOf(subClass, superClass);\n  }\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function (o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var result,\n        Super = _getPrototypeOf(Derived);\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (\"object\" === _typeof(call) || \"function\" === typeof call)) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (void 0 === self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (\"undefined\" === typeof Reflect || !Reflect.construct) {\n    return false;\n  }\n\n  if (Reflect.construct.sham) {\n    return false;\n  }\n\n  if (\"function\" === typeof Proxy) {\n    return true;\n  }\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function (o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar ANONYMOUS_TEMPLATE_NAME = \"content\";\n\nvar Button = function (_Widget) {\n  _inherits(Button, _Widget);\n\n  var _super = _createSuper(Button);\n\n  function Button() {\n    var _this;\n\n    _classCallCheck(this, Button);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this._feedbackHideTimeout = 100;\n    return _this;\n  }\n\n  _createClass(Button, [{\n    key: \"_$content\",\n    value: function () {\n      return this.$element().find(\".dx-button-content\");\n    }\n  }, {\n    key: \"_$submitInput\",\n    value: function () {\n      return this.$element().find(\".dx-button-submit-input\");\n    }\n  }, {\n    key: \"_attachActiveEvents\",\n    value: function (active, inactive) {\n      var $el = this._eventBindingTarget();\n\n      var namespace = \"inkRipple\";\n      var selector = this._activeStateUnit;\n\n      _short.active.off($el, {\n        namespace: namespace,\n        selector: selector\n      });\n\n      _short.active.on($el, new _action2.default(active), new _action2.default(inactive, {\n        excludeValidators: [\"disabled\", \"readOnly\"]\n      }), {\n        showTimeout: this._feedbackShowTimeout,\n        hideTimeout: this._feedbackHideTimeout,\n        selector: selector,\n        namespace: namespace\n      });\n    }\n  }, {\n    key: \"_defaultOptionsRules\",\n    value: function () {\n      return _get(_getPrototypeOf(Button.prototype), \"_defaultOptionsRules\", this).call(this).concat([{\n        device: function () {\n          return \"desktop\" === _devices2.default.real().deviceType && !_devices2.default.isSimulator();\n        },\n        options: {\n          focusStateEnabled: true\n        }\n      }, {\n        device: function () {\n          return _themes2.default.isMaterial(_themes2.default.current());\n        },\n        options: {\n          useInkRipple: true\n        }\n      }]);\n    }\n  }, {\n    key: \"_executeClickAction\",\n    value: function (event) {\n      this._clickAction({\n        validationGroup: this._validationGroupConfig,\n        event: event\n      });\n    }\n  }, {\n    key: \"_findGroup\",\n    value: function () {\n      var $element = this.$element();\n\n      var model = this._modelByElement($element);\n\n      var _this$option = this.option(),\n          validationGroup = _this$option.validationGroup;\n\n      return validationGroup || _validation_engine2.default.findGroup($element, model);\n    }\n  }, {\n    key: \"_getContentData\",\n    value: function () {\n      var _this$option2 = this.option(),\n          icon = _this$option2.icon,\n          text = _this$option2.text,\n          type = _this$option2.type,\n          _templateData = _this$option2._templateData;\n\n      return (0, _extend.extend)({\n        icon: \"back\" === type && !icon ? \"back\" : icon,\n        text: text\n      }, _templateData);\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function () {\n      return (0, _extend.extend)(_get(_getPrototypeOf(Button.prototype), \"_getDefaultOptions\", this).call(this), {\n        hoverStateEnabled: true,\n        onClick: null,\n        type: \"normal\",\n        text: \"\",\n        icon: \"\",\n        iconPosition: \"left\",\n        validationGroup: void 0,\n        activeStateEnabled: true,\n        template: \"content\",\n        useSubmitBehavior: false,\n        useInkRipple: false,\n        _templateData: {},\n        stylingMode: \"contained\"\n      });\n    }\n  }, {\n    key: \"_getSubmitAction\",\n    value: function () {\n      var _this2 = this;\n\n      var needValidate = true;\n      var validationStatus = \"valid\";\n      return this._createAction(function (_ref) {\n        var event = _ref.event;\n\n        if (needValidate) {\n          var validationGroup = _this2._validationGroupConfig;\n\n          if (validationGroup) {\n            var _validationGroup$vali = validationGroup.validate(),\n                status = _validationGroup$vali.status,\n                complete = _validationGroup$vali.complete;\n\n            validationStatus = status;\n\n            if (\"pending\" === status) {\n              needValidate = false;\n\n              _this2.option(\"disabled\", true);\n\n              complete.then(function (_ref2) {\n                var status = _ref2.status;\n\n                _this2.option(\"disabled\", false);\n\n                validationStatus = status;\n                \"valid\" === validationStatus && _this2._submitInput().click();\n                needValidate = true;\n              });\n            }\n          }\n        }\n\n        \"valid\" !== validationStatus && event.preventDefault();\n        event.stopPropagation();\n      });\n    }\n  }, {\n    key: \"_initMarkup\",\n    value: function () {\n      this.$element().addClass(\"dx-button\");\n\n      this._renderType();\n\n      this._renderStylingMode();\n\n      this._renderInkRipple();\n\n      this._renderClick();\n\n      this._updateAriaLabel();\n\n      _get(_getPrototypeOf(Button.prototype), \"_initMarkup\", this).call(this);\n\n      this._updateContent();\n\n      this.setAria(\"role\", \"button\");\n    }\n  }, {\n    key: \"_getAnonymousTemplateName\",\n    value: function () {\n      return ANONYMOUS_TEMPLATE_NAME;\n    }\n  }, {\n    key: \"_initTemplates\",\n    value: function () {\n      var _this3 = this;\n\n      this._templateManager.addDefaultTemplates({\n        content: new _function_template.FunctionTemplate(function (_ref3) {\n          var _ref3$model = _ref3.model,\n              model = void 0 === _ref3$model ? {} : _ref3$model,\n              container = _ref3.container;\n          var text = model.text,\n              icon = model.icon;\n\n          var _this3$option = _this3.option(),\n              iconPosition = _this3$option.iconPosition;\n\n          var $icon = (0, _icon.getImageContainer)(icon);\n          var $textContainer = text && (0, _renderer2.default)(\"<span>\").text(text).addClass(\"dx-button-text\");\n          var $container = (0, _renderer2.default)(container);\n          $container.append($textContainer);\n\n          if (\"left\" === iconPosition) {\n            $container.prepend($icon);\n          } else {\n            $icon.addClass(\"dx-icon-right\");\n            $container.append($icon);\n          }\n        })\n      });\n\n      _get(_getPrototypeOf(Button.prototype), \"_initTemplates\", this).call(this);\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function (args) {\n      var name = args.name,\n          previousValue = args.previousValue;\n\n      switch (name) {\n        case \"onClick\":\n          this._updateClick();\n\n          break;\n\n        case \"icon\":\n        case \"text\":\n          this._updateContent();\n\n          this._updateAriaLabel();\n\n          break;\n\n        case \"type\":\n          this._updateType(previousValue);\n\n          this._updateContent();\n\n          break;\n\n        case \"_templateData\":\n          break;\n\n        case \"template\":\n        case \"iconPosition\":\n          this._updateContent();\n\n          break;\n\n        case \"stylingMode\":\n          this._updateStylingMode();\n\n          break;\n\n        case \"useSubmitBehavior\":\n          this._updateSubmitInput();\n\n          break;\n\n        case \"useInkRipple\":\n          this._invalidate();\n\n          break;\n\n        default:\n          _get(_getPrototypeOf(Button.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }, {\n    key: \"_renderClick\",\n    value: function () {\n      var _this4 = this;\n\n      var $el = this.$element();\n\n      _short.dxClick.off($el, {\n        namespace: this.NAME\n      });\n\n      _short.dxClick.on($el, function (event) {\n        return _this4._executeClickAction(event);\n      }, {\n        namespace: this.NAME\n      });\n\n      this._updateClick();\n    }\n  }, {\n    key: \"_renderInkRipple\",\n    value: function () {\n      var _this5 = this;\n\n      var _this$option3 = this.option(),\n          text = _this$option3.text,\n          icon = _this$option3.icon,\n          type = _this$option3.type,\n          useInkRipple = _this$option3.useInkRipple;\n\n      if (useInkRipple) {\n        var isOnlyIconButton = !text && icon || \"back\" === type;\n\n        var _inkRipple = _utils2.default.render(isOnlyIconButton ? {\n          waveSizeCoefficient: 1,\n          useHoldAnimation: false,\n          isCentered: true\n        } : {});\n\n        var changeWaveVisibility = function (event, visible) {\n          var _this5$option = _this5.option(),\n              activeStateEnabled = _this5$option.activeStateEnabled,\n              useInkRipple = _this5$option.useInkRipple;\n\n          if (useInkRipple && activeStateEnabled && !_this5._disposed) {\n            var config = {\n              element: _this5._$content(),\n              event: event\n            };\n            visible ? _inkRipple.showWave(config) : _inkRipple.hideWave(config);\n          }\n        };\n\n        this._attachActiveEvents(function (_ref4) {\n          var event = _ref4.event;\n          return changeWaveVisibility(event, true);\n        }, function (_ref5) {\n          var event = _ref5.event;\n          return changeWaveVisibility(event);\n        });\n      }\n    }\n  }, {\n    key: \"_renderStylingMode\",\n    value: function () {\n      var $element = this.$element();\n\n      var _this$option4 = this.option(),\n          stylingMode = _this$option4.stylingMode;\n\n      if ([\"contained\", \"text\", \"outlined\"].indexOf(stylingMode) === -1) {\n        stylingMode = this._getDefaultOptions().stylingMode;\n      }\n\n      $element.addClass(\"dx-button-mode-\".concat(stylingMode));\n    }\n  }, {\n    key: \"_renderSubmitInput\",\n    value: function () {\n      var _this$option5 = this.option(),\n          useSubmitBehavior = _this$option5.useSubmitBehavior;\n\n      if (useSubmitBehavior) {\n        var submitAction = this._getSubmitAction();\n\n        var $content = this._$content();\n\n        (0, _renderer2.default)(\"<input>\").attr(\"type\", \"submit\").attr(\"tabindex\", -1).addClass(\"dx-button-submit-input\").appendTo($content);\n\n        _short.click.on(this._$submitInput(), function (event) {\n          return submitAction({\n            event: event\n          });\n        });\n      }\n    }\n  }, {\n    key: \"_renderType\",\n    value: function () {\n      var _this$option6 = this.option(),\n          type = _this$option6.type;\n\n      var $element = this.$element();\n      type && $element.addClass(\"dx-button-\".concat(type));\n    }\n  }, {\n    key: \"_submitInput\",\n    value: function () {\n      return this._$submitInput().get(0);\n    }\n  }, {\n    key: \"_supportedKeys\",\n    value: function () {\n      var _this6 = this;\n\n      var click = function (e) {\n        e.preventDefault();\n\n        _this6._executeClickAction(e);\n      };\n\n      return (0, _extend.extend)(_get(_getPrototypeOf(Button.prototype), \"_supportedKeys\", this).call(this), {\n        space: click,\n        enter: click\n      });\n    }\n  }, {\n    key: \"_updateAriaLabel\",\n    value: function () {\n      var ariaTarget = this._getAriaTarget();\n\n      var _this$option7 = this.option(),\n          icon = _this$option7.icon,\n          text = _this$option7.text;\n\n      if (!text) {\n        if (\"image\" === (0, _icon.getImageSourceType)(icon)) {\n          icon = icon.indexOf(\"base64\") === -1 ? icon.replace(/.+\\/([^.]+)\\..+$/, \"$1\") : \"Base64\";\n        }\n\n        text = icon || \"\";\n      }\n\n      ariaTarget.attr(\"aria-label\", text || null);\n    }\n  }, {\n    key: \"_updateClick\",\n    value: function () {\n      var _this7 = this;\n\n      this._clickAction = this._createActionByOption(\"onClick\", {\n        excludeValidators: [\"readOnly\"],\n        afterExecute: function () {\n          var _this7$option = _this7.option(),\n              useSubmitBehavior = _this7$option.useSubmitBehavior;\n\n          useSubmitBehavior && setTimeout(function () {\n            return _this7._submitInput().click();\n          });\n        }\n      });\n    }\n  }, {\n    key: \"_updateContent\",\n    value: function () {\n      var $element = this.$element();\n\n      var $content = this._$content();\n\n      var data = this._getContentData();\n\n      var _this$option8 = this.option(),\n          template = _this$option8.template,\n          iconPosition = _this$option8.iconPosition;\n\n      var icon = data.icon,\n          text = data.text;\n      $content.length ? $content.empty() : $content = (0, _renderer2.default)(\"<div>\").addClass(\"dx-button-content\").appendTo($element);\n      $element.toggleClass(\"dx-button-has-icon\", !!icon).toggleClass(\"dx-button-icon-right\", !!icon && \"left\" !== iconPosition).toggleClass(\"dx-button-has-text\", !!text);\n      var $template = (0, _renderer2.default)(this._getTemplateByOption(\"template\").render({\n        model: data,\n        container: (0, _dom.getPublicElement)($content),\n        transclude: this._templateManager.anonymousTemplateName === template\n      }));\n\n      if ($template.hasClass(\"dx-template-wrapper\")) {\n        $template.addClass(\"dx-button-content\");\n        $content.replaceWith($template);\n      }\n\n      this._updateSubmitInput();\n    }\n  }, {\n    key: \"_updateSubmitInput\",\n    value: function () {\n      var _this$option9 = this.option(),\n          useSubmitBehavior = _this$option9.useSubmitBehavior;\n\n      var $submitInput = this._$submitInput();\n\n      if (!useSubmitBehavior && $submitInput.length) {\n        $submitInput.remove();\n      } else {\n        if (useSubmitBehavior && !$submitInput.length) {\n          this._renderSubmitInput();\n        }\n      }\n    }\n  }, {\n    key: \"_updateStylingMode\",\n    value: function () {\n      var $element = this.$element();\n      [\"contained\", \"text\", \"outlined\"].map(function (mode) {\n        return \"dx-button-mode-\".concat(mode);\n      }).forEach($element.removeClass.bind($element));\n\n      this._renderStylingMode();\n    }\n  }, {\n    key: \"_updateType\",\n    value: function (previous) {\n      var $element = this.$element();\n      [previous, \"back\", \"danger\", \"default\", \"normal\", \"success\"].map(function (type) {\n        return \"dx-button-\".concat(type);\n      }).forEach($element.removeClass.bind($element));\n\n      this._renderType();\n    }\n  }, {\n    key: \"_validationGroupConfig\",\n    get: function () {\n      return _validation_engine2.default.getGroupConfig(this._findGroup());\n    }\n  }]);\n\n  return Button;\n}(_ui2.default);\n\n(0, _component_registrator2.default)(\"dxButton\", Button);\nmodule.exports = Button;\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}