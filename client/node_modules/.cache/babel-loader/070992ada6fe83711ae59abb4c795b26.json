{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.focus.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _uiGrid_core = require(\"./ui.grid_core.modules\");\n\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _uiGrid_core3 = require(\"./ui.grid_core.utils\");\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar ROW_FOCUSED_CLASS = \"dx-row-focused\";\nvar FOCUSED_ROW_SELECTOR = \".dx-row.\" + ROW_FOCUSED_CLASS;\nvar TABLE_POSTFIX_CLASS = \"table\";\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nexports.FocusController = _uiGrid_core2.default.ViewController.inherit(function () {\n  return {\n    init: function () {\n      this._dataController = this.getController(\"data\");\n      this._keyboardController = this.getController(\"keyboardNavigation\");\n      this.component._optionsByReference.focusedRowKey = true;\n    },\n    optionChanged: function (args) {\n      if (\"focusedRowIndex\" === args.name) {\n        var focusedRowKey = this.option(\"focusedRowKey\");\n\n        this._focusRowByIndex(args.value);\n\n        this._triggerFocusedRowChangedIfNeed(focusedRowKey, args.value);\n\n        args.handled = true;\n      } else {\n        if (\"focusedRowKey\" === args.name) {\n          var focusedRowIndex = this.option(\"focusedRowIndex\");\n\n          this._focusRowByKey(args.value);\n\n          this._triggerFocusedRowChangedIfNeed(args.value, focusedRowIndex);\n\n          args.handled = true;\n        } else {\n          if (\"focusedColumnIndex\" === args.name) {\n            args.handled = true;\n          } else {\n            if (\"focusedRowEnabled\" === args.name) {\n              args.handled = true;\n            } else {\n              if (\"autoNavigateToFocusedRow\" === args.name) {\n                args.handled = true;\n              } else {\n                this.callBase(args);\n              }\n            }\n          }\n        }\n      }\n    },\n    _triggerFocusedRowChangedIfNeed: function (focusedRowKey, focusedRowIndex) {\n      var focusedRowIndexByKey = this.getFocusedRowIndexByKey(focusedRowKey);\n\n      if (focusedRowIndex === focusedRowIndexByKey) {\n        var rowIndex = this._dataController.getRowIndexByKey(focusedRowKey);\n\n        if (rowIndex >= 0) {\n          var $rowElement = (0, _renderer2.default)(this.getView(\"rowsView\").getRowElement(rowIndex));\n\n          this.getController(\"keyboardNavigation\")._fireFocusedRowChanged($rowElement, focusedRowIndex);\n        }\n      }\n    },\n    isAutoNavigateToFocusedRow: function () {\n      return \"infinite\" !== this.option(\"scrolling.mode\") && this.option(\"autoNavigateToFocusedRow\");\n    },\n    _focusRowByIndex: function (index) {\n      if (!this.option(\"focusedRowEnabled\")) {\n        return;\n      }\n\n      index = void 0 !== index ? index : this.option(\"focusedRowIndex\");\n\n      if (index < 0) {\n        if (this.isAutoNavigateToFocusedRow()) {\n          this._resetFocusedRow();\n        }\n      } else {\n        this._focusRowByIndexCore(index);\n      }\n    },\n    _focusRowByIndexCore: function (index) {\n      var _this = this;\n\n      var dataController = this.getController(\"data\");\n      var pageSize = dataController.pageSize();\n\n      var setKeyByIndex = function () {\n        if (_this._isValidFocusedRowIndex(index)) {\n          var visibleIndex = index - dataController.getRowIndexOffset();\n\n          var lastItemIndex = dataController._getLastItemIndex();\n\n          var rowIndex = Math.min(visibleIndex, lastItemIndex);\n          var focusedRowKey = dataController.getKeyByRowIndex(rowIndex);\n\n          if (void 0 !== focusedRowKey && !_this.isRowFocused(focusedRowKey)) {\n            _this.option(\"focusedRowKey\", focusedRowKey);\n          }\n        }\n      };\n\n      if (pageSize >= 0) {\n        if (!this._isLocalRowIndex(index)) {\n          var pageIndex = Math.floor(index / dataController.pageSize());\n          (0, _deferred.when)(dataController.pageIndex(pageIndex), dataController.waitReady()).done(function () {\n            setKeyByIndex();\n          });\n        } else {\n          setKeyByIndex();\n        }\n      }\n    },\n    _isLocalRowIndex: function (index) {\n      var dataController = this.getController(\"data\");\n\n      var isVirtualScrolling = this.getController(\"keyboardNavigation\")._isVirtualScrolling();\n\n      if (isVirtualScrolling) {\n        var pageIndex = Math.floor(index / dataController.pageSize());\n        var virtualItems = dataController.virtualItemsCount();\n        var virtualItemsBegin = virtualItems ? virtualItems.begin : -1;\n        var visibleRowsCount = dataController.getVisibleRows().length + dataController.getRowIndexOffset();\n        var visiblePagesCount = Math.ceil(visibleRowsCount / dataController.pageSize());\n        return virtualItemsBegin <= index && visiblePagesCount > pageIndex;\n      }\n\n      return true;\n    },\n    _setFocusedRowKeyByIndex: function (index) {\n      var dataController = this.getController(\"data\");\n\n      if (this._isValidFocusedRowIndex(index)) {\n        var rowIndex = Math.min(index - dataController.getRowIndexOffset(), dataController.items().length - 1);\n        var focusedRowKey = dataController.getKeyByRowIndex(rowIndex);\n\n        if (void 0 !== focusedRowKey && !this.isRowFocused(focusedRowKey)) {\n          this.option(\"focusedRowKey\", focusedRowKey);\n        }\n      }\n    },\n    _focusRowByKey: function (key) {\n      if (void 0 === key) {\n        this._resetFocusedRow();\n      } else {\n        this._navigateToRow(key, true);\n      }\n    },\n    _resetFocusedRow: function () {\n      if (void 0 === this.option(\"focusedRowKey\") && this.option(\"focusedRowIndex\") < 0) {\n        return;\n      }\n\n      var keyboardController = this.getController(\"keyboardNavigation\");\n      this.option(\"focusedRowKey\", void 0);\n      keyboardController.setFocusedRowIndex(-1);\n      this.option(\"focusedRowIndex\", -1);\n      this.getController(\"data\").updateItems({\n        changeType: \"updateFocusedRow\",\n        focusedRowKey: void 0\n      });\n\n      keyboardController._fireFocusedRowChanged(void 0, -1);\n    },\n    _isValidFocusedRowIndex: function (rowIndex) {\n      var dataController = this.getController(\"data\");\n      var row = dataController.getVisibleRows()[rowIndex];\n      return !row || \"data\" === row.rowType || \"group\" === row.rowType;\n    },\n    publicMethods: function () {\n      return [\"navigateToRow\", \"isRowFocused\"];\n    },\n    navigateToRow: function (key) {\n      if (!this.isAutoNavigateToFocusedRow()) {\n        this.option(\"focusedRowIndex\", -1);\n      }\n\n      this._navigateToRow(key);\n    },\n    _navigateToRow: function (key, needFocusRow) {\n      var that = this;\n      var dataController = that.getController(\"data\");\n      var isAutoNavigate = that.isAutoNavigateToFocusedRow();\n      var d = new _deferred.Deferred();\n\n      if (void 0 === key || !dataController.dataSource()) {\n        return d.reject().promise();\n      }\n\n      var rowIndexByKey = that.getFocusedRowIndexByKey(key);\n      var isPaginate = dataController.getDataSource().paginate();\n\n      if (!isAutoNavigate && needFocusRow || !isPaginate || rowIndexByKey >= 0) {\n        that._navigateTo(key, d, needFocusRow);\n      } else {\n        dataController.getPageIndexByKey(key).done(function (pageIndex) {\n          if (pageIndex < 0) {\n            d.resolve(-1);\n            return;\n          }\n\n          if (pageIndex === dataController.pageIndex()) {\n            dataController.reload().done(function () {\n              if (that.isRowFocused(key)) {\n                d.resolve(that.getFocusedRowIndexByKey(key));\n              } else {\n                that._navigateTo(key, d, needFocusRow);\n              }\n            }).fail(d.reject);\n          } else {\n            dataController.pageIndex(pageIndex).done(function () {\n              that._navigateTo(key, d, needFocusRow);\n            }).fail(d.reject);\n          }\n        }).fail(d.reject);\n      }\n\n      return d.promise();\n    },\n    _navigateTo: function (key, deferred, needFocusRow) {\n      var visibleRowIndex = this.getController(\"data\").getRowIndexByKey(key);\n      var isVirtualRowRenderingMode = \"virtual\" === this.option(\"scrolling.rowRenderingMode\");\n      var isAutoNavigate = this.isAutoNavigateToFocusedRow();\n\n      if (isAutoNavigate && isVirtualRowRenderingMode && visibleRowIndex < 0) {\n        this._navigateToVirtualRow(key, deferred, needFocusRow);\n      } else {\n        this._navigateToVisibleRow(key, deferred, needFocusRow);\n      }\n    },\n    _navigateToVisibleRow: function (key, deferred, needFocusRow) {\n      if (needFocusRow) {\n        this._triggerUpdateFocusedRow(key, deferred);\n      } else {\n        this.getView(\"rowsView\").scrollToRowElement(key);\n      }\n    },\n    _navigateToVirtualRow: function (key, deferred, needFocusRow) {\n      var that = this;\n      var dataController = this.getController(\"data\");\n      var rowsScrollController = dataController._rowsScrollController;\n      var rowIndex = (0, _uiGrid_core3.getIndexByKey)(key, dataController.items(true));\n      var scrollable = that.getView(\"rowsView\").getScrollable();\n\n      if (rowsScrollController && scrollable && rowIndex >= 0) {\n        var focusedRowIndex = rowIndex + dataController.getRowIndexOffset() - dataController.getRowIndexDelta();\n        var offset = rowsScrollController.getItemOffset(focusedRowIndex);\n\n        if (needFocusRow) {\n          var triggerUpdateFocusedRow = function triggerUpdateFocusedRow() {\n            that.component.off(\"contentReady\", triggerUpdateFocusedRow);\n\n            that._triggerUpdateFocusedRow(key, deferred);\n          };\n\n          that.component.on(\"contentReady\", triggerUpdateFocusedRow);\n        }\n\n        scrollable.scrollTo({\n          y: offset\n        });\n      }\n    },\n    _triggerUpdateFocusedRow: function (key, deferred) {\n      var dataController = this.getController(\"data\");\n      var focusedRowIndex = this.getFocusedRowIndexByKey(key);\n\n      if (this._isValidFocusedRowIndex(focusedRowIndex)) {\n        if (this.option(\"focusedRowEnabled\")) {\n          dataController.updateItems({\n            changeType: \"updateFocusedRow\",\n            focusedRowKey: key\n          });\n        } else {\n          this.getView(\"rowsView\").scrollToRowElement(key);\n        }\n\n        this.getController(\"keyboardNavigation\").setFocusedRowIndex(focusedRowIndex);\n        deferred && deferred.resolve(focusedRowIndex);\n      } else {\n        deferred && deferred.resolve(-1);\n      }\n    },\n    getFocusedRowIndexByKey: function (key) {\n      var dataController = this.getController(\"data\");\n      var rowIndex = dataController.getRowIndexByKey(key);\n      return rowIndex >= 0 ? rowIndex + dataController.getRowIndexOffset() : -1;\n    },\n    _focusRowByKeyOrIndex: function () {\n      var _this2 = this;\n\n      var focusedRowKey = this.option(\"focusedRowKey\");\n      var currentFocusedRowIndex = this.option(\"focusedRowIndex\");\n      var keyboardController = this.getController(\"keyboardNavigation\");\n      var dataController = this.getController(\"data\");\n\n      if (void 0 !== focusedRowKey) {\n        var visibleRowIndex = dataController.getRowIndexByKey(focusedRowKey);\n\n        if (visibleRowIndex >= 0) {\n          if (keyboardController._isVirtualScrolling()) {\n            currentFocusedRowIndex = visibleRowIndex + dataController.getRowIndexOffset();\n          }\n\n          keyboardController.setFocusedRowIndex(currentFocusedRowIndex);\n\n          this._triggerUpdateFocusedRow(focusedRowKey);\n        } else {\n          this._navigateToRow(focusedRowKey, true).done(function (focusedRowIndex) {\n            if (currentFocusedRowIndex >= 0 && focusedRowIndex < 0) {\n              _this2._focusRowByIndex();\n            }\n          });\n        }\n      } else {\n        if (currentFocusedRowIndex >= 0) {\n          this.getController(\"focus\")._focusRowByIndex(currentFocusedRowIndex);\n        }\n      }\n    },\n    isRowFocused: function (key) {\n      var focusedRowKey = this.option(\"focusedRowKey\");\n\n      if (void 0 !== focusedRowKey) {\n        return (0, _common.equalByValue)(key, this.option(\"focusedRowKey\"));\n      }\n    },\n    updateFocusedRow: function (change) {\n      var that = this;\n\n      var focusedRowIndex = that._dataController.getRowIndexByKey(change.focusedRowKey);\n\n      var rowsView = that.getView(\"rowsView\");\n      var $tableElement;\n      (0, _iterator.each)(rowsView.getTableElements(), function (index, element) {\n        var isMainTable = 0 === index;\n        $tableElement = (0, _renderer2.default)(element);\n\n        that._clearPreviousFocusedRow($tableElement, focusedRowIndex);\n\n        that._prepareFocusedRow({\n          changedItem: change.items[focusedRowIndex],\n          $tableElement: $tableElement,\n          focusedRowIndex: focusedRowIndex,\n          isMainTable: isMainTable\n        });\n      });\n    },\n    _clearPreviousFocusedRow: function ($tableElement, focusedRowIndex) {\n      var _this3 = this;\n\n      var isNotMasterDetailFocusedRow = function (_, focusedRow) {\n        var $focusedRowTable = (0, _renderer2.default)(focusedRow).closest(\".\".concat(_this3.addWidgetPrefix(TABLE_POSTFIX_CLASS)));\n        return $tableElement.is($focusedRowTable);\n      };\n\n      var $prevRowFocusedElement = $tableElement.find(FOCUSED_ROW_SELECTOR).filter(isNotMasterDetailFocusedRow);\n      $prevRowFocusedElement.removeClass(ROW_FOCUSED_CLASS).removeClass(CELL_FOCUS_DISABLED_CLASS).removeAttr(\"tabindex\");\n      $prevRowFocusedElement.children(\"td\").removeAttr(\"tabindex\");\n\n      if (0 !== focusedRowIndex) {\n        var $firstRow = (0, _renderer2.default)(this.getView(\"rowsView\").getRowElement(0));\n        $firstRow.removeClass(CELL_FOCUS_DISABLED_CLASS).removeAttr(\"tabIndex\");\n      }\n    },\n    _prepareFocusedRow: function (options) {\n      var $row;\n      var changedItem = options.changedItem;\n\n      if (changedItem && (\"data\" === changedItem.rowType || \"group\" === changedItem.rowType)) {\n        var focusedRowIndex = options.focusedRowIndex;\n        var $tableElement = options.$tableElement;\n        var isMainTable = options.isMainTable;\n        var tabIndex = this.option(\"tabindex\") || 0;\n        var rowsView = this.getView(\"rowsView\");\n        $row = (0, _renderer2.default)(rowsView._getRowElements($tableElement).eq(focusedRowIndex));\n        $row.addClass(ROW_FOCUSED_CLASS).attr(\"tabindex\", tabIndex);\n\n        if (isMainTable) {\n          rowsView.scrollToElementVertically($row);\n        }\n      }\n\n      return $row;\n    }\n  };\n}());\nmodule.exports = {\n  defaultOptions: function () {\n    return {\n      focusedRowEnabled: false,\n      autoNavigateToFocusedRow: true,\n      focusedRowKey: void 0,\n      focusedRowIndex: -1,\n      focusedColumnIndex: -1\n    };\n  },\n  controllers: {\n    focus: exports.FocusController\n  },\n  extenders: {\n    controllers: {\n      keyboardNavigation: {\n        init: function () {\n          var rowIndex = this.option(\"focusedRowIndex\");\n          var columnIndex = this.option(\"focusedColumnIndex\");\n          this.createAction(\"onFocusedRowChanging\", {\n            excludeValidators: [\"disabled\", \"readOnly\"]\n          });\n          this.createAction(\"onFocusedRowChanged\", {\n            excludeValidators: [\"disabled\", \"readOnly\"]\n          });\n          this.createAction(\"onFocusedCellChanging\", {\n            excludeValidators: [\"disabled\", \"readOnly\"]\n          });\n          this.createAction(\"onFocusedCellChanged\", {\n            excludeValidators: [\"disabled\", \"readOnly\"]\n          });\n          this.callBase();\n          this.setRowFocusType();\n          this._focusedCellPosition = {};\n\n          if ((0, _type.isDefined)(rowIndex)) {\n            this._focusedCellPosition.rowIndex = this.option(\"focusedRowIndex\");\n          }\n\n          if ((0, _type.isDefined)(columnIndex)) {\n            this._focusedCellPosition.columnIndex = this.option(\"focusedColumnIndex\");\n          }\n        },\n        setFocusedRowIndex: function (rowIndex) {\n          this.callBase(rowIndex);\n          var visibleRow = this.getController(\"data\").getVisibleRows()[rowIndex];\n\n          if (!visibleRow || !visibleRow.isNewRow) {\n            this.option(\"focusedRowIndex\", rowIndex);\n          }\n        },\n        setFocusedColumnIndex: function (columnIndex) {\n          this.callBase(columnIndex);\n          this.option(\"focusedColumnIndex\", columnIndex);\n        },\n        _escapeKeyHandler: function (eventArgs, isEditing) {\n          if (isEditing || !this.option(\"focusedRowEnabled\")) {\n            this.callBase(eventArgs, isEditing);\n            return;\n          }\n\n          if (this.isCellFocusType()) {\n            this.setRowFocusType();\n\n            this._focus(this._getCellElementFromTarget(eventArgs.originalEvent.target), true);\n          }\n        },\n        _updateFocusedCellPosition: function ($cell, direction) {\n          var prevRowIndex = this.option(\"focusedRowIndex\");\n          var prevColumnIndex = this.option(\"focusedColumnIndex\");\n          var position = this.callBase($cell, direction);\n\n          if (position && position.columnIndex >= 0) {\n            this._fireFocusedCellChanged($cell, prevColumnIndex, prevRowIndex);\n          }\n        }\n      },\n      editorFactory: {\n        renderFocusOverlay: function ($element, hideBorder) {\n          var keyboardController = this.getController(\"keyboardNavigation\");\n          var focusedRowEnabled = this.option(\"focusedRowEnabled\");\n          var editingController = this.getController(\"editing\");\n\n          var isRowElement = \"row\" === keyboardController._getElementType($element);\n\n          var $cell;\n\n          if (!focusedRowEnabled || !keyboardController.isRowFocusType() || editingController.isEditing()) {\n            this.callBase($element, hideBorder);\n          } else {\n            if (focusedRowEnabled) {\n              if (isRowElement && !$element.hasClass(ROW_FOCUSED_CLASS)) {\n                $cell = keyboardController.getFirstValidCellInRow($element);\n                keyboardController.focus($cell);\n              }\n            }\n          }\n        }\n      },\n      columns: {\n        getSortDataSourceParameters: function (_, sortByKey) {\n          var _this4 = this;\n\n          var result = this.callBase.apply(this, arguments);\n          var dataController = this.getController(\"data\");\n          var dataSource = dataController._dataSource;\n          var store = dataController.store();\n          var key = store && store.key();\n          var remoteOperations = dataSource && dataSource.remoteOperations() || {};\n          var isLocalOperations = Object.keys(remoteOperations).every(function (operationName) {\n            return !remoteOperations[operationName];\n          });\n\n          if (key && (this.option(\"focusedRowEnabled\") && false !== this.getController(\"focus\").isAutoNavigateToFocusedRow() || sortByKey)) {\n            key = Array.isArray(key) ? key : [key];\n            var notSortedKeys = key.filter(function (key) {\n              return !_this4.columnOption(key, \"sortOrder\");\n            });\n\n            if (notSortedKeys.length) {\n              result = result || [];\n\n              if (isLocalOperations) {\n                result.push({\n                  selector: dataSource.getDataIndexGetter(),\n                  desc: false\n                });\n              } else {\n                notSortedKeys.forEach(function (notSortedKey) {\n                  return result.push({\n                    selector: notSortedKey,\n                    desc: false\n                  });\n                });\n              }\n            }\n          }\n\n          return result;\n        }\n      },\n      data: {\n        _applyChange: function (change) {\n          if (change && \"updateFocusedRow\" === change.changeType) {\n            return;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _fireChanged: function (e) {\n          this.callBase(e);\n\n          if (this.option(\"focusedRowEnabled\") && this._dataSource) {\n            var isPartialUpdate = \"update\" === e.changeType && e.repaintChangesOnly;\n            var isPartialUpdateWithDeleting = isPartialUpdate && e.changeTypes && e.changeTypes.indexOf(\"remove\") >= 0;\n\n            if (\"refresh\" === e.changeType && e.items.length || isPartialUpdateWithDeleting) {\n              this.processUpdateFocusedRow();\n            } else {\n              if (\"append\" === e.changeType || \"prepend\" === e.changeType) {\n                this._updatePageIndexes();\n              }\n            }\n          }\n        },\n        _updatePageIndexes: function () {\n          var prevRenderingPageIndex = this._lastRenderingPageIndex || 0;\n          var renderingPageIndex = this._rowsScrollController ? this._rowsScrollController.pageIndex() : 0;\n          this._lastPageIndex = this.pageIndex();\n          this._lastRenderingPageIndex = renderingPageIndex;\n          this._isPagingByRendering = renderingPageIndex !== prevRenderingPageIndex;\n        },\n        isPagingByRendering: function () {\n          return this._isPagingByRendering;\n        },\n        processUpdateFocusedRow: function () {\n          var prevPageIndex = this._lastPageIndex;\n\n          this._updatePageIndexes();\n\n          var pageIndex = this._lastPageIndex;\n          var paging = void 0 !== prevPageIndex && prevPageIndex !== pageIndex;\n          var pagingByRendering = this.isPagingByRendering();\n          var operationTypes = this._dataSource.operationTypes() || {};\n          var focusController = this.getController(\"focus\");\n          var reload = operationTypes.reload;\n          var keyboardController = this.getController(\"keyboardNavigation\");\n\n          var isVirtualScrolling = keyboardController._isVirtualScrolling();\n\n          var focusedRowKey = this.option(\"focusedRowKey\");\n          var isAutoNavigate = focusController.isAutoNavigateToFocusedRow();\n\n          if (reload && void 0 !== focusedRowKey) {\n            focusController._navigateToRow(focusedRowKey, true).done(function (focusedRowIndex) {\n              if (focusedRowIndex < 0) {\n                focusController._focusRowByIndex();\n              }\n            });\n          } else {\n            if (paging) {\n              if (isAutoNavigate) {\n                var rowIndexByKey = this.getRowIndexByKey(focusedRowKey);\n                var isValidRowIndexByKey = rowIndexByKey >= 0;\n                var focusedRowIndex = this.option(\"focusedRowIndex\");\n                var needFocusRowByIndex = focusedRowIndex >= 0 && (focusedRowIndex === rowIndexByKey || !isValidRowIndexByKey);\n\n                if (!isVirtualScrolling && needFocusRowByIndex) {\n                  focusController._focusRowByIndex();\n                }\n              } else {\n                if (!isVirtualScrolling && this.getRowIndexByKey(focusedRowKey) < 0) {\n                  this.option(\"focusedRowIndex\", -1);\n                }\n              }\n            } else {\n              if (!pagingByRendering) {\n                focusController._focusRowByKeyOrIndex();\n              }\n            }\n          }\n        },\n        getPageIndexByKey: function (key) {\n          var that = this;\n          var d = new _deferred.Deferred();\n          that.getGlobalRowIndexByKey(key).done(function (globalIndex) {\n            d.resolve(globalIndex >= 0 ? Math.floor(globalIndex / that.pageSize()) : -1);\n          }).fail(d.reject);\n          return d.promise();\n        },\n        getGlobalRowIndexByKey: function (key) {\n          if (this._dataSource.group()) {\n            return this._calculateGlobalRowIndexByGroupedData(key);\n          }\n\n          return this._calculateGlobalRowIndexByFlatData(key);\n        },\n        _calculateGlobalRowIndexByFlatData: function (key, groupFilter, useGroup) {\n          var that = this;\n          var deferred = new _deferred.Deferred();\n          var dataSource = that._dataSource;\n\n          var filter = that._generateFilterByKey(key);\n\n          dataSource.load({\n            filter: that._concatWithCombinedFilter(filter),\n            skip: 0,\n            take: 1\n          }).done(function (data) {\n            if (data.length > 0) {\n              filter = that._generateOperationFilterByKey(key, data[0], useGroup);\n              dataSource.load({\n                filter: that._concatWithCombinedFilter(filter, groupFilter),\n                skip: 0,\n                take: 1,\n                requireTotalCount: true\n              }).done(function (_, extra) {\n                deferred.resolve(extra.totalCount);\n              });\n            } else {\n              deferred.resolve(-1);\n            }\n          });\n          return deferred.promise();\n        },\n        _concatWithCombinedFilter: function (filter, groupFilter) {\n          var combinedFilter = this.getCombinedFilter();\n          return (0, _uiGrid_core3.combineFilters)([filter, combinedFilter, groupFilter]);\n        },\n        _generateBooleanFilter: function (selector, value, sortInfo) {\n          var result;\n\n          if (false === value) {\n            result = [selector, \"=\", sortInfo.desc ? true : null];\n          } else {\n            if (true === value ? !sortInfo.desc : sortInfo.desc) {\n              result = [selector, \"<>\", value];\n            }\n          }\n\n          return result;\n        },\n        _generateOperationFilterByKey: function (key, rowData, useGroup) {\n          var that = this;\n          var dataSource = that._dataSource;\n\n          var filter = that._generateFilterByKey(key, \"<\");\n\n          var sort = that._columnsController.getSortDataSourceParameters(!dataSource.remoteOperations().filtering, true);\n\n          if (useGroup) {\n            var group = that._columnsController.getGroupDataSourceParameters(!dataSource.remoteOperations().filtering);\n\n            if (group) {\n              sort = sort ? group.concat(sort) : group;\n            }\n          }\n\n          if (sort) {\n            sort.slice().reverse().forEach(function (sortInfo) {\n              var selector = sortInfo.selector;\n              var getter;\n\n              if (\"function\" === typeof selector) {\n                getter = selector;\n              } else {\n                getter = that._columnsController.columnOption(selector, \"selector\");\n              }\n\n              var value = getter ? getter(rowData) : rowData[selector];\n              filter = [[selector, \"=\", value], \"and\", filter];\n\n              if (null === value || (0, _type.isBoolean)(value)) {\n                var booleanFilter = that._generateBooleanFilter(selector, value, sortInfo);\n\n                if (booleanFilter) {\n                  filter = [booleanFilter, \"or\", filter];\n                }\n              } else {\n                filter = [[selector, sortInfo.desc ? \">\" : \"<\", value], \"or\", filter];\n              }\n            });\n          }\n\n          return filter;\n        },\n        _generateFilterByKey: function (key, operation) {\n          var dataSourceKey = this._dataSource.key();\n\n          var filter = [];\n\n          if (!operation) {\n            operation = \"=\";\n          }\n\n          if (Array.isArray(dataSourceKey)) {\n            for (var i = 0; i < dataSourceKey.length; ++i) {\n              var keyPart = key[dataSourceKey[i]];\n\n              if (keyPart) {\n                if (filter.length > 0) {\n                  filter.push(\"and\");\n                }\n\n                filter.push([dataSourceKey[i], operation, keyPart]);\n              }\n            }\n          } else {\n            filter = [dataSourceKey, operation, key];\n          }\n\n          return filter;\n        },\n        _getLastItemIndex: function () {\n          return this.items(true).length - 1;\n        }\n      }\n    },\n    views: {\n      rowsView: {\n        _createRow: function (row) {\n          var $row = this.callBase(row);\n\n          if (this.option(\"focusedRowEnabled\") && row) {\n            if (this.getController(\"focus\").isRowFocused(row.key)) {\n              $row.addClass(ROW_FOCUSED_CLASS);\n            }\n          }\n\n          return $row;\n        },\n        _checkRowKeys: function (options) {\n          this.callBase.apply(this, arguments);\n\n          if (this.option(\"focusedRowEnabled\") && this.option(\"dataSource\")) {\n            var store = this._dataController.store();\n\n            if (store && !store.key()) {\n              this._dataController.fireError(\"E1042\", \"Row focusing\");\n            }\n          }\n        },\n        _update: function (change) {\n          if (\"updateFocusedRow\" === change.changeType) {\n            if (this.option(\"focusedRowEnabled\")) {\n              this.getController(\"focus\").updateFocusedRow(change);\n            }\n          } else {\n            this.callBase(change);\n          }\n        },\n        updateFocusElementTabIndex: function ($cellElements) {\n          if (this.option(\"focusedRowEnabled\")) {\n            this._setFocusedRowElementTabIndex();\n          } else {\n            this.callBase($cellElements);\n          }\n        },\n        _setFocusedRowElementTabIndex: function () {\n          var that = this;\n          var focusedRowKey = that.option(\"focusedRowKey\");\n          var tabIndex = that.option(\"tabIndex\") || 0;\n          var dataController = that._dataController;\n          var rowIndex = dataController.getRowIndexByKey(focusedRowKey);\n          var columnIndex = that.option(\"focusedColumnIndex\");\n\n          var $row = that._findRowElementForTabIndex();\n\n          that._scrollToFocusOnResize = that._scrollToFocusOnResize || function () {\n            that.scrollToElementVertically(that._findRowElementForTabIndex());\n            that.resizeCompleted.remove(that._scrollToFocusOnResize);\n          };\n\n          $row.attr(\"tabIndex\", tabIndex);\n\n          if (rowIndex >= 0) {\n            if (columnIndex < 0) {\n              columnIndex = 0;\n            }\n\n            rowIndex += dataController.getRowIndexOffset();\n            that.getController(\"keyboardNavigation\").setFocusedCellPosition(rowIndex, columnIndex);\n            var dataSource = dataController.dataSource();\n            var operationTypes = dataSource && dataSource.operationTypes();\n\n            if (operationTypes && !operationTypes.paging && !dataController.isPagingByRendering()) {\n              that.resizeCompleted.remove(that._scrollToFocusOnResize);\n              that.resizeCompleted.add(that._scrollToFocusOnResize);\n            }\n          }\n        },\n        _findRowElementForTabIndex: function () {\n          var focusedRowKey = this.option(\"focusedRowKey\");\n\n          var rowIndex = this._dataController.getRowIndexByKey(focusedRowKey);\n\n          return (0, _renderer2.default)(this.getRowElement(rowIndex >= 0 ? rowIndex : 0));\n        },\n        scrollToRowElement: function (key) {\n          var rowIndex = this.getController(\"data\").getRowIndexByKey(key);\n          var $row = (0, _renderer2.default)(this.getRow(rowIndex));\n          this.scrollToElementVertically($row);\n        },\n        scrollToElementVertically: function ($row) {\n          var scrollable = this.getScrollable();\n\n          if (scrollable) {\n            var position = scrollable.getScrollElementPosition($row, \"vertical\");\n            scrollable.scrollTo({\n              top: position\n            });\n          }\n        }\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}