{"ast":null,"code":"import { extend } from '@syncfusion/ej2-base';\nimport { ComboBox } from '@syncfusion/ej2-dropdowns';\nimport { Query, DataManager, DataUtil } from '@syncfusion/ej2-data';\nimport { isEditable, getComplexFieldID, getObject } from '../base/util';\n/**\n * `ComboBoxEditCell` is used to handle ComboBoxEdit cell type editing.\n * @hidden\n */\n\nvar ComboboxEditCell =\n/** @class */\nfunction () {\n  function ComboboxEditCell(parentObject) {\n    //constructor\n    this.parent = parentObject;\n  }\n\n  ComboboxEditCell.prototype.create = function (args) {\n    //create\n    var fieldName = getComplexFieldID(args.column.field);\n    return this.parent.createElement('input', {\n      className: 'e-field',\n      attrs: {\n        id: this.parent.element.id + fieldName,\n        name: fieldName,\n        type: 'text',\n        'e-mappinguid': args.column.uid\n      }\n    });\n  };\n\n  ComboboxEditCell.prototype.write = function (args) {\n    this.column = args.column;\n    var isInlineMode = this.parent.editSettings.mode !== 'Dialog';\n    this.obj = new ComboBox(extend({\n      dataSource: this.parent.dataSource instanceof DataManager ? this.parent.dataSource : new DataManager(this.parent.dataSource),\n      query: new Query().select(args.column.field),\n      fields: {\n        value: args.column.field\n      },\n      value: getObject(args.column.field, args.rowData),\n      enableRtl: this.parent.enableRtl,\n      actionComplete: this.finalValue.bind(this),\n      placeholder: isInlineMode ? '' : args.column.headerText,\n      floatLabelType: isInlineMode ? 'Never' : 'Always',\n      enabled: isEditable(args.column, args.requestType, args.element)\n    }, args.column.edit.params));\n    this.obj.appendTo(args.element);\n  };\n\n  ComboboxEditCell.prototype.read = function (inputEle) {\n    return inputEle.ej2_instances[0].value;\n  };\n\n  ComboboxEditCell.prototype.finalValue = function (val) {\n    val.result = DataUtil.distinct(val.result, this.obj.fields.value, true);\n\n    if (this.column.dataSource) {\n      this.column.dataSource.dataSource.json = val.result;\n    }\n  };\n\n  ComboboxEditCell.prototype.destroy = function () {\n    if (this.obj) {\n      this.obj.destroy();\n    }\n  };\n\n  return ComboboxEditCell;\n}();\n\nexport { ComboboxEditCell };","map":null,"metadata":{},"sourceType":"module"}