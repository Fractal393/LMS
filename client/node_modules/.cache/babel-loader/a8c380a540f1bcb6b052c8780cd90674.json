{"ast":null,"code":"import { isNullOrUndefined, getValue, setValue, isBlazor } from '@syncfusion/ej2-base';\nimport { Row } from '../models/row';\nimport { CellType } from '../base/enum';\nimport { Cell } from '../models/cell';\nimport { getUid } from '../base/util';\nimport { getForeignData } from '../../grid/base/util';\nimport * as events from '../base/constant';\n/**\n * RowModelGenerator is used to generate grid data rows.\n * @hidden\n */\n\nvar RowModelGenerator =\n/** @class */\nfunction () {\n  /**\n   * Constructor for header renderer module\n   */\n  function RowModelGenerator(parent) {\n    this.parent = parent;\n  }\n\n  RowModelGenerator.prototype.generateRows = function (data, args) {\n    var rows = [];\n    var startIndex = this.parent.enableVirtualization ? args.startIndex : 0;\n    startIndex = this.parent.enableInfiniteScrolling ? this.getInfiniteIndex(args) : startIndex;\n\n    for (var i = 0, len = Object.keys(data).length; i < len; i++, startIndex++) {\n      rows[i] = this.generateRow(data[i], startIndex);\n    }\n\n    return rows;\n  };\n\n  RowModelGenerator.prototype.ensureColumns = function () {\n    //TODO: generate dummy column for group, detail here;\n    var cols = [];\n\n    if (this.parent.detailTemplate || this.parent.childGrid) {\n      var args = {};\n      this.parent.notify(events.detailIndentCellInfo, args);\n      cols.push(this.generateCell(args, null, CellType.DetailExpand));\n    }\n\n    if (this.parent.isRowDragable()) {\n      cols.push(this.generateCell({}, null, CellType.RowDragIcon));\n    }\n\n    return cols;\n  };\n\n  RowModelGenerator.prototype.generateRow = function (data, index, cssClass, indent, pid, tIndex, parentUid) {\n    var options = {};\n    options.foreignKeyData = {};\n    var isServerRendered = 'isServerRendered';\n    options.uid = isBlazor() && this.parent[isServerRendered] ? this.parent.getRowUid('grid-row') : getUid('grid-row');\n    options.data = data;\n    options.index = index;\n    options.indent = indent;\n    options.tIndex = tIndex;\n    options.isDataRow = true;\n    options.parentGid = pid;\n    options.parentUid = parentUid;\n\n    if (this.parent.isPrinting) {\n      if (this.parent.hierarchyPrintMode === 'All') {\n        options.isExpand = true;\n      } else if (this.parent.hierarchyPrintMode === 'Expanded' && this.parent.expandedRows && this.parent.expandedRows[index]) {\n        options.isExpand = this.parent.expandedRows[index].isExpand;\n      }\n    }\n\n    options.cssClass = cssClass;\n    options.isAltRow = this.parent.enableAltRow ? index % 2 !== 0 : false;\n    options.isAltRow = this.parent.enableAltRow ? index % 2 !== 0 : false;\n\n    if (isBlazor() && this.parent.isServerRendered && this.parent.enableVirtualization && this.parent.selectionModule.checkBoxState) {\n      options.isSelected = this.parent.selectionModule.checkBoxState;\n\n      if (options.isSelected && this.parent.selectionModule.selectedRowIndexes.indexOf(index) === -1) {\n        this.parent.selectionModule.selectedRowIndexes.push(index);\n      }\n    } else {\n      options.isSelected = this.parent.getSelectedRowIndexes().indexOf(index) > -1;\n    }\n\n    this.refreshForeignKeyRow(options);\n    var cells = this.ensureColumns();\n    var row = new Row(options);\n    row.cells = cells.concat(this.generateCells(options));\n    return row;\n  };\n\n  RowModelGenerator.prototype.refreshForeignKeyRow = function (options) {\n    var foreignKeyColumns = this.parent.getForeignKeyColumns();\n\n    for (var i = 0; i < foreignKeyColumns.length; i++) {\n      setValue(foreignKeyColumns[i].field, getForeignData(foreignKeyColumns[i], options.data), options.foreignKeyData);\n    }\n  };\n\n  RowModelGenerator.prototype.generateCells = function (options) {\n    var dummies = this.parent.getColumns();\n    var tmp = [];\n\n    for (var i = 0; i < dummies.length; i++) {\n      tmp.push(this.generateCell(dummies[i], options.uid, isNullOrUndefined(dummies[i].commands) ? undefined : CellType.CommandColumn, null, i, options.foreignKeyData));\n    }\n\n    return tmp;\n  };\n\n  RowModelGenerator.prototype.generateCell = function (column, rowId, cellType, colSpan, oIndex, foreignKeyData) {\n    var opt = {\n      'visible': column.visible,\n      'isDataCell': !isNullOrUndefined(column.field || column.template),\n      'isTemplate': !isNullOrUndefined(column.template),\n      'rowID': rowId,\n      'column': column,\n      'cellType': !isNullOrUndefined(cellType) ? cellType : CellType.Data,\n      'colSpan': colSpan,\n      'commands': column.commands,\n      'isForeignKey': column.isForeignColumn && column.isForeignColumn(),\n      'foreignKeyData': column.isForeignColumn && column.isForeignColumn() && getValue(column.field, foreignKeyData)\n    };\n\n    if (opt.isDataCell || opt.column.type === 'checkbox' || opt.commands) {\n      opt.index = oIndex;\n    }\n\n    return new Cell(opt);\n  };\n\n  RowModelGenerator.prototype.refreshRows = function (input) {\n    for (var i = 0; i < input.length; i++) {\n      this.refreshForeignKeyRow(input[i]);\n      input[i].cells = this.generateCells(input[i]);\n    }\n\n    return input;\n  };\n\n  RowModelGenerator.prototype.getInfiniteIndex = function (args) {\n    return args.requestType === 'infiniteScroll' || args.requestType === 'delete' || args.action === 'add' ? args.startIndex : 0;\n  };\n\n  return RowModelGenerator;\n}();\n\nexport { RowModelGenerator };","map":null,"metadata":{},"sourceType":"module"}