{"ast":null,"code":"/**\n * `PdfNumber` class is used to perform number related primitive operations.\n * @private\n */\nvar PdfNumber =\n/** @class */\nfunction () {\n  /**\n   * Initializes a new instance of the `PdfNumber` class.\n   * @private\n   */\n  function PdfNumber(value) {\n    /**\n     * Sotres the `position`.\n     * @default -1\n     * @private\n     */\n    this.position5 = -1;\n    this.value = value;\n  }\n\n  Object.defineProperty(PdfNumber.prototype, \"intValue\", {\n    /**\n     * Gets or sets the `integer` value.\n     * @private\n     */\n    get: function () {\n      return this.value;\n    },\n    set: function (value) {\n      this.value = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfNumber.prototype, \"isInteger\", {\n    /**\n     * Gets or sets a value indicating whether this instance `is integer`.\n     * @private\n     */\n    get: function () {\n      return this.integer;\n    },\n    set: function (value) {\n      this.integer = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfNumber.prototype, \"status\", {\n    /**\n     * Gets or sets the `Status` of the specified object.\n     * @private\n     */\n    get: function () {\n      return this.status5;\n    },\n    set: function (value) {\n      this.status5 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfNumber.prototype, \"isSaving\", {\n    /**\n     * Gets or sets a value indicating whether this document `is saving` or not.\n     * @private\n     */\n    get: function () {\n      return this.isSaving5;\n    },\n    set: function (value) {\n      this.isSaving5 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfNumber.prototype, \"objectCollectionIndex\", {\n    /**\n     * Gets or sets the `index` value of the specified object.\n     * @private\n     */\n    get: function () {\n      return this.index5;\n    },\n    set: function (value) {\n      this.index5 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfNumber.prototype, \"position\", {\n    /**\n     * Gets or sets the `position` of the object.\n     * @private\n     */\n    get: function () {\n      return this.position5;\n    },\n    set: function (value) {\n      this.position5 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfNumber.prototype, \"clonedObject\", {\n    /**\n     * Returns `cloned object`.\n     * @private\n     */\n    get: function () {\n      var rValue = null;\n      return rValue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * `Saves the object`.\n   * @private\n   */\n\n  PdfNumber.prototype.save = function (writer) {\n    writer.write(this.intValue.toString()); //tostring(CultureInfo.InletiantCulture)\n  };\n  /**\n   * Creates a `copy of PdfNumber`.\n   * @private\n   */\n\n\n  PdfNumber.prototype.clone = function (crossTable) {\n    var newNumber = new PdfNumber(this.value);\n    return newNumber;\n  };\n  /**\n   * Converts a `float value to a string` using Adobe PDF rules.\n   * @private\n   */\n\n\n  PdfNumber.floatToString = function (number) {\n    // let tempString1 : string = number.toString();\n    // let tempString2 : string = tempString1.indexOf('.') != -1 ? tempString1.substring(0, tempString1.indexOf('.')) : tempString1;\n    var returnString = number.toFixed(2);\n\n    if (returnString === '0.00') {\n      returnString = '.00';\n    } // let prefixLength : number = (22 - tempString2.length) >= 0 ? (22 - tempString2.length) : 0;\n    // for (let index : number = 0; index < prefixLength; index++) {\n    //     returnString += '0';\n    // }\n    // returnString += tempString2 + '.00';\n    // returnString += (tempString3.length > 6) ? tempString3.substring(0,6) : tempString3;\n    // let suffixLength : number = (6 - tempString3.length) >= 0 ? (6 - tempString3.length) : 0;\n    // for (let index : number = 0; index < suffixLength; index++) {\n    //     returnString += '0';\n    // }\n\n\n    return returnString;\n  };\n  /**\n   * Determines the `minimum of the three values`.\n   * @private\n   */\n\n\n  PdfNumber.min = function (x, y, z) {\n    var r = Math.min(x, y);\n    return Math.min(z, r);\n  };\n\n  return PdfNumber;\n}();\n\nexport { PdfNumber };","map":null,"metadata":{},"sourceType":"module"}