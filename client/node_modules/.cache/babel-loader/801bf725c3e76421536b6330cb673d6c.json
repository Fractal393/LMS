{"ast":null,"code":"/**\n * Collision module.\n */\nimport { calculatePosition } from './position';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nvar parentDocument;\nvar targetContainer;\nexport function fit(element, viewPortElement, axis, position) {\n  if (viewPortElement === void 0) {\n    viewPortElement = null;\n  }\n\n  if (axis === void 0) {\n    axis = {\n      X: false,\n      Y: false\n    };\n  }\n\n  if (!axis.Y && !axis.X) {\n    return {\n      left: 0,\n      top: 0\n    };\n  }\n\n  var elemData = element.getBoundingClientRect();\n  targetContainer = viewPortElement;\n  parentDocument = element.ownerDocument;\n\n  if (!position) {\n    position = calculatePosition(element, 'left', 'top');\n  }\n\n  if (axis.X) {\n    var containerWidth = targetContainer ? getTargetContainerWidth() : getViewPortWidth();\n    var containerLeft = ContainerLeft();\n    var containerRight = ContainerRight();\n    var overLeft = containerLeft - position.left;\n    var overRight = position.left + elemData.width - containerRight;\n\n    if (elemData.width > containerWidth) {\n      if (overLeft > 0 && overRight <= 0) {\n        position.left = containerRight - elemData.width;\n      } else if (overRight > 0 && overLeft <= 0) {\n        position.left = containerLeft;\n      } else {\n        position.left = overLeft > overRight ? containerRight - elemData.width : containerLeft;\n      }\n    } else if (overLeft > 0) {\n      position.left += overLeft;\n    } else if (overRight > 0) {\n      position.left -= overRight;\n    }\n  }\n\n  if (axis.Y) {\n    var containerHeight = targetContainer ? getTargetContainerHeight() : getViewPortHeight();\n    var containerTop = ContainerTop();\n    var containerBottom = ContainerBottom();\n    var overTop = containerTop - position.top;\n    var overBottom = position.top + elemData.height - containerBottom;\n\n    if (elemData.height > containerHeight) {\n      if (overTop > 0 && overBottom <= 0) {\n        position.top = containerBottom - elemData.height;\n      } else if (overBottom > 0 && overTop <= 0) {\n        position.top = containerTop;\n      } else {\n        position.top = overTop > overBottom ? containerBottom - elemData.height : containerTop;\n      }\n    } else if (overTop > 0) {\n      position.top += overTop;\n    } else if (overBottom > 0) {\n      position.top -= overBottom;\n    }\n  }\n\n  return position;\n}\nexport function isCollide(element, viewPortElement, x, y) {\n  if (viewPortElement === void 0) {\n    viewPortElement = null;\n  }\n\n  var elemOffset = calculatePosition(element, 'left', 'top');\n\n  if (x) {\n    elemOffset.left = x;\n  }\n\n  if (y) {\n    elemOffset.top = y;\n  }\n\n  var data = [];\n  targetContainer = viewPortElement;\n  parentDocument = element.ownerDocument;\n  var elementRect = element.getBoundingClientRect();\n  var top = elemOffset.top;\n  var left = elemOffset.left;\n  var right = elemOffset.left + elementRect.width;\n  var bottom = elemOffset.top + elementRect.height;\n  var topData = '';\n  var leftData = '';\n  var yAxis = topCollideCheck(top, bottom);\n  var xAxis = leftCollideCheck(left, right);\n\n  if (yAxis.topSide) {\n    data.push('top');\n  }\n\n  if (xAxis.rightSide) {\n    data.push('right');\n  }\n\n  if (xAxis.leftSide) {\n    data.push('left');\n  }\n\n  if (yAxis.bottomSide) {\n    data.push('bottom');\n  }\n\n  return data;\n}\nexport function flip(element, target, offsetX, offsetY, positionX, positionY, viewPortElement, axis, fixedParent) {\n  if (viewPortElement === void 0) {\n    viewPortElement = null;\n  }\n\n  if (axis === void 0) {\n    axis = {\n      X: true,\n      Y: true\n    };\n  }\n\n  if (!target || !element || !positionX || !positionY || !axis.X && !axis.Y) {\n    return;\n  }\n\n  var tEdge = {\n    TL: null,\n    TR: null,\n    BL: null,\n    BR: null\n  };\n  var eEdge = {\n    TL: null,\n    TR: null,\n    BL: null,\n    BR: null\n  };\n  var elementRect = element.getBoundingClientRect();\n  var pos = {\n    posX: positionX,\n    posY: positionY,\n    offsetX: offsetX,\n    offsetY: offsetY,\n    position: {\n      left: 0,\n      top: 0\n    }\n  };\n  targetContainer = viewPortElement;\n  parentDocument = target.ownerDocument;\n  updateElementData(target, tEdge, pos, fixedParent, elementRect);\n  setPosition(eEdge, pos, elementRect);\n\n  if (axis.X) {\n    leftFlip(target, eEdge, tEdge, pos, elementRect, true);\n  }\n\n  if (axis.Y && tEdge.TL.top > -1) {\n    topFlip(target, eEdge, tEdge, pos, elementRect, true);\n  }\n\n  setPopup(element, pos, elementRect);\n}\n\nfunction setPopup(element, pos, elementRect) {\n  var left = 0;\n  var top = 0;\n\n  if (element.offsetParent != null && (getComputedStyle(element.offsetParent).position === 'absolute' || getComputedStyle(element.offsetParent).position === 'relative')) {\n    var data = calculatePosition(element.offsetParent, 'left', 'top', false, elementRect);\n    left = data.left;\n    top = data.top;\n  }\n\n  element.style.top = pos.position.top + pos.offsetY - top + 'px';\n  element.style.left = pos.position.left + pos.offsetX - left + 'px';\n}\n\nfunction updateElementData(target, edge, pos, fixedParent, elementRect) {\n  pos.position = calculatePosition(target, pos.posX, pos.posY, fixedParent, elementRect);\n  edge.TL = calculatePosition(target, 'left', 'top', fixedParent, elementRect);\n  edge.TR = calculatePosition(target, 'right', 'top', fixedParent, elementRect);\n  edge.BR = calculatePosition(target, 'left', 'bottom', fixedParent, elementRect);\n  edge.BL = calculatePosition(target, 'right', 'bottom', fixedParent, elementRect);\n}\n\nfunction setPosition(eStatus, pos, elementRect) {\n  eStatus.TL = {\n    top: pos.position.top + pos.offsetY,\n    left: pos.position.left + pos.offsetX\n  };\n  eStatus.TR = {\n    top: eStatus.TL.top,\n    left: eStatus.TL.left + elementRect.width\n  };\n  eStatus.BL = {\n    top: eStatus.TL.top + elementRect.height,\n    left: eStatus.TL.left\n  };\n  eStatus.BR = {\n    top: eStatus.TL.top + elementRect.height,\n    left: eStatus.TL.left + elementRect.width\n  };\n}\n\nfunction leftCollideCheck(left, right) {\n  var leftSide = false;\n  var rightSide = false;\n\n  if (left - getBodyScrollLeft() < ContainerLeft()) {\n    leftSide = true;\n  }\n\n  if (right > ContainerRight()) {\n    rightSide = true;\n  }\n\n  return {\n    leftSide: leftSide,\n    rightSide: rightSide\n  };\n}\n\nfunction leftFlip(target, edge, tEdge, pos, elementRect, deepCheck) {\n  var collideSide = leftCollideCheck(edge.TL.left, edge.TR.left);\n\n  if (tEdge.TL.left - getBodyScrollLeft() <= ContainerLeft()) {\n    collideSide.leftSide = false;\n  }\n\n  if (tEdge.TR.left >= ContainerRight()) {\n    collideSide.rightSide = false;\n  }\n\n  if (collideSide.leftSide && !collideSide.rightSide || !collideSide.leftSide && collideSide.rightSide) {\n    if (pos.posX === 'right') {\n      pos.posX = 'left';\n    } else {\n      pos.posX = 'right';\n    }\n\n    pos.offsetX = pos.offsetX + elementRect.width;\n    pos.offsetX = -1 * pos.offsetX;\n    pos.position = calculatePosition(target, pos.posX, pos.posY, false);\n    setPosition(edge, pos, elementRect);\n\n    if (deepCheck) {\n      leftFlip(target, edge, tEdge, pos, elementRect, false);\n    }\n  }\n}\n\nfunction topFlip(target, edge, tEdge, pos, elementRect, deepCheck) {\n  var collideSide = topCollideCheck(edge.TL.top, edge.BL.top);\n\n  if (tEdge.TL.top - getBodyScrollTop() <= ContainerTop()) {\n    collideSide.topSide = false;\n  }\n\n  if (tEdge.BL.top >= ContainerBottom()) {\n    collideSide.bottomSide = false;\n  }\n\n  if (collideSide.topSide && !collideSide.bottomSide || !collideSide.topSide && collideSide.bottomSide) {\n    if (pos.posY === 'top') {\n      pos.posY = 'bottom';\n    } else {\n      pos.posY = 'top';\n    }\n\n    pos.offsetY = pos.offsetY + elementRect.height;\n    pos.offsetY = -1 * pos.offsetY;\n    pos.position = calculatePosition(target, pos.posX, pos.posY, false, elementRect);\n    setPosition(edge, pos, elementRect);\n\n    if (deepCheck) {\n      topFlip(target, edge, tEdge, pos, elementRect, false);\n    }\n  }\n}\n\nfunction topCollideCheck(top, bottom) {\n  var topSide = false;\n  var bottomSide = false;\n\n  if (top - getBodyScrollTop() < ContainerTop()) {\n    topSide = true;\n  }\n\n  if (bottom > ContainerBottom()) {\n    bottomSide = true;\n  }\n\n  return {\n    topSide: topSide,\n    bottomSide: bottomSide\n  };\n}\n\nfunction getTargetContainerWidth() {\n  return targetContainer.getBoundingClientRect().width;\n}\n\nfunction getTargetContainerHeight() {\n  return targetContainer.getBoundingClientRect().height;\n}\n\nfunction getTargetContainerLeft() {\n  return targetContainer.getBoundingClientRect().left;\n}\n\nfunction getTargetContainerTop() {\n  return targetContainer.getBoundingClientRect().top;\n}\n\nfunction ContainerTop() {\n  if (targetContainer) {\n    return getTargetContainerTop();\n  }\n\n  return 0;\n}\n\nfunction ContainerLeft() {\n  if (targetContainer) {\n    return getTargetContainerLeft();\n  }\n\n  return 0;\n}\n\nfunction ContainerRight() {\n  if (targetContainer) {\n    return getBodyScrollLeft() + getTargetContainerLeft() + getTargetContainerWidth();\n  }\n\n  return getBodyScrollLeft() + getViewPortWidth();\n}\n\nfunction ContainerBottom() {\n  if (targetContainer) {\n    return getBodyScrollTop() + getTargetContainerTop() + getTargetContainerHeight();\n  }\n\n  return getBodyScrollTop() + getViewPortHeight();\n}\n\nfunction getBodyScrollTop() {\n  // if(targetContainer)\n  //     return targetContainer.scrollTop;\n  return parentDocument.documentElement.scrollTop || parentDocument.body.scrollTop;\n}\n\nfunction getBodyScrollLeft() {\n  // if(targetContainer)\n  //     return targetContainer.scrollLeft;\n  return parentDocument.documentElement.scrollLeft || parentDocument.body.scrollLeft;\n}\n\nfunction getViewPortHeight() {\n  return window.innerHeight;\n}\n\nfunction getViewPortWidth() {\n  var windowWidth = window.innerWidth;\n  var offsetWidth = isNullOrUndefined(document.documentElement) ? 0 : document.documentElement.offsetWidth;\n  return windowWidth - (windowWidth - offsetWidth);\n}","map":null,"metadata":{},"sourceType":"module"}