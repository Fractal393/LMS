{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Touch, Component, EventHandler, selectAll, getUniqueID, removeClass } from '@syncfusion/ej2-base';\nimport { NotifyPropertyChanges, Property, Browser, detach, createElement as buildTag } from '@syncfusion/ej2-base';\nimport { classList, isNullOrUndefined } from '@syncfusion/ej2-base';\nvar CLS_ROOT = 'e-vscroll';\nvar CLS_RTL = 'e-rtl';\nvar CLS_DISABLE = 'e-overlay';\nvar CLS_VSCROLLBAR = 'e-vscroll-bar';\nvar CLS_VSCROLLCON = 'e-vscroll-content';\nvar CLS_NAVARROW = 'e-nav-arrow';\nvar CLS_NAVUPARROW = 'e-nav-up-arrow';\nvar CLS_NAVDOWNARROW = 'e-nav-down-arrow';\nvar CLS_VSCROLLNAV = 'e-scroll-nav';\nvar CLS_VSCROLLNAVUP = 'e-scroll-up-nav';\nvar CLS_VSCROLLNAVDOWN = 'e-scroll-down-nav';\nvar CLS_DEVICE = 'e-scroll-device';\nvar CLS_OVERLAY = 'e-scroll-overlay';\nvar CLS_UPOVERLAY = 'e-scroll-up-overlay';\nvar CLS_DOWNOVERLAY = 'e-scroll-down-overlay';\nvar OVERLAY_MAXWID = 40;\n/**\n * VScroll module is introduces vertical scroller when content exceeds the current viewing area.\n * It can be useful for the components like Toolbar, Tab which needs vertical scrolling alone.\n * Hidden content can be view by touch moving or icon click.\n * ```html\n * <div id=\"scroll\"/>\n * <script>\n *   var scrollObj = new VScroll();\n *   scrollObj.appendTo(\"#scroll\");\n * </script>\n * ```\n */\n\nvar VScroll =\n/** @class */\nfunction (_super) {\n  __extends(VScroll, _super);\n  /**\n   * Initializes a new instance of the VScroll class.\n   * @param options  - Specifies VScroll model properties as options.\n   * @param element  - Specifies the element for which vertical scrolling applies.\n   */\n\n\n  function VScroll(options, element) {\n    return _super.call(this, options, element) || this;\n  }\n  /**\n   * Initialize the event handler\n   * @private\n   */\n\n\n  VScroll.prototype.preRender = function () {\n    this.browser = Browser.info.name;\n    this.browserCheck = this.browser === 'mozilla';\n    this.isDevice = Browser.isDevice;\n    this.customStep = true;\n    var ele = this.element;\n    this.ieCheck = this.browser === 'edge' || this.browser === 'msie';\n    this.initialize();\n\n    if (ele.id === '') {\n      ele.id = getUniqueID('vscroll');\n      this.uniqueId = true;\n    }\n\n    ele.style.display = 'block';\n\n    if (this.enableRtl) {\n      ele.classList.add(CLS_RTL);\n    }\n  };\n  /**\n   * To Initialize the vertical scroll rendering\n   * @private\n   */\n\n\n  VScroll.prototype.render = function () {\n    this.touchModule = new Touch(this.element, {\n      scroll: this.touchHandler.bind(this),\n      swipe: this.swipeHandler.bind(this)\n    });\n    EventHandler.add(this.scrollEle, 'scroll', this.scrollEventHandler, this);\n\n    if (!this.isDevice) {\n      this.createNavIcon(this.element);\n    } else {\n      this.element.classList.add(CLS_DEVICE);\n      this.createOverlayElement(this.element);\n    }\n\n    this.setScrollState();\n    EventHandler.add(this.element, 'wheel', this.wheelEventHandler, this);\n  };\n\n  VScroll.prototype.setScrollState = function () {\n    if (isNullOrUndefined(this.scrollStep) || this.scrollStep < 0) {\n      this.scrollStep = this.scrollEle.offsetHeight;\n      this.customStep = false;\n    } else {\n      this.customStep = true;\n    }\n  };\n\n  VScroll.prototype.initialize = function () {\n    var scrollCnt = buildTag('div', {\n      className: CLS_VSCROLLCON\n    });\n    var scrollBar = buildTag('div', {\n      className: CLS_VSCROLLBAR\n    });\n    scrollBar.setAttribute('tabindex', '-1');\n    var ele = this.element;\n    var innerEle = [].slice.call(ele.children);\n\n    for (var _i = 0, innerEle_1 = innerEle; _i < innerEle_1.length; _i++) {\n      var ele_1 = innerEle_1[_i];\n      scrollCnt.appendChild(ele_1);\n    }\n\n    scrollBar.appendChild(scrollCnt);\n    ele.appendChild(scrollBar);\n    scrollBar.style.overflowY = 'hidden';\n    this.scrollEle = scrollBar;\n    this.scrollItems = scrollCnt;\n  };\n\n  VScroll.prototype.getPersistData = function () {\n    var keyEntity = ['scrollStep'];\n    return this.addOnPersist(keyEntity);\n  };\n  /**\n   * Returns the current module name.\n   * @returns string\n   * @private\n   */\n\n\n  VScroll.prototype.getModuleName = function () {\n    return 'vScroll';\n  };\n  /**\n   * Removes the control from the DOM and also removes all its related events.\n   * @returns void\n   */\n\n\n  VScroll.prototype.destroy = function () {\n    var el = this.element;\n    el.style.display = '';\n    removeClass([this.element], [CLS_ROOT, CLS_DEVICE]);\n    var navs = selectAll('.e-' + el.id + '_nav.' + CLS_VSCROLLNAV, el);\n    var overlays = selectAll('.' + CLS_OVERLAY, el);\n    [].slice.call(overlays).forEach(function (ele) {\n      detach(ele);\n    });\n\n    for (var _i = 0, _a = [].slice.call(this.scrollItems.children); _i < _a.length; _i++) {\n      var elem = _a[_i];\n      el.appendChild(elem);\n    }\n\n    if (this.uniqueId) {\n      this.element.removeAttribute('id');\n    }\n\n    detach(this.scrollEle);\n\n    if (navs.length > 0) {\n      detach(navs[0]);\n\n      if (!isNullOrUndefined(navs[1])) {\n        detach(navs[1]);\n      }\n    }\n\n    EventHandler.remove(this.scrollEle, 'scroll', this.scrollEventHandler);\n    this.touchModule.destroy();\n    this.touchModule = null;\n\n    _super.prototype.destroy.call(this);\n  };\n  /**\n   * Specifies the value to disable/enable the VScroll component.\n   * When set to `true` , the component will be disabled.\n   * @param  {boolean} value - Based on this Boolean value, VScroll will be enabled (false) or disabled (true).\n   * @returns void.\n   */\n\n\n  VScroll.prototype.disable = function (value) {\n    var navEle = selectAll('.e-scroll-nav:not(.' + CLS_DISABLE + ')', this.element);\n    value ? this.element.classList.add(CLS_DISABLE) : this.element.classList.remove(CLS_DISABLE);\n    [].slice.call(navEle).forEach(function (el) {\n      el.setAttribute('tabindex', !value ? '0' : '-1');\n    });\n  };\n\n  VScroll.prototype.createOverlayElement = function (element) {\n    var id = element.id.concat('_nav');\n    var downOverlayEle = buildTag('div', {\n      className: CLS_OVERLAY + ' ' + CLS_DOWNOVERLAY\n    });\n    var clsDown = 'e-' + element.id.concat('_nav ' + CLS_VSCROLLNAV + ' ' + CLS_VSCROLLNAVDOWN);\n    var downEle = buildTag('div', {\n      id: id.concat('down'),\n      className: clsDown\n    });\n    var navItem = buildTag('div', {\n      className: CLS_NAVDOWNARROW + ' ' + CLS_NAVARROW + ' e-icons'\n    });\n    downEle.appendChild(navItem);\n    var upEle = buildTag('div', {\n      className: CLS_OVERLAY + ' ' + CLS_UPOVERLAY\n    });\n\n    if (this.ieCheck) {\n      downEle.classList.add('e-ie-align');\n    }\n\n    element.appendChild(downOverlayEle);\n    element.appendChild(downEle);\n    element.insertBefore(upEle, element.firstChild);\n    this.eventBinding([downEle]);\n  };\n\n  VScroll.prototype.createNavIcon = function (element) {\n    var id = element.id.concat('_nav');\n    var clsDown = 'e-' + element.id.concat('_nav ' + CLS_VSCROLLNAV + ' ' + CLS_VSCROLLNAVDOWN);\n    var nav = buildTag('div', {\n      id: id.concat('_down'),\n      className: clsDown\n    });\n    nav.setAttribute('aria-disabled', 'false');\n    var navItem = buildTag('div', {\n      className: CLS_NAVDOWNARROW + ' ' + CLS_NAVARROW + ' e-icons'\n    });\n    var clsUp = 'e-' + element.id.concat('_nav ' + CLS_VSCROLLNAV + ' ' + CLS_VSCROLLNAVUP);\n    var navElement = buildTag('div', {\n      id: id.concat('_up'),\n      className: clsUp + ' ' + CLS_DISABLE\n    });\n    navElement.setAttribute('aria-disabled', 'true');\n    var navUpItem = buildTag('div', {\n      className: CLS_NAVUPARROW + ' ' + CLS_NAVARROW + ' e-icons'\n    });\n    navElement.appendChild(navUpItem);\n    nav.appendChild(navItem);\n    nav.setAttribute('tabindex', '0');\n    element.appendChild(nav);\n    element.insertBefore(navElement, element.firstChild);\n\n    if (this.ieCheck) {\n      nav.classList.add('e-ie-align');\n      navElement.classList.add('e-ie-align');\n    }\n\n    this.eventBinding([nav, navElement]);\n  };\n\n  VScroll.prototype.onKeyPress = function (ev) {\n    var _this = this;\n\n    if (ev.key === 'Enter') {\n      var timeoutFun_1 = function () {\n        _this.keyTimeout = true;\n\n        _this.eleScrolling(10, ev.target, true);\n      };\n\n      this.keyTimer = window.setTimeout(function () {\n        timeoutFun_1();\n      }, 100);\n    }\n  };\n\n  VScroll.prototype.onKeyUp = function (ev) {\n    if (ev.key !== 'Enter') {\n      return;\n    }\n\n    if (this.keyTimeout) {\n      this.keyTimeout = false;\n    } else {\n      ev.target.click();\n    }\n\n    clearTimeout(this.keyTimer);\n  };\n\n  VScroll.prototype.eventBinding = function (element) {\n    var _this = this;\n\n    [].slice.call(element).forEach(function (ele) {\n      new Touch(ele, {\n        tapHold: _this.tabHoldHandler.bind(_this),\n        tapHoldThreshold: 500\n      });\n      ele.addEventListener('keydown', _this.onKeyPress.bind(_this));\n      ele.addEventListener('keyup', _this.onKeyUp.bind(_this));\n      ele.addEventListener('mouseup', _this.repeatScroll.bind(_this));\n      ele.addEventListener('touchend', _this.repeatScroll.bind(_this));\n      ele.addEventListener('contextmenu', function (e) {\n        e.preventDefault();\n      });\n      EventHandler.add(ele, 'click', _this.clickEventHandler, _this);\n    });\n  };\n\n  VScroll.prototype.repeatScroll = function () {\n    clearInterval(this.timeout);\n  };\n\n  VScroll.prototype.tabHoldHandler = function (ev) {\n    var _this = this;\n\n    var trgt = ev.originalEvent.target;\n    trgt = this.contains(trgt, CLS_VSCROLLNAV) ? trgt.firstElementChild : trgt;\n    var scrollDistance = 10;\n\n    var timeoutFun = function () {\n      _this.eleScrolling(scrollDistance, trgt, true);\n    };\n\n    this.timeout = window.setInterval(function () {\n      timeoutFun();\n    }, 50);\n  };\n\n  VScroll.prototype.contains = function (element, className) {\n    return element.classList.contains(className);\n  };\n\n  VScroll.prototype.eleScrolling = function (scrollDis, trgt, isContinuous) {\n    var rootElement = this.element;\n    var classList = trgt.classList;\n\n    if (classList.contains(CLS_VSCROLLNAV)) {\n      classList = trgt.querySelector('.' + CLS_NAVARROW).classList;\n    }\n\n    if (classList.contains(CLS_NAVDOWNARROW)) {\n      this.frameScrollRequest(scrollDis, 'add', isContinuous);\n    } else if (classList.contains(CLS_NAVUPARROW)) {\n      this.frameScrollRequest(scrollDis, '', isContinuous);\n    }\n  };\n\n  VScroll.prototype.clickEventHandler = function (event) {\n    this.eleScrolling(this.scrollStep, event.target, false);\n  };\n\n  VScroll.prototype.wheelEventHandler = function (e) {\n    e.preventDefault();\n    this.frameScrollRequest(this.scrollStep, e.deltaY > 0 ? 'add' : '', false);\n  };\n\n  VScroll.prototype.swipeHandler = function (e) {\n    var swipeElement = this.scrollEle;\n    var distance;\n\n    if (e.velocity <= 1) {\n      distance = e.distanceY / (e.velocity * 10);\n    } else {\n      distance = e.distanceY / e.velocity;\n    }\n\n    var start = 0.5;\n\n    var animate = function () {\n      var step = Math.sin(start);\n\n      if (step <= 0) {\n        window.cancelAnimationFrame(step);\n      } else {\n        if (e.swipeDirection === 'Up') {\n          swipeElement.scrollTop += distance * step;\n        } else if (e.swipeDirection === 'Down') {\n          swipeElement.scrollTop -= distance * step;\n        }\n\n        start -= 0.02;\n        window.requestAnimationFrame(animate);\n      }\n    };\n\n    animate();\n  };\n\n  VScroll.prototype.scrollUpdating = function (scrollVal, action) {\n    if (action === 'add') {\n      this.scrollEle.scrollTop += scrollVal;\n    } else {\n      this.scrollEle.scrollTop -= scrollVal;\n    }\n  };\n\n  VScroll.prototype.frameScrollRequest = function (scrollValue, action, isContinuous) {\n    var _this = this;\n\n    var step = 10;\n\n    if (isContinuous) {\n      this.scrollUpdating(scrollValue, action);\n      return;\n    }\n\n    if (!this.customStep) {\n      [].slice.call(selectAll('.' + CLS_OVERLAY, this.element)).forEach(function (el) {\n        scrollValue -= el.offsetHeight;\n      });\n    }\n\n    var animate = function () {\n      if (scrollValue < step) {\n        window.cancelAnimationFrame(step);\n      } else {\n        _this.scrollUpdating(step, action);\n\n        scrollValue -= step;\n        window.requestAnimationFrame(animate);\n      }\n    };\n\n    animate();\n  };\n\n  VScroll.prototype.touchHandler = function (e) {\n    var el = this.scrollEle;\n    var distance;\n    distance = e.distanceY;\n\n    if (e.scrollDirection === 'Up') {\n      el.scrollTop = el.scrollTop + distance;\n    } else if (e.scrollDirection === 'Down') {\n      el.scrollTop = el.scrollTop - distance;\n    }\n  };\n\n  VScroll.prototype.arrowDisabling = function (addDisableCls, removeDisableCls) {\n    if (this.isDevice) {\n      var arrowEle = isNullOrUndefined(addDisableCls) ? removeDisableCls : addDisableCls;\n      var arrowIcon = arrowEle.querySelector('.' + CLS_NAVARROW);\n\n      if (isNullOrUndefined(addDisableCls)) {\n        classList(arrowIcon, [CLS_NAVDOWNARROW], [CLS_NAVUPARROW]);\n      } else {\n        classList(arrowIcon, [CLS_NAVUPARROW], [CLS_NAVDOWNARROW]);\n      }\n    } else {\n      addDisableCls.classList.add(CLS_DISABLE);\n      addDisableCls.setAttribute('aria-disabled', 'true');\n      addDisableCls.removeAttribute('tabindex');\n      removeDisableCls.classList.remove(CLS_DISABLE);\n      removeDisableCls.setAttribute('aria-disabled', 'false');\n      removeDisableCls.setAttribute('tabindex', '0');\n    }\n\n    this.repeatScroll();\n  };\n\n  VScroll.prototype.scrollEventHandler = function (e) {\n    var target = e.target;\n    var height = target.offsetHeight;\n    var rootEle = this.element;\n    var navUpEle = this.element.querySelector('.' + CLS_VSCROLLNAVUP);\n    var navDownEle = this.element.querySelector('.' + CLS_VSCROLLNAVDOWN);\n    var upOverlay = this.element.querySelector('.' + CLS_UPOVERLAY);\n    var downOverlay = this.element.querySelector('.' + CLS_DOWNOVERLAY);\n    var scrollTop = target.scrollTop;\n\n    if (scrollTop <= 0) {\n      scrollTop = -scrollTop;\n    }\n\n    if (this.isDevice) {\n      if (scrollTop < OVERLAY_MAXWID) {\n        upOverlay.style.height = scrollTop + 'px';\n      } else {\n        upOverlay.style.height = '40px';\n      }\n\n      if (target.scrollHeight - Math.ceil(height + scrollTop) < OVERLAY_MAXWID) {\n        downOverlay.style.height = target.scrollHeight - Math.ceil(height + scrollTop) + 'px';\n      } else {\n        downOverlay.style.height = '40px';\n      }\n    }\n\n    if (scrollTop === 0) {\n      this.arrowDisabling(navUpEle, navDownEle);\n    } else if (Math.ceil(height + scrollTop + .1) >= target.scrollHeight) {\n      this.arrowDisabling(navDownEle, navUpEle);\n    } else {\n      var disEle = this.element.querySelector('.' + CLS_VSCROLLNAV + '.' + CLS_DISABLE);\n\n      if (disEle) {\n        disEle.classList.remove(CLS_DISABLE);\n        disEle.setAttribute('aria-disabled', 'false');\n        disEle.setAttribute('tabindex', '0');\n      }\n    }\n  };\n  /**\n   * Gets called when the model property changes.The data that describes the old and new values of property that changed.\n   * @param  {VScrollModel} newProp\n   * @param  {VScrollModel} oldProp\n   * @returns void\n   * @private\n   */\n\n\n  VScroll.prototype.onPropertyChanged = function (newProp, oldProp) {\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'scrollStep':\n          this.setScrollState();\n          break;\n\n        case 'enableRtl':\n          newProp.enableRtl ? this.element.classList.add(CLS_RTL) : this.element.classList.remove(CLS_RTL);\n          break;\n      }\n    }\n  };\n\n  __decorate([Property(null)], VScroll.prototype, \"scrollStep\", void 0);\n\n  VScroll = __decorate([NotifyPropertyChanges], VScroll);\n  return VScroll;\n}(Component);\n\nexport { VScroll };","map":null,"metadata":{},"sourceType":"module"}