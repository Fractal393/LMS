{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.virtual_scrolling_core.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _window = require(\"../../core/utils/window\");\n\nvar _events_engine = require(\"../../events/core/events_engine\");\n\nvar _events_engine2 = _interopRequireDefault(_events_engine);\n\nvar _browser = require(\"../../core/utils/browser\");\n\nvar _browser2 = _interopRequireDefault(_browser);\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _position = require(\"../../animation/position\");\n\nvar _position2 = _interopRequireDefault(_position);\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _class = require(\"../../core/class\");\n\nvar _class2 = _interopRequireDefault(_class);\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nvar _callbacks = require(\"../../core/utils/callbacks\");\n\nvar _callbacks2 = _interopRequireDefault(_callbacks);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar SCROLLING_MODE_INFINITE = \"infinite\";\nvar SCROLLING_MODE_VIRTUAL = \"virtual\";\n\nvar isVirtualMode = function (that) {\n  return that.option(\"scrolling.mode\") === SCROLLING_MODE_VIRTUAL || that._isVirtual;\n};\n\nvar isAppendMode = function (that) {\n  return that.option(\"scrolling.mode\") === SCROLLING_MODE_INFINITE && !that._isVirtual;\n};\n\nexports.getPixelRatio = function (window) {\n  return window.devicePixelRatio || 1;\n};\n\nexports.getContentHeightLimit = function (browser) {\n  if (browser.msie) {\n    return 4e6;\n  } else {\n    if (browser.mozilla) {\n      return 8e6;\n    }\n  }\n\n  return 15e6 / exports.getPixelRatio((0, _window.getWindow)());\n};\n\nexports.subscribeToExternalScrollers = function ($element, scrollChangedHandler, $targetElement) {\n  var $scrollElement;\n  var scrollableArray = [];\n  var scrollToArray = [];\n  var disposeArray = [];\n  $targetElement = $targetElement || $element;\n\n  function getElementOffset(scrollable) {\n    var $scrollableElement = scrollable.element ? scrollable.$element() : scrollable;\n\n    var scrollableOffset = _position2.default.offset($scrollableElement);\n\n    if (!scrollableOffset) {\n      return $element.offset().top;\n    }\n\n    return scrollable.scrollTop() - (scrollableOffset.top - $element.offset().top);\n  }\n\n  function createWindowScrollHandler(scrollable) {\n    return function () {\n      var scrollTop = scrollable.scrollTop() - getElementOffset(scrollable);\n      scrollTop = scrollTop > 0 ? scrollTop : 0;\n      scrollChangedHandler(scrollTop);\n    };\n  }\n\n  var widgetScrollStrategy = {\n    on: function (scrollable, eventName, handler) {\n      scrollable.on(\"scroll\", handler);\n    },\n    off: function (scrollable, eventName, handler) {\n      scrollable.off(\"scroll\", handler);\n    }\n  };\n\n  function subscribeToScrollEvents($scrollElement) {\n    var isDocument = \"#document\" === $scrollElement.get(0).nodeName;\n    var scrollable = $scrollElement.data(\"dxScrollable\");\n    var eventsStrategy = widgetScrollStrategy;\n\n    if (!scrollable) {\n      scrollable = isDocument && (0, _renderer2.default)((0, _window.getWindow)()) || \"auto\" === $scrollElement.css(\"overflowY\") && $scrollElement;\n      eventsStrategy = _events_engine2.default;\n\n      if (!scrollable) {\n        return;\n      }\n    }\n\n    var handler = createWindowScrollHandler(scrollable);\n    eventsStrategy.on(scrollable, \"scroll\", handler);\n    scrollToArray.push(function (pos) {\n      var topOffset = getElementOffset(scrollable);\n      var scrollMethod = scrollable.scrollTo ? \"scrollTo\" : \"scrollTop\";\n\n      if (pos - topOffset >= 0) {\n        scrollable[scrollMethod](pos + topOffset);\n      }\n    });\n    scrollableArray.push(scrollable);\n    disposeArray.push(function () {\n      eventsStrategy.off(scrollable, \"scroll\", handler);\n    });\n  }\n\n  for ($scrollElement = $targetElement.parent(); $scrollElement.length; $scrollElement = $scrollElement.parent()) {\n    subscribeToScrollEvents($scrollElement);\n  }\n\n  return {\n    scrollTo: function (pos) {\n      (0, _iterator.each)(scrollToArray, function (_, scrollTo) {\n        scrollTo(pos);\n      });\n    },\n    dispose: function () {\n      (0, _iterator.each)(disposeArray, function (_, dispose) {\n        dispose();\n      });\n    }\n  };\n};\n\nexports.VirtualScrollController = _class2.default.inherit(function () {\n  var getViewportPageCount = function (that) {\n    var pageSize = that._dataSource.pageSize();\n\n    var preventPreload = that.option(\"scrolling.preventPreload\");\n\n    if (preventPreload) {\n      return 0;\n    }\n\n    var realViewportSize = that._viewportSize;\n\n    if (isVirtualMode(that) && !that.option(\"legacyRendering\") && that.option(\"scrolling.removeInvisiblePages\")) {\n      realViewportSize = 0;\n      var viewportSize = that._viewportSize * that._viewportItemSize;\n      var offset = that.getContentOffset();\n      var position = that._position || 0;\n      var virtualItemsCount = that.virtualItemsCount();\n\n      var totalItemsCount = that._dataSource.totalItemsCount();\n\n      for (var itemIndex = virtualItemsCount.begin; itemIndex < totalItemsCount; itemIndex++) {\n        if (offset >= position + viewportSize) {\n          break;\n        }\n\n        var itemSize = that._itemSizes[itemIndex] || that._viewportItemSize;\n        offset += itemSize;\n\n        if (offset >= position) {\n          realViewportSize++;\n        }\n      }\n    }\n\n    return pageSize && realViewportSize > 0 ? Math.ceil(realViewportSize / pageSize) : 1;\n  };\n\n  var getPreloadPageCount = function (that, previous) {\n    var preloadEnabled = that.option(\"scrolling.preloadEnabled\");\n    var pageCount = getViewportPageCount(that);\n\n    if (pageCount) {\n      if (previous) {\n        pageCount = preloadEnabled ? 1 : 0;\n      } else {\n        if (preloadEnabled) {\n          pageCount++;\n        }\n\n        if (isAppendMode(that)) {\n          pageCount--;\n        }\n      }\n    }\n\n    return pageCount;\n  };\n\n  var getPageIndexForLoad = function (that) {\n    var result = -1;\n    var beginPageIndex = getBeginPageIndex(that);\n    var dataSource = that._dataSource;\n\n    if (beginPageIndex < 0) {\n      result = that._pageIndex;\n    } else {\n      if (!that._cache[that._pageIndex - beginPageIndex]) {\n        result = that._pageIndex;\n      } else {\n        if (beginPageIndex >= 0 && that._viewportSize >= 0) {\n          if (beginPageIndex > 0) {\n            var needToLoadPageBeforeLast = getEndPageIndex(that) + 1 === dataSource.pageCount() && that._cache.length < getPreloadPageCount(that) + 1;\n            var needToLoadPrevPage = needToLoadPageBeforeLast || that._pageIndex === beginPageIndex && getPreloadPageCount(that, true);\n\n            if (needToLoadPrevPage) {\n              result = beginPageIndex - 1;\n            }\n          }\n\n          if (result < 0) {\n            var needToLoadNextPage = beginPageIndex + that._cache.length <= that._pageIndex + getPreloadPageCount(that);\n\n            if (needToLoadNextPage) {\n              result = beginPageIndex + that._cache.length;\n            }\n          }\n        }\n      }\n    }\n\n    if (that._loadingPageIndexes[result]) {\n      result = -1;\n    }\n\n    return result;\n  };\n\n  function getBeginPageIndex(that) {\n    return that._cache.length ? that._cache[0].pageIndex : -1;\n  }\n\n  function getEndPageIndex(that) {\n    return that._cache.length ? that._cache[that._cache.length - 1].pageIndex : -1;\n  }\n\n  var fireChanged = function (that, changed, args) {\n    that._isChangedFiring = true;\n    changed(args);\n    that._isChangedFiring = false;\n  };\n\n  var processDelayChanged = function (that, changed, args) {\n    if (that._isDelayChanged) {\n      that._isDelayChanged = false;\n      fireChanged(that, changed, args);\n      return true;\n    }\n  };\n\n  var processChanged = function (that, changed, changeType, isDelayChanged, removeCacheItem) {\n    var dataSource = that._dataSource;\n    var items = dataSource.items().slice();\n    var change = (0, _type.isObject)(changeType) ? changeType : void 0;\n    var isPrepend = \"prepend\" === changeType;\n    var viewportItems = dataSource.viewportItems();\n\n    if (changeType && (0, _type.isString)(changeType) && !that._isDelayChanged) {\n      change = {\n        changeType: changeType,\n        items: items\n      };\n\n      if (removeCacheItem) {\n        change.removeCount = removeCacheItem.itemsCount;\n\n        if (change.removeCount && dataSource.correctCount) {\n          change.removeCount = dataSource.correctCount(viewportItems, change.removeCount, isPrepend);\n        }\n      }\n    }\n\n    var removeItemCount = removeCacheItem ? removeCacheItem.itemsLength : 0;\n\n    if (removeItemCount && dataSource.correctCount) {\n      removeItemCount = dataSource.correctCount(viewportItems, removeItemCount, isPrepend);\n    }\n\n    if (\"append\" === changeType) {\n      viewportItems.push.apply(viewportItems, items);\n\n      if (removeCacheItem) {\n        viewportItems.splice(0, removeItemCount);\n      }\n    } else {\n      if (isPrepend) {\n        viewportItems.unshift.apply(viewportItems, items);\n\n        if (removeCacheItem) {\n          viewportItems.splice(-removeItemCount);\n        }\n      } else {\n        that._dataSource.viewportItems(items);\n      }\n    }\n\n    dataSource.updateLoading();\n    that._lastPageIndex = that.pageIndex();\n    that._isDelayChanged = isDelayChanged;\n\n    if (!isDelayChanged) {\n      fireChanged(that, changed, change);\n    }\n  };\n\n  var loadCore = function (that, pageIndex) {\n    var dataSource = that._dataSource;\n\n    if (pageIndex === that.pageIndex() || !dataSource.isLoading() && pageIndex < dataSource.pageCount() || !dataSource.hasKnownLastPage() && pageIndex === dataSource.pageCount()) {\n      dataSource.pageIndex(pageIndex);\n      that._loadingPageIndexes[pageIndex] = true;\n      return (0, _deferred.when)(dataSource.load()).always(function () {\n        that._loadingPageIndexes[pageIndex] = false;\n      });\n    }\n  };\n\n  return {\n    ctor: function (component, dataSource, isVirtual) {\n      var that = this;\n      that._dataSource = dataSource;\n      that.component = component;\n      that._pageIndex = that._lastPageIndex = dataSource.pageIndex();\n      that._viewportSize = 0;\n      that._viewportItemSize = 20;\n      that._viewportItemIndex = -1;\n      that._itemSizes = {};\n      that._sizeRatio = 1;\n      that._items = [];\n      that._cache = [];\n      that._isVirtual = isVirtual;\n      that._loadingPageIndexes = {};\n      that.positionChanged = (0, _callbacks2.default)();\n    },\n    getItemSizes: function () {\n      return this._itemSizes;\n    },\n    option: function () {\n      return this.component.option.apply(this.component, arguments);\n    },\n    virtualItemsCount: function () {\n      var that = this;\n      var pageIndex;\n      var itemsCount = 0;\n\n      if (isVirtualMode(that)) {\n        pageIndex = getBeginPageIndex(that);\n\n        if (pageIndex < 0) {\n          pageIndex = that._dataSource.pageIndex();\n        }\n\n        var beginItemsCount = pageIndex * that._dataSource.pageSize();\n\n        itemsCount = that._cache.length * that._dataSource.pageSize();\n        var endItemsCount = Math.max(0, that._dataSource.totalItemsCount() - itemsCount - beginItemsCount);\n        return {\n          begin: beginItemsCount,\n          end: endItemsCount\n        };\n      }\n    },\n    setViewportPosition: function (position) {\n      var that = this;\n      var result = new _deferred.Deferred();\n      var scrollingTimeout = Math.min(that.option(\"scrolling.timeout\") || 0, that._dataSource.changingDuration());\n\n      if (scrollingTimeout < that.option(\"scrolling.renderingThreshold\")) {\n        scrollingTimeout = that.option(\"scrolling.minTimeout\") || 0;\n      }\n\n      clearTimeout(that._scrollTimeoutID);\n\n      if (scrollingTimeout > 0) {\n        that._scrollTimeoutID = setTimeout(function () {\n          that._setViewportPositionCore(position);\n\n          result.resolve();\n        }, scrollingTimeout);\n      } else {\n        that._setViewportPositionCore(position);\n\n        result.resolve();\n      }\n\n      return result.promise();\n    },\n    getViewportPosition: function () {\n      return this._position || 0;\n    },\n    getItemIndexByPosition: function () {\n      var that = this;\n      var position = that._position;\n      var defaultItemSize = that.getItemSize();\n      var offset = 0;\n      var itemOffset = 0;\n      var itemOffsetsWithSize = Object.keys(that._itemSizes).concat(-1);\n\n      for (var i = 0; i < itemOffsetsWithSize.length && offset < position; i++) {\n        var itemOffsetWithSize = parseInt(itemOffsetsWithSize[i]);\n        var itemOffsetDiff = (position - offset) / defaultItemSize;\n\n        if (itemOffsetWithSize < 0 || itemOffset + itemOffsetDiff < itemOffsetWithSize) {\n          itemOffset += itemOffsetDiff;\n          break;\n        } else {\n          itemOffsetDiff = itemOffsetWithSize - itemOffset;\n          offset += itemOffsetDiff * defaultItemSize;\n          itemOffset += itemOffsetDiff;\n        }\n\n        var itemSize = that._itemSizes[itemOffsetWithSize];\n        offset += itemSize;\n        itemOffset += offset < position ? 1 : (position - offset + itemSize) / itemSize;\n      }\n\n      return Math.round(50 * itemOffset) / 50;\n    },\n    _setViewportPositionCore: function (position) {\n      this._position = position;\n      var itemIndex = this.getItemIndexByPosition();\n      var result = this.setViewportItemIndex(itemIndex);\n      this.positionChanged.fire();\n      return result;\n    },\n    setContentSize: function (size) {\n      var that = this;\n      var sizes = Array.isArray(size) && size;\n      var virtualItemsCount = that.virtualItemsCount();\n\n      if (sizes) {\n        size = sizes.reduce(function (a, b) {\n          return a + b;\n        }, 0);\n      }\n\n      that._contentSize = size;\n\n      if (virtualItemsCount) {\n        if (sizes) {\n          sizes.forEach(function (size, index) {\n            that._itemSizes[virtualItemsCount.begin + index] = size;\n          });\n        }\n\n        var virtualContentSize = (virtualItemsCount.begin + virtualItemsCount.end + that.itemsCount()) * that._viewportItemSize;\n\n        var contentHeightLimit = exports.getContentHeightLimit(_browser2.default);\n\n        if (virtualContentSize > contentHeightLimit) {\n          that._sizeRatio = contentHeightLimit / virtualContentSize;\n        } else {\n          that._sizeRatio = 1;\n        }\n      }\n    },\n    getItemSize: function () {\n      return this._viewportItemSize * this._sizeRatio;\n    },\n    getItemOffset: function (itemIndex, isEnd) {\n      var that = this;\n      var virtualItemsCount = that.virtualItemsCount();\n      var itemCount = itemIndex;\n\n      if (!virtualItemsCount) {\n        return 0;\n      }\n\n      var offset = 0;\n\n      var totalItemsCount = that._dataSource.totalItemsCount();\n\n      Object.keys(that._itemSizes).forEach(function (currentItemIndex) {\n        if (!itemCount) {\n          return;\n        }\n\n        if (isEnd ? currentItemIndex >= totalItemsCount - itemIndex : currentItemIndex < itemIndex) {\n          offset += that._itemSizes[currentItemIndex];\n          itemCount--;\n        }\n      });\n      return Math.floor(offset + itemCount * that._viewportItemSize * that._sizeRatio);\n    },\n    getContentOffset: function (type) {\n      var isEnd = \"end\" === type;\n      var virtualItemsCount = this.virtualItemsCount();\n\n      if (!virtualItemsCount) {\n        return 0;\n      }\n\n      return this.getItemOffset(isEnd ? virtualItemsCount.end : virtualItemsCount.begin, isEnd);\n    },\n    getVirtualContentSize: function () {\n      var that = this;\n      var virtualItemsCount = that.virtualItemsCount();\n      return virtualItemsCount ? that.getContentOffset(\"begin\") + that.getContentOffset(\"end\") + that._contentSize : 0;\n    },\n    getViewportItemIndex: function () {\n      return this._viewportItemIndex;\n    },\n    setViewportItemIndex: function (itemIndex) {\n      var that = this;\n\n      var pageSize = that._dataSource.pageSize();\n\n      var pageCount = that._dataSource.pageCount();\n\n      var virtualMode = isVirtualMode(that);\n      var appendMode = isAppendMode(that);\n\n      var totalItemsCount = that._dataSource.totalItemsCount();\n\n      var newPageIndex;\n      that._viewportItemIndex = itemIndex;\n\n      if (pageSize && (virtualMode || appendMode) && totalItemsCount >= 0) {\n        if (that._viewportSize && itemIndex + that._viewportSize >= totalItemsCount && !that._isVirtual) {\n          if (that._dataSource.hasKnownLastPage()) {\n            newPageIndex = pageCount - 1;\n            var lastPageSize = totalItemsCount % pageSize;\n\n            if (newPageIndex > 0 && lastPageSize > 0 && lastPageSize < that._viewportSize) {\n              newPageIndex--;\n            }\n          } else {\n            newPageIndex = pageCount;\n          }\n        } else {\n          newPageIndex = Math.floor(itemIndex / pageSize);\n          var maxPageIndex = pageCount - 1;\n          newPageIndex = Math.max(newPageIndex, 0);\n          newPageIndex = Math.min(newPageIndex, maxPageIndex);\n        }\n\n        that.pageIndex(newPageIndex);\n        return that.load();\n      }\n    },\n    viewportItemSize: function (size) {\n      if (void 0 !== size) {\n        this._viewportItemSize = size;\n      }\n\n      return this._viewportItemSize;\n    },\n    viewportSize: function (size) {\n      if (void 0 !== size) {\n        this._viewportSize = size;\n      }\n\n      return this._viewportSize;\n    },\n    pageIndex: function (_pageIndex) {\n      if (isVirtualMode(this) || isAppendMode(this)) {\n        if (void 0 !== _pageIndex) {\n          this._pageIndex = _pageIndex;\n        }\n\n        return this._pageIndex;\n      } else {\n        return this._dataSource.pageIndex(_pageIndex);\n      }\n    },\n    beginPageIndex: function beginPageIndex(defaultPageIndex) {\n      var beginPageIndex = getBeginPageIndex(this);\n\n      if (beginPageIndex < 0) {\n        beginPageIndex = void 0 !== defaultPageIndex ? defaultPageIndex : this.pageIndex();\n      }\n\n      return beginPageIndex;\n    },\n    endPageIndex: function endPageIndex() {\n      var endPageIndex = getEndPageIndex(this);\n      return endPageIndex > 0 ? endPageIndex : this._lastPageIndex;\n    },\n    pageSize: function () {\n      return this._dataSource.pageSize();\n    },\n    load: function () {\n      var that = this;\n      var dataSource = that._dataSource;\n      var result;\n\n      if (isVirtualMode(that) || isAppendMode(that)) {\n        var pageIndexForLoad = getPageIndexForLoad(that);\n\n        if (pageIndexForLoad >= 0) {\n          var loadResult = loadCore(that, pageIndexForLoad);\n\n          if (loadResult) {\n            result = new _deferred.Deferred();\n            loadResult.done(function () {\n              var delayDeferred = that._delayDeferred;\n\n              if (delayDeferred) {\n                delayDeferred.done(result.resolve).fail(result.reject);\n              } else {\n                result.resolve();\n              }\n            }).fail(result.reject);\n            dataSource.updateLoading();\n          }\n        }\n      } else {\n        result = dataSource.load();\n      }\n\n      if (!result && that._lastPageIndex !== that.pageIndex()) {\n        that._dataSource.onChanged({\n          changeType: \"pageIndex\"\n        });\n      }\n\n      return result || new _deferred.Deferred().resolve();\n    },\n    loadIfNeed: function () {\n      var that = this;\n\n      if ((isVirtualMode(that) || isAppendMode(that)) && !that._dataSource.isLoading() && (!that._isChangedFiring || that._isVirtual)) {\n        var position = that.getViewportPosition();\n\n        if (position > 0) {\n          that._setViewportPositionCore(position);\n        } else {\n          that.load();\n        }\n      }\n    },\n    handleDataChanged: function (callBase, e) {\n      var that = this;\n      var dataSource = that._dataSource;\n      var lastCacheLength = that._cache.length;\n      var changeType;\n      var removeInvisiblePages;\n\n      if (e && e.changes) {\n        fireChanged(that, callBase, e);\n      } else {\n        if (isVirtualMode(that) || isAppendMode(that)) {\n          var beginPageIndex = getBeginPageIndex(that);\n\n          if (beginPageIndex >= 0) {\n            if (isVirtualMode(that) && beginPageIndex + that._cache.length !== dataSource.pageIndex() && beginPageIndex - 1 !== dataSource.pageIndex()) {\n              lastCacheLength = 0;\n              that._cache = [];\n            }\n\n            if (isAppendMode(that)) {\n              if (0 === dataSource.pageIndex()) {\n                that._cache = [];\n              } else {\n                if (dataSource.pageIndex() < getEndPageIndex(that)) {\n                  fireChanged(that, callBase, {\n                    changeType: \"append\",\n                    items: []\n                  });\n                  return;\n                }\n              }\n            }\n          }\n\n          var cacheItem = {\n            pageIndex: dataSource.pageIndex(),\n            itemsLength: dataSource.items(true).length,\n            itemsCount: that.itemsCount(true)\n          };\n\n          if (!that.option(\"legacyRendering\") && that.option(\"scrolling.removeInvisiblePages\") && isVirtualMode(that)) {\n            removeInvisiblePages = that._cache.length > Math.max(getPreloadPageCount(this) + (that.option(\"scrolling.preloadEnabled\") ? 1 : 0), 2);\n          } else {\n            processDelayChanged(that, callBase, {\n              isDelayed: true\n            });\n          }\n\n          var removeCacheItem;\n\n          if (beginPageIndex === dataSource.pageIndex() + 1) {\n            if (removeInvisiblePages) {\n              removeCacheItem = that._cache.pop();\n            }\n\n            changeType = \"prepend\";\n\n            that._cache.unshift(cacheItem);\n          } else {\n            if (removeInvisiblePages) {\n              removeCacheItem = that._cache.shift();\n            }\n\n            changeType = \"append\";\n\n            that._cache.push(cacheItem);\n          }\n\n          var isDelayChanged = isVirtualMode(that) && 0 === lastCacheLength;\n          processChanged(that, callBase, that._cache.length > 1 ? changeType : void 0, isDelayChanged, removeCacheItem);\n          that._delayDeferred = that.load().done(function () {\n            if (processDelayChanged(that, callBase)) {\n              that.load();\n            }\n          });\n        } else {\n          processChanged(that, callBase, e);\n        }\n      }\n    },\n    itemsCount: function itemsCount(isBase) {\n      var itemsCount = 0;\n\n      if (!isBase && isVirtualMode(this)) {\n        (0, _iterator.each)(this._cache, function () {\n          itemsCount += this.itemsCount;\n        });\n      } else {\n        itemsCount = this._dataSource.itemsCount();\n      }\n\n      return itemsCount;\n    },\n    reset: function (isRefresh) {\n      this._loadingPageIndexes = {};\n      this._cache = [];\n\n      if (!isRefresh) {\n        this._itemSizes = {};\n      }\n    },\n    subscribeToWindowScrollEvents: function ($element) {\n      var that = this;\n      that._windowScroll = that._windowScroll || exports.subscribeToExternalScrollers($element, function (scrollTop) {\n        if (that.viewportItemSize()) {\n          that.setViewportPosition(scrollTop);\n        }\n      });\n    },\n    dispose: function () {\n      clearTimeout(this._scrollTimeoutID);\n      this._windowScroll && this._windowScroll.dispose();\n      this._windowScroll = null;\n    },\n    scrollTo: function (pos) {\n      this._windowScroll && this._windowScroll.scrollTo(pos);\n    }\n  };\n}());","map":null,"metadata":{},"sourceType":"script"}