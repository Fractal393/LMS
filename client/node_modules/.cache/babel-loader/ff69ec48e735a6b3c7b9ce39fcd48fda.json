{"ast":null,"code":"\"use strict\";\n/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FileSearch = void 0;\n\nvar classnames_1 = __importDefault(require(\"classnames\"));\n\nvar react_1 = __importStar(require(\"react\"));\n\nvar recoil_1 = require(\"recoil\");\n\nvar search_recoil_1 = require(\"../../recoil/search.recoil\");\n\nvar icons_types_1 = require(\"../../types/icons.types\");\n\nvar hooks_helpers_1 = require(\"../../util/hooks-helpers\");\n\nvar ChonkyIcon_1 = require(\"./ChonkyIcon\");\n\nexports.FileSearch = function () {\n  var setSearchBarEnabled = recoil_1.useSetRecoilState(search_recoil_1.searchBarEnabledState);\n\n  var _a = recoil_1.useRecoilState(search_recoil_1.searchBarVisibleState),\n      searchBarVisible = _a[0],\n      setSearchBarVisible = _a[1];\n\n  var _b = recoil_1.useRecoilState(search_recoil_1.searchFilterState),\n      globalSearchFilter = _b[0],\n      setGlobalSearchFilter = _b[1]; // Notify all other components that search bar is mounted.\n\n\n  react_1.useEffect(function () {\n    setSearchBarEnabled(true);\n    return function () {\n      return setSearchBarEnabled(false);\n    };\n  }, [setSearchBarEnabled]); // Show a loading indicator during debounce periods to help user realise that a\n  // debounce period is in effect.\n\n  var _c = react_1.useState(false),\n      showLoadingIndicator = _c[0],\n      setShowLoadingIndicator = _c[1]; // Define a local search filter and its debounced version\n\n\n  var _d = react_1.useState(globalSearchFilter),\n      localFilter = _d[0],\n      setLocalFilter = _d[1];\n\n  var _e = hooks_helpers_1.useDebounce(localFilter, 500),\n      debouncedFilter = _e[0],\n      setDebouncedFilter = _e[1]; // === Debounced global filter update\n\n\n  react_1.useEffect(function () {\n    setShowLoadingIndicator(false);\n    var trimmedFilter = debouncedFilter.trim();\n    setGlobalSearchFilter(trimmedFilter);\n  }, [debouncedFilter, setShowLoadingIndicator, setGlobalSearchFilter]); // === Search bar showing/hiding logic\n\n  var inputRef = react_1.default.useRef(null);\n  react_1.useEffect(function () {\n    if (searchBarVisible) {\n      // When the search bar is shown, focus the input\n      if (inputRef.current) inputRef.current.focus();\n    } else {\n      // When the search bar is hidden, clear out the search filter\n      setShowLoadingIndicator(false);\n      setLocalFilter('');\n      setDebouncedFilter('');\n    }\n  }, [inputRef, searchBarVisible, setShowLoadingIndicator, setLocalFilter, setDebouncedFilter]); // === Text input handler\n\n  var handleInputChange = react_1.useCallback(function (event) {\n    setShowLoadingIndicator(true);\n    setLocalFilter(event.target.value);\n  }, [setShowLoadingIndicator, setLocalFilter]); // === Callback to hide the search when Escape key is pressed inside the search\n\n  var onInputKeyDown = react_1.useCallback(function (event) {\n    if (event.nativeEvent.code === 'Enter') {\n      // Prevent submitting the form if Chonky is used inside of a form.\n      event.preventDefault();\n    }\n\n    if (event.nativeEvent.code === 'Escape') {\n      setSearchBarVisible(false);\n    }\n  }, [setSearchBarVisible]);\n  var className = classnames_1.default({\n    'chonky-file-search': true,\n    'chonky-file-search-hidden': !searchBarVisible\n  });\n  return react_1.default.createElement(\"div\", {\n    className: className\n  }, react_1.default.createElement(\"div\", {\n    className: \"chonky-file-search-input-group\"\n  }, react_1.default.createElement(\"label\", {\n    htmlFor: \"chonky-file-search\"\n  }, react_1.default.createElement(ChonkyIcon_1.ChonkyIconFA, {\n    icon: icons_types_1.ChonkyIconName.search,\n    fixedWidth: true\n  })), react_1.default.createElement(\"input\", {\n    ref: inputRef,\n    type: \"text\",\n    id: \"chonky-file-search\",\n    value: localFilter,\n    placeholder: \"Type to search...\",\n    onChange: handleInputChange,\n    onKeyDown: onInputKeyDown\n  }), react_1.default.createElement(\"div\", {\n    className: \"chonky-file-search-input-group-loading\"\n  }, showLoadingIndicator && react_1.default.createElement(\"span\", {\n    className: \"chonky-file-search-input-group-loading-indicator\"\n  }, react_1.default.createElement(ChonkyIcon_1.ChonkyIconFA, {\n    icon: icons_types_1.ChonkyIconName.loading,\n    spin: true\n  })))));\n};","map":null,"metadata":{},"sourceType":"script"}