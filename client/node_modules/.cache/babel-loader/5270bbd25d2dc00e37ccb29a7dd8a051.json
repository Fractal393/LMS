{"ast":null,"code":"import { classList, addClass, removeClass, isNullOrUndefined, Browser } from '@syncfusion/ej2-base';\nimport { Query, DataManager } from '@syncfusion/ej2-data';\nimport { EventHandler, closest, isBlazor } from '@syncfusion/ej2-base';\nimport * as events from '../base/constant';\nimport { Dialog, calculateRelativeBasedPosition } from '@syncfusion/ej2-popups';\nimport { createCboxWithWrap, toogleCheckbox, parentsUntil, removeAddCboxClasses } from '../base/util';\nimport { createCheckBox } from '@syncfusion/ej2-buttons';\nimport { SearchBox } from '../services/focus-strategy';\n/**\n * The `ColumnChooser` module is used to show or hide columns dynamically.\n */\n\nvar ColumnChooser =\n/** @class */\nfunction () {\n  /**\n   * Constructor for the Grid ColumnChooser module\n   * @hidden\n   */\n  function ColumnChooser(parent, serviceLocator) {\n    this.showColumn = [];\n    this.hideColumn = [];\n    this.changedColumns = [];\n    this.unchangedColumns = [];\n    this.isDlgOpen = false;\n    this.dlghide = false;\n    this.initialOpenDlg = true;\n    this.stateChangeColumns = [];\n    this.changedStateColumns = [];\n    this.isInitialOpen = false;\n    this.isCustomizeOpenCC = false;\n    this.searchOperator = 'startswith';\n    this.prevShowedCols = [];\n    this.parent = parent;\n    this.serviceLocator = serviceLocator;\n    this.addEventListener();\n    this.cBoxTrue = createCheckBox(this.parent.createElement, true, {\n      checked: true,\n      label: ' '\n    });\n    this.cBoxFalse = createCheckBox(this.parent.createElement, true, {\n      checked: false,\n      label: ' '\n    });\n    this.cBoxTrue.insertBefore(this.parent.createElement('input', {\n      className: 'e-chk-hidden e-cc e-cc-chbox',\n      attrs: {\n        type: 'checkbox'\n      }\n    }), this.cBoxTrue.firstChild);\n    this.cBoxFalse.insertBefore(this.parent.createElement('input', {\n      className: 'e-chk-hidden e-cc e-cc-chbox',\n      attrs: {\n        'type': 'checkbox'\n      }\n    }), this.cBoxFalse.firstChild);\n    this.cBoxFalse.querySelector('.e-frame').classList.add('e-uncheck');\n\n    if (this.parent.enableRtl) {\n      addClass([this.cBoxTrue, this.cBoxFalse], ['e-rtl']);\n    }\n  }\n\n  ColumnChooser.prototype.destroy = function () {\n    var gridElement = this.parent.element;\n\n    if (!gridElement || !gridElement.querySelector('.e-gridheader') && !gridElement.querySelector('.e-gridcontent')) {\n      return;\n    }\n\n    this.removeEventListener();\n    this.unWireEvents();\n\n    if (!isNullOrUndefined(this.dlgObj) && this.dlgObj.element && !this.dlgObj.isDestroyed) {\n      this.dlgObj.destroy();\n    }\n  };\n\n  ColumnChooser.prototype.rtlUpdate = function () {\n    if (this.parent.enableRtl) {\n      addClass(this.innerDiv.querySelectorAll('.e-checkbox-wrapper'), ['e-rtl']);\n    } else {\n      removeClass(this.innerDiv.querySelectorAll('.e-checkbox-wrapper'), ['e-rtl']);\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  ColumnChooser.prototype.addEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    EventHandler.add(document, 'click', this.clickHandler, this);\n    this.parent.on(events.uiUpdate, this.enableAfterRenderEle, this);\n    this.parent.on(events.initialEnd, this.render, this);\n    this.parent.addEventListener(events.dataBound, this.hideDialog.bind(this));\n    this.parent.on(events.destroy, this.destroy, this);\n    this.parent.on(events.rtlUpdated, this.rtlUpdate, this);\n    this.parent.on(events.keyPressed, this.keyUpHandler, this);\n    this.parent.on(events.resetColumns, this.onResetColumns, this);\n  };\n  /**\n   * @hidden\n   */\n\n\n  ColumnChooser.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    EventHandler.remove(document, 'click', this.clickHandler);\n    this.parent.off(events.initialEnd, this.render);\n    this.parent.off(events.destroy, this.destroy);\n    this.parent.off(events.uiUpdate, this.enableAfterRenderEle);\n    this.parent.off(events.rtlUpdated, this.rtlUpdate);\n    this.parent.on(events.keyPressed, this.keyUpHandler, this);\n    this.parent.off(events.resetColumns, this.onResetColumns);\n  };\n\n  ColumnChooser.prototype.render = function () {\n    this.l10n = this.serviceLocator.getService('localization');\n    this.renderDlgContent();\n    this.getShowHideService = this.serviceLocator.getService('showHideService');\n  };\n\n  ColumnChooser.prototype.clickHandler = function (e) {\n    var targetElement = e.target;\n\n    if (!this.isCustomizeOpenCC) {\n      if (!isNullOrUndefined(closest(targetElement, '.e-cc')) || !isNullOrUndefined(closest(targetElement, '.e-cc-toolbar'))) {\n        if (targetElement.classList.contains('e-columnchooser-btn') || targetElement.classList.contains('e-cc-toolbar')) {\n          if (this.initialOpenDlg && this.dlgObj.visible || !this.isDlgOpen) {\n            this.isDlgOpen = true;\n            return;\n          }\n        } else if (targetElement.classList.contains('e-cc-cancel')) {\n          targetElement.parentElement.querySelector('.e-ccsearch').value = '';\n          this.columnChooserSearch('');\n          this.removeCancelIcon();\n          this.refreshCheckboxButton();\n        }\n      } else {\n        if (!isNullOrUndefined(this.dlgObj) && this.dlgObj.visible && !targetElement.classList.contains('e-toolbar-items')) {\n          this.dlgObj.hide();\n          this.clearActions();\n          this.refreshCheckboxState(); // this.unWireEvents();\n\n          this.isDlgOpen = false;\n        }\n      }\n\n      if (this.parent.detailTemplate || this.parent.childGrid) {\n        this.targetdlg = e.target;\n      }\n    }\n\n    if (this.isCustomizeOpenCC && e.target.classList.contains('e-cc-cancel')) {\n      this.refreshCheckboxState();\n    }\n\n    this.rtlUpdate();\n  };\n\n  ColumnChooser.prototype.hideDialog = function () {\n    if (!isNullOrUndefined(this.dlgObj) && this.dlgObj.visible) {\n      this.dlgObj.hide(); // this.unWireEvents();\n\n      this.isDlgOpen = false;\n    }\n  };\n  /**\n   * To render columnChooser when showColumnChooser enabled.\n   * @return {void}\n   * @hidden\n   */\n\n\n  ColumnChooser.prototype.renderColumnChooser = function (x, y, target) {\n    if (!this.dlgObj.visible && (this.parent.detailTemplate || this.parent.childGrid)) {\n      this.hideOpenedDialog();\n    }\n\n    if (!this.dlgObj.visible) {\n      var pos = {\n        X: null,\n        Y: null\n      };\n      var args = this.beforeOpenColumnChooserEvent();\n\n      if (args.cancel) {\n        return;\n      }\n\n      if (target) {\n        this.targetdlg = target;\n      }\n\n      this.refreshCheckboxState();\n      this.dlgObj.dataBind();\n      this.dlgObj.element.style.maxHeight = '430px';\n      var elementVisible = this.dlgObj.element.style.display;\n      this.dlgObj.element.style.display = 'block';\n      var newpos = calculateRelativeBasedPosition(closest(target, '.e-toolbar-item'), this.dlgObj.element);\n      this.dlgObj.element.style.display = elementVisible;\n      this.dlgObj.element.style.top = newpos.top + closest(target, '.e-cc-toolbar').getBoundingClientRect().height + 'px';\n      var dlgWidth = 250;\n\n      if (!isNullOrUndefined(closest(target, '.e-bigger'))) {\n        this.dlgObj.width = 258;\n      }\n\n      if (Browser.isDevice) {\n        this.dlgObj.target = document.body;\n        this.dlgObj.position = {\n          X: 'center',\n          Y: 'center'\n        };\n        this.dlgObj.refreshPosition();\n        this.dlgObj.open = this.mOpenDlg.bind(this);\n      } else {\n        if (this.parent.enableRtl) {\n          this.dlgObj.element.style.left = target.offsetLeft + 'px';\n        } else {\n          this.dlgObj.element.style.left = newpos.left - dlgWidth + closest(target, '.e-cc-toolbar').clientWidth + 2 + 'px';\n        }\n      }\n\n      this.removeCancelIcon();\n      this.dlgObj.show();\n      this.parent.notify(events.columnChooserOpened, {\n        dialog: this.dlgObj\n      });\n    } else {\n      // this.unWireEvents();\n      this.hideDialog();\n      this.addcancelIcon();\n      this.clearActions();\n      this.refreshCheckboxState();\n    }\n\n    this.rtlUpdate();\n  };\n  /**\n   * Column chooser can be displayed on screen by given position(X and Y axis).\n   * @param  {number} X - Defines the X axis.\n   * @param  {number} Y - Defines the Y axis.\n   * @return {void}\n   */\n\n\n  ColumnChooser.prototype.openColumnChooser = function (X, Y) {\n    this.isCustomizeOpenCC = true;\n\n    if (this.dlgObj.visible) {\n      this.hideDialog();\n      return;\n    }\n\n    var args = this.beforeOpenColumnChooserEvent();\n\n    if (args.cancel) {\n      return;\n    }\n\n    if (!this.isInitialOpen) {\n      this.dlgObj.content = this.renderChooserList();\n      this.updateIntermediateBtn();\n    } else {\n      this.refreshCheckboxState();\n    }\n\n    this.dlgObj.dataBind();\n    this.dlgObj.position = {\n      X: 'center',\n      Y: 'center'\n    };\n\n    if (isNullOrUndefined(X)) {\n      this.dlgObj.position = {\n        X: 'center',\n        Y: 'center'\n      };\n      this.dlgObj.refreshPosition();\n    } else {\n      this.dlgObj.element.style.top = '';\n      this.dlgObj.element.style.left = '';\n      this.dlgObj.element.style.top = Y + 'px';\n      this.dlgObj.element.style.left = X + 'px';\n    }\n\n    this.dlgObj.beforeOpen = this.customDialogOpen.bind(this);\n    this.dlgObj.show();\n    this.isInitialOpen = true;\n    this.dlgObj.beforeClose = this.customDialogClose.bind(this);\n  };\n\n  ColumnChooser.prototype.enableAfterRenderEle = function (e) {\n    if (e.module === this.getModuleName() && e.enable) {\n      this.render();\n    }\n  };\n\n  ColumnChooser.prototype.keyUpHandler = function (e) {\n    if (e.action === 'escape') {\n      this.hideDialog();\n    }\n  };\n\n  ColumnChooser.prototype.customDialogOpen = function () {\n    var searchElement = this.dlgObj.content.querySelector('input.e-ccsearch');\n    EventHandler.add(searchElement, 'keyup', this.columnChooserManualSearch, this);\n  };\n\n  ColumnChooser.prototype.customDialogClose = function () {\n    var searchElement = this.dlgObj.content.querySelector('input.e-ccsearch');\n    EventHandler.remove(searchElement, 'keyup', this.columnChooserManualSearch);\n  };\n\n  ColumnChooser.prototype.getColumns = function () {\n    var columns = this.parent.getColumns().filter(function (column) {\n      return column.type !== 'checkbox' && column.showInColumnChooser === true || column.type === 'checkbox' && column.field !== undefined;\n    });\n    return columns;\n  };\n\n  ColumnChooser.prototype.renderDlgContent = function () {\n    var y;\n    this.dlgDiv = this.parent.createElement('div', {\n      className: 'e-ccdlg e-cc',\n      id: this.parent.element.id + '_ccdlg'\n    });\n    this.dlgDiv.setAttribute('aria-label', this.l10n.getConstant('ColumnChooserDialogARIA'));\n    this.parent.element.appendChild(this.dlgDiv);\n    var xpos = this.parent.element.getBoundingClientRect().width - 250;\n    var dialoPos = this.parent.enableRtl ? 'left' : 'right';\n    var tarElement = this.parent.element.querySelector('.e-ccdiv');\n\n    if (!isNullOrUndefined(tarElement)) {\n      y = tarElement.getBoundingClientRect().top;\n    }\n\n    var pos = {\n      X: null,\n      Y: null\n    };\n    this.dlgObj = new Dialog({\n      header: this.l10n.getConstant('ChooseColumns'),\n      showCloseIcon: false,\n      closeOnEscape: false,\n      locale: this.parent.locale,\n      visible: false,\n      enableRtl: this.parent.enableRtl,\n      target: document.getElementById(this.parent.element.id),\n      buttons: [{\n        click: this.confirmDlgBtnClick.bind(this),\n        buttonModel: {\n          content: this.l10n.getConstant('OKButton'),\n          isPrimary: true,\n          cssClass: 'e-cc e-cc_okbtn'\n        }\n      }, {\n        click: this.clearBtnClick.bind(this),\n        buttonModel: {\n          cssClass: 'e-flat e-cc e-cc-cnbtn',\n          content: this.l10n.getConstant('CancelButton')\n        }\n      }],\n      content: this.renderChooserList(),\n      width: 250,\n      cssClass: 'e-cc',\n      animationSettings: {\n        effect: 'None'\n      }\n    });\n    var isStringTemplate = 'isStringTemplate';\n    this.dlgObj[isStringTemplate] = true;\n    this.dlgObj.appendTo(this.dlgDiv);\n    this.wireEvents();\n  };\n\n  ColumnChooser.prototype.renderChooserList = function () {\n    this.mainDiv = this.parent.createElement('div', {\n      className: 'e-main-div e-cc'\n    });\n    var searchDiv = this.parent.createElement('div', {\n      className: 'e-cc-searchdiv e-cc e-input-group'\n    });\n    var ccsearchele = this.parent.createElement('input', {\n      className: 'e-ccsearch e-cc e-input',\n      attrs: {\n        placeholder: this.l10n.getConstant('Search')\n      }\n    });\n    var ccsearchicon = this.parent.createElement('span', {\n      className: 'e-ccsearch-icon e-icons e-cc e-input-group-icon',\n      attrs: {\n        title: this.l10n.getConstant('Search')\n      }\n    });\n    var conDiv = this.parent.createElement('div', {\n      className: 'e-cc-contentdiv'\n    });\n    this.innerDiv = this.parent.createElement('div', {\n      className: 'e-innerdiv e-cc'\n    });\n    searchDiv.appendChild(ccsearchele);\n    searchDiv.appendChild(ccsearchicon);\n    this.searchBoxObj = new SearchBox(ccsearchele);\n    var innerDivContent = this.refreshCheckboxList(this.parent.getColumns());\n    this.innerDiv.appendChild(innerDivContent);\n    conDiv.appendChild(this.innerDiv);\n    this.mainDiv.appendChild(searchDiv);\n    this.mainDiv.appendChild(conDiv);\n    return this.mainDiv;\n  };\n\n  ColumnChooser.prototype.confirmDlgBtnClick = function (args) {\n    this.stateChangeColumns = [];\n    this.changedStateColumns = [];\n    this.changedColumns = this.changedColumns.length > 0 ? this.changedColumns : this.unchangedColumns;\n    this.changedColumnState(this.changedColumns);\n    var uncheckedLength = this.ulElement.querySelector('.e-uncheck') && this.ulElement.querySelectorAll('.e-uncheck:not(.e-selectall)').length;\n\n    if (!isNullOrUndefined(args)) {\n      if (uncheckedLength < this.parent.getColumns().length) {\n        if (this.hideColumn.length) {\n          this.columnStateChange(this.hideColumn, false);\n        }\n\n        if (this.showColumn.length) {\n          this.columnStateChange(this.showColumn, true);\n        }\n\n        this.getShowHideService.setVisible(this.stateChangeColumns, this.changedStateColumns);\n        this.clearActions();\n        this.parent.notify(events.tooltipDestroy, {\n          module: 'edit'\n        });\n\n        if (this.parent.getCurrentViewRecords().length === 0) {\n          var emptyRowCell = this.parent.element.querySelector('.e-emptyrow').querySelector('td');\n          emptyRowCell.setAttribute('colSpan', this.parent.getVisibleColumns().length.toString());\n        }\n      }\n    }\n  };\n\n  ColumnChooser.prototype.onResetColumns = function (e) {\n    if (e.requestType === 'columnstate') {\n      this.showColumn = [];\n      this.hideColumn = [];\n      this.hideDialog();\n      return;\n    }\n  };\n\n  ColumnChooser.prototype.resetColumnState = function () {\n    this.showColumn = [];\n    this.hideColumn = [];\n    this.hideDialog();\n  };\n\n  ColumnChooser.prototype.changedColumnState = function (changedColumns) {\n    for (var index = 0; index < changedColumns.length; index++) {\n      var colUid = changedColumns[index];\n      var currentCol = this.parent.getColumnByUid(colUid);\n      isBlazor() ? this.changedStateColumns.push(JSON.parse(JSON.stringify(currentCol))) : this.changedStateColumns.push(currentCol);\n    }\n  };\n\n  ColumnChooser.prototype.columnStateChange = function (stateColumns, state) {\n    for (var index = 0; index < stateColumns.length; index++) {\n      var colUid = stateColumns[index];\n      var currentCol = this.parent.getColumnByUid(colUid);\n\n      if (currentCol.type !== 'checkbox') {\n        currentCol.visible = state;\n      }\n\n      isBlazor() ? this.stateChangeColumns.push(JSON.parse(JSON.stringify(currentCol))) : this.stateChangeColumns.push(currentCol);\n    }\n  };\n\n  ColumnChooser.prototype.clearActions = function () {\n    this.hideColumn = [];\n    this.showColumn = []; // this.unWireEvents();\n\n    this.hideDialog();\n    this.addcancelIcon();\n  };\n\n  ColumnChooser.prototype.clearBtnClick = function () {\n    this.clearActions();\n    this.parent.notify(events.columnChooserCancelBtnClick, {\n      dialog: this.dlgObj\n    });\n  };\n\n  ColumnChooser.prototype.checkstatecolumn = function (isChecked, coluid, selectAll) {\n    if (selectAll === void 0) {\n      selectAll = false;\n    }\n\n    if (isChecked) {\n      if (this.hideColumn.indexOf(coluid) !== -1) {\n        this.hideColumn.splice(this.hideColumn.indexOf(coluid), 1);\n      }\n\n      if (this.showColumn.indexOf(coluid) === -1) {\n        this.showColumn.push(coluid);\n      }\n    } else {\n      if (this.showColumn.indexOf(coluid) !== -1) {\n        this.showColumn.splice(this.showColumn.indexOf(coluid), 1);\n      }\n\n      if (this.hideColumn.indexOf(coluid) === -1) {\n        this.hideColumn.push(coluid);\n      }\n    }\n\n    if (selectAll) {\n      if (!isChecked) {\n        this.changedColumns.push(coluid);\n      } else {\n        this.unchangedColumns.push(coluid);\n      }\n    } else if (this.changedColumns.indexOf(coluid) !== -1) {\n      this.changedColumns.splice(this.changedColumns.indexOf(coluid), 1);\n    } else {\n      this.changedColumns.push(coluid);\n    }\n  };\n\n  ColumnChooser.prototype.columnChooserSearch = function (searchVal) {\n    var clearSearch = false;\n    var fltrCol;\n    var okButton;\n    var buttonEle = this.dlgDiv.querySelector('.e-footer-content');\n    var selectedCbox = this.ulElement.querySelector('.e-check') && this.ulElement.querySelectorAll('.e-check:not(.e-selectall)').length;\n    this.isInitialOpen = true;\n\n    if (buttonEle) {\n      okButton = buttonEle.querySelector('.e-btn').ej2_instances[0];\n    }\n\n    if (searchVal === '') {\n      this.removeCancelIcon();\n      fltrCol = this.getColumns();\n      clearSearch = true;\n    } else {\n      fltrCol = new DataManager(this.getColumns()).executeLocal(new Query().where('headerText', this.searchOperator, searchVal, true));\n    }\n\n    if (fltrCol.length) {\n      this.innerDiv.innerHTML = ' ';\n      this.innerDiv.classList.remove('e-ccnmdiv');\n      this.innerDiv.appendChild(this.refreshCheckboxList(fltrCol, searchVal));\n\n      if (!clearSearch) {\n        this.addcancelIcon();\n        this.refreshCheckboxButton();\n      } else {\n        if (okButton && selectedCbox) {\n          okButton.disabled = false;\n        }\n      }\n    } else {\n      var nMatchele = this.parent.createElement('span', {\n        className: 'e-cc e-nmatch'\n      });\n      nMatchele.innerHTML = this.l10n.getConstant('Matchs');\n      this.innerDiv.innerHTML = ' ';\n      this.innerDiv.appendChild(nMatchele);\n      this.innerDiv.classList.add('e-ccnmdiv');\n\n      if (okButton) {\n        okButton.disabled = true;\n      }\n    }\n\n    this.flag = true;\n    this.stopTimer();\n  };\n\n  ColumnChooser.prototype.wireEvents = function () {\n    EventHandler.add(this.dlgObj.element, 'click', this.checkBoxClickHandler, this);\n    EventHandler.add(this.searchBoxObj.searchBox, 'keyup', this.columnChooserManualSearch, this);\n    this.searchBoxObj.wireEvent();\n  };\n\n  ColumnChooser.prototype.unWireEvents = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    if (this.dlgObj.element) {\n      EventHandler.remove(this.dlgObj.element, 'click', this.checkBoxClickHandler);\n    }\n\n    EventHandler.remove(this.searchBoxObj.searchBox, 'keyup', this.columnChooserManualSearch);\n    this.searchBoxObj.unWireEvent();\n  };\n\n  ColumnChooser.prototype.checkBoxClickHandler = function (e) {\n    var checkstate;\n    var elem = parentsUntil(e.target, 'e-checkbox-wrapper');\n\n    if (elem) {\n      var selectAll = elem.querySelector('.e-selectall');\n\n      if (selectAll) {\n        this.updateSelectAll(!elem.querySelector('.e-check'));\n      } else {\n        toogleCheckbox(elem.parentElement);\n      }\n\n      elem.querySelector('.e-chk-hidden').focus();\n\n      if (elem.querySelector('.e-check')) {\n        checkstate = true;\n      } else if (elem.querySelector('.e-uncheck')) {\n        checkstate = false;\n      } else {\n        return;\n      }\n\n      this.updateIntermediateBtn();\n      var columnUid = parentsUntil(elem, 'e-ccheck').getAttribute('uid');\n      var column = this.parent.getColumns();\n\n      if (columnUid === 'grid-selectAll') {\n        this.changedColumns = [];\n        this.unchangedColumns = [];\n\n        for (var i = 0; i < column.length; i++) {\n          if (column[i].showInColumnChooser) {\n            this.checkstatecolumn(checkstate, column[i].uid, true);\n          }\n        }\n      } else {\n        this.checkstatecolumn(checkstate, columnUid);\n      }\n\n      this.refreshCheckboxButton();\n    }\n  };\n\n  ColumnChooser.prototype.updateIntermediateBtn = function () {\n    var cnt = this.ulElement.children.length - 1;\n    var className = [];\n    var elem = this.ulElement.children[0].querySelector('.e-frame');\n    var selected = this.ulElement.querySelectorAll('.e-check:not(.e-selectall)').length;\n    var btn = this.dlgObj.btnObj[0];\n    btn.disabled = false;\n\n    if (cnt === selected) {\n      className = ['e-check'];\n    } else if (selected) {\n      className = ['e-stop'];\n    } else {\n      className = ['e-uncheck'];\n      btn.disabled = true;\n    }\n\n    btn.dataBind();\n    removeClass([elem], ['e-check', 'e-stop', 'e-uncheck']);\n    addClass([elem], className);\n  };\n\n  ColumnChooser.prototype.updateSelectAll = function (checked) {\n    var cBoxes = [].slice.call(this.ulElement.querySelectorAll('.e-frame'));\n\n    for (var _i = 0, cBoxes_1 = cBoxes; _i < cBoxes_1.length; _i++) {\n      var cBox = cBoxes_1[_i];\n      removeAddCboxClasses(cBox, checked);\n    }\n  };\n\n  ColumnChooser.prototype.refreshCheckboxButton = function () {\n    var searchValue = this.dlgObj.element.querySelector('.e-cc.e-input').value;\n    var visibleCols = this.parent.getVisibleColumns();\n\n    for (var i = 0; i < visibleCols.length; i++) {\n      var columnUID = visibleCols[i].uid;\n\n      if (this.prevShowedCols.indexOf(columnUID) === -1) {\n        this.prevShowedCols.push(columnUID);\n      }\n    }\n\n    var selected;\n\n    for (var i = 0; i < this.hideColumn.length; i++) {\n      var index = this.prevShowedCols.indexOf(this.hideColumn[i]);\n\n      if (index !== -1) {\n        this.prevShowedCols.splice(index, 1);\n      }\n    }\n\n    selected = this.showColumn.length !== 0 ? 1 : this.prevShowedCols.length;\n    var btn = this.dlgDiv.querySelector('.e-footer-content').querySelector('.e-btn').ej2_instances[0];\n    btn.disabled = false;\n    var srchShowCols = [];\n    var searchData = this.parent.element.querySelectorAll('.e-cc-chbox');\n\n    for (var i = 0, itemsLen = searchData.length; i < itemsLen; i++) {\n      var element = searchData[i];\n      var columnUID = parentsUntil(element, 'e-ccheck').getAttribute('uid');\n      srchShowCols.push(columnUID);\n    }\n\n    var hideCols = this.showColumn.filter(function (column) {\n      return srchShowCols.indexOf(column) !== -1;\n    });\n\n    if (selected === 0 && hideCols.length === 0) {\n      btn.disabled = true;\n    }\n\n    btn.dataBind();\n  };\n\n  ColumnChooser.prototype.refreshCheckboxList = function (gdCol, searchVal) {\n    this.ulElement = this.parent.createElement('ul', {\n      className: 'e-ccul-ele e-cc'\n    });\n    var selectAllValue = this.l10n.getConstant('SelectAll');\n    var cclist = this.parent.createElement('li', {\n      className: 'e-cclist e-cc e-cc-selectall'\n    });\n    var selectAll = this.createCheckBox(selectAllValue, false, 'grid-selectAll');\n\n    if (gdCol.length) {\n      selectAll.querySelector('.e-checkbox-wrapper').firstElementChild.classList.add('e-selectall');\n      selectAll.querySelector('.e-frame').classList.add('e-selectall');\n      this.checkState(selectAll.querySelector('.e-icons'), true);\n      cclist.appendChild(selectAll);\n      this.ulElement.appendChild(cclist);\n    }\n\n    for (var i = 0; i < gdCol.length; i++) {\n      var columns = gdCol[i];\n      this.renderCheckbox(columns);\n    }\n\n    return this.ulElement;\n  };\n\n  ColumnChooser.prototype.refreshCheckboxState = function () {\n    this.dlgObj.element.querySelector('.e-cc.e-input').value = '';\n    this.columnChooserSearch('');\n    var gridObject = this.parent;\n    var currentCheckBoxColls = this.dlgObj.element.querySelectorAll('.e-cc-chbox:not(.e-selectall)');\n\n    for (var i = 0, itemLen = currentCheckBoxColls.length; i < itemLen; i++) {\n      var element = currentCheckBoxColls[i];\n      var columnUID = void 0;\n\n      if (this.parent.childGrid || this.parent.detailTemplate) {\n        columnUID = parentsUntil(this.dlgObj.element.querySelectorAll('.e-cc-chbox:not(.e-selectall)')[i], 'e-ccheck').getAttribute('uid');\n      } else {\n        columnUID = parentsUntil(element, 'e-ccheck').getAttribute('uid');\n      }\n\n      var column = gridObject.getColumnByUid(columnUID);\n      var uncheck = element.parentElement.querySelectorAll('.e-uncheck');\n\n      if (column.visible && !uncheck.length) {\n        element.checked = true;\n        this.checkState(element.parentElement.querySelector('.e-icons'), true);\n      } else {\n        element.checked = false;\n        this.checkState(element.parentElement.querySelector('.e-icons'), false);\n      }\n    }\n  };\n\n  ColumnChooser.prototype.checkState = function (element, state) {\n    state ? classList(element, ['e-check'], ['e-uncheck']) : classList(element, ['e-uncheck'], ['e-check']);\n  };\n\n  ColumnChooser.prototype.createCheckBox = function (label, checked, uid) {\n    var cbox = checked ? this.cBoxTrue.cloneNode(true) : this.cBoxFalse.cloneNode(true);\n    cbox.querySelector('.e-label').innerHTML = label;\n    return createCboxWithWrap(uid, cbox, 'e-ccheck');\n  };\n\n  ColumnChooser.prototype.renderCheckbox = function (column) {\n    var cclist;\n    var hideColState;\n    var showColState;\n    var checkBoxObj;\n\n    if (column.showInColumnChooser) {\n      cclist = this.parent.createElement('li', {\n        className: 'e-cclist e-cc',\n        styles: 'list-style:None',\n        id: 'e-ccli_' + column.uid\n      });\n      hideColState = this.hideColumn.indexOf(column.uid) === -1 ? false : true;\n      showColState = this.showColumn.indexOf(column.uid) === -1 ? false : true;\n      var cccheckboxlist = this.createCheckBox(column.headerText, column.visible && !hideColState || showColState, column.uid);\n      cclist.appendChild(cccheckboxlist);\n      this.ulElement.appendChild(cclist);\n    }\n\n    if (this.isInitialOpen) {\n      this.updateIntermediateBtn();\n    }\n  };\n\n  ColumnChooser.prototype.columnChooserManualSearch = function (e) {\n    this.addcancelIcon();\n    this.searchValue = e.target.value;\n    var proxy = this;\n    this.stopTimer();\n    this.startTimer(e);\n  };\n\n  ColumnChooser.prototype.startTimer = function (e) {\n    var proxy = this;\n    var interval = !proxy.flag && e.keyCode !== 13 ? 500 : 0;\n    this.timer = window.setInterval(function () {\n      proxy.columnChooserSearch(proxy.searchValue);\n    }, interval);\n  };\n\n  ColumnChooser.prototype.stopTimer = function () {\n    window.clearInterval(this.timer);\n  };\n\n  ColumnChooser.prototype.addcancelIcon = function () {\n    this.dlgDiv.querySelector('.e-cc.e-ccsearch-icon').classList.add('e-cc-cancel');\n  };\n\n  ColumnChooser.prototype.removeCancelIcon = function () {\n    this.dlgDiv.querySelector('.e-cc.e-ccsearch-icon').classList.remove('e-cc-cancel');\n  };\n\n  ColumnChooser.prototype.mOpenDlg = function () {\n    if (Browser.isDevice) {\n      this.dlgObj.element.querySelector('.e-cc-searchdiv').classList.remove('e-input-focus');\n      this.dlgObj.element.querySelectorAll('.e-cc-chbox')[0].focus();\n    }\n  }; // internally use\n\n\n  ColumnChooser.prototype.getModuleName = function () {\n    return 'columnChooser';\n  };\n\n  ColumnChooser.prototype.hideOpenedDialog = function () {\n    var openCC = [].slice.call(document.getElementsByClassName('e-ccdlg')).filter(function (dlgEle) {\n      return dlgEle.classList.contains('e-popup-open');\n    });\n\n    for (var i = 0, dlgLen = openCC.length; i < dlgLen; i++) {\n      if (openCC[i].classList.contains('e-dialog') || this.parent.element.id + '_ccdlg' !== openCC[i].id) {\n        openCC[i].ej2_instances[0].hide();\n      }\n    }\n  };\n\n  ColumnChooser.prototype.beforeOpenColumnChooserEvent = function () {\n    if (isBlazor() && this.parent.isServerRendered && this.parent.columnChooserSettings.operator === 'none') {\n      this.parent.columnChooserSettings.operator = 'startsWith';\n    }\n\n    var args1 = {\n      requestType: 'beforeOpenColumnChooser',\n      element: this.parent.element,\n      columns: this.getColumns(),\n      cancel: false,\n      searchOperator: this.parent.columnChooserSettings.operator\n    };\n\n    if (isBlazor() && !this.parent.isJsComponent) {\n      args1 = {\n        requestType: 'beforeOpenColumnChooser',\n        cancel: false,\n        searchOperator: this.parent.columnChooserSettings.operator\n      };\n    }\n\n    this.parent.trigger(events.beforeOpenColumnChooser, args1);\n    this.searchOperator = args1.searchOperator;\n    return args1;\n  };\n\n  return ColumnChooser;\n}();\n\nexport { ColumnChooser };","map":null,"metadata":{},"sourceType":"module"}