{"ast":null,"code":"import { Dialog } from '@syncfusion/ej2-popups';\nimport { remove, extend, updateBlazorTemplate, isBlazor } from '@syncfusion/ej2-base';\nimport * as events from '../base/constant';\nimport { appendChildren, applyBiggerTheme } from '../base/util';\n/**\n * Edit render module is used to render grid edit row.\n * @hidden\n */\n\nvar DialogEditRender =\n/** @class */\nfunction () {\n  /**\n   * Constructor for render module\n   */\n  function DialogEditRender(parent, serviceLocator) {\n    this.parent = parent;\n    this.serviceLocator = serviceLocator;\n\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.on(events.dialogDestroy, this.destroy, this);\n    this.parent.on(events.destroy, this.destroy, this);\n  }\n\n  DialogEditRender.prototype.setLocaleObj = function () {\n    this.l10n = this.serviceLocator.getService('localization');\n  };\n\n  DialogEditRender.prototype.addNew = function (elements, args) {\n    this.isEdit = false;\n    this.createDialog(elements, args);\n  };\n\n  DialogEditRender.prototype.update = function (elements, args) {\n    this.isEdit = true;\n    this.createDialog(elements, args);\n  };\n\n  DialogEditRender.prototype.createDialog = function (elements, args) {\n    var gObj = this.parent;\n    this.dialog = this.parent.createElement('div', {\n      id: gObj.element.id + '_dialogEdit_wrapper',\n      styles: 'width: auto'\n    });\n    this.dialog.setAttribute('aria-label', 'Dialog edit');\n    gObj.element.appendChild(this.dialog);\n    this.setLocaleObj(); // let position: PositionDataModel = this.parent.element.getBoundingClientRect().height < 400 ?\n    //     { X: 'center', Y: 'top' } : { X: 'center', Y: 'center' };\n\n    this.dialogObj = new Dialog(extend({\n      header: gObj.editSettings.headerTemplate ? this.getDialogEditTemplateElement('HeaderTemplate', args) : this.isEdit ? this.l10n.getConstant('EditFormTitle') + args.primaryKeyValue[0] : this.l10n.getConstant('AddFormTitle'),\n      isModal: true,\n      visible: true,\n      cssClass: 'e-edit-dialog',\n      content: this.getEditElement(elements, args),\n      showCloseIcon: true,\n      allowDragging: true,\n      // position: position,\n      close: this.dialogClose.bind(this),\n      closeOnEscape: true,\n      width: gObj.editSettings.template ? 'auto' : '330px',\n      target: args.target ? args.target : document.body,\n      animationSettings: {\n        effect: 'None'\n      },\n      footerTemplate: gObj.editSettings.footerTemplate ? this.getDialogEditTemplateElement('FooterTemplate', args) : null,\n      buttons: [{\n        click: this.btnClick.bind(this),\n        buttonModel: {\n          content: this.l10n.getConstant('SaveButton'),\n          cssClass: 'e-primary',\n          isPrimary: true\n        }\n      }, {\n        click: this.btnClick.bind(this),\n        buttonModel: {\n          cssClass: 'e-flat',\n          content: this.l10n.getConstant('CancelButton')\n        }\n      }]\n    }, gObj.editSettings.dialog ? gObj.editSettings.dialog.params || {} : {}));\n\n    if (!isBlazor()) {\n      args.dialog = this.dialogObj;\n    } else {\n      this.dialogObj.locale = this.parent.locale;\n    }\n\n    var isStringTemplate = 'isStringTemplate';\n    this.dialogObj[isStringTemplate] = true;\n    this.dialogObj.appendTo(this.dialog);\n    applyBiggerTheme(this.parent.element, this.dialogObj.element.parentElement);\n  };\n\n  DialogEditRender.prototype.btnClick = function (e) {\n    if (this.l10n.getConstant('CancelButton').toLowerCase() === e.target.innerText.trim().toLowerCase()) {\n      this.dialogClose();\n    } else {\n      this.parent.endEdit();\n    }\n  };\n\n  DialogEditRender.prototype.dialogClose = function () {\n    this.parent.closeEdit();\n  };\n\n  DialogEditRender.prototype.destroy = function (args) {\n    var dialogEditTemplates = ['template', 'headerTemplate', 'footerTemplate'];\n\n    for (var i = 0; i < dialogEditTemplates.length; i++) {\n      if (this.parent.editSettings[dialogEditTemplates[i]]) {\n        var templateName = dialogEditTemplates[i].charAt(0).toUpperCase() + dialogEditTemplates[i].slice(1);\n        var editTemplateID = this.parent.element.id + 'editSettings' + templateName;\n        updateBlazorTemplate(editTemplateID, templateName, this.parent.editSettings);\n      }\n    }\n\n    this.parent.notify(events.destroyForm, {});\n    this.parent.isEdit = false;\n    this.parent.notify(events.toolbarRefresh, {});\n\n    if (this.dialog && !this.dialogObj.isDestroyed) {\n      this.dialogObj.destroy();\n      remove(this.dialog);\n    }\n  };\n\n  DialogEditRender.prototype.getDialogEditTemplateElement = function (dialogTemp, args) {\n    var tempDiv = this.parent.createElement('div', {\n      className: 'e-dialog' + dialogTemp\n    });\n    var dummyData = extend({}, args.rowData, {\n      isAdd: !this.isEdit\n    }, true);\n    var templateID = this.parent.element.id + 'editSettings' + dialogTemp;\n    appendChildren(tempDiv, this.parent.getEditHeaderTemplate()(dummyData, this.parent, 'editSettings' + dialogTemp, templateID));\n    updateBlazorTemplate(templateID, dialogTemp, this.parent.editSettings);\n    return tempDiv;\n  };\n\n  DialogEditRender.prototype.getEditElement = function (elements, args) {\n    var _this = this;\n\n    var gObj = this.parent;\n    var div = this.parent.createElement('div', {\n      className: this.isEdit ? 'e-editedrow' : 'e-insertedrow'\n    });\n    var form = args.form = this.parent.createElement('form', {\n      id: gObj.element.id + 'EditForm',\n      className: 'e-gridform'\n    });\n\n    if (this.parent.editSettings.template) {\n      var editTemplateID = this.parent.element.id + 'editSettingsTemplate';\n      var dummyData = extend({}, args.rowData, {\n        isAdd: !this.isEdit\n      }, true);\n      appendChildren(form, this.parent.getEditTemplate()(dummyData, this.parent, 'editSettingsTemplate', editTemplateID));\n\n      var setRules = function () {\n        var columns = _this.parent.getColumns();\n\n        for (var i = 0; i < columns.length; i++) {\n          if (columns[i].validationRules) {\n            _this.parent.editModule.formObj.rules[columns[i].field] = columns[i].validationRules;\n          }\n        }\n      };\n\n      updateBlazorTemplate(editTemplateID, 'Template', this.parent.editSettings, true, setRules);\n      div.appendChild(form);\n      return div;\n    }\n\n    var table = this.parent.createElement('table', {\n      className: 'e-table',\n      attrs: {\n        cellspacing: '6px'\n      }\n    });\n    var tbody = this.parent.createElement('tbody');\n    var cols = gObj.getColumns();\n\n    for (var i = 0; i < cols.length; i++) {\n      if (this.parent.editModule.checkColumnIsGrouped(cols[i]) || cols[i].commands || cols[i].commandsTemplate) {\n        continue;\n      }\n\n      var tr = this.parent.createElement('tr');\n      var dataCell = this.parent.createElement('td', {\n        className: 'e-rowcell',\n        attrs: {\n          style: 'text-align:' + (this.parent.enableRtl ? 'right' : 'left') + ';width:190px'\n        }\n      });\n      var label = this.parent.createElement('label', {\n        innerHTML: cols[i].field\n      });\n      elements[cols[i].uid].classList.remove('e-input');\n      dataCell.appendChild(elements[cols[i].uid]);\n      tr.appendChild(dataCell);\n      tbody.appendChild(tr);\n    }\n\n    table.appendChild(tbody);\n    form.appendChild(table);\n    div.appendChild(form);\n    return div;\n  };\n\n  DialogEditRender.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(events.dialogDestroy, this.destroy);\n    this.parent.off(events.destroy, this.destroy);\n  };\n\n  return DialogEditRender;\n}();\n\nexport { DialogEditRender };","map":null,"metadata":{},"sourceType":"module"}