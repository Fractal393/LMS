{"ast":null,"code":"import { isNullOrUndefined, extend, addClass } from '@syncfusion/ej2-base';\nimport { attributes as addAttributes } from '@syncfusion/ej2-base';\nimport { rowDataBound, queryCellInfo } from '../base/constant';\nimport { setStyleAndAttributes, getObject, extendObjWithFn } from '../base/util';\nimport { CellType } from '../base/enum';\nimport { CellMergeRender } from './cell-merge-renderer';\n/**\n * RowRenderer class which responsible for building row content.\n * @hidden\n */\n\nvar RowRenderer =\n/** @class */\nfunction () {\n  function RowRenderer(serviceLocator, cellType, parent) {\n    this.isSpan = false;\n    this.cellType = cellType;\n    this.serviceLocator = serviceLocator;\n    this.parent = parent;\n    this.element = this.parent.createElement('tr', {\n      attrs: {\n        role: 'row'\n      }\n    });\n  }\n  /**\n   * Function to render the row content based on Column[] and data.\n   * @param  {Column[]} columns\n   * @param  {Object} data?\n   * @param  {{[x:string]:Object}} attributes?\n   * @param  {string} rowTemplate?\n   */\n\n\n  RowRenderer.prototype.render = function (row, columns, attributes, rowTemplate, cloneNode) {\n    return this.refreshRow(row, columns, attributes, rowTemplate, cloneNode);\n  };\n  /**\n   * Function to refresh the row content based on Column[] and data.\n   * @param  {Column[]} columns\n   * @param  {Object} data?\n   * @param  {{[x:string]:Object}} attributes?\n   * @param  {string} rowTemplate?\n   */\n\n\n  RowRenderer.prototype.refresh = function (row, columns, isChanged, attributes, rowTemplate) {\n    if (isChanged) {\n      row.data = extendObjWithFn({}, row.changes);\n      this.refreshMergeCells(row);\n    }\n\n    var node = this.parent.element.querySelector('[data-uid=' + row.uid + ']');\n    var tr = this.refreshRow(row, columns, attributes, rowTemplate, null, isChanged);\n    var cells = [].slice.call(tr.cells);\n    node.innerHTML = '';\n\n    for (var _i = 0, cells_1 = cells; _i < cells_1.length; _i++) {\n      var cell = cells_1[_i];\n      node.appendChild(cell);\n    }\n  };\n\n  RowRenderer.prototype.refreshRow = function (row, columns, attributes, rowTemplate, cloneNode, isEdit) {\n    var tr = !isNullOrUndefined(cloneNode) ? cloneNode : this.element.cloneNode();\n    var rowArgs = {\n      data: row.data\n    };\n    var cellArgs = {\n      data: row.data\n    };\n    var attrCopy = extend({}, attributes, {});\n    var chekBoxEnable = this.parent.getColumns().filter(function (col) {\n      return col.type === 'checkbox' && col.field;\n    })[0];\n    var value = false;\n\n    if (chekBoxEnable) {\n      value = getObject(chekBoxEnable.field, rowArgs.data);\n    }\n\n    if (row.isDataRow) {\n      row.isSelected = this.parent.getSelectedRowIndexes().indexOf(row.index) > -1 || value;\n    }\n\n    if (row.isDataRow && this.parent.isCheckBoxSelection && this.parent.checkAllRows === 'Check' && this.parent.enableVirtualization) {\n      row.isSelected = true;\n\n      if (this.parent.getSelectedRowIndexes().indexOf(row.index) === -1) {\n        this.parent.getSelectedRowIndexes().push(row.index);\n      }\n    }\n\n    this.buildAttributeFromRow(tr, row);\n    addAttributes(tr, attrCopy);\n    setStyleAndAttributes(tr, row.attributes);\n    var cellRendererFact = this.serviceLocator.getService('cellRendererFactory');\n\n    var _loop_1 = function (i, len) {\n      var cell = row.cells[i];\n      cell.isSelected = row.isSelected;\n      var cellRenderer = cellRendererFact.getCellRenderer(row.cells[i].cellType || CellType.Data);\n      var attrs = {\n        'index': !isNullOrUndefined(row.index) ? row.index.toString() : ''\n      };\n\n      if (row.isExpand && row.cells[i].cellType === CellType.DetailExpand) {\n        attrs['class'] = this_1.parent.isPrinting ? 'e-detailrowcollapse' : 'e-detailrowexpand';\n      }\n\n      var td = cellRenderer.render(row.cells[i], row.data, attrs, row.isExpand, isEdit);\n\n      if (row.cells[i].cellType !== CellType.Filter) {\n        if (row.cells[i].cellType === CellType.Data || row.cells[i].cellType === CellType.CommandColumn) {\n          this_1.parent.trigger(queryCellInfo, extend(cellArgs, {\n            cell: td,\n            column: cell.column,\n            colSpan: 1,\n            rowSpan: 1,\n            foreignKeyData: row.cells[i].foreignKeyData,\n            requestType: this_1.parent.requestTypeAction\n          }));\n          var isRowSpanned = false;\n\n          if (row.index > 0 && this_1.isSpan) {\n            var prevRowCells = this_1.parent.groupSettings.columns.length > 0 && !this_1.parent.getRowsObject()[row.index - 1].isDataRow ? this_1.parent.getRowsObject()[row.index].cells : this_1.parent.getRowsObject()[row.index - 1].cells;\n            var uid_1 = 'uid';\n            var prevRowCell = prevRowCells.filter(function (cell) {\n              return cell.column.uid === row.cells[i].column[uid_1];\n            })[0];\n            isRowSpanned = prevRowCell.isRowSpanned ? prevRowCell.isRowSpanned : prevRowCell.rowSpanRange > 1;\n          }\n\n          if (cellArgs.colSpan > 1 || row.cells[i].cellSpan > 1 || cellArgs.rowSpan > 1 || isRowSpanned) {\n            this_1.isSpan = true;\n            var cellMerge = new CellMergeRender(this_1.serviceLocator, this_1.parent);\n            td = cellMerge.render(cellArgs, row, i, td);\n          }\n        }\n\n        if (!row.cells[i].isSpanned) {\n          tr.appendChild(td);\n        }\n      }\n    };\n\n    var this_1 = this;\n\n    for (var i = 0, len = row.cells.length; i < len; i++) {\n      _loop_1(i, len);\n    }\n\n    var args = {\n      row: tr,\n      rowHeight: this.parent.rowHeight\n    };\n\n    if (row.isDataRow) {\n      this.parent.trigger(rowDataBound, extend(rowArgs, args));\n\n      if (this.parent.childGrid || this.parent.isRowDragable() || this.parent.detailTemplate) {\n        var td = tr.querySelectorAll('.e-rowcell:not(.e-hide)')[0];\n\n        if (td) {\n          td.classList.add('e-detailrowvisible');\n        }\n      }\n    }\n\n    if (this.parent.enableVirtualization) {\n      rowArgs.rowHeight = this.parent.rowHeight;\n    }\n\n    if (rowArgs.rowHeight) {\n      tr.style.height = rowArgs.rowHeight + 'px';\n    } else if (this.parent.rowHeight && (tr.querySelector('.e-headercell') || tr.querySelector('.e-groupcaption'))) {\n      tr.style.height = this.parent.rowHeight + 'px';\n    }\n\n    if (row.cssClass) {\n      tr.classList.add(row.cssClass);\n    }\n\n    var vFTable = this.parent.enableColumnVirtualization && this.parent.frozenColumns !== 0;\n\n    if (!vFTable && this.parent.element.scrollHeight > this.parent.height && this.parent.aggregates.length) {\n      for (var i = 0; i < this.parent.aggregates.length; i++) {\n        var property = 'properties';\n        var column = 'columns';\n\n        if (this.parent.aggregates[i][property][column][0].footerTemplate) {\n          var summarycell = tr.querySelectorAll('.e-summarycell');\n\n          if (summarycell.length) {\n            var lastSummaryCell = summarycell[summarycell.length - 1];\n            addClass([lastSummaryCell], ['e-lastsummarycell']);\n          }\n        }\n      }\n    }\n\n    return tr;\n  };\n\n  RowRenderer.prototype.refreshMergeCells = function (row) {\n    for (var _i = 0, _a = row.cells; _i < _a.length; _i++) {\n      var cell = _a[_i];\n      cell.isSpanned = false;\n    }\n\n    return row;\n  };\n  /**\n   * Function to check and add alternative row css class.\n   * @param  {Element} tr\n   * @param  {{[x:string]:Object}} attr\n   */\n\n\n  RowRenderer.prototype.buildAttributeFromRow = function (tr, row) {\n    var attr = {};\n    var prop = {\n      'rowindex': 'aria-rowindex',\n      'dataUID': 'data-uid',\n      'ariaSelected': 'aria-selected'\n    };\n    var classes = [];\n\n    if (row.isDataRow) {\n      classes.push('e-row');\n    }\n\n    if (row.isAltRow) {\n      classes.push('e-altrow');\n    }\n\n    if (!isNullOrUndefined(row.index)) {\n      attr[prop.rowindex] = row.index;\n    }\n\n    if (row.rowSpan) {\n      attr.rowSpan = row.rowSpan;\n    }\n\n    if (row.uid) {\n      attr[prop.dataUID] = row.uid;\n    }\n\n    if (row.isSelected) {\n      attr[prop.ariaSelected] = true;\n    }\n\n    if (row.visible === false) {\n      classes.push('e-hide');\n    }\n\n    attr.class = classes;\n    setStyleAndAttributes(tr, attr);\n  };\n\n  return RowRenderer;\n}();\n\nexport { RowRenderer };","map":null,"metadata":{},"sourceType":"module"}