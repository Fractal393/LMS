{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * PdfPageLayerCollection.ts class for EJ2-PDF\n */\n\n\nimport { PdfPageBase } from './pdf-page-base';\nimport { PdfDictionary } from './../primitives/pdf-dictionary';\nimport { PdfPageLayer } from './pdf-page-layer';\nimport { PdfCollection } from './../general/pdf-collection';\nimport { PdfReferenceHolder } from './../primitives/pdf-reference';\nimport { PdfStream } from './../primitives/pdf-stream';\n/**\n * The class provides methods and properties to handle the collections of `PdfPageLayer`.\n */\n\nvar PdfPageLayerCollection =\n/** @class */\nfunction (_super) {\n  __extends(PdfPageLayerCollection, _super);\n\n  function PdfPageLayerCollection(page) {\n    var _this = _super.call(this) || this;\n    /**\n     * Stores the `number of first level layers` in the document.\n     * @default 0\n     * @private\n     */\n\n\n    _this.parentLayerCount = 0;\n    /**\n     * Indicates if `Sublayer` is present.\n     * @default false\n     * @private\n     */\n\n    _this.sublayer = false;\n    /**\n     * Stores the `optional content dictionary`.\n     * @private\n     */\n\n    _this.optionalContent = new PdfDictionary();\n\n    if (page instanceof PdfPageBase) {\n      // if (page == null) {\n      //     throw new Error('ArgumentNullException:page');\n      // }\n      _this.page = page;\n      var lPage = page; // if (lPage != null) {\n\n      _this.parseLayers(lPage); // }\n\n    }\n\n    return _this;\n  }\n\n  PdfPageLayerCollection.prototype.items = function (index, value) {\n    if (typeof index === 'number' && typeof value === 'undefined') {\n      var obj = this.list[index];\n      return obj;\n    } else {\n      if (value == null) {\n        throw new Error('ArgumentNullException: layer');\n      }\n\n      if (value.page !== this.page) {\n        throw new Error('ArgumentException: The layer belongs to another page');\n      } // // Add/remove the layer.\n      // let layer : PdfPageLayer = this.items(index);\n      // if (layer != null) {\n      //     this.RemoveLayer(layer);\n      // }\n      // this.List[index] = value;\n      // this.InsertLayer(index, value);\n\n    }\n  };\n\n  PdfPageLayerCollection.prototype.add = function (firstArgument, secondArgument) {\n    if (typeof firstArgument === 'undefined') {\n      var layer = new PdfPageLayer(this.page);\n      layer.name = '';\n      this.add(layer);\n      return layer;\n    } else if (firstArgument instanceof PdfPageLayer) {\n      // if (layer == null)\n      //     throw new ArgumentNullException(\"layer\");\n      // if (layer.Page != m_page)\n      //     throw new ArgumentException(\"The layer belongs to another page\");\n      var index = this.list.push(firstArgument); // Register layer.\n\n      this.addLayer(index, firstArgument);\n      return index;\n    } else {\n      return 0;\n    }\n  };\n  /**\n   * Registers `layer` at the page.\n   * @private\n   */\n\n\n  PdfPageLayerCollection.prototype.addLayer = function (index, layer) {\n    var reference = new PdfReferenceHolder(layer);\n    this.page.contents.add(reference);\n  }; // private RemoveLayer(layer : PdfPageLayer) : void {\n  //     if (layer == null) {\n  //         throw new Error('ArgumentNullException:layer');\n  //     }\n  //     let reference : PdfReferenceHolder = new PdfReferenceHolder(layer);\n  //     if (this.page != null) {\n  //         this.page.Contents.Remove(reference);\n  //     }\n  // }\n\n  /**\n   * Inserts `PdfPageLayer` into the collection at specified index.\n   * @private\n   */\n\n\n  PdfPageLayerCollection.prototype.insert = function (index, layer) {\n    // if (index < 0)\n    //     throw new ArgumentOutOfRangeException(\"index\", \"Value can not be less 0\");\n    // if (layer == null)\n    //     throw new ArgumentNullException(\"layer\");\n    // if (layer.Page != m_page)\n    //     throw new ArgumentException(\"The layer belongs to another page\");\n    var list = [];\n    var length = this.list.length;\n\n    for (var i = index; i < length; i++) {\n      list.push(this.list.pop());\n    }\n\n    this.list.push(layer);\n\n    for (var i = 0; i < list.length; i++) {\n      this.list.push(list[i]);\n    } // Register layer.\n\n\n    this.insertLayer(index, layer);\n  };\n  /**\n   * Registers layer at the page.\n   * @private\n   */\n\n\n  PdfPageLayerCollection.prototype.insertLayer = function (index, layer) {\n    if (layer == null) {\n      throw new Error('ArgumentNullException:layer');\n    }\n\n    var reference = new PdfReferenceHolder(layer);\n    this.page.contents.insert(index, reference);\n  }; // tslint:disable\n\n  /**\n   * `Parses the layers`.\n   * @private\n   */\n\n\n  PdfPageLayerCollection.prototype.parseLayers = function (loadedPage) {\n    // if (loadedPage == null) {\n    //     throw new Error('ArgumentNullException:loadedPage');\n    // }\n    var contents = this.page.contents;\n    var resource = this.page.getResources();\n    var crossTable = null;\n    var ocproperties = null;\n    var propertie = null;\n    var isLayerAdded = false; // if (loadedPage instanceof PdfPage) {\n\n    crossTable = loadedPage.crossTable; // } else {\n    //     crossTable = (loadedPage as PdfLoadedPage).CrossTable;\n    //     Propertie = PdfCrossTable.Dereference(Resource[DictionaryProperties.Properties]) as PdfDictionary;\n    //     ocproperties = PdfCrossTable.Dereference((loadedPage as PdfLoadedPage).\n    //     Document.Catalog[DictionaryProperties.OCProperties]) as PdfDictionary;\n    // }\n\n    var saveStream = new PdfStream();\n    var restoreStream = new PdfStream();\n    var saveState = 'q';\n    var newLine = '\\n';\n    var restoreState = 'Q'; // for (let index : number = 0; index < contents.Items.length; index++) {\n    //     let obj : IPdfPrimitive = contents[index];\n    //     let stream : PdfStream = crossTable.GetObject(obj) as PdfStream;\n    //     if (stream == null)\n    //         throw new PdfDocumentException(\"Invalid contents array.\");\n    //     // if (stream.Compress)\n    //     {\n    //         if (!loadedPage.Imported)\n    //             stream.Decompress();\n    //     }\n    //     byte[] contentId = stream.Data;\n    //     string str = PdfString.ByteToString(contentId);\n    //     if (!loadedPage.Imported && (contents.Count == 1) && ((stream.Data[stream.Data.Length - 2] ==\n    //     RestoreState) || (stream.Data[stream.Data.Length - 1] == RestoreState)))\n    //     {\n    //         byte[] content = stream.Data;\n    //         byte[] data = new byte[content.Length + 4];\n    //         data[0] = SaveState;\n    //         data[1] = NewLine;\n    //         content.CopyTo(data, 2);\n    //         data[data.Length - 2] = NewLine;\n    //         data[data.Length - 1] = RestoreState;\n    //         stream.Data = data;\n    //     }\n    //     if (ocproperties != null)\n    //     {\n    //         if (Propertie != null)\n    //         {\n    //             foreach (KeyValuePair<PdfName, IPdfPrimitive> prop in Propertie.Items)\n    //             {\n    //                 String Key = prop.Key.ToString();\n    //                 PdfReferenceHolder refh = prop.Value as PdfReferenceHolder;\n    //                 PdfDictionary Dict = null;\n    //                 if (refh != null)\n    //                 {\n    //                     Dict = refh.Object as PdfDictionary;\n    //                 }\n    //                 else\n    //                 {\n    //                     Dict = prop.Value as PdfDictionary;\n    //                 }\n    //                 PdfDictionary m_usage = PdfCrossTable.Dereference(Dict[DictionaryProperties.Usage]) as PdfDictionary;\n    //                 if (m_usage != null)\n    //                 {\n    //                     if (str.Contains(Key))\n    //                     {\n    //                         PdfPageLayer layer = new PdfPageLayer(loadedPage, stream);\n    //                         PdfDictionary printoption = PdfCrossTable.Dereference(m_usage[DictionaryProperties.Print])\n    //                         as PdfDictionary;\n    //                         if (printoption != null)\n    //                         {\n    //                             layer.m_printOption = printoption;\n    //                             foreach (KeyValuePair<PdfName, IPdfPrimitive> value in printoption.Items)\n    //                             {\n    //                                 if (value.Key.Value.Equals(DictionaryProperties.PrintState))\n    //                                 {\n    //                                     string printState = (value.Value as PdfName).Value;\n    //                                     if (printState.Equals(DictionaryProperties.OCGON))\n    //                                     {\n    //                                         layer.PrintState = PdfPrintState.AlwaysPrint;\n    //                                         break;\n    //                                     }\n    //                                     else\n    //                                     {\n    //                                         layer.PrintState = PdfPrintState.NeverPrint;\n    //                                         break;\n    //                                     }\n    //                                 }\n    //                             }\n    //                         }\n    //                         PdfString layerName = PdfCrossTable.Dereference(Dict[DictionaryProperties.Name]) as PdfString;\n    //                         layer.Name = layerName.Value;\n    //                         List.add(layer);\n    //                         isLayerAdded = true;\n    //                         if(!str.Contains(\"EMC\"))\n    //                         break;\n    //                     }\n    //                 }\n    //                 else\n    //                 {\n    //                     if (str.Contains(Key))\n    //                     {\n    //                         PdfPageLayer layer = new PdfPageLayer(loadedPage, stream);\n    //                         List.add(layer);\n    //                         if(Dict.ContainsKey(DictionaryProperties.Name))\n    //                         {\n    //                         PdfString layerName = PdfCrossTable.Dereference(Dict[DictionaryProperties.Name]) as PdfString;\n    //                         layer.Name = layerName.Value;\n    //                         }\n    //                         isLayerAdded = true;\n    //                         break;\n    //                     }\n    //                 }\n    //             }\n    //         }\n    //     }\n    //     if (!isLayerAdded)\n    //     {\n    //         PdfPageLayer layer = new PdfPageLayer(loadedPage, stream);\n    //         List.add(layer);\n    //     }\n    //     else\n    //         isLayerAdded = false;\n    // }\n\n    var saveData = [];\n    saveData.push(saveState);\n    saveStream.data = saveData;\n    contents.insert(0, new PdfReferenceHolder(saveStream));\n    saveData = [];\n    saveData.push(restoreState);\n    restoreStream.data = saveData;\n    contents.insert(contents.count, new PdfReferenceHolder(restoreStream));\n  };\n  /**\n   * Returns `index of` the `PdfPageLayer` in the collection if exists, -1 otherwise.\n   * @private\n   */\n\n\n  PdfPageLayerCollection.prototype.indexOf = function (layer) {\n    if (layer == null) {\n      throw new Error('ArgumentNullException: layer');\n    }\n\n    var index = this.list.indexOf(layer);\n    return index;\n  };\n\n  return PdfPageLayerCollection;\n}(PdfCollection);\n\nexport { PdfPageLayerCollection };","map":null,"metadata":{},"sourceType":"module"}