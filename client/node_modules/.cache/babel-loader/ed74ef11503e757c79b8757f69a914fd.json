{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Component, formatUnit, EventHandler, Event, isNullOrUndefined, closest, isBlazor, Browser } from '@syncfusion/ej2-base';\nimport { Property, NotifyPropertyChanges, isNullOrUndefined as isNOU } from '@syncfusion/ej2-base';\nimport { setStyleAttribute as setStyle, addClass, removeClass, Touch } from '@syncfusion/ej2-base';\nvar CONTROL = 'e-control';\nvar ROOT = 'e-sidebar';\nvar DOCKER = 'e-dock';\nvar CLOSE = 'e-close';\nvar OPEN = 'e-open';\nvar TRASITION = 'e-transition';\nvar DEFAULTBACKDROP = 'e-sidebar-overlay';\nvar CONTEXTBACKDROP = 'e-backdrop';\nvar RTL = 'e-rtl';\nvar RIGHT = 'e-right';\nvar LEFT = 'e-left';\nvar OVER = 'e-over';\nvar PUSH = 'e-push';\nvar SLIDE = 'e-slide';\nvar VISIBILITY = 'e-visibility';\nvar MAINCONTENTANIMATION = 'e-content-animation';\nvar DISABLEANIMATION = 'e-disable-animation';\nvar CONTEXT = 'e-sidebar-context';\nvar SIDEBARABSOLUTE = 'e-sidebar-absolute';\n/**\n * Sidebar is an expandable or collapsible\n * component that typically act as a side container to place the primary or secondary content alongside of the main content.\n * ```html\n * <aside id=\"sidebar\">\n * </aside>\n * ```\n * ```typescript\n * <script>\n *   let sidebarObject: Sidebar = new Sidebar();\n *   sidebarObject.appendTo(\"#sidebar\");\n * </script>\n * ```\n */\n\nvar Sidebar =\n/** @class */\nfunction (_super) {\n  __extends(Sidebar, _super);\n\n  function Sidebar(options, element) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.isBlazor = false;\n    return _this;\n  }\n\n  Sidebar.prototype.preRender = function () {\n    this.isBlazor = isBlazor() && this.isServerRendered;\n\n    if (!this.isBlazor) {\n      this.setWidth();\n    }\n  };\n\n  Sidebar.prototype.render = function () {\n    this.initialize();\n    this.wireEvents();\n    this.renderComplete();\n  };\n\n  Sidebar.prototype.initialize = function () {\n    this.setTarget();\n    this.addClass();\n\n    if (!this.isBlazor) {\n      this.setZindex();\n    }\n\n    if (this.enableDock) {\n      this.setDock();\n    }\n\n    if (this.isOpen) {\n      this.show();\n    } else {\n      this.setMediaQuery();\n    }\n\n    this.checkType(true);\n    this.setType(this.type);\n    this.setCloseOnDocumentClick();\n\n    if (!this.isBlazor) {\n      this.setEnableRTL();\n    }\n\n    if (Browser.isDevice) {\n      this.windowWidth = window.innerWidth;\n    }\n  };\n\n  Sidebar.prototype.setEnableRTL = function () {\n    this.enableRtl ? addClass([this.element], RTL) : removeClass([this.element], RTL);\n  };\n\n  Sidebar.prototype.setTarget = function () {\n    this.targetEle = this.element.nextElementSibling;\n    this.sidebarEleCopy = this.element.cloneNode(true);\n\n    if (typeof this.target === 'string') {\n      this.setProperties({\n        target: document.querySelector(this.target)\n      }, true);\n    }\n\n    if (this.target) {\n      this.target.insertBefore(this.element, this.target.children[0]);\n      addClass([this.element], SIDEBARABSOLUTE);\n      addClass([this.target], CONTEXT);\n      this.targetEle = this.getTargetElement();\n    }\n  };\n\n  Sidebar.prototype.getTargetElement = function () {\n    var siblingElement = this.element.nextElementSibling;\n\n    while (!isNOU(siblingElement)) {\n      if (!siblingElement.classList.contains(ROOT)) {\n        break;\n      }\n\n      siblingElement = siblingElement.nextElementSibling;\n    }\n\n    return siblingElement;\n  };\n\n  Sidebar.prototype.setCloseOnDocumentClick = function () {\n    if (this.closeOnDocumentClick) {\n      EventHandler.add(document, 'mousedown touchstart', this.documentclickHandler, this);\n    } else {\n      EventHandler.remove(document, 'mousedown touchstart', this.documentclickHandler);\n    }\n  };\n\n  Sidebar.prototype.setWidth = function () {\n    if (this.enableDock && this.position === 'Left') {\n      setStyle(this.element, {\n        'width': this.setDimension(this.dockSize)\n      });\n    } else if (this.enableDock && this.position === 'Right') {\n      setStyle(this.element, {\n        'width': this.setDimension(this.dockSize)\n      });\n    } else if (!this.enableDock) {\n      setStyle(this.element, {\n        'width': this.setDimension(this.width)\n      });\n    }\n  };\n\n  Sidebar.prototype.setDimension = function (width) {\n    if (typeof width === 'number') {\n      width = formatUnit(width);\n    } else if (typeof width === 'string') {\n      width = width.match(/px|%|em/) ? width : formatUnit(width);\n    } else {\n      width = '100%';\n    }\n\n    return width;\n  };\n\n  Sidebar.prototype.setZindex = function () {\n    setStyle(this.element, {\n      'z-index': '' + this.zIndex\n    });\n  };\n\n  Sidebar.prototype.addClass = function () {\n    var classELement = document.querySelector('.e-main-content');\n\n    if (!isNullOrUndefined(classELement || this.targetEle)) {\n      addClass([classELement || this.targetEle], [MAINCONTENTANIMATION]);\n    }\n\n    this.tabIndex = this.element.hasAttribute('tabindex') ? this.element.getAttribute('tabindex') : '0';\n\n    if (!this.isBlazor) {\n      if (!this.enableDock && this.type !== 'Auto') {\n        addClass([this.element], [VISIBILITY]);\n      }\n\n      removeClass([this.element], [OPEN, CLOSE, RIGHT, LEFT, SLIDE, PUSH, OVER]);\n      this.element.classList.add(ROOT);\n      addClass([this.element], this.position === 'Right' ? RIGHT : LEFT);\n\n      if (this.enableDock) {\n        addClass([this.element], DOCKER);\n      }\n\n      this.element.setAttribute('tabindex', this.tabIndex);\n    }\n\n    if (this.type === 'Auto' && !Browser.isDevice) {\n      this.show();\n    } else if (!this.isOpen) {\n      addClass([this.element], CLOSE);\n    }\n  };\n\n  Sidebar.prototype.checkType = function (val) {\n    if (!(this.type === 'Push' || this.type === 'Over' || this.type === 'Slide')) {\n      this.type = 'Auto';\n    } else {\n      if (!this.element.classList.contains(CLOSE) && !val) {\n        this.hide();\n      }\n    }\n  };\n\n  Sidebar.prototype.transitionEnd = function (e) {\n    this.setDock();\n\n    if (!isNullOrUndefined(e) && e.target === this.element) {\n      this.triggerChange();\n    }\n\n    EventHandler.remove(this.element, 'transitionend', this.transitionEnd);\n  };\n\n  Sidebar.prototype.destroyBackDrop = function () {\n    var sibling = document.querySelector('.e-main-content') || this.targetEle;\n\n    if (this.target && this.showBackdrop && sibling) {\n      removeClass([sibling], CONTEXTBACKDROP);\n    } else if (this.showBackdrop && this.modal) {\n      this.modal.style.display = 'none';\n      this.modal.outerHTML = '';\n      this.modal = null;\n    }\n  };\n  /**\n   * Hide the Sidebar component, if it is in an open state.\n   * @returns void\n   */\n\n\n  Sidebar.prototype.hide = function (e) {\n    var _this = this;\n\n    var closeArguments = {\n      model: this,\n      element: this.element,\n      cancel: false,\n      isInteracted: !isNullOrUndefined(e),\n      event: e || null\n    };\n\n    if (isBlazor()) {\n      delete closeArguments.model;\n    }\n\n    this.trigger('close', closeArguments, function (observedcloseArgs) {\n      if (!observedcloseArgs.cancel) {\n        if (_this.element.classList.contains(CLOSE)) {\n          return;\n        }\n\n        if (_this.element.classList.contains(OPEN) && !_this.animate) {\n          _this.triggerChange();\n        }\n\n        addClass([_this.element], CLOSE);\n        removeClass([_this.element], OPEN);\n        _this.enableDock ? setStyle(_this.element, {\n          'width': formatUnit(_this.dockSize)\n        }) : setStyle(_this.element, {\n          'width': formatUnit(_this.width)\n        });\n\n        _this.setType(_this.type);\n\n        var sibling = document.querySelector('.e-main-content') || _this.targetEle;\n\n        if (!_this.enableDock && sibling) {\n          sibling.style.transform = 'translateX(' + 0 + 'px)';\n          _this.position === 'Left' ? sibling.style.marginLeft = '0px' : sibling.style.marginRight = '0px';\n        }\n\n        _this.destroyBackDrop();\n\n        _this.setAnimation();\n\n        if (_this.type === 'Slide') {\n          document.body.classList.remove('e-sidebar-overflow');\n        }\n\n        _this.setProperties({\n          isOpen: false\n        }, true);\n\n        if (_this.enableDock) {\n          setTimeout(function () {\n            return _this.setTimeOut();\n          }, 50);\n        }\n\n        EventHandler.add(_this.element, 'transitionend', _this.transitionEnd, _this);\n      }\n    });\n  };\n\n  Sidebar.prototype.setTimeOut = function () {\n    var sibling = document.querySelector('.e-main-content') || this.targetEle;\n\n    if (this.element.classList.contains(OPEN) && sibling) {\n      if (this.position === 'Left') {\n        this.width === 'auto' ? sibling.style.marginLeft = this.setDimension(this.element.getBoundingClientRect().width) : sibling.style.marginLeft = this.setDimension(this.width);\n      } else {\n        this.width === 'auto' ? sibling.style.marginRight = this.setDimension(this.element.getBoundingClientRect().width) : sibling.style.marginRight = this.setDimension(this.width);\n      }\n    } else if (this.element.classList.contains(CLOSE) && sibling) {\n      if (this.position === 'Left') {\n        this.dockSize === 'auto' ? sibling.style.marginLeft = this.setDimension(this.element.getBoundingClientRect().width) : sibling.style.marginLeft = this.setDimension(this.dockSize);\n      } else {\n        this.dockSize === 'auto' ? sibling.style.marginRight = this.setDimension(this.element.getBoundingClientRect().width) : sibling.style.marginRight = this.setDimension(this.dockSize);\n      }\n    }\n  };\n\n  ;\n  /**\n   * Shows the Sidebar component, if it is in closed state.\n   * @returns void\n   */\n\n  Sidebar.prototype.show = function (e) {\n    var _this = this;\n\n    var openArguments = {\n      model: this,\n      element: this.element,\n      cancel: false,\n      isInteracted: !isNullOrUndefined(e),\n      event: e || null\n    };\n\n    if (isBlazor()) {\n      delete openArguments.model;\n    }\n\n    this.trigger('open', openArguments, function (observedopenArgs) {\n      if (!observedopenArgs.cancel) {\n        removeClass([_this.element], VISIBILITY);\n\n        if (_this.element.classList.contains(OPEN)) {\n          return;\n        }\n\n        if (_this.element.classList.contains(CLOSE) && !_this.animate) {\n          _this.triggerChange();\n        }\n\n        addClass([_this.element], [OPEN, TRASITION]);\n        setStyle(_this.element, {\n          'transform': ''\n        });\n        removeClass([_this.element], CLOSE);\n        setStyle(_this.element, {\n          'width': formatUnit(_this.width)\n        });\n\n        _this.setType(_this.type);\n\n        _this.createBackDrop();\n\n        _this.setAnimation();\n\n        if (_this.type === 'Slide') {\n          document.body.classList.add('e-sidebar-overflow');\n        }\n\n        _this.setProperties({\n          isOpen: true\n        }, true);\n\n        EventHandler.add(_this.element, 'transitionend', _this.transitionEnd, _this);\n      }\n    });\n  };\n\n  Sidebar.prototype.setAnimation = function () {\n    if (this.animate) {\n      removeClass([this.element], DISABLEANIMATION);\n    } else {\n      addClass([this.element], DISABLEANIMATION);\n    }\n  };\n\n  Sidebar.prototype.triggerChange = function () {\n    var changeArguments = {\n      name: 'change',\n      element: this.element\n    };\n    this.trigger('change', changeArguments);\n  };\n\n  Sidebar.prototype.setDock = function () {\n    if (this.enableDock && this.position === 'Left' && !this.getState()) {\n      setStyle(this.element, {\n        'transform': 'translateX(' + -100 + '%) translateX(' + this.setDimension(this.dockSize) + ')'\n      });\n    } else if (this.enableDock && this.position === 'Right' && !this.getState()) {\n      setStyle(this.element, {\n        'transform': 'translateX(' + 100 + '%) translateX(' + '-' + this.setDimension(this.dockSize) + ')'\n      });\n    }\n\n    if (this.element.classList.contains(CLOSE) && this.enableDock) {\n      setStyle(this.element, {\n        'width': this.setDimension(this.dockSize)\n      });\n    }\n  };\n\n  Sidebar.prototype.createBackDrop = function () {\n    if (this.target && this.showBackdrop && this.getState()) {\n      var sibling = document.querySelector('.e-main-content') || this.targetEle;\n      addClass([sibling], CONTEXTBACKDROP);\n    } else if (this.showBackdrop && !this.modal && this.getState()) {\n      this.modal = this.createElement('div');\n      this.modal.className = DEFAULTBACKDROP;\n      this.modal.style.display = 'block';\n      document.body.appendChild(this.modal);\n    }\n  };\n\n  Sidebar.prototype.getPersistData = function () {\n    return this.addOnPersist(['type', 'position', 'isOpen']);\n  };\n  /**\n   * Returns the current module name.\n   * @returns string\n   * @private\n   */\n\n\n  Sidebar.prototype.getModuleName = function () {\n    return 'sidebar';\n  };\n  /**\n   * Shows or hides the Sidebar based on the current state.\n   * @returns void\n   */\n\n\n  Sidebar.prototype.toggle = function (e) {\n    this.element.classList.contains(OPEN) ? this.hide() : this.show();\n  };\n\n  Sidebar.prototype.getState = function () {\n    return this.element.classList.contains(OPEN) ? true : false;\n  };\n\n  Sidebar.prototype.setMediaQuery = function () {\n    if (this.mediaQuery) {\n      var media = false;\n\n      if (typeof this.mediaQuery === 'string') {\n        media = window.matchMedia(this.mediaQuery).matches;\n      } else {\n        media = this.mediaQuery.matches;\n      }\n\n      if (media && this.windowWidth !== window.innerWidth) {\n        this.show();\n      } else if (this.getState() && this.windowWidth !== window.innerWidth) {\n        this.hide();\n      }\n    }\n  };\n\n  Sidebar.prototype.resize = function (e) {\n    if (this.type === 'Auto') {\n      if (Browser.isDevice) {\n        addClass([this.element], OVER);\n      } else {\n        addClass([this.element], PUSH);\n      }\n    }\n\n    this.setMediaQuery();\n\n    if (Browser.isDevice) {\n      this.windowWidth = window.innerWidth;\n    }\n  };\n\n  Sidebar.prototype.documentclickHandler = function (e) {\n    if (closest(e.target, '.' + CONTROL + '' + '.' + ROOT)) {\n      return;\n    }\n\n    this.hide(e);\n  };\n\n  Sidebar.prototype.enableGestureHandler = function (args) {\n    if (!this.isOpen && this.position === 'Left' && args.swipeDirection === 'Right' && args.startX <= 20 && args.distanceX >= 50 && args.velocity >= 0.5) {\n      this.show();\n    } else if (this.isOpen && this.position === 'Left' && args.swipeDirection === 'Left') {\n      this.hide();\n    } else if (this.isOpen && this.position === 'Right' && args.swipeDirection === 'Right') {\n      this.hide();\n    } else if (!this.isOpen && this.position === 'Right' && args.swipeDirection === 'Left' && window.innerWidth - args.startX <= 20 && args.distanceX >= 50 && args.velocity >= 0.5) {\n      this.show();\n    }\n  };\n\n  Sidebar.prototype.setEnableGestures = function () {\n    if (this.enableGestures) {\n      this.mainContentEle = new Touch(document.body, {\n        swipe: this.enableGestureHandler.bind(this)\n      });\n      this.sidebarEle = new Touch(this.element, {\n        swipe: this.enableGestureHandler.bind(this)\n      });\n    } else {\n      if (this.mainContentEle && this.sidebarEle) {\n        this.mainContentEle.destroy();\n        this.sidebarEle.destroy();\n      }\n    }\n  };\n\n  Sidebar.prototype.wireEvents = function () {\n    this.setEnableGestures();\n    window.addEventListener('resize', this.resize.bind(this));\n  };\n\n  Sidebar.prototype.unWireEvents = function () {\n    window.removeEventListener('resize', this.resize.bind(this));\n    EventHandler.remove(document, 'mousedown touchstart', this.documentclickHandler);\n\n    if (this.mainContentEle) {\n      this.mainContentEle.destroy();\n    }\n\n    if (this.sidebarEle) {\n      this.sidebarEle.destroy();\n    }\n  };\n  /**\n   * Called internally if any of the property value changed.\n   * @private\n   */\n\n\n  Sidebar.prototype.onPropertyChanged = function (newProp, oldProp) {\n    var sibling = document.querySelector('.e-main-content') || this.targetEle;\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'isOpen':\n          this.isOpen ? this.show() : this.hide();\n          break;\n\n        case 'width':\n          this.setWidth();\n\n          if (!this.getState()) {\n            this.setDock();\n          }\n\n          break;\n\n        case 'animate':\n          this.setAnimation();\n          break;\n\n        case 'type':\n          this.checkType(false);\n          removeClass([this.element], [VISIBILITY]);\n          this.addClass();\n          addClass([this.element], this.type === 'Auto' ? Browser.isDevice ? ['e-over'] : ['e-push'] : ['e-' + this.type.toLowerCase()]);\n          break;\n\n        case 'position':\n          this.element.style.transform = '';\n          this.setDock();\n\n          if (sibling) {\n            this.position === 'Left' ? sibling.style.marginRight = '0px' : sibling.style.marginLeft = '0px';\n          }\n\n          if (this.position === 'Right') {\n            removeClass([this.element], LEFT);\n            addClass([this.element], RIGHT);\n          } else {\n            removeClass([this.element], RIGHT);\n            addClass([this.element], LEFT);\n          }\n\n          this.setType(this.type);\n          break;\n\n        case 'showBackdrop':\n          if (this.showBackdrop) {\n            this.createBackDrop();\n          } else {\n            if (this.modal) {\n              this.modal.style.display = 'none';\n              this.modal.outerHTML = '';\n              this.modal = null;\n            }\n          }\n\n          break;\n\n        case 'target':\n          if (typeof this.target === 'string') {\n            this.setProperties({\n              target: document.querySelector(this.target)\n            }, true);\n          }\n\n          if (isNullOrUndefined(this.target)) {\n            removeClass([this.element], SIDEBARABSOLUTE);\n            removeClass([oldProp.target], CONTEXT);\n            setStyle(sibling, {\n              'margin-left': 0,\n              'margin-right': 0\n            });\n            document.body.insertAdjacentElement('afterbegin', this.element);\n          }\n\n          var isRendered = this.isServerRendered;\n          this.isServerRendered = false;\n\n          _super.prototype.refresh.call(this);\n\n          this.isServerRendered = isRendered;\n          break;\n\n        case 'closeOnDocumentClick':\n          this.setCloseOnDocumentClick();\n          break;\n\n        case 'enableDock':\n          if (!this.getState()) {\n            this.setDock();\n          }\n\n          break;\n\n        case 'zIndex':\n          this.setZindex();\n          break;\n\n        case 'mediaQuery':\n          this.setMediaQuery();\n          break;\n\n        case 'enableGestures':\n          this.setEnableGestures();\n          break;\n\n        case 'enableRtl':\n          this.setEnableRTL();\n          break;\n      }\n    }\n  };\n\n  Sidebar.prototype.setType = function (type) {\n    var elementWidth = this.element.getBoundingClientRect().width;\n    this.setZindex();\n    var sibling = document.querySelector('.e-main-content') || this.targetEle;\n\n    if (sibling) {\n      sibling.style.transform = 'translateX(' + 0 + 'px)';\n\n      if (!Browser.isDevice && this.type !== 'Auto') {\n        this.position === 'Left' ? sibling.style.marginLeft = '0px' : sibling.style.marginRight = '0px';\n      }\n    }\n\n    var margin = this.position === 'Left' ? elementWidth + 'px' : elementWidth + 'px';\n    var eleWidth = this.position === 'Left' ? elementWidth : -elementWidth;\n    removeClass([this.element], [PUSH, OVER, SLIDE]);\n\n    switch (type) {\n      case 'Push':\n        addClass([this.element], [PUSH]);\n\n        if (sibling && (this.enableDock || this.element.classList.contains(OPEN))) {\n          this.position === 'Left' ? sibling.style.marginLeft = margin : sibling.style.marginRight = margin;\n        }\n\n        break;\n\n      case 'Slide':\n        addClass([this.element], [SLIDE]);\n\n        if (sibling && (this.enableDock || this.element.classList.contains(OPEN))) {\n          sibling.style.transform = 'translateX(' + eleWidth + 'px)';\n        }\n\n        break;\n\n      case 'Over':\n        addClass([this.element], [OVER]);\n\n        if (this.enableDock && this.element.classList.contains(CLOSE)) {\n          if (sibling) {\n            this.position === 'Left' ? sibling.style.marginLeft = margin : sibling.style.marginRight = margin;\n          }\n        }\n\n        break;\n\n      case 'Auto':\n        addClass([this.element], [TRASITION]);\n\n        if (Browser.isDevice) {\n          if (sibling && this.enableDock && !this.getState()) {\n            this.position === 'Left' ? sibling.style.marginLeft = margin : sibling.style.marginRight = margin;\n            addClass([this.element], PUSH);\n          } else {\n            addClass([this.element], OVER);\n          }\n        } else {\n          addClass([this.element], PUSH);\n\n          if (sibling && (this.enableDock || this.element.classList.contains(OPEN))) {\n            this.position === 'Left' ? sibling.style.marginLeft = margin : sibling.style.marginRight = margin;\n          }\n        }\n\n        this.createBackDrop();\n    }\n  };\n  /**\n   * Removes the control from the DOM and detaches all its related event handlers. Also it removes the attributes and classes.\n   * @returns void\n   */\n\n\n  Sidebar.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    removeClass([this.element], [OPEN, CLOSE, PUSH, SLIDE, OVER, LEFT, RIGHT, TRASITION]);\n\n    if (this.target) {\n      removeClass([this.element], SIDEBARABSOLUTE);\n      removeClass([this.target], CONTEXT);\n    }\n\n    this.destroyBackDrop();\n    this.element.style.width = '';\n    this.element.style.zIndex = '';\n    this.element.style.transform = '';\n    this.windowWidth = null;\n    !isNullOrUndefined(this.sidebarEleCopy.getAttribute('tabindex')) ? this.element.setAttribute('tabindex', this.tabIndex) : this.element.removeAttribute('tabindex');\n    var sibling = document.querySelector('.e-main-content') || this.targetEle;\n\n    if (!isNullOrUndefined(sibling)) {\n      sibling.style.margin = '';\n      sibling.style.transform = '';\n    }\n\n    this.unWireEvents();\n  };\n\n  __decorate([Property('auto')], Sidebar.prototype, \"dockSize\", void 0);\n\n  __decorate([Property(null)], Sidebar.prototype, \"mediaQuery\", void 0);\n\n  __decorate([Property(false)], Sidebar.prototype, \"enableDock\", void 0);\n\n  __decorate([Property('en-US')], Sidebar.prototype, \"locale\", void 0);\n\n  __decorate([Property(false)], Sidebar.prototype, \"enablePersistence\", void 0);\n\n  __decorate([Property(true)], Sidebar.prototype, \"enableGestures\", void 0);\n\n  __decorate([Property(false)], Sidebar.prototype, \"isOpen\", void 0);\n\n  __decorate([Property(false)], Sidebar.prototype, \"enableRtl\", void 0);\n\n  __decorate([Property(true)], Sidebar.prototype, \"animate\", void 0);\n\n  __decorate([Property('auto')], Sidebar.prototype, \"height\", void 0);\n\n  __decorate([Property(false)], Sidebar.prototype, \"closeOnDocumentClick\", void 0);\n\n  __decorate([Property('Left')], Sidebar.prototype, \"position\", void 0);\n\n  __decorate([Property(null)], Sidebar.prototype, \"target\", void 0);\n\n  __decorate([Property(false)], Sidebar.prototype, \"showBackdrop\", void 0);\n\n  __decorate([Property('Auto')], Sidebar.prototype, \"type\", void 0);\n\n  __decorate([Property('auto')], Sidebar.prototype, \"width\", void 0);\n\n  __decorate([Property(1000)], Sidebar.prototype, \"zIndex\", void 0);\n\n  __decorate([Event()], Sidebar.prototype, \"created\", void 0);\n\n  __decorate([Event()], Sidebar.prototype, \"close\", void 0);\n\n  __decorate([Event()], Sidebar.prototype, \"open\", void 0);\n\n  __decorate([Event()], Sidebar.prototype, \"change\", void 0);\n\n  __decorate([Event()], Sidebar.prototype, \"destroyed\", void 0);\n\n  Sidebar = __decorate([NotifyPropertyChanges], Sidebar);\n  return Sidebar;\n}(Component);\n\nexport { Sidebar };","map":null,"metadata":{},"sourceType":"module"}