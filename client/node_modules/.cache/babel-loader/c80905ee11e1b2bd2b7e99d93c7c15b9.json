{"ast":null,"code":"/**\r\n * DevExtreme (ui/file_manager/ui.file_manager.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _events_engine = require(\"../../events/core/events_engine\");\n\nvar _events_engine2 = _interopRequireDefault(_events_engine);\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _type2 = _interopRequireDefault(_type);\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _message = require(\"../../localization/message\");\n\nvar _message2 = _interopRequireDefault(_message);\n\nvar _component_registrator = require(\"../../core/component_registrator\");\n\nvar _component_registrator2 = _interopRequireDefault(_component_registrator);\n\nvar _ui = require(\"../widget/ui.widget\");\n\nvar _ui2 = _interopRequireDefault(_ui);\n\nvar _notify = require(\"../notify\");\n\nvar _notify2 = _interopRequireDefault(_notify);\n\nvar _uiFile_manager = require(\"./ui.file_manager.common\");\n\nvar _file_items_controller = require(\"./file_items_controller\");\n\nvar _file_items_controller2 = _interopRequireDefault(_file_items_controller);\n\nvar _uiFile_manager2 = require(\"./ui.file_manager.command_manager\");\n\nvar _uiFile_manager3 = require(\"./ui.file_manager.context_menu\");\n\nvar _uiFile_manager4 = _interopRequireDefault(_uiFile_manager3);\n\nvar _uiFile_manager5 = require(\"./ui.file_manager.files_tree_view\");\n\nvar _uiFile_manager6 = _interopRequireDefault(_uiFile_manager5);\n\nvar _uiFile_managerItem_list = require(\"./ui.file_manager.item_list.details\");\n\nvar _uiFile_managerItem_list2 = _interopRequireDefault(_uiFile_managerItem_list);\n\nvar _uiFile_managerItem_list3 = require(\"./ui.file_manager.item_list.thumbnails\");\n\nvar _uiFile_managerItem_list4 = _interopRequireDefault(_uiFile_managerItem_list3);\n\nvar _uiFile_manager7 = require(\"./ui.file_manager.toolbar\");\n\nvar _uiFile_manager8 = _interopRequireDefault(_uiFile_manager7);\n\nvar _uiFile_manager9 = require(\"./ui.file_manager.notification\");\n\nvar _uiFile_manager10 = _interopRequireDefault(_uiFile_manager9);\n\nvar _uiFile_manager11 = require(\"./ui.file_manager.editing\");\n\nvar _uiFile_manager12 = _interopRequireDefault(_uiFile_manager11);\n\nvar _uiFile_manager13 = require(\"./ui.file_manager.breadcrumbs\");\n\nvar _uiFile_manager14 = _interopRequireDefault(_uiFile_manager13);\n\nvar _uiFile_manager15 = require(\"./ui.file_manager.adaptivity\");\n\nvar _uiFile_manager16 = _interopRequireDefault(_uiFile_manager15);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) {\n    return;\n  }\n\n  if (\"string\" === typeof o) {\n    return _arrayLikeToArray(o, minLen);\n  }\n\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n\n  if (\"Object\" === n && o.constructor) {\n    n = o.constructor.name;\n  }\n\n  if (\"Map\" === n || \"Set\" === n) {\n    return Array.from(o);\n  }\n\n  if (\"Arguments\" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) {\n    return _arrayLikeToArray(o, minLen);\n  }\n}\n\nfunction _iterableToArray(iter) {\n  if (\"undefined\" !== typeof Symbol && Symbol.iterator in Object(iter)) {\n    return Array.from(iter);\n  }\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    return _arrayLikeToArray(arr);\n  }\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (null == len || len > arr.length) {\n    len = arr.length;\n  }\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nfunction _get(target, property, receiver) {\n  if (\"undefined\" !== typeof Reflect && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function (target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) {\n        return;\n      }\n\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n\n    if (null === object) {\n      break;\n    }\n  }\n\n  return object;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (\"function\" !== typeof superClass && null !== superClass) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (superClass) {\n    _setPrototypeOf(subClass, superClass);\n  }\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function (o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var result,\n        Super = _getPrototypeOf(Derived);\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (\"object\" === _typeof(call) || \"function\" === typeof call)) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (void 0 === self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (\"undefined\" === typeof Reflect || !Reflect.construct) {\n    return false;\n  }\n\n  if (Reflect.construct.sham) {\n    return false;\n  }\n\n  if (\"function\" === typeof Proxy) {\n    return true;\n  }\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function (o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar FILE_MANAGER_CLASS = \"dx-filemanager\";\nvar FILE_MANAGER_WRAPPER_CLASS = FILE_MANAGER_CLASS + \"-wrapper\";\nvar FILE_MANAGER_CONTAINER_CLASS = FILE_MANAGER_CLASS + \"-container\";\nvar FILE_MANAGER_DIRS_PANEL_CLASS = FILE_MANAGER_CLASS + \"-dirs-panel\";\nvar FILE_MANAGER_INACTIVE_AREA_CLASS = FILE_MANAGER_CLASS + \"-inactive-area\";\nvar FILE_MANAGER_EDITING_CONTAINER_CLASS = FILE_MANAGER_CLASS + \"-editing-container\";\nvar FILE_MANAGER_ITEMS_PANEL_CLASS = FILE_MANAGER_CLASS + \"-items-panel\";\nvar FILE_MANAGER_ITEM_CUSTOM_THUMBNAIL_CLASS = FILE_MANAGER_CLASS + \"-item-custom-thumbnail\";\nvar PARENT_DIRECTORY_KEY_PREFIX = \"[*DXPDK*]$40F96F03-FBD8-43DF-91BE-F55F4B8BA871$\";\n\nvar FileManager = function (_Widget) {\n  _inherits(FileManager, _Widget);\n\n  var _super = _createSuper(FileManager);\n\n  function FileManager() {\n    _classCallCheck(this, FileManager);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FileManager, [{\n    key: \"_initTemplates\",\n    value: function () {}\n  }, {\n    key: \"_initMarkup\",\n    value: function () {\n      _get(_getPrototypeOf(FileManager.prototype), \"_initMarkup\", this).call(this);\n\n      this._initActions();\n\n      this._firstItemViewLoad = true;\n      this._lockSelectionProcessing = false;\n      this._lockFocusedItemProcessing = false;\n      this._itemKeyToFocus = void 0;\n      this._controller = new _file_items_controller2.default({\n        currentPath: this.option(\"currentPath\"),\n        currentPathKeys: this.option(\"currentPathKeys\"),\n        rootText: this.option(\"rootFolderName\"),\n        fileProvider: this.option(\"fileSystemProvider\"),\n        allowedFileExtensions: this.option(\"allowedFileExtensions\"),\n        uploadMaxFileSize: this.option(\"upload\").maxFileSize,\n        uploadChunkSize: this.option(\"upload\").chunkSize,\n        onInitialized: this._onControllerInitialized.bind(this),\n        onDataLoading: this._onDataLoading.bind(this),\n        onSelectedDirectoryChanged: this._onSelectedDirectoryChanged.bind(this)\n      });\n      this._commandManager = new _uiFile_manager2.FileManagerCommandManager(this.option(\"permissions\"));\n      this.$element().addClass(FILE_MANAGER_CLASS);\n\n      this._createNotificationControl();\n\n      this._initCommandManager();\n\n      this._setItemsViewAreaActive(false);\n    }\n  }, {\n    key: \"_createNotificationControl\",\n    value: function () {\n      var _this = this;\n\n      var $notificationControl = (0, _renderer2.default)(\"<div>\").addClass(\"dx-filemanager-notification-container\").appendTo(this.$element());\n      this._notificationControl = this._createComponent($notificationControl, _uiFile_manager10.default, {\n        progressPanelContainer: this.$element(),\n        contentTemplate: function (container) {\n          return _this._createWrapper(container);\n        },\n        onActionProgress: function (e) {\n          return _this._onActionProgress(e);\n        },\n        positionTarget: \".\".concat(FILE_MANAGER_CONTAINER_CLASS)\n      });\n\n      this._editing.option(\"notificationControl\", this._notificationControl);\n    }\n  }, {\n    key: \"_createWrapper\",\n    value: function (container) {\n      var _this2 = this;\n\n      this._$wrapper = (0, _renderer2.default)(\"<div>\").addClass(FILE_MANAGER_WRAPPER_CLASS).appendTo(container);\n\n      this._createEditing();\n\n      var $toolbar = (0, _renderer2.default)(\"<div>\").appendTo(this._$wrapper);\n      this._toolbar = this._createComponent($toolbar, _uiFile_manager8.default, {\n        commandManager: this._commandManager,\n        generalItems: this.option(\"toolbar.items\"),\n        fileItems: this.option(\"toolbar.fileSelectionItems\"),\n        itemViewMode: this.option(\"itemView\").mode,\n        onItemClick: function (args) {\n          return _this2._actions.onToolbarItemClick(args);\n        }\n      });\n\n      this._createAdaptivityControl();\n    }\n  }, {\n    key: \"_createAdaptivityControl\",\n    value: function () {\n      var _this3 = this;\n\n      var $container = (0, _renderer2.default)(\"<div>\").addClass(FILE_MANAGER_CONTAINER_CLASS).appendTo(this._$wrapper);\n      this._adaptivityControl = this._createComponent($container, _uiFile_manager16.default, {\n        drawerTemplate: function (container) {\n          return _this3._createFilesTreeView(container);\n        },\n        contentTemplate: function (container) {\n          return _this3._createItemsPanel(container);\n        },\n        onAdaptiveStateChanged: function (e) {\n          return _this3._onAdaptiveStateChanged(e);\n        }\n      });\n    }\n  }, {\n    key: \"_createEditing\",\n    value: function () {\n      var _this4 = this;\n\n      var $editingContainer = (0, _renderer2.default)(\"<div>\").addClass(FILE_MANAGER_EDITING_CONTAINER_CLASS).appendTo(this.$element());\n      this._editing = this._createComponent($editingContainer, _uiFile_manager12.default, {\n        controller: this._controller,\n        model: {\n          getMultipleSelectedItems: this._getMultipleSelectedItems.bind(this)\n        },\n        getItemThumbnail: this._getItemThumbnailInfo.bind(this),\n        onSuccess: function (_ref) {\n          var updatedOnlyFiles = _ref.updatedOnlyFiles;\n          return _this4._redrawComponent(updatedOnlyFiles);\n        },\n        onCreating: function () {\n          return _this4._setItemsViewAreaActive(false);\n        },\n        onError: function (e) {\n          return _this4._onEditingError(e);\n        }\n      });\n    }\n  }, {\n    key: \"_createItemsPanel\",\n    value: function ($container) {\n      this._$itemsPanel = (0, _renderer2.default)(\"<div>\").addClass(FILE_MANAGER_ITEMS_PANEL_CLASS).appendTo($container);\n\n      this._createBreadcrumbs(this._$itemsPanel);\n\n      this._createItemView(this._$itemsPanel);\n    }\n  }, {\n    key: \"_createFilesTreeView\",\n    value: function (container) {\n      var _this5 = this;\n\n      this._filesTreeViewContextMenu = this._createContextMenu();\n      var $filesTreeView = (0, _renderer2.default)(\"<div>\").addClass(FILE_MANAGER_DIRS_PANEL_CLASS).appendTo(container);\n      this._filesTreeView = this._createComponent($filesTreeView, _uiFile_manager6.default, {\n        storeExpandedState: true,\n        contextMenu: this._filesTreeViewContextMenu,\n        getDirectories: this.getDirectories.bind(this),\n        getCurrentDirectory: this._getCurrentDirectory.bind(this),\n        onDirectoryClick: this._onFilesTreeViewDirectoryClick.bind(this),\n        onClick: function () {\n          return _this5._setItemsViewAreaActive(false);\n        }\n      });\n    }\n  }, {\n    key: \"_createItemView\",\n    value: function ($container, viewMode) {\n      var _this6 = this;\n\n      this._itemViewContextMenu = this._createContextMenu(true);\n      var itemViewOptions = this.option(\"itemView\");\n      var options = {\n        selectionMode: this.option(\"selectionMode\"),\n        selectedItemKeys: this.option(\"selectedItemKeys\"),\n        focusedItemKey: this.option(\"focusedItemKey\"),\n        contextMenu: this._itemViewContextMenu,\n        getItems: this._getItemViewItems.bind(this),\n        onError: function (_ref2) {\n          var error = _ref2.error;\n          return _this6._showError(error);\n        },\n        onSelectionChanged: this._onItemViewSelectionChanged.bind(this),\n        onFocusedItemChanged: this._onItemViewFocusedItemChanged.bind(this),\n        onSelectedItemOpened: this._onSelectedItemOpened.bind(this),\n        getItemThumbnail: this._getItemThumbnailInfo.bind(this),\n        customizeDetailColumns: this.option(\"customizeDetailColumns\"),\n        detailColumns: this.option(\"itemView.details.columns\")\n      };\n      var $itemView = (0, _renderer2.default)(\"<div>\").appendTo($container);\n      viewMode = viewMode || itemViewOptions.mode;\n      var widgetClass = \"thumbnails\" === viewMode ? _uiFile_managerItem_list4.default : _uiFile_managerItem_list2.default;\n      this._itemView = this._createComponent($itemView, widgetClass, options);\n\n      _events_engine2.default.on($itemView, \"click\", this._onItemViewClick.bind(this));\n    }\n  }, {\n    key: \"_createBreadcrumbs\",\n    value: function ($container) {\n      var _this7 = this;\n\n      var $breadcrumbs = (0, _renderer2.default)(\"<div>\").appendTo($container);\n      this._breadcrumbs = this._createComponent($breadcrumbs, _uiFile_manager14.default, {\n        rootFolderDisplayName: this.option(\"rootFolderName\"),\n        onCurrentDirectoryChanging: function (_ref3) {\n          var currentDirectory = _ref3.currentDirectory;\n          return _this7._setCurrentDirectory(currentDirectory);\n        }\n      });\n\n      this._breadcrumbs.setCurrentDirectory(this._getCurrentDirectory());\n    }\n  }, {\n    key: \"_createContextMenu\",\n    value: function (isolateCreationItemCommands) {\n      var _this8 = this;\n\n      var $contextMenu = (0, _renderer2.default)(\"<div>\").appendTo(this._$wrapper);\n      return this._createComponent($contextMenu, _uiFile_manager4.default, {\n        commandManager: this._commandManager,\n        items: this.option(\"contextMenu.items\"),\n        onItemClick: function (args) {\n          return _this8._actions.onContextMenuItemClick(args);\n        },\n        isolateCreationItemCommands: isolateCreationItemCommands\n      });\n    }\n  }, {\n    key: \"_initCommandManager\",\n    value: function () {\n      var _this9 = this;\n\n      var actions = (0, _extend.extend)(this._editing.getCommandActions(), {\n        refresh: function () {\n          return _this9._refreshAndShowProgress();\n        },\n        thumbnails: function () {\n          return _this9.option(\"itemView.mode\", \"thumbnails\");\n        },\n        details: function () {\n          return _this9.option(\"itemView.mode\", \"details\");\n        },\n        clearSelection: function () {\n          return _this9._clearSelection();\n        },\n        showNavPane: function () {\n          return _this9._adaptivityControl.toggleDrawer();\n        }\n      });\n\n      this._commandManager.registerActions(actions);\n    }\n  }, {\n    key: \"_onFilesTreeViewDirectoryClick\",\n    value: function (_ref4) {\n      var itemData = _ref4.itemData;\n\n      this._setCurrentDirectory(itemData);\n\n      this._setItemsViewAreaActive(false);\n    }\n  }, {\n    key: \"_onItemViewSelectionChanged\",\n    value: function (_ref5) {\n      var selectedItemInfos = _ref5.selectedItemInfos,\n          selectedItems = _ref5.selectedItems,\n          selectedItemKeys = _ref5.selectedItemKeys,\n          currentSelectedItemKeys = _ref5.currentSelectedItemKeys,\n          currentDeselectedItemKeys = _ref5.currentDeselectedItemKeys;\n\n      this._updateToolbar(selectedItemInfos);\n\n      this._lockSelectionProcessing = true;\n      this.option(\"selectedItemKeys\", selectedItemKeys);\n      this._lockSelectionProcessing = false;\n\n      this._actions.onSelectionChanged({\n        selectedItems: selectedItems,\n        selectedItemKeys: selectedItemKeys,\n        currentSelectedItemKeys: currentSelectedItemKeys,\n        currentDeselectedItemKeys: currentDeselectedItemKeys\n      });\n    }\n  }, {\n    key: \"_onItemViewFocusedItemChanged\",\n    value: function (e) {\n      this._lockFocusedItemProcessing = true;\n      this.option(\"focusedItemKey\", e.itemKey);\n      this._lockFocusedItemProcessing = false;\n\n      this._actions.onFocusedItemChanged({\n        item: e.item,\n        itemElement: e.itemElement\n      });\n    }\n  }, {\n    key: \"_onAdaptiveStateChanged\",\n    value: function (_ref6) {\n      var enabled = _ref6.enabled;\n\n      this._commandManager.setCommandEnabled(\"showNavPane\", enabled);\n\n      this._updateToolbar();\n    }\n  }, {\n    key: \"_onActionProgress\",\n    value: function (_ref7) {\n      var message = _ref7.message,\n          status = _ref7.status;\n\n      this._toolbar.updateRefreshItem(message, status);\n\n      this._updateToolbar();\n    }\n  }, {\n    key: \"_onEditingError\",\n    value: function (e) {\n      var args = (0, _uiFile_manager.extendAttributes)({}, e, [\"errorCode\", \"errorText\", \"fileSystemItem\"]);\n\n      this._actions.onErrorOccurred(args);\n\n      e.errorText = args.errorText;\n    }\n  }, {\n    key: \"_refreshAndShowProgress\",\n    value: function () {\n      var _this10 = this;\n\n      return (0, _deferred.when)(this._notificationControl.tryShowProgressPanel(), this._controller.refresh()).then(function () {\n        return _this10._filesTreeView.refresh();\n      });\n    }\n  }, {\n    key: \"_updateToolbar\",\n    value: function (selectedItems) {\n      var items = selectedItems || this._getSelectedItemInfos();\n\n      this._toolbar.update(items);\n    }\n  }, {\n    key: \"_setItemsViewAreaActive\",\n    value: function (active) {\n      if (this._itemsViewAreaActive === active) {\n        return;\n      }\n\n      this._itemsViewAreaActive = active;\n      var $activeArea = null;\n      var $inactiveArea = null;\n\n      if (active) {\n        $activeArea = this._itemView.$element();\n        $inactiveArea = this._filesTreeView.$element();\n      } else {\n        $activeArea = this._filesTreeView.$element();\n        $inactiveArea = this._itemView.$element();\n      }\n\n      $activeArea.removeClass(FILE_MANAGER_INACTIVE_AREA_CLASS);\n      $inactiveArea.addClass(FILE_MANAGER_INACTIVE_AREA_CLASS);\n    }\n  }, {\n    key: \"_switchView\",\n    value: function (viewMode) {\n      this._disposeWidget(this._itemView.option(\"contextMenu\"));\n\n      this._disposeWidget(this._itemView);\n\n      this._createItemView(this._$itemsPanel, viewMode);\n\n      this._toolbar.option({\n        itemViewMode: viewMode\n      });\n    }\n  }, {\n    key: \"_disposeWidget\",\n    value: function (widget) {\n      widget.dispose();\n      widget.$element().remove();\n    }\n  }, {\n    key: \"_clearSelection\",\n    value: function () {\n      this._itemView.clearSelection();\n    }\n  }, {\n    key: \"_getMultipleSelectedItems\",\n    value: function () {\n      return this._itemsViewAreaActive ? this._getSelectedItemInfos() : [this._getCurrentDirectory()];\n    }\n  }, {\n    key: \"_showError\",\n    value: function (message) {\n      this._showNotification(message, false);\n    }\n  }, {\n    key: \"_showNotification\",\n    value: function (message, isSuccess) {\n      (0, _notify2.default)({\n        message: message,\n        width: 450\n      }, isSuccess ? \"success\" : \"error\", 5e3);\n    }\n  }, {\n    key: \"_redrawComponent\",\n    value: function (onlyFileItemsView) {\n      !onlyFileItemsView && this._filesTreeView.refresh();\n\n      this._itemView.refresh();\n    }\n  }, {\n    key: \"_getItemViewItems\",\n    value: function () {\n      var _this11 = this;\n\n      var showFolders = this.option(\"itemView\").showFolders;\n\n      var result = this._controller.getCurrentItems(!showFolders);\n\n      this._updateToolbarWithSelectionOnFirstLoad(result);\n\n      if (this.option(\"itemView.showParentFolder\")) {\n        result = (0, _deferred.when)(result).then(function (items) {\n          return _this11._getPreparedItemViewItems(items);\n        });\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_updateToolbarWithSelectionOnFirstLoad\",\n    value: function (itemsResult) {\n      var _this12 = this;\n\n      if (!this._firstItemViewLoad) {\n        return;\n      }\n\n      this._firstItemViewLoad = false;\n      var selectedItemKeys = this.option(\"selectedItemKeys\");\n\n      if (selectedItemKeys.length > 0) {\n        (0, _deferred.when)(itemsResult).done(function (items) {\n          var selectedItems = (0, _uiFile_manager.findItemsByKeys)(items, selectedItemKeys);\n\n          if (selectedItems.length > 0) {\n            _this12._updateToolbar(selectedItems);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"_getPreparedItemViewItems\",\n    value: function (items) {\n      var selectedDir = this._getCurrentDirectory();\n\n      if (selectedDir.fileItem.isRoot()) {\n        return items;\n      }\n\n      var parentDirItem = selectedDir.fileItem.createClone();\n      parentDirItem.isParentFolder = true;\n      parentDirItem.name = \"..\";\n      parentDirItem.relativeName = \"..\";\n      parentDirItem.key = \"\".concat(PARENT_DIRECTORY_KEY_PREFIX).concat(selectedDir.fileItem.key);\n\n      var itemsCopy = _toConsumableArray(items);\n\n      itemsCopy.unshift({\n        fileItem: parentDirItem,\n        icon: \"parentfolder\"\n      });\n      return itemsCopy;\n    }\n  }, {\n    key: \"_onItemViewClick\",\n    value: function () {\n      this._setItemsViewAreaActive(true);\n    }\n  }, {\n    key: \"_getItemThumbnailInfo\",\n    value: function (fileInfo) {\n      var func = this.option(\"customizeThumbnail\");\n      var thumbnail = _type2.default.isFunction(func) ? func(fileInfo.fileItem) : fileInfo.fileItem.thumbnail;\n\n      if (thumbnail) {\n        return {\n          thumbnail: thumbnail,\n          cssClass: FILE_MANAGER_ITEM_CUSTOM_THUMBNAIL_CLASS\n        };\n      }\n\n      return {\n        thumbnail: fileInfo.icon\n      };\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function () {\n      return (0, _extend.extend)(_get(_getPrototypeOf(FileManager.prototype), \"_getDefaultOptions\", this).call(this), {\n        fileSystemProvider: null,\n        currentPath: \"\",\n        currentPathKeys: [],\n        rootFolderName: _message2.default.format(\"dxFileManager-rootDirectoryName\"),\n        selectionMode: \"multiple\",\n        selectedItemKeys: [],\n        focusedItemKey: void 0,\n        toolbar: {\n          items: [\"showNavPane\", \"create\", \"upload\", \"switchView\", {\n            name: \"separator\",\n            location: \"after\"\n          }, \"refresh\"],\n          fileSelectionItems: [\"download\", \"separator\", \"move\", \"copy\", \"rename\", \"separator\", \"delete\", \"clearSelection\", {\n            name: \"separator\",\n            location: \"after\"\n          }, \"refresh\"]\n        },\n        contextMenu: {\n          items: [\"create\", \"upload\", \"rename\", \"move\", \"copy\", \"delete\", \"refresh\", \"download\"]\n        },\n        itemView: {\n          details: {\n            columns: [\"thumbnail\", \"name\", \"dateModified\", \"size\"]\n          },\n          mode: \"details\",\n          showFolders: true,\n          showParentFolder: true\n        },\n        customizeThumbnail: null,\n        customizeDetailColumns: null,\n        onContextMenuItemClick: null,\n        onCurrentDirectoryChanged: null,\n        onSelectedFileOpened: null,\n        onSelectionChanged: null,\n        onFocusedItemChanged: null,\n        onToolbarItemClick: null,\n        onErrorOccurred: null,\n        allowedFileExtensions: [],\n        upload: {\n          maxFileSize: 0,\n          chunkSize: 2e5\n        },\n        permissions: {\n          create: false,\n          copy: false,\n          move: false,\n          \"delete\": false,\n          rename: false,\n          upload: false,\n          download: false\n        }\n      });\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function (args) {\n      var name = args.name;\n\n      switch (name) {\n        case \"currentPath\":\n          this._controller.setCurrentPath(args.value);\n\n          break;\n\n        case \"currentPathKeys\":\n          this._controller.setCurrentPathByKeys(args.value);\n\n          break;\n\n        case \"selectedItemKeys\":\n          if (!this._lockSelectionProcessing && this._itemView) {\n            this._itemView.option(\"selectedItemKeys\", args.value);\n          }\n\n          break;\n\n        case \"focusedItemKey\":\n          if (!this._lockFocusedItemProcessing && this._itemView) {\n            this._itemView.option(\"focusedItemKey\", args.value);\n          }\n\n          break;\n\n        case \"fileSystemProvider\":\n        case \"selectionMode\":\n        case \"customizeThumbnail\":\n        case \"customizeDetailColumns\":\n        case \"rootFolderName\":\n        case \"allowedFileExtensions\":\n        case \"permissions\":\n        case \"upload\":\n          this.repaint();\n          break;\n\n        case \"itemView\":\n          if (\"itemView.mode\" === args.fullName) {\n            this._switchView(args.value);\n          } else {\n            this.repaint();\n          }\n\n          break;\n\n        case \"toolbar\":\n          var toolbarOptions = {};\n\n          if (\"toolbar\" === args.fullName) {\n            if (args.value.items) {\n              toolbarOptions.generalItems = args.value.items;\n            }\n\n            if (args.value.fileSelectionItems) {\n              toolbarOptions.fileItems = args.value.fileSelectionItems;\n            }\n          }\n\n          if (\"toolbar.items\" === args.fullName) {\n            toolbarOptions.generalItems = args.value;\n          }\n\n          if (\"toolbar.fileSelectionItems\" === args.fullName) {\n            toolbarOptions.fileItems = args.value;\n          }\n\n          this._toolbar.option(toolbarOptions);\n\n          break;\n\n        case \"contextMenu\":\n          if (\"contextMenu\" === args.fullName && args.value.items || 0 === args.fullName.indexOf(\"contextMenu.items\")) {\n            var contextMenuItems = this.option(\"contextMenu.items\");\n\n            this._filesTreeViewContextMenu.option(\"items\", contextMenuItems);\n\n            this._itemViewContextMenu.option(\"items\", contextMenuItems);\n          }\n\n          break;\n\n        case \"onContextMenuItemClick\":\n        case \"onCurrentDirectoryChanged\":\n        case \"onSelectedFileOpened\":\n        case \"onSelectionChanged\":\n        case \"onFocusedItemChanged\":\n        case \"onToolbarItemClick\":\n        case \"onErrorOccurred\":\n          this._actions[name] = this._createActionByOption(name);\n          break;\n\n        default:\n          _get(_getPrototypeOf(FileManager.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }, {\n    key: \"_initActions\",\n    value: function () {\n      this._actions = {\n        onContextMenuItemClick: this._createActionByOption(\"onContextMenuItemClick\"),\n        onCurrentDirectoryChanged: this._createActionByOption(\"onCurrentDirectoryChanged\"),\n        onSelectedFileOpened: this._createActionByOption(\"onSelectedFileOpened\"),\n        onSelectionChanged: this._createActionByOption(\"onSelectionChanged\"),\n        onFocusedItemChanged: this._createActionByOption(\"onFocusedItemChanged\"),\n        onToolbarItemClick: this._createActionByOption(\"onToolbarItemClick\"),\n        onErrorOccurred: this._createActionByOption(\"onErrorOccurred\")\n      };\n    }\n  }, {\n    key: \"executeCommand\",\n    value: function (commandName) {\n      return this._commandManager.executeCommand(commandName);\n    }\n  }, {\n    key: \"_setCurrentDirectory\",\n    value: function (directoryInfo) {\n      this._controller.setCurrentDirectory(directoryInfo);\n    }\n  }, {\n    key: \"_getCurrentDirectory\",\n    value: function () {\n      return this._controller.getCurrentDirectory();\n    }\n  }, {\n    key: \"_onControllerInitialized\",\n    value: function (_ref8) {\n      var controller = _ref8.controller;\n      this._controller = this._controller || controller;\n      var currentDirectory = controller.getCurrentDirectory();\n\n      if (!currentDirectory.fileItem.isRoot()) {\n        this._syncToCurrentDirectory();\n      }\n    }\n  }, {\n    key: \"_onDataLoading\",\n    value: function (_ref9) {\n      var operation = _ref9.operation;\n      var options = null;\n\n      if (\"navigation\" === operation) {\n        options = {\n          focusedItemKey: this._itemKeyToFocus\n        };\n        this._itemKeyToFocus = void 0;\n      }\n\n      this._itemView.refresh(options);\n    }\n  }, {\n    key: \"_onSelectedDirectoryChanged\",\n    value: function () {\n      var currentDirectory = this._getCurrentDirectory();\n\n      this._syncToCurrentDirectory();\n\n      this._actions.onCurrentDirectoryChanged({\n        directory: currentDirectory.fileItem\n      });\n    }\n  }, {\n    key: \"_syncToCurrentDirectory\",\n    value: function () {\n      var currentDirectory = this._getCurrentDirectory();\n\n      var currentPath = this._controller.getCurrentPath();\n\n      var currentPathKeys = currentDirectory.fileItem.pathKeys;\n\n      if (this._filesTreeView) {\n        this._filesTreeView.updateCurrentDirectory();\n      }\n\n      if (this._breadcrumbs) {\n        this._breadcrumbs.setCurrentDirectory(currentDirectory);\n      }\n\n      var options = {\n        currentPath: currentPath\n      };\n\n      if (!(0, _common.equalByValue)(this.option(\"currentPathKeys\"), currentPathKeys)) {\n        options.currentPathKeys = currentPathKeys;\n      }\n\n      this.option(options);\n    }\n  }, {\n    key: \"getDirectories\",\n    value: function (parentDirectoryInfo, skipNavigationOnError) {\n      return this._controller.getDirectories(parentDirectoryInfo, skipNavigationOnError);\n    }\n  }, {\n    key: \"_getSelectedItemInfos\",\n    value: function () {\n      return this._itemView.getSelectedItems();\n    }\n  }, {\n    key: \"refresh\",\n    value: function () {\n      return this.executeCommand(\"refresh\");\n    }\n  }, {\n    key: \"getCurrentDirectory\",\n    value: function () {\n      var directoryInfo = this._getCurrentDirectory();\n\n      return directoryInfo && directoryInfo.fileItem || null;\n    }\n  }, {\n    key: \"getSelectedItems\",\n    value: function () {\n      return this._getSelectedItemInfos().map(function (itemInfo) {\n        return itemInfo.fileItem;\n      });\n    }\n  }, {\n    key: \"_onSelectedItemOpened\",\n    value: function (_ref10) {\n      var fileItemInfo = _ref10.fileItemInfo;\n      var fileItem = fileItemInfo.fileItem;\n\n      if (!fileItem.isDirectory) {\n        this._actions.onSelectedFileOpened({\n          file: fileItem\n        });\n\n        return;\n      }\n\n      if (fileItem.isParentFolder) {\n        this._itemKeyToFocus = this._getCurrentDirectory().fileItem.key;\n      }\n\n      var newCurrentDirectory = fileItem.isParentFolder ? this._getCurrentDirectory().parentDirectory : fileItemInfo;\n\n      this._setCurrentDirectory(newCurrentDirectory);\n\n      if (newCurrentDirectory) {\n        this._filesTreeView.expandDirectory(newCurrentDirectory.parentDirectory);\n      }\n    }\n  }]);\n\n  return FileManager;\n}(_ui2.default);\n\n(0, _component_registrator2.default)(\"dxFileManager\", FileManager);\nmodule.exports = FileManager;","map":null,"metadata":{},"sourceType":"script"}