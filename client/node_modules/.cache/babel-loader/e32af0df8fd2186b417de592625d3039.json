{"ast":null,"code":"import { extend } from '@syncfusion/ej2-base';\nimport { remove, isNullOrUndefined, isBlazor } from '@syncfusion/ej2-base';\nimport { Pager } from '../../pager/pager';\nimport { PagerDropDown } from '../../pager/pager-dropdown';\nimport { ExternalMessage } from '../../pager/external-message';\nimport { extend as gridExtend, getActualProperties, isActionPrevent } from '../base/util';\nimport * as events from '../base/constant';\n/**\n * The `Page` module is used to render pager and handle paging action.\n */\n\nvar Page =\n/** @class */\nfunction () {\n  /**\n   * Constructor for the Grid paging module\n   * @hidden\n   */\n  function Page(parent, pageSettings) {\n    Pager.Inject(ExternalMessage, PagerDropDown);\n    this.parent = parent;\n    this.pageSettings = pageSettings;\n    this.addEventListener();\n  }\n  /**\n   * For internal use only - Get the module name.\n   * @private\n   */\n\n\n  Page.prototype.getModuleName = function () {\n    return 'pager';\n  };\n  /**\n   * The function used to render pager from grid pageSettings\n   * @return {void}\n   * @hidden\n   */\n\n\n  Page.prototype.render = function () {\n    var gObj = this.parent;\n    var pagerObj;\n    this.pagerDestroy();\n\n    if (!isNullOrUndefined(this.parent.pagerTemplate)) {\n      this.pageSettings.template = this.parent.pagerTemplate;\n      this.parent.pageTemplateChange = true;\n    }\n\n    this.element = this.parent.createElement('div', {\n      className: 'e-gridpager'\n    });\n    pagerObj = gridExtend({}, extend({}, getActualProperties(this.pageSettings)), {\n      click: this.clickHandler.bind(this),\n      dropDownChanged: this.onSelect.bind(this),\n      enableRtl: gObj.enableRtl,\n      locale: gObj.locale,\n      created: this.addAriaAttr.bind(this)\n    }, ['parentObj', 'propName']);\n    this.pagerObj = new Pager(pagerObj);\n    this.pagerObj.allowServerDataBinding = false;\n  };\n\n  Page.prototype.onSelect = function (e) {\n    this.pageSettings.pageSize = e.pageSize;\n\n    if (!this.isInitialLoad) {\n      this.pageSettings.currentPage = 1;\n    }\n  };\n\n  Page.prototype.addAriaAttr = function () {\n    if (!this.pageSettings.template) {\n      var numericContainerNew = this.parent.createElement('div', {\n        className: 'e-numericcontainer'\n      });\n      var pagerContainer = this.element.querySelector('.e-pagercontainer');\n      var frag = document.createDocumentFragment();\n      var numericContainer = this.element.querySelector('.e-numericcontainer');\n      var links = numericContainer.querySelectorAll('a');\n\n      for (var i = 0; i < links.length; i++) {\n        if (this.parent.getContentTable()) {\n          links[i].setAttribute('aria-owns', this.parent.getContentTable().id);\n        } else {\n          links[i].setAttribute('aria-owns', this.parent.element.getAttribute('id') + '_content_table');\n        }\n\n        var numericContainerDiv = this.parent.createElement('div');\n        numericContainerDiv.appendChild(links[i]);\n        frag.appendChild(numericContainerDiv);\n      }\n\n      numericContainerNew.appendChild(frag);\n      pagerContainer.replaceChild(numericContainerNew, numericContainer);\n      var classList = ['.e-mfirst', '.e-mprev', '.e-first', '.e-prev', '.e-next', '.e-last', '.e-mnext', '.e-mlast'];\n\n      for (var j = 0; j < classList.length; j++) {\n        var element = this.element.querySelector(classList[j]);\n\n        if (this.parent.getContentTable()) {\n          element.setAttribute('aria-owns', this.parent.getContentTable().id);\n        }\n      }\n    }\n  };\n\n  Page.prototype.dataReady = function (e) {\n    this.updateModel(e);\n  };\n  /**\n   * Refreshes the page count, pager information, and external message.\n   * @return {void}\n   */\n\n\n  Page.prototype.refresh = function () {\n    this.pagerObj.refresh();\n  };\n  /**\n   * Navigates to the target page according to the given number.\n   * @param  {number} pageNo - Defines the page number to navigate.\n   * @return {void}\n   */\n\n\n  Page.prototype.goToPage = function (pageNo) {\n    this.pagerObj.goToPage(pageNo);\n  };\n  /**\n   * @hidden\n   */\n\n\n  Page.prototype.setPageSize = function (pageSize) {\n    this.pagerObj.setPageSize(pageSize);\n  };\n  /**\n   * The function used to update pageSettings model\n   * @return {void}\n   * @hidden\n   */\n\n\n  Page.prototype.updateModel = function (e) {\n    this.parent.pageSettings.totalRecordsCount = e.count;\n    this.parent.dataBind();\n  };\n  /**\n   * The function used to trigger onActionComplete\n   * @return {void}\n   * @hidden\n   */\n\n\n  Page.prototype.onActionComplete = function (e) {\n    if (isBlazor() && !this.parent.isJsComponent) {\n      e.rows = null;\n    }\n\n    this.parent.trigger(events.actionComplete, extend(e, {\n      currentPage: this.parent.pageSettings.currentPage,\n      requestType: 'paging',\n      type: events.actionComplete\n    }));\n  };\n  /**\n   * @hidden\n   */\n\n\n  Page.prototype.onPropertyChanged = function (e) {\n    if (e.module !== this.getModuleName()) {\n      return;\n    }\n\n    var newProp = e.properties;\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n      this.pagerObj[prop] = newProp[prop];\n    }\n\n    this.pagerObj.dataBind();\n  };\n\n  Page.prototype.clickHandler = function (e) {\n    var gObj = this.parent;\n\n    if (this.isForceCancel || isActionPrevent(gObj) && !gObj.prevPageMoving) {\n      if (!this.isForceCancel) {\n        if (!isNullOrUndefined(e.newProp) && !isNullOrUndefined(e.newProp.pageSize)) {\n          gObj.notify(events.preventBatch, {\n            instance: this,\n            handler: this.setPageSize,\n            arg1: e.newProp.pageSize\n          });\n          this.pagerObj.pageSize = e.oldProp.pageSize;\n          gObj.pageSettings.pageSize = e.newProp.pageSize;\n        } else if (e.currentPage) {\n          gObj.notify(events.preventBatch, {\n            instance: this,\n            handler: this.goToPage,\n            arg1: e.currentPage\n          });\n          this.pagerObj.currentPage = gObj.pageSettings.currentPage === this.pagerObj.currentPage ? this.pagerObj.previousPageNo : gObj.pageSettings.currentPage;\n        }\n\n        this.isForceCancel = true;\n        this.pagerObj.dataBind();\n      } else {\n        this.isForceCancel = false;\n      }\n\n      e.cancel = true;\n      return;\n    }\n\n    gObj.pageSettings.pageSize = this.pagerObj.pageSize;\n    gObj.prevPageMoving = false;\n    var prevPage = this.pageSettings.currentPage;\n    this.pageSettings.currentPage = e.currentPage;\n    this.parent.notify(events.modelChanged, {\n      requestType: 'paging',\n      previousPage: prevPage,\n      currentPage: e.currentPage,\n      type: events.actionBegin\n    });\n    this.parent.requestTypeAction = 'paging';\n  };\n\n  Page.prototype.keyPressHandler = function (e) {\n    if (e.action in keyActions) {\n      e.preventDefault();\n      this.element.querySelector(keyActions[e.action]).click();\n    }\n  };\n  /**\n   * Defines the text of the external message.\n   * @param  {string} message - Defines the message to update.\n   * @return {void}\n   */\n\n\n  Page.prototype.updateExternalMessage = function (message) {\n    if (!this.pagerObj.enableExternalMessage) {\n      this.pagerObj.enableExternalMessage = true;\n      this.pagerObj.dataBind();\n    }\n\n    this.pagerObj.externalMessage = message;\n    this.pagerObj.dataBind();\n  };\n\n  Page.prototype.appendToElement = function (e) {\n    this.isInitialLoad = true;\n    this.parent.element.appendChild(this.element);\n    this.parent.setGridPager(this.element);\n    this.pagerObj.appendTo(this.element);\n    this.isInitialLoad = false;\n  };\n\n  Page.prototype.enableAfterRender = function (e) {\n    if (e.module === this.getModuleName() && e.enable) {\n      this.render();\n      this.appendToElement();\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  Page.prototype.addEventListener = function () {\n    this.handlers = {\n      load: this.render,\n      end: this.appendToElement,\n      ready: this.dataReady,\n      complete: this.onActionComplete,\n      updateLayout: this.enableAfterRender,\n      inboundChange: this.onPropertyChanged,\n      keyPress: this.keyPressHandler\n    };\n\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.on(events.initialLoad, this.handlers.load, this);\n    this.parent.on(events.initialEnd, this.handlers.end, this); //For initial rendering\n\n    this.parent.on(events.dataReady, this.handlers.ready, this);\n    this.parent.on(events.pageComplete, this.handlers.complete, this);\n    this.parent.on(events.uiUpdate, this.handlers.updateLayout, this);\n    this.parent.on(events.inBoundModelChanged, this.handlers.inboundChange, this);\n    this.parent.on(events.keyPressed, this.handlers.keyPress, this);\n  };\n  /**\n   * @hidden\n   */\n\n\n  Page.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(events.initialLoad, this.handlers.load);\n    this.parent.off(events.initialEnd, this.handlers.end); //For initial rendering\n\n    this.parent.off(events.dataReady, this.handlers.ready);\n    this.parent.off(events.pageComplete, this.handlers.complete);\n    this.parent.off(events.uiUpdate, this.handlers.updateLayout);\n    this.parent.off(events.inBoundModelChanged, this.handlers.inboundChange);\n    this.parent.off(events.keyPressed, this.handlers.keyPress);\n  };\n  /**\n   * To destroy the pager\n   * @return {void}\n   * @hidden\n   */\n\n\n  Page.prototype.destroy = function () {\n    this.removeEventListener();\n    this.pagerDestroy();\n  };\n\n  Page.prototype.pagerDestroy = function () {\n    if (this.pagerObj && !this.pagerObj.isDestroyed) {\n      this.pagerObj.destroy();\n      remove(this.element);\n    }\n  };\n\n  return Page;\n}();\n\nexport { Page };\n/**\n * @hidden\n */\n\nvar keyActions = {\n  pageUp: '.e-prev',\n  pageDown: '.e-next',\n  ctrlAltPageDown: '.e-last',\n  ctrlAltPageUp: '.e-first',\n  altPageUp: '.e-pp',\n  altPageDown: '.e-np'\n};","map":null,"metadata":{},"sourceType":"module"}