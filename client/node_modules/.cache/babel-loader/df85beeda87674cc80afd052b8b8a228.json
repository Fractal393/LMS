{"ast":null,"code":"import { isNullOrUndefined, addClass, extend, closest, updateBlazorTemplate, isBlazor } from '@syncfusion/ej2-base';\nimport * as events from '../base/constant';\nimport { appendChildren, alignFrozenEditForm } from '../base/util';\n/**\n * Edit render module is used to render grid edit row.\n * @hidden\n */\n\nvar InlineEditRender =\n/** @class */\nfunction () {\n  /**\n   * Constructor for render module\n   */\n  function InlineEditRender(parent) {\n    this.parent = parent;\n  }\n\n  InlineEditRender.prototype.addNew = function (elements, args) {\n    this.isEdit = false;\n    var mTbody;\n    var tbody;\n\n    if (this.parent.frozenRows && this.parent.editSettings.newRowPosition === 'Top') {\n      tbody = this.parent.getHeaderContent().querySelector('tbody');\n    } else {\n      tbody = this.parent.getContentTable().querySelector('tbody');\n    }\n\n    args.row = this.parent.createElement('tr', {\n      className: 'e-row e-addedrow'\n    });\n\n    if (tbody.querySelector('.e-emptyrow')) {\n      tbody.querySelector('.e-emptyrow').remove();\n\n      if (this.parent.getFrozenColumns()) {\n        var moveTbody = this.parent.getContent().querySelector('.e-movablecontent').querySelector('tbody');\n        moveTbody.firstElementChild.remove();\n      }\n    }\n\n    this.parent.editSettings.newRowPosition === 'Top' ? tbody.insertBefore(args.row, tbody.firstChild) : tbody.appendChild(args.row);\n    args.row.appendChild(this.getEditElement(elements, false, undefined, args, true));\n    this.parent.editModule.checkLastRow(args.row, args);\n\n    if (this.parent.getFrozenColumns()) {\n      var mEle = this.renderMovableform(args.row, args);\n\n      if (this.parent.frozenRows && this.parent.editSettings.newRowPosition === 'Top') {\n        mTbody = this.parent.getHeaderContent().querySelector('.e-movableheader').querySelector('tbody');\n      } else {\n        mTbody = this.parent.getContent().querySelector('.e-movablecontent').querySelector('tbody');\n      }\n\n      this.parent.editSettings.newRowPosition === 'Top' ? mTbody.insertBefore(mEle, mTbody.firstChild) : mTbody.appendChild(mEle);\n      args.row.querySelector('.e-normaledit').setAttribute('colspan', this.parent.getVisibleFrozenColumns() + '');\n      mEle.setAttribute('colspan', '' + (this.parent.getVisibleColumns().length - this.parent.getVisibleFrozenColumns()));\n\n      if (this.parent.height === 'auto') {\n        this.parent.notify(events.frozenHeight, {});\n      }\n    }\n  };\n\n  InlineEditRender.prototype.renderMovableform = function (ele, args) {\n    var mEle = ele.cloneNode(true);\n    var form = args.movableForm = mEle.querySelector('form');\n\n    if (this.parent.editSettings.template) {\n      form.innerHTML = '';\n      this.appendChildren(form, args.rowData, false);\n      return mEle;\n    }\n\n    this.renderMovable(ele, mEle);\n    mEle.querySelector('colgroup').innerHTML = this.parent.getHeaderContent().querySelector('.e-movableheader').querySelector('colgroup').innerHTML;\n    return mEle;\n  };\n\n  InlineEditRender.prototype.updateFreezeEdit = function (row, td) {\n    td = td.concat([].slice.call(this.getFreezeRow(row).querySelectorAll('td.e-rowcell')));\n    return td;\n  };\n\n  InlineEditRender.prototype.getFreezeRow = function (row) {\n    if (this.parent.getFrozenColumns()) {\n      var idx = parseInt(row.getAttribute('aria-rowindex'), 10);\n      var fCont = this.parent.getContent().querySelector('.e-frozencontent').querySelector('tbody');\n      var mCont = this.parent.getContent().querySelector('.e-movablecontent').querySelector('tbody');\n      var fHdr = this.parent.getHeaderContent().querySelector('.e-frozenheader').querySelector('tbody');\n      var mHdr = this.parent.getHeaderContent().querySelector('.e-movableheader').querySelector('tbody');\n\n      if (this.parent.frozenRows && idx >= this.parent.frozenRows) {\n        idx -= this.parent.frozenRows;\n      }\n\n      if (fCont.contains(row)) {\n        if (this.parent.infiniteScrollSettings.enableCache) {\n          return this.parent.getMovableRowByIndex(idx);\n        }\n\n        return mCont.children[idx];\n      } else if (mCont.contains(row)) {\n        if (this.parent.infiniteScrollSettings.enableCache) {\n          return this.parent.getRowByIndex(idx);\n        }\n\n        return fCont.children[idx];\n      } else if (fHdr.contains(row)) {\n        return mHdr.children[idx];\n      } else if (mHdr.contains(row)) {\n        return fHdr.children[idx];\n      }\n    }\n\n    return row;\n  };\n\n  InlineEditRender.prototype.update = function (elements, args) {\n    this.isEdit = true;\n    var cloneRow = 'cloneRow';\n\n    if (closest(args.row, '.e-movablecontent')) {\n      args.row = this.getFreezeRow(args.row);\n\n      if (isBlazor() && this.parent.isServerRendered) {\n        args[cloneRow] = args.row.cloneNode(true);\n      }\n    }\n\n    if (isBlazor() && this.parent.isServerRendered) {\n      args.row.parentNode.insertBefore(args[cloneRow], args.row);\n      args.row.classList.add('e-hiddenrow');\n      var tdElement = [].slice.call(args[cloneRow].querySelectorAll('td.e-rowcell'));\n      args[cloneRow].innerHTML = '';\n      tdElement = this.updateFreezeEdit(args[cloneRow], tdElement);\n      args[cloneRow].appendChild(this.getEditElement(elements, true, tdElement, args, true));\n      args[cloneRow].classList.add('e-editedrow');\n      this.refreshFreezeEdit(args[cloneRow], args);\n    } else {\n      var tdElement = [].slice.call(args.row.querySelectorAll('td.e-rowcell'));\n      args.row.innerHTML = '';\n      tdElement = this.updateFreezeEdit(args.row, tdElement);\n      args.row.appendChild(this.getEditElement(elements, true, tdElement, args, true));\n      args.row.classList.add('e-editedrow');\n      this.parent.editModule.checkLastRow(args.row, args);\n      this.refreshFreezeEdit(args.row, args);\n    }\n  };\n\n  InlineEditRender.prototype.refreshFreezeEdit = function (row, args) {\n    var td = row.firstChild;\n    var fCls;\n    var cont;\n    var frozen = 'frozen';\n    var cloneFrozen = 'cloneFrozen';\n    var idx = parseInt(row.getAttribute('aria-rowindex'), 10);\n\n    if (this.parent.getFrozenColumns()) {\n      if (idx < this.parent.frozenRows) {\n        cont = this.parent.getHeaderContent();\n        fCls = '.e-frozenheader';\n      } else {\n        cont = this.parent.getContent();\n        fCls = '.e-frozencontent';\n      }\n\n      var mTd = td.cloneNode(true);\n      var form = args.movableForm = mTd.querySelector('form');\n\n      if (this.parent.editSettings.template) {\n        form.innerHTML = '';\n        this.appendChildren(form, args.rowData, false);\n      }\n\n      var fRows = void 0;\n\n      if (cont.querySelector(fCls).contains(row)) {\n        fRows = this.parent.getMovableRowByIndex(idx);\n\n        if (isBlazor() && this.parent.isServerRendered) {\n          args[frozen] = fRows;\n          args[cloneFrozen] = fRows.cloneNode(true);\n          fRows.classList.add('e-hiddenrow');\n          fRows.parentNode.insertBefore(args[cloneFrozen], fRows);\n          this.updateFrozenCont(args[cloneFrozen], td, mTd);\n        } else {\n          this.updateFrozenCont(fRows, td, mTd);\n        }\n      } else {\n        fRows = this.parent.getRowByIndex(idx);\n\n        if (isBlazor() && this.parent.isServerRendered) {\n          args[frozen] = fRows;\n          args[cloneFrozen] = fRows.cloneNode(true);\n          fRows.parentNode.insertBefore(args[cloneFrozen], fRows);\n          fRows.classList.add('e-hiddenrow');\n          this.updateFrozenCont(args[cloneFrozen], mTd, td);\n        } else {\n          this.updateFrozenCont(fRows, mTd, td);\n        }\n      }\n\n      if (isBlazor() && this.parent.isServerRendered) {\n        args[cloneFrozen].appendChild(mTd);\n        args[cloneFrozen].classList.add('e-editedrow');\n      } else {\n        fRows.appendChild(mTd);\n        fRows.classList.add('e-editedrow');\n      }\n\n      alignFrozenEditForm(args.movableForm.querySelector('td:not(.e-hide)'), args.form.querySelector('td:not(.e-hide)'));\n    }\n  };\n\n  InlineEditRender.prototype.updateFrozenCont = function (row, ele, mEle) {\n    row.innerHTML = '';\n\n    if (!this.parent.editSettings.template) {\n      this.renderMovable(ele, mEle);\n      mEle.querySelector('colgroup').innerHTML = this.parent.getHeaderContent().querySelector('.e-movableheader').querySelector('colgroup').innerHTML;\n    }\n\n    ele.setAttribute('colspan', this.parent.getVisibleFrozenColumns() + '');\n    mEle.setAttribute('colspan', this.parent.getVisibleColumns().length - this.parent.getVisibleFrozenColumns() + '');\n  };\n\n  InlineEditRender.prototype.renderMovable = function (ele, mEle) {\n    var frzCols = this.parent.getFrozenColumns();\n    mEle.querySelector('tr').innerHTML = '';\n\n    for (var i = frzCols; i < this.parent.getColumns().length; i++) {\n      mEle.querySelector('tr').appendChild(ele.querySelector('tr').removeChild(ele.querySelector('tr').children[frzCols]));\n    }\n  };\n\n  InlineEditRender.prototype.getEditElement = function (elements, isEdit, tdElement, args, isFrozen) {\n    var gObj = this.parent;\n    var gLen = 0;\n    var isDetail = !isNullOrUndefined(gObj.detailTemplate) || !isNullOrUndefined(gObj.childGrid) ? 1 : 0;\n\n    if (gObj.allowGrouping) {\n      gLen = gObj.groupSettings.columns.length;\n    }\n\n    var td = this.parent.createElement('td', {\n      className: 'e-editcell e-normaledit',\n      attrs: {\n        colspan: (gObj.getVisibleColumns().length - gObj.getVisibleFrozenColumns() + this.parent.getIndentCount()).toString()\n      }\n    });\n    var form = args.form = this.parent.createElement('form', {\n      id: gObj.element.id + 'EditForm',\n      className: 'e-gridform'\n    });\n\n    if (this.parent.editSettings.template) {\n      this.appendChildren(form, args.rowData, isFrozen);\n      td.appendChild(form);\n      return td;\n    }\n\n    var table = this.parent.createElement('table', {\n      className: 'e-table e-inline-edit',\n      attrs: {\n        cellspacing: '0.25'\n      }\n    });\n    table.appendChild(gObj.getContentTable().querySelector('colgroup').cloneNode(true));\n    var tbody = this.parent.createElement('tbody');\n    var tr = this.parent.createElement('tr');\n    var i = 0;\n\n    if (isDetail) {\n      tr.insertBefore(this.parent.createElement('td', {\n        className: 'e-detailrowcollapse'\n      }), tr.firstChild);\n    }\n\n    if (gObj.isRowDragable()) {\n      tr.appendChild(this.parent.createElement('td', {\n        className: 'e-dragindentcell'\n      }));\n    }\n\n    while (i < gLen) {\n      tr.appendChild(this.parent.createElement('td', {\n        className: 'e-indentcell'\n      }));\n      i++;\n    }\n\n    var m = 0;\n    i = 0;\n\n    while (isEdit && m < tdElement.length && i < gObj.getColumns().length || i < gObj.getColumns().length) {\n      var span = isEdit ? tdElement[m].getAttribute('colspan') : null;\n      var col = gObj.getColumns()[i];\n      var td_1 = this.parent.createElement('td', {\n        className: 'e-rowcell',\n        attrs: {\n          style: 'text-align:' + (col.textAlign ? col.textAlign : ''),\n          'colspan': span ? span : ''\n        }\n      });\n\n      if (col.visible) {\n        td_1.appendChild(elements[col.uid]);\n\n        if (col.editType === 'booleanedit') {\n          td_1.classList.add('e-boolcell');\n        } else if (col.commands || col.commandsTemplate) {\n          addClass([td_1], 'e-unboundcell');\n        }\n      } else {\n        td_1.classList.add('e-hide');\n      }\n\n      tr.appendChild(td_1);\n      i = span ? i + parseInt(span, 10) : i + 1;\n      m++;\n    }\n\n    tbody.appendChild(tr);\n    table.appendChild(tbody);\n    form.appendChild(table);\n    td.appendChild(form);\n    return td;\n  };\n\n  InlineEditRender.prototype.removeEventListener = function () {//To destroy the renderer\n  };\n\n  InlineEditRender.prototype.appendChildren = function (form, data, isFrozen) {\n    var _this = this;\n\n    var dummyData = extend({}, data, {\n      isAdd: !this.isEdit,\n      isFrozen: isFrozen\n    }, true);\n    var editTemplateID = this.parent.element.id + 'editSettingsTemplate';\n    appendChildren(form, this.parent.getEditTemplate()(dummyData, this.parent, 'editSettingsTemplate', editTemplateID));\n\n    var setRules = function () {\n      var cols = _this.parent.getColumns();\n\n      for (var i = 0; i < cols.length; i++) {\n        if (cols[i].validationRules) {\n          _this.parent.editModule.formObj.rules[cols[i].field] = cols[i].validationRules;\n        }\n      }\n    };\n\n    updateBlazorTemplate(editTemplateID, 'Template', this.parent.editSettings, true, setRules);\n  };\n\n  return InlineEditRender;\n}();\n\nexport { InlineEditRender };","map":null,"metadata":{},"sourceType":"module"}