{"ast":null,"code":"import { isNullOrUndefined, closest, extend, updateBlazorTemplate } from '@syncfusion/ej2-base';\nimport { InlineEditRender } from './inline-edit-renderer';\nimport { BatchEditRender } from './batch-edit-renderer';\nimport { DialogEditRender } from './dialog-edit-renderer';\nimport { attributes, classList, isBlazor } from '@syncfusion/ej2-base';\nimport { CellType } from '../base/enum';\nimport { RowModelGenerator } from '../services/row-model-generator';\nimport { getComplexFieldID, getObject, appendChildren, parentsUntil } from '../base/util';\nimport * as events from '../base/constant';\n/**\n * Edit render module is used to render grid edit row.\n * @hidden\n */\n\nvar EditRender =\n/** @class */\nfunction () {\n  /**\n   * Constructor for render module\n   */\n  function EditRender(parent, serviceLocator) {\n    //Internal variables               \n    this.editType = {\n      'Inline': InlineEditRender,\n      'Normal': InlineEditRender,\n      'Batch': BatchEditRender,\n      'Dialog': DialogEditRender\n    };\n    this.parent = parent;\n    this.serviceLocator = serviceLocator;\n    this.renderer = new this.editType[this.parent.editSettings.mode](parent, serviceLocator);\n    this.focus = serviceLocator.getService('focus');\n  }\n\n  EditRender.prototype.addNew = function (args) {\n    this.renderer.addNew(this.getEditElements(args), args);\n    this.convertWidget(args);\n  };\n\n  EditRender.prototype.update = function (args) {\n    this.renderer.update(this.getEditElements(args), args);\n    this.parent.notify(events.beforeStartEdit, args);\n    this.convertWidget(args);\n  };\n\n  EditRender.prototype.convertWidget = function (args) {\n    var gObj = this.parent;\n    var isFocused;\n    var cell;\n    var value;\n    var fForm;\n    var frzCols = gObj.getFrozenColumns();\n    var form = gObj.editSettings.mode === 'Dialog' ? document.querySelector('#' + gObj.element.id + '_dialogEdit_wrapper').querySelector('.e-gridform') : gObj.element.querySelector('.e-gridform');\n\n    if (frzCols && gObj.editSettings.mode === 'Normal') {\n      var rowIndex = parseInt(args.row.getAttribute('aria-rowindex'), 10);\n\n      if (gObj.frozenRows && (args.requestType === 'add' && gObj.editSettings.newRowPosition === 'Top' || rowIndex < gObj.frozenRows)) {\n        fForm = gObj.element.querySelector('.e-movableheader').querySelector('.e-gridform');\n      } else {\n        fForm = gObj.element.querySelector('.e-movablecontent').querySelector('.e-gridform');\n      }\n    }\n\n    var cols = gObj.editSettings.mode !== 'Batch' ? gObj.getColumns() : [gObj.getColumnByField(args.columnName)];\n\n    for (var _i = 0, cols_1 = cols; _i < cols_1.length; _i++) {\n      var col = cols_1[_i];\n\n      if (this.parent.editSettings.template && !isNullOrUndefined(col.field)) {\n        var cellArgs = extend({}, args);\n        cellArgs.element = form.querySelector('[name=' + getComplexFieldID(col.field) + ']');\n\n        if (isNullOrUndefined(cellArgs.element) && frzCols) {\n          cellArgs.element = fForm.querySelector('[name=' + getComplexFieldID(col.field) + ']');\n        }\n\n        if (typeof col.edit.write === 'string') {\n          getObject(col.edit.write, window)(cellArgs);\n        } else {\n          col.edit.write(cellArgs);\n        }\n\n        continue;\n      }\n\n      if (this.parent.editModule.checkColumnIsGrouped(col) || col.commands) {\n        continue;\n      }\n\n      value = col.valueAccessor(col.field, args.rowData, col);\n\n      if (frzCols && cols.indexOf(col) >= frzCols && gObj.editSettings.mode === 'Normal') {\n        cell = fForm.querySelector('[e-mappinguid=' + col.uid + ']');\n      } else {\n        cell = form.querySelector('[e-mappinguid=' + col.uid + ']');\n      }\n\n      var temp = col.edit.write;\n\n      if (!isNullOrUndefined(cell)) {\n        if (typeof temp === 'string') {\n          temp = getObject(temp, window);\n          temp({\n            rowData: args.rowData,\n            element: cell,\n            column: col,\n            requestType: args.requestType,\n            row: args.row,\n            foreignKeyData: col.isForeignColumn() && getObject(col.field, args.foreignKeyData)\n          });\n        } else {\n          col.edit.write({\n            rowData: args.rowData,\n            element: cell,\n            column: col,\n            requestType: args.requestType,\n            row: args.row,\n            foreignKeyData: col.isForeignColumn() && getObject(col.field, args.foreignKeyData)\n          });\n        }\n\n        if (!isFocused && !cell.getAttribute('disabled')) {\n          this.focusElement(cell, args.type);\n          isFocused = true;\n        }\n      }\n    }\n\n    if (frzCols !== 0 && !this.parent.allowTextWrap && (args.requestType === 'add' || args.requestType === 'beginEdit') && this.parent.editSettings.mode !== 'Dialog' && !isNullOrUndefined(form) && !isNullOrUndefined(fForm)) {\n      var mTdElement = fForm.querySelector('tr').children[0];\n      var fTdElement = form.querySelector('tr').children[0];\n\n      if (fTdElement.offsetHeight > mTdElement.offsetHeight) {\n        mTdElement.style.height = fTdElement.offsetHeight + 'px';\n      } else {\n        fTdElement.style.height = mTdElement.offsetHeight + 'px';\n      }\n    }\n  };\n\n  EditRender.prototype.focusElement = function (elem, type) {\n    var chkBox = this.parent.element.querySelector('.e-edit-checkselect');\n\n    if (!isNullOrUndefined(chkBox)) {\n      chkBox.nextElementSibling.classList.add('e-focus');\n    }\n\n    if (this.parent.editSettings.mode === 'Batch') {\n      this.focus.onClick({\n        target: closest(elem, 'td')\n      }, true);\n    } else {\n      var isFocus = this.parent.enableVirtualization && this.parent.editSettings.mode === 'Normal' ? false : true;\n\n      if (isFocus || this.parent.enableVirtualization && this.parent.editSettings.newRowPosition === 'Bottom' && parentsUntil(elem, 'e-addedrow')) {\n        elem.focus();\n      } else {\n        // tslint:disable-next-line:no-any\n        elem.focus({\n          preventScroll: true\n        });\n      }\n    }\n\n    if (elem.classList.contains('e-defaultcell')) {\n      elem.setSelectionRange(elem.value.length, elem.value.length);\n    }\n  };\n\n  EditRender.prototype.getEditElements = function (args) {\n    var _this = this;\n\n    var gObj = this.parent;\n    var elements = {};\n    var cols = gObj.editSettings.mode !== 'Batch' ? gObj.getColumns() : [gObj.getColumnByField(args.columnName)];\n\n    if (this.parent.editSettings.template) {\n      return {};\n    }\n\n    var _loop_1 = function (i, len) {\n      var col = cols[i];\n\n      if (this_1.parent.editModule.checkColumnIsGrouped(col)) {\n        return \"continue\";\n      }\n\n      if (col.commands || col.commandsTemplate) {\n        var cells = void 0;\n        var cellRendererFact = this_1.serviceLocator.getService('cellRendererFactory');\n        var model = new RowModelGenerator(this_1.parent);\n        var cellRenderer = cellRendererFact.getCellRenderer(CellType.CommandColumn);\n        cells = model.generateRows(args.rowData)[0].cells;\n        var cell = cells.filter(function (cell) {\n          return cell.rowID;\n        });\n        var td = cellRenderer.render(cell[i], args.rowData, {\n          'index': args.row ? args.row.getAttribute('aria-rowindex') : 0\n        });\n        var div = td.firstElementChild;\n        div.setAttribute('textAlign', td.getAttribute('textAlign'));\n        elements[col.uid] = div;\n        return \"continue\";\n      }\n\n      var value = col.valueAccessor(col.field, args.rowData, col);\n      var tArgs = {\n        column: col,\n        value: value,\n        type: args.requestType,\n        data: args.rowData\n      };\n      var temp = col.edit.create;\n      var input;\n\n      if (col.editTemplate) {\n        input = this_1.parent.createElement('span', {\n          attrs: {\n            'e-mappinguid': col.uid\n          }\n        });\n        var tempID = this_1.parent.element.id + col.uid + 'editTemplate';\n        var tempData = extend({}, {}, args.rowData, true);\n        var template_1 = col.getEditTemplate()(tempData, this_1.parent, 'editTemplate', tempID);\n        /* tslint:disable-next-line:no-any */\n\n        this_1.parent.isReact && this_1.parent.editSettings.mode === 'Batch' ? setTimeout(function () {\n          appendChildren(input, template_1);\n        }) : appendChildren(input, template_1);\n\n        if (isBlazor()) {\n          var setRules = function (ruleColumn) {\n            var column = ruleColumn;\n\n            var func = function () {\n              _this.parent.editModule.formObj.rules[column.field] = column.validationRules;\n            };\n\n            return func;\n          };\n\n          updateBlazorTemplate(tempID, 'EditTemplate', col, true, setRules(col));\n        }\n      } else {\n        if (typeof temp === 'string') {\n          temp = getObject(temp, window);\n          input = temp(tArgs);\n        } else {\n          input = col.edit.create(tArgs);\n        }\n\n        if (typeof input === 'string') {\n          var div = this_1.parent.createElement('div');\n          div.innerHTML = input;\n          input = div.firstChild;\n        }\n\n        var isInput = input.tagName !== 'input' && input.querySelectorAll('input').length;\n        var complexFieldName = getComplexFieldID(col.field);\n        attributes(isInput ? input.querySelector('input') : input, {\n          name: complexFieldName,\n          'e-mappinguid': col.uid,\n          id: gObj.element.id + complexFieldName\n        });\n        classList(input, ['e-input', 'e-field'], []);\n\n        if (col.textAlign === 'Right') {\n          input.classList.add('e-ralign');\n        }\n\n        if ((col.isPrimaryKey || col.isIdentity) && args.requestType === 'beginEdit' || col.isIdentity && args.requestType === 'add') {\n          // already disabled in cell plugins\n          input.setAttribute('disabled', '');\n        }\n      }\n\n      elements[col.uid] = input;\n    };\n\n    var this_1 = this;\n\n    for (var i = 0, len = cols.length; i < len; i++) {\n      _loop_1(i, len);\n    }\n\n    return elements;\n  };\n\n  EditRender.prototype.destroy = function () {\n    this.renderer.removeEventListener();\n  };\n\n  return EditRender;\n}();\n\nexport { EditRender };","map":null,"metadata":{},"sourceType":"module"}