{"ast":null,"code":"/**\r\n * DevExtreme (ui/drawer/ui.drawer.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _events_engine = require(\"../../events/core/events_engine\");\n\nvar _events_engine2 = _interopRequireDefault(_events_engine);\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _type2 = _interopRequireDefault(_type);\n\nvar _dom = require(\"../../core/utils/dom\");\n\nvar _component_registrator = require(\"../../core/component_registrator\");\n\nvar _component_registrator2 = _interopRequireDefault(_component_registrator);\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _position = require(\"../../core/utils/position\");\n\nvar _ui = require(\"../widget/ui.widget\");\n\nvar _ui2 = _interopRequireDefault(_ui);\n\nvar _empty_template = require(\"../../core/templates/empty_template\");\n\nvar _window = require(\"../../core/utils/window\");\n\nvar _uiDrawerRenderingStrategy = require(\"./ui.drawer.rendering.strategy.push\");\n\nvar _uiDrawerRenderingStrategy2 = _interopRequireDefault(_uiDrawerRenderingStrategy);\n\nvar _uiDrawerRenderingStrategy3 = require(\"./ui.drawer.rendering.strategy.shrink\");\n\nvar _uiDrawerRenderingStrategy4 = _interopRequireDefault(_uiDrawerRenderingStrategy3);\n\nvar _uiDrawerRenderingStrategy5 = require(\"./ui.drawer.rendering.strategy.overlap\");\n\nvar _uiDrawerRenderingStrategy6 = _interopRequireDefault(_uiDrawerRenderingStrategy5);\n\nvar _uiDrawerRendering = require(\"./ui.drawer.rendering.strategy\");\n\nvar _click = require(\"../../events/click\");\n\nvar _fx = require(\"../../animation/fx\");\n\nvar _fx2 = _interopRequireDefault(_fx);\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar DRAWER_CLASS = \"dx-drawer\";\nvar DRAWER_WRAPPER_CLASS = \"dx-drawer-wrapper\";\nvar DRAWER_PANEL_CONTENT_CLASS = \"dx-drawer-panel-content\";\nvar DRAWER_VIEW_CONTENT_CLASS = \"dx-drawer-content\";\nvar DRAWER_SHADER_CLASS = \"dx-drawer-shader\";\nvar INVISIBLE_STATE_CLASS = \"dx-state-invisible\";\nvar OPENED_STATE_CLASS = \"dx-drawer-opened\";\nvar ANONYMOUS_TEMPLATE_NAME = \"content\";\nvar PANEL_TEMPLATE_NAME = \"panel\";\n\nvar Drawer = _ui2.default.inherit({\n  _getDefaultOptions: function () {\n    return (0, _extend.extend)(this.callBase(), {\n      position: \"left\",\n      opened: false,\n      minSize: null,\n      maxSize: null,\n      shading: false,\n      template: PANEL_TEMPLATE_NAME,\n      openedStateMode: \"shrink\",\n      revealMode: \"slide\",\n      animationEnabled: true,\n      animationDuration: 400,\n      closeOnOutsideClick: false,\n      contentTemplate: ANONYMOUS_TEMPLATE_NAME,\n      target: void 0\n    });\n  },\n  _setDeprecatedOptions: function () {\n    this.callBase();\n    (0, _extend.extend)(this._deprecatedOptions, {\n      target: {\n        since: \"20.1\",\n        message: \"Functionality associated with this option is not intended for the Drawer widget.\"\n      }\n    });\n  },\n  _init: function () {\n    this.callBase();\n\n    this._initStrategy();\n\n    this.$element().addClass(DRAWER_CLASS);\n    this._animations = [];\n    this._whenAnimationCompleted = void 0;\n    this._whenPanelContentRendered = void 0;\n    this._whenPanelContentRefreshed = void 0;\n    this._$wrapper = (0, _renderer2.default)(\"<div>\").addClass(DRAWER_WRAPPER_CLASS);\n    this._$viewContentWrapper = (0, _renderer2.default)(\"<div>\").addClass(DRAWER_VIEW_CONTENT_CLASS);\n\n    this._$wrapper.append(this._$viewContentWrapper);\n\n    this.$element().append(this._$wrapper);\n  },\n  _initStrategy: function () {\n    switch (this.option(\"openedStateMode\")) {\n      case \"push\":\n        this._strategy = new _uiDrawerRenderingStrategy2.default(this);\n        break;\n\n      case \"shrink\":\n        this._strategy = new _uiDrawerRenderingStrategy4.default(this);\n        break;\n\n      case \"overlap\":\n        this._strategy = new _uiDrawerRenderingStrategy6.default(this);\n        break;\n\n      default:\n        this._strategy = new _uiDrawerRenderingStrategy2.default(this);\n    }\n  },\n  _getAnonymousTemplateName: function () {\n    return ANONYMOUS_TEMPLATE_NAME;\n  },\n  _initTemplates: function () {\n    var defaultTemplates = {};\n    defaultTemplates[PANEL_TEMPLATE_NAME] = new _empty_template.EmptyTemplate();\n    defaultTemplates[ANONYMOUS_TEMPLATE_NAME] = new _empty_template.EmptyTemplate();\n\n    this._templateManager.addDefaultTemplates(defaultTemplates);\n\n    this.callBase();\n  },\n  _viewContentWrapperClickHandler: function (e) {\n    var closeOnOutsideClick = this.option(\"closeOnOutsideClick\");\n\n    if (_type2.default.isFunction(closeOnOutsideClick)) {\n      closeOnOutsideClick = closeOnOutsideClick(e);\n    }\n\n    if (closeOnOutsideClick && this.option(\"opened\")) {\n      this.stopAnimations();\n\n      if (this.option(\"shading\")) {\n        e.preventDefault();\n      }\n\n      this.hide();\n    }\n  },\n  _initMarkup: function () {\n    this.callBase();\n\n    this._toggleOpenedStateClass(this.option(\"opened\"));\n\n    this._renderPanelContentWrapper();\n\n    this._refreshOpenedStateModeClass();\n\n    this._refreshRevealModeClass();\n\n    this._renderShader();\n\n    this._whenPanelContentRendered = new _deferred.Deferred();\n\n    this._strategy.renderPanelContent(this._whenPanelContentRendered);\n\n    this._renderViewContent();\n\n    _events_engine2.default.off(this._$viewContentWrapper, _click.name);\n\n    _events_engine2.default.on(this._$viewContentWrapper, _click.name, this._viewContentWrapperClickHandler.bind(this));\n\n    this._refreshPositionClass();\n\n    this._refreshWrapperChildrenOrder();\n  },\n  _render: function () {\n    var _this = this;\n\n    this._initMinMaxSize();\n\n    this.callBase();\n\n    this._whenPanelContentRendered.always(function () {\n      _this._initMinMaxSize();\n\n      _this._strategy.refreshPanelElementSize(\"slide\" === _this.option(\"revealMode\") || !_this.isHorizontalDirection());\n\n      _this._renderPosition(_this.option(\"opened\"), false);\n    });\n  },\n  _renderPanelContentWrapper: function () {\n    this._$panelContentWrapper = (0, _renderer2.default)(\"<div>\").addClass(DRAWER_PANEL_CONTENT_CLASS);\n\n    this._$wrapper.append(this._$panelContentWrapper);\n  },\n  _refreshOpenedStateModeClass: function (prevOpenedStateMode) {\n    if (prevOpenedStateMode) {\n      this.$element().removeClass(DRAWER_CLASS + \"-\" + prevOpenedStateMode);\n    }\n\n    this.$element().addClass(DRAWER_CLASS + \"-\" + this.option(\"openedStateMode\"));\n  },\n  _refreshPositionClass: function (prevPosition) {\n    if (prevPosition) {\n      this.$element().removeClass(DRAWER_CLASS + \"-\" + prevPosition);\n    }\n\n    this.$element().addClass(DRAWER_CLASS + \"-\" + this.calcTargetPosition());\n  },\n  _refreshWrapperChildrenOrder: function () {\n    var position = this.calcTargetPosition();\n\n    if (this._strategy.isViewContentFirst(position, this.option(\"rtlEnabled\"))) {\n      this._$wrapper.prepend(this._$viewContentWrapper);\n    } else {\n      this._$wrapper.prepend(this._$panelContentWrapper);\n    }\n  },\n  _refreshRevealModeClass: function (prevRevealMode) {\n    if (prevRevealMode) {\n      this.$element().removeClass(DRAWER_CLASS + \"-\" + prevRevealMode);\n    }\n\n    this.$element().addClass(DRAWER_CLASS + \"-\" + this.option(\"revealMode\"));\n  },\n  _renderViewContent: function () {\n    var contentTemplateOption = this.option(\"contentTemplate\");\n\n    var contentTemplate = this._getTemplate(contentTemplateOption);\n\n    if (contentTemplate) {\n      var $viewTemplate = contentTemplate.render({\n        container: this.viewContent(),\n        noModel: true,\n        transclude: this._templateManager.anonymousTemplateName === contentTemplateOption\n      });\n\n      if ($viewTemplate.hasClass(\"ng-scope\")) {\n        (0, _renderer2.default)(this._$viewContentWrapper).children().not(\".\".concat(DRAWER_SHADER_CLASS)).replaceWith($viewTemplate);\n      }\n    }\n  },\n  _renderShader: function () {\n    this._$shader = this._$shader || (0, _renderer2.default)(\"<div>\").addClass(DRAWER_SHADER_CLASS);\n\n    this._$shader.appendTo(this.viewContent());\n\n    this._toggleShaderVisibility(this.option(\"opened\"));\n  },\n  _initSize: function () {\n    this._initMinMaxSize();\n  },\n  _initMinMaxSize: function () {\n    var realPanelSize = this.isHorizontalDirection() ? this.getRealPanelWidth() : this.getRealPanelHeight();\n    this._maxSize = this.option(\"maxSize\") || realPanelSize;\n    this._minSize = this.option(\"minSize\") || 0;\n  },\n  calcTargetPosition: function () {\n    var position = this.option(\"position\");\n    var rtl = this.option(\"rtlEnabled\");\n    var result = position;\n\n    if (\"before\" === position) {\n      result = rtl ? \"right\" : \"left\";\n    } else {\n      if (\"after\" === position) {\n        result = rtl ? \"left\" : \"right\";\n      }\n    }\n\n    return result;\n  },\n  getOverlayTarget: function () {\n    return this._options.silent(\"target\") || this._$wrapper;\n  },\n  getOverlay: function () {\n    return this._overlay;\n  },\n  getMaxSize: function () {\n    return this._maxSize;\n  },\n  getMinSize: function () {\n    return this._minSize;\n  },\n  getRealPanelWidth: function () {\n    if ((0, _window.hasWindow)()) {\n      if (_type2.default.isDefined(this.option(\"templateSize\"))) {\n        return this.option(\"templateSize\");\n      } else {\n        return this.getElementWidth(this._strategy.getPanelContent());\n      }\n    } else {\n      return 0;\n    }\n  },\n  getElementWidth: function ($element) {\n    var $children = $element.children();\n    return $children.length ? (0, _position.getBoundingRect)($children.eq(0).get(0)).width : (0, _position.getBoundingRect)($element.get(0)).width;\n  },\n  getRealPanelHeight: function () {\n    if ((0, _window.hasWindow)()) {\n      if (_type2.default.isDefined(this.option(\"templateSize\"))) {\n        return this.option(\"templateSize\");\n      } else {\n        return this.getElementHeight(this._strategy.getPanelContent());\n      }\n    } else {\n      return 0;\n    }\n  },\n  getElementHeight: function ($element) {\n    var $children = $element.children();\n    return $children.length ? (0, _position.getBoundingRect)($children.eq(0).get(0)).height : (0, _position.getBoundingRect)($element.get(0)).height;\n  },\n  isHorizontalDirection: function () {\n    var position = this.calcTargetPosition();\n    return \"left\" === position || \"right\" === position;\n  },\n  stopAnimations: function (jumpToEnd) {\n    _fx2.default.stop(this._$shader, jumpToEnd);\n\n    _fx2.default.stop((0, _renderer2.default)(this.content()), jumpToEnd);\n\n    _fx2.default.stop((0, _renderer2.default)(this.viewContent()), jumpToEnd);\n\n    var overlay = this.getOverlay();\n\n    if (overlay) {\n      _fx2.default.stop((0, _renderer2.default)(overlay.$content()), jumpToEnd);\n    }\n  },\n  setZIndex: function (zIndex) {\n    this._$shader.css(\"zIndex\", zIndex - 1);\n\n    this._$panelContentWrapper.css(\"zIndex\", zIndex);\n  },\n  resizeContent: function () {\n    this.resizeViewContent;\n  },\n  resizeViewContent: function () {\n    (0, _dom.triggerResizeEvent)(this.viewContent());\n  },\n  _isInvertedPosition: function () {\n    var position = this.calcTargetPosition();\n    return \"right\" === position || \"bottom\" === position;\n  },\n  _renderPosition: function (isDrawerOpened, animate, jumpToEnd) {\n    this.stopAnimations(jumpToEnd);\n    this._animations = [];\n\n    if (!(0, _window.hasWindow)()) {\n      return;\n    }\n\n    animate = _type2.default.isDefined(animate) ? animate && this.option(\"animationEnabled\") : this.option(\"animationEnabled\");\n\n    if (isDrawerOpened) {\n      this._toggleShaderVisibility(isDrawerOpened);\n    }\n\n    this._strategy.renderPosition(isDrawerOpened, animate);\n\n    this._strategy.renderShaderVisibility(isDrawerOpened, animate, this.option(\"animationDuration\"));\n  },\n  _animationCompleteHandler: function () {\n    this.resizeViewContent();\n\n    if (this._whenAnimationCompleted) {\n      this._whenAnimationCompleted.resolve();\n\n      this._animations = [];\n    }\n  },\n  _getPositionCorrection: function () {\n    return this._isInvertedPosition() ? -1 : 1;\n  },\n  _dispose: function () {\n    _uiDrawerRendering.animation.complete((0, _renderer2.default)(this.viewContent()));\n\n    this.callBase();\n  },\n  _visibilityChanged: function (visible) {\n    if (visible) {\n      this._dimensionChanged();\n    }\n  },\n  _dimensionChanged: function () {\n    this._initMinMaxSize();\n\n    this._strategy.refreshPanelElementSize(\"slide\" === this.option(\"revealMode\"));\n\n    this._renderPosition(this.option(\"opened\"), false);\n  },\n  _toggleShaderVisibility: function (visible) {\n    if (this.option(\"shading\")) {\n      this._$shader.toggleClass(INVISIBLE_STATE_CLASS, !visible);\n\n      this._$shader.css(\"visibility\", visible ? \"visible\" : \"hidden\");\n    } else {\n      this._$shader.toggleClass(INVISIBLE_STATE_CLASS, true);\n    }\n  },\n  _toggleOpenedStateClass: function (opened) {\n    this.$element().toggleClass(OPENED_STATE_CLASS, opened);\n  },\n  _refreshPanel: function () {\n    var _this2 = this;\n\n    (0, _renderer2.default)(this.viewContent()).css(\"paddingLeft\", 0);\n    (0, _renderer2.default)(this.viewContent()).css(\"left\", 0);\n    (0, _renderer2.default)(this.viewContent()).css(\"transform\", \"translate(0px, 0px)\");\n\n    this._removePanelContentWrapper();\n\n    this._removeOverlay();\n\n    this._renderPanelContentWrapper();\n\n    this._refreshWrapperChildrenOrder();\n\n    this._whenPanelContentRefreshed = new _deferred.Deferred();\n\n    this._strategy.renderPanelContent(this._whenPanelContentRefreshed);\n\n    if ((0, _window.hasWindow)()) {\n      this._whenPanelContentRefreshed.always(function () {\n        _this2._strategy.refreshPanelElementSize(\"slide\" === _this2.option(\"revealMode\"));\n\n        _this2._renderPosition(_this2.option(\"opened\"), false, true);\n      });\n    }\n  },\n  _clean: function () {\n    this._cleanFocusState();\n\n    this._removePanelContentWrapper();\n\n    this._removeOverlay();\n  },\n  _removePanelContentWrapper: function () {\n    if (this._$panelContentWrapper) {\n      this._$panelContentWrapper.remove();\n    }\n  },\n  _removeOverlay: function () {\n    if (this._overlay) {\n      this._overlay.dispose();\n\n      delete this._overlay;\n      delete this._$panelContentWrapper;\n    }\n  },\n  _optionChanged: function (args) {\n    switch (args.name) {\n      case \"width\":\n        this.callBase(args);\n\n        this._dimensionChanged();\n\n        break;\n\n      case \"opened\":\n        this._renderPosition(args.value);\n\n        this._toggleOpenedStateClass(args.value);\n\n        break;\n\n      case \"position\":\n        this._refreshPositionClass(args.previousValue);\n\n        this._refreshWrapperChildrenOrder();\n\n        this._invalidate();\n\n        break;\n\n      case \"contentTemplate\":\n      case \"template\":\n        this._invalidate();\n\n        break;\n\n      case \"openedStateMode\":\n      case \"target\":\n        this._initStrategy();\n\n        this._refreshOpenedStateModeClass(args.previousValue);\n\n        this._refreshPanel();\n\n        break;\n\n      case \"minSize\":\n      case \"maxSize\":\n        this._initMinMaxSize();\n\n        this._renderPosition(this.option(\"opened\"), false);\n\n        break;\n\n      case \"revealMode\":\n        this._refreshRevealModeClass(args.previousValue);\n\n        this._refreshPanel();\n\n        break;\n\n      case \"shading\":\n        this._toggleShaderVisibility(this.option(\"opened\"));\n\n        break;\n\n      case \"animationEnabled\":\n      case \"animationDuration\":\n      case \"closeOnOutsideClick\":\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  content: function () {\n    return (0, _dom.getPublicElement)(this._$panelContentWrapper);\n  },\n  viewContent: function () {\n    return (0, _dom.getPublicElement)(this._$viewContentWrapper);\n  },\n  show: function () {\n    return this.toggle(true);\n  },\n  hide: function () {\n    return this.toggle(false);\n  },\n  toggle: function (opened) {\n    var targetOpened = void 0 === opened ? !this.option(\"opened\") : opened;\n    this._whenAnimationCompleted = new _deferred.Deferred();\n    this.option(\"opened\", targetOpened);\n    return this._whenAnimationCompleted.promise();\n  }\n});\n\n(0, _component_registrator2.default)(\"dxDrawer\", Drawer);\nmodule.exports = Drawer;","map":null,"metadata":{},"sourceType":"script"}