{"ast":null,"code":"import { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { formatUnit } from '@syncfusion/ej2-base';\nimport { columnWidthChanged } from '../base/constant';\nimport { Column } from '../models/column';\nimport { parentsUntil, ispercentageWidth } from '../base/util';\n/**\n * ColumnWidthService\n * @hidden\n */\n\nvar ColumnWidthService =\n/** @class */\nfunction () {\n  function ColumnWidthService(parent) {\n    this.parent = parent;\n  }\n\n  ColumnWidthService.prototype.setWidthToColumns = function () {\n    var i = 0;\n    var indexes = this.parent.getColumnIndexesInView();\n    var wFlag = true;\n    var totalColumnsWidth = 0;\n\n    if (this.parent.allowGrouping) {\n      for (var len = this.parent.groupSettings.columns.length; i < len; i++) {\n        if (this.parent.enableColumnVirtualization && indexes.indexOf(i) === -1) {\n          wFlag = false;\n          continue;\n        }\n\n        this.setColumnWidth(new Column({\n          width: '30px'\n        }), i);\n      }\n    }\n\n    if (this.parent.detailTemplate || this.parent.childGrid) {\n      this.setColumnWidth(new Column({\n        width: '30px'\n      }), i);\n      i++;\n    }\n\n    if (this.parent.isRowDragable()) {\n      this.setColumnWidth(new Column({\n        width: '30px'\n      }), i);\n      i++;\n    }\n\n    var columns = this.parent.getColumns();\n\n    for (var j = 0; j < columns.length; j++) {\n      this.setColumnWidth(columns[j], wFlag && this.parent.enableColumnVirtualization ? undefined : j + i);\n    }\n\n    totalColumnsWidth = this.getTableWidth(this.parent.getColumns());\n\n    if (this.parent.width !== 'auto' && this.parent.width.toString().indexOf('%') === -1) {\n      this.setMinwidthBycalculation(totalColumnsWidth);\n    }\n  };\n\n  ColumnWidthService.prototype.setMinwidthBycalculation = function (tWidth) {\n    var difference = 0;\n    var collection = this.parent.getColumns().filter(function (a) {\n      return isNullOrUndefined(a.width) || a.width === 'auto';\n    });\n\n    if (collection.length) {\n      if (!isNullOrUndefined(this.parent.width) && this.parent.width !== 'auto') {\n        difference = (typeof this.parent.width === 'string' ? parseInt(this.parent.width, 10) : this.parent.width) - tWidth;\n      }\n\n      var tmWidth = 0;\n\n      for (var _i = 0, collection_1 = collection; _i < collection_1.length; _i++) {\n        var cols = collection_1[_i];\n        tmWidth += !isNullOrUndefined(cols.minWidth) ? typeof cols.minWidth === 'string' ? parseInt(cols.minWidth, 10) : cols.minWidth : 0;\n      }\n\n      for (var i = 0; i < collection.length; i++) {\n        if (tWidth === 0 && this.parent.allowResizing && this.isWidthUndefined() && i !== collection.length - 1) {\n          this.setUndefinedColumnWidth(collection);\n        }\n\n        if (tWidth !== 0 && difference < tmWidth) {\n          this.setWidth(collection[i].minWidth, this.parent.getColumnIndexByField(collection[i].field));\n        } else if (tWidth !== 0 && difference > tmWidth) {\n          this.setWidth('', this.parent.getColumnIndexByField(collection[i].field), true);\n        }\n      }\n    }\n  };\n\n  ColumnWidthService.prototype.setUndefinedColumnWidth = function (collection) {\n    for (var k = 0; k < collection.length; k++) {\n      if (k !== collection.length - 1) {\n        collection[k].width = 200;\n        this.setWidth(200, this.parent.getColumnIndexByField(collection[k].field));\n      }\n    }\n  };\n\n  ColumnWidthService.prototype.setColumnWidth = function (column, index, module) {\n    if (this.parent.getColumns().length < 1) {\n      return;\n    }\n\n    var columnIndex = isNullOrUndefined(index) ? this.parent.getNormalizedColumnIndex(column.uid) : index;\n    var cWidth = this.getWidth(column);\n    var tgridWidth = this.getTableWidth(this.parent.getColumns());\n\n    if (cWidth !== null) {\n      this.setWidth(cWidth, columnIndex);\n\n      if (this.parent.width !== 'auto' && this.parent.width.toString().indexOf('%') === -1) {\n        this.setMinwidthBycalculation(tgridWidth);\n      }\n\n      if (this.parent.allowResizing && module === 'resize' || this.parent.getFrozenColumns() && this.parent.allowResizing) {\n        this.setWidthToTable();\n      }\n\n      this.parent.notify(columnWidthChanged, {\n        index: columnIndex,\n        width: cWidth,\n        column: column,\n        module: module\n      });\n    }\n  };\n\n  ColumnWidthService.prototype.setWidth = function (width, index, clear) {\n    if (this.parent.groupSettings.columns.length > index && ispercentageWidth(this.parent)) {\n      var elementWidth = this.parent.element.offsetWidth;\n      width = (30 / elementWidth * 100).toFixed(1) + '%';\n    }\n\n    var header = this.parent.getHeaderTable();\n    var content = this.parent.getContentTable();\n    var fWidth = formatUnit(width);\n    var headerCol;\n    var frzCols = this.parent.getFrozenColumns();\n    var mHdr = this.parent.getHeaderContent().querySelector('.e-movableheader');\n    var mCont = this.parent.getContent().querySelector('.e-movablecontent');\n\n    if (frzCols && index >= frzCols && mHdr && mHdr.querySelector('colgroup')) {\n      headerCol = mHdr.querySelector('colgroup').children[index - frzCols];\n    } else if (this.parent.enableColumnVirtualization && frzCols && this.parent.contentModule.isXaxis() && mHdr.scrollLeft > 0) {\n      var colGroup = mHdr.querySelector('colgroup');\n      headerCol = colGroup.children[colGroup.children.length - 1 - index];\n    } else {\n      headerCol = header.querySelector('colgroup').children[index];\n    }\n\n    if (headerCol && !clear) {\n      headerCol.style.width = fWidth;\n    } else if (headerCol && clear) {\n      headerCol.style.width = ' ';\n    }\n\n    var contentCol;\n\n    if (frzCols && index >= frzCols) {\n      contentCol = this.parent.getContent().querySelector('.e-movablecontent').querySelector('colgroup').children[index - frzCols];\n    } else if (this.parent.enableColumnVirtualization && frzCols && this.parent.contentModule.isXaxis() && mCont.scrollLeft > 0) {\n      var colGroup = this.parent.getContent().querySelector('.e-movablecontent').querySelector('colgroup');\n      contentCol = colGroup.children[colGroup.children.length - 1 - index];\n    } else {\n      contentCol = content.querySelector('colgroup').children[index];\n    }\n\n    if (contentCol && !clear) {\n      contentCol.style.width = fWidth;\n    } else if (contentCol && clear) {\n      contentCol.style.width = ' ';\n    }\n\n    var edit = this.parent.element.querySelectorAll('.e-table.e-inline-edit');\n    var editTableCol = [];\n\n    for (var i = 0; i < edit.length; i++) {\n      if (parentsUntil(edit[i], 'e-grid').id === this.parent.element.id) {\n        for (var j = 0; j < edit[i].querySelector('colgroup').children.length; j++) {\n          editTableCol.push(edit[i].querySelector('colgroup').children[j]);\n        }\n      }\n    }\n\n    if (edit.length && editTableCol.length) {\n      editTableCol[index].style.width = fWidth;\n    }\n  };\n\n  ColumnWidthService.prototype.getSiblingsHeight = function (element) {\n    var previous = this.getHeightFromDirection(element, 'previous');\n    var next = this.getHeightFromDirection(element, 'next');\n    return previous + next;\n  };\n\n  ColumnWidthService.prototype.getHeightFromDirection = function (element, direction) {\n    var sibling = element[direction + 'ElementSibling'];\n    var result = 0;\n    var classList = ['e-gridheader', 'e-gridfooter', 'e-groupdroparea', 'e-gridpager', 'e-toolbar'];\n\n    while (sibling) {\n      if (classList.some(function (value) {\n        return sibling.classList.contains(value);\n      })) {\n        result += sibling.offsetHeight;\n      }\n\n      sibling = sibling[direction + 'ElementSibling'];\n    }\n\n    return result;\n  };\n\n  ColumnWidthService.prototype.isWidthUndefined = function () {\n    var isWidUndefCount = this.parent.getColumns().filter(function (col) {\n      return isNullOrUndefined(col.width) && isNullOrUndefined(col.minWidth);\n    }).length;\n    return this.parent.getColumns().length === isWidUndefCount;\n  };\n\n  ColumnWidthService.prototype.getWidth = function (column) {\n    if (isNullOrUndefined(column.width) && this.parent.allowResizing && isNullOrUndefined(column.minWidth) && !this.isWidthUndefined()) {\n      column.width = 200;\n    }\n\n    if (this.parent.frozenColumns && isNullOrUndefined(column.width) && column.index < this.parent.frozenColumns) {\n      column.width = 200;\n    }\n\n    if (!column.width) {\n      return null;\n    }\n\n    var width = parseInt(column.width.toString(), 10);\n\n    if (column.minWidth && width < parseInt(column.minWidth.toString(), 10)) {\n      return column.minWidth;\n    } else if (column.maxWidth && width > parseInt(column.maxWidth.toString(), 10)) {\n      return column.maxWidth;\n    } else {\n      return column.width;\n    }\n  };\n\n  ColumnWidthService.prototype.getTableWidth = function (columns) {\n    var tWidth = 0;\n\n    for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {\n      var column = columns_1[_i];\n      var cWidth = this.getWidth(column);\n\n      if (column.width === 'auto') {\n        cWidth = 0;\n      }\n\n      if (column.visible !== false && cWidth !== null) {\n        tWidth += parseInt(cWidth.toString(), 10);\n      }\n    }\n\n    return tWidth;\n  };\n\n  ColumnWidthService.prototype.calcMovableOrFreezeColWidth = function (tableType) {\n    var columns = this.parent.getColumns().slice();\n\n    if (tableType === 'movable') {\n      columns.splice(0, this.parent.getFrozenColumns());\n    } else if (tableType === 'freeze') {\n      columns.splice(this.parent.getFrozenColumns(), columns.length);\n    }\n\n    return formatUnit(this.getTableWidth(columns));\n  };\n\n  ColumnWidthService.prototype.setWidthToFrozenTable = function () {\n    var freezeWidth = this.calcMovableOrFreezeColWidth('freeze');\n    this.parent.getHeaderTable().style.width = freezeWidth;\n    this.parent.getContentTable().style.width = freezeWidth;\n  };\n\n  ColumnWidthService.prototype.setWidthToMovableTable = function () {\n    var movableWidth = '';\n    var isColUndefined = this.parent.getColumns().filter(function (a) {\n      return isNullOrUndefined(a.width);\n    }).length >= 1;\n    var isWidthAuto = this.parent.getColumns().filter(function (a) {\n      return a.width === 'auto';\n    }).length >= 1;\n\n    if (typeof this.parent.width === 'number' && !isColUndefined && !isWidthAuto) {\n      movableWidth = formatUnit(this.parent.width - parseInt(this.calcMovableOrFreezeColWidth('freeze').split('px')[0], 10) - 5);\n    } else if (!isColUndefined && !isWidthAuto) {\n      movableWidth = this.calcMovableOrFreezeColWidth('movable');\n    }\n\n    if (this.parent.getHeaderContent().querySelector('.e-movableheader').firstElementChild) {\n      this.parent.getHeaderContent().querySelector('.e-movableheader').firstElementChild.style.width = movableWidth;\n    }\n\n    this.parent.getContent().querySelector('.e-movablecontent').firstElementChild.style.width = movableWidth;\n  };\n\n  ColumnWidthService.prototype.setWidthToFrozenEditTable = function () {\n    var freezeWidth = this.calcMovableOrFreezeColWidth('freeze');\n    this.parent.element.querySelectorAll('.e-table.e-inline-edit')[0].style.width = freezeWidth;\n  };\n\n  ColumnWidthService.prototype.setWidthToMovableEditTable = function () {\n    var movableWidth = this.calcMovableOrFreezeColWidth('movable');\n    this.parent.element.querySelectorAll('.e-table.e-inline-edit')[1].style.width = movableWidth;\n  };\n\n  ColumnWidthService.prototype.setWidthToTable = function () {\n    var tWidth = formatUnit(this.getTableWidth(this.parent.getColumns()));\n\n    if (this.parent.getFrozenColumns()) {\n      this.setWidthToFrozenTable();\n      this.setWidthToMovableTable();\n    } else {\n      if (this.parent.detailTemplate || this.parent.childGrid) {\n        this.setColumnWidth(new Column({\n          width: '30px'\n        }));\n      }\n\n      this.parent.getHeaderTable().style.width = tWidth;\n      this.parent.getContentTable().style.width = tWidth;\n    }\n\n    var edit = this.parent.element.querySelector('.e-table.e-inline-edit');\n\n    if (edit && this.parent.getFrozenColumns()) {\n      this.setWidthToFrozenEditTable();\n      this.setWidthToMovableEditTable();\n    } else if (edit) {\n      edit.style.width = tWidth;\n    }\n  };\n\n  return ColumnWidthService;\n}();\n\nexport { ColumnWidthService };","map":null,"metadata":{},"sourceType":"module"}