{"ast":null,"code":"import { Draggable, Droppable, isBlazor } from '@syncfusion/ej2-base';\nimport { createElement, closest, remove, classList, addClass, removeClass } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined, extend } from '@syncfusion/ej2-base';\nimport { parentsUntil, isActionPrevent, isGroupAdaptive, updatecloneRow } from '../base/util';\nimport * as events from '../base/constant';\nimport { AriaService } from '../services/aria-service';\nimport { GroupModelGenerator } from '../services/group-model-generator';\nimport { DataUtil } from '@syncfusion/ej2-data';\n/**\n *\n * The `Group` module is used to handle group action.\n */\n\nvar Group =\n/** @class */\nfunction () {\n  /**\n   * Constructor for Grid group module\n   * @hidden\n   */\n  function Group(parent, groupSettings, sortedColumns, serviceLocator) {\n    var _this = this; //Internal variables\n\n\n    this.sortRequired = true;\n    this.isAppliedGroup = false;\n    this.isAppliedUnGroup = false;\n    this.reorderingColumns = [];\n    this.visualElement = createElement('div', {\n      className: 'e-cloneproperties e-dragclone e-gdclone',\n      styles: 'line-height:23px',\n      attrs: {\n        action: 'grouping'\n      }\n    });\n\n    this.helper = function (e) {\n      var gObj = _this.parent;\n      var target = e.sender.target;\n      var element = target.classList.contains('e-groupheadercell') ? target : parentsUntil(target, 'e-groupheadercell');\n\n      if (!element || !target.classList.contains('e-drag') && _this.groupSettings.allowReordering) {\n        return false;\n      }\n\n      _this.column = gObj.getColumnByField(element.firstElementChild.getAttribute('ej-mappingname'));\n      _this.visualElement.textContent = element.textContent;\n      _this.visualElement.style.width = element.offsetWidth + 2 + 'px';\n      _this.visualElement.style.height = element.offsetHeight + 2 + 'px';\n\n      _this.visualElement.setAttribute('e-mappinguid', _this.column.uid);\n\n      gObj.element.appendChild(_this.visualElement);\n      return _this.visualElement;\n    };\n\n    this.dragStart = function (e) {\n      _this.parent.element.classList.add('e-ungroupdrag');\n\n      if (isBlazor()) {\n        e.bindEvents(e.dragElement);\n      }\n    };\n\n    this.drag = function (e) {\n      if (_this.groupSettings.allowReordering) {\n        _this.animateDropper(e);\n      }\n\n      var target = e.target;\n\n      var cloneElement = _this.parent.element.querySelector('.e-cloneproperties');\n\n      _this.parent.trigger(events.columnDrag, {\n        target: target,\n        draggableType: 'headercell',\n        column: _this.column\n      });\n\n      if (!_this.groupSettings.allowReordering) {\n        classList(cloneElement, ['e-defaultcur'], ['e-notallowedcur']);\n\n        if (!(parentsUntil(target, 'e-gridcontent') || parentsUntil(target, 'e-headercell'))) {\n          classList(cloneElement, ['e-notallowedcur'], ['e-defaultcur']);\n        }\n      }\n    };\n\n    this.dragStop = function (e) {\n      _this.parent.element.classList.remove('e-ungroupdrag');\n\n      var preventDrop = !(parentsUntil(e.target, 'e-gridcontent') || parentsUntil(e.target, 'e-gridheader'));\n\n      if (_this.groupSettings.allowReordering && preventDrop) {\n        remove(e.helper);\n\n        if (parentsUntil(e.target, 'e-groupdroparea')) {\n          _this.rearrangeGroup(e);\n        } else if (!parentsUntil(e.target, 'e-grid')) {\n          var field = _this.parent.getColumnByUid(e.helper.getAttribute('e-mappinguid')).field;\n\n          if (_this.groupSettings.columns.indexOf(field) !== -1) {\n            _this.ungroupColumn(field);\n          }\n        }\n\n        return;\n      } else if (preventDrop) {\n        remove(e.helper);\n        return;\n      }\n    };\n\n    this.animateDropper = function (e) {\n      var uid = _this.parent.element.querySelector('.e-cloneproperties').getAttribute('e-mappinguid');\n\n      var dragField = _this.parent.getColumnByUid(uid).field;\n\n      var parent = parentsUntil(e.target, 'e-groupdroparea');\n      var dropTarget = parentsUntil(e.target, 'e-group-animator'); // tslint:disable-next-line\n\n      var grouped = [].slice.call(_this.element.querySelectorAll('.e-groupheadercell')).map(function (e) {\n        return e.querySelector('div').getAttribute('ej-mappingname');\n      });\n      var cols = JSON.parse(JSON.stringify(grouped));\n\n      if (dropTarget || parent) {\n        if (dropTarget) {\n          var dropField = dropTarget.querySelector('div[ej-mappingname]').getAttribute('ej-mappingname');\n          var dropIndex = +dropTarget.getAttribute('index');\n\n          if (dropField !== dragField) {\n            var dragIndex = cols.indexOf(dragField);\n\n            if (dragIndex !== -1) {\n              cols.splice(dragIndex, 1);\n            }\n\n            var flag = dropIndex !== -1 && dragIndex === dropIndex;\n            cols.splice(dropIndex + (flag ? 1 : 0), 0, dragField);\n          }\n        } else if (parent && cols.indexOf(dragField) === -1) {\n          cols.push(dragField);\n        }\n\n        _this.element.innerHTML = '';\n\n        if (cols.length && !_this.element.classList.contains('e-grouped')) {\n          _this.element.classList.add('e-grouped');\n        }\n\n        _this.reorderingColumns = cols;\n\n        for (var c = 0; c < cols.length; c++) {\n          _this.addColToGroupDrop(cols[c]);\n        }\n      } else {\n        _this.addLabel();\n\n        _this.removeColFromGroupDrop(dragField);\n      }\n    };\n\n    this.drop = function (e) {\n      var gObj = _this.parent;\n      var column = gObj.getColumnByUid(e.droppedElement.getAttribute('e-mappinguid'));\n\n      _this.element.classList.remove('e-hover');\n\n      remove(e.droppedElement);\n\n      _this.aria.setDropTarget(_this.parent.element.querySelector('.e-groupdroparea'), false);\n\n      _this.aria.setGrabbed(_this.parent.getHeaderTable().querySelector('[aria-grabbed=true]'), false);\n\n      if (isNullOrUndefined(column) || column.allowGrouping === false || parentsUntil(gObj.getColumnHeaderByUid(column.uid), 'e-grid').getAttribute('id') !== gObj.element.getAttribute('id')) {\n        _this.parent.log('action_disabled_column', {\n          moduleName: _this.getModuleName(),\n          columnName: column.headerText\n        });\n\n        return;\n      }\n\n      _this.groupColumn(column.field);\n    };\n\n    this.contentRefresh = true;\n    this.aria = new AriaService();\n    this.parent = parent;\n    this.groupSettings = groupSettings;\n    this.serviceLocator = serviceLocator;\n    this.sortedColumns = sortedColumns;\n    this.focus = serviceLocator.getService('focus');\n    this.addEventListener();\n    this.groupGenerator = new GroupModelGenerator(this.parent);\n  }\n\n  Group.prototype.addLabel = function () {\n    if (!this.element.querySelectorAll('.e-group-animator').length) {\n      var dragLabel = this.l10n.getConstant('GroupDropArea');\n      this.element.innerHTML = dragLabel;\n      this.element.classList.remove('e-grouped');\n    }\n  };\n\n  Group.prototype.rearrangeGroup = function (e) {\n    this.sortRequired = false;\n    this.updateModel();\n  };\n\n  Group.prototype.columnDrag = function (e) {\n    if (this.groupSettings.allowReordering) {\n      this.animateDropper(e);\n    }\n\n    var gObj = this.parent;\n    var cloneElement = this.parent.element.querySelector('.e-cloneproperties');\n    classList(cloneElement, ['e-defaultcur'], ['e-notallowedcur']);\n\n    if (!parentsUntil(e.target, 'e-groupdroparea') && !(this.parent.allowReordering && parentsUntil(e.target, 'e-headercell'))) {\n      classList(cloneElement, ['e-notallowedcur'], ['e-defaultcur']);\n    }\n\n    e.target.classList.contains('e-groupdroparea') ? this.element.classList.add('e-hover') : this.element.classList.remove('e-hover');\n  };\n\n  Group.prototype.columnDragStart = function (e) {\n    if (e.target.classList.contains('e-stackedheadercell')) {\n      return;\n    }\n\n    var gObj = this.parent;\n    var dropArea = this.parent.element.querySelector('.e-groupdroparea');\n    this.aria.setDropTarget(dropArea, e.column.allowGrouping);\n    var element = e.target.classList.contains('e-headercell') ? e.target : parentsUntil(e.target, 'e-headercell');\n    this.aria.setGrabbed(element, true, !e.column.allowGrouping);\n  };\n\n  Group.prototype.columnDrop = function (e) {\n    var gObj = this.parent;\n\n    if (e.droppedElement.getAttribute('action') === 'grouping') {\n      var column = gObj.getColumnByUid(e.droppedElement.getAttribute('e-mappinguid'));\n\n      if (isNullOrUndefined(column) || column.allowGrouping === false || parentsUntil(gObj.getColumnHeaderByUid(column.uid), 'e-grid').getAttribute('id') !== gObj.element.getAttribute('id')) {\n        return;\n      }\n\n      this.ungroupColumn(column.field);\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  Group.prototype.addEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.on(events.uiUpdate, this.enableAfterRender, this);\n    this.parent.on(events.groupComplete, this.onActionComplete, this);\n    this.parent.on(events.ungroupComplete, this.onActionComplete, this);\n    this.parent.on(events.inBoundModelChanged, this.onPropertyChanged, this);\n    this.parent.on(events.click, this.clickHandler, this);\n    this.parent.on(events.columnDrag, this.columnDrag, this);\n    this.parent.on(events.columnDragStart, this.columnDragStart, this);\n    this.parent.on(events.headerDrop, this.columnDrop, this);\n    this.parent.on(events.columnDrop, this.columnDrop, this);\n    this.parent.on(events.headerRefreshed, this.refreshSortIcons, this);\n    this.parent.on(events.sortComplete, this.refreshSortIcons, this);\n    this.parent.on(events.keyPressed, this.keyPressHandler, this);\n    this.parent.on(events.contentReady, this.initialEnd, this);\n    this.parent.on(events.onEmpty, this.initialEnd, this);\n    this.parent.on(events.initialEnd, this.render, this);\n    this.parent.on(events.groupAggregates, this.onGroupAggregates, this);\n    this.parent.on('blazor-action-begin', this.blazorActionBegin, this);\n    this.parent.on('group-expand-collapse', this.updateExpand, this);\n    this.parent.on('persist-data-changed', this.initialEnd, this);\n  };\n  /**\n   * @hidden\n   */\n\n\n  Group.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(events.initialEnd, this.render);\n    this.parent.off(events.uiUpdate, this.enableAfterRender);\n    this.parent.off(events.groupComplete, this.onActionComplete);\n    this.parent.off(events.ungroupComplete, this.onActionComplete);\n    this.parent.off(events.inBoundModelChanged, this.onPropertyChanged);\n    this.parent.off(events.click, this.clickHandler);\n    this.parent.off(events.columnDrag, this.columnDrag);\n    this.parent.off(events.columnDragStart, this.columnDragStart);\n    this.parent.off(events.columnDrop, this.columnDrop);\n    this.parent.off(events.headerDrop, this.columnDrop);\n    this.parent.off(events.headerRefreshed, this.refreshSortIcons);\n    this.parent.off(events.sortComplete, this.refreshSortIcons);\n    this.parent.off(events.keyPressed, this.keyPressHandler);\n    this.parent.off(events.groupAggregates, this.onGroupAggregates);\n    this.parent.off('blazor-action-begin', this.blazorActionBegin);\n    this.parent.off('group-expand-collapse', this.updateExpand);\n  };\n\n  Group.prototype.blazorActionBegin = function () {\n    if (this.parent.allowGrouping && !this.parent.isCollapseStateEnabled()) {\n      this.expandAll();\n    }\n  };\n\n  Group.prototype.initialEnd = function () {\n    var gObj = this.parent;\n    this.parent.off(events.contentReady, this.initialEnd);\n    this.parent.off(events.onEmpty, this.initialEnd);\n\n    if (isBlazor() && gObj.isServerRendered) {\n      for (var i = 0; i < gObj.columns.length; i++) {\n        this.removeColFromGroupDrop(gObj.columns[i].field);\n      }\n\n      this.updateGroupDropArea();\n    }\n\n    if (this.parent.getColumns().length && this.groupSettings.columns.length) {\n      this.contentRefresh = false;\n\n      for (var _i = 0, _a = gObj.groupSettings.columns; _i < _a.length; _i++) {\n        var col = _a[_i];\n        this.groupColumn(col);\n      }\n\n      this.contentRefresh = true;\n    }\n  };\n\n  Group.prototype.keyPressHandler = function (e) {\n    var gObj = this.parent;\n\n    if (e.action !== 'ctrlSpace' && (!this.groupSettings.columns.length || ['altDownArrow', 'altUpArrow', 'ctrlDownArrow', 'ctrlUpArrow', 'enter'].indexOf(e.action) === -1)) {\n      return;\n    }\n\n    e.preventDefault();\n\n    switch (e.action) {\n      case 'altDownArrow':\n      case 'altUpArrow':\n        var selected = gObj.allowSelection ? gObj.getSelectedRowIndexes() : [];\n\n        if (selected.length) {\n          var rows = gObj.getContentTable().querySelector('tbody').children;\n          var dataRow = gObj.getDataRows()[selected[selected.length - 1]];\n          var grpRow = void 0;\n\n          for (var i = dataRow.rowIndex; i >= 0; i--) {\n            if (!rows[i].classList.contains('e-row') && !rows[i].classList.contains('e-detailrow')) {\n              grpRow = rows[i];\n              break;\n            }\n          }\n\n          this.expandCollapseRows(grpRow.querySelector(e.action === 'altUpArrow' ? '.e-recordplusexpand' : '.e-recordpluscollapse'));\n        }\n\n        break;\n\n      case 'ctrlDownArrow':\n        this.expandAll();\n        break;\n\n      case 'ctrlUpArrow':\n        this.collapseAll();\n        break;\n\n      case 'enter':\n        if (this.parent.isEdit || closest(e.target, '#' + this.parent.element.id + '_searchbar') !== null) {\n          return;\n        }\n\n        var element = this.focus.getFocusedElement();\n        var row = element ? element.parentElement.querySelector('[class^=\"e-record\"]') : null;\n\n        if (!row) {\n          break;\n        }\n\n        this.expandCollapseRows(row);\n        break;\n\n      case 'ctrlSpace':\n        var elem = gObj.focusModule.currentInfo.element;\n\n        if (elem && elem.classList.contains('e-headercell')) {\n          var column = gObj.getColumnByUid(elem.firstElementChild.getAttribute('e-mappinguid'));\n          column.field && gObj.groupSettings.columns.indexOf(column.field) < 0 ? this.groupColumn(column.field) : this.ungroupColumn(column.field);\n        }\n\n        break;\n    }\n  };\n\n  Group.prototype.clickHandler = function (e) {\n    this.expandCollapseRows(e.target);\n    this.applySortFromTarget(e.target);\n    this.unGroupFromTarget(e.target);\n    this.toogleGroupFromHeader(e.target);\n  };\n\n  Group.prototype.unGroupFromTarget = function (target) {\n    if (target.classList.contains('e-ungroupbutton')) {\n      this.ungroupColumn(target.parentElement.getAttribute('ej-mappingname'));\n    }\n  };\n\n  Group.prototype.toogleGroupFromHeader = function (target) {\n    if (this.groupSettings.showToggleButton) {\n      if (target.classList.contains('e-grptogglebtn')) {\n        if (target.classList.contains('e-toggleungroup')) {\n          this.ungroupColumn(this.parent.getColumnByUid(target.parentElement.getAttribute('e-mappinguid')).field);\n        } else {\n          this.groupColumn(this.parent.getColumnByUid(target.parentElement.getAttribute('e-mappinguid')).field);\n        }\n      } else {\n        if (target.classList.contains('e-toggleungroup')) {\n          this.ungroupColumn(target.parentElement.getAttribute('ej-mappingname'));\n        }\n      }\n    }\n  };\n\n  Group.prototype.applySortFromTarget = function (target) {\n    var gObj = this.parent;\n    var gHeader = closest(target, '.e-groupheadercell');\n\n    if (gObj.allowSorting && gHeader && !target.classList.contains('e-ungroupbutton') && !target.classList.contains('e-toggleungroup')) {\n      var field = gHeader.firstElementChild.getAttribute('ej-mappingname');\n\n      if (gObj.getColumnHeaderByField(field).querySelectorAll('.e-ascending').length) {\n        gObj.sortColumn(field, 'Descending', true);\n      } else {\n        gObj.sortColumn(field, 'Ascending', true);\n      }\n    }\n  };\n  /**\n   * Expands or collapses grouped rows by target element.\n   * @param  {Element} target - Defines the target element of the grouped row.\n   * @return {void}\n   */\n\n\n  Group.prototype.expandCollapseRows = function (target) {\n    var trgt = parentsUntil(target, 'e-recordplusexpand') || parentsUntil(target, 'e-recordpluscollapse');\n\n    if (trgt) {\n      var cellIdx = trgt.cellIndex;\n      var rowIdx = trgt.parentElement.rowIndex;\n      var rowNodes = this.parent.getContentTable().querySelector('tbody').children;\n      var rows = [].slice.call(rowNodes).slice(rowIdx + 1, rowNodes.length);\n      var isHide = void 0;\n      var expandElem = void 0;\n      var dataManager = void 0;\n      var query = void 0;\n      var toExpand = [];\n      var gObj = this.parent;\n      var indent = trgt.parentElement.querySelectorAll('.e-indentcell').length;\n      var expand = false;\n\n      if (isBlazor() && this.parent.isCollapseStateEnabled()) {\n        this.parent.notify('group-expand-collapse', {\n          uid: trgt.parentElement.getAttribute('data-uid'),\n          isExpand: trgt.classList.contains('e-recordpluscollapse')\n        });\n        return;\n      }\n\n      if (trgt.classList.contains('e-recordpluscollapse')) {\n        addClass([trgt], 'e-recordplusexpand');\n        removeClass([trgt], 'e-recordpluscollapse');\n        trgt.firstElementChild.className = 'e-icons e-gdiagonaldown e-icon-gdownarrow';\n        expand = true;\n\n        if (isGroupAdaptive(gObj)) {\n          this.updateVirtualRows(gObj, target, expand, query, dataManager);\n        }\n      } else {\n        isHide = true;\n        removeClass([trgt], 'e-recordplusexpand');\n        addClass([trgt], 'e-recordpluscollapse');\n        trgt.firstElementChild.className = 'e-icons e-gnextforward e-icon-grightarrow';\n\n        if (isGroupAdaptive(gObj)) {\n          this.updateVirtualRows(gObj, target, !isHide, query, dataManager);\n        }\n      }\n\n      this.aria.setExpand(trgt, expand);\n\n      if (!isGroupAdaptive(gObj)) {\n        for (var i = 0, len = rows.length; i < len; i++) {\n          if (rows[i].querySelectorAll('td')[cellIdx] && rows[i].querySelectorAll('td')[cellIdx].classList.contains('e-indentcell') && rows) {\n            if (isHide) {\n              rows[i].style.display = 'none';\n            } else {\n              if (rows[i].querySelectorAll('.e-indentcell').length === indent + 1) {\n                rows[i].style.display = '';\n                expandElem = rows[i].querySelector('.e-recordplusexpand');\n\n                if (expandElem) {\n                  toExpand.push(expandElem);\n                }\n\n                if (rows[i].classList.contains('e-detailrow')) {\n                  if (rows[i - 1].querySelectorAll('.e-detailrowcollapse').length) {\n                    rows[i].style.display = 'none';\n                  }\n                }\n              }\n            }\n          } else {\n            break;\n          }\n        }\n      }\n\n      for (var i = 0, len = toExpand.length; i < len; i++) {\n        removeClass([toExpand[i]], 'e-recordplusexpand');\n        addClass([toExpand[i]], 'e-recordpluscollapse');\n        toExpand[i].firstElementChild.className = 'e-icons e-gnextforward e-icon-grightarrow';\n        this.expandCollapseRows(toExpand[i]);\n      }\n    }\n  };\n\n  Group.prototype.updateVirtualRows = function (gObj, target, isExpand, query, dataManager) {\n    var rObj = gObj.getRowObjectFromUID(target.closest('tr').getAttribute('data-uid'));\n    rObj.isExpand = isExpand;\n    updatecloneRow(gObj);\n    query = gObj.getDataModule().generateQuery(false);\n    query.queries = gObj.getDataModule().aggregateQuery(gObj.getQuery().clone()).queries;\n    var args = {\n      requestType: 'virtualscroll',\n      rowObject: rObj\n    };\n    dataManager = gObj.getDataModule().getData(args, query.requiresCount());\n    dataManager.then(function (e) {\n      return gObj.renderModule.dataManagerSuccess(e, args);\n    });\n  };\n\n  Group.prototype.expandCollapse = function (isExpand) {\n    if (isBlazor() && this.parent.isCollapseStateEnabled()) {\n      this.parent.notify('group-expand-collapse', {\n        isExpand: isExpand\n      });\n      return;\n    }\n\n    if (!isExpand) {\n      this.parent.notify(events.initialCollapse, isExpand);\n    }\n\n    var rowNodes = this.parent.getContentTable().querySelector('tbody').children;\n    var row;\n\n    for (var i = 0, len = rowNodes.length; i < len; i++) {\n      if (rowNodes[i].querySelectorAll('.e-recordplusexpand, .e-recordpluscollapse').length) {\n        row = rowNodes[i].querySelector(isExpand ? '.e-recordpluscollapse' : '.e-recordplusexpand');\n\n        if (row) {\n          row.className = isExpand ? 'e-recordplusexpand' : 'e-recordpluscollapse';\n          row.firstElementChild.className = isExpand ? 'e-icons e-gdiagonaldown e-icon-gdownarrow' : 'e-icons e-gnextforward e-icon-grightarrow';\n        }\n\n        if (!(rowNodes[i].firstElementChild.classList.contains('e-recordplusexpand') || rowNodes[i].firstElementChild.classList.contains('e-recordpluscollapse'))) {\n          rowNodes[i].style.display = isExpand ? '' : 'none';\n        }\n      } else {\n        rowNodes[i].style.display = isExpand ? '' : 'none';\n      }\n    }\n  };\n  /**\n   * Expands all the grouped rows of the Grid.\n   * @return {void}\n   */\n\n\n  Group.prototype.expandAll = function () {\n    this.expandCollapse(true);\n  };\n  /**\n   * Collapses all the grouped rows of the Grid.\n   * @return {void}\n   */\n\n\n  Group.prototype.collapseAll = function () {\n    this.expandCollapse(false);\n  };\n  /**\n   * The function is used to render grouping\n   * @return {Element}\n   * @hidden\n   */\n\n\n  Group.prototype.render = function () {\n    this.l10n = this.serviceLocator.getService('localization');\n    this.renderGroupDropArea();\n    this.initDragAndDrop();\n    this.refreshToggleBtn();\n  };\n\n  Group.prototype.renderGroupDropArea = function () {\n    var groupElem = this.parent.element.querySelector('.e-groupdroparea');\n\n    if (groupElem) {\n      remove(groupElem);\n    }\n\n    this.element = this.parent.createElement('div', {\n      className: 'e-groupdroparea',\n      attrs: {\n        'tabindex': '-1'\n      }\n    });\n\n    if (this.groupSettings.allowReordering) {\n      this.element.classList.add('e-group-animate');\n    }\n\n    this.updateGroupDropArea();\n    this.parent.element.insertBefore(this.element, this.parent.element.firstChild);\n\n    if (!this.groupSettings.showDropArea) {\n      this.element.style.display = 'none';\n    }\n  };\n\n  Group.prototype.updateGroupDropArea = function (clear) {\n    if (this.groupSettings.showDropArea && !this.groupSettings.columns.length) {\n      var dragLabel = this.l10n.getConstant('GroupDropArea');\n      this.element.innerHTML = dragLabel;\n      this.element.classList.remove('e-grouped');\n    } else {\n      if (this.element.innerHTML === this.l10n.getConstant('GroupDropArea') && (this.groupSettings.columns.length === 1 || !this.isAppliedGroup && !this.isAppliedUnGroup) || clear) {\n        this.element.innerHTML = '';\n      }\n\n      this.element.classList.add('e-grouped');\n    }\n  };\n\n  Group.prototype.initDragAndDrop = function () {\n    this.initializeGHeaderDrop();\n    this.initializeGHeaderDrag();\n  };\n\n  Group.prototype.initializeGHeaderDrag = function () {\n    var drag = new Draggable(this.element, {\n      dragTarget: this.groupSettings.allowReordering ? '.e-drag' : '.e-groupheadercell',\n      distance: this.groupSettings.allowReordering ? -10 : 5,\n      helper: this.helper,\n      dragStart: this.dragStart,\n      drag: this.drag,\n      dragStop: this.dragStop\n    });\n  };\n\n  Group.prototype.initializeGHeaderDrop = function () {\n    var gObj = this.parent;\n    var drop = new Droppable(this.element, {\n      accept: '.e-dragclone',\n      drop: this.drop\n    });\n  };\n  /**\n   * Groups a column by column name.\n   * @param  {string} columnName - Defines the column name to group.\n   * @return {void}\n   */\n\n\n  Group.prototype.groupColumn = function (columnName) {\n    var gObj = this.parent;\n    var column = gObj.getColumnByField(columnName);\n\n    if (isNullOrUndefined(column) || column.allowGrouping === false || this.contentRefresh && this.groupSettings.columns.indexOf(columnName) > -1) {\n      this.parent.log('action_disabled_column', {\n        moduleName: this.getModuleName(),\n        columnName: column.headerText\n      });\n      return;\n    }\n\n    if (isActionPrevent(gObj)) {\n      gObj.notify(events.preventBatch, {\n        instance: this,\n        handler: this.groupColumn,\n        arg1: columnName\n      });\n      return;\n    }\n\n    column.visible = gObj.groupSettings.showGroupedColumn;\n    this.colName = columnName;\n    this.isAppliedGroup = true;\n\n    if (this.contentRefresh) {\n      this.updateModel();\n    } else {\n      this.addColToGroupDrop(columnName);\n    }\n\n    this.updateGroupDropArea();\n    this.isAppliedGroup = false;\n  };\n  /**\n   * Ungroups a column by column name.\n   * @param  {string} columnName - Defines the column name to ungroup.\n   * @return {void}\n   */\n\n\n  Group.prototype.ungroupColumn = function (columnName) {\n    var gObj = this.parent;\n    var column = this.parent.enableColumnVirtualization ? this.parent.columns.filter(function (c) {\n      return c.field === columnName;\n    })[0] : gObj.getColumnByField(columnName);\n\n    if (isNullOrUndefined(column) || column.allowGrouping === false || this.groupSettings.columns.indexOf(columnName) < 0) {\n      return;\n    }\n\n    if (isActionPrevent(gObj)) {\n      gObj.notify(events.preventBatch, {\n        instance: this,\n        handler: this.ungroupColumn,\n        arg1: columnName\n      });\n      return;\n    }\n\n    column.visible = true;\n\n    if (isBlazor() && gObj.isServerRendered) {\n      var setVisible = [];\n      setVisible[0] = column;\n      this.parent.notify('setvisibility', setVisible);\n    }\n\n    this.colName = column.field;\n    var columns = JSON.parse(JSON.stringify(this.groupSettings.columns));\n    columns.splice(columns.indexOf(this.colName), 1);\n\n    if (this.sortedColumns.indexOf(columnName) < 0) {\n      for (var i = 0, len = gObj.sortSettings.columns.length; i < len; i++) {\n        if (columnName === gObj.sortSettings.columns[i].field) {\n          gObj.sortSettings.columns.splice(i, 1);\n          break;\n        }\n      }\n    }\n\n    var isServerRendered = 'isServerRendered';\n\n    if (isBlazor() && this.parent[isServerRendered]) {\n      gObj.sortSettings.columns = gObj.sortSettings.columns;\n    }\n\n    if (this.groupSettings.allowReordering) {\n      this.reorderingColumns = columns;\n    }\n\n    this.groupSettings.columns = columns;\n\n    if (gObj.allowGrouping) {\n      this.isAppliedUnGroup = true;\n      this.parent.dataBind();\n    }\n  };\n  /**\n   * The function used to update groupSettings\n   * @return {void}\n   * @hidden\n   */\n\n\n  Group.prototype.updateModel = function () {\n    var gObj = this.parent;\n    var i = 0;\n    var columns = JSON.parse(JSON.stringify(this.groupSettings.columns));\n    columns = this.reorderingColumns.length ? JSON.parse(JSON.stringify(this.reorderingColumns)) : columns;\n\n    if (this.sortRequired) {\n      if (columns.indexOf(this.colName) === -1) {\n        columns.push(this.colName);\n      }\n\n      this.groupAddSortingQuery(this.colName);\n    }\n\n    this.sortRequired = true;\n    this.parent.groupSettings.columns = columns;\n    this.parent.dataBind();\n  };\n  /**\n   * The function used to trigger onActionComplete\n   * @return {void}\n   * @hidden\n   */\n\n\n  Group.prototype.onActionComplete = function (e) {\n    if (isBlazor() && !this.parent.isJsComponent) {\n      e.rows = null;\n    }\n\n    var gObj = this.parent;\n\n    if (e.requestType === 'grouping') {\n      this.addColToGroupDrop(this.colName);\n    } else {\n      this.removeColFromGroupDrop(this.colName);\n    }\n\n    var args = this.groupSettings.columns.indexOf(this.colName) > -1 ? {\n      columnName: this.colName,\n      requestType: 'grouping',\n      type: events.actionComplete\n    } : {\n      requestType: 'ungrouping',\n      type: events.actionComplete\n    };\n    this.parent.trigger(events.actionComplete, extend(e, args));\n    this.colName = null;\n  };\n\n  Group.prototype.groupAddSortingQuery = function (colName) {\n    var i = 0;\n\n    while (i < this.parent.sortSettings.columns.length) {\n      if (this.parent.sortSettings.columns[i].field === colName) {\n        break;\n      }\n\n      i++;\n    }\n\n    if (this.parent.sortSettings.columns.length === i) {\n      this.parent.sortSettings.columns.push({\n        field: colName,\n        direction: 'Ascending',\n        isFromGroup: true\n      });\n      var isServerRendered = 'isServerRendered';\n\n      if (isBlazor() && this.parent[isServerRendered]) {\n        this.parent.sortSettings.columns = this.parent.sortSettings.columns;\n      }\n    } else if (!this.parent.allowSorting) {\n      this.parent.sortSettings.columns[i].direction = 'Ascending';\n    }\n  };\n\n  Group.prototype.createElement = function (field) {\n    var gObj = this.parent;\n    var direction = 'Ascending';\n    var animator = this.parent.createElement('div', {\n      className: 'e-grid-icon e-group-animator'\n    });\n    var groupedColumn = this.parent.createElement('div', {\n      className: 'e-grid-icon e-groupheadercell'\n    });\n    var childDiv = this.parent.createElement('div', {\n      attrs: {\n        'ej-mappingname': field\n      }\n    });\n    var column = this.parent.getColumnByField(field); //Todo headerTemplateID for grouped column, disableHtmlEncode                          \n\n    var headerCell = gObj.getColumnHeaderByUid(column.uid); // if (!isNullOrUndefined(column.headerTemplate)) {\n    //     if (column.headerTemplate.indexOf('#') !== -1) {\n    //         childDiv.innerHTML = document.querySelector(column.headerTemplate).innerHTML.trim();\n    //     } else {\n    //         childDiv.innerHTML = column.headerTemplate;\n    //     }\n    //     childDiv.firstElementChild.classList.add('e-grouptext');\n    // } else {\n\n    if (this.groupSettings.allowReordering) {\n      childDiv.appendChild(this.parent.createElement('span', {\n        className: 'e-drag e-icons e-icon-drag',\n        innerHTML: '&nbsp;',\n        attrs: {\n          title: 'Drag',\n          tabindex: '-1',\n          'aria-label': 'Drag the grouped column'\n        }\n      }));\n    }\n\n    childDiv.appendChild(this.parent.createElement('span', {\n      className: 'e-grouptext',\n      innerHTML: column.headerText,\n      attrs: {\n        tabindex: '-1',\n        'aria-label': 'sort the grouped column'\n      }\n    })); // }\n\n    if (this.groupSettings.showToggleButton) {\n      childDiv.appendChild(this.parent.createElement('span', {\n        className: 'e-togglegroupbutton e-icons e-icon-ungroup e-toggleungroup',\n        innerHTML: '&nbsp;',\n        attrs: {\n          tabindex: '-1',\n          'aria-label': 'ungroup button'\n        }\n      }));\n    }\n\n    if (headerCell.querySelectorAll('.e-ascending,.e-descending').length) {\n      direction = headerCell.querySelector('.e-ascending') ? 'Ascending' : 'Descending';\n    }\n\n    childDiv.appendChild(this.parent.createElement('span', {\n      className: 'e-groupsort e-icons ' + ('e-' + direction.toLowerCase() + ' e-icon-' + direction.toLowerCase()),\n      innerHTML: '&nbsp;',\n      attrs: {\n        tabindex: '-1',\n        'aria-label': 'sort the grouped column'\n      }\n    }));\n    childDiv.appendChild(this.parent.createElement('span', {\n      className: 'e-ungroupbutton e-icons e-icon-hide',\n      innerHTML: '&nbsp;',\n      attrs: {\n        title: isBlazor() ? this.l10n.getConstant('UnGroupButton') : this.l10n.getConstant('UnGroup'),\n        tabindex: '-1',\n        'aria-label': 'ungroup the grouped column'\n      },\n      styles: this.groupSettings.showUngroupButton ? '' : 'display:none'\n    }));\n    groupedColumn.appendChild(childDiv);\n    var index = this.groupSettings.columns.indexOf(field);\n\n    if (this.groupSettings.allowReordering) {\n      animator.appendChild(groupedColumn);\n      animator.appendChild(this.createSeparator());\n      groupedColumn = animator;\n    }\n\n    return groupedColumn;\n  };\n\n  Group.prototype.addColToGroupDrop = function (field) {\n    if (this.groupSettings.allowReordering && this.parent.element.querySelector('.e-groupdroparea div[ej-mappingname=' + field + ']')) {\n      return;\n    }\n\n    var column = this.parent.getColumnByField(field);\n\n    if (isNullOrUndefined(column)) {\n      return;\n    }\n\n    var groupedColumn = this.createElement(field);\n\n    if (this.groupSettings.allowReordering) {\n      var index = this.element.querySelectorAll('.e-group-animator').length;\n      groupedColumn.setAttribute('index', index.toString());\n    }\n\n    this.element.appendChild(groupedColumn); //Todo:  rtl \n  };\n\n  Group.prototype.createSeparator = function () {\n    return this.parent.createElement('span', {\n      className: 'e-nextgroup e-icons e-icon-next',\n      innerHTML: '&nbsp;',\n      attrs: {\n        tabindex: '-1',\n        'aria-label': 'Separator for the grouped columns'\n      },\n      styles: this.groupSettings.showUngroupButton ? '' : 'display:none'\n    });\n  };\n\n  Group.prototype.refreshToggleBtn = function (isRemove) {\n    if (this.groupSettings.showToggleButton) {\n      var headers = [].slice.call(this.parent.getHeaderTable().getElementsByClassName('e-headercelldiv'));\n\n      for (var i = 0, len = headers.length; i < len; i++) {\n        if (!(headers[i].classList.contains('e-emptycell') || headers[i].classList.contains('e-headerchkcelldiv'))) {\n          var column = this.parent.getColumnByUid(headers[i].getAttribute('e-mappinguid'));\n\n          if (!this.parent.showColumnMenu || this.parent.showColumnMenu && !column.showColumnMenu) {\n            if (headers[i].querySelectorAll('.e-grptogglebtn').length) {\n              remove(headers[i].querySelectorAll('.e-grptogglebtn')[0]);\n            }\n\n            if (!isRemove) {\n              headers[i].appendChild(this.parent.createElement('span', {\n                className: 'e-grptogglebtn e-icons ' + (this.groupSettings.columns.indexOf(column.field) > -1 ? 'e-toggleungroup e-icon-ungroup' : 'e-togglegroup e-icon-group'),\n                attrs: {\n                  tabindex: '-1',\n                  'aria-label': 'Group button'\n                }\n              }));\n            }\n          }\n        }\n      }\n    }\n  };\n\n  Group.prototype.removeColFromGroupDrop = function (field) {\n    if (!isNullOrUndefined(this.getGHeaderCell(field))) {\n      var elem = this.getGHeaderCell(field);\n\n      if (this.groupSettings.allowReordering) {\n        var parent_1 = parentsUntil(elem, 'e-group-animator');\n        remove(parent_1);\n      } else {\n        remove(elem);\n      }\n\n      this.updateGroupDropArea();\n    }\n\n    this.isAppliedUnGroup = false;\n  };\n\n  Group.prototype.onPropertyChanged = function (e) {\n    if (e.module !== this.getModuleName()) {\n      return;\n    }\n\n    for (var _i = 0, _a = Object.keys(e.properties); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'columns':\n          var args = void 0;\n\n          if (this.contentRefresh) {\n            if (!this.isAppliedUnGroup) {\n              if (!this.isAppliedGroup) {\n                this.updateGroupDropArea(true);\n\n                for (var i = 0; i < this.groupSettings.columns.length; i++) {\n                  this.colName = this.groupSettings.columns[i];\n                  var col = this.parent.getColumnByField(this.colName);\n                  col.visible = this.parent.groupSettings.showGroupedColumn;\n                  this.groupAddSortingQuery(this.colName);\n\n                  if (i < this.groupSettings.columns.length - 1) {\n                    this.addColToGroupDrop(this.groupSettings.columns[i]);\n                  }\n                }\n              }\n\n              args = {\n                columnName: this.colName,\n                requestType: e.properties[prop].length ? 'grouping' : 'ungrouping',\n                type: events.actionBegin\n              };\n            } else {\n              args = {\n                requestType: 'ungrouping',\n                type: events.actionBegin\n              };\n            }\n\n            if (!this.groupSettings.showGroupedColumn) {\n              var columns = e.oldProperties[prop];\n\n              for (var i = 0; i < columns.length; i++) {\n                if (e.properties[prop].indexOf(columns[i]) === -1) {\n                  this.parent.getColumnByField(columns[i]).visible = true;\n                }\n              }\n            }\n\n            var requestType = 'requestType';\n\n            if (isBlazor() && this.parent.isServerRendered && this.parent.isCollapseStateEnabled() && args[requestType] === 'grouping') {\n              this.parent.refreshHeader();\n            }\n\n            this.parent.notify(events.modelChanged, args);\n          }\n\n          break;\n\n        case 'showDropArea':\n          this.updateGroupDropArea();\n          this.groupSettings.showDropArea ? this.element.style.display = '' : this.element.style.display = 'none';\n          break;\n\n        case 'showGroupedColumn':\n          this.updateGroupedColumn(this.groupSettings.showGroupedColumn);\n          this.parent.notify(events.modelChanged, {\n            requestType: 'refresh'\n          });\n          break;\n\n        case 'showUngroupButton':\n          this.updateButtonVisibility(this.groupSettings.showUngroupButton, 'e-ungroupbutton');\n          break;\n\n        case 'showToggleButton':\n          this.updateButtonVisibility(this.groupSettings.showToggleButton, 'e-togglegroupbutton ');\n          this.parent.refreshHeader();\n          break;\n      }\n    }\n  };\n\n  Group.prototype.updateGroupedColumn = function (isVisible) {\n    for (var i = 0; i < this.groupSettings.columns.length; i++) {\n      this.parent.getColumnByField(this.groupSettings.columns[i]).visible = isVisible;\n    }\n  };\n\n  Group.prototype.updateButtonVisibility = function (isVisible, className) {\n    var gHeader = [].slice.call(this.element.querySelectorAll('.' + className));\n\n    for (var i = 0; i < gHeader.length; i++) {\n      gHeader[i].style.display = isVisible ? '' : 'none';\n    }\n  };\n\n  Group.prototype.enableAfterRender = function (e) {\n    if (e.module === this.getModuleName() && e.enable) {\n      this.render();\n    }\n  };\n  /**\n   * To destroy the reorder\n   * @return {void}\n   * @hidden\n   */\n\n\n  Group.prototype.destroy = function () {\n    var gridElement = this.parent.element;\n\n    if (!gridElement || !gridElement.querySelector('.e-gridheader') && !gridElement.querySelector('.e-gridcontent')) {\n      return;\n    } // tslint:disable-next-line:no-any\n\n\n    if (!this.parent.isDestroyed && !this.parent.refreshing) {\n      this.clearGrouping();\n    }\n\n    this.removeEventListener();\n    this.refreshToggleBtn(true);\n    remove(this.element); //call ejdrag and drop destroy\n  };\n  /**\n   * Clears all the grouped columns of the Grid.\n   * @return {void}\n   */\n\n\n  Group.prototype.clearGrouping = function () {\n    var cols = JSON.parse(JSON.stringify(this.groupSettings.columns));\n    this.contentRefresh = false;\n\n    for (var i = 0, len = cols.length; i < len; i++) {\n      if (i === len - 1) {\n        this.contentRefresh = true;\n      }\n\n      this.ungroupColumn(cols[i]);\n    }\n\n    this.contentRefresh = true;\n  };\n  /**\n   * For internal use only - Get the module name.\n   * @private\n   */\n\n\n  Group.prototype.getModuleName = function () {\n    return 'group';\n  };\n\n  Group.prototype.refreshSortIcons = function (e) {\n    var gObj = this.parent;\n    var header;\n    var cols = gObj.sortSettings.columns;\n    var gCols = gObj.groupSettings.columns;\n    var fieldNames = this.parent.getColumns().map(function (c) {\n      return c.field;\n    });\n    this.refreshToggleBtn();\n\n    for (var i = 0, len = cols.length; i < len; i++) {\n      if (fieldNames.indexOf(cols[i].field) === -1) {\n        continue;\n      }\n\n      header = gObj.getColumnHeaderByField(cols[i].field);\n\n      if (!gObj.allowSorting && (this.sortedColumns.indexOf(cols[i].field) > -1 || this.groupSettings.columns.indexOf(cols[i].field) > -1)) {\n        classList(header.querySelector('.e-sortfilterdiv'), ['e-ascending', 'e-icon-ascending'], []);\n\n        if (cols.length > 1) {\n          header.querySelector('.e-headercelldiv').appendChild(this.parent.createElement('span', {\n            className: 'e-sortnumber',\n            innerHTML: (i + 1).toString()\n          }));\n        }\n      } else if (this.getGHeaderCell(cols[i].field) && this.getGHeaderCell(cols[i].field).querySelectorAll('.e-groupsort').length) {\n        if (cols[i].direction === 'Ascending') {\n          classList(this.getGHeaderCell(cols[i].field).querySelector('.e-groupsort'), ['e-ascending', 'e-icon-ascending'], ['e-descending', 'e-icon-descending']);\n        } else {\n          classList(this.getGHeaderCell(cols[i].field).querySelector('.e-groupsort'), ['e-descending', 'e-icon-descending'], ['e-ascending', 'e-icon-ascending']);\n        }\n      }\n    }\n\n    for (var i = 0, len = gCols.length; i < len; i++) {\n      if (fieldNames.indexOf(gCols[i]) === -1) {\n        continue;\n      }\n\n      gObj.getColumnHeaderByField(gCols[i]).setAttribute('aria-grouped', 'true');\n    }\n  };\n\n  Group.prototype.getGHeaderCell = function (field) {\n    if (this.element && this.element.querySelector('[ej-mappingname=\"' + field + '\"]')) {\n      return this.element.querySelector('[ej-mappingname=\"' + field + '\"]').parentElement;\n    }\n\n    return null;\n  };\n\n  Group.prototype.onGroupAggregates = function (editedData) {\n    var aggregates = this.iterateGroupAggregates(editedData);\n    var rowData = this.groupGenerator.generateRows(aggregates, {});\n    var summaryRows = this.parent.getRowsObject().filter(function (row) {\n      return !row.isDataRow;\n    });\n    var updateSummaryRows = rowData.filter(function (data) {\n      return !data.isDataRow;\n    });\n\n    for (var i = 0; i < updateSummaryRows.length; i++) {\n      var row = updateSummaryRows[i];\n      var cells = row.cells.filter(function (cell) {\n        return cell.isDataCell;\n      });\n      var args = {\n        cells: cells,\n        data: row.data,\n        dataUid: summaryRows[i] ? summaryRows[i].uid : ''\n      };\n      this.parent.notify(events.refreshAggregateCell, args);\n    }\n  };\n\n  Group.prototype.iterateGroupAggregates = function (editedData) {\n    var updatedData = editedData instanceof Array ? editedData : [];\n    var rows = this.parent.getRowsObject();\n    var initData = this.parent.getCurrentViewRecords();\n    var deletedCols = [];\n    var changeds = rows.map(function (row) {\n      if (row.edit === 'delete') {\n        deletedCols.push(row.data);\n      }\n\n      return row.changes instanceof Object ? row.changes : row.data;\n    });\n    var field = this.parent.getPrimaryKeyFieldNames()[0];\n    changeds = updatedData.length === 0 ? changeds : updatedData;\n    var mergeData = initData.map(function (item) {\n      var pKeyVal = DataUtil.getObject(field, item);\n      var value;\n      var hasVal = changeds.some(function (cItem) {\n        value = cItem;\n        return pKeyVal === DataUtil.getObject(field, cItem);\n      });\n      return hasVal ? value : item;\n    });\n    var eData = editedData;\n\n    if (!(eData.type && eData.type === 'cancel') && deletedCols.length > 0) {\n      for (var i = 0; i < deletedCols.length; i++) {\n        var index = mergeData.indexOf(deletedCols[i]);\n        mergeData.splice(index, 1);\n      }\n    }\n\n    var aggregates = [];\n    var aggregateRows = this.parent.aggregates;\n\n    for (var j = 0; j < aggregateRows.length; j++) {\n      var row = aggregateRows[j];\n\n      for (var k = 0; k < row.columns.length; k++) {\n        var aggr = {};\n        var type = row.columns[k].type.toString();\n        aggr = {\n          type: type.toLowerCase(),\n          field: row.columns[k].field\n        };\n        aggregates.push(aggr);\n      }\n    }\n\n    var result;\n    var aggrds;\n    var groupedCols = this.parent.groupSettings.columns;\n\n    for (var l = 0; l < groupedCols.length; l++) {\n      aggrds = result ? result : mergeData;\n      result = DataUtil.group(aggrds, groupedCols[l], aggregates, null, null);\n    }\n\n    return result;\n  };\n\n  Group.prototype.updateExpand = function (args) {\n    var uid = args.uid;\n    var isExpand = args.isExpand;\n    var rows = this.parent.getRowsObject();\n\n    for (var i = 0; i < rows.length; i++) {\n      var row = rows[i];\n\n      if (row.uid === uid || isNullOrUndefined(uid)) {\n        row.isExpand = isExpand;\n\n        var _loop_1 = function (j) {\n          var childRow = rows[j];\n          var closestParent = void 0;\n\n          if (childRow.parentUid !== row.uid) {\n            closestParent = rows.filter(function (x) {\n              return x.uid === childRow.parentUid;\n            })[0];\n          }\n\n          if (childRow.parentUid === row.uid) {\n            childRow.visible = row.isExpand;\n          } else if (!isNullOrUndefined(closestParent) && childRow.parentUid === closestParent.uid) {\n            if (closestParent.isExpand && closestParent.visible === true) {\n              childRow.visible = true;\n            } else if (closestParent.isExpand && closestParent.visible === false) {\n              childRow.visible = false;\n            }\n          }\n\n          if (isNullOrUndefined(uid)) {\n            return \"break\";\n          }\n        };\n\n        for (var j = i + 1; j < rows.length; j++) {\n          var state_1 = _loop_1(j);\n\n          if (state_1 === \"break\") break;\n        }\n      }\n    }\n\n    this.parent.notify(events.contentReady, {\n      rows: rows,\n      args: {\n        isFrozen: false,\n        rows: rows\n      }\n    });\n  };\n\n  return Group;\n}();\n\nexport { Group };","map":null,"metadata":{},"sourceType":"module"}