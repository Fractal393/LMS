{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridRenderer = exports.noContentRenderer = exports.useEntryRenderer = exports.getRowHeight = exports.getColWidth = exports.DefaultEntrySize = exports.SmallThumbsSize = void 0;\n\nvar classnames_1 = __importDefault(require(\"classnames\"));\n\nvar react_1 = __importStar(require(\"react\"));\n\nvar Grid_1 = require(\"react-virtualized/dist/commonjs/Grid\");\n\nvar icons_types_1 = require(\"../../types/icons.types\");\n\nvar validation_1 = require(\"../../util/validation\");\n\nvar SmartFileEntry_1 = require(\"../file-entry/SmartFileEntry\");\n\nvar ChonkyIcon_1 = require(\"./ChonkyIcon\");\n\nexports.SmallThumbsSize = {\n  width: 165,\n  height: 130\n};\nexports.DefaultEntrySize = exports.SmallThumbsSize;\n\nexports.getColWidth = function (index, columnCount, entrySize, gutterSize) {\n  if (index === columnCount - 1) return entrySize.width;\n  return entrySize.width + gutterSize;\n};\n\nexports.getRowHeight = function (index, rowCount, entrySize, gutterSize) {\n  // We always add `gutterSize` to height because we don't want the last item\n  // sticking to the bottom of the scroll pane.\n  return entrySize.height + gutterSize;\n};\n\nexports.useEntryRenderer = function (files) {\n  // All hook parameters should go into `deps` array\n  var entryRenderer = react_1.useCallback(function (virtualKey, index, style, parent, gutterSize, lastRow, lastColumn) {\n    if (typeof gutterSize === 'number') {\n      if (!lastColumn) style.width = style.width - gutterSize; // We always subtract `gutterSize` to height because we don't want the\n      // last item sticking to the bottom of the scroll pane.\n\n      style.height = style.height - gutterSize;\n    } // When rendering the file list, some browsers cut off the last pixel of\n    // a file entry, making it look ugly. To get around this rendering bug\n    // we make file entries in the last row/column 1 pixel shorter.\n    // TODO: Instead of subtracting 1 here, add 1 to width/height of last\n    //  column.\n\n\n    if (lastRow) style.height = style.height - 1;\n    if (lastColumn) style.width = style.width - 1;\n    if (index >= files.length) return null;\n    var file = files[index];\n    var key = file ? file.id : \"loading-file-\" + virtualKey;\n    return react_1.default.createElement(\"div\", {\n      key: key,\n      className: \"chonky-virtualization-wrapper\",\n      style: style\n    }, react_1.default.createElement(SmartFileEntry_1.SmartFileEntry, {\n      fileId: file ? file.id : null,\n      displayIndex: index\n    }));\n  }, [files]);\n  return entryRenderer;\n};\n\nexports.noContentRenderer = function (height) {\n  var placeholderProps = {\n    className: classnames_1.default({\n      'chonky-file-list-notification': true,\n      'chonky-file-list-notification-empty': true\n    })\n  };\n  if (typeof height === 'number') placeholderProps.style = {\n    height: height\n  };\n  return react_1.default.createElement(\"div\", __assign({}, placeholderProps), react_1.default.createElement(\"div\", {\n    className: \"chonky-file-list-notification-content\"\n  }, react_1.default.createElement(ChonkyIcon_1.ChonkyIconFA, {\n    icon: icons_types_1.ChonkyIconName.folderOpen\n  }), \"\\u00A0 Nothing to show\"));\n};\n\nexports.useGridRenderer = function (files, entrySize, entryRenderer, thumbsGridRef, fillParentContainer) {\n  return react_1.useCallback(function (_a) {\n    var width = _a.width,\n        height = _a.height;\n    var isMobile = validation_1.isMobileDevice();\n    var gutter = isMobile ? 5 : 8;\n    var scrollbar = !fillParentContainer || isMobile ? 0 : 16; // TODO: const isLargeThumbs = view === FileView.LargeThumbs;\n\n    var columnCount;\n\n    if (isMobile) {\n      // On mobile device, we hardcode column count to 2\n      columnCount = 2;\n    } else {\n      var columnCountFloat = (width + gutter - scrollbar) / (entrySize.width + gutter);\n      columnCount = Math.max(1, Math.floor(columnCountFloat));\n    }\n\n    var rowCount = Math.ceil(files.length / columnCount);\n    return react_1.default.createElement(Grid_1.Grid, {\n      style: {\n        minHeight: entrySize.height + 10\n      },\n      ref: thumbsGridRef,\n      cellRenderer: function (data) {\n        var index = data.rowIndex * columnCount + data.columnIndex;\n        return entryRenderer(data.key, index, __assign({}, data.style), data.parent, gutter, data.rowIndex === rowCount - 1, data.columnIndex === columnCount - 1);\n      },\n      noContentRenderer: function () {\n        return exports.noContentRenderer(entrySize.height);\n      },\n      rowCount: rowCount,\n      columnCount: columnCount,\n      columnWidth: function (_a) {\n        var index = _a.index;\n        return exports.getColWidth(index, columnCount, entrySize, gutter);\n      },\n      rowHeight: function (_a) {\n        var index = _a.index;\n        return exports.getRowHeight(index, rowCount, entrySize, gutter);\n      },\n      overscanRowCount: 2,\n      width: width,\n      containerStyle: {\n        minHeight: 50\n      },\n      height: typeof height === 'number' ? height : 500,\n      autoHeight: !fillParentContainer,\n      tabIndex: null\n    });\n  }, [files, entrySize, entryRenderer, thumbsGridRef, fillParentContainer]);\n};","map":null,"metadata":{},"sourceType":"script"}