{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { PdfPage } from './../pages/pdf-page';\nimport { PointF, RectangleF, SizeF } from './../drawing/pdf-drawing';\nimport { PdfTextElement } from './../graphics/figures/text-element';\nimport { PdfUriAnnotation } from './uri-annotation';\nimport { PdfStringLayouter } from './../graphics/fonts/string-layouter';\nimport { PdfFontStyle } from './../graphics/fonts/enum';\nimport { PdfTextAlignment } from './../graphics/enum';\nimport { PdfArray } from './../primitives/pdf-array';\nimport { PdfNumber } from './../primitives/pdf-number';\n/**\n * `PdfTextWebLink` class represents the class for text web link annotation.\n * ```typescript\n * // create a new PDF document.\n * let document : PdfDocument = new PdfDocument();\n * // add a page to the document.\n * let page1 : PdfPage = document.pages.add();\n * // create the font\n * let font : PdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 12);\n * //\n * // create the Text Web Link\n * let textLink : PdfTextWebLink = new PdfTextWebLink();\n * // set the hyperlink\n * textLink.url = 'http://www.google.com';\n * // set the link text\n * textLink.text = 'Google';\n * // set the font\n * textLink.font = font;\n * // draw the hyperlink in PDF page\n * textLink.draw(page1, new PointF(10, 40));\n * //\n * // save the document.\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\n\nvar PdfTextWebLink =\n/** @class */\nfunction (_super) {\n  __extends(PdfTextWebLink, _super); // Constructors\n\n  /**\n   * Initializes a new instance of the `PdfTextWebLink` class.\n   * @private\n   */\n\n\n  function PdfTextWebLink() {\n    var _this = _super.call(this) || this; // Fields\n\n    /**\n     * Internal variable to store `Url`.\n     * @default ''\n     * @private\n     */\n\n\n    _this.uniformResourceLocator = '';\n    /**\n     * Internal variable to store `Uri Annotation` object.\n     * @default null\n     * @private\n     */\n\n    _this.uriAnnotation = null;\n    /**\n     * Checks whether the drawTextWebLink method with `PointF` overload is called or not.\n     * If it set as true, then the start position of each lines excluding firest line is changed as (0, Y).\n     * @private\n     * @hidden\n     */\n\n    _this.recalculateBounds = false;\n    _this.defaultBorder = new PdfArray();\n\n    for (var i = 0; i < 3; i++) {\n      _this.defaultBorder.add(new PdfNumber(0));\n    }\n\n    return _this;\n  }\n\n  Object.defineProperty(PdfTextWebLink.prototype, \"url\", {\n    // Properties\n\n    /**\n     * Gets or sets the `Uri address`.\n     * ```typescript\n     * // create a new PDF document.\n     * let document : PdfDocument = new PdfDocument();\n     * // add a page to the document.\n     * let page1 : PdfPage = document.pages.add();\n     * // create the font\n     * let font : PdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 12);\n     * // create the Text Web Link\n     * let textLink : PdfTextWebLink = new PdfTextWebLink();\n     * //\n     * // set the hyperlink\n     * textLink.url = 'http://www.google.com';\n     * //\n     * // set the link text\n     * textLink.text = 'Google';\n     * // set the font\n     * textLink.font = font;\n     * // draw the hyperlink in PDF page\n     * textLink.draw(page1, new PointF(10, 40));\n     * // save the document.\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this.uniformResourceLocator;\n    },\n    set: function (value) {\n      if (value.length === 0) {\n        throw new Error('ArgumentException : Url - string can not be empty');\n      }\n\n      this.uniformResourceLocator = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PdfTextWebLink.prototype.draw = function (arg1, arg2) {\n    if (arg1 instanceof PdfPage) {\n      var layout = new PdfStringLayouter();\n      var previousFontStyle = this.font.style;\n\n      if (arg2 instanceof PointF) {\n        this.recalculateBounds = true;\n        this.font.style = PdfFontStyle.Underline;\n        var layoutResult = layout.layout(this.value, this.font, this.stringFormat, new SizeF(arg1.graphics.clientSize.width - arg2.x, 0), true, arg1.graphics.clientSize);\n\n        if (layoutResult.lines.length === 1) {\n          var textSize = this.font.measureString(this.value);\n          var rect = new RectangleF(arg2, textSize);\n          rect = this.calculateBounds(rect, textSize.width, arg1.graphics.clientSize.width, arg2.x);\n          this.uriAnnotation = new PdfUriAnnotation(rect, this.url);\n          this.uriAnnotation.dictionary.items.setValue('Border', this.defaultBorder);\n          arg1.annotations.add(this.uriAnnotation);\n          var result = this.drawText(arg1, arg2);\n          this.font.style = previousFontStyle;\n          return result;\n        } else {\n          var result = this.drawMultipleLineWithPoint(layoutResult, arg1, arg2);\n          this.font.style = previousFontStyle;\n          return result;\n        }\n      } else {\n        var layoutResult = layout.layout(this.value, this.font, this.stringFormat, new SizeF(arg2.width, 0), false, new SizeF(0, 0));\n        this.font.style = PdfFontStyle.Underline;\n\n        if (layoutResult.lines.length === 1) {\n          var textSize = this.font.measureString(this.value);\n          var rect = new RectangleF(new PointF(arg2.x, arg2.y), textSize);\n          rect = this.calculateBounds(rect, textSize.width, arg2.width, arg2.x);\n          this.uriAnnotation = new PdfUriAnnotation(rect, this.url);\n          this.uriAnnotation.dictionary.items.setValue('Border', this.defaultBorder);\n          arg1.annotations.add(this.uriAnnotation);\n          var returnValue = this.drawText(arg1, arg2);\n          this.font.style = previousFontStyle;\n          return returnValue;\n        } else {\n          var returnValue = this.drawMultipleLineWithBounds(layoutResult, arg1, arg2);\n          this.font.style = previousFontStyle;\n          return returnValue;\n        }\n      }\n    } else {\n      var page = new PdfPage();\n      page = arg1.page;\n      return this.draw(page, arg2);\n    }\n  };\n  /* tslint:enable */\n  //Private methods\n\n  /**\n   * Helper method `Draw` a Multiple Line Text Web Link on the Graphics with the specified location.\n   * @private\n   */\n\n\n  PdfTextWebLink.prototype.drawMultipleLineWithPoint = function (result, page, location) {\n    var layoutResult;\n\n    for (var i = 0; i < result.layoutLines.length; i++) {\n      var size = this.font.measureString(result.lines[i].text);\n      var bounds = new RectangleF(location, size);\n\n      if (i !== 0) {\n        bounds.x = 0;\n      }\n\n      this.text = result.lines[i].text;\n\n      if (bounds.y + size.height > page.graphics.clientSize.height) {\n        if (i !== 0) {\n          page = page.graphics.getNextPage();\n          bounds = new RectangleF(0, 0, page.graphics.clientSize.width, size.height);\n          location.y = 0;\n        } else {\n          break;\n        }\n      }\n\n      bounds = this.calculateBounds(bounds, size.width, page.graphics.clientSize.width, bounds.x);\n      this.uriAnnotation = new PdfUriAnnotation(bounds, this.url);\n      this.uriAnnotation.dictionary.items.setValue('Border', this.defaultBorder);\n      page.annotations.add(this.uriAnnotation);\n\n      if (i !== 0) {\n        layoutResult = this.drawText(page, new PointF(0, bounds.y));\n      } else {\n        layoutResult = this.drawText(page, bounds.x, bounds.y);\n      }\n\n      location.y += size.height;\n    }\n\n    return layoutResult;\n  };\n  /**\n   * Helper method `Draw` a Multiple Line Text Web Link on the Graphics with the specified bounds.\n   * @private\n   */\n\n\n  PdfTextWebLink.prototype.drawMultipleLineWithBounds = function (result, page, bounds) {\n    var layoutResult;\n\n    for (var i = 0; i < result.layoutLines.length; i++) {\n      var size = this.font.measureString(result.lines[i].text);\n      var internalBounds = new RectangleF(new PointF(bounds.x, bounds.y), size);\n      internalBounds = this.calculateBounds(internalBounds, size.width, bounds.width, bounds.x);\n      this.text = result.lines[i].text;\n\n      if (bounds.y + size.height > page.graphics.clientSize.height) {\n        if (i !== 0) {\n          page = page.graphics.getNextPage();\n          bounds = new RectangleF(bounds.x, 0, bounds.width, size.height);\n          internalBounds.y = 0;\n        } else {\n          break;\n        }\n      }\n\n      this.uriAnnotation = new PdfUriAnnotation(internalBounds, this.url);\n      this.uriAnnotation.dictionary.items.setValue('Border', this.defaultBorder);\n      page.annotations.add(this.uriAnnotation);\n      layoutResult = this.drawText(page, bounds);\n      bounds.y += size.height;\n    }\n\n    return layoutResult;\n  };\n  /* tslint:disable */\n\n\n  PdfTextWebLink.prototype.calculateBounds = function (currentBounds, lineWidth, maximumWidth, startPosition) {\n    var shift = 0;\n\n    if (this.stringFormat != null && typeof this.stringFormat !== 'undefined' && this.stringFormat.alignment === PdfTextAlignment.Center) {\n      currentBounds.x = startPosition + (maximumWidth - lineWidth) / 2;\n      currentBounds.width = lineWidth;\n    } else if (this.stringFormat != null && typeof this.stringFormat !== 'undefined' && this.stringFormat.alignment === PdfTextAlignment.Right) {\n      currentBounds.x = startPosition + (maximumWidth - lineWidth);\n      currentBounds.width = lineWidth;\n    } else if (this.stringFormat != null && typeof this.stringFormat !== 'undefined' && this.stringFormat.alignment === PdfTextAlignment.Justify) {\n      currentBounds.x = startPosition;\n      currentBounds.width = maximumWidth;\n    } else {\n      currentBounds.width = startPosition;\n      currentBounds.width = lineWidth;\n    }\n\n    return currentBounds;\n  };\n\n  return PdfTextWebLink;\n}(PdfTextElement);\n\nexport { PdfTextWebLink };","map":null,"metadata":{},"sourceType":"module"}