{"ast":null,"code":"/**\r\n * DevExtreme (ui/file_manager/ui.file_manager.notification.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nvar _window = require(\"../../core/utils/window\");\n\nvar _ui = require(\"../widget/ui.widget\");\n\nvar _ui2 = _interopRequireDefault(_ui);\n\nvar _popup = require(\"../popup\");\n\nvar _popup2 = _interopRequireDefault(_popup);\n\nvar _ui3 = require(\"../drawer/ui.drawer\");\n\nvar _ui4 = _interopRequireDefault(_ui3);\n\nvar _uiFile_managerNotification = require(\"./ui.file_manager.notification.progress_panel\");\n\nvar _uiFile_managerNotification2 = _interopRequireDefault(_uiFile_managerNotification);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nfunction _get(target, property, receiver) {\n  if (\"undefined\" !== typeof Reflect && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function (target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) {\n        return;\n      }\n\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n\n    if (null === object) {\n      break;\n    }\n  }\n\n  return object;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (\"function\" !== typeof superClass && null !== superClass) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (superClass) {\n    _setPrototypeOf(subClass, superClass);\n  }\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function (o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var result,\n        Super = _getPrototypeOf(Derived);\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (\"object\" === _typeof(call) || \"function\" === typeof call)) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (void 0 === self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (\"undefined\" === typeof Reflect || !Reflect.construct) {\n    return false;\n  }\n\n  if (Reflect.construct.sham) {\n    return false;\n  }\n\n  if (\"function\" === typeof Proxy) {\n    return true;\n  }\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function (o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar window = (0, _window.getWindow)();\nvar ADAPTIVE_STATE_SCREEN_WIDTH = 1e3;\nvar FILE_MANAGER_NOTIFICATION_CLASS = \"dx-filemanager-notification\";\nvar FILE_MANAGER_NOTIFICATION_DRAWER_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-drawer\");\nvar FILE_MANAGER_NOTIFICATION_DRAWER_PANEL_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_DRAWER_CLASS, \"-panel\");\nvar FILE_MANAGER_NOTIFICATION_POPUP_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-popup\");\nvar FILE_MANAGER_NOTIFICATION_POPUP_ERROR_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-popup-error\");\nvar FILE_MANAGER_NOTIFICATION_COMMON_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-common\");\nvar FILE_MANAGER_NOTIFICATION_SEPARATOR_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-separator\");\nvar FILE_MANAGER_NOTIFICATION_DETAILS_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-details\");\nvar FILE_MANAGER_NOTIFICATION_COMMON_NO_ITEM_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-common-no-item\");\n\nvar FileManagerNotificationControl = function (_Widget) {\n  _inherits(FileManagerNotificationControl, _Widget);\n\n  var _super = _createSuper(FileManagerNotificationControl);\n\n  function FileManagerNotificationControl() {\n    _classCallCheck(this, FileManagerNotificationControl);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FileManagerNotificationControl, [{\n    key: \"_initMarkup\",\n    value: function () {\n      var _this = this;\n\n      _get(_getPrototypeOf(FileManagerNotificationControl.prototype), \"_initMarkup\", this).call(this);\n\n      this._initActions();\n\n      this._actionProgressStatus = \"default\";\n      this._operationInProgressCount = 0;\n      this._failedOperationCount = 0;\n      this._isInAdaptiveState = this._isSmallScreen();\n      var $progressPanelContainer = this.option(\"progressPanelContainer\");\n      var $progressDrawer = (0, _renderer2.default)(\"<div>\").addClass(FILE_MANAGER_NOTIFICATION_DRAWER_CLASS).appendTo($progressPanelContainer);\n      (0, _renderer2.default)(\"<div>\").addClass(FILE_MANAGER_NOTIFICATION_DRAWER_PANEL_CLASS).appendTo($progressDrawer);\n      var drawerOptions = (0, _extend.extend)({\n        opened: false,\n        position: \"right\",\n        template: function (container) {\n          return _this._ensureProgressPanelCreated(container);\n        }\n      }, this._getProgressDrawerAdaptiveOptions());\n      this._progressDrawer = this._createComponent($progressDrawer, _ui4.default, drawerOptions);\n      var $drawerContent = $progressDrawer.find(\".\".concat(FILE_MANAGER_NOTIFICATION_DRAWER_PANEL_CLASS)).first();\n      var contentRenderer = this.option(\"contentTemplate\");\n\n      if ((0, _type.isFunction)(contentRenderer)) {\n        contentRenderer($drawerContent);\n      }\n    }\n  }, {\n    key: \"tryShowProgressPanel\",\n    value: function () {\n      var _this2 = this;\n\n      var promise = new _deferred.Deferred();\n\n      if (\"default\" === this._actionProgressStatus || this._isProgressDrawerOpened()) {\n        return promise.resolve().promise();\n      }\n\n      setTimeout(function () {\n        _this2._progressDrawer.show().done(promise.resolve);\n\n        _this2._getNotificationPopup().hide();\n\n        _this2._tryHideActionProgress();\n      });\n      return promise.promise();\n    }\n  }, {\n    key: \"addOperation\",\n    value: function (processingMessage, allowCancel, allowProgressAutoUpdate) {\n      this._operationInProgressCount++;\n\n      var operationInfo = this._progressPanel.addOperation(processingMessage, allowCancel, allowProgressAutoUpdate);\n\n      this._updateActionProgress(processingMessage, \"progress\");\n\n      return operationInfo;\n    }\n  }, {\n    key: \"addOperationDetails\",\n    value: function (info, details, showCloseButton) {\n      this._progressPanel.addOperationDetails(info, details, showCloseButton);\n    }\n  }, {\n    key: \"updateOperationItemProgress\",\n    value: function (operationInfo, itemIndex, itemProgress, commonProgress) {\n      this._progressPanel.updateOperationItemProgress(operationInfo, itemIndex, itemProgress, commonProgress);\n    }\n  }, {\n    key: \"completeOperationItem\",\n    value: function (operationInfo, itemIndex, commonProgress) {\n      this._progressPanel.completeOperationItem(operationInfo, itemIndex, commonProgress);\n    }\n  }, {\n    key: \"completeOperation\",\n    value: function (info, commonText, isError, statusText) {\n      this._operationInProgressCount--;\n\n      if (isError) {\n        this._failedOperationCount++;\n      } else {\n        this._showPopup(commonText);\n      }\n\n      this._progressPanel.completeOperation(info, commonText, isError, statusText);\n\n      if (!this._isProgressDrawerOpened() || !this._tryHideActionProgress()) {\n        var status = 0 === this._failedOperationCount ? \"success\" : \"error\";\n\n        this._updateActionProgress(\"\", status);\n      }\n    }\n  }, {\n    key: \"completeSingleOperationWithError\",\n    value: function (operationInfo, errorInfo) {\n      this._progressPanel.completeSingleOperationWithError(operationInfo, errorInfo.detailErrorText);\n\n      this._notifyError(errorInfo);\n    }\n  }, {\n    key: \"addOperationDetailsError\",\n    value: function (operationInfo, errorInfo) {\n      this._progressPanel.addOperationDetailsError(operationInfo, errorInfo.itemIndex, errorInfo.detailErrorText);\n\n      this._notifyError(errorInfo);\n    }\n  }, {\n    key: \"_hideProgressPanel\",\n    value: function () {\n      var _this3 = this;\n\n      setTimeout(function () {\n        return _this3._progressDrawer.hide();\n      });\n    }\n  }, {\n    key: \"_tryHideActionProgress\",\n    value: function () {\n      if (0 === this._operationInProgressCount && 0 === this._failedOperationCount) {\n        this._updateActionProgress(\"\", \"default\");\n\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_updateActionProgress\",\n    value: function (message, status) {\n      this._actionProgressStatus = status;\n\n      this._raiseActionProgress(message, status);\n    }\n  }, {\n    key: \"_isSmallScreen\",\n    value: function () {\n      if (!(0, _window.hasWindow)()) {\n        return false;\n      }\n\n      return (0, _renderer2.default)(window).width() <= ADAPTIVE_STATE_SCREEN_WIDTH;\n    }\n  }, {\n    key: \"_dimensionChanged\",\n    value: function (dimension) {\n      if (!dimension || \"height\" !== dimension) {\n        this._checkAdaptiveState();\n      }\n    }\n  }, {\n    key: \"_checkAdaptiveState\",\n    value: function () {\n      var oldState = this._isInAdaptiveState;\n      this._isInAdaptiveState = this._isSmallScreen();\n\n      if (this._progressDrawer && oldState !== this._isInAdaptiveState) {\n        if (this._progressPanel) {\n          this._progressPanel.$element().detach();\n        }\n\n        var options = this._getProgressDrawerAdaptiveOptions();\n\n        this._progressDrawer.option(options);\n      }\n    }\n  }, {\n    key: \"_getProgressDrawerAdaptiveOptions\",\n    value: function () {\n      if (this._isInAdaptiveState) {\n        return {\n          openedStateMode: \"overlap\",\n          shading: true,\n          closeOnOutsideClick: true\n        };\n      } else {\n        return {\n          openedStateMode: \"shrink\",\n          shading: false,\n          closeOnOutsideClick: false\n        };\n      }\n    }\n  }, {\n    key: \"_ensureProgressPanelCreated\",\n    value: function (container) {\n      var _this4 = this;\n\n      if (!this._progressPanel) {\n        var $progressPanelElement = (0, _renderer2.default)(\"<div>\").appendTo(container);\n        this._progressPanel = this._createComponent($progressPanelElement, this._getProgressPanelComponent(), {\n          onOperationClosed: function (_ref) {\n            var info = _ref.info;\n            return _this4._onProgressPanelOperationClosed(info);\n          },\n          onOperationCanceled: function (_ref2) {\n            var info = _ref2.info;\n            return _this4._raiseOperationCanceled(info);\n          },\n          onOperationItemCanceled: function (_ref3) {\n            var item = _ref3.item,\n                itemIndex = _ref3.itemIndex;\n            return _this4._raiseOperationItemCanceled(item, itemIndex);\n          },\n          onPanelClosed: function () {\n            return _this4._hideProgressPanel();\n          }\n        });\n      } else {\n        this._progressPanel.$element().appendTo(container);\n      }\n    }\n  }, {\n    key: \"_getProgressPanelComponent\",\n    value: function () {\n      return _uiFile_managerNotification2.default;\n    }\n  }, {\n    key: \"_notifyError\",\n    value: function (errorInfo) {\n      this._showPopupError(errorInfo);\n\n      this._updateActionProgress(errorInfo.commonErrorText, \"error\");\n    }\n  }, {\n    key: \"_onProgressPanelOperationClosed\",\n    value: function (info) {\n      if (info.hasError) {\n        this._failedOperationCount--;\n\n        this._tryHideActionProgress();\n      }\n    }\n  }, {\n    key: \"_isProgressDrawerOpened\",\n    value: function () {\n      return this._progressDrawer.option(\"opened\");\n    }\n  }, {\n    key: \"_showPopup\",\n    value: function (content, errorMode) {\n      if (this._isProgressDrawerOpened()) {\n        return;\n      }\n\n      this._getNotificationPopup()._wrapper().toggleClass(FILE_MANAGER_NOTIFICATION_POPUP_ERROR_CLASS, !!errorMode);\n\n      this._getNotificationPopup().option(\"contentTemplate\", content);\n\n      if (!this._getNotificationPopup().option(\"visible\")) {\n        this._getNotificationPopup().show();\n      }\n    }\n  }, {\n    key: \"_showPopupError\",\n    value: function (errorInfo) {\n      var $content = (0, _renderer2.default)(\"<div>\");\n      var $message = (0, _renderer2.default)(\"<div>\").addClass(FILE_MANAGER_NOTIFICATION_COMMON_CLASS).text(errorInfo.commonErrorText);\n      var $separator = (0, _renderer2.default)(\"<div>\").addClass(FILE_MANAGER_NOTIFICATION_SEPARATOR_CLASS);\n      (0, _renderer2.default)(\"<div>\").appendTo($separator);\n      var $details = (0, _renderer2.default)(\"<div>\").addClass(FILE_MANAGER_NOTIFICATION_DETAILS_CLASS);\n\n      if (errorInfo.item) {\n        this._progressPanel.createErrorDetailsProgressBox($details, errorInfo.item, errorInfo.detailErrorText);\n      } else {\n        $message.addClass(FILE_MANAGER_NOTIFICATION_COMMON_NO_ITEM_CLASS);\n\n        this._progressPanel.renderError($details, $separator, errorInfo.detailErrorText);\n      }\n\n      $content.append($message, $separator, $details);\n\n      this._showPopup($content, true);\n    }\n  }, {\n    key: \"_getNotificationPopup\",\n    value: function () {\n      if (!this._notificationPopup) {\n        var $popup = (0, _renderer2.default)(\"<div>\").addClass(FILE_MANAGER_NOTIFICATION_POPUP_CLASS).appendTo(this.$element());\n        this._notificationPopup = this._createComponent($popup, _popup2.default, {\n          container: this.$element(),\n          width: \"auto\",\n          height: \"auto\",\n          showTitle: false,\n          dragEnabled: false,\n          shading: false,\n          visible: false,\n          closeOnOutsideClick: true,\n          animation: {\n            duration: 0\n          },\n          position: {\n            my: \"right top\",\n            at: \"right top\",\n            of: this.option(\"positionTarget\"),\n            offset: \"-10 -5\"\n          }\n        });\n      }\n\n      return this._notificationPopup;\n    }\n  }, {\n    key: \"_raiseActionProgress\",\n    value: function (message, status) {\n      this._actions.onActionProgress({\n        message: message,\n        status: status\n      });\n    }\n  }, {\n    key: \"_raiseOperationCanceled\",\n    value: function (info) {\n      this._actions.onOperationCanceled({\n        info: info\n      });\n    }\n  }, {\n    key: \"_raiseOperationItemCanceled\",\n    value: function (item, index) {\n      this._actions.onOperationItemCanceled({\n        item: item,\n        itemIndex: index\n      });\n    }\n  }, {\n    key: \"_initActions\",\n    value: function () {\n      this._actions = {\n        onActionProgress: this._createActionByOption(\"onActionProgress\"),\n        onOperationCanceled: this._createActionByOption(\"onOperationCanceled\"),\n        onOperationItemCanceled: this._createActionByOption(\"onOperationItemCanceled\")\n      };\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function () {\n      return (0, _extend.extend)(_get(_getPrototypeOf(FileManagerNotificationControl.prototype), \"_getDefaultOptions\", this).call(this), {\n        progressPanelContainer: null,\n        contentTemplate: null,\n        onActionProgress: null,\n        onOperationCanceled: null,\n        onOperationItemCanceled: null\n      });\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function (args) {\n      var name = args.name;\n\n      switch (name) {\n        case \"progressPanelContainer\":\n        case \"contentTemplate\":\n          break;\n\n        case \"onActionProgress\":\n        case \"onOperationCanceled\":\n        case \"onOperationItemCanceled\":\n          this._actions[name] = this._createActionByOption(name);\n          break;\n\n        default:\n          _get(_getPrototypeOf(FileManagerNotificationControl.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }]);\n\n  return FileManagerNotificationControl;\n}(_ui2.default);\n\nexports.default = FileManagerNotificationControl;","map":null,"metadata":{},"sourceType":"script"}