{"ast":null,"code":"import { PdfDictionary } from './../primitives/pdf-dictionary';\nimport { PdfNumber } from './../primitives/pdf-number';\nimport { PdfName } from './../primitives/pdf-name';\nimport { DictionaryProperties } from './../input-output/pdf-dictionary-properties';\n/**\n * Represents a simple `transparency`.\n * @private\n */\n\nvar PdfTransparency =\n/** @class */\nfunction () {\n  // Properties\n  // /**\n  //  * Gets the `stroke` operation alpha value.\n  //  * @private\n  //  */\n  // public get stroke() : number {\n  //     let result : number = this.getNumber(this.dictionaryProperties.CA);\n  //     return result;\n  // }\n  // /**\n  //  * Gets the `fill` operation alpha value.\n  //  * @private\n  //  */\n  // public get fill() : number {\n  //     let result : number = this.getNumber(this.dictionaryProperties.ca);\n  //     return result;\n  // }\n  // /**\n  //  * Gets the `blend mode`.\n  //  * @private\n  //  */\n  // public get mode() : PdfBlendMode {\n  //     let result : string = this.getName(this.dictionaryProperties.ca);\n  //     return PdfBlendMode.Normal;\n  // }\n  // Constructors\n\n  /**\n   * Initializes a new instance of the `Transparency` class.\n   * @private\n   */\n  function PdfTransparency(stroke, fill, mode) {\n    // Fields\n\n    /**\n     * Internal variable to store `dictionary`.\n     * @default new PdfDictionary()\n     * @private\n     */\n    this.dictionary = new PdfDictionary();\n    /**\n     * Internal variable for accessing fields from `DictionryProperties` class.\n     * @default new DictionaryProperties()\n     * @private\n     */\n\n    this.dictionaryProperties = new DictionaryProperties();\n    this.dictionary.items.setValue(this.dictionaryProperties.CA, new PdfNumber(stroke));\n    this.dictionary.items.setValue(this.dictionaryProperties.ca, new PdfNumber(fill));\n    this.dictionary.items.setValue(this.dictionaryProperties.BM, new PdfName(mode.toString()));\n  }\n\n  Object.defineProperty(PdfTransparency.prototype, \"element\", {\n    // // Implementation\n    // /**\n    //  * Gets the `number value`.\n    //  * @private\n    //  */\n    // private getNumber(keyName : string) : number {\n    //     let result : number = 0.0;\n    //     let numb : PdfNumber = this.dictionary.items.getValue(keyName) as PdfNumber;\n    //     result = numb.intValue;\n    //     return result;\n    // }\n    // /**\n    //  * Gets the `name value`.\n    //  * @private\n    //  */\n    // private getName(keyName : string) : string {\n    //     let result : string = null;\n    //     let name : PdfName = this.dictionary.items.getValue(keyName) as PdfName;\n    //     result = name.value;\n    //     return result;\n    // }\n    // IPdfWrapper Members\n\n    /**\n     * Gets the `element`.\n     * @private\n     */\n    get: function () {\n      return this.dictionary;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfTransparency;\n}();\n\nexport { PdfTransparency };","map":null,"metadata":{},"sourceType":"module"}