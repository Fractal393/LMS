{"ast":null,"code":"/**\r\n * DevExtreme (ui/file_manager/ui.file_manager.toolbar.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _message = require(\"../../localization/message\");\n\nvar _message2 = _interopRequireDefault(_message);\n\nvar _uiFile_manager = require(\"./ui.file_manager.common\");\n\nvar _ui = require(\"../widget/ui.widget\");\n\nvar _ui2 = _interopRequireDefault(_ui);\n\nvar _toolbar = require(\"../toolbar\");\n\nvar _toolbar2 = _interopRequireDefault(_toolbar);\n\nrequire(\"../drop_down_button\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nfunction _get(target, property, receiver) {\n  if (\"undefined\" !== typeof Reflect && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function (target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) {\n        return;\n      }\n\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n\n    if (null === object) {\n      break;\n    }\n  }\n\n  return object;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (\"function\" !== typeof superClass && null !== superClass) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (superClass) {\n    _setPrototypeOf(subClass, superClass);\n  }\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function (o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var result,\n        Super = _getPrototypeOf(Derived);\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (\"object\" === _typeof(call) || \"function\" === typeof call)) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (void 0 === self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (\"undefined\" === typeof Reflect || !Reflect.construct) {\n    return false;\n  }\n\n  if (Reflect.construct.sham) {\n    return false;\n  }\n\n  if (\"function\" === typeof Proxy) {\n    return true;\n  }\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function (o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar FILE_MANAGER_TOOLBAR_CLASS = \"dx-filemanager-toolbar\";\nvar FILE_MANAGER_GENERAL_TOOLBAR_CLASS = \"dx-filemanager-general-toolbar\";\nvar FILE_MANAGER_FILE_TOOLBAR_CLASS = \"dx-filemanager-file-toolbar\";\nvar FILE_MANAGER_TOOLBAR_SEPARATOR_ITEM_CLASS = FILE_MANAGER_TOOLBAR_CLASS + \"-separator-item\";\nvar FILE_MANAGER_TOOLBAR_VIEWMODE_ITEM_CLASS = FILE_MANAGER_TOOLBAR_CLASS + \"-viewmode-item\";\nvar FILE_MANAGER_TOOLBAR_HAS_LARGE_ICON_CLASS = FILE_MANAGER_TOOLBAR_CLASS + \"-has-large-icon\";\nvar FILE_MANAGER_VIEW_SWITCHER_POPUP_CLASS = \"dx-filemanager-view-switcher-popup\";\nvar DEFAULT_ITEM_CONFIGS = {\n  showNavPane: {\n    location: \"before\"\n  },\n  create: {\n    location: \"before\",\n    compactMode: {\n      showText: \"inMenu\",\n      locateInMenu: \"auto\"\n    }\n  },\n  upload: {\n    location: \"before\",\n    compactMode: {\n      showText: \"inMenu\",\n      locateInMenu: \"auto\"\n    }\n  },\n  refresh: {\n    location: \"after\",\n    showText: \"inMenu\",\n    cssClass: FILE_MANAGER_TOOLBAR_HAS_LARGE_ICON_CLASS,\n    compactMode: {\n      showText: \"inMenu\",\n      locateInMenu: \"auto\"\n    }\n  },\n  switchView: {\n    location: \"after\"\n  },\n  download: {\n    location: \"before\",\n    compactMode: {\n      showText: \"inMenu\",\n      locateInMenu: \"auto\"\n    }\n  },\n  move: {\n    location: \"before\",\n    compactMode: {\n      showText: \"inMenu\",\n      locateInMenu: \"auto\"\n    }\n  },\n  copy: {\n    location: \"before\",\n    compactMode: {\n      showText: \"inMenu\",\n      locateInMenu: \"auto\"\n    }\n  },\n  rename: {\n    location: \"before\",\n    compactMode: {\n      showText: \"inMenu\",\n      locateInMenu: \"auto\"\n    }\n  },\n  \"delete\": {\n    location: \"before\",\n    compactMode: {\n      showText: \"inMenu\"\n    }\n  },\n  clearSelection: {\n    location: \"after\",\n    locateInMenu: \"never\",\n    compactMode: {\n      showText: \"inMenu\"\n    }\n  },\n  separator: {\n    location: \"before\"\n  }\n};\nvar ALWAYS_VISIBLE_TOOLBAR_ITEMS = [\"separator\", \"switchView\"];\nvar REFRESH_ICON_MAP = {\n  \"default\": \"dx-filemanager-i dx-filemanager-i-refresh\",\n  progress: \"dx-filemanager-i dx-filemanager-i-progress\",\n  success: \"dx-filemanager-i dx-filemanager-i-done\",\n  error: \"dx-filemanager-i dx-filemanager-i-danger\"\n};\nvar REFRESH_ITEM_PROGRESS_MESSAGE_DELAY = 500;\n\nvar FileManagerToolbar = function (_Widget) {\n  _inherits(FileManagerToolbar, _Widget);\n\n  var _super = _createSuper(FileManagerToolbar);\n\n  function FileManagerToolbar() {\n    _classCallCheck(this, FileManagerToolbar);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FileManagerToolbar, [{\n    key: \"_initMarkup\",\n    value: function () {\n      this._commandManager = this.option(\"commandManager\");\n\n      this._createItemClickedAction();\n\n      this._generalToolbarVisible = true;\n      this._$viewSwitcherPopup = (0, _renderer2.default)(\"<div>\").addClass(FILE_MANAGER_VIEW_SWITCHER_POPUP_CLASS);\n      this._generalToolbar = this._createToolbar(this.option(\"generalItems\"));\n      this._fileToolbar = this._createToolbar(this.option(\"fileItems\"), true);\n\n      this._$viewSwitcherPopup.appendTo(this.$element());\n\n      this.$element().addClass(FILE_MANAGER_TOOLBAR_CLASS + \" \" + FILE_MANAGER_GENERAL_TOOLBAR_CLASS);\n    }\n  }, {\n    key: \"_render\",\n    value: function () {\n      _get(_getPrototypeOf(FileManagerToolbar.prototype), \"_render\", this).call(this);\n\n      var toolbar = this._getVisibleToolbar();\n\n      this._checkCompactMode(toolbar);\n    }\n  }, {\n    key: \"_dimensionChanged\",\n    value: function (dimension) {\n      if (!dimension || \"height\" !== dimension) {\n        var toolbar = this._getVisibleToolbar();\n\n        this._checkCompactMode(toolbar);\n      }\n    }\n  }, {\n    key: \"_getVisibleToolbar\",\n    value: function () {\n      return this._generalToolbarVisible ? this._generalToolbar : this._fileToolbar;\n    }\n  }, {\n    key: \"_createToolbar\",\n    value: function (items, hidden) {\n      var _this = this;\n\n      var toolbarItems = this._getPreparedItems(items);\n\n      var $toolbar = (0, _renderer2.default)(\"<div>\").appendTo(this.$element());\n\n      var result = this._createComponent($toolbar, _toolbar2.default, {\n        items: toolbarItems,\n        visible: !hidden,\n        onItemClick: function (args) {\n          return _this._raiseItemClicked(args);\n        }\n      });\n\n      result.compactMode = false;\n      return result;\n    }\n  }, {\n    key: \"_getPreparedItems\",\n    value: function (items) {\n      var _this2 = this;\n\n      items = items.map(function (item) {\n        var extendedItem = item;\n\n        if ((0, _type.isString)(item)) {\n          extendedItem = {\n            name: item\n          };\n        }\n\n        var commandName = extendedItem.name;\n\n        var preparedItem = _this2._configureItemByCommandName(commandName, extendedItem);\n\n        preparedItem.originalItemData = item;\n\n        if (\"separator\" !== commandName) {\n          preparedItem.available = _this2._isToolbarItemAvailable(preparedItem);\n          var itemVisible = preparedItem.available;\n          preparedItem.visible = itemVisible;\n        }\n\n        return preparedItem;\n      });\n\n      this._updateSeparatorsVisibility(items);\n\n      return items;\n    }\n  }, {\n    key: \"_updateSeparatorsVisibility\",\n    value: function (items, toolbar) {\n      var _this3 = this;\n\n      var hasModifications = false;\n\n      var menuItems = this._getMenuItems(toolbar);\n\n      var hasItemsBefore = {\n        before: false,\n        center: false,\n        after: false\n      };\n      var itemGroups = {\n        before: this._getItemsInGroup(items, menuItems, \"before\"),\n        center: this._getItemsInGroup(items, menuItems, \"center\"),\n        after: this._getItemsInGroup(items, menuItems, \"after\")\n      };\n      items.forEach(function (item, i) {\n        var itemLocation = item.location;\n\n        if (\"separator\" === item.name) {\n          var isSeparatorVisible = hasItemsBefore[itemLocation] && _this3._groupHasItemsAfter(itemGroups[itemLocation]);\n\n          if (item.visible !== isSeparatorVisible) {\n            hasModifications = true;\n            item.visible = isSeparatorVisible;\n          }\n\n          hasItemsBefore[itemLocation] = false;\n        } else {\n          if (!_this3._isItemInMenu(menuItems, item)) {\n            hasItemsBefore[itemLocation] = hasItemsBefore[itemLocation] || item.visible;\n          }\n\n          itemGroups[itemLocation].shift();\n        }\n      });\n\n      if (toolbar && hasModifications) {\n        toolbar.repaint();\n      }\n\n      return hasModifications;\n    }\n  }, {\n    key: \"_getMenuItems\",\n    value: function (toolbar) {\n      var result = toolbar ? toolbar._getMenuItems() : [];\n      return result.map(function (menuItem) {\n        return menuItem.originalItemData;\n      });\n    }\n  }, {\n    key: \"_isItemInMenu\",\n    value: function (menuItems, item) {\n      return !!menuItems.length && \"never\" !== (0, _common.ensureDefined)(item.locateInMenu, \"never\") && menuItems.indexOf(item.originalItemData) !== -1;\n    }\n  }, {\n    key: \"_getItemsInGroup\",\n    value: function (items, menuItems, groupName) {\n      var _this4 = this;\n\n      return items.filter(function (item) {\n        return item.location === groupName && !_this4._isItemInMenu(menuItems, item);\n      });\n    }\n  }, {\n    key: \"_groupHasItemsAfter\",\n    value: function (items) {\n      for (var i = 0; i < items.length; i++) {\n        if (\"separator\" !== items[i].name && items[i].visible) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_configureItemByCommandName\",\n    value: function (commandName, item) {\n      var result = {};\n\n      var command = this._commandManager.getCommandByName(commandName);\n\n      if (command) {\n        result = this._createCommandItem(command);\n      }\n\n      switch (commandName) {\n        case \"separator\":\n          result = this._createSeparatorItem();\n          break;\n\n        case \"switchView\":\n          result = this._createViewModeItem();\n      }\n\n      if (this._isDefaultItem(commandName)) {\n        var defaultConfig = DEFAULT_ITEM_CONFIGS[commandName];\n        (0, _extend.extend)(true, result, defaultConfig);\n        (0, _uiFile_manager.extendAttributes)(result, item, [\"visible\", \"location\", \"locateInMenu\"]);\n\n        if (!(0, _type.isDefined)(item.visible)) {\n          result._autoHide = true;\n        } else {\n          (0, _uiFile_manager.extendAttributes)(result, item, [\"disabled\"]);\n        }\n\n        (0, _uiFile_manager.extendAttributes)(result.options, item, [\"text\", \"icon\"]);\n\n        if (\"dxButton\" === result.widget) {\n          if (\"inMenu\" === result.showText && !(0, _type.isDefined)(result.options.hint)) {\n            result.options.hint = result.options.text;\n          }\n\n          if (result.compactMode && !(0, _type.isDefined)(result.options.hint)) {\n            this._configureHintForCompactMode(result);\n          }\n        }\n      } else {\n        (0, _extend.extend)(true, result, item);\n\n        if (!result.widget) {\n          result.widget = \"dxButton\";\n        }\n\n        if (\"dxButton\" === result.widget && !result.compactMode && !result.showText && result.options.icon && result.options.text) {\n          result.compactMode = {\n            showText: \"inMenu\"\n          };\n        }\n      }\n\n      if (commandName && !result.name) {\n        (0, _extend.extend)(result, {\n          name: commandName\n        });\n      }\n\n      result.location = (0, _common.ensureDefined)(result.location, \"before\");\n\n      if (\"dxButton\" === result.widget) {\n        (0, _extend.extend)(true, result, {\n          options: {\n            stylingMode: \"text\"\n          }\n        });\n      }\n\n      if (\"dxSelectBox\" === result.widget) {\n        (0, _extend.extend)(true, result, {\n          options: {\n            stylingMode: \"filled\"\n          }\n        });\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_isDefaultItem\",\n    value: function (commandName) {\n      return !!DEFAULT_ITEM_CONFIGS[commandName];\n    }\n  }, {\n    key: \"_createCommandItem\",\n    value: function (command) {\n      var _this5 = this;\n\n      return {\n        widget: \"dxButton\",\n        options: {\n          text: command.text,\n          hint: command.hint,\n          commandText: command.text,\n          icon: command.icon,\n          stylingMode: \"text\",\n          onClick: function (e) {\n            return _this5._executeCommand(command);\n          }\n        }\n      };\n    }\n  }, {\n    key: \"_createSeparatorItem\",\n    value: function () {\n      return {\n        template: function (data, index, element) {\n          (0, _renderer2.default)(element).addClass(FILE_MANAGER_TOOLBAR_SEPARATOR_ITEM_CLASS);\n        }\n      };\n    }\n  }, {\n    key: \"_createViewModeItem\",\n    value: function () {\n      var _this6 = this;\n\n      var commandItems = [\"details\", \"thumbnails\"].map(function (name) {\n        var _this6$_commandManage = _this6._commandManager.getCommandByName(name),\n            text = _this6$_commandManage.text,\n            icon = _this6$_commandManage.icon;\n\n        return {\n          name: name,\n          text: text,\n          icon: icon\n        };\n      });\n      var selectedIndex = \"thumbnails\" === this.option(\"itemViewMode\") ? 1 : 0;\n      return {\n        cssClass: FILE_MANAGER_TOOLBAR_VIEWMODE_ITEM_CLASS,\n        widget: \"dxDropDownButton\",\n        options: {\n          items: commandItems,\n          keyExpr: \"name\",\n          selectedItemKey: this.option(\"itemViewMode\"),\n          displayExpr: \" \",\n          hint: commandItems[selectedIndex].text,\n          stylingMode: \"text\",\n          showArrowIcon: false,\n          useSelectMode: true,\n          dropDownOptions: {\n            container: this._$viewSwitcherPopup\n          },\n          onItemClick: function (e) {\n            return _this6._executeCommand(e.itemData.name);\n          }\n        }\n      };\n    }\n  }, {\n    key: \"_configureHintForCompactMode\",\n    value: function (item) {\n      item.options.hint = \"\";\n      item.compactMode.options = item.compactMode.options || {};\n      item.compactMode.options.hint = item.options.text;\n    }\n  }, {\n    key: \"_checkCompactMode\",\n    value: function (toolbar) {\n      if (toolbar.compactMode) {\n        this._toggleCompactMode(toolbar, false);\n      }\n\n      var useCompactMode = this._toolbarHasItemsOverflow(toolbar);\n\n      if (toolbar.compactMode !== useCompactMode) {\n        if (!toolbar.compactMode) {\n          this._toggleCompactMode(toolbar, useCompactMode);\n        }\n\n        toolbar.compactMode = useCompactMode;\n      } else {\n        if (toolbar.compactMode) {\n          this._toggleCompactMode(toolbar, true);\n        }\n      }\n    }\n  }, {\n    key: \"_toolbarHasItemsOverflow\",\n    value: function (toolbar) {\n      var toolbarWidth = toolbar.$element().width();\n\n      var itemsWidth = toolbar._getItemsWidth();\n\n      return toolbarWidth < itemsWidth;\n    }\n  }, {\n    key: \"_toggleCompactMode\",\n    value: function (toolbar, useCompactMode) {\n      var _this7 = this;\n\n      var hasModifications = false;\n      var items = toolbar.option(\"items\");\n      items.forEach(function (item) {\n        if (item.compactMode) {\n          var optionsSource = null;\n\n          if (useCompactMode) {\n            item.saved = _this7._getCompactModeOptions(item, item.available);\n            optionsSource = item.compactMode;\n          } else {\n            optionsSource = item.saved;\n          }\n\n          var options = _this7._getCompactModeOptions(optionsSource, item.available);\n\n          (0, _extend.extend)(true, item, options);\n          hasModifications = true;\n        }\n      });\n      hasModifications = this._updateSeparatorsVisibility(items) || hasModifications;\n\n      if (hasModifications) {\n        toolbar.repaint();\n      }\n\n      this._updateSeparatorsVisibility(items, toolbar);\n    }\n  }, {\n    key: \"_getCompactModeOptions\",\n    value: function (_ref, available) {\n      var showText = _ref.showText,\n          locateInMenu = _ref.locateInMenu,\n          options = _ref.options;\n      return {\n        visible: available,\n        showText: (0, _common.ensureDefined)(showText, \"always\"),\n        locateInMenu: (0, _common.ensureDefined)(locateInMenu, \"never\"),\n        options: {\n          hint: null === options || void 0 === options ? void 0 : options.hint\n        }\n      };\n    }\n  }, {\n    key: \"_ensureAvailableCommandsVisible\",\n    value: function (toolbar, fileItems) {\n      var _this8 = this;\n\n      var hasModifications = false;\n      var items = toolbar.option(\"items\");\n      items.forEach(function (item) {\n        if (\"separator\" !== item.name) {\n          var itemVisible = item.available;\n          item.available = _this8._isToolbarItemAvailable(item, fileItems);\n\n          if (item.available !== itemVisible) {\n            item.visible = item.available;\n            hasModifications = true;\n          }\n        }\n      });\n      hasModifications = this._updateSeparatorsVisibility(items) || hasModifications;\n\n      if (hasModifications) {\n        toolbar.repaint();\n      }\n\n      this._updateSeparatorsVisibility(items, toolbar);\n    }\n  }, {\n    key: \"_fileToolbarHasEffectiveItems\",\n    value: function (fileItems) {\n      var _this9 = this;\n\n      var items = this._fileToolbar.option(\"items\");\n\n      return items.some(function (item) {\n        return _this9._isFileToolbarItemAvailable(item, fileItems);\n      });\n    }\n  }, {\n    key: \"_executeCommand\",\n    value: function (command) {\n      this._commandManager.executeCommand(command);\n    }\n  }, {\n    key: \"_isToolbarItemAvailable\",\n    value: function (toolbarItem, fileItems) {\n      if (!this._isDefaultItem(toolbarItem.name) || !toolbarItem._autoHide) {\n        return (0, _common.ensureDefined)(toolbarItem.visible, true);\n      }\n\n      if (\"refresh\" === toolbarItem.name) {\n        return this._generalToolbarVisible || !!this._isRefreshVisibleInFileToolbar;\n      }\n\n      if (ALWAYS_VISIBLE_TOOLBAR_ITEMS.indexOf(toolbarItem.name) > -1) {\n        return true;\n      }\n\n      return this._commandManager.isCommandAvailable(toolbarItem.name, fileItems);\n    }\n  }, {\n    key: \"_isFileToolbarItemAvailable\",\n    value: function (_ref2, fileItems) {\n      var name = _ref2.name,\n          visible = _ref2.visible;\n      return !this._isDefaultItem(name) && (0, _common.ensureDefined)(visible, true) || \"clearSelection\" !== name && \"refresh\" !== name && this._commandManager.isCommandAvailable(name, fileItems);\n    }\n  }, {\n    key: \"_updateItemInToolbar\",\n    value: function (toolbar, commandName, options) {\n      toolbar.beginUpdate();\n      var items = toolbar.option(\"items\");\n\n      for (var i = 0; i < items.length; i++) {\n        var item = items[i];\n\n        if (item.name === commandName) {\n          toolbar.option(\"items[\".concat(i, \"]\"), options);\n          break;\n        }\n      }\n\n      toolbar.endUpdate();\n    }\n  }, {\n    key: \"_raiseItemClicked\",\n    value: function (args) {\n      var changedArgs = (0, _extend.extend)(true, {}, args);\n      changedArgs.itemData = args.itemData.originalItemData;\n\n      this._itemClickedAction(changedArgs);\n    }\n  }, {\n    key: \"_createItemClickedAction\",\n    value: function () {\n      this._itemClickedAction = this._createActionByOption(\"onItemClick\");\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function () {\n      return (0, _extend.extend)(_get(_getPrototypeOf(FileManagerToolbar.prototype), \"_getDefaultOptions\", this).call(this), {\n        commandManager: null,\n        generalItems: [],\n        fileItems: [],\n        itemViewMode: \"details\",\n        onItemClick: null\n      });\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function (args) {\n      var name = args.name;\n\n      switch (name) {\n        case \"commandManager\":\n        case \"itemViewMode\":\n        case \"generalItems\":\n        case \"fileItems\":\n          this.repaint();\n          break;\n\n        case \"onItemClick\":\n          this._itemClickedAction = this._createActionByOption(name);\n          break;\n\n        default:\n          _get(_getPrototypeOf(FileManagerToolbar.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }, {\n    key: \"updateRefreshItem\",\n    value: function (message, status) {\n      var generalToolbarOptions = null;\n\n      var text = _message2.default.format(\"dxFileManager-commandRefresh\");\n\n      var showText = \"inMenu\";\n      this._isRefreshVisibleInFileToolbar = false;\n\n      if (\"default\" === status) {\n        generalToolbarOptions = {\n          options: {\n            icon: REFRESH_ICON_MAP.default\n          }\n        };\n      } else {\n        generalToolbarOptions = {\n          options: {\n            icon: REFRESH_ICON_MAP[status]\n          }\n        };\n        this._isRefreshVisibleInFileToolbar = true;\n        text = message;\n        showText = \"always\";\n      }\n\n      var fileToolbarOptions = (0, _extend.extend)({}, generalToolbarOptions, {\n        visible: this._isRefreshVisibleInFileToolbar\n      });\n\n      this._applyRefreshItemOptions(generalToolbarOptions, fileToolbarOptions);\n\n      this._refreshItemTextTimeout = this._updateRefreshItemText(\"progress\" === status, text, showText);\n    }\n  }, {\n    key: \"_updateRefreshItemText\",\n    value: function (isDeferredUpdate, text, showText) {\n      var _this10 = this;\n\n      var options = {\n        showText: showText,\n        options: {\n          text: text\n        }\n      };\n\n      if (isDeferredUpdate) {\n        return setTimeout(function () {\n          _this10._applyRefreshItemOptions(options);\n\n          _this10._refreshItemTextTimeout = void 0;\n        }, REFRESH_ITEM_PROGRESS_MESSAGE_DELAY);\n      } else {\n        if (this._refreshItemTextTimeout) {\n          clearTimeout(this._refreshItemTextTimeout);\n        }\n\n        this._applyRefreshItemOptions(options);\n\n        return;\n      }\n    }\n  }, {\n    key: \"_applyRefreshItemOptions\",\n    value: function (generalToolbarOptions, fileToolbarOptions) {\n      if (!fileToolbarOptions) {\n        fileToolbarOptions = (0, _extend.extend)({}, generalToolbarOptions);\n      }\n\n      this._updateItemInToolbar(this._generalToolbar, \"refresh\", generalToolbarOptions);\n\n      this._updateItemInToolbar(this._fileToolbar, \"refresh\", fileToolbarOptions);\n    }\n  }, {\n    key: \"update\",\n    value: function (fileItems) {\n      fileItems = (0, _common.ensureDefined)(fileItems, []);\n      var showGeneralToolbar = 0 === fileItems.length || !this._fileToolbarHasEffectiveItems(fileItems);\n\n      if (this._generalToolbarVisible !== showGeneralToolbar) {\n        this._generalToolbar.option(\"visible\", showGeneralToolbar);\n\n        this._fileToolbar.option(\"visible\", !showGeneralToolbar);\n\n        this._generalToolbarVisible = showGeneralToolbar;\n        this.$element().toggleClass(FILE_MANAGER_GENERAL_TOOLBAR_CLASS, showGeneralToolbar);\n        this.$element().toggleClass(FILE_MANAGER_FILE_TOOLBAR_CLASS, !showGeneralToolbar);\n      }\n\n      var toolbar = this._getVisibleToolbar();\n\n      this._ensureAvailableCommandsVisible(toolbar, fileItems);\n\n      this._checkCompactMode(toolbar);\n    }\n  }]);\n\n  return FileManagerToolbar;\n}(_ui2.default);\n\nmodule.exports = FileManagerToolbar;","map":null,"metadata":{},"sourceType":"script"}