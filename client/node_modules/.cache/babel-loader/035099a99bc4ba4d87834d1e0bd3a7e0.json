{"ast":null,"code":"import { extend, isBlazor } from '@syncfusion/ej2-base';\nimport { AutoComplete } from '@syncfusion/ej2-dropdowns';\nimport { Query, DataManager, DataUtil } from '@syncfusion/ej2-data';\nimport { isEditable, getComplexFieldID, getObject } from '../base/util';\n/**\n * `AutoCompleteEditCell` is used to handle autocomplete cell type editing.\n * @hidden\n */\n\nvar AutoCompleteEditCell =\n/** @class */\nfunction () {\n  function AutoCompleteEditCell(parent) {\n    //constructor\n    this.parentObj = parent;\n  }\n\n  AutoCompleteEditCell.prototype.create = function (args) {\n    //create \n    var complexFieldName = getComplexFieldID(args.column.field);\n    return this.parentObj.createElement('input', {\n      className: 'e-field',\n      attrs: {\n        id: this.parentObj.element.id + complexFieldName,\n        name: complexFieldName,\n        type: 'text',\n        'e-mappinguid': args.column.uid\n      }\n    });\n  };\n\n  AutoCompleteEditCell.prototype.write = function (args) {\n    this.column = args.column;\n    var isInlineEdit = this.parentObj.editSettings.mode !== 'Dialog';\n    this.object = new AutoComplete(extend({\n      dataSource: this.parentObj.dataSource instanceof DataManager ? this.parentObj.dataSource : new DataManager(this.parentObj.dataSource),\n      query: new Query().select(args.column.field),\n      enabled: isEditable(args.column, args.requestType, args.element),\n      fields: {\n        value: args.column.field\n      },\n      value: getObject(args.column.field, args.rowData),\n      // enableRtl: this.parentObject.enableRtl,\n      actionComplete: this.selectedValues.bind(this),\n      placeholder: isInlineEdit ? '' : args.column.headerText,\n      floatLabelType: isInlineEdit ? 'Never' : 'Always'\n    }, args.column.edit.params));\n\n    if (isBlazor()) {\n      this.object.locale = this.parentObj.locale;\n    }\n\n    this.object.appendTo(args.element);\n    /* tslint:disable-next-line:no-any */\n\n    args.element.setAttribute('name', getComplexFieldID(args.column.field));\n  };\n\n  AutoCompleteEditCell.prototype.read = function (element) {\n    return element.ej2_instances[0].value;\n  };\n\n  AutoCompleteEditCell.prototype.selectedValues = function (valObj) {\n    valObj.result = DataUtil.distinct(valObj.result, this.object.fields.value, true);\n\n    if (this.column.dataSource) {\n      this.column.dataSource.dataSource.json = valObj.result;\n    }\n  };\n\n  AutoCompleteEditCell.prototype.destroy = function () {\n    if (this.object) {\n      this.object.destroy();\n    }\n  };\n\n  return AutoCompleteEditCell;\n}();\n\nexport { AutoCompleteEditCell };","map":null,"metadata":{},"sourceType":"module"}