{"ast":null,"code":"/**\n * PdfTemplate.ts class for EJ2-PDF\n */\nimport { PdfStream } from './../../primitives/pdf-stream';\nimport { DictionaryProperties } from './../../input-output/pdf-dictionary-properties';\nimport { PdfArray } from './../../primitives/pdf-array';\nimport { PdfGraphics } from './../pdf-graphics';\nimport { PdfResources } from './../pdf-resources';\nimport { PdfName } from './../../primitives/pdf-name';\nimport { PointF, SizeF, RectangleF } from './../../drawing/pdf-drawing';\nimport { GetResourceEventHandler } from './../pdf-graphics';\n/**\n * Represents `Pdf Template` object.\n * @private\n */\n\nvar PdfTemplate =\n/** @class */\nfunction () {\n  function PdfTemplate(arg1, arg2) {\n    /**\n     * Initialize an instance for `DictionaryProperties` class.\n     * @private\n     * @hidden\n     */\n    this.dictionaryProperties = new DictionaryProperties();\n    /**\n     * Checks whether the transformation 'is performed'.\n     * @default true\n     * @private\n     */\n\n    this.writeTransformation = true;\n\n    if (typeof arg1 === 'undefined') {//\n    } else if (arg1 instanceof SizeF && typeof arg2 === 'undefined') {\n      this.content = new PdfStream();\n      var tempSize = new SizeF(arg1.width, arg1.height);\n      this.setSize(tempSize);\n      this.initialize();\n    } else {\n      this.content = new PdfStream();\n      this.setSize(new SizeF(arg1, arg2));\n      this.initialize();\n    }\n  }\n\n  Object.defineProperty(PdfTemplate.prototype, \"size\", {\n    //Properties\n\n    /**\n     * Gets the size of the 'PdfTemplate'.\n     */\n    get: function () {\n      return this.templateSize;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTemplate.prototype, \"width\", {\n    /**\n     * Gets the width of the 'PdfTemplate'.\n     */\n    get: function () {\n      return this.size.width;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTemplate.prototype, \"height\", {\n    /**\n     * Gets the height of the 'PdfTemplate'.\n     */\n    get: function () {\n      return this.size.height;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTemplate.prototype, \"graphics\", {\n    /**\n     * Gets the `graphics` of the 'PdfTemplate'.\n     */\n    get: function () {\n      if (this.pdfGraphics == null || typeof this.pdfGraphics === 'undefined') {\n        var gr = new GetResourceEventHandler(this);\n        var g = new PdfGraphics(this.size, gr, this.content);\n        this.pdfGraphics = g; // if(this.writeTransformation) {\n        // Transform co-ordinates to Top/Left.\n\n        this.pdfGraphics.initializeCoordinates(); // }\n      }\n\n      return this.pdfGraphics;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Gets the resources and modifies the template dictionary.\n   * @private\n   */\n\n  PdfTemplate.prototype.getResources = function () {\n    if (this.resources == null) {\n      this.resources = new PdfResources();\n      this.content.items.setValue(this.dictionaryProperties.resources, this.resources);\n    }\n\n    return this.resources;\n  }; // Public methods\n\n  /**\n   * `Initialize` the type and subtype of the template.\n   * @private\n   */\n\n\n  PdfTemplate.prototype.initialize = function () {\n    this.addType();\n    this.addSubType();\n  };\n  /**\n   * `Adds type key`.\n   * @private\n   */\n\n\n  PdfTemplate.prototype.addType = function () {\n    var value = new PdfName(this.dictionaryProperties.xObject);\n    this.content.items.setValue(this.dictionaryProperties.type, value);\n  };\n  /**\n   * `Adds SubType key`.\n   * @private\n   */\n\n\n  PdfTemplate.prototype.addSubType = function () {\n    var value = new PdfName(this.dictionaryProperties.form);\n    this.content.items.setValue(this.dictionaryProperties.subtype, value);\n  };\n\n  PdfTemplate.prototype.reset = function (size) {\n    if (typeof size === 'undefined') {\n      if (this.resources != null) {\n        this.resources = null;\n        this.content.remove(this.dictionaryProperties.resources);\n      }\n\n      if (this.graphics != null) {\n        this.graphics.reset(this.size);\n      }\n    } else {\n      this.setSize(size);\n      this.reset();\n    }\n  };\n  /**\n   * `Set the size` of the 'PdfTemplate'.\n   * @private\n   */\n\n\n  PdfTemplate.prototype.setSize = function (size) {\n    var rect = new RectangleF(new PointF(0, 0), size);\n    var val = PdfArray.fromRectangle(rect);\n    this.content.items.setValue(this.dictionaryProperties.bBox, val);\n    this.templateSize = size;\n  };\n\n  Object.defineProperty(PdfTemplate.prototype, \"element\", {\n    // /**\n    //  * Returns the value of current graphics.\n    //  * @private\n    //  */\n    // public GetGraphics(g : PdfGraphics) : PdfGraphics {\n    //     if (this.graphics == null || typeof this.graphics === 'undefined') {\n    //         this.graphics = g;\n    //         this.graphics.Size = this.Size;\n    //         this.graphics.StreamWriter = new PdfStreamWriter(this.content)\n    //         this.graphics.Initialize();\n    //         if(this.writeTransformation) {\n    //             this.graphics.InitializeCoordinates();\n    //         }\n    //     }\n    //     return this.graphics;\n    // }\n    // IPdfWrapper Members\n\n    /**\n     * Gets the `content stream` of 'PdfTemplate' class.\n     * @private\n     */\n    get: function () {\n      return this.content;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfTemplate;\n}();\n\nexport { PdfTemplate };","map":null,"metadata":{},"sourceType":"module"}