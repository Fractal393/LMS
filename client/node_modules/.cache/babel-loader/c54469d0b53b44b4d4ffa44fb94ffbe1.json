{"ast":null,"code":"/**\n * Resize library\n */\nimport { isNullOrUndefined as isNOU, createElement, EventHandler, detach, Browser } from '@syncfusion/ej2-base';\nvar elementClass = ['north-west', 'north', 'north-east', 'west', 'east', 'south-west', 'south', 'south-east'];\nvar targetElement;\nvar selectedHandler;\nvar originalWidth = 0;\nvar originalHeight = 0;\nvar originalX = 0;\nvar originalY = 0;\nvar originalMouseX = 0;\nvar originalMouseY = 0;\nvar RESIZE_HANDLER = 'e-resize-handle';\nvar FOCUSED_HANDLER = 'e-focused-handle';\nvar RESTRICT_LEFT = ['e-restrict-left'];\nvar RESIZE_WITHIN_VIEWPORT = 'e-resize-viewport';\nvar minHeight;\nvar maxHeight;\nvar minWidth;\nvar maxWidth;\nvar containerElement;\nvar resizeStart = null;\nvar resize = null;\nvar resizeEnd = null;\nvar resizeWestWidth;\nvar setLeft = true;\nvar previousWidth = 0;\nvar setWidth = true; // tslint:disable-next-line\n\nvar proxy;\nexport function createResize(args) {\n  resizeStart = args.resizeBegin;\n  resize = args.resizing;\n  resizeEnd = args.resizeComplete;\n  targetElement = getDOMElement(args.element);\n  containerElement = getDOMElement(args.boundary);\n  var directions = args.direction.split(' ');\n\n  for (var i = 0; i < directions.length; i++) {\n    var resizeHandler = createElement('div', {\n      className: 'e-icons ' + RESIZE_HANDLER + ' ' + 'e-' + directions[i]\n    });\n    targetElement.appendChild(resizeHandler);\n  }\n\n  minHeight = args.minHeight;\n  minWidth = args.minWidth;\n  maxWidth = args.maxWidth;\n  maxHeight = args.maxHeight;\n\n  if (args.proxy && args.proxy.element && args.proxy.element.classList.contains('e-dialog')) {\n    wireEvents(args.proxy);\n  } else {\n    wireEvents();\n  }\n}\n\nfunction getDOMElement(element) {\n  var domElement;\n\n  if (!isNOU(element)) {\n    if (typeof element === 'string') {\n      domElement = document.querySelector(element);\n    } else {\n      domElement = element;\n    }\n  }\n\n  return domElement;\n} // tslint:disable-next-line\n\n\nfunction wireEvents(args) {\n  if (isNOU(args)) {\n    args = this;\n  }\n\n  var resizers = targetElement.querySelectorAll('.' + RESIZE_HANDLER);\n\n  for (var i = 0; i < resizers.length; i++) {\n    selectedHandler = resizers[i];\n    EventHandler.add(selectedHandler, 'mousedown', onMouseDown, args);\n    var eventName = Browser.info.name === 'msie' ? 'pointerdown' : 'touchstart';\n    EventHandler.add(selectedHandler, eventName, onTouchStart, args);\n  }\n}\n/* istanbul ignore next */\n\n\nfunction getEventType(e) {\n  return e.indexOf('mouse') > -1 ? 'mouse' : 'touch';\n}\n/* istanbul ignore next */\n\n\nfunction onMouseDown(e) {\n  e.preventDefault();\n  targetElement = e.target.parentElement;\n  calculateValues();\n  originalMouseX = e.pageX;\n  originalMouseY = e.pageY;\n  e.target.classList.add(FOCUSED_HANDLER);\n\n  if (!isNOU(resizeStart)) {\n    proxy = this;\n\n    if (resizeStart(e, proxy) === true) {\n      return;\n    }\n  }\n\n  var target = isNOU(containerElement) ? document : containerElement;\n  EventHandler.add(target, 'mousemove', onMouseMove, this);\n  EventHandler.add(document, 'mouseup', onMouseUp, this);\n\n  for (var i = 0; i < RESTRICT_LEFT.length; i++) {\n    if (targetElement.classList.contains(RESTRICT_LEFT[i])) {\n      setLeft = false;\n    } else {\n      setLeft = true;\n    }\n  }\n}\n/* istanbul ignore next */\n\n\nfunction onMouseUp(e) {\n  var touchMoveEvent = Browser.info.name === 'msie' ? 'pointermove' : 'touchmove';\n  var touchEndEvent = Browser.info.name === 'msie' ? 'pointerup' : 'touchend';\n  var target = isNOU(containerElement) ? document : containerElement;\n  EventHandler.remove(target, 'mousemove', onMouseMove);\n  EventHandler.remove(target, touchMoveEvent, onMouseMove);\n  var eventName = Browser.info.name === 'msie' ? 'pointerdown' : 'touchstart';\n  EventHandler.remove(target, eventName, onMouseMove);\n\n  if (!isNOU(document.body.querySelector('.' + FOCUSED_HANDLER))) {\n    document.body.querySelector('.' + FOCUSED_HANDLER).classList.remove(FOCUSED_HANDLER);\n  }\n\n  if (!isNOU(resizeEnd)) {\n    proxy = this;\n    resizeEnd(e, proxy);\n  }\n\n  EventHandler.remove(document, 'mouseup', onMouseUp);\n  EventHandler.remove(document, touchEndEvent, onMouseUp);\n}\n/* istanbul ignore next */\n\n\nfunction calculateValues() {\n  originalWidth = parseFloat(getComputedStyle(targetElement, null).getPropertyValue('width').replace('px', ''));\n  originalHeight = parseFloat(getComputedStyle(targetElement, null).getPropertyValue('height').replace('px', ''));\n  originalX = targetElement.getBoundingClientRect().left;\n  originalY = targetElement.getBoundingClientRect().top;\n}\n/* istanbul ignore next */\n\n\nfunction onTouchStart(e) {\n  targetElement = e.target.parentElement;\n  calculateValues();\n  var coordinates = e.touches ? e.changedTouches[0] : e;\n  originalMouseX = coordinates.pageX;\n  originalMouseY = coordinates.pageY;\n\n  if (!isNOU(resizeStart)) {\n    proxy = this;\n\n    if (resizeStart(e, proxy) === true) {\n      return;\n    }\n  }\n\n  var touchMoveEvent = Browser.info.name === 'msie' ? 'pointermove' : 'touchmove';\n  var touchEndEvent = Browser.info.name === 'msie' ? 'pointerup' : 'touchend';\n  var target = isNOU(containerElement) ? document : containerElement;\n  EventHandler.add(target, touchMoveEvent, onMouseMove, this);\n  EventHandler.add(document, touchEndEvent, onMouseUp);\n}\n/* istanbul ignore next */\n\n\nfunction onMouseMove(e) {\n  if (e.target.classList.contains(RESIZE_HANDLER) && e.target.classList.contains(FOCUSED_HANDLER)) {\n    selectedHandler = e.target;\n  } else if (!isNOU(document.body.querySelector('.' + FOCUSED_HANDLER))) {\n    selectedHandler = document.body.querySelector('.' + FOCUSED_HANDLER);\n  }\n\n  if (!isNOU(selectedHandler)) {\n    var resizeTowards = '';\n\n    for (var i = 0; i < elementClass.length; i++) {\n      if (selectedHandler.classList.contains('e-' + elementClass[i])) {\n        resizeTowards = elementClass[i];\n      }\n    }\n\n    if (!isNOU(resize)) {\n      proxy = this;\n      resize(e, proxy);\n    }\n\n    switch (resizeTowards) {\n      case 'south':\n        resizeSouth(e);\n        break;\n\n      case 'north':\n        resizeNorth(e);\n        break;\n\n      case 'west':\n        resizeWest(e);\n        break;\n\n      case 'east':\n        resizeEast(e);\n        break;\n\n      case 'south-east':\n        resizeSouth(e);\n        resizeEast(e);\n        break;\n\n      case 'south-west':\n        resizeSouth(e);\n        resizeWest(e);\n        break;\n\n      case 'north-east':\n        resizeNorth(e);\n        resizeEast(e);\n        break;\n\n      case 'north-west':\n        resizeNorth(e);\n        resizeWest(e);\n        break;\n\n      default:\n        break;\n    }\n  }\n}\n/* istanbul ignore next */\n\n\nfunction getClientRectValues(element) {\n  return element.getBoundingClientRect();\n}\n/* istanbul ignore next */\n// tslint:disable-next-line\n\n\nfunction resizeSouth(e) {\n  var documentHeight = document.documentElement.clientHeight;\n  var calculateValue = false;\n  var containerRectValues;\n  var coordinates = e.touches ? e.changedTouches[0] : e;\n  var currentpageY = coordinates.pageY;\n  var targetRectValues = getClientRectValues(targetElement);\n\n  if (!isNOU(containerElement)) {\n    containerRectValues = getClientRectValues(containerElement);\n  }\n\n  if (!isNOU(containerElement)) {\n    calculateValue = true;\n  } else if (isNOU(containerElement) && (documentHeight - currentpageY >= 0 || targetRectValues.top < 0)) {\n    calculateValue = true;\n  }\n\n  var calculatedHeight = originalHeight + (currentpageY - originalMouseY);\n  calculatedHeight = calculatedHeight > minHeight ? calculatedHeight : minHeight;\n  var containerTop = 0;\n\n  if (!isNOU(containerElement)) {\n    containerTop = containerRectValues.top;\n  }\n\n  var borderValue = isNOU(containerElement) ? 0 : containerElement.offsetHeight - containerElement.clientHeight;\n  var topWithoutborder = targetRectValues.top - containerTop - borderValue / 2;\n  topWithoutborder = topWithoutborder < 0 ? 0 : topWithoutborder;\n\n  if (targetRectValues.top > 0 && topWithoutborder + calculatedHeight > maxHeight) {\n    calculateValue = false;\n\n    if (targetElement.classList.contains(RESIZE_WITHIN_VIEWPORT)) {\n      return;\n    }\n\n    targetElement.style.height = maxHeight - parseInt(topWithoutborder.toString(), 10) + 'px';\n    return;\n  }\n\n  var targetTop = 0;\n\n  if (calculateValue) {\n    if (targetRectValues.top < 0 && documentHeight + (targetRectValues.height + targetRectValues.top) > 0) {\n      targetTop = targetRectValues.top;\n\n      if (calculatedHeight + targetTop <= 30) {\n        calculatedHeight = targetRectValues.height - (targetRectValues.height + targetRectValues.top) + 30;\n      }\n    }\n\n    if (calculatedHeight + targetRectValues.top >= maxHeight) {\n      targetElement.style.height = targetRectValues.height + (documentHeight - (targetRectValues.height + targetRectValues.top)) + 'px';\n    }\n\n    var calculatedTop = isNOU(containerElement) ? targetTop : topWithoutborder;\n\n    if (calculatedHeight >= minHeight && calculatedHeight + calculatedTop <= maxHeight) {\n      targetElement.style.height = calculatedHeight + 'px';\n    }\n  }\n}\n/* istanbul ignore next */\n// tslint:disable-next-line\n\n\nfunction resizeNorth(e) {\n  var calculateValue = false;\n  var boundaryRectValues;\n  var pageY = getEventType(e.type) === 'mouse' ? e.pageY : e.touches[0].pageY;\n  var targetRectValues = getClientRectValues(targetElement);\n\n  if (!isNOU(containerElement)) {\n    boundaryRectValues = getClientRectValues(containerElement);\n  }\n\n  if (!isNOU(containerElement) && targetRectValues.top - boundaryRectValues.top > 0) {\n    calculateValue = true;\n  } else if (isNOU(containerElement) && pageY > 0) {\n    calculateValue = true;\n  }\n\n  var currentHeight = originalHeight - (pageY - originalMouseY);\n\n  if (getClientRectValues(targetElement).bottom + currentHeight > maxHeight) {\n    calculateValue = false;\n    targetElement.style.height = maxHeight - getClientRectValues(targetElement).bottom + 'px';\n  }\n\n  if (calculateValue) {\n    if (currentHeight >= minHeight && currentHeight <= maxHeight) {\n      var containerTop = 0;\n\n      if (!isNOU(containerElement)) {\n        containerTop = boundaryRectValues.top;\n      }\n\n      var top_1 = originalY - containerTop + (pageY - originalMouseY);\n      top_1 = top_1 > 0 ? top_1 : 1;\n      targetElement.style.height = currentHeight + 'px';\n      targetElement.style.top = top_1 + 'px';\n    }\n  }\n}\n/* istanbul ignore next */\n// tslint:disable-next-line\n\n\nfunction resizeWest(e) {\n  var documentWidth = document.documentElement.clientWidth;\n  var calculateValue = false;\n  var rectValues;\n\n  if (!isNOU(containerElement)) {\n    rectValues = getClientRectValues(containerElement);\n  }\n\n  var pageX = getEventType(e.type) === 'mouse' ? e.pageX : e.touches[0].pageX;\n  var targetRectValues = getClientRectValues(targetElement);\n  var borderValue = isNOU(containerElement) ? 0 : containerElement.offsetWidth - containerElement.clientWidth;\n  var left = isNOU(containerElement) ? 0 : rectValues.left;\n  var containerWidth = isNOU(containerElement) ? 0 : rectValues.width;\n\n  if (isNOU(resizeWestWidth)) {\n    if (!isNOU(containerElement)) {\n      resizeWestWidth = targetRectValues.left - left - borderValue / 2 + targetRectValues.width;\n      resizeWestWidth = resizeWestWidth + (containerWidth - borderValue - resizeWestWidth);\n    } else {\n      resizeWestWidth = documentWidth;\n    }\n  }\n\n  if (!isNOU(containerElement) && targetRectValues.left - rectValues.left + targetRectValues.width + (rectValues.right - targetRectValues.right) - borderValue <= maxWidth) {\n    calculateValue = true;\n  } else if (isNOU(containerElement) && pageX >= 0) {\n    calculateValue = true;\n  }\n\n  var calculatedWidth = originalWidth - (pageX - originalMouseX);\n\n  if (setLeft) {\n    calculatedWidth = calculatedWidth > resizeWestWidth ? resizeWestWidth : calculatedWidth;\n  }\n\n  if (calculateValue) {\n    if (calculatedWidth >= minWidth && calculatedWidth <= maxWidth) {\n      var containerLeft = 0;\n\n      if (!isNOU(containerElement)) {\n        containerLeft = rectValues.left;\n      }\n\n      var left_1 = originalX - containerLeft + (pageX - originalMouseX);\n      left_1 = left_1 > 0 ? left_1 : 1;\n\n      if (calculatedWidth !== previousWidth && setWidth) {\n        targetElement.style.width = calculatedWidth + 'px';\n      }\n\n      if (setLeft) {\n        targetElement.style.left = left_1 + 'px';\n\n        if (left_1 === 1) {\n          setWidth = false;\n        } else {\n          setWidth = true;\n        }\n      }\n    }\n  }\n\n  previousWidth = calculatedWidth;\n}\n/* istanbul ignore next */\n// tslint:disable-next-line\n\n\nfunction resizeEast(e) {\n  var documentWidth = document.documentElement.clientWidth;\n  var calculateValue = false;\n  var containerRectValues;\n\n  if (!isNOU(containerElement)) {\n    containerRectValues = getClientRectValues(containerElement);\n  }\n\n  var coordinates = e.touches ? e.changedTouches[0] : e;\n  var pageX = coordinates.pageX;\n  var targetRectValues = getClientRectValues(targetElement);\n\n  if (!isNOU(containerElement) && (targetRectValues.left - containerRectValues.left + targetRectValues.width < maxWidth || targetRectValues.right - containerRectValues.left > targetRectValues.width)) {\n    calculateValue = true;\n  } else if (isNOU(containerElement) && documentWidth - pageX > 0) {\n    calculateValue = true;\n  }\n\n  var calculatedWidth = originalWidth + (pageX - originalMouseX);\n  var containerLeft = 0;\n\n  if (!isNOU(containerElement)) {\n    containerLeft = containerRectValues.left;\n  }\n\n  if (targetRectValues.left - containerLeft + calculatedWidth > maxWidth) {\n    calculateValue = false;\n\n    if (targetElement.classList.contains(RESIZE_WITHIN_VIEWPORT)) {\n      return;\n    }\n\n    targetElement.style.width = maxWidth - (targetRectValues.left - containerLeft) + 'px';\n  }\n\n  if (calculateValue) {\n    if (calculatedWidth >= minWidth && calculatedWidth <= maxWidth) {\n      targetElement.style.width = calculatedWidth + 'px';\n    }\n  }\n}\n/* istanbul ignore next */\n\n\nexport function setMinHeight(minimumHeight) {\n  minHeight = minimumHeight;\n}\nexport function removeResize() {\n  var handlers = targetElement.querySelectorAll('.' + RESIZE_HANDLER);\n\n  for (var i = 0; i < handlers.length; i++) {\n    detach(handlers[i]);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}