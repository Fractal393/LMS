{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.sorting.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _events_engine = require(\"../../events/core/events_engine\");\n\nvar _events_engine2 = _interopRequireDefault(_events_engine);\n\nvar _click = require(\"../../events/click\");\n\nvar _click2 = _interopRequireDefault(_click);\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _uiGrid_core = require(\"../grid_core/ui.grid_core.sorting_mixin\");\n\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\n\nvar _message = require(\"../../localization/message\");\n\nvar _message2 = _interopRequireDefault(_message);\n\nvar _utils = require(\"../../events/utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar COLUMN_HEADERS_VIEW_NAMESPACE = \"dxDataGridColumnHeadersView\";\nvar ColumnHeadersViewSortingExtender = (0, _extend.extend)({}, _uiGrid_core2.default, {\n  _createRow: function (row) {\n    var _this = this;\n\n    var $row = this.callBase(row);\n\n    if (\"header\" === row.rowType) {\n      _events_engine2.default.on($row, (0, _utils.addNamespace)(_click2.default.name, COLUMN_HEADERS_VIEW_NAMESPACE), \"td\", this.createAction(function (e) {\n        _this._processHeaderAction(e.event, $row);\n      }));\n    }\n\n    return $row;\n  },\n  _processHeaderAction: function (event, $row) {\n    if ((0, _renderer2.default)(event.currentTarget).parent().get(0) !== $row.get(0)) {\n      return;\n    }\n\n    var that = this;\n    var keyName = null;\n    var $cellElementFromEvent = (0, _renderer2.default)(event.currentTarget);\n    var rowIndex = $cellElementFromEvent.parent().index();\n    var columnIndex = -1;\n    [].slice.call(that.getCellElements(rowIndex)).some(function ($cellElement, index) {\n      if ($cellElement === $cellElementFromEvent.get(0)) {\n        columnIndex = index;\n        return true;\n      }\n    });\n\n    var visibleColumns = that._columnsController.getVisibleColumns(rowIndex);\n\n    var column = visibleColumns[columnIndex];\n    var editingController = that.getController(\"editing\");\n    var editingMode = that.option(\"editing.mode\");\n    var isCellEditing = editingController && editingController.isEditing() && (\"batch\" === editingMode || \"cell\" === editingMode);\n\n    if (isCellEditing || !that._isSortableElement((0, _renderer2.default)(event.target))) {\n      return;\n    }\n\n    if (column && !(0, _type.isDefined)(column.groupIndex) && !column.command) {\n      if (event.shiftKey) {\n        keyName = \"shift\";\n      } else {\n        if (event.ctrlKey) {\n          keyName = \"ctrl\";\n        }\n      }\n\n      setTimeout(function () {\n        that._columnsController.changeSortOrder(column.index, keyName);\n      });\n    }\n  },\n  _renderCellContent: function ($cell, options) {\n    var that = this;\n    var column = options.column;\n\n    if (!column.command && \"header\" === options.rowType) {\n      that._applyColumnState({\n        name: \"sort\",\n        rootElement: $cell,\n        column: column,\n        showColumnLines: that.option(\"showColumnLines\")\n      });\n    }\n\n    that.callBase($cell, options);\n  },\n  _columnOptionChanged: function (e) {\n    var changeTypes = e.changeTypes;\n\n    if (1 === changeTypes.length && changeTypes.sorting) {\n      this._updateIndicators(\"sort\");\n\n      return;\n    }\n\n    this.callBase(e);\n  },\n  optionChanged: function (args) {\n    var that = this;\n\n    switch (args.name) {\n      case \"sorting\":\n        that._invalidate();\n\n        args.handled = true;\n        break;\n\n      default:\n        that.callBase(args);\n    }\n  }\n});\nvar HeaderPanelSortingExtender = (0, _extend.extend)({}, _uiGrid_core2.default, {\n  _createGroupPanelItem: function ($rootElement, groupColumn) {\n    var that = this;\n    var $item = that.callBase.apply(that, arguments);\n\n    _events_engine2.default.on($item, (0, _utils.addNamespace)(_click2.default.name, \"dxDataGridHeaderPanel\"), that.createAction(function () {\n      that._processGroupItemAction(groupColumn.index);\n    }));\n\n    that._applyColumnState({\n      name: \"sort\",\n      rootElement: $item,\n      column: {\n        alignment: that.option(\"rtlEnabled\") ? \"right\" : \"left\",\n        allowSorting: groupColumn.allowSorting,\n        sortOrder: \"desc\" === groupColumn.sortOrder ? \"desc\" : \"asc\"\n      },\n      showColumnLines: true\n    });\n\n    return $item;\n  },\n  _processGroupItemAction: function (groupColumnIndex) {\n    var _this2 = this;\n\n    setTimeout(function () {\n      return _this2.getController(\"columns\").changeSortOrder(groupColumnIndex);\n    });\n  },\n  optionChanged: function (args) {\n    var that = this;\n\n    switch (args.name) {\n      case \"sorting\":\n        that._invalidate();\n\n        args.handled = true;\n        break;\n\n      default:\n        that.callBase(args);\n    }\n  }\n});\nmodule.exports = {\n  defaultOptions: function () {\n    return {\n      sorting: {\n        mode: \"single\",\n        ascendingText: _message2.default.format(\"dxDataGrid-sortingAscendingText\"),\n        descendingText: _message2.default.format(\"dxDataGrid-sortingDescendingText\"),\n        clearText: _message2.default.format(\"dxDataGrid-sortingClearText\"),\n        showSortIndexes: true\n      }\n    };\n  },\n  extenders: {\n    views: {\n      columnHeadersView: ColumnHeadersViewSortingExtender,\n      headerPanel: HeaderPanelSortingExtender\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}