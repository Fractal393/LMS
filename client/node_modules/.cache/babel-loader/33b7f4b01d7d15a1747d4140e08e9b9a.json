{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { selectAll, select, createElement, Base, detach } from '@syncfusion/ej2-base';\nimport { extend, isNullOrUndefined, EventHandler } from '@syncfusion/ej2-base';\nimport { Property, NotifyPropertyChanges, Event, onIntlChange } from '@syncfusion/ej2-base';\nimport { L10n } from '@syncfusion/ej2-base';\n/**\n * global declarations\n */\n// tslint:disable-next-line:no-any\n\nexport var regex = {\n  EMAIL: new RegExp('^[A-Za-z0-9._%+-]{1,}@[A-Za-z0-9._%+-]{1,}([.]{1}[a-zA-Z0-9]{2,}' + '|[.]{1}[a-zA-Z0-9]{2,4}[.]{1}[a-zA-Z0-9]{2,4})$'),\n  URL: /^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$/m,\n  DATE_ISO: new RegExp('^([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$'),\n  DIGITS: new RegExp('^[0-9]*$'),\n  PHONE: new RegExp('^[+]?[0-9]{9,13}$'),\n  CREDITCARD: new RegExp('^\\\\d{13,16}$')\n};\n/**\n * ErrorOption values\n * @private\n */\n\nexport var ErrorOption;\n\n(function (ErrorOption) {\n  /**\n   * Defines the error message.\n   */\n  ErrorOption[ErrorOption[\"Message\"] = 0] = \"Message\";\n  /**\n   * Defines the error element type.\n   */\n\n  ErrorOption[ErrorOption[\"Label\"] = 1] = \"Label\";\n})(ErrorOption || (ErrorOption = {}));\n/**\n * FormValidator class enables you to validate the form fields based on your defined rules\n * ```html\n * <form id='formId'>\n *  <input type='text' name='Name' />\n *  <input type='text' name='Age' />\n * </form>\n * <script>\n *   let formObject = new FormValidator('#formId', {\n *      rules: { Name: { required: true }, Age: { range: [18, 30] } };\n *   });\n *   formObject.validate();\n * </script>\n * ```\n */\n\n\nvar FormValidator =\n/** @class */\nfunction (_super) {\n  __extends(FormValidator, _super); // Initializes the FormValidator \n\n\n  function FormValidator(element, options) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.validated = [];\n    _this.errorRules = [];\n    _this.allowSubmit = false;\n    _this.required = 'required';\n    _this.infoElement = null;\n    _this.inputElement = null;\n    _this.selectQuery = 'input:not([type=reset]):not([type=button]), select, textarea'; // tslint:disable-next-line:no-any\n\n    _this.localyMessage = {};\n    /**\n     * Specifies the default messages for validation rules.\n     * @default { List of validation message }\n     */\n\n    _this.defaultMessages = {\n      required: 'This field is required.',\n      email: 'Please enter a valid email address.',\n      url: 'Please enter a valid URL.',\n      date: 'Please enter a valid date.',\n      dateIso: 'Please enter a valid date ( ISO ).',\n      creditcard: 'Please enter valid card number',\n      number: 'Please enter a valid number.',\n      digits: 'Please enter only digits.',\n      maxLength: 'Please enter no more than {0} characters.',\n      minLength: 'Please enter at least {0} characters.',\n      rangeLength: 'Please enter a value between {0} and {1} characters long.',\n      range: 'Please enter a value between {0} and {1}.',\n      max: 'Please enter a value less than or equal to {0}.',\n      min: 'Please enter a value greater than or equal to {0}.',\n      regex: 'Please enter a correct value.',\n      tel: 'Please enter a valid phone number.',\n      pattern: 'Please enter a correct pattern value.',\n      equalTo: 'Please enter the valid match text'\n    };\n\n    if (typeof _this.rules === 'undefined') {\n      _this.rules = {};\n    }\n\n    _this.l10n = new L10n('formValidator', _this.defaultMessages, _this.locale);\n\n    if (_this.locale) {\n      _this.localeFunc();\n    }\n\n    onIntlChange.on('notifyExternalChange', _this.afterLocalization, _this);\n    element = typeof element === 'string' ? select(element, document) : element; // Set novalidate to prevent default HTML5 form validation\n\n    if (_this.element != null) {\n      _this.element.setAttribute('novalidate', '');\n\n      _this.inputElements = selectAll(_this.selectQuery, _this.element);\n\n      _this.createHTML5Rules();\n\n      _this.wireEvents();\n    } else {\n      return undefined;\n    }\n\n    return _this;\n  }\n\n  FormValidator_1 = FormValidator; // tslint:enable\n\n  /**\n   * Add validation rules to the corresponding input element based on `name` attribute.\n   * @param {string} name `name` of form field.\n   * @param {Object} rules Validation rules for the corresponding element.\n   * @return {void}\n   */\n\n  FormValidator.prototype.addRules = function (name, rules) {\n    if (name) {\n      if (this.rules.hasOwnProperty(name)) {\n        extend(this.rules[name], rules, {});\n      } else {\n        this.rules[name] = rules;\n      }\n    }\n  };\n  /**\n   * Remove validation to the corresponding field based on name attribute.\n   * When no parameter is passed, remove all the validations in the form.\n   * @param {string} name Input name attribute value.\n   * @param {string[]} rules List of validation rules need to be remove from the corresponding element.\n   * @return {void}\n   */\n\n\n  FormValidator.prototype.removeRules = function (name, rules) {\n    if (!name && !rules) {\n      this.rules = {};\n    } else if (this.rules[name] && !rules) {\n      delete this.rules[name];\n    } else if (!isNullOrUndefined(this.rules[name] && rules)) {\n      for (var i = 0; i < rules.length; i++) {\n        delete this.rules[name][rules[i]];\n      }\n    } else {\n      return;\n    }\n  };\n  /**\n   * Validate the current form values using defined rules.\n   * Returns `true` when the form is valid otherwise `false`\n   * @param {string} selected - Optional parameter to validate specified element.\n   * @return {boolean}\n   */\n\n\n  FormValidator.prototype.validate = function (selected) {\n    var rules = Object.keys(this.rules);\n\n    if (selected && rules.length) {\n      this.validateRules(selected); //filter the selected element it don't have any valid input element\n\n      return rules.indexOf(selected) !== -1 && this.errorRules.filter(function (data) {\n        return data.name === selected;\n      }).length === 0;\n    } else {\n      this.errorRules = [];\n\n      for (var _i = 0, rules_1 = rules; _i < rules_1.length; _i++) {\n        var name_1 = rules_1[_i];\n        this.validateRules(name_1);\n      }\n\n      return this.errorRules.length === 0;\n    }\n  };\n  /**\n   * Reset the value of all the fields in form.\n   * @return {void}\n   */\n\n\n  FormValidator.prototype.reset = function () {\n    this.element.reset();\n    this.clearForm();\n  };\n  /**\n   * Get input element by name.\n   * @param {string} name - Input element name attribute value.\n   * @return {HTMLInputElement}\n   */\n\n\n  FormValidator.prototype.getInputElement = function (name) {\n    this.inputElement = select('[name=\"' + name + '\"]', this.element);\n    return this.inputElement;\n  };\n  /**\n   * Destroy the form validator object and error elements.\n   * @return {void}\n   */\n\n\n  FormValidator.prototype.destroy = function () {\n    this.reset();\n    this.unwireEvents();\n    this.rules = {};\n    var elements = selectAll('.' + this.errorClass + ', .' + this.validClass, this.element);\n\n    for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n      var element = elements_1[_i];\n      detach(element);\n    }\n\n    _super.prototype.destroy.call(this);\n\n    onIntlChange.off('notifyExternalChange', this.afterLocalization);\n  };\n  /**\n   * @private\n   */\n\n\n  FormValidator.prototype.onPropertyChanged = function (newProp, oldProp) {\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'locale':\n          this.localeFunc();\n          break;\n      }\n    }\n  };\n\n  ;\n  /**\n   * @private\n   */\n\n  FormValidator.prototype.localeFunc = function () {\n    for (var _i = 0, _a = Object.keys(this.defaultMessages); _i < _a.length; _i++) {\n      var key = _a[_i];\n      this.l10n.setLocale(this.locale);\n      var value = this.l10n.getConstant(key);\n      this.localyMessage[key] = value;\n    }\n  };\n  /**\n   * @private\n   */\n\n\n  FormValidator.prototype.getModuleName = function () {\n    return 'formValidator';\n  };\n  /**\n   * @private\n   */\n  // tslint:disable-next-line:no-any\n\n\n  FormValidator.prototype.afterLocalization = function (args) {\n    this.locale = args.locale;\n    this.localeFunc();\n  };\n  /**\n   * Allows you to refresh the form validator base events to the elements inside the form.\n   * @return {void}\n   */\n\n\n  FormValidator.prototype.refresh = function () {\n    this.unwireEvents();\n    this.inputElements = selectAll(this.selectQuery, this.element);\n    this.wireEvents();\n  };\n\n  FormValidator.prototype.clearForm = function () {\n    this.errorRules = [];\n    this.validated = [];\n    var elements = selectAll(this.selectQuery, this.element);\n\n    for (var _i = 0, elements_2 = elements; _i < elements_2.length; _i++) {\n      var element = elements_2[_i];\n      var input = element;\n      input.removeAttribute('aria-invalid');\n      input.classList.remove(this.errorClass);\n\n      if (input.name.length > 0) {\n        this.getInputElement(input.name);\n        this.getErrorElement(input.name);\n        this.hideMessage(input.name);\n      }\n\n      input.classList.remove(this.validClass);\n    }\n  };\n\n  FormValidator.prototype.createHTML5Rules = function () {\n    var defRules = ['required', 'validateHidden', 'regex', 'rangeLength', 'maxLength', 'minLength', 'dateIso', 'digits', 'pattern', 'data-val-required', 'type', 'data-validation', 'min', 'max', 'range', 'equalTo', 'data-val-minlength-min', 'data-val-equalto-other', 'data-val-maxlength-max', 'data-val-range-min', 'data-val-regex-pattern', 'data-val-length-max', 'data-val-creditcard', 'data-val-phone'];\n    var acceptedTypes = ['hidden', 'email', 'url', 'date', 'number', 'tel'];\n\n    for (var _i = 0, _a = this.inputElements; _i < _a.length; _i++) {\n      var input = _a[_i]; // Default attribute rules \n\n      var allRule = {};\n\n      for (var _b = 0, defRules_1 = defRules; _b < defRules_1.length; _b++) {\n        var rule = defRules_1[_b];\n\n        if (input.getAttribute(rule) !== null) {\n          switch (rule) {\n            case 'required':\n              this.defRule(input, allRule, rule, input.required);\n              break;\n\n            case 'data-validation':\n              rule = input.getAttribute(rule);\n              this.defRule(input, allRule, rule, true);\n              break;\n\n            case 'type':\n              if (acceptedTypes.indexOf(input.type) !== -1) {\n                this.defRule(input, allRule, input.type, true);\n              }\n\n              break;\n\n            case 'rangeLength':\n            case 'range':\n              this.defRule(input, allRule, rule, JSON.parse(input.getAttribute(rule)));\n              break;\n\n            case 'equalTo':\n              var id = input.getAttribute(rule);\n              this.defRule(input, allRule, rule, id);\n              break;\n\n            default:\n              if (input.getAttribute('data-val') === 'true') {\n                this.annotationRule(input, allRule, rule, input.getAttribute(rule));\n              } else {\n                this.defRule(input, allRule, rule, input.getAttribute(rule));\n              }\n\n          }\n        }\n      } //adding pattern type validation\n\n\n      if (Object.keys(allRule).length !== 0) {\n        this.addRules(input.name, allRule);\n      }\n    }\n  };\n\n  FormValidator.prototype.annotationRule = function (input, ruleCon, ruleName, value) {\n    var annotationRule = ruleName.split('-');\n    var rulesList = ['required', 'creditcard', 'phone', 'maxlength', 'minlength', 'range', 'regex', 'equalto'];\n    var ruleFirstName = annotationRule[annotationRule.length - 1];\n    var ruleSecondName = annotationRule[annotationRule.length - 2];\n\n    if (rulesList.indexOf(ruleFirstName) !== -1) {\n      switch (ruleFirstName) {\n        case 'required':\n          this.defRule(input, ruleCon, 'required', value);\n          break;\n\n        case 'creditcard':\n          this.defRule(input, ruleCon, 'creditcard', value);\n          break;\n\n        case 'phone':\n          this.defRule(input, ruleCon, 'tel', value);\n          break;\n      }\n    } else if (rulesList.indexOf(ruleSecondName) !== -1) {\n      switch (ruleSecondName) {\n        case 'maxlength':\n          this.defRule(input, ruleCon, 'maxLength', value);\n          break;\n\n        case 'minlength':\n          this.defRule(input, ruleCon, 'minLength', value);\n          break;\n\n        case 'range':\n          var minvalue = input.getAttribute('data-val-range-min');\n          var maxvalue = input.getAttribute('data-val-range-max');\n          this.defRule(input, ruleCon, 'range', [minvalue, maxvalue]);\n          break;\n\n        case 'equalto':\n          var id = input.getAttribute(ruleName).split('.');\n          this.defRule(input, ruleCon, 'equalTo', id[id.length - 1]);\n          break;\n\n        case 'regex':\n          this.defRule(input, ruleCon, 'regex', value);\n          break;\n      }\n    }\n  };\n\n  FormValidator.prototype.defRule = function (input, ruleCon, ruleName, value) {\n    var message = input.getAttribute('data-' + ruleName + '-message');\n    var annotationMessage = input.getAttribute('data-val-' + ruleName);\n    var customMessage;\n\n    if (this.rules[input.name] && ruleName !== 'validateHidden' && ruleName !== 'hidden') {\n      this.getInputElement(input.name);\n      customMessage = this.getErrorMessage(this.rules[input.name][ruleName], ruleName);\n    }\n\n    if (message) {\n      value = [value, message];\n    } else if (annotationMessage) {\n      value = [value, annotationMessage];\n    } else if (customMessage) {\n      value = [value, customMessage];\n    }\n\n    ruleCon[ruleName] = value;\n  }; // Wire events to the form elements\n\n\n  FormValidator.prototype.wireEvents = function () {\n    for (var _i = 0, _a = this.inputElements; _i < _a.length; _i++) {\n      var input = _a[_i];\n\n      if (FormValidator_1.isCheckable(input)) {\n        EventHandler.add(input, 'click', this.clickHandler, this);\n      } else if (input.tagName === 'SELECT') {\n        EventHandler.add(input, 'change', this.changeHandler, this);\n      } else {\n        EventHandler.add(input, 'focusout', this.focusOutHandler, this);\n        EventHandler.add(input, 'keyup', this.keyUpHandler, this);\n      }\n    }\n\n    EventHandler.add(this.element, 'submit', this.submitHandler, this);\n    EventHandler.add(this.element, 'reset', this.resetHandler, this);\n  }; // UnWire events to the form elements\n\n\n  FormValidator.prototype.unwireEvents = function () {\n    for (var _i = 0, _a = this.inputElements; _i < _a.length; _i++) {\n      var input = _a[_i];\n      EventHandler.clearEvents(input);\n    }\n\n    EventHandler.remove(this.element, 'submit', this.submitHandler);\n    EventHandler.remove(this.element, 'reset', this.resetHandler);\n  }; // Handle input element focusout event\n\n\n  FormValidator.prototype.focusOutHandler = function (e) {\n    this.trigger('focusout', e); //FormValidator.triggerCallback(this.focusout, e);\n\n    var element = e.target;\n\n    if (this.rules[element.name]) {\n      if (this.rules[element.name][this.required] || element.value.length > 0) {\n        this.validate(element.name);\n      } else if (this.validated.indexOf(element.name) === -1) {\n        this.validated.push(element.name);\n      }\n    }\n  }; // Handle input element keyup event\n\n\n  FormValidator.prototype.keyUpHandler = function (e) {\n    this.trigger('keyup', e);\n    var element = e.target; // List of keys need to prevent while validation\n\n    var excludeKeys = [16, 17, 18, 20, 35, 36, 37, 38, 39, 40, 45, 144, 225];\n\n    if (e.which === 9 && (!this.rules[element.name] || this.rules[element.name] && !this.rules[element.name][this.required])) {\n      return;\n    }\n\n    if (this.validated.indexOf(element.name) !== -1 && this.rules[element.name] && excludeKeys.indexOf(e.which) === -1) {\n      this.validate(element.name);\n    }\n  }; // Handle input click event\n\n\n  FormValidator.prototype.clickHandler = function (e) {\n    this.trigger('click', e);\n    var element = e.target; // If element type is not submit allow validation\n\n    if (element.type !== 'submit') {\n      this.validate(element.name);\n    } else if (element.getAttribute('formnovalidate') !== null) {\n      // Prevent form validation, if submit button has formnovalidate attribute\n      this.allowSubmit = true;\n    }\n  }; // Handle input change event\n\n\n  FormValidator.prototype.changeHandler = function (e) {\n    this.trigger('change', e);\n    var element = e.target;\n    this.validate(element.name);\n  }; // Handle form submit event\n\n\n  FormValidator.prototype.submitHandler = function (e) {\n    this.trigger('submit', e); //FormValidator.triggerCallback(this.submit, e);\n    // Prevent form submit if validation failed\n\n    if (!this.allowSubmit && !this.validate()) {\n      e.preventDefault();\n    } else {\n      this.allowSubmit = false;\n    }\n  }; // Handle form reset\n\n\n  FormValidator.prototype.resetHandler = function () {\n    this.clearForm();\n  }; // Validate each rule based on input element name\n\n\n  FormValidator.prototype.validateRules = function (name) {\n    if (!this.rules[name]) {\n      return;\n    }\n\n    var rules = Object.keys(this.rules[name]);\n    var hiddenType = false;\n    var validateHiddenType = false;\n    var vhPos = rules.indexOf('validateHidden');\n    var hPos = rules.indexOf('hidden');\n    this.getInputElement(name);\n\n    if (hPos !== -1) {\n      hiddenType = true;\n    }\n\n    if (vhPos !== -1) {\n      validateHiddenType = true;\n    }\n\n    if (!hiddenType || hiddenType && validateHiddenType) {\n      if (vhPos !== -1) {\n        rules.splice(vhPos, 1);\n      }\n\n      if (hPos !== -1) {\n        rules.splice(hPos - 1, 1);\n      }\n\n      this.getErrorElement(name);\n\n      for (var _i = 0, rules_2 = rules; _i < rules_2.length; _i++) {\n        var rule = rules_2[_i];\n        var errorMessage = this.getErrorMessage(this.rules[name][rule], rule);\n        var errorRule = {\n          name: name,\n          message: errorMessage\n        };\n        var eventArgs = {\n          inputName: name,\n          element: this.inputElement,\n          message: errorMessage\n        };\n\n        if (!this.isValid(name, rule) && !this.inputElement.classList.contains(this.ignore)) {\n          this.removeErrorRules(name);\n          this.errorRules.push(errorRule); // Set aria attributes to invalid elements\n\n          this.inputElement.setAttribute('aria-invalid', 'true');\n          this.inputElement.setAttribute('aria-describedby', this.inputElement.id + '-info');\n          this.inputElement.classList.add(this.errorClass);\n          this.inputElement.classList.remove(this.validClass);\n\n          if (!this.infoElement) {\n            this.createErrorElement(name, errorRule.message, this.inputElement);\n          } else {\n            this.showMessage(errorRule);\n          }\n\n          eventArgs.errorElement = this.infoElement;\n          eventArgs.status = 'failure';\n          this.inputElement.classList.add(this.errorClass);\n          this.inputElement.classList.remove(this.validClass);\n          this.optionalValidationStatus(name, eventArgs);\n          this.trigger('validationComplete', eventArgs); // Set aria-required to required rule elements\n\n          if (rule === 'required') {\n            this.inputElement.setAttribute('aria-required', 'true');\n          }\n\n          break;\n        } else {\n          this.hideMessage(name);\n          eventArgs.status = 'success';\n          this.trigger('validationComplete', eventArgs);\n        }\n      }\n    } else {\n      return;\n    }\n  }; // Update the optional validation status\n\n\n  FormValidator.prototype.optionalValidationStatus = function (name, refer) {\n    if (!this.rules[name][this.required] && !this.inputElement.value.length && !isNullOrUndefined(this.infoElement)) {\n      this.infoElement.innerHTML = this.inputElement.value;\n      this.infoElement.setAttribute('aria-invalid', 'false');\n      refer.status = '';\n      this.hideMessage(name);\n    }\n  }; // Check the input element whether it's value satisfy the validation rule or not\n\n\n  FormValidator.prototype.isValid = function (name, rule) {\n    var params = this.rules[name][rule];\n    var param = params instanceof Array && typeof params[1] === 'string' ? params[0] : params;\n    var currentRule = this.rules[name][rule];\n    var args = {\n      value: this.inputElement.value,\n      param: param,\n      element: this.inputElement,\n      formElement: this.element\n    };\n    this.trigger('validationBegin', args);\n\n    if (currentRule && typeof currentRule[0] === 'function') {\n      var fn = currentRule[0];\n      return fn.call(this, {\n        element: this.inputElement,\n        value: this.inputElement.value\n      });\n    } else if (FormValidator_1.isCheckable(this.inputElement)) {\n      if (rule !== 'required') {\n        return true;\n      }\n\n      return selectAll('input[name=' + name + ']:checked', this.element).length > 0;\n    } else {\n      return FormValidator_1.checkValidator[rule](args);\n    }\n  }; // Return default error message or custom error message \n\n\n  FormValidator.prototype.getErrorMessage = function (ruleValue, rule) {\n    var message = this.inputElement.getAttribute('data-' + rule + '-message') ? this.inputElement.getAttribute('data-' + rule + '-message') : ruleValue instanceof Array && typeof ruleValue[1] === 'string' ? ruleValue[1] : Object.keys(this.localyMessage).length !== 0 ? this.localyMessage[rule] : this.defaultMessages[rule];\n    var formats = message.match(/{(\\d)}/g);\n\n    if (!isNullOrUndefined(formats)) {\n      for (var i = 0; i < formats.length; i++) {\n        var value = ruleValue instanceof Array ? ruleValue[i] : ruleValue;\n        message = message.replace(formats[i], value);\n      }\n    }\n\n    return message;\n  }; // Create error element based on name and error message\n\n\n  FormValidator.prototype.createErrorElement = function (name, message, input) {\n    var errorElement = createElement(this.errorElement, {\n      className: this.errorClass,\n      innerHTML: message,\n      attrs: {\n        for: name\n      }\n    }); // Create message design if errorOption is message\n\n    if (this.errorOption === ErrorOption.Message) {\n      errorElement.classList.remove(this.errorClass);\n      errorElement.classList.add('e-message');\n      errorElement = createElement(this.errorContainer, {\n        className: this.errorClass,\n        innerHTML: errorElement.outerHTML\n      });\n    }\n\n    errorElement.id = this.inputElement.name + '-info'; // Append error message into MVC error message element\n\n    if (this.element.querySelector('[data-valmsg-for=\"' + input.id + '\"]')) {\n      this.element.querySelector('[data-valmsg-for=\"' + input.id + '\"]').appendChild(errorElement);\n    } else if (input.hasAttribute('data-msg-containerid') === true) {\n      // Append error message into custom div element\n      var containerId = input.getAttribute('data-msg-containerid');\n      var divElement = this.element.querySelector('#' + containerId);\n      divElement.appendChild(errorElement);\n    } else if (this.customPlacement != null) {\n      // Call custom placement function if customPlacement is not null\n      this.customPlacement.call(this, this.inputElement, errorElement);\n    } else {\n      this.inputElement.parentNode.insertBefore(errorElement, this.inputElement.nextSibling);\n    }\n\n    errorElement.style.display = 'block';\n    this.getErrorElement(name);\n    this.validated.push(name);\n    this.checkRequired(name);\n  }; // Get error element by name\n\n\n  FormValidator.prototype.getErrorElement = function (name) {\n    this.infoElement = select(this.errorElement + '.' + this.errorClass, this.inputElement.parentElement);\n\n    if (!this.infoElement) {\n      this.infoElement = select(this.errorElement + '.' + this.errorClass + '[for=\"' + name + '\"]', this.element);\n    }\n\n    return this.infoElement;\n  }; // Remove existing rule from errorRules object\n\n\n  FormValidator.prototype.removeErrorRules = function (name) {\n    for (var i = 0; i < this.errorRules.length; i++) {\n      var rule = this.errorRules[i];\n\n      if (rule.name === name) {\n        this.errorRules.splice(i, 1);\n      }\n    }\n  }; // Show error message to the input element\n\n\n  FormValidator.prototype.showMessage = function (errorRule) {\n    this.infoElement.style.display = 'block';\n    this.infoElement.innerHTML = errorRule.message;\n    this.checkRequired(errorRule.name);\n  }; // Hide error message based on input name\n\n\n  FormValidator.prototype.hideMessage = function (name) {\n    if (this.infoElement) {\n      this.infoElement.style.display = 'none';\n      this.removeErrorRules(name);\n      this.inputElement.classList.add(this.validClass);\n      this.inputElement.classList.remove(this.errorClass);\n      this.inputElement.setAttribute('aria-invalid', 'false');\n    }\n  }; // Check whether the input element have required rule and its value is not empty\n\n\n  FormValidator.prototype.checkRequired = function (name) {\n    if (!this.rules[name][this.required] && !this.inputElement.value.length && !isNullOrUndefined(this.infoElement)) {\n      this.infoElement.innerHTML = this.inputElement.value;\n      this.infoElement.setAttribute('aria-invalid', 'false');\n      this.hideMessage(name);\n    }\n  }; // Return boolean result if the input have chekcable or submit types\n\n\n  FormValidator.isCheckable = function (input) {\n    var inputType = input.getAttribute('type');\n    return inputType && (inputType === 'checkbox' || inputType === 'radio' || inputType === 'submit');\n  };\n\n  var FormValidator_1; // List of function to validate the rules\n\n  FormValidator.checkValidator = {\n    required: function (option) {\n      return !isNaN(Date.parse(option.value)) ? !isNaN(new Date(option.value).getTime()) : option.value.toString().length > 0;\n    },\n    email: function (option) {\n      return regex.EMAIL.test(option.value);\n    },\n    url: function (option) {\n      return regex.URL.test(option.value);\n    },\n    dateIso: function (option) {\n      return regex.DATE_ISO.test(option.value);\n    },\n    tel: function (option) {\n      return regex.PHONE.test(option.value);\n    },\n    creditcard: function (option) {\n      return regex.CREDITCARD.test(option.value);\n    },\n    number: function (option) {\n      return !isNaN(Number(option.value)) && option.value.indexOf(' ') === -1;\n    },\n    digits: function (option) {\n      return regex.DIGITS.test(option.value);\n    },\n    maxLength: function (option) {\n      return option.value.length <= option.param;\n    },\n    minLength: function (option) {\n      return option.value.length >= option.param;\n    },\n    rangeLength: function (option) {\n      var param = option.param;\n      return option.value.length >= param[0] && option.value.length <= param[1];\n    },\n    range: function (option) {\n      var param = option.param;\n      return !isNaN(Number(option.value)) && Number(option.value) >= param[0] && Number(option.value) <= param[1];\n    },\n    date: function (option) {\n      return !isNaN(new Date(option.value).getTime());\n    },\n    max: function (option) {\n      if (!isNaN(Number(option.value))) {\n        // Maximum rule validation for number\n        return +option.value <= option.param;\n      } // Maximum rule validation for date\n\n\n      return new Date(option.value).getTime() <= new Date(JSON.parse(JSON.stringify(option.param))).getTime();\n    },\n    min: function (option) {\n      if (!isNaN(Number(option.value))) {\n        // Minimum rule validation for number\n        return +option.value >= option.param;\n      } else if (option.value.indexOf(',') !== -1) {\n        var uNum = option.value.replace(/,/g, '');\n        return parseFloat(uNum) >= option.param;\n      } else {\n        // Minimum rule validation for date\n        return new Date(option.value).getTime() >= new Date(JSON.parse(JSON.stringify(option.param))).getTime();\n      }\n    },\n    regex: function (option) {\n      return new RegExp(option.param).test(option.value);\n    },\n    equalTo: function (option) {\n      var compareTo = option.formElement.querySelector('#' + option.param);\n      option.param = compareTo.value;\n      return option.param === option.value;\n    }\n  };\n\n  __decorate([Property('')], FormValidator.prototype, \"locale\", void 0);\n\n  __decorate([Property('e-hidden')], FormValidator.prototype, \"ignore\", void 0);\n\n  __decorate([Property()], FormValidator.prototype, \"rules\", void 0);\n\n  __decorate([Property('e-error')], FormValidator.prototype, \"errorClass\", void 0);\n\n  __decorate([Property('e-valid')], FormValidator.prototype, \"validClass\", void 0);\n\n  __decorate([Property('label')], FormValidator.prototype, \"errorElement\", void 0);\n\n  __decorate([Property('div')], FormValidator.prototype, \"errorContainer\", void 0);\n\n  __decorate([Property(ErrorOption.Label)], FormValidator.prototype, \"errorOption\", void 0);\n\n  __decorate([Event()], FormValidator.prototype, \"focusout\", void 0);\n\n  __decorate([Event()], FormValidator.prototype, \"keyup\", void 0);\n\n  __decorate([Event()], FormValidator.prototype, \"click\", void 0);\n\n  __decorate([Event()], FormValidator.prototype, \"change\", void 0);\n\n  __decorate([Event()], FormValidator.prototype, \"submit\", void 0);\n\n  __decorate([Event()], FormValidator.prototype, \"validationBegin\", void 0);\n\n  __decorate([Event()], FormValidator.prototype, \"validationComplete\", void 0);\n\n  __decorate([Event()], FormValidator.prototype, \"customPlacement\", void 0);\n\n  FormValidator = FormValidator_1 = __decorate([NotifyPropertyChanges], FormValidator);\n  return FormValidator;\n}(Base);\n\nexport { FormValidator };","map":null,"metadata":{},"sourceType":"module"}