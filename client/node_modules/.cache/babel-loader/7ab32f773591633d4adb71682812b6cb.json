{"ast":null,"code":"/**\r\n * DevExtreme (core/events_strategy.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EventsStrategy = void 0;\n\nvar _callbacks = require(\"./utils/callbacks\");\n\nvar _callbacks2 = _interopRequireDefault(_callbacks);\n\nvar _iterator = require(\"./utils/iterator\");\n\nvar _type = require(\"./utils/type\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nvar EventsStrategy = exports.EventsStrategy = function () {\n  function EventsStrategy(owner) {\n    _classCallCheck(this, EventsStrategy);\n\n    this._events = {};\n    this._owner = owner;\n  }\n\n  _createClass(EventsStrategy, [{\n    key: \"hasEvent\",\n    value: function (eventName) {\n      var callbacks = this._events[eventName];\n      return callbacks ? callbacks.has() : false;\n    }\n  }, {\n    key: \"fireEvent\",\n    value: function (eventName, eventArgs) {\n      var callbacks = this._events[eventName];\n\n      if (callbacks) {\n        callbacks.fireWith(this._owner, eventArgs);\n      }\n\n      return this._owner;\n    }\n  }, {\n    key: \"on\",\n    value: function (eventName, eventHandler) {\n      var _this = this;\n\n      if ((0, _type.isPlainObject)(eventName)) {\n        (0, _iterator.each)(eventName, function (e, h) {\n          _this.on(e, h);\n        });\n      } else {\n        var callbacks = this._events[eventName];\n\n        if (!callbacks) {\n          callbacks = (0, _callbacks2.default)();\n          this._events[eventName] = callbacks;\n        }\n\n        var addFn = callbacks.originalAdd || callbacks.add;\n        addFn.call(callbacks, eventHandler);\n      }\n    }\n  }, {\n    key: \"off\",\n    value: function (eventName, eventHandler) {\n      var callbacks = this._events[eventName];\n\n      if (callbacks) {\n        if ((0, _type.isFunction)(eventHandler)) {\n          callbacks.remove(eventHandler);\n        } else {\n          callbacks.empty();\n        }\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function () {\n      (0, _iterator.each)(this._events, function (eventName, event) {\n        event.empty();\n      });\n    }\n  }], [{\n    key: \"create\",\n    value: function (owner, strategy) {\n      if (strategy) {\n        return (0, _type.isFunction)(strategy) ? strategy(owner) : strategy;\n      } else {\n        return new EventsStrategy(owner);\n      }\n    }\n  }]);\n\n  return EventsStrategy;\n}();","map":null,"metadata":{},"sourceType":"script"}