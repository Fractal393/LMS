{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}; /// <reference path='../drop-down-base/drop-down-base-model.d.ts'/>\n\n\nimport { EventHandler, Property, Event, compile, KeyboardEvents, append } from '@syncfusion/ej2-base';\nimport { attributes, isNullOrUndefined, getUniqueID, formatUnit, isUndefined, getValue } from '@syncfusion/ej2-base';\nimport { Animation, Browser, NotifyPropertyChanges } from '@syncfusion/ej2-base';\nimport { addClass, removeClass, closest, prepend, detach, classList, isBlazor } from '@syncfusion/ej2-base';\nimport { Popup, isCollide, createSpinner, showSpinner, hideSpinner } from '@syncfusion/ej2-popups';\nimport { Input } from '@syncfusion/ej2-inputs';\nimport { incrementalSearch } from '../common/incremental-search';\nimport { DropDownBase, dropDownBaseClasses } from '../drop-down-base/drop-down-base';\n/* tslint:disable */\n\nimport { DataManager, Query, Predicate } from '@syncfusion/ej2-data'; // don't use space in classnames \n\nexport var dropDownListClasses = {\n  root: 'e-dropdownlist',\n  hover: dropDownBaseClasses.hover,\n  selected: dropDownBaseClasses.selected,\n  rtl: dropDownBaseClasses.rtl,\n  li: dropDownBaseClasses.li,\n  disable: dropDownBaseClasses.disabled,\n  base: dropDownBaseClasses.root,\n  focus: dropDownBaseClasses.focus,\n  input: 'e-input-group',\n  inputFocus: 'e-input-focus',\n  icon: 'e-input-group-icon e-ddl-icon',\n  iconAnimation: 'e-icon-anim',\n  value: 'e-input-value',\n  device: 'e-ddl-device',\n  backIcon: 'e-input-group-icon e-back-icon e-icons',\n  filterBarClearIcon: 'e-input-group-icon e-clear-icon e-icons',\n  filterInput: 'e-input-filter',\n  filterParent: 'e-filter-parent',\n  mobileFilter: 'e-ddl-device-filter',\n  footer: 'e-ddl-footer',\n  header: 'e-ddl-header',\n  clearIcon: 'e-clear-icon',\n  clearIconHide: 'e-clear-icon-hide',\n  popupFullScreen: 'e-popup-full-page',\n  disableIcon: 'e-ddl-disable-icon',\n  hiddenElement: 'e-ddl-hidden'\n};\nvar inputObject = {\n  container: null,\n  buttons: []\n};\n/**\n * The DropDownList component contains a list of predefined values from which you can\n * choose a single value.\n * ```html\n * <input type=\"text\" tabindex=\"1\" id=\"list\"> </input>\n * ```\n * ```typescript\n *   let dropDownListObj:DropDownList = new DropDownList();\n *   dropDownListObj.appendTo(\"#list\");\n * ```\n */\n\nvar DropDownList =\n/** @class */\nfunction (_super) {\n  __extends(DropDownList, _super);\n  /**\n   * * Constructor for creating the DropDownList component.\n   */\n\n\n  function DropDownList(options, element) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.previousValue = null;\n    return _this;\n  }\n\n  ;\n  /**\n   * Initialize the event handler.\n   * @private\n   */\n\n  DropDownList.prototype.preRender = function () {\n    var checkBlazor = isBlazor() && this.isServerRendered;\n    this.isServerBlazor = checkBlazor ? true : false;\n\n    if (this.isServerBlazor) {\n      this.initializeData();\n    } else {\n      this.element.style.opacity = '0';\n      this.initializeData();\n\n      _super.prototype.preRender.call(this);\n    }\n\n    this.activeIndex = this.index;\n    this.queryString = '';\n  };\n\n  DropDownList.prototype.initializeData = function () {\n    this.isPopupOpen = false;\n    this.isDocumentClick = false;\n    this.isInteracted = false;\n    this.isFilterFocus = false;\n    this.beforePopupOpen = false;\n    this.initial = true;\n    this.initRemoteRender = false;\n    this.isNotSearchList = false;\n    this.isTyped = false;\n    this.isSelected = false;\n    this.preventFocus = false;\n    this.preventAutoFill = false;\n    this.isValidKey = false;\n    this.typedString = '';\n    this.isEscapeKey = false;\n    this.isPreventBlur = false;\n    this.isTabKey = false;\n    this.actionCompleteData = {\n      isUpdated: false\n    };\n    this.prevSelectPoints = {};\n    this.isSelectCustom = false;\n    this.isDropDownClick = false;\n    this.preventAltUp = false;\n    this.isCustomFilter = false;\n    this.isSecondClick = false;\n    this.keyConfigure = {\n      tab: 'tab',\n      enter: '13',\n      escape: '27',\n      end: '35',\n      home: '36',\n      down: '40',\n      up: '38',\n      pageUp: '33',\n      pageDown: '34',\n      open: 'alt+40',\n      close: 'shift+tab',\n      hide: 'alt+38',\n      space: '32'\n    };\n  };\n\n  DropDownList.prototype.setZIndex = function () {\n    if (this.popupObj) {\n      this.popupObj.setProperties({\n        'zIndex': this.zIndex\n      });\n    }\n  };\n\n  DropDownList.prototype.renderList = function (isEmptyData) {\n    if (!this.isServerBlazor) {\n      _super.prototype.render.call(this, isEmptyData);\n\n      this.wireListEvents();\n    } else {\n      // tslint:disable-next-line\n      this.interopAdaptor.invokeMethodAsync('OnServerRenderList', this.beforePopupOpen, false);\n    }\n  };\n\n  DropDownList.prototype.floatLabelChange = function () {\n    if (this.getModuleName() === 'dropdownlist' && this.floatLabelType === 'Auto') {\n      var floatElement = this.inputWrapper.container.querySelector('.e-float-text');\n\n      if (this.inputElement.value !== '' || this.isInteracted) {\n        classList(floatElement, ['e-label-top'], ['e-label-bottom']);\n      } else {\n        classList(floatElement, ['e-label-bottom'], ['e-label-top']);\n      }\n    }\n  };\n\n  DropDownList.prototype.resetHandler = function (e) {\n    e.preventDefault();\n    this.clearAll(e);\n  };\n\n  DropDownList.prototype.resetFocusElement = function () {\n    this.removeHover();\n    this.removeSelection();\n    this.removeFocus();\n    this.list.scrollTop = 0;\n\n    if (this.getModuleName() !== 'autocomplete' && !isNullOrUndefined(this.ulElement)) {\n      var li = this.ulElement.querySelector('.' + dropDownListClasses.li);\n\n      if (li) {\n        li.classList.add(dropDownListClasses.focus);\n      }\n    }\n  };\n\n  DropDownList.prototype.clearAll = function (e, properties) {\n    if (isNullOrUndefined(properties) || !isNullOrUndefined(properties) && (isNullOrUndefined(properties.dataSource) || !(properties.dataSource instanceof DataManager) && properties.dataSource.length === 0)) {\n      this.isActive = true;\n      this.resetSelection(properties);\n    }\n\n    var dataItem = this.getItemData();\n\n    if (this.previousValue === dataItem.value) {\n      return;\n    }\n\n    this.onChangeEvent(e);\n  };\n\n  DropDownList.prototype.resetSelection = function (properties) {\n    if (this.list) {\n      if (!isNullOrUndefined(properties) && (isNullOrUndefined(properties.dataSource) || !(properties.dataSource instanceof DataManager) && properties.dataSource.length === 0)) {\n        this.selectedLI = null;\n        this.actionCompleteData.isUpdated = false;\n        this.actionCompleteData.ulElement = null;\n        this.actionCompleteData.list = null;\n        this.resetList(properties.dataSource);\n      } else {\n        if (this.allowFiltering && this.getModuleName() !== 'autocomplete' && !isNullOrUndefined(this.actionCompleteData.ulElement) && !isNullOrUndefined(this.actionCompleteData.list)) {\n          var actionList = this.actionCompleteData.ulElement.querySelector('li');\n          var ulElement = this.ulElement && this.ulElement.querySelector('li');\n\n          if (this.element.tagName === 'EJS-COMBOBOX' && actionList && ulElement && actionList.childElementCount > 0 && ulElement.childElementCount > 0 && actionList.textContent !== ulElement.textContent && this.itemTemplate) {\n            this.cloneElements();\n          }\n\n          this.onActionComplete(this.actionCompleteData.ulElement.cloneNode(true), this.actionCompleteData.list);\n        }\n\n        this.resetFocusElement();\n      }\n    }\n\n    if (!this.isServerBlazor) {\n      this.hiddenElement.innerHTML = '';\n    }\n\n    this.inputElement.value = '';\n    this.value = null;\n    this.itemData = null;\n    this.text = null;\n    this.index = null;\n    this.activeIndex = null;\n    this.item = null;\n    this.queryString = '';\n\n    if (this.valueTempElement) {\n      detach(this.valueTempElement);\n      this.inputElement.style.display = 'block';\n      this.valueTempElement = null;\n    }\n\n    this.setSelection(null, null);\n    this.isSelectCustom = false;\n    this.updateIconState();\n    this.cloneElements();\n  };\n\n  DropDownList.prototype.setHTMLAttributes = function () {\n    if (Object.keys(this.htmlAttributes).length) {\n      for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {\n        var htmlAttr = _a[_i];\n\n        if (htmlAttr === 'class') {\n          var updatedClassValue = this.htmlAttributes[htmlAttr].replace(/\\s+/g, ' ').trim();\n\n          if (updatedClassValue !== '') {\n            addClass([this.inputWrapper.container], updatedClassValue.split(' '));\n          }\n        } else if (htmlAttr === 'disabled' && this.htmlAttributes[htmlAttr] === 'disabled') {\n          this.enabled = false;\n          this.setEnable();\n        } else if (htmlAttr === 'readonly' && !isNullOrUndefined(this.htmlAttributes[htmlAttr])) {\n          this.readonly = true;\n          this.dataBind();\n        } else if (htmlAttr === 'style') {\n          this.inputWrapper.container.setAttribute('style', this.htmlAttributes[htmlAttr]);\n        } else {\n          var defaultAttr = ['title', 'id', 'placeholder', 'aria-placeholder', 'role', 'autocorrect', 'autocomplete', 'autocapitalize', 'spellcheck', 'minlength', 'maxlength'];\n          var validateAttr = ['name', 'required'];\n\n          if (this.getModuleName() === 'autocomplete' || this.getModuleName() === 'combobox') {\n            defaultAttr.push('tabindex');\n          }\n\n          if (htmlAttr.indexOf('data') === 0 || validateAttr.indexOf(htmlAttr) > -1) {\n            this.hiddenElement.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);\n          } else if (defaultAttr.indexOf(htmlAttr) > -1) {\n            htmlAttr === 'placeholder' ? Input.setPlaceholder(this.htmlAttributes[htmlAttr], this.inputElement) : this.inputElement.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);\n          } else {\n            this.inputWrapper.container.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);\n          }\n        }\n      }\n    }\n\n    if (this.getModuleName() === 'autocomplete' || this.getModuleName() === 'combobox') {\n      this.inputWrapper.container.removeAttribute('tabindex');\n    }\n  };\n\n  DropDownList.prototype.getAriaAttributes = function () {\n    return {\n      'aria-disabled': 'false',\n      'aria-owns': this.element.id + '_options',\n      'role': 'listbox',\n      'aria-haspopup': 'true',\n      'aria-expanded': 'false',\n      'aria-activedescendant': 'null',\n      'aria-live': 'polite',\n      'aria-labelledby': this.hiddenElement.id\n    };\n  };\n\n  DropDownList.prototype.setEnableRtl = function () {\n    Input.setEnableRtl(this.enableRtl, [this.inputElement.parentElement]);\n\n    if (this.popupObj) {\n      this.popupObj.enableRtl = this.enableRtl;\n      this.popupObj.dataBind();\n    }\n  };\n\n  DropDownList.prototype.setEnable = function () {\n    Input.setEnabled(this.enabled, this.inputElement);\n\n    if (this.enabled) {\n      removeClass([this.inputWrapper.container], dropDownListClasses.disable);\n      this.inputElement.setAttribute('aria-disabled', 'false');\n      this.targetElement().setAttribute('tabindex', this.tabIndex);\n    } else {\n      this.hidePopup();\n      addClass([this.inputWrapper.container], dropDownListClasses.disable);\n      this.inputElement.setAttribute('aria-disabled', 'true');\n      this.targetElement().tabIndex = -1;\n    }\n  };\n  /**\n   * Get the properties to be maintained in the persisted state.\n   */\n\n\n  DropDownList.prototype.getPersistData = function () {\n    return this.addOnPersist(['value']);\n  };\n\n  ;\n\n  DropDownList.prototype.getLocaleName = function () {\n    return 'drop-down-list';\n  };\n\n  ;\n\n  DropDownList.prototype.preventTabIndex = function (element) {\n    if (this.getModuleName() === 'dropdownlist') {\n      element.tabIndex = -1;\n    }\n  };\n\n  DropDownList.prototype.targetElement = function () {\n    return this.inputWrapper.container;\n  };\n\n  DropDownList.prototype.getNgDirective = function () {\n    return 'EJS-DROPDOWNLIST';\n  };\n\n  DropDownList.prototype.getElementByText = function (text) {\n    return this.getElementByValue(this.getValueByText(text));\n  };\n\n  DropDownList.prototype.getElementByValue = function (value) {\n    var item;\n    var listItems = this.getItems();\n\n    for (var _i = 0, listItems_1 = listItems; _i < listItems_1.length; _i++) {\n      var liItem = listItems_1[_i];\n\n      if (this.getFormattedValue(liItem.getAttribute('data-value')) === value) {\n        item = liItem;\n        break;\n      }\n    }\n\n    return item;\n  };\n\n  ;\n\n  DropDownList.prototype.initValue = function () {\n    this.renderList();\n\n    if (this.dataSource instanceof DataManager) {\n      this.initRemoteRender = true;\n    } else {\n      this.updateValues();\n    }\n  };\n\n  DropDownList.prototype.updateValues = function () {\n    if (!isNullOrUndefined(this.value)) {\n      this.setSelection(this.getElementByValue(this.value), null);\n    } else if (this.text && isNullOrUndefined(this.value)) {\n      var element = this.getElementByText(this.text);\n\n      if (isNullOrUndefined(element)) {\n        this.setProperties({\n          text: null\n        });\n        return;\n      } else {\n        this.setSelection(element, null);\n      }\n    } else {\n      this.setSelection(this.liCollections[this.activeIndex], null);\n    }\n\n    this.setHiddenValue();\n    Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);\n  };\n\n  DropDownList.prototype.onBlur = function (e) {\n    if (!this.enabled) {\n      return;\n    }\n\n    var target = e.relatedTarget;\n    var currentTarget = e.target;\n    var isPreventBlur = this.isPreventBlur;\n    this.isPreventBlur = false; //IE 11 - issue\n\n    if (isPreventBlur && !this.isDocumentClick && this.isPopupOpen && (!isNullOrUndefined(currentTarget) || !this.isFilterLayout() && isNullOrUndefined(target))) {\n      if (this.getModuleName() === 'dropdownlist' && this.allowFiltering && this.isPopupOpen) {\n        this.filterInput.focus();\n      } else {\n        this.targetElement().focus();\n      }\n\n      return;\n    }\n\n    if (this.isDocumentClick || !isNullOrUndefined(this.popupObj) && document.body.contains(this.popupObj.element) && this.popupObj.element.classList.contains(dropDownListClasses.mobileFilter)) {\n      if (!this.beforePopupOpen) {\n        this.isDocumentClick = false;\n      }\n\n      return;\n    }\n\n    if (this.getModuleName() === 'dropdownlist' && !this.isFilterFocus && target !== this.inputElement && (document.activeElement !== target || document.activeElement === target && currentTarget.classList.contains(dropDownListClasses.inputFocus)) || isNullOrUndefined(target) && this.getModuleName() === 'dropdownlist' && this.allowFiltering && currentTarget !== this.inputWrapper.container || this.getModuleName() !== 'dropdownlist' && !this.inputWrapper.container.contains(target) || this.isTabKey) {\n      this.isDocumentClick = this.isPopupOpen ? true : false;\n      this.focusOutAction(e);\n      this.isTabKey = false;\n    }\n\n    if (this.isRequested && !this.isPopupOpen && !this.isPreventBlur) {\n      this.isActive = false;\n      this.beforePopupOpen = false;\n    }\n  };\n\n  DropDownList.prototype.focusOutAction = function (e) {\n    this.isInteracted = false;\n    this.focusOut(e);\n    this.onFocusOut();\n  };\n\n  DropDownList.prototype.onFocusOut = function () {\n    if (!this.enabled) {\n      return;\n    }\n\n    if (this.isSelected) {\n      this.isSelectCustom = false;\n      this.onChangeEvent(null);\n    }\n\n    this.floatLabelChange();\n    this.dispatchEvent(this.hiddenElement, 'change');\n\n    if (this.getModuleName() === 'dropdownlist' && this.element.tagName !== 'INPUT') {\n      this.dispatchEvent(this.inputElement, 'blur');\n    }\n\n    if (this.inputWrapper.clearButton) {\n      addClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);\n    }\n\n    this.trigger('blur');\n  };\n\n  DropDownList.prototype.onFocus = function (e) {\n    if (!this.isInteracted) {\n      this.isInteracted = true;\n      var args = {\n        isInteracted: e ? true : false,\n        event: e\n      };\n      this.trigger('focus', args);\n    }\n\n    this.updateIconState();\n  };\n\n  DropDownList.prototype.resetValueHandler = function (e) {\n    var formElement = closest(this.inputElement, 'form');\n\n    if (formElement && e.target === formElement) {\n      var val = this.element.tagName === this.getNgDirective() ? null : this.inputElement.getAttribute('value');\n      this.text = val;\n    }\n  };\n\n  DropDownList.prototype.wireEvent = function () {\n    EventHandler.add(this.inputWrapper.container, 'mousedown', this.dropDownClick, this);\n    EventHandler.add(this.inputWrapper.container, 'focus', this.focusIn, this);\n    EventHandler.add(this.inputWrapper.container, 'keypress', this.onSearch, this);\n    this.bindCommonEvent();\n  };\n\n  DropDownList.prototype.bindCommonEvent = function () {\n    EventHandler.add(this.targetElement(), 'blur', this.onBlur, this);\n    var formElement = closest(this.inputElement, 'form');\n\n    if (formElement) {\n      EventHandler.add(formElement, 'reset', this.resetValueHandler, this);\n    }\n\n    if (!Browser.isDevice) {\n      this.keyboardModule = new KeyboardEvents(this.targetElement(), {\n        keyAction: this.keyActionHandler.bind(this),\n        keyConfigs: this.keyConfigure,\n        eventName: 'keydown'\n      });\n    } else {\n      this.keyboardModule = new KeyboardEvents(this.targetElement(), {\n        keyAction: this.mobileKeyActionHandler.bind(this),\n        keyConfigs: this.keyConfigure,\n        eventName: 'keydown'\n      });\n    }\n\n    this.bindClearEvent();\n  };\n\n  DropDownList.prototype.bindClearEvent = function () {\n    if (this.showClearButton) {\n      EventHandler.add(this.inputWrapper.clearButton, 'mousedown', this.resetHandler, this);\n    }\n  };\n\n  DropDownList.prototype.unBindCommonEvent = function () {\n    EventHandler.remove(this.targetElement(), 'blur', this.onBlur);\n    var formElement = closest(this.inputElement, 'form');\n\n    if (formElement) {\n      EventHandler.remove(formElement, 'reset', this.resetValueHandler);\n    }\n\n    if (!Browser.isDevice) {\n      this.keyboardModule.destroy();\n    }\n\n    if (this.showClearButton) {\n      EventHandler.remove(this.inputWrapper.clearButton, 'mousedown', this.resetHandler);\n    }\n  };\n\n  DropDownList.prototype.updateIconState = function () {\n    if (this.showClearButton) {\n      if (this.inputElement.value !== '' && !this.readonly) {\n        removeClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);\n      } else {\n        addClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);\n      }\n    }\n  };\n  /**\n   * Event binding for list\n   */\n\n\n  DropDownList.prototype.wireListEvents = function () {\n    EventHandler.add(this.list, 'click', this.onMouseClick, this);\n    EventHandler.add(this.list, 'mouseover', this.onMouseOver, this);\n    EventHandler.add(this.list, 'mouseout', this.onMouseLeave, this);\n  };\n\n  ;\n\n  DropDownList.prototype.onSearch = function (e) {\n    if (e.charCode !== 32 && e.charCode !== 13) {\n      if (this.list === undefined) {\n        if (!this.isServerBlazor) {\n          this.renderList();\n        } else {\n          this.isServerIncrementalSearch = true; // tslint:disable-next-line\n\n          this.interopAdaptor.invokeMethodAsync('OnServerRenderList', true, false);\n        }\n      }\n\n      this.searchKeyEvent = e;\n      this.onServerIncrementalSearch(e);\n    }\n  };\n\n  DropDownList.prototype.onServerIncrementalSearch = function (e) {\n    if (!this.isRequested && !isNullOrUndefined(this.list) && !isNullOrUndefined(this.list.querySelector('li')) && this.enabled && !this.readonly) {\n      this.incrementalSearch(e);\n    }\n  };\n\n  DropDownList.prototype.onMouseClick = function (e) {\n    var target = e.target;\n    var classList = target.classList;\n    var li = closest(target, '.' + dropDownBaseClasses.li);\n\n    if (!this.isValidLI(li)) {\n      return;\n    }\n\n    this.setSelection(li, e);\n\n    if (Browser.isDevice && this.isFilterLayout()) {\n      history.back();\n    } else {\n      var delay = 100;\n      this.closePopup(delay);\n    }\n  };\n\n  DropDownList.prototype.onMouseOver = function (e) {\n    var currentLi = closest(e.target, '.' + dropDownBaseClasses.li);\n    this.setHover(currentLi);\n  };\n\n  ;\n\n  DropDownList.prototype.setHover = function (li) {\n    if (this.enabled && this.isValidLI(li) && !li.classList.contains(dropDownBaseClasses.hover)) {\n      this.removeHover();\n      addClass([li], dropDownBaseClasses.hover);\n    }\n  };\n\n  ;\n\n  DropDownList.prototype.onMouseLeave = function (e) {\n    this.removeHover();\n  };\n\n  ;\n\n  DropDownList.prototype.removeHover = function () {\n    if (this.list) {\n      var hoveredItem = this.isServerBlazor && this.popupObj && this.popupObj.element ? this.popupObj.element.querySelectorAll('.' + dropDownBaseClasses.hover) : this.list.querySelectorAll('.' + dropDownBaseClasses.hover);\n\n      if (hoveredItem && hoveredItem.length) {\n        removeClass(hoveredItem, dropDownBaseClasses.hover);\n      }\n    }\n  };\n\n  ;\n\n  DropDownList.prototype.isValidLI = function (li) {\n    return li && li.hasAttribute('role') && li.getAttribute('role') === 'option';\n  };\n\n  ;\n\n  DropDownList.prototype.incrementalSearch = function (e) {\n    if (this.liCollections.length > 0) {\n      var li = incrementalSearch(e.charCode, this.liCollections, this.activeIndex, true, this.element.id, this.isServerBlazor);\n\n      if (!isNullOrUndefined(li)) {\n        this.setSelection(li, e);\n        this.setScrollPosition();\n      }\n    }\n  };\n\n  ;\n  /**\n   * Hides the spinner loader.\n   * @returns void.\n   */\n\n  DropDownList.prototype.hideSpinner = function () {\n    if (!isNullOrUndefined(this.spinnerElement)) {\n      hideSpinner(this.spinnerElement);\n      removeClass([this.spinnerElement], dropDownListClasses.disableIcon);\n      this.spinnerElement.innerHTML = '';\n      this.spinnerElement = null;\n    }\n  };\n  /**\n   * Shows the spinner loader.\n   * @returns void.\n   */\n\n\n  DropDownList.prototype.showSpinner = function () {\n    if (isNullOrUndefined(this.spinnerElement)) {\n      this.spinnerElement = Browser.isDevice && !isNullOrUndefined(this.filterInputObj) && this.filterInputObj.buttons[1] || !isNullOrUndefined(this.filterInputObj) && this.filterInputObj.buttons[0] || this.inputWrapper.buttons[0];\n      addClass([this.spinnerElement], dropDownListClasses.disableIcon);\n      createSpinner({\n        target: this.spinnerElement,\n        width: Browser.isDevice ? '16px' : '14px'\n      }, this.createElement);\n      showSpinner(this.spinnerElement);\n    }\n  };\n\n  DropDownList.prototype.keyActionHandler = function (e) {\n    if (!this.enabled) {\n      return;\n    }\n\n    var preventAction = e.action === 'pageUp' || e.action === 'pageDown';\n    var preventHomeEnd = this.getModuleName() !== 'dropdownlist' && (e.action === 'home' || e.action === 'end');\n    this.isEscapeKey = e.action === 'escape';\n    this.isTabKey = !this.isPopupOpen && e.action === 'tab';\n    var isNavAction = e.action === 'down' || e.action === 'up' || e.action === 'home' || e.action === 'end';\n    var isNavigation = e.action === 'down' || e.action === 'up' || e.action === 'pageUp' || e.action === 'pageDown' || e.action === 'home' || e.action === 'end';\n\n    if ((this.isEditTextBox() || preventAction || preventHomeEnd) && !this.isPopupOpen) {\n      return;\n    }\n\n    if (!this.readonly) {\n      var isTabAction = e.action === 'tab' || e.action === 'close';\n\n      if (this.list === undefined && !this.isRequested && !isTabAction && e.action !== 'escape') {\n        this.searchKeyEvent = e;\n        this.renderList();\n      }\n\n      if (!(this.isServerBlazor && (e.action === 'open' || e.action === 'space')) && isNullOrUndefined(this.list) || !isNullOrUndefined(this.liCollections) && isNavigation && this.liCollections.length === 0 || this.isRequested) {\n        if (!(this.isServerBlazor && isNavAction)) {\n          return;\n        }\n      }\n\n      if (isTabAction && this.getModuleName() !== 'autocomplete' && this.isPopupOpen || e.action === 'escape') {\n        e.preventDefault();\n      }\n\n      this.isSelected = e.action === 'escape' ? false : this.isSelected;\n      this.isTyped = isNavigation || e.action === 'escape' ? false : this.isTyped;\n\n      switch (e.action) {\n        case 'down':\n        case 'up':\n          this.updateUpDownAction(e);\n          break;\n\n        case 'pageUp':\n          this.pageUpSelection(this.activeIndex - this.getPageCount(), e);\n          e.preventDefault();\n          break;\n\n        case 'pageDown':\n          this.pageDownSelection(this.activeIndex + this.getPageCount(), e);\n          e.preventDefault();\n          break;\n\n        case 'home':\n          this.updateHomeEndAction(e);\n          break;\n\n        case 'end':\n          this.updateHomeEndAction(e);\n          break;\n\n        case 'space':\n          if (this.getModuleName() === 'dropdownlist') {\n            if (!this.beforePopupOpen) {\n              this.showPopup();\n            }\n          }\n\n          break;\n\n        case 'open':\n          this.showPopup();\n          break;\n\n        case 'hide':\n          this.preventAltUp = this.isPopupOpen;\n          this.hidePopup(e);\n          this.focusDropDown(e);\n          break;\n\n        case 'enter':\n          this.selectCurrentItem(e);\n          break;\n\n        case 'tab':\n          this.selectCurrentValueOnTab(e);\n          break;\n\n        case 'escape':\n        case 'close':\n          if (this.isPopupOpen) {\n            this.hidePopup(e);\n            this.focusDropDown(e);\n          }\n\n          break;\n      }\n    }\n  };\n\n  DropDownList.prototype.updateUpDownAction = function (e) {\n    if (this.isServerBlazor && isNullOrUndefined(this.list)) {\n      this.isServerNavigation = true; // tslint:disable-next-line\n\n      this.interopAdaptor.invokeMethodAsync('OnServerRenderList', true, false);\n    } else {\n      this.isServerNavigation = false;\n      var focusEle = this.list.querySelector('.' + dropDownListClasses.focus);\n\n      if (this.isSelectFocusItem(focusEle)) {\n        this.setSelection(focusEle, e);\n      } else {\n        var nextItem = void 0;\n        var index = e.action === 'down' ? this.activeIndex + 1 : this.activeIndex - 1;\n        var startIndex = 0;\n\n        if (this.getModuleName() === 'autocomplete') {\n          startIndex = e.action === 'down' && isNullOrUndefined(this.activeIndex) ? 0 : this.liCollections.length - 1;\n          index = index < 0 ? this.liCollections.length - 1 : index === this.liCollections.length ? 0 : index;\n        }\n\n        nextItem = isNullOrUndefined(this.activeIndex) ? this.liCollections[startIndex] : this.liCollections[index];\n\n        if (!isNullOrUndefined(nextItem)) {\n          this.setSelection(nextItem, e);\n        }\n      }\n\n      e.preventDefault();\n    }\n  };\n\n  DropDownList.prototype.updateHomeEndAction = function (e) {\n    if (this.getModuleName() === 'dropdownlist') {\n      if (this.isServerBlazor && isNullOrUndefined(this.list)) {\n        this.isServerNavigation = true; // tslint:disable-next-line\n\n        this.interopAdaptor.invokeMethodAsync('OnServerRenderList', true, false);\n      } else {\n        this.isServerNavigation = false;\n        var findLi = 0;\n\n        if (e.action === 'home') {\n          findLi = 0;\n        } else {\n          findLi = this.getItems().length - 1;\n        }\n\n        e.preventDefault();\n\n        if (this.activeIndex === findLi) {\n          return;\n        }\n\n        this.setSelection(this.liCollections[findLi], e);\n      }\n    }\n  };\n\n  DropDownList.prototype.selectCurrentValueOnTab = function (e) {\n    if (this.getModuleName() === 'autocomplete') {\n      this.selectCurrentItem(e);\n    } else {\n      if (this.isPopupOpen) {\n        this.hidePopup(e);\n        this.focusDropDown(e);\n      }\n    }\n  };\n\n  DropDownList.prototype.mobileKeyActionHandler = function (e) {\n    if (!this.enabled) {\n      return;\n    }\n\n    if (this.isEditTextBox() && !this.isPopupOpen) {\n      return;\n    }\n\n    if (!this.readonly) {\n      if (this.list === undefined && !this.isRequested) {\n        this.searchKeyEvent = e;\n        this.renderList();\n      }\n\n      if (isNullOrUndefined(this.list) || !isNullOrUndefined(this.liCollections) && this.liCollections.length === 0 || this.isRequested) {\n        return;\n      }\n\n      if (e.action === 'enter') {\n        this.selectCurrentItem(e);\n      }\n    }\n  };\n\n  DropDownList.prototype.selectCurrentItem = function (e) {\n    if (this.isPopupOpen) {\n      var li = this.list.querySelector('.' + dropDownListClasses.focus);\n\n      if (li) {\n        this.setSelection(li, e);\n        this.isTyped = false;\n      }\n\n      if (this.isSelected) {\n        this.isSelectCustom = false;\n        this.onChangeEvent(e);\n      }\n\n      this.hidePopup();\n      this.focusDropDown(e);\n    } else {\n      this.showPopup();\n    }\n  };\n\n  DropDownList.prototype.isSelectFocusItem = function (element) {\n    return !isNullOrUndefined(element);\n  };\n\n  DropDownList.prototype.getPageCount = function () {\n    var liHeight = this.list.classList.contains(dropDownBaseClasses.noData) ? null : getComputedStyle(this.getItems()[0], null).getPropertyValue('height');\n    return Math.round(this.list.getBoundingClientRect().height / parseInt(liHeight, 10));\n  };\n\n  DropDownList.prototype.pageUpSelection = function (steps, event) {\n    var previousItem = steps >= 0 ? this.liCollections[steps + 1] : this.liCollections[0];\n    this.setSelection(previousItem, event);\n  };\n\n  ;\n\n  DropDownList.prototype.pageDownSelection = function (steps, event) {\n    var list = this.getItems();\n    var previousItem = steps <= list.length ? this.liCollections[steps - 1] : this.liCollections[list.length - 1];\n    this.setSelection(previousItem, event);\n  };\n\n  ;\n\n  DropDownList.prototype.unWireEvent = function () {\n    EventHandler.remove(this.inputWrapper.container, 'mousedown', this.dropDownClick);\n    EventHandler.remove(this.inputWrapper.container, 'keypress', this.onSearch);\n    EventHandler.remove(this.inputWrapper.container, 'focus', this.focusIn);\n    this.unBindCommonEvent();\n  };\n  /**\n   * Event un binding for list items.\n   */\n\n\n  DropDownList.prototype.unWireListEvents = function () {\n    EventHandler.remove(this.list, 'click', this.onMouseClick);\n    EventHandler.remove(this.list, 'mouseover', this.onMouseOver);\n    EventHandler.remove(this.list, 'mouseout', this.onMouseLeave);\n  };\n\n  ;\n\n  DropDownList.prototype.checkSelector = function (id) {\n    return '#' + id.replace(/(:|\\.|\\[|\\]|,|=|@|\\\\|\\/|#)/g, '\\\\$1');\n  };\n\n  DropDownList.prototype.onDocumentClick = function (e) {\n    var target = e.target;\n\n    if (!(!isNullOrUndefined(this.popupObj) && closest(target, this.checkSelector(this.popupObj.element.id))) && !this.inputWrapper.container.contains(e.target)) {\n      if (this.inputWrapper.container.classList.contains(dropDownListClasses.inputFocus) || this.isPopupOpen) {\n        this.isDocumentClick = true;\n        var isActive = this.isRequested;\n        this.isInteracted = false;\n        this.hidePopup(e);\n\n        if (!isActive) {\n          this.onFocusOut();\n          this.inputWrapper.container.classList.remove(dropDownListClasses.inputFocus);\n        }\n      }\n    } else if (target !== this.inputElement && !(this.allowFiltering && target === this.filterInput) && !(this.getModuleName() === 'combobox' && !this.allowFiltering && Browser.isDevice && target === this.inputWrapper.buttons[0])) {\n      this.isPreventBlur = (Browser.isIE || Browser.info.name === 'edge') && (document.activeElement === this.targetElement() || document.activeElement === this.filterInput);\n      e.preventDefault();\n    }\n  };\n\n  DropDownList.prototype.activeStateChange = function () {\n    if (this.isDocumentClick) {\n      this.hidePopup();\n      this.onFocusOut();\n      this.inputWrapper.container.classList.remove(dropDownListClasses.inputFocus);\n    }\n  };\n\n  DropDownList.prototype.focusDropDown = function (e) {\n    if (!this.initial && this.isFilterLayout()) {\n      this.focusIn(e);\n    }\n  };\n\n  DropDownList.prototype.dropDownClick = function (e) {\n    if (e.which === 3 || e.button === 2) {\n      return;\n    }\n\n    if (this.targetElement().classList.contains(dropDownListClasses.disable) || this.inputWrapper.clearButton === e.target) {\n      return;\n    }\n\n    var target = e.target;\n\n    if (target !== this.inputElement && !(this.allowFiltering && target === this.filterInput) && this.getModuleName() !== 'combobox') {\n      e.preventDefault();\n    }\n\n    if (!this.readonly) {\n      if (this.isPopupOpen) {\n        this.hidePopup();\n\n        if (this.isFilterLayout()) {\n          this.focusDropDown(e);\n        }\n      } else {\n        this.focusIn(e);\n        this.floatLabelChange();\n        this.queryString = this.inputElement.value.trim() === '' ? null : this.inputElement.value;\n        this.isDropDownClick = true;\n        this.showPopup();\n      }\n\n      var proxy_1 = this;\n      var duration = isBlazor() ? 1000 : this.element.tagName === this.getNgDirective() && this.itemTemplate ? 500 : 100;\n\n      if (!this.isSecondClick) {\n        setTimeout(function () {\n          proxy_1.cloneElements();\n          proxy_1.isSecondClick = true;\n        }, duration);\n      }\n    } else {\n      this.focusIn(e);\n    }\n  };\n\n  DropDownList.prototype.cloneElements = function () {\n    if (this.list) {\n      var ulElement = this.list.querySelector('ul');\n\n      if (ulElement) {\n        ulElement = ulElement.cloneNode ? ulElement.cloneNode(true) : ulElement;\n        this.actionCompleteData.ulElement = ulElement;\n      }\n    }\n  };\n\n  DropDownList.prototype.updateSelectedItem = function (li, e, preventSelect, isSelection) {\n    var _this = this;\n\n    this.removeSelection();\n    li.classList.add(dropDownBaseClasses.selected);\n    this.removeHover();\n    var value = this.getFormattedValue(li.getAttribute('data-value'));\n    var selectedData = this.getDataByValue(value);\n\n    if (!this.initial && !preventSelect && !isNullOrUndefined(e)) {\n      var items = this.detachChanges(selectedData);\n      this.isSelected = true;\n      var eventArgs = {\n        e: e,\n        item: li,\n        itemData: items,\n        isInteracted: e ? true : false,\n        cancel: false\n      };\n      this.trigger('select', eventArgs, function (eventArgs) {\n        if (eventArgs.cancel) {\n          li.classList.remove(dropDownBaseClasses.selected);\n        } else {\n          _this.selectEventCallback(li, e, preventSelect, selectedData, value);\n\n          if (_this.isServerBlazor) {\n            // tslint:disable-next-line\n            _this.interopAdaptor.invokeMethodAsync('OnServerItemData', _this.itemData);\n          }\n\n          if (isSelection) {\n            _this.setSelectOptions(li, e);\n          }\n        }\n      });\n    } else {\n      this.selectEventCallback(li, e, preventSelect, selectedData, value);\n\n      if (this.isServerBlazor) {\n        // tslint:disable-next-line\n        this.interopAdaptor.invokeMethodAsync('OnServerItemData', this.itemData);\n      }\n\n      if (isSelection) {\n        this.setSelectOptions(li, e);\n      }\n    }\n  };\n\n  DropDownList.prototype.selectEventCallback = function (li, e, preventSelect, selectedData, value) {\n    this.previousItemData = !isNullOrUndefined(this.itemData) ? this.itemData : null;\n    this.item = li;\n    this.itemData = selectedData;\n    var focusedItem = this.list.querySelector('.' + dropDownBaseClasses.focus);\n\n    if (focusedItem) {\n      removeClass([focusedItem], dropDownBaseClasses.focus);\n    }\n\n    li.setAttribute('aria-selected', 'true');\n    this.activeIndex = this.getIndexByValue(value);\n  };\n\n  DropDownList.prototype.activeItem = function (li) {\n    if (this.isValidLI(li) && !li.classList.contains(dropDownBaseClasses.selected)) {\n      this.removeSelection();\n      li.classList.add(dropDownBaseClasses.selected);\n      this.removeHover();\n      li.setAttribute('aria-selected', 'true');\n    }\n  };\n\n  DropDownList.prototype.setValue = function (e) {\n    var dataItem = this.getItemData();\n\n    if (dataItem.value === null) {\n      if (isBlazor() && dataItem.text !== null || dataItem.text !== '') {\n        Input.setValue(dataItem.text, this.inputElement, this.floatLabelType, this.showClearButton);\n      } else {\n        Input.setValue(null, this.inputElement, this.floatLabelType, this.showClearButton);\n      }\n    } else {\n      Input.setValue(dataItem.text, this.inputElement, this.floatLabelType, this.showClearButton);\n    }\n\n    if (this.isServerBlazor) {\n      // tslint:disable-next-line\n      this.interopAdaptor.invokeMethodAsync('OnServerValueTemplate', dataItem);\n    }\n\n    if (this.valueTemplate && this.itemData !== null && !this.isServerBlazor) {\n      this.DropDownBaseresetBlazorTemplates(false, false, false, false, true);\n      this.setValueTemplate();\n    } else if (this.inputElement.previousSibling === this.valueTempElement) {\n      detach(this.valueTempElement);\n      this.inputElement.style.display = 'block';\n    }\n\n    if (this.previousValue === dataItem.value) {\n      this.isSelected = false;\n      return true;\n    } else {\n      this.isSelected = !this.initial ? true : false;\n      this.isSelectCustom = false;\n\n      if (this.getModuleName() === 'dropdownlist') {\n        this.updateIconState();\n      }\n\n      return false;\n    }\n  };\n\n  DropDownList.prototype.setSelection = function (li, e) {\n    if (this.isValidLI(li) && (!li.classList.contains(dropDownBaseClasses.selected) || this.isPopupOpen && this.isSelected && li.classList.contains(dropDownBaseClasses.selected))) {\n      this.updateSelectedItem(li, e, false, true);\n    } else {\n      this.setSelectOptions(li, e);\n    }\n  };\n\n  DropDownList.prototype.setSelectOptions = function (li, e) {\n    if (this.list) {\n      this.removeHover();\n    }\n\n    this.previousSelectedLI = !isNullOrUndefined(this.selectedLI) ? this.selectedLI : null;\n    this.selectedLI = li;\n\n    if (this.setValue(e)) {\n      return;\n    }\n\n    if (this.isPopupOpen) {\n      attributes(this.targetElement(), {\n        'aria-activedescendant': this.selectedLI ? this.selectedLI.id : null\n      });\n\n      if (this.isFilterLayout() && this.filterInput) {\n        attributes(this.filterInput, {\n          'aria-activedescendant': this.selectedLI ? this.selectedLI.id : null\n        });\n      }\n    }\n\n    if (!this.isPopupOpen && !isNullOrUndefined(li) || this.isPopupOpen && !isNullOrUndefined(e) && (e.type !== 'keydown' || e.type === 'keydown' && e.action === 'enter')) {\n      this.isSelectCustom = false;\n      this.onChangeEvent(e);\n    }\n\n    if (this.isPopupOpen && !isNullOrUndefined(this.selectedLI) && this.itemData !== null && (!e || e.type !== 'click')) {\n      this.setScrollPosition(e);\n    }\n\n    if (Browser.info.name !== 'mozilla') {\n      attributes(this.inputElement, {\n        'aria-label': this.inputElement.value\n      });\n      attributes(this.targetElement(), {\n        'aria-describedby': this.inputElement.id\n      });\n      this.targetElement().removeAttribute('aria-live');\n    }\n  };\n\n  DropDownList.prototype.dropdownCompiler = function (dropdownTemplate) {\n    var checkTemplate = false;\n\n    if (dropdownTemplate) {\n      var exception = void 0;\n\n      try {\n        checkTemplate = document.querySelectorAll(dropdownTemplate).length ? true : false;\n      } catch (exception) {\n        checkTemplate = false;\n      }\n    }\n\n    return checkTemplate;\n  };\n\n  DropDownList.prototype.setValueTemplate = function () {\n    var compiledString;\n\n    if (!this.valueTempElement) {\n      this.valueTempElement = this.createElement('span', {\n        className: dropDownListClasses.value\n      });\n      this.inputElement.parentElement.insertBefore(this.valueTempElement, this.inputElement);\n      this.inputElement.style.display = 'none';\n    }\n\n    this.valueTempElement.innerHTML = '';\n    var templateData = isBlazor() ? JSON.parse(JSON.stringify(this.itemData)) : this.itemData;\n    var valuecheck = this.dropdownCompiler(this.valueTemplate);\n\n    if (valuecheck) {\n      compiledString = compile(document.querySelector(this.valueTemplate).innerHTML.trim());\n    } else {\n      compiledString = compile(this.valueTemplate);\n    }\n\n    for (var _i = 0, _a = compiledString(templateData, null, null, this.valueTemplateId, this.isStringTemplate); _i < _a.length; _i++) {\n      var item = _a[_i];\n      this.valueTempElement.appendChild(item);\n    }\n\n    this.DropDownBaseupdateBlazorTemplates(false, false, false, false, true, true, true);\n  };\n\n  DropDownList.prototype.removeSelection = function () {\n    if (this.list) {\n      var selectedItems = this.list.querySelectorAll('.' + dropDownBaseClasses.selected);\n\n      if (selectedItems.length) {\n        removeClass(selectedItems, dropDownBaseClasses.selected);\n        selectedItems[0].removeAttribute('aria-selected');\n      }\n    }\n  };\n\n  ;\n\n  DropDownList.prototype.getItemData = function () {\n    var fields = this.fields;\n    var dataItem = null;\n    dataItem = this.itemData;\n    var dataValue;\n    var dataText;\n\n    if (!isNullOrUndefined(dataItem)) {\n      dataValue = getValue(fields.value, dataItem);\n      dataText = getValue(fields.text, dataItem);\n    }\n\n    var value = !isNullOrUndefined(dataItem) && !isUndefined(dataValue) ? dataValue : dataItem;\n    var text = !isNullOrUndefined(dataItem) && !isUndefined(dataValue) ? dataText : dataItem;\n    return {\n      value: value,\n      text: text\n    };\n  };\n  /**\n   * To trigger the change event for list.\n   */\n\n\n  DropDownList.prototype.onChangeEvent = function (eve) {\n    var dataItem = this.getItemData();\n    var index = this.isSelectCustom ? null : this.activeIndex;\n    this.setProperties({\n      'index': index,\n      'text': dataItem.text,\n      'value': dataItem.value\n    }, true);\n    this.detachChangeEvent(eve);\n  };\n\n  ;\n\n  DropDownList.prototype.detachChanges = function (value) {\n    var items;\n\n    if (typeof value === 'string' || typeof value === 'boolean' || typeof value === 'number') {\n      items = Object.defineProperties({}, {\n        value: {\n          value: value,\n          enumerable: true\n        },\n        text: {\n          value: value,\n          enumerable: true\n        }\n      });\n    } else {\n      items = value;\n    }\n\n    return items;\n  };\n\n  DropDownList.prototype.detachChangeEvent = function (eve) {\n    this.isSelected = false;\n    this.previousValue = this.value;\n    this.activeIndex = this.index;\n    this.typedString = !isNullOrUndefined(this.text) ? this.text : '';\n\n    if (!this.initial) {\n      var items = this.detachChanges(this.itemData);\n      var preItems = void 0;\n\n      if (typeof this.previousItemData === 'string' || typeof this.previousItemData === 'boolean' || typeof this.previousItemData === 'number') {\n        preItems = Object.defineProperties({}, {\n          value: {\n            value: this.previousItemData,\n            enumerable: true\n          },\n          text: {\n            value: this.previousItemData,\n            enumerable: true\n          }\n        });\n      } else {\n        preItems = this.previousItemData;\n      }\n\n      this.setHiddenValue();\n      var eventArgs = {\n        e: eve,\n        item: this.item,\n        itemData: items,\n        previousItem: this.previousSelectedLI,\n        previousItemData: preItems,\n        isInteracted: eve ? true : false,\n        value: this.value,\n        element: this.element\n      };\n      this.trigger('change', eventArgs);\n\n      if (this.isServerBlazor && this.enablePersistence) {\n        // tslint:disable-next-line\n        this.interopAdaptor.invokeMethodAsync('ServerChange');\n      }\n    }\n\n    if ((isNullOrUndefined(this.value) || this.value === '') && this.floatLabelType !== 'Always') {\n      removeClass([this.inputWrapper.container], 'e-valid-input');\n    }\n  };\n\n  DropDownList.prototype.setHiddenValue = function () {\n    if (!isNullOrUndefined(this.value)) {\n      if (this.isServerBlazor && this.hiddenElement.querySelector('option')) {\n        var selectedElement = this.hiddenElement.querySelector('option');\n        selectedElement.textContent = this.text;\n        selectedElement.setAttribute('value', this.value.toString());\n      } else if (!this.isServerBlazor) {\n        this.hiddenElement.innerHTML = '<option selected>' + this.text + '</option>';\n        var selectedElement = this.hiddenElement.querySelector('option');\n        selectedElement.setAttribute('value', this.value.toString());\n      }\n    } else if (!this.isServerBlazor) {\n      this.hiddenElement.innerHTML = '';\n    }\n  };\n  /**\n   * Filter bar implementation\n   */\n\n\n  DropDownList.prototype.onFilterUp = function (e) {\n    if (!(e.ctrlKey && e.keyCode === 86) && (this.isValidKey || e.keyCode === 40 || e.keyCode === 38)) {\n      this.isValidKey = false;\n\n      switch (e.keyCode) {\n        case 38: //up arrow \n\n        case 40:\n          //down arrow \n          if (this.getModuleName() === 'autocomplete' && !this.isPopupOpen && !this.preventAltUp && !this.isRequested) {\n            this.preventAutoFill = true;\n            this.searchLists(e);\n          } else {\n            this.preventAutoFill = false;\n          }\n\n          this.preventAltUp = false;\n          e.preventDefault();\n          break;\n\n        case 46: //delete\n\n        case 8:\n          //backspace\n          this.typedString = this.filterInput.value;\n\n          if (!this.isPopupOpen && this.typedString !== '' || this.isPopupOpen && this.queryString.length > 0) {\n            this.preventAutoFill = true;\n            this.searchLists(e);\n          } else if (this.typedString === '' && this.queryString === '' && this.getModuleName() !== 'autocomplete') {\n            this.preventAutoFill = true;\n            this.searchLists(e);\n          } else if (this.typedString === '') {\n            if (this.list) {\n              this.resetFocusElement();\n            }\n\n            this.activeIndex = null;\n\n            if (this.getModuleName() === 'autocomplete') {\n              this.hidePopup();\n            }\n          }\n\n          e.preventDefault();\n          break;\n\n        default:\n          this.typedString = this.filterInput.value;\n          this.preventAutoFill = false;\n          this.searchLists(e);\n          break;\n      }\n    } else {\n      this.isValidKey = false;\n    }\n  };\n\n  DropDownList.prototype.onFilterDown = function (e) {\n    switch (e.keyCode) {\n      case 13:\n        //enter\n        break;\n\n      case 40: //down arrow\n\n      case 38:\n        //up arrow \n        this.queryString = this.filterInput.value;\n        e.preventDefault();\n        break;\n\n      case 9:\n        //tab \n        if (this.isPopupOpen && this.getModuleName() !== 'autocomplete') {\n          e.preventDefault();\n        }\n\n        break;\n\n      default:\n        this.prevSelectPoints = this.getSelectionPoints();\n        this.queryString = this.filterInput.value;\n        break;\n    }\n  };\n\n  DropDownList.prototype.removeFillSelection = function () {\n    if (this.isInteracted) {\n      var selection = this.getSelectionPoints();\n      this.inputElement.setSelectionRange(selection.end, selection.end);\n    }\n  };\n\n  DropDownList.prototype.getQuery = function (query) {\n    var filterQuery;\n\n    if (!this.isCustomFilter && this.allowFiltering && this.filterInput) {\n      filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();\n      var filterType = this.typedString === '' ? 'contains' : this.filterType;\n      var dataType = this.typeOfData(this.dataSource).typeof;\n\n      if (!(this.dataSource instanceof DataManager) && dataType === 'string' || dataType === 'number') {\n        filterQuery.where('', filterType, this.typedString, this.ignoreCase, this.ignoreAccent);\n      } else {\n        var fields = this.fields.text ? this.fields.text : '';\n        filterQuery.where(fields, filterType, this.typedString, this.ignoreCase, this.ignoreAccent);\n      }\n    } else {\n      filterQuery = query ? query : this.query ? this.query : new Query();\n    }\n\n    return filterQuery;\n  };\n\n  DropDownList.prototype.getSelectionPoints = function () {\n    var input = this.inputElement;\n    return {\n      start: Math.abs(input.selectionStart),\n      end: Math.abs(input.selectionEnd)\n    };\n  };\n\n  DropDownList.prototype.searchLists = function (e) {\n    var _this = this;\n\n    this.isTyped = true;\n    this.activeIndex = null;\n\n    if (this.filterInput.parentElement.querySelector('.' + dropDownListClasses.clearIcon)) {\n      var clearElement = this.filterInput.parentElement.querySelector('.' + dropDownListClasses.clearIcon);\n      clearElement.style.visibility = this.filterInput.value === '' ? 'hidden' : 'visible';\n    }\n\n    this.isDataFetched = false;\n\n    if (this.isFiltering()) {\n      if (this.isServerBlazor) {\n        this.beforePopupOpen = this.getModuleName() === 'combobox' && this.isFiltering() && !this.beforePopupOpen ? !this.beforePopupOpen : this.beforePopupOpen;\n\n        if (this.filterInput.value === '' && this.getModuleName() !== 'dropdownlist') {\n          // tslint:disable-next-line\n          this.interopAdaptor.invokeMethodAsync('OnServerRenderList', this.beforePopupOpen, false);\n        } else {\n          // tslint:disable-next-line\n          this.interopAdaptor.invokeMethodAsync('OnServerFilter', this.filterInput.value);\n        }\n      } else {\n        var eventArgs_1 = {\n          preventDefaultAction: false,\n          text: this.filterInput.value,\n          updateData: function (dataSource, query, fields) {\n            if (eventArgs_1.cancel) {\n              return;\n            }\n\n            _this.isCustomFilter = true;\n\n            _this.filteringAction(dataSource, query, fields);\n          },\n          baseEventArgs: e,\n          cancel: false\n        };\n        this.trigger('filtering', eventArgs_1, function (eventArgs) {\n          if (!eventArgs.cancel && !_this.isCustomFilter && !eventArgs.preventDefaultAction) {\n            _this.filteringAction(_this.dataSource, null, _this.fields);\n          }\n        });\n      }\n    }\n  };\n  /**\n   * To filter the data from given data source by using query\n   * @param  {Object[] | DataManager } dataSource - Set the data source to filter.\n   * @param  {Query} query - Specify the query to filter the data.\n   * @param  {FieldSettingsModel} fields - Specify the fields to map the column in the data table.\n   * @return {void}.\n    */\n\n\n  DropDownList.prototype.filter = function (dataSource, query, fields) {\n    this.isCustomFilter = true;\n    this.filteringAction(dataSource, query, fields);\n  };\n\n  DropDownList.prototype.filteringAction = function (dataSource, query, fields) {\n    if (!isNullOrUndefined(this.filterInput)) {\n      this.beforePopupOpen = true;\n\n      if (this.filterInput.value.trim() === '' && !this.itemTemplate) {\n        this.actionCompleteData.isUpdated = false;\n        this.isTyped = false;\n\n        if (!isNullOrUndefined(this.actionCompleteData.ulElement) && !isNullOrUndefined(this.actionCompleteData.list)) {\n          this.onActionComplete(this.actionCompleteData.ulElement, this.actionCompleteData.list);\n        }\n\n        this.isTyped = true;\n\n        if (!isNullOrUndefined(this.itemData) && this.getModuleName() === 'dropdownlist') {\n          this.focusIndexItem();\n          this.setScrollPosition();\n        }\n\n        this.isNotSearchList = true;\n      } else {\n        this.isNotSearchList = false;\n        query = this.filterInput.value.trim() === '' ? null : query;\n        this.resetList(dataSource, fields, query);\n      }\n    }\n  };\n\n  DropDownList.prototype.setSearchBox = function (popupElement) {\n    if (this.isFiltering()) {\n      var parentElement = popupElement.querySelector('.' + dropDownListClasses.filterParent) ? popupElement.querySelector('.' + dropDownListClasses.filterParent) : this.createElement('span', {\n        className: dropDownListClasses.filterParent\n      });\n\n      if (this.isServerBlazor) {\n        parentElement.innerHTML = '';\n      }\n\n      this.filterInput = this.createElement('input', {\n        attrs: {\n          type: 'text'\n        },\n        className: dropDownListClasses.filterInput\n      });\n      this.element.parentNode.insertBefore(this.filterInput, this.element);\n      var backIcon = false;\n\n      if (Browser.isDevice) {\n        backIcon = true;\n      }\n\n      this.filterInputObj = Input.createInput({\n        element: this.filterInput,\n        buttons: backIcon ? [dropDownListClasses.backIcon, dropDownListClasses.filterBarClearIcon] : [dropDownListClasses.filterBarClearIcon],\n        properties: {\n          placeholder: this.filterBarPlaceholder\n        }\n      }, this.createElement);\n\n      if (!isNullOrUndefined(this.cssClass)) {\n        if (this.cssClass.split(' ').indexOf('e-outline') !== -1) {\n          addClass([this.filterInputObj.container], 'e-outline');\n        } else if (this.cssClass.split(' ').indexOf('e-filled') !== -1) {\n          addClass([this.filterInputObj.container], 'e-filled');\n        }\n      }\n\n      append([this.filterInputObj.container], parentElement);\n      prepend([parentElement], popupElement);\n      attributes(this.filterInput, {\n        'aria-disabled': 'false',\n        'aria-owns': this.element.id + '_options',\n        'role': 'listbox',\n        'aria-activedescendant': this.selectedLI ? this.selectedLI.id : null,\n        'autocomplete': 'off',\n        'autocorrect': 'off',\n        'autocapitalize': 'off',\n        'spellcheck': 'false'\n      });\n      this.clearIconElement = this.filterInput.parentElement.querySelector('.' + dropDownListClasses.clearIcon);\n\n      if (!Browser.isDevice && this.clearIconElement) {\n        EventHandler.add(this.clearIconElement, 'click', this.clearText, this);\n        this.clearIconElement.style.visibility = 'hidden';\n      }\n\n      if (!Browser.isDevice) {\n        this.searchKeyModule = new KeyboardEvents(this.filterInput, {\n          keyAction: this.keyActionHandler.bind(this),\n          keyConfigs: this.keyConfigure,\n          eventName: 'keydown'\n        });\n      } else {\n        this.searchKeyModule = new KeyboardEvents(this.filterInput, {\n          keyAction: this.mobileKeyActionHandler.bind(this),\n          keyConfigs: this.keyConfigure,\n          eventName: 'keydown'\n        });\n      }\n\n      EventHandler.add(this.filterInput, 'input', this.onInput, this);\n      EventHandler.add(this.filterInput, 'keyup', this.onFilterUp, this);\n      EventHandler.add(this.filterInput, 'keydown', this.onFilterDown, this);\n      EventHandler.add(this.filterInput, 'blur', this.onBlur, this);\n      EventHandler.add(this.filterInput, 'paste', this.pasteHandler, this);\n      return this.filterInputObj;\n    } else {\n      return inputObject;\n    }\n  };\n\n  ;\n\n  DropDownList.prototype.onInput = function (e) {\n    this.isValidKey = true; // For filtering works in mobile firefox.\n\n    if (Browser.isDevice && Browser.info.name === 'mozilla') {\n      this.typedString = this.filterInput.value;\n      this.preventAutoFill = true;\n      this.searchLists(e);\n    }\n  };\n\n  DropDownList.prototype.pasteHandler = function (e) {\n    var _this = this;\n\n    setTimeout(function () {\n      _this.typedString = _this.filterInput.value;\n\n      _this.searchLists(e);\n    });\n  };\n\n  DropDownList.prototype.onActionFailure = function (e) {\n    _super.prototype.onActionFailure.call(this, e);\n\n    if (this.beforePopupOpen) {\n      this.renderPopup();\n    }\n  };\n\n  DropDownList.prototype.onActionComplete = function (ulElement, list, e, isUpdated) {\n    var _this = this;\n\n    if (this.isNotSearchList) {\n      this.isNotSearchList = false;\n      return;\n    }\n\n    if (this.isActive) {\n      var selectedItem = this.selectedLI ? this.selectedLI.cloneNode(true) : null;\n\n      _super.prototype.onActionComplete.call(this, ulElement, list, e);\n\n      this.updateSelectElementData(this.allowFiltering);\n\n      if (this.isRequested && !isNullOrUndefined(this.searchKeyEvent) && this.searchKeyEvent.type === 'keydown') {\n        this.isRequested = false;\n        this.keyActionHandler(this.searchKeyEvent);\n        this.searchKeyEvent = null;\n      }\n\n      if (this.isRequested && !isNullOrUndefined(this.searchKeyEvent)) {\n        this.incrementalSearch(this.searchKeyEvent);\n        this.searchKeyEvent = null;\n      }\n\n      this.list.scrollTop = 0;\n\n      if (!isNullOrUndefined(ulElement)) {\n        attributes(ulElement, {\n          'id': this.element.id + '_options',\n          'role': 'listbox',\n          'aria-hidden': 'false'\n        });\n      }\n\n      if (this.initRemoteRender) {\n        this.initial = true;\n        this.activeIndex = this.index;\n        this.updateValues();\n        this.initRemoteRender = false;\n        this.initial = false;\n\n        if (this.value && this.dataSource instanceof DataManager) {\n          var checkField_1 = isNullOrUndefined(this.fields.value) ? this.fields.text : this.fields.value;\n          var checkVal = list.some(function (x) {\n            return x[checkField_1] === _this.value;\n          });\n\n          if (!checkVal) {\n            this.dataSource.executeQuery(this.getQuery(this.query).where(new Predicate(checkField_1, 'equal', this.value))).then(function (e) {\n              if (e.result.length > 0) {\n                _this.addItem(e.result, list.length);\n\n                _this.updateValues();\n              }\n            });\n          }\n        }\n      }\n\n      if (this.getModuleName() !== 'autocomplete' && this.isFiltering() && !this.isTyped) {\n        if (!this.actionCompleteData.isUpdated || !this.isCustomFilter && !this.isFilterFocus && (this.dataSource instanceof DataManager || !isNullOrUndefined(this.dataSource) && !isNullOrUndefined(this.dataSource.length) && this.dataSource.length !== 0)) {\n          this.actionCompleteData = {\n            ulElement: ulElement.cloneNode(true),\n            list: list,\n            isUpdated: true\n          };\n        }\n\n        this.addNewItem(list, selectedItem);\n\n        if (!isNullOrUndefined(this.itemData)) {\n          this.focusIndexItem();\n        }\n      }\n\n      if (this.beforePopupOpen) {\n        this.renderPopup();\n      }\n    }\n  };\n\n  DropDownList.prototype.addNewItem = function (listData, newElement) {\n    var _this = this;\n\n    if (!isNullOrUndefined(this.itemData) && !isNullOrUndefined(newElement)) {\n      var value_1 = this.getItemData().value;\n      var isExist = listData.some(function (data) {\n        return (typeof data === 'string' || typeof data === 'number') && data === value_1 || getValue(_this.fields.value, data) === value_1;\n      });\n\n      if (!isExist) {\n        this.addItem(this.itemData);\n      }\n    }\n  };\n\n  DropDownList.prototype.updateActionCompleteData = function (li, item, index) {\n    if (this.getModuleName() !== 'autocomplete' && this.actionCompleteData.ulElement) {\n      this.actionCompleteData.ulElement.insertBefore(li.cloneNode(true), this.actionCompleteData.ulElement.childNodes[index]);\n\n      if (this.isFiltering() && this.actionCompleteData.list.indexOf(item) < 0) {\n        this.actionCompleteData.list.push(item);\n      }\n    }\n  };\n\n  DropDownList.prototype.focusIndexItem = function () {\n    var value = this.getItemData().value;\n    this.activeIndex = this.getIndexByValue(value);\n    var element = this.findListElement(this.list, 'li', 'data-value', value);\n    this.selectedLI = element;\n    this.activeItem(element);\n    this.removeFocus();\n  };\n\n  DropDownList.prototype.updateSelection = function () {\n    var selectedItem = this.list.querySelector('.' + dropDownBaseClasses.selected);\n\n    if (selectedItem) {\n      this.setProperties({\n        'index': this.getIndexByValue(selectedItem.getAttribute('data-value'))\n      });\n      this.activeIndex = this.index;\n    } else {\n      this.removeFocus();\n      this.list.querySelector('.' + dropDownBaseClasses.li).classList.add(dropDownListClasses.focus);\n    }\n  };\n\n  DropDownList.prototype.removeFocus = function () {\n    var highlightedItem = this.list.querySelectorAll('.' + dropDownListClasses.focus);\n\n    if (highlightedItem && highlightedItem.length) {\n      removeClass(highlightedItem, dropDownListClasses.focus);\n    }\n  };\n\n  ;\n\n  DropDownList.prototype.renderPopup = function () {\n    var _this = this;\n\n    if (this.popupObj && document.body.contains(this.popupObj.element)) {\n      this.refreshPopup();\n      return;\n    }\n\n    var args = {\n      cancel: false\n    };\n    this.trigger('beforeOpen', args, function (args) {\n      if (!args.cancel) {\n        var popupEle = _this.serverPopupEle ? _this.serverPopupEle : _this.createElement('div', {\n          id: _this.element.id + '_popup',\n          className: 'e-ddl e-popup ' + (_this.cssClass != null ? _this.cssClass : '')\n        });\n\n        var searchBox = _this.setSearchBox(popupEle);\n\n        _this.listHeight = formatUnit(_this.popupHeight);\n\n        if (_this.headerTemplate && !_this.isServerBlazor) {\n          _this.setHeaderTemplate(popupEle);\n        }\n\n        append([_this.list], popupEle);\n\n        if (_this.footerTemplate && !_this.isServerBlazor) {\n          _this.setFooterTemplate(popupEle);\n        }\n\n        if (_this.isServerRendered && popupEle && popupEle.querySelector('.e-ddl-footer')) {\n          popupEle.appendChild(popupEle.querySelector('.e-ddl-footer'));\n        }\n\n        document.body.appendChild(popupEle);\n\n        _this.updateServerPopup(popupEle);\n\n        popupEle.style.visibility = 'hidden';\n\n        if (_this.popupHeight !== 'auto') {\n          _this.searchBoxHeight = 0;\n\n          if (!isNullOrUndefined(searchBox.container)) {\n            _this.searchBoxHeight = searchBox.container.parentElement.getBoundingClientRect().height;\n            _this.listHeight = (parseInt(_this.listHeight, 10) - _this.searchBoxHeight).toString() + 'px';\n          }\n\n          if (_this.headerTemplate || _this.isServerRendered && popupEle && popupEle.querySelector('.e-ddl-header')) {\n            _this.header = _this.header ? _this.header : popupEle.querySelector('.e-ddl-header');\n            var height = Math.round(_this.header.getBoundingClientRect().height);\n            _this.listHeight = (parseInt(_this.listHeight, 10) - (height + _this.searchBoxHeight)).toString() + 'px';\n          }\n\n          if (_this.footerTemplate || _this.isServerRendered && popupEle && popupEle.querySelector('.e-ddl-footer')) {\n            _this.footer = _this.footer ? _this.footer : popupEle.querySelector('.e-ddl-footer');\n            var height = Math.round(_this.footer.getBoundingClientRect().height);\n            _this.listHeight = (parseInt(_this.listHeight, 10) - (height + _this.searchBoxHeight)).toString() + 'px';\n          }\n\n          _this.list.style.maxHeight = (parseInt(_this.listHeight, 10) - 2).toString() + 'px'; // due to box-sizing property\n\n          popupEle.style.maxHeight = formatUnit(_this.popupHeight);\n        } else {\n          popupEle.style.height = 'auto';\n        }\n\n        var offsetValue = 0;\n        var left = void 0;\n\n        if (!isNullOrUndefined(_this.selectedLI) && !isNullOrUndefined(_this.activeIndex) && _this.activeIndex >= 0) {\n          _this.setScrollPosition();\n        } else {\n          _this.list.scrollTop = 0;\n        }\n\n        if (Browser.isDevice && !_this.allowFiltering && (_this.getModuleName() === 'dropdownlist' || _this.isDropDownClick && _this.getModuleName() === 'combobox')) {\n          offsetValue = _this.getOffsetValue(popupEle);\n          var firstItem = _this.isEmptyList() ? _this.list : _this.liCollections[0];\n          left = -(parseInt(getComputedStyle(firstItem).textIndent, 10) - parseInt(getComputedStyle(_this.inputElement).paddingLeft, 10) + parseInt(getComputedStyle(_this.inputElement.parentElement).borderLeftWidth, 10));\n        }\n\n        _this.getFocusElement();\n\n        _this.createPopup(popupEle, offsetValue, left);\n\n        _this.checkCollision(popupEle);\n\n        if (Browser.isDevice) {\n          _this.popupObj.element.classList.add(dropDownListClasses.device);\n\n          if (_this.getModuleName() === 'dropdownlist' || _this.getModuleName() === 'combobox' && !_this.allowFiltering && _this.isDropDownClick) {\n            _this.popupObj.collision = {\n              X: 'fit',\n              Y: 'fit'\n            };\n          }\n\n          if (_this.isFilterLayout()) {\n            _this.popupObj.element.classList.add(dropDownListClasses.mobileFilter);\n\n            _this.popupObj.position = {\n              X: 0,\n              Y: 0\n            };\n\n            _this.popupObj.dataBind();\n\n            attributes(_this.popupObj.element, {\n              style: 'left:0px;right:0px;top:0px;bottom:0px;'\n            });\n            addClass([document.body, _this.popupObj.element], dropDownListClasses.popupFullScreen);\n\n            _this.setSearchBoxPosition();\n\n            _this.backIconElement = searchBox.container.querySelector('.e-back-icon');\n            _this.clearIconElement = searchBox.container.querySelector('.' + dropDownListClasses.clearIcon);\n            EventHandler.add(_this.backIconElement, 'click', _this.clickOnBackIcon, _this);\n            EventHandler.add(_this.clearIconElement, 'click', _this.clearText, _this);\n          }\n        }\n\n        popupEle.style.visibility = 'visible';\n        addClass([popupEle], 'e-popup-close');\n\n        var scrollParentElements = _this.popupObj.getScrollableParent(_this.inputWrapper.container);\n\n        for (var _i = 0, scrollParentElements_1 = scrollParentElements; _i < scrollParentElements_1.length; _i++) {\n          var element = scrollParentElements_1[_i];\n          EventHandler.add(element, 'scroll', _this.scrollHandler, _this);\n        }\n\n        if (Browser.isDevice && _this.isFilterLayout()) {\n          EventHandler.add(_this.list, 'scroll', _this.listScroll, _this);\n        }\n\n        attributes(_this.targetElement(), {\n          'aria-expanded': 'true'\n        });\n        var inputParent = _this.isFiltering() ? _this.filterInput.parentElement : _this.inputWrapper.container;\n        addClass([inputParent], [dropDownListClasses.inputFocus]);\n        var animModel = {\n          name: 'FadeIn',\n          duration: 100\n        };\n        _this.beforePopupOpen = true;\n        var popupInstance = isBlazor() && _this.isServerRendered ? null : _this.popupObj;\n        var eventArgs = {\n          popup: popupInstance,\n          cancel: false,\n          animation: animModel\n        };\n\n        _this.trigger('open', eventArgs, function (eventArgs) {\n          if (!eventArgs.cancel) {\n            _this.serverBlazorUpdateSelection();\n\n            _this.bindServerScrollEvent();\n\n            addClass([_this.inputWrapper.container], [dropDownListClasses.iconAnimation]);\n\n            _this.popupObj.show(new Animation(eventArgs.animation), _this.zIndex === 1000 ? _this.element : null);\n          } else {\n            _this.beforePopupOpen = false;\n\n            _this.destroyPopup();\n          }\n        });\n      } else {\n        _this.beforePopupOpen = false;\n      }\n    });\n  };\n\n  DropDownList.prototype.checkCollision = function (popupEle) {\n    if (!Browser.isDevice || Browser.isDevice && !(this.getModuleName() === 'dropdownlist' || this.isDropDownClick)) {\n      var collision = isCollide(popupEle);\n\n      if (collision.length > 0) {\n        popupEle.style.marginTop = -parseInt(getComputedStyle(popupEle).marginTop, 10) + 'px';\n      }\n\n      this.popupObj.resolveCollision();\n    }\n  };\n\n  DropDownList.prototype.serverBlazorUpdateSelection = function () {\n    if (this.isServerBlazor && (this.value !== null || this.index !== null || this.text !== null) || this.getModuleName() !== 'dropdownlist' && !this.isTyped) {\n      if (this.getModuleName() === 'dropdownlist') {\n        this.removeSelection();\n        this.removeFocus();\n        this.removeHover();\n        this.updateValues();\n      }\n\n      if (this.getModuleName() === 'combobox' && this.ulElement && this.findListElement(this.ulElement, 'li', 'data-value', this.value) && !this.isTyped) {\n        this.updateValues();\n      }\n\n      if (this.isServerBlazor && this.getModuleName() !== 'dropdownlist' && (this.text === '' || this.text === null) && this.ulElement) {\n        if (!this.ulElement.querySelector('li').classList.contains(dropDownBaseClasses.hover)) {\n          addClass([this.ulElement.querySelector('li')], dropDownBaseClasses.hover);\n        }\n      }\n    }\n  };\n\n  DropDownList.prototype.bindServerScrollEvent = function () {\n    if (this.isServerBlazor && this.list) {\n      if (this.fields.groupBy && !this.isGroupChecking) {\n        EventHandler.remove(this.list, 'scroll', this.setFloatingHeader);\n        EventHandler.add(this.list, 'scroll', this.setFloatingHeader, this);\n      }\n    }\n  };\n\n  DropDownList.prototype.updateServerPopup = function (popupEle) {\n    if (this.isServerBlazor) {\n      if (popupEle && popupEle.querySelector('li')) {\n        removeClass([popupEle.querySelector('.e-content')], ['e-nodata']);\n      }\n\n      this.initial = false;\n      popupEle.removeAttribute('style');\n    }\n  };\n\n  DropDownList.prototype.getOffsetValue = function (popupEle) {\n    var popupStyles = getComputedStyle(popupEle);\n    var borderTop = parseInt(popupStyles.borderTopWidth, 10);\n    var borderBottom = parseInt(popupStyles.borderBottomWidth, 10);\n    return this.setPopupPosition(borderTop + borderBottom);\n  };\n\n  DropDownList.prototype.createPopup = function (element, offsetValue, left) {\n    var _this = this;\n\n    this.popupObj = new Popup(element, {\n      width: this.setWidth(),\n      targetType: 'relative',\n      relateTo: this.inputWrapper.container,\n      collision: {\n        X: 'flip',\n        Y: 'flip'\n      },\n      offsetY: offsetValue,\n      enableRtl: this.enableRtl,\n      offsetX: left,\n      position: {\n        X: 'left',\n        Y: 'bottom'\n      },\n      zIndex: this.zIndex,\n      close: function () {\n        if (!_this.isDocumentClick) {\n          _this.focusDropDown();\n        }\n\n        var isResetItem = _this.getModuleName() === 'autocomplete' ? true : false;\n\n        _this.DropDownBaseresetBlazorTemplates(isResetItem, isResetItem, true, true, false, true, true);\n\n        _this.isNotSearchList = false;\n        _this.isDocumentClick = false;\n\n        _this.destroyPopup();\n\n        var formElement = closest(_this.inputElement, 'form');\n\n        if (_this.isFiltering() && formElement && _this.actionCompleteData.list && _this.actionCompleteData.list[0]) {\n          _this.isActive = true;\n\n          _this.onActionComplete(_this.actionCompleteData.ulElement, _this.actionCompleteData.list, null, true);\n        }\n      },\n      open: function () {\n        EventHandler.add(document, 'mousedown', _this.onDocumentClick, _this);\n        _this.isPopupOpen = true;\n\n        var actionList = _this.actionCompleteData && _this.actionCompleteData.ulElement && _this.actionCompleteData.ulElement.querySelector('li');\n\n        var ulElement = _this.list.querySelector('ul li');\n\n        if (_this.isFiltering() && _this.itemTemplate && _this.element.tagName === _this.getNgDirective() && actionList && ulElement && actionList.textContent !== ulElement.textContent) {\n          _this.cloneElements();\n        }\n\n        if (_this.isFilterLayout()) {\n          removeClass([_this.inputWrapper.container], [dropDownListClasses.inputFocus]);\n          _this.isFilterFocus = true;\n\n          _this.filterInput.focus();\n\n          if (_this.inputWrapper.clearButton) {\n            addClass([_this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);\n          }\n        }\n\n        _this.activeStateChange();\n      },\n      targetExitViewport: function () {\n        if (!Browser.isDevice) {\n          _this.hidePopup();\n        }\n      }\n    });\n  };\n\n  DropDownList.prototype.isEmptyList = function () {\n    return !isNullOrUndefined(this.liCollections) && this.liCollections.length === 0;\n  };\n\n  DropDownList.prototype.getFocusElement = function () {// combo-box used this method\n  };\n\n  DropDownList.prototype.isFilterLayout = function () {\n    return this.getModuleName() === 'dropdownlist' && this.allowFiltering;\n  };\n\n  DropDownList.prototype.scrollHandler = function () {\n    if (Browser.isDevice && (this.getModuleName() === 'dropdownlist' && !this.isFilterLayout() || this.getModuleName() === 'combobox' && !this.allowFiltering && this.isDropDownClick)) {\n      this.hidePopup();\n    }\n  };\n\n  DropDownList.prototype.setSearchBoxPosition = function () {\n    var searchBoxHeight = this.filterInput.parentElement.getBoundingClientRect().height;\n    this.popupObj.element.style.maxHeight = '100%';\n    this.popupObj.element.style.width = '100%';\n    this.list.style.maxHeight = window.innerHeight - searchBoxHeight + 'px';\n    this.list.style.height = window.innerHeight - searchBoxHeight + 'px';\n    var clearElement = this.filterInput.parentElement.querySelector('.' + dropDownListClasses.clearIcon);\n    detach(this.filterInput);\n    clearElement.parentElement.insertBefore(this.filterInput, clearElement);\n  };\n\n  DropDownList.prototype.setPopupPosition = function (border) {\n    var offsetValue;\n    var popupOffset = border;\n    var selectedLI = this.list.querySelector('.' + dropDownListClasses.focus) || this.selectedLI;\n    var firstItem = this.isEmptyList() ? this.list : this.liCollections[0];\n    var lastItem = this.isEmptyList() ? this.list : this.liCollections[this.getItems().length - 1];\n    var liHeight = firstItem.getBoundingClientRect().height;\n    var listHeight = this.list.offsetHeight / 2;\n    var height = isNullOrUndefined(selectedLI) ? firstItem.offsetTop : selectedLI.offsetTop;\n    var lastItemOffsetValue = lastItem.offsetTop;\n\n    if (lastItemOffsetValue - listHeight < height && !isNullOrUndefined(this.liCollections) && this.liCollections.length > 0 && !isNullOrUndefined(selectedLI)) {\n      var count = this.list.offsetHeight / liHeight;\n      var paddingBottom = parseInt(getComputedStyle(this.list).paddingBottom, 10);\n      offsetValue = (count - (this.liCollections.length - this.activeIndex)) * liHeight - popupOffset + paddingBottom;\n      this.list.scrollTop = selectedLI.offsetTop;\n    } else if (height > listHeight) {\n      offsetValue = listHeight - liHeight / 2;\n      this.list.scrollTop = height - listHeight + liHeight / 2;\n    } else {\n      offsetValue = height;\n    }\n\n    var inputHeight = this.inputWrapper.container.offsetHeight;\n    offsetValue = offsetValue + liHeight + popupOffset - (liHeight - inputHeight) / 2;\n    return -offsetValue;\n  };\n\n  DropDownList.prototype.setWidth = function () {\n    var width = formatUnit(this.popupWidth);\n\n    if (width.indexOf('%') > -1) {\n      var inputWidth = this.inputWrapper.container.offsetWidth * parseFloat(width) / 100;\n      width = inputWidth.toString() + 'px';\n    }\n\n    if (Browser.isDevice && !this.allowFiltering && (this.getModuleName() === 'dropdownlist' || this.isDropDownClick && this.getModuleName() === 'combobox')) {\n      var firstItem = this.isEmptyList() ? this.list : this.liCollections[0];\n      width = parseInt(width, 10) + (parseInt(getComputedStyle(firstItem).textIndent, 10) - parseInt(getComputedStyle(this.inputElement).paddingLeft, 10) + parseInt(getComputedStyle(this.inputElement.parentElement).borderLeftWidth, 10)) * 2 + 'px';\n    }\n\n    return width;\n  };\n\n  DropDownList.prototype.scrollBottom = function (isInitial) {\n    if (!isNullOrUndefined(this.selectedLI)) {\n      var currentOffset = this.list.offsetHeight;\n      var nextBottom = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;\n      var nextOffset = this.list.scrollTop + nextBottom - currentOffset;\n      nextOffset = isInitial ? nextOffset + parseInt(getComputedStyle(this.list).paddingTop, 10) * 2 : nextOffset;\n      var boxRange = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;\n      boxRange = this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ? boxRange - this.fixedHeaderElement.offsetHeight : boxRange;\n\n      if (this.activeIndex === 0) {\n        this.list.scrollTop = 0;\n      } else if (nextBottom > currentOffset || !(boxRange > 0 && this.list.offsetHeight > boxRange)) {\n        this.list.scrollTop = nextOffset;\n      }\n    }\n  };\n\n  DropDownList.prototype.scrollTop = function () {\n    if (!isNullOrUndefined(this.selectedLI)) {\n      var nextOffset = this.selectedLI.offsetTop - this.list.scrollTop;\n      var nextBottom = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;\n      nextOffset = this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ? nextOffset - this.fixedHeaderElement.offsetHeight : nextOffset;\n      var boxRange = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;\n\n      if (this.activeIndex === 0) {\n        this.list.scrollTop = 0;\n      } else if (nextOffset < 0) {\n        this.list.scrollTop = this.list.scrollTop + nextOffset;\n      } else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {\n        this.list.scrollTop = this.selectedLI.offsetTop - (this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ? this.fixedHeaderElement.offsetHeight : 0);\n      }\n    }\n  };\n\n  DropDownList.prototype.isEditTextBox = function () {\n    return false;\n  };\n\n  DropDownList.prototype.isFiltering = function () {\n    return this.allowFiltering;\n  };\n\n  DropDownList.prototype.isPopupButton = function () {\n    return true;\n  };\n\n  DropDownList.prototype.setScrollPosition = function (e) {\n    if (!isNullOrUndefined(e)) {\n      switch (e.action) {\n        case 'pageDown':\n        case 'down':\n        case 'end':\n          this.scrollBottom();\n          break;\n\n        default:\n          this.scrollTop();\n          break;\n      }\n    } else {\n      this.scrollBottom(true);\n    }\n  };\n\n  DropDownList.prototype.clearText = function () {\n    this.filterInput.value = '';\n    this.searchLists(null);\n  };\n\n  DropDownList.prototype.listScroll = function () {\n    this.filterInput.blur();\n  };\n\n  DropDownList.prototype.setEleWidth = function (width) {\n    if (!isNullOrUndefined(width)) {\n      if (typeof width === 'number') {\n        this.inputWrapper.container.style.width = formatUnit(width);\n      } else if (typeof width === 'string') {\n        this.inputWrapper.container.style.width = width.match(/px|%|em/) ? width : formatUnit(width);\n      }\n    }\n  };\n\n  DropDownList.prototype.closePopup = function (delay) {\n    var _this = this;\n\n    this.isTyped = false;\n\n    if (!(this.popupObj && document.body.contains(this.popupObj.element) && this.beforePopupOpen)) {\n      return;\n    }\n\n    EventHandler.remove(document, 'mousedown', this.onDocumentClick);\n    this.isActive = false;\n    this.filterInputObj = null;\n    this.isDropDownClick = false;\n    this.preventAutoFill = false;\n    var scrollableParentElements = this.popupObj.getScrollableParent(this.inputWrapper.container);\n\n    for (var _i = 0, scrollableParentElements_1 = scrollableParentElements; _i < scrollableParentElements_1.length; _i++) {\n      var element = scrollableParentElements_1[_i];\n      EventHandler.remove(element, 'scroll', this.scrollHandler);\n    }\n\n    if (Browser.isDevice && this.isFilterLayout()) {\n      removeClass([document.body, this.popupObj.element], dropDownListClasses.popupFullScreen);\n      EventHandler.remove(this.list, 'scroll', this.listScroll);\n    }\n\n    if (this.isFilterLayout()) {\n      if (!Browser.isDevice) {\n        this.searchKeyModule.destroy();\n\n        if (this.clearIconElement) {\n          EventHandler.remove(this.clearIconElement, 'click', this.clearText);\n        }\n      }\n\n      if (this.backIconElement) {\n        EventHandler.remove(this.backIconElement, 'click', this.clickOnBackIcon);\n        EventHandler.remove(this.clearIconElement, 'click', this.clearText);\n      }\n\n      EventHandler.remove(this.filterInput, 'input', this.onInput);\n      EventHandler.remove(this.filterInput, 'keyup', this.onFilterUp);\n      EventHandler.remove(this.filterInput, 'keydown', this.onFilterDown);\n      EventHandler.remove(this.filterInput, 'blur', this.onBlur);\n      EventHandler.remove(this.filterInput, 'paste', this.pasteHandler);\n      this.filterInput = null;\n    }\n\n    attributes(this.targetElement(), {\n      'aria-expanded': 'false',\n      'aria-activedescendant': null\n    });\n    this.inputWrapper.container.classList.remove(dropDownListClasses.iconAnimation);\n\n    if (this.isFiltering()) {\n      this.actionCompleteData.isUpdated = false;\n    }\n\n    this.beforePopupOpen = false;\n    var animModel = {\n      name: 'FadeOut',\n      duration: 100,\n      delay: delay ? delay : 0\n    };\n    var popupInstance = isBlazor() && this.isServerRendered ? null : this.popupObj;\n    var eventArgs = {\n      popup: popupInstance,\n      cancel: false,\n      animation: animModel\n    };\n    this.trigger('close', eventArgs, function (eventArgs) {\n      if (!isNullOrUndefined(_this.popupObj) && !isNullOrUndefined(_this.popupObj.element.querySelector('.e-fixed-head'))) {\n        var fixedHeader = _this.popupObj.element.querySelector('.e-fixed-head');\n\n        fixedHeader.parentNode.removeChild(fixedHeader);\n        _this.fixedHeaderElement = null;\n      }\n\n      if (!eventArgs.cancel) {\n        if (_this.getModuleName() === 'autocomplete' && !_this.isServerBlazor) {\n          _this.rippleFun();\n        }\n\n        if (_this.isPopupOpen) {\n          _this.popupObj.hide(new Animation(eventArgs.animation));\n        } else {\n          _this.destroyPopup();\n        }\n      }\n    });\n  };\n\n  DropDownList.prototype.destroyPopup = function () {\n    var popupHolderEle = document.querySelector('#' + this.element.id + '_popup_holder');\n\n    if (this.isServerBlazor && this.serverPopupEle && popupHolderEle) {\n      popupHolderEle.appendChild(this.serverPopupEle); // tslint:disable-next-line\n\n      this.interopAdaptor.invokeMethodAsync('OnServerClosePopup');\n    }\n\n    this.isPopupOpen = false;\n    this.isFilterFocus = false;\n    this.popupObj.destroy();\n    detach(this.popupObj.element);\n  };\n\n  DropDownList.prototype.clickOnBackIcon = function () {\n    this.hidePopup();\n    this.focusIn();\n  };\n  /**\n   * To Initialize the control rendering\n   * @private\n   */\n  // tslint:disable-next-line\n\n\n  DropDownList.prototype.render = function () {\n    if (this.isServerBlazor) {\n      this.inputElement = this.element;\n      this.inputWrapper = {\n        container: this.element.parentElement\n      };\n      this.hiddenElement = this.inputWrapper.container.querySelector('select');\n      this.inputWrapper.buttons = [this.inputWrapper.container.querySelector('.e-input-group-icon.e-ddl-icon')];\n\n      if (this.showClearButton) {\n        this.inputWrapper.clearButton = this.inputWrapper.container.querySelector('.e-clear-icon');\n        Input.wireClearBtnEvents(this.element, this.inputWrapper.clearButton, this.inputWrapper.container);\n      }\n\n      if (this.floatLabelType === 'Auto') {\n        Input.wireFloatingEvents(this.element);\n      }\n\n      Input.bindInitialEvent({\n        element: this.element,\n        buttons: null,\n        customTag: null,\n        floatLabelType: this.floatLabelType,\n        properties: this.properties\n      });\n      this.setFields();\n      this.wireEvent();\n      this.tabIndex = this.element.hasAttribute('tabindex') ? this.element.getAttribute('tabindex') : '0';\n\n      if (!this.enabled) {\n        this.targetElement().tabIndex = -1;\n      }\n\n      if (this.element.hasAttribute('autofocus')) {\n        this.focusIn();\n      }\n\n      this.initial = false;\n    } else {\n      if (this.element.tagName === 'INPUT') {\n        this.inputElement = this.element;\n\n        if (isNullOrUndefined(this.inputElement.getAttribute('role'))) {\n          this.inputElement.setAttribute('role', 'textbox');\n        }\n\n        if (isNullOrUndefined(this.inputElement.getAttribute('type'))) {\n          this.inputElement.setAttribute('type', 'text');\n        }\n      } else {\n        this.inputElement = this.createElement('input', {\n          attrs: {\n            role: 'textbox',\n            type: 'text'\n          }\n        });\n\n        if (this.element.tagName !== this.getNgDirective()) {\n          this.element.style.display = 'none';\n        }\n\n        this.element.parentElement.insertBefore(this.inputElement, this.element);\n        this.preventTabIndex(this.inputElement);\n      }\n\n      var updatedCssClassValues = this.cssClass;\n\n      if (!isNullOrUndefined(this.cssClass) && this.cssClass !== '') {\n        updatedCssClassValues = this.cssClass.replace(/\\s+/g, ' ').trim();\n      }\n\n      this.inputWrapper = Input.createInput({\n        element: this.inputElement,\n        buttons: this.isPopupButton() ? [dropDownListClasses.icon] : null,\n        floatLabelType: this.floatLabelType,\n        properties: {\n          readonly: this.getModuleName() === 'dropdownlist' ? true : this.readonly,\n          placeholder: this.placeholder,\n          cssClass: updatedCssClassValues,\n          enabled: this.enabled,\n          enableRtl: this.enableRtl,\n          showClearButton: this.showClearButton\n        }\n      }, this.createElement);\n\n      if (this.element.tagName === this.getNgDirective()) {\n        this.element.appendChild(this.inputWrapper.container);\n      } else {\n        this.inputElement.parentElement.insertBefore(this.element, this.inputElement);\n      }\n\n      this.hiddenElement = this.createElement('select', {\n        attrs: {\n          'aria-hidden': 'true',\n          'tabindex': '-1',\n          'class': dropDownListClasses.hiddenElement\n        }\n      });\n      prepend([this.hiddenElement], this.inputWrapper.container);\n      this.validationAttribute(this.element, this.hiddenElement);\n      this.setFields();\n      this.inputWrapper.container.style.width = formatUnit(this.width);\n      this.inputWrapper.container.classList.add('e-ddl');\n      this.wireEvent();\n      this.tabIndex = this.element.hasAttribute('tabindex') ? this.element.getAttribute('tabindex') : '0';\n      this.element.removeAttribute('tabindex');\n      var id = this.element.getAttribute('id') ? this.element.getAttribute('id') : getUniqueID('ej2_dropdownlist');\n      this.element.id = id;\n      this.hiddenElement.id = id + '_hidden';\n      this.targetElement().setAttribute('tabindex', this.tabIndex);\n      attributes(this.targetElement(), this.getAriaAttributes());\n      this.updateDataAttribute(this.htmlAttributes);\n      this.setHTMLAttributes();\n\n      if (this.value !== null || this.activeIndex !== null || this.text !== null) {\n        this.initValue();\n      } else if (this.element.tagName === 'SELECT' && this.element.options[0]) {\n        var selectElement = this.element;\n        this.value = selectElement.options[selectElement.selectedIndex].value;\n        this.text = isNullOrUndefined(this.value) ? null : selectElement.options[selectElement.selectedIndex].textContent;\n        this.initValue();\n      }\n\n      this.preventTabIndex(this.element);\n\n      if (!this.enabled) {\n        this.targetElement().tabIndex = -1;\n      }\n\n      this.initial = false;\n      this.element.style.opacity = '';\n\n      this.inputElement.onselect = function (e) {\n        e.stopImmediatePropagation();\n      };\n\n      this.inputElement.onchange = function (e) {\n        e.stopImmediatePropagation();\n      };\n\n      if (this.element.hasAttribute('autofocus')) {\n        this.focusIn();\n      }\n\n      if (!isNullOrUndefined(this.text)) {\n        this.inputElement.setAttribute('value', this.text);\n      }\n    }\n\n    this.renderComplete();\n  };\n\n  ;\n\n  DropDownList.prototype.setFooterTemplate = function (popupEle) {\n    var compiledString;\n\n    if (this.footer) {\n      this.footer.innerHTML = '';\n    } else {\n      this.footer = this.createElement('div');\n      addClass([this.footer], dropDownListClasses.footer);\n    }\n\n    var footercheck = this.dropdownCompiler(this.footerTemplate);\n\n    if (footercheck) {\n      compiledString = compile(document.querySelector(this.footerTemplate).innerHTML.trim());\n    } else {\n      compiledString = compile(this.footerTemplate);\n    }\n\n    for (var _i = 0, _a = compiledString({}, null, null, this.footerTemplateId, this.isStringTemplate); _i < _a.length; _i++) {\n      var item = _a[_i];\n      this.footer.appendChild(item);\n    }\n\n    this.DropDownBaseupdateBlazorTemplates(false, false, false, false, false, false, true);\n    append([this.footer], popupEle);\n  };\n\n  DropDownList.prototype.setHeaderTemplate = function (popupEle) {\n    var compiledString;\n\n    if (this.header) {\n      this.header.innerHTML = '';\n    } else {\n      this.header = this.createElement('div');\n      addClass([this.header], dropDownListClasses.header);\n    }\n\n    var headercheck = this.dropdownCompiler(this.headerTemplate);\n\n    if (headercheck) {\n      compiledString = compile(document.querySelector(this.headerTemplate).innerHTML.trim());\n    } else {\n      compiledString = compile(this.headerTemplate);\n    }\n\n    for (var _i = 0, _a = compiledString({}, null, null, this.headerTemplateId, this.isStringTemplate); _i < _a.length; _i++) {\n      var item = _a[_i];\n      this.header.appendChild(item);\n    }\n\n    this.DropDownBaseupdateBlazorTemplates(false, false, false, false, false, true, false);\n    var contentEle = popupEle.querySelector('div.e-content');\n    popupEle.insertBefore(this.header, contentEle);\n  };\n\n  DropDownList.prototype.setOldText = function (text) {\n    this.text = text;\n  };\n\n  DropDownList.prototype.setOldValue = function (value) {\n    this.value = value;\n  };\n\n  DropDownList.prototype.refreshPopup = function () {\n    if (!isNullOrUndefined(this.popupObj) && document.body.contains(this.popupObj.element) && (this.allowFiltering && !(Browser.isDevice && this.isFilterLayout()) || this.getModuleName() === 'autocomplete')) {\n      removeClass([this.popupObj.element], 'e-popup-close');\n      this.popupObj.refreshPosition(this.inputWrapper.container);\n      this.popupObj.resolveCollision();\n    }\n  };\n\n  DropDownList.prototype.checkDatasource = function (newProp) {\n    if (newProp.dataSource && !isNullOrUndefined(Object.keys(newProp.dataSource)) && this.itemTemplate && this.allowFiltering) {\n      this.list = null;\n      this.actionCompleteData = {\n        ulElement: null,\n        list: null,\n        isUpdated: false\n      };\n    }\n\n    var isChangeValue = Object.keys(newProp).indexOf('value') !== -1 && isNullOrUndefined(newProp.value);\n    var isChangeText = Object.keys(newProp).indexOf('text') !== -1 && isNullOrUndefined(newProp.text);\n\n    if (this.getModuleName() !== 'autocomplete' && this.allowFiltering && (isChangeValue || isChangeText)) {\n      this.itemData = null;\n    }\n  };\n\n  DropDownList.prototype.updateDataSource = function (props) {\n    if (this.inputElement.value !== '' || !isNullOrUndefined(props) && (isNullOrUndefined(props.dataSource) || !(props.dataSource instanceof DataManager) && props.dataSource.length === 0)) {\n      this.clearAll(null, props);\n    }\n\n    if (!(!isNullOrUndefined(props) && (isNullOrUndefined(props.dataSource) || !(props.dataSource instanceof DataManager) && props.dataSource.length === 0)) || !(props.dataSource === [])) {\n      this.resetList(this.dataSource);\n    }\n\n    if (!this.isCustomFilter && !this.isFilterFocus && document.activeElement !== this.filterInput) {\n      this.checkCustomValue();\n    }\n  };\n\n  DropDownList.prototype.checkCustomValue = function () {\n    this.itemData = this.getDataByValue(this.value);\n    var dataItem = this.getItemData();\n    this.setProperties({\n      'value': dataItem.value,\n      'text': dataItem.text\n    });\n  };\n\n  DropDownList.prototype.updateInputFields = function () {\n    if (this.getModuleName() === 'dropdownlist') {\n      Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);\n    }\n  };\n  /**\n   * Dynamically change the value of properties.\n   * @private\n   */\n\n\n  DropDownList.prototype.onPropertyChanged = function (newProp, oldProp) {\n    if (this.getModuleName() === 'dropdownlist') {\n      if (!this.isServerBlazor) {\n        this.checkDatasource(newProp);\n        this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);\n      }\n    }\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'query':\n        case 'dataSource':\n          break;\n\n        case 'htmlAttributes':\n          this.setHTMLAttributes();\n          break;\n\n        case 'width':\n          this.setEleWidth(newProp.width);\n          break;\n\n        case 'placeholder':\n          Input.setPlaceholder(newProp.placeholder, this.inputElement);\n          break;\n\n        case 'filterBarPlaceholder':\n          if (this.filterInput) {\n            Input.setPlaceholder(newProp.filterBarPlaceholder, this.filterInput);\n          }\n\n          break;\n\n        case 'readonly':\n          if (this.getModuleName() !== 'dropdownlist') {\n            Input.setReadonly(newProp.readonly, this.inputElement);\n          }\n\n          break;\n\n        case 'cssClass':\n          this.setCssClass(newProp.cssClass, oldProp.cssClass);\n          break;\n\n        case 'enableRtl':\n          this.setEnableRtl();\n          break;\n\n        case 'enabled':\n          this.setEnable();\n          break;\n\n        case 'text':\n          if (newProp.text === null) {\n            this.clearAll();\n            break;\n          }\n\n          if (!this.list) {\n            if (this.dataSource instanceof DataManager) {\n              this.initRemoteRender = true;\n            }\n\n            this.renderList();\n          }\n\n          if (!this.initRemoteRender) {\n            var li = this.getElementByText(newProp.text);\n\n            if (!this.checkValidLi(li)) {\n              if (this.liCollections && this.liCollections.length === 100 && this.getModuleName() === 'autocomplete' && this.listData.length > 100) {\n                this.setSelectionData(newProp.text, oldProp.text, 'text');\n              } else if (!this.isServerBlazor) {\n                this.setOldText(oldProp.text);\n              }\n            }\n\n            this.updateInputFields();\n          }\n\n          break;\n\n        case 'value':\n          if (newProp.value === null) {\n            this.clearAll();\n            break;\n          }\n\n          this.notify('beforeValueChange', {\n            newProp: newProp\n          }); // gird component value type change\n\n          if (!this.list) {\n            if (this.dataSource instanceof DataManager) {\n              this.initRemoteRender = true;\n            }\n\n            this.renderList();\n          }\n\n          if (!this.initRemoteRender) {\n            var item = this.getElementByValue(newProp.value);\n\n            if (!this.checkValidLi(item)) {\n              if (this.liCollections && this.liCollections.length === 100 && this.getModuleName() === 'autocomplete' && this.listData.length > 100) {\n                this.setSelectionData(newProp.value, oldProp.value, 'value');\n              } else if (!this.isServerBlazor) {\n                this.setOldValue(oldProp.value);\n              }\n            }\n\n            this.updateInputFields();\n          }\n\n          break;\n\n        case 'index':\n          if (newProp.index === null) {\n            this.clearAll();\n            break;\n          }\n\n          if (!this.list) {\n            if (this.dataSource instanceof DataManager) {\n              this.initRemoteRender = true;\n            }\n\n            this.renderList();\n          }\n\n          if (!this.initRemoteRender && this.liCollections) {\n            var element = this.liCollections[newProp.index];\n\n            if (!this.checkValidLi(element)) {\n              if (this.liCollections && this.liCollections.length === 100 && this.getModuleName() === 'autocomplete' && this.listData.length > 100) {\n                this.setSelectionData(newProp.index, oldProp.index, 'index');\n              } else if (!this.isServerBlazor) {\n                this.index = oldProp.index;\n              }\n            }\n\n            this.updateInputFields();\n          }\n\n          break;\n\n        case 'footerTemplate':\n          if (this.popupObj) {\n            this.setFooterTemplate(this.popupObj.element);\n          }\n\n          break;\n\n        case 'headerTemplate':\n          if (this.popupObj) {\n            this.setHeaderTemplate(this.popupObj.element);\n          }\n\n          break;\n\n        case 'valueTemplate':\n          if (!isNullOrUndefined(this.itemData) && this.valueTemplate != null) {\n            this.setValueTemplate();\n          }\n\n          break;\n\n        case 'allowFiltering':\n          if (this.allowFiltering) {\n            this.actionCompleteData = {\n              ulElement: this.ulElement,\n              list: this.listData,\n              isUpdated: true\n            };\n            this.updateSelectElementData(this.allowFiltering);\n          }\n\n          break;\n\n        case 'floatLabelType':\n          Input.removeFloating(this.inputWrapper);\n          Input.addFloating(this.inputElement, newProp.floatLabelType, this.placeholder, this.createElement);\n          break;\n\n        case 'showClearButton':\n          Input.setClearButton(newProp.showClearButton, this.inputElement, this.inputWrapper, null, this.createElement);\n          this.bindClearEvent();\n          break;\n\n        default:\n          var ddlProps = void 0;\n          ddlProps = this.getPropObject(prop, newProp, oldProp);\n\n          _super.prototype.onPropertyChanged.call(this, ddlProps.newProperty, ddlProps.oldProperty);\n\n          break;\n      }\n    }\n  };\n\n  DropDownList.prototype.checkValidLi = function (element) {\n    if (this.isValidLI(element)) {\n      this.setSelection(element, null);\n      return true;\n    }\n\n    return false;\n  };\n\n  DropDownList.prototype.setSelectionData = function (newProp, oldProp, prop) {\n    var _this = this;\n\n    var li;\n\n    this.updateListValues = function () {\n      if (prop === 'text') {\n        li = _this.getElementByText(newProp);\n\n        if (!_this.checkValidLi(li)) {\n          _this.setOldText(oldProp);\n        }\n      } else if (prop === 'value') {\n        li = _this.getElementByValue(newProp);\n\n        if (!_this.checkValidLi(li)) {\n          _this.setOldValue(oldProp);\n        }\n      } else if (prop === 'index') {\n        li = _this.liCollections[newProp];\n\n        if (!_this.checkValidLi(li)) {\n          _this.index = oldProp;\n        }\n      }\n    };\n  };\n\n  DropDownList.prototype.setCssClass = function (newClass, oldClass) {\n    if (!isNullOrUndefined(oldClass)) {\n      oldClass = oldClass.replace(/\\s+/g, ' ').trim();\n    }\n\n    if (!isNullOrUndefined(newClass)) {\n      newClass = newClass.replace(/\\s+/g, ' ').trim();\n    }\n\n    Input.setCssClass(newClass, [this.inputWrapper.container], oldClass);\n\n    if (this.popupObj) {\n      Input.setCssClass(newClass, [this.popupObj.element], oldClass);\n    }\n  };\n  /**\n   * Return the module name.\n   * @private\n   */\n\n\n  DropDownList.prototype.getModuleName = function () {\n    return 'dropdownlist';\n  };\n  /**\n   * Opens the popup that displays the list of items.\n   * @returns void.\n   */\n\n\n  DropDownList.prototype.showPopup = function () {\n    if (!this.enabled) {\n      return;\n    }\n\n    if (isBlazor() && this.itemTemplate) {\n      this.DropDownBaseupdateBlazorTemplates(true, false, false, false);\n    }\n\n    if (this.beforePopupOpen) {\n      this.refreshPopup();\n      return;\n    }\n\n    this.beforePopupOpen = true;\n\n    if (this.isFiltering() && !this.isActive && this.actionCompleteData.list && this.actionCompleteData.list[0]) {\n      this.isActive = true;\n      this.onActionComplete(this.actionCompleteData.ulElement, this.actionCompleteData.list, null, true);\n    } else if (isNullOrUndefined(this.list) || !isUndefined(this.list) && (this.list.classList.contains(dropDownBaseClasses.noData) || this.list.querySelectorAll('.' + dropDownBaseClasses.li).length <= 0)) {\n      this.renderList();\n    } else if (this.isFiltering() && this.isServerBlazor) {\n      this.renderList();\n    }\n\n    if (!this.isServerBlazor) {\n      this.invokeRenderPopup();\n    }\n\n    var popupHolderEle = !this.isFiltering() || document.querySelector('#' + this.element.id + '_popup_holder');\n    var isDropdownComp = this.getModuleName() === 'dropdownlist' || !this.isFiltering();\n\n    if (this.isServerBlazor && popupHolderEle && !isNullOrUndefined(this.list) && isDropdownComp) {\n      this.invokeRenderPopup();\n    }\n  };\n\n  DropDownList.prototype.invokeRenderPopup = function () {\n    if (Browser.isDevice && this.isFilterLayout()) {\n      var proxy_2 = this;\n\n      window.onpopstate = function () {\n        proxy_2.hidePopup();\n      };\n\n      history.pushState({}, '');\n    }\n\n    if (!isNullOrUndefined(this.list.children[0]) || this.list.classList.contains(dropDownBaseClasses.noData)) {\n      this.renderPopup();\n    }\n\n    attributes(this.targetElement(), {\n      'aria-activedescendant': this.selectedLI ? this.selectedLI.id : null\n    });\n  };\n\n  DropDownList.prototype.clientRenderPopup = function (data, popupEle) {\n    if (popupEle) {\n      this.serverPopupEle = popupEle;\n      this.list = popupEle.querySelector('.e-dropdownbase.e-content') ? popupEle.querySelector('.e-dropdownbase.e-content') : this.list;\n      this.ulElement = this.list.querySelector('ul');\n\n      if (isNullOrUndefined(this.ulElement) && !this.list.classList.contains(dropDownBaseClasses.noData)) {\n        addClass([this.list], [dropDownBaseClasses.noData]);\n      }\n\n      this.liCollections = this.ulElement ? this.ulElement.querySelectorAll('.' + dropDownBaseClasses.li) : [];\n      this.listData = data;\n\n      if (this.getModuleName() === 'autocomplete' && this.liCollections.length > 0) {\n        this.renderHightSearch();\n      }\n\n      this.initRemoteRender = false;\n\n      if (!this.isPopupOpen) {\n        this.serverBlazorUpdateSelection();\n      }\n\n      this.unWireListEvents();\n      this.wireListEvents();\n\n      if (this.isServerIncrementalSearch && this.searchKeyEvent) {\n        this.isServerIncrementalSearch = false;\n        this.initial = false;\n        this.onServerIncrementalSearch(this.searchKeyEvent);\n      }\n\n      if (this.isServerNavigation && this.searchKeyEvent) {\n        if (this.searchKeyEvent.action === 'down' || this.searchKeyEvent.action === 'up') {\n          this.isServerNavigation = false;\n          this.updateUpDownAction(this.searchKeyEvent);\n        } else if (this.searchKeyEvent.action === 'home' || this.searchKeyEvent.action === 'end') {\n          this.isServerNavigation = false;\n          this.updateHomeEndAction(this.searchKeyEvent);\n        }\n      }\n\n      if (this.beforePopupOpen) {\n        this.invokeRenderPopup();\n      }\n\n      if (this.getModuleName() !== 'dropdownlist') {\n        this.onActionComplete(this.ulElement, this.listData);\n      }\n    } else if (data != null && this.listData !== data) {\n      this.listData = data;\n      this.initRemoteRender = false;\n    }\n  };\n\n  DropDownList.prototype.renderHightSearch = function () {// update high light search \n  };\n\n  DropDownList.prototype.updateclientItemData = function (data) {\n    this.listData = data;\n  };\n\n  DropDownList.prototype.initValueItemData = function (selectData) {\n    this.itemData = selectData;\n    this.previousValue = this.value;\n    this.initial = false;\n  };\n\n  DropDownList.prototype.serverUpdateListElement = function (data, popupEle) {\n    this.listData = data;\n\n    if (this.ulElement) {\n      this.liCollections = this.ulElement.querySelectorAll('.' + dropDownBaseClasses.li);\n    }\n  };\n  /**\n   * Hides the popup if it is in an open state.\n   * @returns void.\n   */\n\n\n  DropDownList.prototype.hidePopup = function (e) {\n    var isHeader = this.headerTemplate ? true : false;\n    var isFooter = this.headerTemplate ? true : false;\n    this.DropDownBaseresetBlazorTemplates(false, false, false, false, false, isHeader, isFooter);\n\n    if (this.isEscapeKey && this.getModuleName() === 'dropdownlist') {\n      Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);\n      this.isEscapeKey = false;\n\n      if (!isNullOrUndefined(this.index)) {\n        var element = this.findListElement(this.ulElement, 'li', 'data-value', this.value);\n        this.selectedLI = this.liCollections[this.index] || element;\n\n        if (this.selectedLI) {\n          this.updateSelectedItem(this.selectedLI, null, true);\n\n          if (this.valueTemplate && this.itemData !== null) {\n            this.setValueTemplate();\n          }\n        }\n      } else {\n        this.resetSelection();\n      }\n    }\n\n    this.closePopup();\n    var dataItem = this.getItemData();\n    var isSelectVal = this.isServerBlazor ? !isNullOrUndefined(this.value) : !isNullOrUndefined(this.selectedLI);\n\n    if (this.inputElement.value.trim() === '' && !this.isInteracted && (this.isSelectCustom || isSelectVal && this.inputElement.value !== dataItem.text)) {\n      this.isSelectCustom = false;\n      this.clearAll(e);\n    }\n  };\n  /**\n   * Sets the focus on the component for interaction.\n   * @returns void.\n   */\n\n\n  DropDownList.prototype.focusIn = function (e) {\n    if (!this.enabled) {\n      return;\n    }\n\n    if (this.targetElement().classList.contains(dropDownListClasses.disable)) {\n      return;\n    }\n\n    var isFocused = false;\n\n    if (this.preventFocus && Browser.isDevice) {\n      this.inputWrapper.container.tabIndex = 1;\n      this.inputWrapper.container.focus();\n      this.preventFocus = false;\n      isFocused = true;\n    }\n\n    if (!isFocused) {\n      this.targetElement().focus();\n    }\n\n    addClass([this.inputWrapper.container], [dropDownListClasses.inputFocus]);\n    this.onFocus(e);\n  };\n  /**\n   * Moves the focus from the component if the component is already focused.\n   * @returns void.\n   */\n\n\n  DropDownList.prototype.focusOut = function (e) {\n    if (!this.enabled) {\n      return;\n    }\n\n    this.isTyped = true;\n    this.hidePopup(e);\n    this.targetElement().blur();\n    removeClass([this.inputWrapper.container], [dropDownListClasses.inputFocus]);\n  };\n  /**\n   * Removes the component from the DOM and detaches all its related event handlers. Also it removes the attributes and classes.\n   * @method destroy\n   * @return {void}.\n   */\n\n\n  DropDownList.prototype.destroy = function () {\n    this.isActive = false;\n\n    if (!this.isServerBlazor || this.popupObj && document.body.contains(this.popupObj.element)) {\n      this.hidePopup();\n    }\n\n    this.unWireEvent();\n\n    if (this.list) {\n      this.unWireListEvents();\n\n      if (this.isServerBlazor) {\n        if (this.fields.groupBy && !this.isGroupChecking) {\n          EventHandler.remove(this.list, 'scroll', this.setFloatingHeader);\n        }\n      }\n    }\n\n    if (!this.isServerBlazor) {\n      if (this.element && !this.element.classList.contains('e-' + this.getModuleName())) {\n        return;\n      }\n\n      var attrArray = ['readonly', 'aria-disabled', 'aria-placeholder', 'placeholder', 'aria-owns', 'aria-labelledby', 'aria-haspopup', 'aria-expanded', 'aria-activedescendant', 'autocomplete', 'aria-readonly', 'autocorrect', 'autocapitalize', 'spellcheck', 'aria-autocomplete', 'aria-live', 'aria-describedby', 'aria-label'];\n\n      for (var i = 0; i < attrArray.length; i++) {\n        this.inputElement.removeAttribute(attrArray[i]);\n      }\n\n      this.inputElement.setAttribute('tabindex', this.tabIndex);\n      this.inputElement.classList.remove('e-input');\n      Input.setValue('', this.inputElement, this.floatLabelType, this.showClearButton);\n      this.element.style.display = 'block';\n\n      if (this.inputWrapper.container.parentElement.tagName === this.getNgDirective()) {\n        detach(this.inputWrapper.container);\n      } else {\n        this.inputWrapper.container.parentElement.insertBefore(this.element, this.inputWrapper.container);\n        detach(this.inputWrapper.container);\n      }\n\n      _super.prototype.destroy.call(this);\n    }\n  };\n\n  ;\n  /**\n   * Gets all the list items bound on this component.\n   * @returns Element[].\n   */\n\n  DropDownList.prototype.getItems = function () {\n    if (!this.list) {\n      if (this.dataSource instanceof DataManager) {\n        this.initRemoteRender = true;\n      }\n\n      this.renderList();\n    }\n\n    return this.ulElement ? _super.prototype.getItems.call(this) : [];\n  };\n  /**\n   * Gets the data Object that matches the given value.\n   * @param { string | number } value - Specifies the value of the list item.\n   * @returns Object.\n   * @blazorType object\n   */\n\n\n  DropDownList.prototype.getDataByValue = function (value) {\n    return _super.prototype.getDataByValue.call(this, value);\n  };\n  /**\n   * Allows you to clear the selected values from the component.\n   * @returns void.\n   */\n\n\n  DropDownList.prototype.clear = function () {\n    this.value = null;\n  };\n\n  __decorate([Property(null)], DropDownList.prototype, \"cssClass\", void 0);\n\n  __decorate([Property('100%')], DropDownList.prototype, \"width\", void 0);\n\n  __decorate([Property('300px')], DropDownList.prototype, \"popupHeight\", void 0);\n\n  __decorate([Property('100%')], DropDownList.prototype, \"popupWidth\", void 0);\n\n  __decorate([Property(null)], DropDownList.prototype, \"placeholder\", void 0);\n\n  __decorate([Property(null)], DropDownList.prototype, \"filterBarPlaceholder\", void 0);\n\n  __decorate([Property({})], DropDownList.prototype, \"htmlAttributes\", void 0);\n\n  __decorate([Property(null)], DropDownList.prototype, \"query\", void 0);\n\n  __decorate([Property(null)], DropDownList.prototype, \"valueTemplate\", void 0);\n\n  __decorate([Property(null)], DropDownList.prototype, \"headerTemplate\", void 0);\n\n  __decorate([Property(null)], DropDownList.prototype, \"footerTemplate\", void 0);\n\n  __decorate([Property(false)], DropDownList.prototype, \"allowFiltering\", void 0);\n\n  __decorate([Property(false)], DropDownList.prototype, \"readonly\", void 0);\n\n  __decorate([Property(null)], DropDownList.prototype, \"text\", void 0);\n\n  __decorate([Property(null)], DropDownList.prototype, \"value\", void 0);\n\n  __decorate([Property(null)], DropDownList.prototype, \"index\", void 0);\n\n  __decorate([Property('Never')], DropDownList.prototype, \"floatLabelType\", void 0);\n\n  __decorate([Property(false)], DropDownList.prototype, \"showClearButton\", void 0);\n\n  __decorate([Event()], DropDownList.prototype, \"filtering\", void 0);\n\n  __decorate([Event()], DropDownList.prototype, \"change\", void 0);\n\n  __decorate([Event()], DropDownList.prototype, \"beforeOpen\", void 0);\n\n  __decorate([Event()], DropDownList.prototype, \"open\", void 0);\n\n  __decorate([Event()], DropDownList.prototype, \"close\", void 0);\n\n  __decorate([Event()], DropDownList.prototype, \"blur\", void 0);\n\n  __decorate([Event()], DropDownList.prototype, \"focus\", void 0);\n\n  DropDownList = __decorate([NotifyPropertyChanges], DropDownList);\n  return DropDownList;\n}(DropDownBase);\n\nexport { DropDownList };","map":null,"metadata":{},"sourceType":"module"}