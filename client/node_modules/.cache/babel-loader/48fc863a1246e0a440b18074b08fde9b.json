{"ast":null,"code":"import { DictionaryProperties } from './../input-output/pdf-dictionary-properties';\nimport { PdfStream } from './../primitives/pdf-stream';\nimport { PdfArray } from './../primitives/pdf-array';\nimport { PdfNumber } from './../primitives/pdf-number';\nimport { PdfName } from './../primitives/pdf-name';\nimport { PdfDictionary } from './../primitives/pdf-dictionary';\nimport { PdfString } from './../primitives/pdf-string';\n/**\n * `PdfReference` class is used to perform reference related primitive operations.\n * @private\n */\n\nvar PdfReference =\n/** @class */\nfunction () {\n  function PdfReference(objNumber, genNumber) {\n    /**\n     * Holds the `index` number of the object.\n     * @default -1\n     * @private\n     */\n    this.index3 = -1;\n    /**\n     * Internal variable to store the `position`.\n     * @default -1\n     * @private\n     */\n\n    this.position3 = -1;\n    /**\n     * Holds the `object number`.\n     * @default 0\n     * @private\n     */\n\n    this.objNumber = 0;\n    /**\n     * Holds the `generation number` of the object.\n     * @default 0\n     * @private\n     */\n\n    this.genNumber = 0;\n\n    if (typeof objNumber === 'number' && typeof genNumber === 'number') {\n      this.objNumber = objNumber;\n      this.genNumber = genNumber; // } else if (typeof objNum === 'string' && typeof genNum === 'string') {\n    } else {\n      this.objNumber = Number(objNumber);\n      this.genNumber = Number(genNumber);\n    }\n  }\n\n  Object.defineProperty(PdfReference.prototype, \"status\", {\n    //Property\n\n    /**\n     * Gets or sets the `Status` of the specified object.\n     * @private\n     */\n    get: function () {\n      return this.status3;\n    },\n    set: function (value) {\n      this.status3 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfReference.prototype, \"isSaving\", {\n    /**\n     * Gets or sets a value indicating whether this document `is saving` or not.\n     * @private\n     */\n    get: function () {\n      return this.isSaving3;\n    },\n    set: function (value) {\n      this.isSaving3 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfReference.prototype, \"objectCollectionIndex\", {\n    /**\n     * Gets or sets the `index` value of the specified object.\n     * @private\n     */\n    get: function () {\n      return this.index3;\n    },\n    set: function (value) {\n      this.index3 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfReference.prototype, \"position\", {\n    /**\n     * Gets or sets the `position` of the object.\n     * @private\n     */\n    get: function () {\n      return this.position3;\n    },\n    set: function (value) {\n      this.position3 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfReference.prototype, \"clonedObject\", {\n    /**\n     * Returns `cloned object`.\n     * @private\n     */\n    get: function () {\n      var returnObject3 = null;\n      return returnObject3;\n    },\n    enumerable: true,\n    configurable: true\n  }); //IPdfPrimitives methods\n\n  /**\n   * `Saves` the object.\n   * @private\n   */\n\n  PdfReference.prototype.save = function (writer) {\n    writer.write(this.toString());\n  };\n  /**\n   * Returns a `string` representing the object.\n   * @private\n   */\n\n\n  PdfReference.prototype.toString = function () {\n    return this.objNumber.toString() + ' ' + this.genNumber.toString() + ' R';\n  };\n  /**\n   * Creates a `deep copy` of the IPdfPrimitive object.\n   * @private\n   */\n\n\n  PdfReference.prototype.clone = function (crossTable) {\n    return null;\n  };\n\n  return PdfReference;\n}();\n\nexport { PdfReference };\n/**\n * `PdfReferenceHolder` class is used to perform reference holder related primitive operations.\n * @private\n */\n\nvar PdfReferenceHolder =\n/** @class */\nfunction () {\n  function PdfReferenceHolder(obj1, obj2) {\n    /**\n     * Holds the `index` number of the object.\n     * @default -1\n     * @private\n     */\n    this.index4 = -1;\n    /**\n     * Internal variable to store the `position`.\n     * @default -1\n     * @private\n     */\n\n    this.position4 = -1;\n    /**\n     * The `index` of the object within the object collection.\n     * @default -1\n     * @private\n     */\n\n    this.objectIndex = -1;\n    /**\n     * @hidden\n     * @private\n     */\n\n    this.dictionaryProperties = new DictionaryProperties(); // if (typeof obj2 === 'undefined') {\n\n    this.initialize(obj1); // }\n    // else {\n    //     if (obj2 === null) {\n    //         throw new Error('ArgumentNullException : crossTable');\n    //     }\n    //     if (obj1 === null) {\n    //         throw new Error('ArgumentNullException : reference');\n    //     }\n    //     this.crossTable = obj2;\n    //     let tempObj1 : PdfReference = <PdfReference>obj1;\n    //     this.reference = tempObj1;\n    // }\n  }\n\n  Object.defineProperty(PdfReferenceHolder.prototype, \"status\", {\n    //Properties\n\n    /**\n     * Gets or sets the `Status` of the specified object.\n     * @private\n     */\n    get: function () {\n      return this.status4;\n    },\n    set: function (value) {\n      this.status4 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfReferenceHolder.prototype, \"isSaving\", {\n    /**\n     * Gets or sets a value indicating whether this document `is saving` or not.\n     * @private\n     */\n    get: function () {\n      return this.isSaving4;\n    },\n    set: function (value) {\n      this.isSaving4 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfReferenceHolder.prototype, \"objectCollectionIndex\", {\n    /**\n     * Gets or sets the `index` value of the specified object.\n     * @private\n     */\n    get: function () {\n      return this.index4;\n    },\n    set: function (value) {\n      this.index4 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfReferenceHolder.prototype, \"position\", {\n    /**\n     * Gets or sets the `position` of the object.\n     * @private\n     */\n    get: function () {\n      return this.position4;\n    },\n    set: function (value) {\n      this.position4 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfReferenceHolder.prototype, \"clonedObject\", {\n    /**\n     * Returns `cloned object`.\n     * @private\n     */\n    get: function () {\n      return null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfReferenceHolder.prototype, \"object\", {\n    /**\n     * Gets the `object` the reference is of.\n     * @private\n     */\n    get: function () {\n      // if ((this.reference != null) || (this.object == null)) {\n      //     this.object = this.GetterObject();\n      // }\n      return this.primitiveObject;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfReferenceHolder.prototype, \"reference\", {\n    /**\n     * Gets the `reference`.\n     * @private\n     */\n    get: function () {\n      return this.pdfReference;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfReferenceHolder.prototype, \"index\", {\n    /**\n     * Gets the `index` of the object.\n     * @private\n     */\n    get: function () {\n      // let items : PdfMainObjectCollection = this.crossTable.PdfObjects;\n      // this.objectIndex = items.GetObjectIndex(this.reference);\n      // if (this.objectIndex < 0) {\n      //     let obj : IPdfPrimitive = this.crossTable.GetObject(this.reference);\n      //     this.objectIndex = items.Count - 1;\n      // }\n      return this.objectIndex;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfReferenceHolder.prototype, \"element\", {\n    /**\n     * Gets the `element`.\n     * @private\n     */\n    get: function () {\n      return this.primitiveObject;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PdfReferenceHolder.prototype.initialize = function (obj1) {\n    if (obj1 instanceof PdfArray || obj1 instanceof PdfDictionary || obj1 instanceof PdfName || obj1 instanceof PdfNumber || obj1 instanceof PdfStream || obj1 instanceof PdfReference || obj1 instanceof PdfString) {\n      this.primitiveObject = obj1;\n    } else {\n      var tempObj = obj1;\n      this.initialize(tempObj.element);\n    }\n  };\n  /**\n   * `Writes` a reference into a PDF document.\n   * @private\n   */\n\n\n  PdfReferenceHolder.prototype.save = function (writer) {\n    // if (writer == null) {\n    //     throw new Error('ArgumentNullException : writer');\n    // }\n    var position = writer.position;\n    var cTable = writer.document.crossTable; // if (cTable.Document instanceof PdfDocument) {\n\n    this.object.isSaving = true; // }\n\n    var reference = null; // if (writer.Document.FileStructure.IncrementalUpdate === true && writer.Document.isStreamCopied === true) {\n    //     if (this.reference === null) {\n    //         reference = cTable.GetReference(this.Object);\n    //     } else {\n    //         reference = this.reference;\n    //     }\n    // } else {\n    //     reference = cTable.GetReference(this.Object);\n    // }\n    // if (!(writer.Document.FileStructure.IncrementalUpdate === true && writer.Document.isStreamCopied === true)) {\n\n    reference = cTable.getReference(this.object); // }\n    // if (writer.Position !== position) {\n    //     writer.Position = position;\n    // }\n\n    reference.save(writer);\n  };\n  /**\n   * Creates a `copy of PdfReferenceHolder`.\n   * @private\n   */\n\n\n  PdfReferenceHolder.prototype.clone = function (crossTable) {\n    var refHolder = null;\n    var temp = null;\n    var refNum = '';\n    var reference = null; // Restricts addition of same object multiple time.\n\n    /* if (this.Reference != null && this.crossTable != null && this.crossTable.PageCorrespondance.containsKey(this.Reference)) {\n        refHolder = new PdfReferenceHolder(this.crossTable.PageCorrespondance.getValue(this.Reference) as PdfReference, crossTable);\n        return refHolder;\n    }\n    if (Object instanceof PdfNumber) {\n        return new PdfNumber((Object as PdfNumber).IntValue);\n    }\n    */\n    // if (Object instanceof PdfDictionary) {\n    //     // Meaning the referenced page is not available for import.\n    //     let type : PdfName = new PdfName(this.dictionaryProperties.type);\n    //     let dict : PdfDictionary = Object as PdfDictionary;\n    //     if (dict.ContainsKey(type)) {\n    //         let pageName : PdfName = dict.Items.getValue(type.Value) as PdfName;\n    //         if (pageName !== null) {\n    //             if (pageName.Value === 'Page') {\n    //                 return new PdfNull();\n    //             }\n    //         }\n    //     }\n    // }\n\n    /* if (Object instanceof PdfName) {\n        return new PdfName ((Object as PdfName ).Value);\n    }\n    */\n    // Resolves circular references.\n    // if (crossTable.PrevReference !== null && (crossTable.PrevReference.indexOf(this.Reference) !== -1)) {\n    //     let obj : IPdfPrimitive = this.crossTable.GetObject(this.Reference).ClonedObject;\n    //     if (obj !== null) {\n    //         reference = crossTable.GetReference(obj);\n    //         return new PdfReferenceHolder(reference, crossTable);\n    //     } else {\n    //         return new PdfNull();\n    //     }\n    // }\n\n    /*if (this.Reference !== null) {\n        crossTable.PrevReference.push(this.Reference);\n    }\n    reference = crossTable.GetReference(temp);\n    refHolder = new PdfReferenceHolder(reference, crossTable);\n    return refHolder;\n    */\n\n    return null;\n  };\n\n  return PdfReferenceHolder;\n}();\n\nexport { PdfReferenceHolder };","map":null,"metadata":{},"sourceType":"module"}