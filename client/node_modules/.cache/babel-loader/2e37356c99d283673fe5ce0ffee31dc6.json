{"ast":null,"code":"/**\n * Represents the `collection of pages in a section`.\n * @private\n */\nvar PdfSectionPageCollection =\n/** @class */\nfunction () {\n  // Constructors\n\n  /**\n   * Initializes a new instance of the `PdfSectionPageCollection` class.\n   * @private\n   */\n  function PdfSectionPageCollection(section) {\n    //  Fields\n\n    /**\n     * @hidden\n     * @private\n     */\n    this.pdfSection = null;\n\n    if (section == null) {\n      throw Error('ArgumentNullException(\"section\")');\n    }\n\n    this.section = section;\n  }\n\n  Object.defineProperty(PdfSectionPageCollection.prototype, \"section\", {\n    // Properties\n\n    /**\n     * Gets the `PdfPage` at the specified index.\n     * @private\n     */\n    get: function () {\n      return this.pdfSection;\n    },\n    set: function (value) {\n      this.pdfSection = value;\n    },\n    enumerable: true,\n    configurable: true\n  }); // Public Methods\n\n  /**\n   * `Determines` whether the specified page is within the collection.\n   * @private\n   */\n\n  PdfSectionPageCollection.prototype.contains = function (page) {\n    return this.section.contains(page);\n  };\n  /**\n   * `Removes` the specified page from collection.\n   * @private\n   */\n\n\n  PdfSectionPageCollection.prototype.remove = function (page) {\n    this.section.remove(page);\n  };\n  /**\n   * `Adds` a new page from collection.\n   * @private\n   */\n\n\n  PdfSectionPageCollection.prototype.add = function () {\n    return this.section.add();\n  };\n\n  return PdfSectionPageCollection;\n}();\n\nexport { PdfSectionPageCollection };","map":null,"metadata":{},"sourceType":"module"}