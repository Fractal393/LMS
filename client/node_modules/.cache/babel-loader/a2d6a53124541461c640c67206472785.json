{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _api = require('../api');\n\nvar _api2 = _interopRequireDefault(_api);\n\nvar _sanitizeFilename = require('sanitize-filename');\n\nvar _sanitizeFilename2 = _interopRequireDefault(_sanitizeFilename);\n\nvar _onFailError = require('../utils/onFailError');\n\nvar _onFailError2 = _interopRequireDefault(_onFailError);\n\nvar _iconsSvg = require('../icons-svg');\n\nvar _iconsSvg2 = _interopRequireDefault(_iconsSvg);\n\nvar _translations = require('../translations');\n\nvar _translations2 = _interopRequireDefault(_translations);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar label = 'createFolder';\n\nfunction _handler(apiOptions, actions) {\n  var _this = this;\n\n  var showDialog = actions.showDialog,\n      hideDialog = actions.hideDialog,\n      navigateToDir = actions.navigateToDir,\n      updateNotifications = actions.updateNotifications,\n      getResource = actions.getResource,\n      getNotifications = actions.getNotifications;\n\n  var getMessage = _translations2.default.bind(null, apiOptions.locale);\n\n  var rawDialogElement = {\n    elementType: 'SetNameDialog',\n    elementProps: {\n      onHide: hideDialog,\n      onSubmit: function () {\n        var _ref = (0, _asyncToGenerator3.default)(\n        /*#__PURE__*/\n        _regenerator2.default.mark(function _callee(folderName) {\n          var resource, resourceChildren, alreadyExists, result;\n          return _regenerator2.default.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  resource = getResource();\n                  _context.prev = 1;\n                  _context.next = 4;\n                  return _api2.default.getChildrenForId(apiOptions, {\n                    id: resource.id\n                  });\n\n                case 4:\n                  resourceChildren = _context.sent;\n                  alreadyExists = resourceChildren.some(function (_ref2) {\n                    var name = _ref2.name;\n                    return name === folderName;\n                  });\n\n                  if (!alreadyExists) {\n                    _context.next = 10;\n                    break;\n                  }\n\n                  return _context.abrupt('return', getMessage('fileExist', {\n                    name: folderName\n                  }));\n\n                case 10:\n                  hideDialog();\n                  _context.next = 13;\n                  return _api2.default.createFolder(apiOptions, resource.id, folderName);\n\n                case 13:\n                  result = _context.sent;\n                  navigateToDir(resource.id, result.body.id, false);\n\n                case 15:\n                  return _context.abrupt('return', null);\n\n                case 18:\n                  _context.prev = 18;\n                  _context.t0 = _context['catch'](1);\n                  hideDialog();\n                  (0, _onFailError2.default)({\n                    getNotifications: getNotifications,\n                    label: getMessage(label),\n                    notificationId: label,\n                    updateNotifications: updateNotifications\n                  });\n                  console.log(_context.t0);\n                  return _context.abrupt('return', null);\n\n                case 24:\n                case 'end':\n                  return _context.stop();\n              }\n            }\n          }, _callee, _this, [[1, 18]]);\n        }));\n\n        return function onSubmit(_x) {\n          return _ref.apply(this, arguments);\n        };\n      }(),\n      onValidate: function () {\n        var _ref3 = (0, _asyncToGenerator3.default)(\n        /*#__PURE__*/\n        _regenerator2.default.mark(function _callee2(folderName) {\n          return _regenerator2.default.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  if (folderName) {\n                    _context2.next = 4;\n                    break;\n                  }\n\n                  return _context2.abrupt('return', getMessage('emptyName'));\n\n                case 4:\n                  if (!(folderName === 'CON')) {\n                    _context2.next = 8;\n                    break;\n                  }\n\n                  return _context2.abrupt('return', getMessage('doNotRespectBill'));\n\n                case 8:\n                  if (!(folderName.length >= 255)) {\n                    _context2.next = 12;\n                    break;\n                  }\n\n                  return _context2.abrupt('return', getMessage('tooLongFolderName'));\n\n                case 12:\n                  if (!(folderName.trim() !== (0, _sanitizeFilename2.default)(folderName.trim()))) {\n                    _context2.next = 14;\n                    break;\n                  }\n\n                  return _context2.abrupt('return', getMessage('folderNameNotAllowedCharacters'));\n\n                case 14:\n                  return _context2.abrupt('return', null);\n\n                case 15:\n                case 'end':\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, _this);\n        }));\n\n        return function onValidate(_x2) {\n          return _ref3.apply(this, arguments);\n        };\n      }(),\n      inputLabelText: getMessage('folderName'),\n      headerText: getMessage('createFolder'),\n      submitButtonText: getMessage('create'),\n      cancelButtonText: getMessage('cancel')\n    }\n  };\n  showDialog(rawDialogElement);\n}\n\nexports.default = function (apiOptions, actions) {\n  var localeLabel = (0, _translations2.default)(apiOptions.locale, label);\n  var getResource = actions.getResource;\n  return {\n    id: label,\n    icon: {\n      svg: _iconsSvg2.default.createNewFolder\n    },\n    label: localeLabel,\n    shouldBeAvailable: function shouldBeAvailable(apiOptions) {\n      var resource = getResource();\n\n      if (!resource || !resource.capabilities) {\n        return false;\n      }\n\n      return resource.capabilities.canAddChildren;\n    },\n    availableInContexts: ['files-view', 'new-button'],\n    handler: function handler() {\n      return _handler(apiOptions, actions);\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}