{"ast":null,"code":"import { isObject, getValue, extend, isNullOrUndefined } from './util';\nimport { getRandomId } from './template-engine';\nvar simpleRegex = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/;\nvar multipleSplitRegex = /(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))/g;\nvar idClassSelector = /^(\\.|#)/;\nvar selectMapper = {\n  '.': 'className',\n  '#': 'id'\n};\nvar classRegexString = '(?=.*?\\\\b{value}\\\\b)';\nvar assigner = {\n  className: 'attributes.className',\n  id: 'attributes.id',\n  tagName: 'tagName'\n};\nvar emptyElements = ['area', 'base', 'basefont', 'br', 'col', 'frame', 'hr', 'img', 'input', 'link', 'meta', 'param', 'embed', 'command', 'keygen', 'source', 'track', 'wbr'];\nvar blockElements = ['a', 'address', 'article', 'applet', 'aside', 'audio', 'blockquote', 'button', 'canvas', 'center', 'dd', 'del', 'dir', 'div', 'dl', 'dt', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'iframe', 'ins', 'isindex', 'li', 'map', 'menu', 'noframes', 'noscript', 'object', 'ol', 'output', 'p', 'pre', 'section', 'script', 'table', 'tbody', 'td', 'tfoot', 'th', 'thead', 'tr', 'ul', 'video'];\nvar inlineElement = ['abbr', 'acronym', 'applet', 'b', 'basefont', 'bdo', 'big', 'br', 'button', 'cite', 'code', 'del', 'dfn', 'em', 'font', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'label', 'map', 'object', 'q', 's', 'samp', 'script', 'select', 'small', 'span', 'strike', 'strong', 'sub', 'sup', 'textarea', 'tt', 'u', 'var'];\nvar selfClosingElements = ['colgroup', 'dd', 'dt', 'li', 'options', 'p', 'td', 'tfoot', 'th', 'thead', 'tr'];\nvar fillAttrs = ['checked', 'compact', 'declare', 'defer', 'disabled', 'ismap', 'multiple', 'nohref', 'noresize', 'noshade', 'nowrap', 'readonly', 'selected'];\nvar cspElement = ['Script', 'style'];\nvar nameMapper = {\n  'tabindex': 'tabIndex'\n};\nvar startRegex = /^<([-A-Za-z0-9_]+)((?:\\s+[a-zA-Z_:][-a-zA-Z0-9_:.]*(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)>/;\nvar endRegex = /^<\\/([-A-Za-z0-9_]+)[^>]*>/;\nvar attributeRegex = /([a-zA-Z_:][-a-zA-Z0-9_:.]*)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|([^>\\s]+)))?/g;\n/**\n * Namespace for VirtualDOM\n * @private\n */\n\nexport var VirtualDOM;\n\n(function (VirtualDOM) {\n  //tslint:disable:no-any\n  function createElement(tagName, properties) {\n    var children = [];\n    var extended = extend({}, {}, properties, true);\n\n    if (!isNullOrUndefined(properties)) {\n      var keys = Object.keys(properties);\n\n      if (keys.length) {\n        if (extended.innerHTML) {\n          children = ConvertHTMLToJSon(extended.innerHTML);\n          delete extended.innerHTML;\n        }\n\n        if (extended.attrs) {\n          extend(extended, extended.attrs);\n          delete extended.attrs;\n        }\n\n        if (extended.styles) {\n          var valArr = extended.styles.split(';');\n          var vObj = {};\n\n          for (var i = 0, length_1 = valArr.length; i < length_1; i++) {\n            var cVal = valArr[i];\n            var styleSplit = cVal.split(':');\n            vObj[styleSplit[0]] = styleSplit[1];\n          }\n\n          delete extended.styles;\n          extended.style = vObj;\n        }\n      }\n    }\n\n    return {\n      tagName: tagName,\n      attributes: extended || {},\n      children: children\n    };\n  }\n\n  VirtualDOM.createElement = createElement;\n\n  function assignParent(childrens, parent) {\n    if (parent && childrens) {\n      childrens.forEach(function (child) {\n        if (isObject(child)) {\n          if (child.parent) {\n            detach(child);\n          }\n\n          child.parent = parent;\n        }\n\n        return child;\n      });\n    }\n  }\n\n  VirtualDOM.assignParent = assignParent;\n\n  function append(fromElements, toElement) {\n    assignParent(fromElements, toElement);\n\n    if (toElement.children) {\n      toElement.children = toElement.children.concat(fromElements);\n    } else {\n      toElement.children = [].concat(fromElements);\n    }\n  }\n\n  VirtualDOM.append = append;\n\n  function prepend(child, toElement) {\n    assignParent(child, toElement);\n\n    if (!toElement.children || !toElement.children.length) {\n      toElement.children = [];\n      toElement.children.concat(child);\n    } else {\n      for (var i = child.length - 1; i >= 0; i--) {\n        toElement.children.unshift(child[i]);\n      }\n    }\n  }\n\n  VirtualDOM.prepend = prepend;\n\n  function detach(element) {\n    var parent = element.parent;\n\n    if (parent) {\n      var index = parent.children.indexOf(element);\n\n      if (index !== -1) {\n        parent.children.splice(index);\n      }\n    }\n\n    return parent;\n  }\n\n  VirtualDOM.detach = detach; //tslint:disable-next-line\n\n  function vDomSelector(_a) {\n    var ele = _a.ele,\n        selector = _a.selector,\n        selectAll = _a.selectAll,\n        immediateParent = _a.immediateParent;\n    var iSelector = selector.split(' ');\n    var curColl = ele;\n\n    for (var i = 0, length_2 = iSelector.length; i < length_2; i++) {\n      var isDescendant = false;\n      var parent_2 = curColl;\n      var curSelector = iSelector[i];\n      var simpleSelector = false;\n      var mapper = [];\n\n      if (simpleRegex.test(curSelector)) {\n        simpleSelector = true;\n        processSelector(curSelector, mapper);\n      } else if (curSelector.indexOf('>') === -1) {\n        var splitSelector = curSelector.match(multipleSplitRegex);\n\n        for (var _i = 0, splitSelector_1 = splitSelector; _i < splitSelector_1.length; _i++) {\n          var curMap = splitSelector_1[_i];\n          processSelector(curMap, mapper);\n        }\n      } else if (curSelector.indexOf('>') !== -1) {\n        isDescendant = true;\n        var dSelector = curSelector.split('>'); //tslint:disable-next-line\n\n        var dParent = ele;\n        var descendent = void 0;\n        var flag = 0;\n\n        for (var _b = 0, dSelector_1 = dSelector; _b < dSelector_1.length; _b++) {\n          var sel = dSelector_1[_b];\n\n          if (!dParent) {\n            break;\n          }\n\n          if (dParent.length) {\n            var descendentChild = [];\n\n            for (var _c = 0, dParent_1 = dParent; _c < dParent_1.length; _c++) {\n              var child = dParent_1[_c];\n              descendentChild = descendentChild.concat(vDomSelector({\n                ele: child,\n                selector: sel,\n                selectAll: selectAll,\n                immediateParent: !!flag\n              }));\n            }\n\n            descendent = descendentChild;\n          } else {\n            descendent = vDomSelector({\n              ele: dParent,\n              selector: sel,\n              selectAll: selectAll,\n              immediateParent: !!flag\n            });\n          }\n\n          flag++;\n          dParent = descendent;\n        }\n\n        if (descendent) {\n          curColl = descendent;\n        }\n      }\n\n      if (!isDescendant) {\n        if (parent_2.length) {\n          var iCurSelector = [];\n\n          for (var _d = 0, parent_1 = parent_2; _d < parent_1.length; _d++) {\n            var curParent = parent_1[_d];\n            iCurSelector = iCurSelector.concat(accessElement(curParent, mapper, selectAll, immediateParent));\n          }\n\n          curColl = iCurSelector;\n        } else {\n          curColl = accessElement(parent_2, mapper, selectAll, immediateParent);\n        }\n      }\n    }\n\n    if (selectAll) {\n      return curColl;\n    } else {\n      return curColl[0] || null;\n    }\n  }\n\n  VirtualDOM.vDomSelector = vDomSelector;\n\n  function processSelector(selector, mapper) {\n    var match = selector.match(idClassSelector);\n    var obj = {};\n\n    if (match) {\n      var curMapper = selectMapper[match[0]];\n\n      if (curMapper === 'className') {\n        var curObj = mapper.filter(function (obj) {\n          return obj.hasOwnProperty('className');\n        })[0];\n        var canPush = false;\n\n        if (!curObj) {\n          canPush = true;\n          curObj = {};\n        }\n\n        var existValue = curObj[curMapper] || '';\n        curObj[curMapper] = existValue + classRegexString.replace('{value}', selector.replace('.', ''));\n\n        if (canPush) {\n          mapper.push(curObj);\n        }\n      } else {\n        obj[curMapper] = selector.replace(match[0], '');\n        mapper.push(obj);\n      }\n    } else {\n      mapper.push({\n        tagName: selector\n      });\n    }\n  } //tslint:disable-next-line\n\n\n  function accessElement(ele, mapper, selectAll, immediateParent) {\n    if (ele.children) {\n      //tslint:disable-next-line\n      var temp_1 = ele.children.filter(function (child) {\n        if (typeof child !== 'string') {\n          var matched = true;\n\n          for (var _i = 0, mapper_1 = mapper; _i < mapper_1.length; _i++) {\n            var map = mapper_1[_i];\n            var key = Object.keys(map)[0];\n            var expected = map[key];\n            var actualValue = getValue(assigner[key], child);\n\n            if (key === 'className') {\n              if (!new RegExp('^' + expected + '.*$').test(actualValue)) {\n                matched = false;\n                break;\n              }\n            } else if (actualValue !== expected) {\n              matched = false;\n              break;\n            }\n          }\n\n          return matched;\n        } else {\n          return false;\n        }\n      });\n\n      if (!immediateParent && (!temp_1.length || selectAll)) {\n        ele.children.forEach(function (child) {\n          if (isObject(child)) {\n            temp_1 = temp_1.concat(accessElement(child, mapper, selectAll));\n          }\n        });\n      }\n\n      return temp_1;\n    } else {\n      return [];\n    }\n  }\n\n  VirtualDOM.accessElement = accessElement;\n\n  function ConvertHTMLToJSon(htmlString) {\n    var results = [];\n    var isText;\n    var tagArray = [];\n    var backup = htmlString;\n    var nodeArray = [];\n\n    while (htmlString) {\n      isText = true;\n      var lastVal = getLastValue(tagArray);\n\n      if (!lastVal || !contains(cspElement, lastVal)) {\n        if (htmlString.indexOf('</') === 0) {\n          var match = htmlString.match(endRegex);\n\n          if (match) {\n            htmlString = htmlString.substring(match[0].length); //tslint:disable-next-line\n\n            match[0].replace(endRegex, iterateEndTag);\n          }\n\n          isText = false;\n        } else if (htmlString.indexOf('<') === 0) {\n          var match = htmlString.match(startRegex);\n\n          if (match) {\n            htmlString = htmlString.substring(match[0].length); //tslint:disable-next-line\n\n            match[0].replace(startRegex, iterateStartTag);\n          }\n\n          isText = false;\n        }\n\n        if (isText) {\n          var tagIndex = htmlString.indexOf('<');\n          var text = tagIndex < 0 ? htmlString : htmlString.substring(0, tagIndex);\n          htmlString = tagIndex < 0 ? '' : htmlString.substring(tagIndex);\n          iterateText(text);\n        }\n      } else {\n        //tslint:disable-next-line\n        htmlString = htmlString.replace(new RegExp('([\\\\s\\\\S]*?)<\\/' + getLastValue(nodeArray) + '[^>]*>'), function (all, text) {\n          text = text.replace(/<!--([\\s\\S]*?)-->|<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1$2');\n          iterateText(text);\n          return '';\n        });\n        iterateEndTag('', getLastValue(tagArray));\n      }\n\n      backup = htmlString;\n    }\n\n    function iterateStartTag(start, tagName, rest) {\n      tagName = tagName.toLowerCase();\n\n      if (contains(blockElements, tagName)) {\n        while (getLastValue(tagArray) && contains(inlineElement, getLastValue(tagArray))) {\n          iterateEndTag('', getLastValue(tagArray));\n        }\n      }\n\n      if (contains(selfClosingElements, tagName) && getLastValue(tagArray)) {\n        iterateEndTag('', tagName);\n      }\n\n      var isSelfTag = contains(emptyElements, tagName);\n\n      if (!isSelfTag) {\n        tagArray.push(tagName);\n      }\n\n      var attrs = {}; //tslint:disable-next-line\n\n      rest.replace(attributeRegex, function (match, name) {\n        var names = [];\n\n        for (var _i = 2; _i < arguments.length; _i++) {\n          names[_i - 2] = arguments[_i];\n        } //tslint:disable-next-line\n\n\n        var val = names[2] ? names[2] : names[3] ? names[3] : names[4] ? names[4] : contains(fillAttrs, name) ? name : '';\n\n        if (name === 'style') {\n          var valArr = val.split(';');\n          var vObj = {};\n\n          for (var i = 0, length_3 = valArr.length; i < length_3; i++) {\n            var cVal = valArr[i];\n            var styleSplit = cVal.split(':');\n            vObj[styleSplit[0]] = styleSplit[1];\n          }\n\n          val = vObj;\n        }\n\n        name = nameMapper[name] || name;\n        attrs[name] = val; //tslint:disable-next-line\n      });\n      attrs['data-id'] = getRandomId();\n      var tagObject = {\n        tagName: tagName,\n        attributes: attrs\n      };\n\n      if (isSelfTag) {\n        var parent_3 = nodeArray[0] || results;\n\n        if (parent_3.children === undefined) {\n          parent_3.children = [];\n        }\n\n        tagObject.parent = parent_3;\n        parent_3.children.push(tagObject);\n      } else {\n        nodeArray.unshift(tagObject);\n      }\n    }\n\n    function iterateEndTag(start, tagName) {\n      var pos;\n\n      if (!tagName) {\n        pos = 0;\n      } else {\n        for (pos = tagArray.length - 1; pos >= 0; pos--) {\n          if (tagArray[pos] === tagName) {\n            break;\n          }\n        }\n      }\n\n      if (pos >= 0) {\n        for (var j = nodeArray.length - 1; j >= pos; j--) {\n          //tslint:disable-next-line\n          var node = nodeArray.shift();\n\n          if (nodeArray.length === 0) {\n            results.push(node);\n          } else {\n            var parent_4 = nodeArray[0];\n\n            if (parent_4.children === undefined) {\n              parent_4.children = [];\n            }\n\n            node.parent = parent_4;\n            parent_4.children.push(node);\n          }\n        }\n\n        tagArray.length = pos;\n      }\n    }\n\n    function iterateText(text) {\n      if (nodeArray.length === 0) {\n        results.push(text);\n      } else {\n        var parent_5 = nodeArray[0];\n\n        if (parent_5.children === undefined) {\n          parent_5.children = [];\n        }\n\n        parent_5.children.push(text);\n      }\n    }\n\n    return results;\n  }\n\n  VirtualDOM.ConvertHTMLToJSon = ConvertHTMLToJSon; //tslint:disable-next-line \n\n  function getLastValue(arr) {\n    return arr[arr.length - 1];\n  }\n\n  function contains(arr, key) {\n    return arr.indexOf(key) !== -1;\n  } //tslint:disable-next-line\n\n\n  function cloneNode(ele, deep) {\n    if (isObject(ele)) {\n      if (deep) {\n        return extend({}, {}, ele, true);\n      } else {\n        return {\n          tagName: ele.tagName,\n          attributes: ele.attributes\n        };\n      }\n    } else {\n      return ele.cloneNode(deep);\n    }\n  }\n\n  VirtualDOM.cloneNode = cloneNode;\n\n  function setStyleAttribute(element, attrs) {\n    if (element.attributes.style) {\n      element.attributes.style = extend({}, attrs);\n    } else {\n      element.attributes.style = extend(element.attributes.style, attrs);\n    }\n  }\n\n  VirtualDOM.setStyleAttribute = setStyleAttribute; //tslint:enable:no-any\n})(VirtualDOM || (VirtualDOM = {}));","map":null,"metadata":{},"sourceType":"module"}