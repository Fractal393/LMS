{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.column_headers.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _events_engine = require(\"../../events/core/events_engine\");\n\nvar _events_engine2 = _interopRequireDefault(_events_engine);\n\nvar _uiGrid_core = require(\"./ui.grid_core.columns_view\");\n\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\n\nvar _message = require(\"../../localization/message\");\n\nvar _message2 = _interopRequireDefault(_message);\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _uiGrid_core3 = require(\"./ui.grid_core.accessibility\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar CELL_CONTENT_CLASS = \"text-content\";\nvar HEADERS_CLASS = \"headers\";\nvar NOWRAP_CLASS = \"nowrap\";\nvar ROW_CLASS_SELECTOR = \".dx-row\";\nvar HEADER_ROW_CLASS = \"dx-header-row\";\nvar COLUMN_LINES_CLASS = \"dx-column-lines\";\nvar CONTEXT_MENU_SORT_ASC_ICON = \"context-menu-sort-asc\";\nvar CONTEXT_MENU_SORT_DESC_ICON = \"context-menu-sort-desc\";\nvar CONTEXT_MENU_SORT_NONE_ICON = \"context-menu-sort-none\";\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nvar VISIBILITY_HIDDEN_CLASS = \"dx-visibility-hidden\";\nvar TEXT_CONTENT_ALIGNMENT_CLASS_PREFIX = \"dx-text-content-alignment-\";\nvar SORT_INDICATOR_CLASS = \"dx-sort-indicator\";\nvar SORT_INDEX_INDICATOR_CLASS = \"dx-sort-index-indicator\";\nvar HEADER_FILTER_CLASS_SELECTOR = \".dx-header-filter\";\nvar HEADER_FILTER_INDICATOR_CLASS = \"dx-header-filter-indicator\";\nvar MULTI_ROW_HEADER_CLASS = \"dx-header-multi-row\";\nmodule.exports = {\n  defaultOptions: function () {\n    return {\n      showColumnHeaders: true,\n      cellHintEnabled: true\n    };\n  },\n  views: {\n    columnHeadersView: _uiGrid_core2.default.ColumnsView.inherit(function () {\n      var createCellContent = function (that, $cell, options) {\n        var $cellContent = (0, _renderer2.default)(\"<div>\").addClass(that.addWidgetPrefix(CELL_CONTENT_CLASS));\n        that.setAria(\"role\", \"presentation\", $cellContent);\n        addCssClassesToCellContent(that, $cell, options.column, $cellContent);\n        var showColumnLines = that.option(\"showColumnLines\");\n        var contentAlignment = that.getController(\"columns\").getHeaderContentAlignment(options.column.alignment);\n        return $cellContent[showColumnLines || \"right\" === contentAlignment ? \"appendTo\" : \"prependTo\"]($cell);\n      };\n\n      function addCssClassesToCellContent(that, $cell, column, $cellContent) {\n        var $indicatorElements = that._getIndicatorElements($cell, true);\n\n        var $visibleIndicatorElements = that._getIndicatorElements($cell);\n\n        var indicatorCount = $indicatorElements && $indicatorElements.length;\n\n        var columnAlignment = that._getColumnAlignment(column.alignment);\n\n        var sortIndicatorClassName = \".\".concat(that._getIndicatorClassName(\"sort\"));\n        var sortIndexIndicatorClassName = \".\".concat(that._getIndicatorClassName(\"sortIndex\"));\n        var $sortIndicator = $visibleIndicatorElements.filter(sortIndicatorClassName);\n        var $sortIndexIndicator = $visibleIndicatorElements.children().filter(sortIndexIndicatorClassName);\n        $cellContent = $cellContent || $cell.children(\".\" + that.addWidgetPrefix(CELL_CONTENT_CLASS));\n        $cellContent.toggleClass(TEXT_CONTENT_ALIGNMENT_CLASS_PREFIX + columnAlignment, indicatorCount > 0).toggleClass(TEXT_CONTENT_ALIGNMENT_CLASS_PREFIX + (\"left\" === columnAlignment ? \"right\" : \"left\"), indicatorCount > 0 && \"center\" === column.alignment).toggleClass(SORT_INDICATOR_CLASS, !!$sortIndicator.length).toggleClass(SORT_INDEX_INDICATOR_CLASS, !!$sortIndexIndicator.length).toggleClass(HEADER_FILTER_INDICATOR_CLASS, !!$visibleIndicatorElements.filter(\".\" + that._getIndicatorClassName(\"headerFilter\")).length);\n      }\n\n      return {\n        _createTable: function () {\n          var $table = this.callBase.apply(this, arguments);\n\n          _events_engine2.default.on($table, \"mousedown selectstart\", this.createAction(function (e) {\n            var event = e.event;\n\n            if (event.shiftKey) {\n              event.preventDefault();\n            }\n          }));\n\n          return $table;\n        },\n        _isLegacyKeyboardNavigation: function () {\n          return this.option(\"useLegacyKeyboardNavigation\");\n        },\n        _getDefaultTemplate: function (column) {\n          var that = this;\n          return function ($container, options) {\n            var $content = column.command ? $container : createCellContent(that, $container, options);\n            var caption = \"expand\" !== column.command && column.caption;\n\n            if (caption) {\n              $content.text(caption);\n            } else {\n              if (column.command) {\n                $container.html(\"&nbsp;\");\n              }\n            }\n          };\n        },\n        _getHeaderTemplate: function (column) {\n          return column.headerCellTemplate || {\n            allowRenderToDetachedContainer: true,\n            render: this._getDefaultTemplate(column)\n          };\n        },\n        _processTemplate: function (template, options) {\n          var that = this;\n          var resultTemplate;\n          var column = options.column;\n          var renderingTemplate = that.callBase(template);\n\n          if (\"header\" === options.rowType && renderingTemplate && column.headerCellTemplate && !column.command) {\n            resultTemplate = {\n              render: function (options) {\n                var $content = createCellContent(that, options.container, options.model);\n                renderingTemplate.render((0, _extend.extend)({}, options, {\n                  container: $content\n                }));\n              }\n            };\n          } else {\n            resultTemplate = renderingTemplate;\n          }\n\n          return resultTemplate;\n        },\n        _handleDataChanged: function (e) {\n          if (\"refresh\" !== e.changeType) {\n            return;\n          }\n\n          if (this._isGroupingChanged || this._requireReady) {\n            this._isGroupingChanged = false;\n            this.render();\n          }\n        },\n        _renderCell: function ($row, options) {\n          var $cell = this.callBase($row, options);\n\n          if (\"header\" === options.row.rowType) {\n            $cell.addClass(CELL_FOCUS_DISABLED_CLASS);\n\n            if (!this._isLegacyKeyboardNavigation()) {\n              if (options.column && !options.column.type) {\n                $cell.attr(\"tabindex\", this.option(\"tabindex\") || 0);\n              }\n            }\n          }\n\n          return $cell;\n        },\n        _setCellAriaAttributes: function ($cell, cellOptions) {\n          this.callBase($cell, cellOptions);\n\n          if (\"header\" === cellOptions.rowType) {\n            this.setAria(\"role\", \"columnheader\", $cell);\n\n            if (cellOptions.column && !cellOptions.column.command && !cellOptions.column.isBand) {\n              $cell.attr(\"id\", cellOptions.column.headerId);\n              this.setAria(\"label\", _message2.default.format(\"dxDataGrid-ariaColumn\") + \" \" + cellOptions.column.caption, $cell);\n            }\n          }\n        },\n        _createRow: function (row) {\n          var $row = this.callBase(row).toggleClass(COLUMN_LINES_CLASS, this.option(\"showColumnLines\"));\n\n          if (\"header\" === row.rowType) {\n            $row.addClass(HEADER_ROW_CLASS);\n\n            if (!this._isLegacyKeyboardNavigation()) {\n              (0, _uiGrid_core3.registerKeyboardAction)(\"columnHeaders\", this, $row, \"td\", this._handleActionKeyDown.bind(this));\n            }\n          }\n\n          return $row;\n        },\n        _handleActionKeyDown: function (args) {\n          var event = args.event;\n          var $target = (0, _renderer2.default)(event.target);\n          this._lastActionElement = event.target;\n\n          if ($target.is(HEADER_FILTER_CLASS_SELECTOR)) {\n            var headerFilterController = this.getController(\"headerFilter\");\n            var $column = $target.closest(\"td\");\n            var columnIndex = this.getColumnIndexByElement($column);\n\n            if (columnIndex >= 0) {\n              headerFilterController.showHeaderFilterMenu(columnIndex, false);\n            }\n          } else {\n            var $row = $target.closest(ROW_CLASS_SELECTOR);\n\n            this._processHeaderAction(event, $row);\n          }\n\n          event.preventDefault();\n        },\n        _renderCore: function () {\n          var that = this;\n          var $container = that.element();\n\n          if (that._tableElement && !that._dataController.isLoaded() && !that._hasRowElements) {\n            return;\n          }\n\n          $container.addClass(that.addWidgetPrefix(HEADERS_CLASS)).toggleClass(that.addWidgetPrefix(NOWRAP_CLASS), !that.option(\"wordWrapEnabled\")).empty();\n          that.setAria(\"role\", \"presentation\", $container);\n\n          that._updateContent(that._renderTable());\n\n          if (that.getRowCount() > 1) {\n            $container.addClass(MULTI_ROW_HEADER_CLASS);\n          }\n\n          that.callBase.apply(that, arguments);\n        },\n        _renderRows: function () {\n          var that = this;\n\n          if (that._dataController.isLoaded() || that._hasRowElements) {\n            that.callBase.apply(that, arguments);\n            that._hasRowElements = true;\n          }\n        },\n        _getRowVisibleColumns: function (rowIndex) {\n          return this._columnsController.getVisibleColumns(rowIndex);\n        },\n        _renderRow: function ($table, options) {\n          options.columns = this._getRowVisibleColumns(options.row.rowIndex);\n          this.callBase($table, options);\n        },\n        _createCell: function (options) {\n          var column = options.column;\n          var $cellElement = this.callBase.apply(this, arguments);\n          column.rowspan > 1 && \"header\" === options.rowType && $cellElement.attr(\"rowSpan\", column.rowspan);\n          return $cellElement;\n        },\n        _getRows: function () {\n          var result = [];\n          var rowCount = this.getRowCount();\n\n          if (this.option(\"showColumnHeaders\")) {\n            for (var i = 0; i < rowCount; i++) {\n              result.push({\n                rowType: \"header\",\n                rowIndex: i\n              });\n            }\n          }\n\n          return result;\n        },\n        _getCellTemplate: function (options) {\n          if (\"header\" === options.rowType) {\n            return this._getHeaderTemplate(options.column);\n          }\n        },\n        _columnOptionChanged: function (e) {\n          var changeTypes = e.changeTypes;\n          var optionNames = e.optionNames;\n\n          if (changeTypes.grouping) {\n            this._isGroupingChanged = true;\n            return;\n          }\n\n          this.callBase(e);\n\n          if (optionNames.width || optionNames.visible) {\n            this.resizeCompleted.fire();\n          }\n        },\n        _isElementVisible: function (elementOptions) {\n          return elementOptions && elementOptions.visible;\n        },\n        _alignCaptionByCenter: function ($cell) {\n          var $indicatorsContainer = this._getIndicatorContainer($cell, true);\n\n          if ($indicatorsContainer && $indicatorsContainer.length) {\n            $indicatorsContainer.filter(\".\" + VISIBILITY_HIDDEN_CLASS).remove();\n            $indicatorsContainer = this._getIndicatorContainer($cell);\n            $indicatorsContainer.clone().addClass(VISIBILITY_HIDDEN_CLASS).css(\"float\", \"\").insertBefore($cell.children(\".\" + this.addWidgetPrefix(CELL_CONTENT_CLASS)));\n          }\n        },\n        _updateCell: function ($cell, options) {\n          if (\"header\" === options.rowType && \"center\" === options.column.alignment) {\n            this._alignCaptionByCenter($cell);\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        _updateIndicator: function ($cell, column, indicatorName) {\n          var $indicatorElement = this.callBase.apply(this, arguments);\n\n          if (\"center\" === column.alignment) {\n            this._alignCaptionByCenter($cell);\n          }\n\n          addCssClassesToCellContent(this, $cell, column);\n          return $indicatorElement;\n        },\n        _getIndicatorContainer: function ($cell, returnAll) {\n          var $indicatorsContainer = this.callBase($cell);\n          return returnAll ? $indicatorsContainer : $indicatorsContainer.filter(\":not(.\" + VISIBILITY_HIDDEN_CLASS + \")\");\n        },\n        _isSortableElement: function () {\n          return true;\n        },\n        getHeadersRowHeight: function () {\n          var $tableElement = this._getTableElement();\n\n          var $headerRows = $tableElement && $tableElement.find(\".\" + HEADER_ROW_CLASS);\n          return $headerRows && $headerRows.toArray().reduce(function (sum, headerRow) {\n            return sum + (0, _renderer2.default)(headerRow).height();\n          }, 0) || 0;\n        },\n        getHeaderElement: function (index) {\n          var columnElements = this.getColumnElements();\n          return columnElements && columnElements.eq(index);\n        },\n        getColumnElements: function (index, bandColumnIndex) {\n          var that = this;\n          var $cellElement;\n          var columnsController = that._columnsController;\n          var rowCount = that.getRowCount();\n\n          if (that.option(\"showColumnHeaders\")) {\n            if (rowCount > 1 && (!(0, _type.isDefined)(index) || (0, _type.isDefined)(bandColumnIndex))) {\n              var result = [];\n              var visibleColumns = (0, _type.isDefined)(bandColumnIndex) ? columnsController.getChildrenByBandColumn(bandColumnIndex, true) : columnsController.getVisibleColumns();\n              (0, _iterator.each)(visibleColumns, function (_, column) {\n                var rowIndex = (0, _type.isDefined)(index) ? index : columnsController.getRowIndex(column.index);\n                $cellElement = that._getCellElement(rowIndex, columnsController.getVisibleIndex(column.index, rowIndex));\n                $cellElement && result.push($cellElement.get(0));\n              });\n              return (0, _renderer2.default)(result);\n            } else {\n              if (!index || index < rowCount) {\n                return that.getCellElements(index || 0);\n              }\n            }\n          }\n        },\n        getColumnIndexByElement: function ($cell) {\n          var cellIndex = this.getCellIndex($cell);\n          var $row = $cell.closest(\".dx-row\");\n          var rowIndex = $row[0].rowIndex;\n          var column = this.getColumns(rowIndex)[cellIndex];\n          return column ? column.index : -1;\n        },\n        getVisibleColumnIndex: function (columnIndex, rowIndex) {\n          var column = this.getColumns()[columnIndex];\n          return column ? this._columnsController.getVisibleIndex(column.index, rowIndex) : -1;\n        },\n        getColumnWidths: function () {\n          var $columnElements = this.getColumnElements();\n\n          if ($columnElements && $columnElements.length) {\n            return this._getWidths($columnElements);\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        allowDragging: function (column, sourceLocation, draggingPanels) {\n          var i;\n          var draggableColumnCount = 0;\n\n          var rowIndex = column && this._columnsController.getRowIndex(column.index);\n\n          var columns = this.getColumns(0 === rowIndex ? 0 : null);\n          var canHideColumn = (null === column || void 0 === column ? void 0 : column.allowHiding) && columns.length > 1;\n\n          var allowDrag = function (column) {\n            return column.allowReordering || column.allowGrouping || column.allowHiding;\n          };\n\n          for (i = 0; i < columns.length; i++) {\n            if (allowDrag(columns[i])) {\n              draggableColumnCount++;\n            }\n          }\n\n          if (draggableColumnCount <= 1 && !canHideColumn) {\n            return false;\n          } else {\n            if (!draggingPanels) {\n              return (this.option(\"allowColumnReordering\") || this._columnsController.isColumnOptionUsed(\"allowReordering\")) && column && column.allowReordering;\n            }\n          }\n\n          for (i = 0; i < draggingPanels.length; i++) {\n            var draggingPanel = draggingPanels[i];\n\n            if (draggingPanel && draggingPanel.allowDragging(column, sourceLocation)) {\n              return true;\n            }\n          }\n\n          return false;\n        },\n        getBoundingRect: function () {\n          var that = this;\n          var $columnElements = that.getColumnElements();\n\n          if ($columnElements && $columnElements.length) {\n            var offset = that._getTableElement().offset();\n\n            return {\n              top: offset.top\n            };\n          }\n\n          return null;\n        },\n        getName: function () {\n          return \"headers\";\n        },\n        getColumnCount: function () {\n          var $columnElements = this.getColumnElements();\n          return $columnElements ? $columnElements.length : 0;\n        },\n        isVisible: function () {\n          return this.option(\"showColumnHeaders\");\n        },\n        optionChanged: function (args) {\n          var that = this;\n\n          switch (args.name) {\n            case \"showColumnHeaders\":\n            case \"wordWrapEnabled\":\n            case \"showColumnLines\":\n              that._invalidate(true, true);\n\n              args.handled = true;\n              break;\n\n            default:\n              that.callBase(args);\n          }\n        },\n        getHeight: function () {\n          return this.getElementHeight();\n        },\n        getContextMenuItems: function (options) {\n          var that = this;\n          var column = options.column;\n\n          if (options.row && (\"header\" === options.row.rowType || \"detailAdaptive\" === options.row.rowType)) {\n            var sortingOptions = that.option(\"sorting\");\n\n            if (sortingOptions && \"none\" !== sortingOptions.mode && column && column.allowSorting) {\n              var onItemClick = function (params) {\n                setTimeout(function () {\n                  that._columnsController.changeSortOrder(column.index, params.itemData.value);\n                });\n              };\n\n              return [{\n                text: sortingOptions.ascendingText,\n                value: \"asc\",\n                disabled: \"asc\" === column.sortOrder,\n                icon: CONTEXT_MENU_SORT_ASC_ICON,\n                onItemClick: onItemClick\n              }, {\n                text: sortingOptions.descendingText,\n                value: \"desc\",\n                disabled: \"desc\" === column.sortOrder,\n                icon: CONTEXT_MENU_SORT_DESC_ICON,\n                onItemClick: onItemClick\n              }, {\n                text: sortingOptions.clearText,\n                value: \"none\",\n                disabled: !column.sortOrder,\n                icon: CONTEXT_MENU_SORT_NONE_ICON,\n                onItemClick: onItemClick\n              }];\n            }\n          }\n        },\n        getRowCount: function () {\n          return this._columnsController && this._columnsController.getRowCount();\n        },\n        setRowsOpacity: function (columnIndex, value, rowIndex) {\n          var that = this;\n          var i;\n          var columnElements;\n          var rowCount = that.getRowCount();\n\n          var columns = that._columnsController.getColumns();\n\n          var column = columns && columns[columnIndex];\n          var columnID = column && column.isBand && column.index;\n\n          var setColumnOpacity = function (index, column) {\n            if (column.ownerBand === columnID) {\n              columnElements.eq(index).css({\n                opacity: value\n              });\n\n              if (column.isBand) {\n                that.setRowsOpacity(column.index, value, i + 1);\n              }\n            }\n          };\n\n          if ((0, _type.isDefined)(columnID)) {\n            rowIndex = rowIndex || 0;\n\n            for (i = rowIndex; i < rowCount; i++) {\n              columnElements = that.getCellElements(i);\n              (0, _iterator.each)(that.getColumns(i), setColumnOpacity);\n            }\n          }\n        }\n      };\n    }())\n  }\n};","map":null,"metadata":{},"sourceType":"script"}