{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.column_state_mixin.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _position = require(\"../../core/utils/position\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar COLUMN_INDICATORS_CLASS = \"dx-column-indicators\";\nvar GROUP_PANEL_ITEM_CLASS = \"dx-group-panel-item\";\nmodule.exports = {\n  _applyColumnState: function (options) {\n    var _that$component;\n\n    var that = this;\n    var rtlEnabled = this.option(\"rtlEnabled\");\n\n    var columnAlignment = that._getColumnAlignment(options.column.alignment, rtlEnabled);\n\n    var parameters = (0, _extend.extend)(true, {\n      columnAlignment: columnAlignment\n    }, options);\n    var isGroupPanelItem = parameters.rootElement.hasClass(GROUP_PANEL_ITEM_CLASS);\n\n    var $indicatorsContainer = that._createIndicatorContainer(parameters, isGroupPanelItem);\n\n    var $span = (0, _renderer2.default)(\"<span>\").addClass(that._getIndicatorClassName(options.name));\n    var columnsController = null === (_that$component = that.component) || void 0 === _that$component ? void 0 : _that$component.getController(\"columns\");\n    var indicatorAlignment = (null === columnsController || void 0 === columnsController ? void 0 : columnsController.getHeaderContentAlignment(columnAlignment)) || columnAlignment;\n    parameters.container = $indicatorsContainer;\n    parameters.indicator = $span;\n\n    that._renderIndicator(parameters);\n\n    $indicatorsContainer[(isGroupPanelItem || !options.showColumnLines) && \"left\" === indicatorAlignment ? \"appendTo\" : \"prependTo\"](options.rootElement);\n    return $span;\n  },\n  _getIndicatorClassName: _common.noop,\n  _getColumnAlignment: function (alignment, rtlEnabled) {\n    rtlEnabled = rtlEnabled || this.option(\"rtlEnabled\");\n    return alignment && \"center\" !== alignment ? alignment : (0, _position.getDefaultAlignment)(rtlEnabled);\n  },\n  _createIndicatorContainer: function (options, ignoreIndicatorAlignment) {\n    var $indicatorsContainer = this._getIndicatorContainer(options.rootElement);\n\n    var indicatorAlignment = \"left\" === options.columnAlignment ? \"right\" : \"left\";\n\n    if (!$indicatorsContainer.length) {\n      $indicatorsContainer = (0, _renderer2.default)(\"<div>\").addClass(COLUMN_INDICATORS_CLASS);\n    }\n\n    this.setAria(\"role\", \"presentation\", $indicatorsContainer);\n    return $indicatorsContainer.css(\"float\", options.showColumnLines && !ignoreIndicatorAlignment ? indicatorAlignment : null);\n  },\n  _getIndicatorContainer: function ($cell) {\n    return $cell && $cell.find(\".\" + COLUMN_INDICATORS_CLASS);\n  },\n  _getIndicatorElements: function ($cell) {\n    var $indicatorContainer = this._getIndicatorContainer($cell);\n\n    return $indicatorContainer && $indicatorContainer.children();\n  },\n  _renderIndicator: function (options) {\n    var $container = options.container;\n    var $indicator = options.indicator;\n    $container && $indicator && $container.append($indicator);\n  },\n  _updateIndicators: function (indicatorName) {\n    var that = this;\n    var columns = that.getColumns();\n    var $cells = that.getColumnElements();\n    var $cell;\n\n    if (!$cells || columns.length !== $cells.length) {\n      return;\n    }\n\n    for (var i = 0; i < columns.length; i++) {\n      $cell = $cells.eq(i);\n\n      that._updateIndicator($cell, columns[i], indicatorName);\n\n      var rowOptions = $cell.parent().data(\"options\");\n\n      if (rowOptions && rowOptions.cells) {\n        rowOptions.cells[$cell.index()].column = columns[i];\n      }\n    }\n  },\n  _updateIndicator: function ($cell, column, indicatorName) {\n    if (!column.command) {\n      return this._applyColumnState({\n        name: indicatorName,\n        rootElement: $cell,\n        column: column,\n        showColumnLines: this.option(\"showColumnLines\")\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}