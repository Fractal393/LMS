{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { EventHandler, getValue, closest, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { addClass, removeClass, extend, Browser } from '@syncfusion/ej2-base';\nimport { CellType } from '../base/enum';\nimport * as event from '../base/constant';\nimport { Row } from '../models/row';\nimport { RowModelGenerator } from './row-model-generator';\nimport { parentsUntil } from '../base/util';\n/**\n * FocusStrategy class\n * @hidden\n */\n\nvar FocusStrategy =\n/** @class */\nfunction () {\n  function FocusStrategy(parent) {\n    this.currentInfo = {};\n    this.oneTime = true;\n    this.swap = {};\n    this.forget = false;\n    this.skipFocus = true;\n    this.focusByClick = false;\n    this.prevIndexes = {};\n    this.refMatrix = this.refreshMatrix(true);\n    this.actions = ['downArrow', 'upArrow'];\n    this.parent = parent;\n    this.rowModelGen = new RowModelGenerator(this.parent);\n    this.addEventListener();\n  }\n\n  FocusStrategy.prototype.focusCheck = function (e) {\n    var target = e.target;\n    this.focusByClick = true;\n    this.skipFocus = target.classList.contains('e-grid');\n  };\n\n  FocusStrategy.prototype.onFocus = function () {\n    if (this.parent.isDestroyed || Browser.isDevice || this.parent.enableVirtualization) {\n      return;\n    }\n\n    this.setActive(!this.parent.enableHeaderFocus && this.parent.frozenRows === 0, this.parent.frozenColumns !== 0);\n    var added = 'addedRecords';\n\n    if (!this.parent.enableHeaderFocus && !this.parent.getCurrentViewRecords().length && (this.parent.editSettings.mode !== 'Batch' || this.parent.editSettings.mode === 'Batch' && !this.parent.editModule.getBatchChanges()[added].length)) {\n      this.getContent().matrix.generate(this.rowModelGen.generateRows({\n        rows: [new Row({\n          isDataRow: true\n        })]\n      }), this.getContent().selector, false);\n    }\n\n    var current = this.getContent().matrix.get(0, -1, [0, 1], null, this.getContent().validator());\n    this.getContent().matrix.select(current[0], current[1]);\n\n    if (this.skipFocus) {\n      this.focus();\n      this.skipFocus = false;\n    }\n  };\n\n  FocusStrategy.prototype.passiveFocus = function (e) {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    if (e.target && e.target.classList.contains('e-detailcell')) {\n      this.currentInfo.skipAction = false;\n      addClass([this.currentInfo.element], ['e-focused', 'e-focus']);\n    }\n  };\n\n  FocusStrategy.prototype.onBlur = function (e) {\n    if (this.parent.isEdit || e && (!e.relatedTarget || closest(e.relatedTarget, '.e-grid'))) {\n      return;\n    }\n\n    this.removeFocus();\n    this.skipFocus = false;\n    this.currentInfo.skipAction = false;\n\n    if (this.getContent().getFocusInfo().elementToFocus) {\n      this.getContent().getFocusInfo().elementToFocus.tabIndex = 0;\n    }\n  };\n\n  FocusStrategy.prototype.onClick = function (e, force) {\n    if (parentsUntil(e.target, 'e-filterbarcell') && e.target.classList.contains('e-input-group-icon')) {\n      return;\n    }\n\n    var isContent = !isNullOrUndefined(closest(e.target, '.e-gridcontent'));\n    var isHeader = !isNullOrUndefined(closest(e.target, '.e-gridheader'));\n    isContent = isContent && isHeader ? !isContent : isContent;\n    var isFrozen = !isNullOrUndefined(closest(e.target, '.e-frozencontent')) || !isNullOrUndefined(closest(e.target, '.e-frozenheader'));\n\n    if (!isContent && isNullOrUndefined(closest(e.target, '.e-gridheader')) || e.target.classList.contains('e-content') || !isNullOrUndefined(closest(e.target, '.e-unboundcell'))) {\n      return;\n    }\n\n    this.setActive(isContent, isFrozen);\n\n    if (!isContent && isNullOrUndefined(closest(e.target, '.e-gridheader'))) {\n      this.clearOutline();\n      return;\n    }\n\n    var beforeArgs = {\n      cancel: false,\n      byKey: false,\n      byClick: !isNullOrUndefined(e.target),\n      clickArgs: e\n    };\n    this.parent.notify(event.beforeCellFocused, beforeArgs);\n\n    if (beforeArgs.cancel || closest(e.target, '.e-inline-edit')) {\n      return;\n    }\n\n    this.setActive(isContent, isFrozen);\n\n    if (this.getContent()) {\n      var returnVal = this.getContent().onClick(e, force);\n\n      if (returnVal === false) {\n        return;\n      }\n\n      this.focus();\n    }\n  };\n\n  FocusStrategy.prototype.onKeyPress = function (e) {\n    if (this.skipOn(e)) {\n      return;\n    }\n\n    this.activeKey = e.action;\n    var beforeArgs = {\n      cancel: false,\n      byKey: true,\n      byClick: false,\n      keyArgs: e\n    };\n    this.parent.notify(event.beforeCellFocused, beforeArgs);\n\n    if (beforeArgs.cancel) {\n      return;\n    }\n\n    var bValue = this.getContent().matrix.current;\n    this.currentInfo.outline = true;\n    var swapInfo = this.getContent().jump(e.action, bValue);\n    this.swap = swapInfo;\n\n    if (swapInfo.swap) {\n      this.setActive(!swapInfo.toHeader, swapInfo.toFrozen);\n      this.getContent().matrix.current = this.getContent().getNextCurrent(bValue, swapInfo, this.active, e.action);\n      this.prevIndexes = {};\n    }\n\n    this.setActiveByKey(e.action, this.getContent());\n    var returnVal = this.getContent().onKeyPress(e);\n\n    if (returnVal === false) {\n      this.clearIndicator();\n      return;\n    }\n\n    e.preventDefault();\n    this.focus(e);\n  };\n\n  FocusStrategy.prototype.skipOn = function (e) {\n    var target = e.target;\n\n    if (!target) {\n      return false;\n    }\n\n    if (this.currentInfo.skipAction) {\n      this.clearIndicator();\n      return true;\n    }\n\n    if (['pageUp', 'pageDown', 'altDownArrow'].indexOf(e.action) > -1) {\n      this.clearIndicator();\n      return true;\n    }\n\n    var th = closest(target, 'th') && !closest(target, 'th').tabIndex;\n\n    if (e.target.classList.contains('e-filterbaroperator') && (e.keyCode === 13 || e.keyCode === 27)) {\n      var inputTarget = closest(e.target, '.e-filterbarcell');\n      inputTarget.querySelector('input').focus();\n    }\n\n    if (th && closest(document.activeElement, '.e-filterbarcell') !== null) {\n      this.removeFocus();\n    }\n\n    var filterCell = closest(document.activeElement, '.e-filterbarcell') !== null;\n\n    if (this.parent.enableHeaderFocus && filterCell) {\n      var matrix = this.active.matrix;\n      var current = matrix.current;\n      filterCell = matrix.matrix[current[0]].lastIndexOf(1) !== current[1];\n    }\n\n    return e.action === 'delete' || this.parent.editSettings.mode !== 'Batch' && (this.parent.isEdit || ['insert', 'f2'].indexOf(e.action) > -1) || filterCell || closest(document.activeElement, '#' + this.parent.element.id + '_searchbar') !== null && ['enter', 'leftArrow', 'rightArrow', 'shiftLeft', 'shiftRight', 'ctrlPlusA'].indexOf(e.action) > -1 || closest(target, '.e-gridcontent') === null && closest(target, '.e-gridheader') === null || e.action === 'space' && !target.classList.contains('e-gridchkbox') && closest(target, '.e-gridchkbox') === null && closest(target, '.e-headerchkcelldiv') === null || closest(target, '.e-filter-popup') !== null;\n  };\n\n  FocusStrategy.prototype.focusVirtualElement = function (e) {\n    var _this = this;\n\n    if (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling) {\n      var data = {\n        virtualData: {},\n        isAdd: false,\n        isCancel: false\n      };\n      this.parent.notify(event.getVirtualData, data);\n      var isKeyFocus = this.actions.some(function (value) {\n        return value === _this.activeKey;\n      });\n      var isSelected = this.parent.contentModule ? this.parent.contentModule.selectedRowIndex > -1 : false;\n\n      if (data.isAdd || Object.keys(data.virtualData).length || isKeyFocus || data.isCancel || isSelected) {\n        data.isCancel = false;\n        this.parent.contentModule.selectedRowIndex = -1;\n\n        if (isKeyFocus) {\n          this.activeKey = this.empty;\n          this.parent.notify('virtaul-key-handler', e);\n        } // tslint:disable-next-line:no-any\n\n\n        this.currentInfo.elementToFocus.focus({\n          preventScroll: true\n        });\n      } else {\n        this.currentInfo.elementToFocus.focus();\n      }\n    }\n  };\n\n  FocusStrategy.prototype.getFocusedElement = function () {\n    return this.currentInfo.elementToFocus;\n  };\n\n  FocusStrategy.prototype.getContent = function () {\n    return this.active || this.content;\n  };\n\n  FocusStrategy.prototype.setActive = function (content, isFrozen) {\n    this.active = content ? isFrozen ? this.fContent : this.content : isFrozen ? this.fHeader : this.header;\n  };\n\n  FocusStrategy.prototype.setFocusedElement = function (element, e) {\n    var _this = this;\n\n    this.currentInfo.elementToFocus = element;\n    setTimeout(function () {\n      if (!isNullOrUndefined(_this.currentInfo.elementToFocus)) {\n        if (_this.parent.enableVirtualization || _this.parent.enableInfiniteScrolling) {\n          _this.focusVirtualElement(e);\n        } else {\n          _this.currentInfo.elementToFocus.focus();\n        }\n      }\n    }, 0);\n  };\n\n  FocusStrategy.prototype.focus = function (e) {\n    this.parent.notify(event.virtaulCellFocus, e);\n    this.removeFocus();\n    this.addFocus(this.getContent().getFocusInfo(), e);\n  };\n\n  FocusStrategy.prototype.removeFocus = function (e) {\n    if (!this.currentInfo.element) {\n      return;\n    }\n\n    removeClass([this.currentInfo.element, this.currentInfo.elementToFocus], ['e-focused', 'e-focus']);\n    this.currentInfo.element.tabIndex = -1;\n  };\n  /** @hidden */\n\n\n  FocusStrategy.prototype.addOutline = function () {\n    var info = this.getContent().getFocusInfo();\n\n    if (info.element) {\n      addClass([info.element], ['e-focused']);\n      addClass([info.elementToFocus], ['e-focus']);\n    }\n  };\n  /** @hidden */\n\n\n  FocusStrategy.prototype.focusHeader = function () {\n    this.setActive(false, this.parent.frozenColumns !== 0);\n    this.resetFocus();\n  };\n  /** @hidden */\n\n\n  FocusStrategy.prototype.focusContent = function () {\n    this.setActive(true, this.parent.frozenColumns !== 0);\n    this.resetFocus();\n  };\n\n  FocusStrategy.prototype.resetFocus = function () {\n    var current = this.getContent().matrix.get(0, -1, [0, 1], null, this.getContent().validator());\n    this.getContent().matrix.select(current[0], current[1]);\n    this.focus();\n  };\n\n  FocusStrategy.prototype.addFocus = function (info, e) {\n    this.currentInfo = info;\n    this.currentInfo.outline = info.outline && !isNullOrUndefined(e);\n\n    if (!info.element) {\n      return;\n    }\n\n    var isFocused = info.elementToFocus.classList.contains('e-focus');\n\n    if (isFocused) {\n      return;\n    }\n\n    if (this.currentInfo.outline) {\n      addClass([info.element], ['e-focused']);\n    }\n\n    addClass([info.elementToFocus], ['e-focus']);\n    info.element.tabIndex = 0;\n\n    if (!isFocused) {\n      this.setFocusedElement(info.elementToFocus, e);\n    }\n\n    this.parent.notify(event.cellFocused, {\n      element: info.elementToFocus,\n      parent: info.element,\n      indexes: this.getContent().matrix.current,\n      byKey: !isNullOrUndefined(e),\n      byClick: isNullOrUndefined(e),\n      keyArgs: e,\n      isJump: this.swap.swap,\n      container: this.getContent().getInfo(e),\n      outline: !isNullOrUndefined(e),\n      swapInfo: this.swap\n    });\n    var _a = this.getContent().matrix.current,\n        rowIndex = _a[0],\n        cellIndex = _a[1];\n    this.prevIndexes = {\n      rowIndex: rowIndex,\n      cellIndex: cellIndex\n    };\n    this.focusedColumnUid = this.parent.getColumnByIndex(cellIndex).uid;\n    this.focusByClick = false;\n  };\n\n  FocusStrategy.prototype.refreshMatrix = function (content) {\n    var _this = this;\n\n    return function (e) {\n      if (content && e.args && e.args.isFrozen && !_this.fContent) {\n        _this.fContent = new FixedContentFocus(_this.parent);\n      } else if (content && !_this.content) {\n        _this.content = new ContentFocus(_this.parent);\n      }\n\n      if (!content && e.args && e.args.isFrozen && !_this.fHeader) {\n        _this.fHeader = new FixedHeaderFocus(_this.parent);\n      } else if (!content && !_this.header) {\n        _this.header = new HeaderFocus(_this.parent);\n      }\n\n      var cFocus = content ? e.args && e.args.isFrozen ? _this.fContent : _this.content : e.args && e.args.isFrozen ? _this.fHeader : _this.header;\n      var rows = content ? e.rows.slice(_this.parent.frozenRows) : e.rows;\n      var updateRow = content ? e.rows.slice(0, _this.parent.frozenRows) : e.rows;\n\n      if (_this.parent.isCollapseStateEnabled() && content) {\n        rows = rows.filter(function (x) {\n          return x.visible !== false;\n        });\n      }\n\n      var isRowTemplate = !isNullOrUndefined(_this.parent.rowTemplate);\n      var matrix = cFocus.matrix.generate(updateRow, cFocus.selector, isRowTemplate);\n\n      var frozenColumnsCount = _this.parent.getFrozenColumns();\n\n      if (e.name === 'batchAdd' && frozenColumnsCount) {\n        var mRows = _this.parent.getMovableRowsObject();\n\n        var newMovableRows = mRows.map(function (row) {\n          return row.clone();\n        });\n        var newFrozenRows = rows.map(function (row) {\n          return row.clone();\n        });\n\n        _this.fContent.matrix.generate(newFrozenRows, _this.fContent.selector, isRowTemplate);\n\n        _this.content.matrix.generate(newMovableRows, _this.content.selector, isRowTemplate);\n      } else {\n        cFocus.matrix.generate(rows, cFocus.selector, isRowTemplate);\n      }\n\n      cFocus.generateRows(updateRow, {\n        matrix: matrix,\n        handlerInstance: e.args && e.args.isFrozen ? _this.fHeader : _this.header\n      });\n\n      if (!Browser.isDevice && e && e.args) {\n        if (!_this.focusByClick && e.args.requestType === 'paging') {\n          _this.skipFocus = false;\n\n          _this.parent.element.focus();\n        }\n\n        if (e.args.requestType === 'grouping') {\n          _this.skipFocus = true;\n        }\n      }\n\n      if (e && e.args && e.args.requestType === 'virtualscroll') {\n        if (_this.currentInfo.uid) {\n          var index_1;\n          var bool = e.rows.some(function (row, i) {\n            index_1 = i;\n            return row.uid === _this.currentInfo.uid;\n          });\n\n          if (bool) {\n            _this.content.matrix.current[0] = index_1;\n            _this.content.matrix.current[1] = _this.parent.getColumnIndexByUid(_this.focusedColumnUid) || 0;\n\n            var focusElement = _this.getContent().getFocusInfo().elementToFocus;\n\n            if (focusElement) {\n              var cellPosition = focusElement.getBoundingClientRect();\n\n              var gridPosition = _this.parent.element.getBoundingClientRect();\n\n              if (cellPosition.top >= 0 && cellPosition.left >= 0 && cellPosition.right <= Math.min(gridPosition.right, window.innerWidth || document.documentElement.clientWidth) && cellPosition.bottom <= Math.min(gridPosition.bottom, window.innerHeight || document.documentElement.clientHeight)) {\n                _this.focus();\n              }\n            }\n          }\n        } else if (e.args.focusElement && e.args.focusElement.classList.contains('e-filtertext')) {\n          var focusElement = _this.parent.element.querySelector('#' + e.args.focusElement.id);\n\n          if (focusElement) {\n            focusElement.focus();\n          }\n        }\n      }\n    };\n  };\n\n  FocusStrategy.prototype.addEventListener = function () {\n    var _this = this;\n\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    EventHandler.add(this.parent.element, 'mousedown', this.focusCheck, this);\n    EventHandler.add(this.parent.element, 'focus', this.onFocus, this);\n    this.parent.element.addEventListener('focus', this.passiveHandler = function (e) {\n      return _this.passiveFocus(e);\n    }, true);\n    EventHandler.add(this.parent.element, 'focusout', this.onBlur, this);\n    this.parent.on(event.keyPressed, this.onKeyPress, this);\n    this.parent.on(event.click, this.onClick, this);\n    this.parent.on(event.contentReady, this.refMatrix, this);\n    this.parent.on(event.partialRefresh, this.refMatrix, this);\n    this.parent.on(event.headerRefreshed, this.refreshMatrix(), this);\n    this.parent.on('close-edit', this.restoreFocus, this);\n    this.parent.on('restore-Focus', this.restoreFocus, this);\n    var evts = ['start-edit', 'start-add'];\n\n    for (var i = 0; i < evts.length; i++) {\n      this.parent.on(evts[i], this.clearIndicator, this);\n    }\n\n    this.parent.on('sorting-complete', this.restoreFocus, this);\n    this.parent.on('filtering-complete', this.filterfocus, this);\n    var actionsG = ['grouping', 'ungrouping'];\n\n    for (var k = 0; k < actionsG.length; k++) {\n      this.parent.on(actionsG[k] + \"-complete\", this.restoreFocusWithAction, this);\n    }\n\n    this.parent.on(event.batchAdd, this.refMatrix, this);\n    this.parent.on(event.batchCancel, this.refMatrix, this);\n    this.parent.on(event.batchDelete, this.refMatrix, this);\n    this.parent.on(event.detailDataBound, this.refMatrix, this);\n    this.parent.on(event.onEmpty, this.refMatrix, this);\n    this.parent.on(event.cellFocused, this.internalCellFocus, this);\n  };\n\n  FocusStrategy.prototype.filterfocus = function () {\n    if (this.parent.filterSettings.type !== 'FilterBar') {\n      this.restoreFocus();\n    }\n  };\n\n  FocusStrategy.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    EventHandler.remove(this.parent.element, 'mousedown', this.focusCheck);\n    EventHandler.remove(this.parent.element, 'focus', this.onFocus);\n    EventHandler.remove(this.parent.element, 'focusout', this.onBlur);\n    this.parent.element.removeEventListener('focus', this.passiveHandler, true);\n    this.parent.off(event.keyPressed, this.onKeyPress);\n    this.parent.off(event.click, this.onClick);\n    this.parent.off(event.contentReady, this.refMatrix);\n    this.parent.off(event.partialRefresh, this.refMatrix);\n    this.parent.off(event.headerRefreshed, this.refreshMatrix());\n    this.parent.off('close-edit', this.restoreFocus);\n    this.parent.off('restore-focus', this.restoreFocus);\n    var evts = ['start-edit', 'start-add'];\n\n    for (var i = 0; i < evts.length; i++) {\n      this.parent.off(evts[i], this.clearOutline);\n    }\n\n    this.parent.off('sorting-complete', this.restoreFocus);\n    this.parent.off('filtering-complete', this.filterfocus);\n    var actionsG = ['grouping', 'ungrouping'];\n\n    for (var k = 0; k < actionsG.length; k++) {\n      this.parent.on(actionsG[k] + \"-complete\", this.restoreFocusWithAction);\n    }\n\n    this.parent.off(event.batchAdd, this.refMatrix);\n    this.parent.off(event.batchDelete, this.refMatrix);\n    this.parent.off(event.batchCancel, this.refMatrix);\n    this.parent.off(event.detailDataBound, this.refMatrix);\n    this.parent.off(event.onEmpty, this.refMatrix);\n    this.parent.off(event.cellFocused, this.internalCellFocus);\n  };\n\n  FocusStrategy.prototype.destroy = function () {\n    this.removeEventListener();\n  };\n\n  FocusStrategy.prototype.restoreFocus = function () {\n    this.addFocus(this.getContent().getFocusInfo());\n  };\n\n  FocusStrategy.prototype.restoreFocusWithAction = function (e) {\n    if (!this.parent.enableInfiniteScrolling) {\n      var matrix = this.getContent().matrix;\n      var current = matrix.current;\n\n      switch (e.requestType) {\n        case 'grouping':\n        case 'ungrouping':\n          current[1] = current.length && !this.parent.groupSettings.showGroupedColumn && !isNullOrUndefined(matrix.matrix[current[0]]) ? matrix.matrix[current[0]].indexOf(1) : e.requestType === 'grouping' ? current[1] + 1 : current[1] - 1;\n          break;\n      }\n\n      this.getContent().matrix.current = current;\n      this.addFocus(this.getContent().getFocusInfo());\n    }\n  };\n\n  FocusStrategy.prototype.clearOutline = function () {\n    this.getContent().matrix.current = this.getContent().matrix.get(0, -1, [0, 1], 'downArrow', this.getContent().validator());\n    this.clearIndicator();\n  };\n\n  FocusStrategy.prototype.clearIndicator = function () {\n    if (!this.currentInfo.element || !this.currentInfo.elementToFocus) {\n      return;\n    }\n\n    removeClass([this.currentInfo.element, this.currentInfo.elementToFocus], ['e-focus', 'e-focused']);\n  };\n\n  FocusStrategy.prototype.getPrevIndexes = function () {\n    var forget = this.forget;\n    this.forget = false;\n    return forget || !Object.keys(this.prevIndexes).length ? {\n      rowIndex: null,\n      cellIndex: null\n    } : this.prevIndexes;\n  };\n\n  FocusStrategy.prototype.forgetPrevious = function () {\n    this.forget = true;\n  };\n\n  FocusStrategy.prototype.setActiveByKey = function (action, active) {\n    var _this = this;\n\n    if (this.parent.frozenColumns === 0 && this.parent.frozenRows === 0) {\n      return;\n    }\n\n    var info;\n    var actions = {\n      'home': function () {\n        return {\n          toHeader: !info.isContent,\n          toFrozen: true\n        };\n      },\n      'end': function () {\n        return {\n          toHeader: !info.isContent,\n          toFrozen: false\n        };\n      },\n      'ctrlHome': function () {\n        return {\n          toHeader: true,\n          toFrozen: _this.parent.frozenColumns !== 0\n        };\n      },\n      'ctrlEnd': function () {\n        return {\n          toHeader: false,\n          toFrozen: false\n        };\n      }\n    };\n\n    if (!(action in actions)) {\n      return;\n    }\n\n    info = active.getInfo();\n    var swap = actions[action]();\n    this.setActive(!swap.toHeader, swap.toFrozen);\n    this.getContent().matrix.current = active.matrix.current;\n  };\n\n  FocusStrategy.prototype.internalCellFocus = function (e) {\n    if (!(e.byKey && e.container.isContent && e.keyArgs.action === 'enter' && (e.parent.classList.contains('e-detailcell') || e.parent.classList.contains('e-unboundcell') || e.parent.classList.contains('e-templatecell')))) {\n      return;\n    }\n\n    this.clearIndicator();\n    var focusEle = this.getContent().getFocusable(this.getFocusedElement());\n    this.setFocusedElement(focusEle);\n    this.currentInfo.skipAction = true;\n  };\n\n  return FocusStrategy;\n}();\n\nexport { FocusStrategy };\n/**\n * Create matrix from row collection which act as mental model for cell navigation\n * @hidden\n */\n\nvar Matrix =\n/** @class */\nfunction () {\n  function Matrix() {\n    this.matrix = [];\n    this.current = [];\n  }\n\n  Matrix.prototype.set = function (rowIndex, columnIndex, allow) {\n    rowIndex = Math.max(0, Math.min(rowIndex, this.rows));\n    columnIndex = Math.max(0, Math.min(columnIndex, this.columns));\n    this.matrix[rowIndex] = this.matrix[rowIndex] || [];\n    this.matrix[rowIndex][columnIndex] = allow ? 1 : 0;\n  };\n\n  Matrix.prototype.get = function (rowIndex, columnIndex, navigator, action, validator) {\n    var tmp = columnIndex;\n\n    if (rowIndex + navigator[0] < 0) {\n      return [rowIndex, columnIndex];\n    }\n\n    rowIndex = Math.max(0, Math.min(rowIndex + navigator[0], this.rows));\n    var emptyTable = true;\n\n    if (isNullOrUndefined(this.matrix[rowIndex])) {\n      return null;\n    }\n\n    columnIndex = Math.max(0, Math.min(columnIndex + navigator[1], this.matrix[rowIndex].length - 1));\n\n    if (tmp + navigator[1] > this.matrix[rowIndex].length - 1 && validator(rowIndex, columnIndex, action)) {\n      return [rowIndex, tmp];\n    }\n\n    var first = this.first(this.matrix[rowIndex], columnIndex, navigator, true, action);\n    columnIndex = first === null ? tmp : first;\n    var val = getValue(rowIndex + \".\" + columnIndex, this.matrix);\n\n    if (rowIndex === this.rows && (action === 'downArrow' || action === 'enter')) {\n      navigator[0] = -1;\n    }\n\n    if (first === null) {\n      rowIndex = this.current[0];\n\n      for (var i = 0; i < this.rows; i++) {\n        if (this.matrix[i].some(function (v) {\n          return v === 1;\n        })) {\n          emptyTable = false;\n          break;\n        }\n      }\n\n      if (emptyTable) {\n        return [rowIndex, columnIndex];\n      }\n    }\n\n    return this.inValid(val) || !validator(rowIndex, columnIndex, action) ? this.get(rowIndex, tmp, navigator, action, validator) : [rowIndex, columnIndex];\n  };\n\n  Matrix.prototype.first = function (vector, index, navigator, moveTo, action) {\n    if ((index < 0 || index === vector.length) && this.inValid(vector[index]) && action !== 'upArrow' && action !== 'downArrow' || !vector.some(function (v) {\n      return v === 1;\n    })) {\n      return null;\n    }\n\n    return !this.inValid(vector[index]) ? index : this.first(vector, ['upArrow', 'downArrow', 'shiftUp', 'shiftDown'].indexOf(action) !== -1 ? moveTo ? 0 : ++index : index + navigator[1], navigator, false, action);\n  };\n\n  Matrix.prototype.select = function (rowIndex, columnIndex) {\n    rowIndex = Math.max(0, Math.min(rowIndex, this.rows));\n    columnIndex = Math.max(0, Math.min(columnIndex, this.matrix[rowIndex].length - 1));\n    this.current = [rowIndex, columnIndex];\n  };\n\n  Matrix.prototype.generate = function (rows, selector, isRowTemplate) {\n    this.rows = rows.length - 1;\n    this.matrix = [];\n\n    for (var i = 0; i < rows.length; i++) {\n      var cells = rows[i].cells.filter(function (c) {\n        return c.isSpanned !== true;\n      });\n      this.columns = Math.max(cells.length - 1, this.columns | 0);\n\n      for (var j = 0; j < cells.length; j++) {\n        this.set(i, j, selector(rows[i], cells[j], isRowTemplate));\n      }\n    }\n\n    return this.matrix;\n  };\n\n  Matrix.prototype.inValid = function (value) {\n    return value === 0 || value === undefined;\n  };\n\n  return Matrix;\n}();\n\nexport { Matrix };\n/**\n * @hidden\n */\n\nvar ContentFocus =\n/** @class */\nfunction () {\n  function ContentFocus(parent) {\n    var _this = this;\n\n    this.matrix = new Matrix();\n    this.parent = parent;\n    this.keyActions = {\n      'rightArrow': [0, 1],\n      'tab': [0, 1],\n      'leftArrow': [0, -1],\n      'shiftTab': [0, -1],\n      'upArrow': [-1, 0],\n      'downArrow': [1, 0],\n      'shiftUp': [-1, 0],\n      'shiftDown': [1, 0],\n      'shiftRight': [0, 1],\n      'shiftLeft': [0, -1],\n      'enter': [1, 0],\n      'shiftEnter': [-1, 0]\n    };\n\n    this.indexesByKey = function (action) {\n      var opt = {\n        'home': [_this.matrix.current[0], -1, 0, 1],\n        'end': [_this.matrix.current[0], _this.matrix.columns + 1, 0, -1],\n        'ctrlHome': [0, -1, 0, 1],\n        'ctrlEnd': [_this.matrix.rows, _this.matrix.columns + 1, 0, -1]\n      };\n      return opt[action] || null;\n    };\n  }\n\n  ContentFocus.prototype.getTable = function () {\n    return this.parent.getFrozenColumns() ? this.parent.getContent().querySelector('.e-movablecontent .e-table') : this.parent.getContentTable();\n  };\n\n  ContentFocus.prototype.onKeyPress = function (e) {\n    var navigator = this.keyActions[e.action];\n    var current = this.getCurrentFromAction(e.action, navigator, e.action in this.keyActions, e);\n\n    if (!current) {\n      return;\n    }\n\n    if ((['tab', 'shiftTab'].indexOf(e.action) > -1 && this.matrix.current || []).toString() === current.toString()) {\n      if (current.toString() === [this.matrix.rows, this.matrix.columns].toString() || current.toString() === [0, 0].toString() || this.matrix.current[0] === this.matrix.rows && this.matrix.current.toString() === current.toString()) {\n        return false;\n      } else {\n        current = this.editNextRow(current[0], current[1], e.action);\n      }\n    }\n\n    this.matrix.select(current[0], current[1]);\n  };\n\n  ContentFocus.prototype.editNextRow = function (rowIndex, cellIndex, action) {\n    var gObj = this.parent;\n    var editNextRow = gObj.editSettings.allowNextRowEdit && (gObj.isEdit || gObj.isLastCellPrimaryKey);\n    var visibleIndex = gObj.getColumnIndexByField(gObj.getVisibleColumns()[0].field);\n    var cell = this.getTable().rows[rowIndex].cells[cellIndex];\n\n    if (action === 'tab' && editNextRow) {\n      rowIndex++;\n      var index = this.getTable().rows[rowIndex].querySelectorAll('.e-indentcell').length + this.getTable().rows[rowIndex].querySelectorAll('.e-detailrowcollapse').length;\n      cellIndex = visibleIndex + index;\n    }\n\n    if (action === 'shiftTab' && editNextRow) {\n      rowIndex--;\n      cellIndex = gObj.getColumnIndexByField(gObj.getVisibleColumns()[gObj.getVisibleColumns().length - 1].field);\n    }\n\n    return !cell.classList.contains('e-rowcell') && !cell.classList.contains('e-headercell') && !cell.classList.contains('e-groupcaption') ? this.editNextRow(rowIndex, cellIndex, action) : [rowIndex, cellIndex];\n  };\n\n  ContentFocus.prototype.getCurrentFromAction = function (action, navigator, isPresent, e) {\n    if (navigator === void 0) {\n      navigator = [0, 0];\n    }\n\n    if (!isPresent && !this.indexesByKey(action) || this.matrix.current.length === 0) {\n      return null;\n    }\n\n    if (!this.shouldFocusChange(e)) {\n      return this.matrix.current;\n    }\n\n    var _a = this.indexesByKey(action) || this.matrix.current.concat(navigator),\n        rowIndex = _a[0],\n        cellIndex = _a[1],\n        rN = _a[2],\n        cN = _a[3];\n\n    var current = this.matrix.get(rowIndex, cellIndex, [rN, cN], action, this.validator());\n    return current;\n  };\n\n  ContentFocus.prototype.onClick = function (e, force) {\n    var target = e.target;\n    target = target.classList.contains('e-rowcell') ? target : closest(target, 'td');\n    target = target ? target : closest(e.target, 'td.e-detailrowcollapse') || closest(e.target, 'td.e-detailrowexpand');\n    target = closest(e.target, 'td.e-detailcell') ? isNullOrUndefined(closest(closest(e.target, '.e-grid'), 'td.e-detailcell')) ? null : target : target;\n    target = target && closest(target, 'table').classList.contains('e-table') ? target : null;\n\n    if (!target) {\n      return false;\n    }\n\n    var _a = [target.parentElement.rowIndex, target.cellIndex],\n        rowIndex = _a[0],\n        cellIndex = _a[1];\n    var _b = this.matrix.current,\n        oRowIndex = _b[0],\n        oCellIndex = _b[1];\n    var val = getValue(rowIndex + \".\" + cellIndex, this.matrix.matrix);\n\n    if (this.matrix.inValid(val) || !force && oRowIndex === rowIndex && oCellIndex === cellIndex || !parentsUntil(e.target, 'e-rowcell') && !parentsUntil(e.target, 'e-groupcaption')) {\n      return false;\n    }\n\n    this.matrix.select(rowIndex, cellIndex);\n  };\n\n  ContentFocus.prototype.getFocusInfo = function () {\n    var info = {};\n    var _a = this.matrix.current,\n        _b = _a[0],\n        rowIndex = _b === void 0 ? 0 : _b,\n        _c = _a[1],\n        cellIndex = _c === void 0 ? 0 : _c;\n    this.matrix.current = [rowIndex, cellIndex];\n    info.element = !isNullOrUndefined(this.getTable().rows[rowIndex]) ? this.getTable().rows[rowIndex].cells[cellIndex] : null;\n\n    if (!info.element) {\n      return info;\n    }\n\n    info.elementToFocus = !info.element.classList.contains('e-unboundcell') && !info.element.classList.contains('e-detailcell') ? this.getFocusable(info.element) : info.element;\n    info.outline = true;\n    info.uid = info.element.parentElement.getAttribute('data-uid');\n    return info;\n  };\n\n  ContentFocus.prototype.getFocusable = function (element) {\n    var query = 'button, [href], input:not([type=\"hidden\"]), select, textarea, [tabindex]:not([tabindex=\"-1\"])';\n\n    if (this.parent.isEdit) {\n      query = 'input:not([type=\"hidden\"]), select:not([aria-hidden=\"true\"]), textarea';\n    }\n\n    var child = [].slice.call(element.querySelectorAll(query));\n    /* Select the first focusable child element\n     * if no child found then select the cell itself.\n     * if Grid is in editable state, check for editable control inside child.\n     */\n\n    return child.length ? child[0] : element;\n  };\n\n  ContentFocus.prototype.selector = function (row, cell, isRowTemplate) {\n    var types = [CellType.Expand, CellType.GroupCaption, CellType.CaptionSummary, CellType.GroupSummary];\n    return (row.isDataRow && cell.visible && (cell.isDataCell || cell.isTemplate) || row.isDataRow && cell.cellType === CellType.DetailExpand && isNullOrUndefined(cell.visible) || !row.isDataRow && types.indexOf(cell.cellType) > -1 || cell.column && cell.column.type === 'checkbox' || cell.cellType === CellType.CommandColumn || row.isDataRow && isRowTemplate) && !(row.edit === 'delete' && row.isDirty);\n  };\n\n  ContentFocus.prototype.jump = function (action, current) {\n    var frozenSwap = this.parent.frozenColumns > 0 && (action === 'leftArrow' || action === 'shiftTab') && current[1] === 0;\n    var enterFrozen = this.parent.frozenRows !== 0 && action === 'shiftEnter';\n\n    if (action === 'tab' && !this.parent.isEdit && current[1] === this.matrix.matrix[current[0]].lastIndexOf(1) && this.matrix.matrix.length - 1 !== current[0]) {\n      this.matrix.current[0] = this.matrix.current[0] + 1;\n      this.matrix.current[1] = -1;\n      frozenSwap = this.parent.frozenColumns > 0;\n    }\n\n    if (action === 'shiftTab' && !this.parent.isEdit && current[0] !== 0 && this.matrix.matrix[current[0]].indexOf(1) === current[1]) {\n      this.matrix.current[0] = this.matrix.current[0] - 1;\n      this.matrix.current[1] = this.matrix.matrix[current[0]].length;\n    }\n\n    var isHeaderFocus = false;\n    var row = document.activeElement.parentElement;\n\n    if ((this.parent.enableVirtualization || this.parent.infiniteScrollSettings.enableCache) && row.classList.contains('e-row')) {\n      var rowIndex = parseInt(row.getAttribute('aria-rowindex'), 10);\n      isHeaderFocus = rowIndex > 0;\n    }\n\n    var info = {\n      swap: !isHeaderFocus ? (action === 'upArrow' || enterFrozen) && current[0] === 0 || frozenSwap : false,\n      toHeader: (action === 'upArrow' || enterFrozen) && current[0] === 0,\n      toFrozen: frozenSwap\n    };\n    return info;\n  };\n\n  ContentFocus.prototype.getNextCurrent = function (previous, swap, active, action) {\n    if (previous === void 0) {\n      previous = [];\n    }\n\n    var current = [];\n\n    if (action === 'rightArrow' || action === 'tab') {\n      current[0] = previous[0];\n      current[1] = -1;\n    } else if (action === 'downArrow' || action === 'enter') {\n      current[0] = -1;\n      current[1] = previous[1];\n    }\n\n    return current;\n  };\n\n  ContentFocus.prototype.generateRows = function (rows, optionals) {\n    var _a;\n\n    var matrix = optionals.matrix,\n        handlerInstance = optionals.handlerInstance;\n    var len = handlerInstance.matrix.matrix.length;\n    var defaultLen = this.parent.allowFiltering && this.parent.filterSettings.type === 'FilterBar' ? len + 1 : len;\n    handlerInstance.matrix.matrix = handlerInstance.matrix.matrix.slice(0, defaultLen); //Header matrix update.\n\n    handlerInstance.matrix.rows = defaultLen;\n\n    (_a = handlerInstance.matrix.matrix).push.apply(_a, matrix);\n\n    handlerInstance.matrix.rows += matrix.length;\n  };\n\n  ContentFocus.prototype.getInfo = function (e) {\n    var info = this.getFocusInfo();\n    var _a = this.matrix.current,\n        rIndex = _a[0],\n        cIndex = _a[1];\n    var isData = info.element.classList.contains('e-rowcell');\n    var isSelectable = isData || e && e.action !== 'enter' && (info.element.classList.contains('e-detailrowcollapse') || info.element.classList.contains('e-detailrowexpand'));\n    var _b = [Math.min(parseInt(info.element.parentElement.getAttribute('aria-rowindex'), 10), rIndex), Math.min(parseInt(info.element.getAttribute('aria-colindex'), 10), cIndex)],\n        rowIndex = _b[0],\n        cellIndex = _b[1];\n    return {\n      isContent: true,\n      isDataCell: isData,\n      indexes: [rowIndex, cellIndex],\n      isSelectable: isSelectable\n    };\n  };\n\n  ContentFocus.prototype.validator = function () {\n    var table = this.getTable();\n    return function (rowIndex, cellIndex, action) {\n      if (!isNullOrUndefined(table.rows[rowIndex])) {\n        var cell = void 0;\n        cellIndex = table.querySelector('.e-emptyrow') ? 0 : cellIndex;\n\n        if (table.rows[rowIndex].cells[0].classList.contains('e-editcell')) {\n          cell = table.rows[rowIndex].cells[0].querySelectorAll('td')[cellIndex];\n        } else {\n          cell = table.rows[rowIndex].cells[cellIndex];\n        }\n\n        var isCellWidth = cell.getBoundingClientRect().width !== 0;\n\n        if (action === 'enter' || action === 'shiftEnter') {\n          return isCellWidth && cell.classList.contains('e-rowcell');\n        }\n\n        if ((action === 'shiftUp' || action === 'shiftDown') && cell.classList.contains('e-rowcell')) {\n          return isCellWidth;\n        } else if (action !== 'shiftUp' && action !== 'shiftDown') {\n          return isCellWidth;\n        }\n      }\n\n      return false;\n    };\n  };\n\n  ContentFocus.prototype.shouldFocusChange = function (e) {\n    var _a = this.matrix.current,\n        _b = _a[0],\n        rIndex = _b === void 0 ? -1 : _b,\n        _c = _a[1],\n        cIndex = _c === void 0 ? -1 : _c;\n\n    if (rIndex < 0 || cIndex < 0) {\n      return true;\n    }\n\n    var cell = getValue(rIndex + \".cells.\" + cIndex, this.getTable().rows);\n\n    if (!cell) {\n      return true;\n    }\n\n    return e.action === 'enter' || e.action === 'shiftEnter' ? cell.classList.contains('e-rowcell') && !cell.classList.contains('e-unboundcell') && (!cell.classList.contains('e-templatecell') || cell.classList.contains('e-editedbatchcell')) && !cell.classList.contains('e-detailcell') : true;\n  };\n\n  return ContentFocus;\n}();\n\nexport { ContentFocus };\n/**\n * @hidden\n */\n\nvar HeaderFocus =\n/** @class */\nfunction (_super) {\n  __extends(HeaderFocus, _super);\n\n  function HeaderFocus(parent) {\n    return _super.call(this, parent) || this;\n  }\n\n  HeaderFocus.prototype.getTable = function () {\n    return this.parent.getFrozenColumns() ? this.parent.getHeaderContent().querySelector('.e-movableheader .e-table') : this.parent.getHeaderTable();\n  };\n\n  HeaderFocus.prototype.onClick = function (e) {\n    var target = e.target;\n    target = target.classList.contains('e-headercell') ? target : closest(target, 'th');\n\n    if (!target && this.parent.frozenRows !== 0) {\n      target = e.target.classList.contains('e-rowcell') ? e.target : closest(e.target, 'td');\n    }\n\n    if (e.target.classList.contains('e-columnheader') || e.target.querySelector('.e-stackedheadercell')) {\n      return false;\n    }\n\n    if (!target) {\n      return;\n    }\n\n    var _a = [target.parentElement.rowIndex, target.cellIndex],\n        rowIndex = _a[0],\n        cellIndex = _a[1];\n    var val = getValue(rowIndex + \".\" + cellIndex, this.matrix.matrix);\n\n    if (this.matrix.inValid(val)) {\n      return false;\n    }\n\n    this.matrix.select(target.parentElement.rowIndex, target.cellIndex);\n  };\n\n  HeaderFocus.prototype.getFocusInfo = function () {\n    var info = {};\n    var _a = this.matrix.current,\n        _b = _a[0],\n        rowIndex = _b === void 0 ? 0 : _b,\n        _c = _a[1],\n        cellIndex = _c === void 0 ? 0 : _c;\n    info.element = this.getTable().rows[rowIndex].cells[cellIndex];\n\n    if (!isNullOrUndefined(info.element)) {\n      info.elementToFocus = this.getFocusable(info.element);\n      info.outline = !info.element.classList.contains('e-filterbarcell');\n    }\n\n    return info;\n  };\n\n  HeaderFocus.prototype.selector = function (row, cell) {\n    return cell.visible && (cell.column.field !== undefined || cell.isTemplate) || cell.column.type === 'checkbox' || cell.cellType === CellType.StackedHeader;\n  };\n\n  HeaderFocus.prototype.jump = function (action, current) {\n    var frozenSwap = this.parent.frozenColumns > 0 && (action === 'leftArrow' || action === 'shiftTab') && current[1] === 0;\n    var enterFrozen = this.parent.frozenRows !== 0 && action === 'enter';\n    var isLastCell;\n    var lastRow;\n    var headerSwap = frozenSwap;\n    var fMatrix = this.parent.focusModule.fHeader && this.parent.focusModule.fHeader.matrix.matrix;\n    var isPresent = fMatrix && !isNullOrUndefined(fMatrix[current[0]]);\n\n    if (this.parent.enableHeaderFocus && action === 'tab') {\n      lastRow = this.matrix.matrix.length - 1 === current[0];\n      isLastCell = current[1] === this.matrix.matrix[current[0]].lastIndexOf(1);\n\n      if (isLastCell) {\n        if (!lastRow) {\n          this.matrix.current[0] = this.matrix.current[0] + 1;\n        } else {\n          this.matrix.current[0] = 0;\n        }\n\n        this.matrix.current[1] = -1;\n      }\n\n      if (this.parent.frozenColumns > 0 && lastRow && isLastCell) {\n        frozenSwap = true;\n        headerSwap = false;\n      }\n    }\n\n    return {\n      swap: (action === 'downArrow' || enterFrozen) && current[0] === this.matrix.matrix.length - 1 || isPresent && frozenSwap || action === 'tab' && lastRow && isLastCell,\n      toHeader: headerSwap,\n      toFrozen: frozenSwap\n    };\n  };\n\n  HeaderFocus.prototype.getNextCurrent = function (previous, swap, active, action) {\n    if (previous === void 0) {\n      previous = [];\n    }\n\n    var current1 = [];\n\n    if (action === 'upArrow' || action === 'shiftEnter') {\n      current1[0] = this.matrix.matrix.length;\n      current1[1] = previous[1];\n    } else if (action === 'rightArrow' || action === 'tab') {\n      current1[0] = previous[0];\n      current1[1] = -1;\n    }\n\n    return current1;\n  };\n\n  HeaderFocus.prototype.generateRows = function (rows) {\n    var length = this.matrix.matrix.length;\n\n    if (this.parent.allowFiltering && this.parent.filterSettings.type === 'FilterBar') {\n      this.matrix.rows = ++this.matrix.rows;\n      var cells = rows[0].cells;\n\n      for (var i = 0; i < cells.length; i++) {\n        this.matrix.set(length, i, cells[i].visible && cells[i].column.allowFiltering !== false);\n      }\n    }\n  };\n\n  HeaderFocus.prototype.getInfo = function (e) {\n    return extend(_super.prototype.getInfo.call(this, e), {\n      isContent: false,\n      isHeader: true\n    });\n  };\n\n  HeaderFocus.prototype.validator = function () {\n    return function () {\n      return true;\n    };\n  };\n\n  HeaderFocus.prototype.shouldFocusChange = function (e) {\n    var _a = this.matrix.current,\n        rowIndex = _a[0],\n        columnIndex = _a[1];\n\n    if (rowIndex < 0 || columnIndex < 0) {\n      return true;\n    }\n\n    var cell = getValue(rowIndex + \".cells.\" + columnIndex, this.getTable().rows);\n\n    if (!cell) {\n      return true;\n    }\n\n    return e.action === 'enter' || e.action === 'altDownArrow' ? !cell.classList.contains('e-headercell') : true;\n  };\n\n  return HeaderFocus;\n}(ContentFocus);\n\nexport { HeaderFocus };\n\nvar FixedContentFocus =\n/** @class */\nfunction (_super) {\n  __extends(FixedContentFocus, _super);\n\n  function FixedContentFocus() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  FixedContentFocus.prototype.getTable = function () {\n    return this.parent.getContent().querySelector('.e-frozencontent .e-table');\n  };\n\n  FixedContentFocus.prototype.jump = function (action, current) {\n    var enterFrozen = this.parent.frozenRows !== 0 && action === 'shiftEnter';\n    return {\n      swap: (action === 'upArrow' || enterFrozen) && current[0] === 0 || (action === 'tab' || action === 'rightArrow') && current[1] === this.matrix.columns,\n      toHeader: (action === 'upArrow' || enterFrozen) && current[0] === 0,\n      toFrozen: (action === 'upArrow' || enterFrozen) && current[0] === 0\n    };\n  };\n\n  FixedContentFocus.prototype.getNextCurrent = function (previous, swap, active, action) {\n    if (previous === void 0) {\n      previous = [];\n    }\n\n    var current2 = [];\n\n    if (action === 'tab' && this.parent.enableHeaderFocus) {\n      current2[0] = previous[0];\n      current2[1] = -1;\n    }\n\n    if (action === 'leftArrow' || action === 'shiftTab') {\n      current2[0] = previous[0];\n      current2[1] = active.matrix.columns + 1;\n    } else if (action === 'downArrow' || action === 'enter') {\n      current2[0] = -1;\n      current2[1] = previous[1];\n    }\n\n    return current2;\n  };\n\n  return FixedContentFocus;\n}(ContentFocus);\n\nexport { FixedContentFocus };\n\nvar FixedHeaderFocus =\n/** @class */\nfunction (_super) {\n  __extends(FixedHeaderFocus, _super);\n\n  function FixedHeaderFocus() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  FixedHeaderFocus.prototype.jump = function (action, current) {\n    var enterFrozen = this.parent.frozenRows !== 0 && action === 'enter';\n    var hMatrix = this.parent.focusModule.header && this.parent.focusModule.header.matrix.matrix;\n    var isPresent = hMatrix && !isNullOrUndefined(hMatrix[current[0]]);\n    return {\n      swap: (action === 'downArrow' || enterFrozen) && current[0] === this.matrix.matrix.length - 1 || (action === 'rightArrow' || action === 'tab') && current[1] === this.matrix.columns && isPresent,\n      toHeader: (action === 'rightArrow' || action === 'tab') && current[1] === this.matrix.columns,\n      toFrozen: (action === 'downArrow' || enterFrozen) && current[0] === this.matrix.matrix.length - 1\n    };\n  };\n\n  FixedHeaderFocus.prototype.getTable = function () {\n    return this.parent.getHeaderContent().querySelector('.e-frozenheader .e-table');\n  };\n\n  FixedHeaderFocus.prototype.getNextCurrent = function (previous, swap, active, action) {\n    if (previous === void 0) {\n      previous = [];\n    }\n\n    var current3 = [];\n\n    if (action === 'leftArrow' || action === 'shiftTab') {\n      current3[0] = previous[0];\n      current3[1] = active.matrix.columns + 1;\n    } else if (action === 'upArrow' || action === 'shiftEnter') {\n      current3[0] = this.matrix.matrix.length;\n      current3[1] = previous[1];\n    }\n\n    return current3;\n  };\n\n  return FixedHeaderFocus;\n}(HeaderFocus);\n\nexport { FixedHeaderFocus };\n/** @hidden */\n\nvar SearchBox =\n/** @class */\nfunction () {\n  function SearchBox(searchBox) {\n    this.searchBox = searchBox;\n  }\n\n  SearchBox.prototype.searchFocus = function (args) {\n    args.target.parentElement.classList.add('e-input-focus');\n  };\n\n  SearchBox.prototype.searchBlur = function (args) {\n    args.target.parentElement.classList.remove('e-input-focus');\n  };\n\n  SearchBox.prototype.wireEvent = function () {\n    if (this.searchBox) {\n      EventHandler.add(this.searchBox, 'focus', this.searchFocus, this);\n      EventHandler.add(this.searchBox, 'blur', this.searchBlur, this);\n    }\n  };\n\n  SearchBox.prototype.unWireEvent = function () {\n    if (this.searchBox) {\n      EventHandler.remove(this.searchBox, 'focus', this.searchFocus);\n      EventHandler.remove(this.searchBox, 'blur', this.searchBlur);\n    }\n  };\n\n  return SearchBox;\n}();\n\nexport { SearchBox };","map":null,"metadata":{},"sourceType":"module"}