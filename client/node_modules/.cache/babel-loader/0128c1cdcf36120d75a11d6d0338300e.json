{"ast":null,"code":"/**\n * Used to `write a string` into output file.\n * @private\n */\nvar PdfWriter =\n/** @class */\nfunction () {\n  /**\n   * Initialize an instance of `PdfWriter` class.\n   * @private\n   */\n  function PdfWriter(stream) {\n    this.streamWriter = stream;\n  }\n\n  Object.defineProperty(PdfWriter.prototype, \"document\", {\n    //properties\n\n    /**\n     * Gets and Sets the `document`.\n     * @private\n     */\n    get: function () {\n      return this.pdfDocument;\n    },\n    set: function (value) {\n      this.pdfDocument = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfWriter.prototype, \"position\", {\n    /**\n     * Gets the `position`.\n     * @private\n     */\n    get: function () {\n      return this.streamWriter.buffer.size;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfWriter.prototype, \"length\", {\n    /**\n     * Gets  the `length` of the stream'.\n     * @private\n     */\n    get: function () {\n      return this.streamWriter.buffer.size;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfWriter.prototype, \"stream\", {\n    /**\n     * Gets the `stream`.\n     * @private\n     */\n    get: function () {\n      var result = this.streamWriter;\n      return result;\n    },\n    enumerable: true,\n    configurable: true\n  }); //public Methods\n\n  /**\n   * `Writes the specified data`.\n   * @private\n   */\n\n  PdfWriter.prototype.write = function (overload) {\n    var data = [];\n    var tempOverload = overload;\n    this.streamWriter.write(tempOverload);\n  };\n\n  return PdfWriter;\n}();\n\nexport { PdfWriter };","map":null,"metadata":{},"sourceType":"module"}