{"ast":null,"code":"import { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Input } from '@syncfusion/ej2-inputs';\nimport { isEditable, getComplexFieldID } from '../base/util';\n/**\n * `DefaultEditCell` is used to handle default cell type editing.\n * @hidden\n */\n\nvar DefaultEditCell =\n/** @class */\nfunction () {\n  function DefaultEditCell(parent) {\n    this.parent = parent;\n  }\n\n  DefaultEditCell.prototype.create = function (args) {\n    var col = args.column;\n    var input = this.parent.createElement('input', {\n      className: 'e-field e-input e-defaultcell',\n      attrs: {\n        type: 'text',\n        value: !isNullOrUndefined(args.value) ? args.value : '',\n        'e-mappinguid': col.uid,\n        id: this.parent.element.id + getComplexFieldID(col.field),\n        name: getComplexFieldID(col.field),\n        style: 'text-align:' + col.textAlign\n      }\n    });\n    return input;\n  };\n\n  DefaultEditCell.prototype.read = function (element) {\n    return element.value;\n  };\n\n  DefaultEditCell.prototype.write = function (args) {\n    var col = args.column;\n    var isInline = this.parent.editSettings.mode !== 'Dialog';\n    var inputargs = {\n      element: args.element,\n      floatLabelType: this.parent.editSettings.mode !== 'Dialog' ? 'Never' : 'Always',\n      properties: {\n        enableRtl: this.parent.enableRtl,\n        enabled: isEditable(args.column, args.requestType, args.element),\n        placeholder: isInline ? '' : args.column.headerText\n      }\n    };\n    Input.createInput(inputargs, this.parent.createElement);\n  };\n\n  return DefaultEditCell;\n}();\n\nexport { DefaultEditCell };","map":null,"metadata":{},"sourceType":"module"}