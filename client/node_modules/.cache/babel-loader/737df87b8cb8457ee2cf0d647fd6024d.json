{"ast":null,"code":"import { Browser } from '@syncfusion/ej2-base';\nimport { extend, isNullOrUndefined, isBlazor } from '@syncfusion/ej2-base';\nimport { closest, classList } from '@syncfusion/ej2-base';\nimport { setCssInGridPopUp, getActualPropFromColl, isActionPrevent, iterateExtend, parentsUntil } from '../base/util';\nimport * as events from '../base/constant';\nimport { AriaService } from '../services/aria-service';\n/**\n *\n * The `Sort` module is used to handle sorting action.\n */\n\nvar Sort =\n/** @class */\nfunction () {\n  /**\n   * Constructor for Grid sorting module\n   * @hidden\n   */\n  function Sort(parent, sortSettings, sortedColumns, locator) {\n    this.contentRefresh = true;\n    this.isModelChanged = true;\n    this.aria = new AriaService();\n    this.currentTarget = null;\n    this.parent = parent;\n    this.sortSettings = sortSettings;\n    this.sortedColumns = sortedColumns;\n    this.focus = locator.getService('focus');\n    this.addEventListener();\n  }\n  /**\n   * The function used to update sortSettings\n   * @return {void}\n   * @hidden\n   */\n\n\n  Sort.prototype.updateModel = function () {\n    var sortedColumn = {\n      field: this.columnName,\n      direction: this.direction\n    };\n    var index;\n    var gCols = this.parent.groupSettings.columns;\n    var flag = false;\n\n    if (!this.isMultiSort) {\n      if (!gCols.length) {\n        this.sortSettings.columns = [sortedColumn];\n      } else {\n        var sortedCols = [];\n\n        for (var i = 0, len = gCols.length; i < len; i++) {\n          index = this.getSortedColsIndexByField(gCols[i], sortedCols);\n\n          if (this.columnName === gCols[i]) {\n            flag = true;\n            sortedCols.push(sortedColumn);\n          } else {\n            var sCol = this.getSortColumnFromField(gCols[i]);\n            sortedCols.push({\n              field: sCol.field,\n              direction: sCol.direction,\n              isFromGroup: sCol.isFromGroup\n            });\n          }\n        }\n\n        if (!flag) {\n          sortedCols.push(sortedColumn);\n        }\n\n        this.sortSettings.columns = sortedCols;\n      }\n    } else {\n      index = this.getSortedColsIndexByField(this.columnName);\n\n      if (index > -1) {\n        this.sortSettings.columns.splice(index, 1);\n      }\n\n      this.sortSettings.columns.push(sortedColumn);\n      this.sortSettings.columns = this.sortSettings.columns;\n    }\n\n    this.parent.dataBind();\n    this.lastSortedCol = this.columnName;\n  };\n  /**\n   * The function used to trigger onActionComplete\n   * @return {void}\n   * @hidden\n   */\n\n\n  Sort.prototype.onActionComplete = function (e) {\n    if (isBlazor() && !this.parent.isJsComponent) {\n      e.rows = null;\n    }\n\n    var args = !this.isRemove ? {\n      columnName: this.columnName,\n      direction: this.direction,\n      requestType: 'sorting',\n      type: events.actionComplete\n    } : {\n      requestType: 'sorting',\n      type: events.actionComplete\n    };\n    this.isRemove = false;\n    this.parent.trigger(events.actionComplete, extend(e, args));\n  };\n  /**\n   * Sorts a column with the given options.\n   * @param {string} columnName - Defines the column name to sort.\n   * @param {SortDirection} direction - Defines the direction of sorting field.\n   * @param {boolean} isMultiSort - Specifies whether the previously sorted columns are to be maintained.\n   * @return {void}\n   */\n\n\n  Sort.prototype.sortColumn = function (columnName, direction, isMultiSort) {\n    var gObj = this.parent;\n\n    if (this.parent.getColumnByField(columnName).allowSorting === false || this.parent.isContextMenuOpen()) {\n      this.parent.log('action_disabled_column', {\n        moduleName: this.getModuleName(),\n        columnName: columnName\n      });\n      return;\n    }\n\n    if (!gObj.allowMultiSorting) {\n      isMultiSort = gObj.allowMultiSorting;\n    }\n\n    if (this.isActionPrevent()) {\n      gObj.notify(events.preventBatch, {\n        instance: this,\n        handler: this.sortColumn,\n        arg1: columnName,\n        arg2: direction,\n        arg3: isMultiSort\n      });\n      return;\n    }\n\n    this.backupSettings();\n    this.columnName = columnName;\n    this.direction = direction;\n    this.isMultiSort = isMultiSort;\n    this.removeSortIcons();\n    var column = gObj.getColumnHeaderByField(columnName);\n    this.updateSortedCols(columnName, isMultiSort);\n    this.updateModel();\n  };\n\n  Sort.prototype.backupSettings = function () {\n    this.lastSortedCols = iterateExtend(this.sortSettings.columns);\n    this.lastCols = this.sortedColumns;\n  };\n\n  Sort.prototype.restoreSettings = function () {\n    this.isModelChanged = false;\n    this.isMultiSort = true;\n    this.parent.setProperties({\n      sortSettings: {\n        columns: this.lastSortedCols\n      }\n    }, true); //this.parent.sortSettings.columns =  this.lastSortedCols;        \n\n    this.sortedColumns = this.lastCols;\n    this.isModelChanged = true;\n  };\n\n  Sort.prototype.updateSortedCols = function (columnName, isMultiSort) {\n    if (!isMultiSort) {\n      if (this.parent.allowGrouping) {\n        for (var i = 0, len = this.sortedColumns.length; i < len; i++) {\n          if (this.parent.groupSettings.columns.indexOf(this.sortedColumns[i]) < 0) {\n            this.sortedColumns.splice(i, 1);\n            len--;\n            i--;\n          }\n        }\n      } else {\n        this.sortedColumns.splice(0, this.sortedColumns.length);\n      }\n    }\n\n    if (this.sortedColumns.indexOf(columnName) < 0) {\n      this.sortedColumns.push(columnName);\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  Sort.prototype.onPropertyChanged = function (e) {\n    if (e.module !== this.getModuleName()) {\n      return;\n    }\n\n    if (this.contentRefresh) {\n      var args = this.sortSettings.columns.length ? {\n        columnName: this.columnName,\n        direction: this.direction,\n        requestType: 'sorting',\n        type: events.actionBegin,\n        target: this.currentTarget,\n        cancel: false\n      } : {\n        requestType: 'sorting',\n        type: events.actionBegin,\n        cancel: false,\n        target: this.currentTarget\n      };\n      this.parent.notify(events.modelChanged, args);\n    }\n\n    this.refreshSortSettings();\n    this.removeSortIcons();\n    this.addSortIcons();\n  };\n\n  Sort.prototype.refreshSortSettings = function () {\n    this.sortedColumns.length = 0;\n    var sortColumns = this.sortSettings.columns;\n\n    for (var i = 0; i < sortColumns.length; i++) {\n      if (!sortColumns[i].isFromGroup) {\n        this.sortedColumns.push(sortColumns[i].field);\n      }\n    }\n  };\n  /**\n   * Clears all the sorted columns of the Grid.\n   * @return {void}\n   */\n\n\n  Sort.prototype.clearSorting = function () {\n    var cols = getActualPropFromColl(this.sortSettings.columns);\n\n    if (this.isActionPrevent()) {\n      this.parent.notify(events.preventBatch, {\n        instance: this,\n        handler: this.clearSorting\n      });\n      return;\n    }\n\n    for (var i = 0, len = cols.length; i < len; i++) {\n      this.removeSortColumn(cols[i].field);\n    }\n\n    if (isBlazor() && !this.parent.isJsComponent) {\n      this.sortSettings.columns = this.sortSettings.columns;\n    }\n  };\n\n  Sort.prototype.isActionPrevent = function () {\n    return isActionPrevent(this.parent);\n  };\n  /**\n   * Remove sorted column by field name.\n   * @param {string} field - Defines the column field name to remove sort.\n   * @return {void}\n   * @hidden\n   */\n\n\n  Sort.prototype.removeSortColumn = function (field) {\n    var gObj = this.parent;\n    var cols = this.sortSettings.columns;\n\n    if (cols.length === 0 && this.sortedColumns.indexOf(field) < 0) {\n      return;\n    }\n\n    if (this.isActionPrevent()) {\n      this.parent.notify(events.preventBatch, {\n        instance: this,\n        handler: this.removeSortColumn,\n        arg1: field\n      });\n      return;\n    }\n\n    this.backupSettings();\n    this.removeSortIcons();\n\n    for (var i = 0, len = cols.length; i < len; i++) {\n      if (cols[i].field === field) {\n        if (gObj.allowGrouping && gObj.groupSettings.columns.indexOf(cols[i].field) > -1) {\n          continue;\n        }\n\n        this.sortedColumns.splice(this.sortedColumns.indexOf(cols[i].field), 1);\n        cols.splice(i, 1);\n        this.isRemove = true;\n\n        if (this.isModelChanged) {\n          this.parent.notify(events.modelChanged, {\n            requestType: 'sorting',\n            type: events.actionBegin,\n            target: this.currentTarget\n          });\n        }\n\n        break;\n      }\n    }\n\n    this.addSortIcons();\n  };\n\n  Sort.prototype.getSortedColsIndexByField = function (field, sortedColumns) {\n    var cols = sortedColumns ? sortedColumns : this.sortSettings.columns;\n\n    for (var i = 0, len = cols.length; i < len; i++) {\n      if (cols[i].field === field) {\n        return i;\n      }\n    }\n\n    return -1;\n  };\n  /**\n   * For internal use only - Get the module name.\n   * @private\n   */\n\n\n  Sort.prototype.getModuleName = function () {\n    return 'sort';\n  };\n\n  Sort.prototype.initialEnd = function () {\n    this.parent.off(events.contentReady, this.initialEnd);\n    var isServerRendered = 'isServerRendered';\n\n    if (isBlazor() && this.parent[isServerRendered]) {\n      return;\n    }\n\n    if (this.parent.getColumns().length && this.sortSettings.columns.length) {\n      var gObj = this.parent;\n      this.contentRefresh = false;\n      this.isMultiSort = this.sortSettings.columns.length > 1;\n\n      for (var _i = 0, _a = gObj.sortSettings.columns.slice(); _i < _a.length; _i++) {\n        var col = _a[_i];\n\n        if (this.sortedColumns.indexOf(col.field) > -1) {\n          this.sortColumn(col.field, col.direction, true);\n        }\n      }\n\n      this.isMultiSort = false;\n      this.contentRefresh = true;\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  Sort.prototype.addEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.on(events.contentReady, this.initialEnd, this);\n    this.parent.on(events.sortComplete, this.onActionComplete, this);\n    this.parent.on(events.inBoundModelChanged, this.onPropertyChanged, this);\n    this.parent.on(events.click, this.clickHandler, this);\n    this.parent.on(events.headerRefreshed, this.refreshSortIcons, this);\n    this.parent.on(events.keyPressed, this.keyPressed, this);\n    this.parent.on(events.cancelBegin, this.cancelBeginEvent, this);\n  };\n  /**\n   * @hidden\n   */\n\n\n  Sort.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(events.sortComplete, this.onActionComplete);\n    this.parent.off(events.inBoundModelChanged, this.onPropertyChanged);\n    this.parent.off(events.click, this.clickHandler);\n    this.parent.off(events.headerRefreshed, this.refreshSortIcons);\n    this.parent.off(events.keyPressed, this.keyPressed);\n    this.parent.off(events.cancelBegin, this.cancelBeginEvent);\n  };\n  /**\n   * To destroy the sorting\n   * @return {void}\n   * @hidden\n   */\n\n\n  Sort.prototype.destroy = function () {\n    this.isModelChanged = false;\n    var gridElement = this.parent.element;\n\n    if (!gridElement || !gridElement.querySelector('.e-gridheader') && !gridElement.querySelector('.e-gridcontent')) {\n      return;\n    }\n\n    if (this.parent.element.querySelector('.e-gridpopup').querySelectorAll('.e-sortdirect').length) {\n      this.parent.element.querySelector('.e-gridpopup').style.display = 'none';\n    } // tslint:disable-next-line:no-any\n\n\n    if (!this.parent.refreshing) {\n      this.clearSorting();\n    }\n\n    this.isModelChanged = true;\n    this.removeEventListener();\n  };\n\n  Sort.prototype.cancelBeginEvent = function (e) {\n    if (e.requestType === 'sorting') {\n      this.restoreSettings();\n      this.refreshSortIcons();\n      this.isMultiSort = true;\n    }\n  };\n\n  Sort.prototype.clickHandler = function (e) {\n    this.currentTarget = null;\n    this.popUpClickHandler(e);\n    var target = closest(e.target, '.e-headercell');\n\n    if (target && !e.target.classList.contains('e-grptogglebtn') && !target.classList.contains('e-resized') && !e.target.classList.contains('e-rhandler') && !e.target.classList.contains('e-columnmenu') && !e.target.classList.contains('e-filtermenudiv') && !parentsUntil(e.target, 'e-stackedheadercell')) {\n      var gObj = this.parent;\n      var colObj = gObj.getColumnByUid(target.querySelector('.e-headercelldiv').getAttribute('e-mappinguid'));\n      var direction = !target.querySelectorAll('.e-ascending').length ? 'Ascending' : 'Descending';\n\n      if (colObj.type !== 'checkbox') {\n        this.initiateSort(target, e, colObj);\n\n        if (Browser.isDevice) {\n          this.showPopUp(e);\n        }\n      }\n    }\n\n    if (target) {\n      target.classList.remove('e-resized');\n    }\n  };\n\n  Sort.prototype.keyPressed = function (e) {\n    var ele = e.target;\n\n    if (!this.parent.isEdit && (e.action === 'enter' || e.action === 'ctrlEnter' || e.action === 'shiftEnter') && closest(ele, '.e-headercell')) {\n      var target = this.focus.getFocusedElement();\n\n      if (isNullOrUndefined(target) || !target.classList.contains('e-headercell') || !target.querySelector('.e-headercelldiv')) {\n        return;\n      }\n\n      var col = this.parent.getColumnByUid(target.querySelector('.e-headercelldiv').getAttribute('e-mappinguid'));\n      this.initiateSort(target, e, col);\n    }\n  };\n\n  Sort.prototype.initiateSort = function (target, e, column) {\n    var gObj = this.parent;\n    var field = column.field;\n    this.currentTarget = e.target;\n    var direction = !target.querySelectorAll('.e-ascending').length ? 'Ascending' : 'Descending';\n\n    if (e.shiftKey || this.sortSettings.allowUnsort && target.querySelectorAll('.e-descending').length && !(gObj.groupSettings.columns.indexOf(field) > -1)) {\n      this.removeSortColumn(field);\n\n      if (isBlazor() && !this.parent.isJsComponent) {\n        this.sortSettings.columns = this.sortSettings.columns;\n      }\n    } else {\n      this.sortColumn(field, direction, e.ctrlKey || this.enableSortMultiTouch || navigator.userAgent.indexOf('Mac OS') !== -1 && e.metaKey);\n    }\n  };\n\n  Sort.prototype.showPopUp = function (e) {\n    var target = closest(e.target, '.e-headercell');\n\n    if (this.parent.allowMultiSorting && (!isNullOrUndefined(target) || this.parent.isContextMenuOpen())) {\n      setCssInGridPopUp(this.parent.element.querySelector('.e-gridpopup'), e, 'e-sortdirect e-icons e-icon-sortdirect' + (this.sortedColumns.length > 1 ? ' e-spanclicked' : ''));\n    }\n  };\n\n  Sort.prototype.popUpClickHandler = function (e) {\n    var target = e.target;\n\n    if (closest(target, '.e-headercell') || e.target.classList.contains('e-rowcell') || closest(target, '.e-gridpopup')) {\n      if (target.classList.contains('e-sortdirect')) {\n        if (!target.classList.contains('e-spanclicked')) {\n          target.classList.add('e-spanclicked');\n          this.enableSortMultiTouch = true;\n        } else {\n          target.classList.remove('e-spanclicked');\n          this.enableSortMultiTouch = false;\n          this.parent.element.querySelector('.e-gridpopup').style.display = 'none';\n        }\n      }\n    } else {\n      this.parent.element.querySelector('.e-gridpopup').style.display = 'none';\n    }\n  };\n\n  Sort.prototype.addSortIcons = function () {\n    var gObj = this.parent;\n    var header;\n    var filterElement;\n    var cols = this.sortSettings.columns;\n    var fieldNames = this.parent.getColumns().map(function (c) {\n      return c.field;\n    });\n\n    for (var i = 0, len = cols.length; i < len; i++) {\n      header = gObj.getColumnHeaderByField(cols[i].field);\n\n      if (fieldNames.indexOf(cols[i].field) === -1 || isNullOrUndefined(header)) {\n        continue;\n      }\n\n      this.aria.setSort(header, cols[i].direction);\n\n      if (this.isMultiSort && cols.length > 1) {\n        header.querySelector('.e-headercelldiv').insertBefore(this.parent.createElement('span', {\n          className: 'e-sortnumber',\n          innerHTML: (i + 1).toString()\n        }), header.querySelector('.e-headertext'));\n      }\n\n      filterElement = header.querySelector('.e-sortfilterdiv');\n\n      if (cols[i].direction === 'Ascending') {\n        classList(filterElement, ['e-ascending', 'e-icon-ascending'], []);\n      } else {\n        classList(filterElement, ['e-descending', 'e-icon-descending'], []);\n      }\n    }\n  };\n\n  Sort.prototype.removeSortIcons = function (position) {\n    var gObj = this.parent;\n    var header;\n    var cols = this.sortSettings.columns;\n    var fieldNames = this.parent.getColumns().map(function (c) {\n      return c.field;\n    });\n\n    for (var i = position ? position : 0, len = !isNullOrUndefined(position) ? position + 1 : cols.length; i < len; i++) {\n      header = gObj.getColumnHeaderByField(cols[i].field);\n\n      if (isNullOrUndefined(header) || gObj.allowGrouping && gObj.groupSettings.columns.indexOf(cols[i].field) > -1 && !header.querySelector('.e-sortfilterdiv')) {\n        continue;\n      }\n\n      if (fieldNames.indexOf(cols[i].field) === -1) {\n        continue;\n      }\n\n      this.aria.setSort(header, 'none');\n      classList(header.querySelector('.e-sortfilterdiv'), [], ['e-descending', 'e-icon-descending', 'e-ascending', 'e-icon-ascending']);\n\n      if (header.querySelector('.e-sortnumber')) {\n        header.querySelector('.e-headercelldiv').removeChild(header.querySelector('.e-sortnumber'));\n      }\n    }\n  };\n\n  Sort.prototype.getSortColumnFromField = function (field) {\n    for (var i = 0, len = this.sortSettings.columns.length; i < len; i++) {\n      if (this.sortSettings.columns[i].field === field) {\n        return this.sortSettings.columns[i];\n      }\n    }\n\n    return false;\n  };\n\n  Sort.prototype.updateAriaAttr = function () {\n    var fieldNames = this.parent.getColumns().map(function (c) {\n      return c.field;\n    });\n\n    for (var _i = 0, _a = this.sortedColumns; _i < _a.length; _i++) {\n      var col = _a[_i];\n\n      if (fieldNames.indexOf(col) === -1) {\n        continue;\n      }\n\n      var header = this.parent.getColumnHeaderByField(col);\n      this.aria.setSort(header, this.getSortColumnFromField(col).direction);\n    }\n  };\n\n  Sort.prototype.refreshSortIcons = function (params) {\n    if (params === void 0) {\n      params = {\n        args: {\n          isFrozen: false\n        }\n      };\n    }\n\n    if (!params.args.isFrozen) {\n      this.removeSortIcons();\n      this.isMultiSort = true;\n      this.removeSortIcons();\n      this.addSortIcons();\n      this.isMultiSort = false;\n      this.updateAriaAttr();\n    }\n  };\n\n  return Sort;\n}();\n\nexport { Sort };","map":null,"metadata":{},"sourceType":"module"}