{"ast":null,"code":"/**\n * PdfFont.ts class for EJ2-PDF\n */\nimport { PdfFontStyle } from './enum';\nimport { SizeF } from './../../drawing/pdf-drawing';\nimport { PdfStringFormat } from './pdf-string-format';\nimport { PdfStringLayouter } from './string-layouter';\nimport { StringTokenizer } from './string-tokenizer';\n/**\n * Defines a particular format for text, including font face, size, and style attributes.\n * @private\n */\n\nvar PdfFont =\n/** @class */\nfunction () {\n  function PdfFont(size, style) {\n    /**\n     * `Style` of the font.\n     * @private\n     */\n    this.fontStyle = PdfFontStyle.Regular;\n\n    if (typeof size === 'number' && typeof style === 'undefined') {\n      this.fontSize = size;\n    } else {\n      this.fontSize = size;\n      this.setStyle(style);\n    }\n  }\n\n  Object.defineProperty(PdfFont.prototype, \"name\", {\n    //Properties\n\n    /**\n     * Gets the face name of this Font.\n     * @private\n     */\n    get: function () {\n      return this.metrics.name;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfFont.prototype, \"size\", {\n    /**\n     * Gets the size of this font.\n     * @private\n     */\n    get: function () {\n      return this.fontSize;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfFont.prototype, \"height\", {\n    /**\n     * Gets the height of the font in points.\n     * @private\n     */\n    get: function () {\n      return this.metrics.getHeight(null);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfFont.prototype, \"style\", {\n    /**\n     * Gets the style information for this font.\n     * @private\n     */\n    get: function () {\n      return this.fontStyle;\n    },\n    set: function (value) {\n      this.fontStyle = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfFont.prototype, \"bold\", {\n    /**\n     * Gets a value indicating whether this `PdfFont` is `bold`.\n     * @private\n     */\n    get: function () {\n      return (this.style & PdfFontStyle.Bold) > 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfFont.prototype, \"italic\", {\n    /**\n     * Gets a value indicating whether this `PdfFont` has the `italic` style applied.\n     * @private\n     */\n    get: function () {\n      return (this.style & PdfFontStyle.Italic) > 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfFont.prototype, \"strikeout\", {\n    /**\n     * Gets a value indicating whether this `PdfFont` is `strikeout`.\n     * @private\n     */\n    get: function () {\n      return (this.style & PdfFontStyle.Strikeout) > 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfFont.prototype, \"underline\", {\n    /**\n     * Gets a value indicating whether this `PdfFont` is `underline`.\n     * @private\n     */\n    get: function () {\n      return (this.style & PdfFontStyle.Underline) > 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfFont.prototype, \"metrics\", {\n    /**\n     * Gets or sets the `metrics` for this font.\n     * @private\n     */\n    get: function () {\n      return this.fontMetrics;\n    },\n    set: function (value) {\n      this.fontMetrics = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfFont.prototype, \"element\", {\n    // /**\n    //  * Gets and Sets the font `internals`.\n    //  * @private\n    //  */\n    // public get fontInternal() : IPdfPrimitive {\n    //     return this.pdfFontInternals;\n    // }\n    // public set fontInternal(value : IPdfPrimitive) {\n    //     this.pdfFontInternals = value;\n    // }\n    //IPdfWrapper Members\n\n    /**\n     * Gets the `element` representing the font.\n     * @private\n     */\n    get: function () {\n      return this.pdfFontInternals;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PdfFont.prototype.measureString = function (text, arg2, arg3, arg4, arg5) {\n    if (typeof text === 'string' && typeof arg2 === 'undefined') {\n      return this.measureString(text, null);\n    } else if (typeof text === 'string' && (arg2 instanceof PdfStringFormat || arg2 == null) && typeof arg3 === 'undefined' && typeof arg4 === 'undefined') {\n      var temparg2 = arg2;\n      var charactersFitted = 0;\n      var linesFilled = 0;\n      return this.measureString(text, temparg2, charactersFitted, linesFilled);\n    } else if (typeof text === 'string' && (arg2 instanceof PdfStringFormat || arg2 == null) && typeof arg3 === 'number' && typeof arg4 === 'number') {\n      var temparg2 = arg2;\n      return this.measureString(text, 0, temparg2, arg3, arg4); // } else if (typeof text === 'string' && typeof arg2 === 'number' && typeof arg3 === 'undefined') {\n      //     return this.measureString(text, arg2, null);\n      // } else if (typeof text === 'string' && typeof arg2 === 'number' && (arg3 instanceof PdfStringFormat || arg3 == null) && typeof arg4 === 'undefined' && typeof arg5 === 'undefined') {\n      //     let temparg3 : PdfStringFormat = arg3 as PdfStringFormat;\n      //     let charactersFitted : number = 0;\n      //     let linesFilled : number = 0;\n      //     return this.measureString(text, arg2, temparg3, charactersFitted, linesFilled);\n    } else if (typeof text === 'string' && typeof arg2 === 'number' && (arg3 instanceof PdfStringFormat || arg3 == null) && typeof arg4 === 'number' && typeof arg5 === 'number') {\n      var layoutArea = new SizeF(arg2, 0);\n      var temparg3 = arg3;\n      return this.measureString(text, layoutArea, temparg3, arg4, arg5); // } else if (typeof text === 'string' && arg2 instanceof SizeF && typeof arg3 === 'undefined') {\n      //     return this.measureString(text, arg2, null);\n      // } else if (typeof text === 'string' && arg2 instanceof SizeF && (arg3 instanceof PdfStringFormat || arg3 == null) && typeof arg4 === 'undefined' && typeof arg5 === 'undefined') {\n      //     let temparg3 : PdfStringFormat = arg3 as PdfStringFormat;\n      //     let charactersFitted : number = 0;\n      //     let linesFilled : number = 0;\n      //     return this.measureString(text, arg2, temparg3, charactersFitted, linesFilled);\n    } else {\n      if (text == null) {\n        throw Error(\"ArgumentNullException(\\\"text\\\")\");\n      }\n\n      var temparg2 = arg2;\n      var temparg3 = arg3;\n      var layouter = new PdfStringLayouter();\n      var result = layouter.layout(text, this, temparg3, temparg2, false, new SizeF(0, 0)); // arg4 = (result.Remainder == null) ? text.length : text.length - result.Remainder.length;\n\n      arg4 = text.length;\n      arg5 = result.empty ? 0 : result.lines.length;\n      return result.actualSize;\n    }\n  };\n  /* tslint:enable */\n  //IPdfCache Members\n\n  /**\n   * `Checks` whether the object is similar to another object.\n   * @private\n   */\n\n\n  PdfFont.prototype.equalsTo = function (obj) {\n    var result = this.equalsToFont(obj);\n    return result;\n  };\n  /**\n   * Returns `internals` of the object.\n   * @private\n   */\n\n\n  PdfFont.prototype.getInternals = function () {\n    return this.pdfFontInternals;\n  };\n  /**\n   * Sets `internals` to the object.\n   * @private\n   */\n\n\n  PdfFont.prototype.setInternals = function (internals) {\n    if (internals == null) {\n      throw new Error('ArgumentNullException:internals');\n    }\n\n    this.pdfFontInternals = internals;\n  };\n  /**\n   * Sets the `style` of the font.\n   * @private\n   */\n\n\n  PdfFont.prototype.setStyle = function (style) {\n    this.fontStyle = style;\n  };\n  /**\n   * Applies `settings` to the default line width.\n   * @private\n   */\n\n\n  PdfFont.prototype.applyFormatSettings = function (line, format, width) {\n    // if (line == null) {\n    //     throw new Error(`ArgumentNullException:line`);\n    // }\n    var realWidth = width;\n\n    if (format != null && width > 0) {\n      // Space among characters is not default.\n      if (format.characterSpacing !== 0) {\n        realWidth += (line.length - 1) * format.characterSpacing;\n      } // Space among words is not default.\n\n\n      if (format.wordSpacing !== 0) {\n        var symbols = StringTokenizer.spaces;\n        var whitespacesCount = StringTokenizer.getCharsCount(line, symbols);\n        realWidth += whitespacesCount * format.wordSpacing;\n      }\n    }\n\n    return realWidth;\n  }; //Constants\n\n  /**\n   * `Multiplier` of the symbol width.\n   * @default 0.001\n   * @private\n   */\n\n\n  PdfFont.charSizeMultiplier = 0.001;\n  /**\n   * `Synchronization` object.\n   * @private\n   */\n\n  PdfFont.syncObject = new Object();\n  return PdfFont;\n}();\n\nexport { PdfFont };","map":null,"metadata":{},"sourceType":"module"}