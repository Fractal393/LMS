{"ast":null,"code":"/**\r\n * DevExtreme (ui/scroll_view/ui.scrollbar.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _dom_adapter = require(\"../../core/dom_adapter\");\n\nvar _dom_adapter2 = _interopRequireDefault(_dom_adapter);\n\nvar _events_engine = require(\"../../events/core/events_engine\");\n\nvar _events_engine2 = _interopRequireDefault(_events_engine);\n\nvar _ready_callbacks = require(\"../../core/utils/ready_callbacks\");\n\nvar _ready_callbacks2 = _interopRequireDefault(_ready_callbacks);\n\nvar _translator = require(\"../../animation/translator\");\n\nvar _translator2 = _interopRequireDefault(_translator);\n\nvar _ui = require(\"../widget/ui.widget\");\n\nvar _ui2 = _interopRequireDefault(_ui);\n\nvar _utils = require(\"../../events/utils\");\n\nvar eventUtils = _interopRequireWildcard(_utils);\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _common2 = _interopRequireDefault(_common);\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _pointer = require(\"../../events/pointer\");\n\nvar _pointer2 = _interopRequireDefault(_pointer);\n\nfunction _getRequireWildcardCache() {\n  if (\"function\" !== typeof WeakMap) {\n    return null;\n  }\n\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (null === obj || \"object\" !== _typeof(obj) && \"function\" !== typeof obj) {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar SCROLLBAR = \"dxScrollbar\";\nvar SCROLLABLE_SCROLLBAR_CLASS = \"dx-scrollable-scrollbar\";\nvar SCROLLABLE_SCROLLBAR_ACTIVE_CLASS = \"\".concat(SCROLLABLE_SCROLLBAR_CLASS, \"-active\");\nvar SCROLLABLE_SCROLL_CLASS = \"dx-scrollable-scroll\";\nvar SCROLLABLE_SCROLL_CONTENT_CLASS = \"dx-scrollable-scroll-content\";\nvar HOVER_ENABLED_STATE = \"dx-scrollbar-hoverable\";\nvar HORIZONTAL = \"horizontal\";\nvar THUMB_MIN_SIZE = 15;\nvar SCROLLBAR_VISIBLE = {\n  onScroll: \"onScroll\",\n  onHover: \"onHover\",\n  always: \"always\",\n  never: \"never\"\n};\nvar activeScrollbar = null;\n\nvar Scrollbar = _ui2.default.inherit({\n  _getDefaultOptions: function () {\n    return (0, _extend.extend)(this.callBase(), {\n      direction: null,\n      visible: false,\n      activeStateEnabled: false,\n      visibilityMode: SCROLLBAR_VISIBLE.onScroll,\n      containerSize: 0,\n      contentSize: 0,\n      expandable: true,\n      scaleRatio: 1\n    });\n  },\n  _init: function () {\n    this.callBase();\n    this._isHovered = false;\n  },\n  _initMarkup: function () {\n    this._renderThumb();\n\n    this.callBase();\n  },\n  _render: function () {\n    this.callBase();\n\n    this._renderDirection();\n\n    this._update();\n\n    this._attachPointerDownHandler();\n\n    this.option(\"hoverStateEnabled\", this._isHoverMode());\n    this.$element().toggleClass(HOVER_ENABLED_STATE, this.option(\"hoverStateEnabled\"));\n  },\n  _renderThumb: function () {\n    this._$thumb = (0, _renderer2.default)(\"<div>\").addClass(SCROLLABLE_SCROLL_CLASS);\n    (0, _renderer2.default)(\"<div>\").addClass(SCROLLABLE_SCROLL_CONTENT_CLASS).appendTo(this._$thumb);\n    this.$element().addClass(SCROLLABLE_SCROLLBAR_CLASS).append(this._$thumb);\n  },\n  isThumb: function ($element) {\n    return !!this.$element().find($element).length;\n  },\n  _isHoverMode: function () {\n    var visibilityMode = this.option(\"visibilityMode\");\n    return (visibilityMode === SCROLLBAR_VISIBLE.onHover || visibilityMode === SCROLLBAR_VISIBLE.always) && this.option(\"expandable\");\n  },\n  _renderDirection: function () {\n    var direction = this.option(\"direction\");\n    this.$element().addClass(\"dx-scrollbar-\" + direction);\n    this._dimension = direction === HORIZONTAL ? \"width\" : \"height\";\n    this._prop = direction === HORIZONTAL ? \"left\" : \"top\";\n  },\n  _attachPointerDownHandler: function () {\n    _events_engine2.default.on(this._$thumb, eventUtils.addNamespace(_pointer2.default.down, SCROLLBAR), this.feedbackOn.bind(this));\n  },\n  feedbackOn: function () {\n    this.$element().addClass(SCROLLABLE_SCROLLBAR_ACTIVE_CLASS);\n    activeScrollbar = this;\n  },\n  feedbackOff: function () {\n    this.$element().removeClass(SCROLLABLE_SCROLLBAR_ACTIVE_CLASS);\n    activeScrollbar = null;\n  },\n  cursorEnter: function () {\n    this._isHovered = true;\n\n    if (this._needScrollbar()) {\n      this.option(\"visible\", true);\n    }\n  },\n  cursorLeave: function () {\n    this._isHovered = false;\n    this.option(\"visible\", false);\n  },\n  _renderDimensions: function () {\n    this._$thumb.css({\n      width: this.option(\"width\"),\n      height: this.option(\"height\")\n    });\n  },\n  _toggleVisibility: function (visible) {\n    if (this.option(\"visibilityMode\") === SCROLLBAR_VISIBLE.onScroll) {\n      this._$thumb.css(\"opacity\");\n    }\n\n    visible = this._adjustVisibility(visible);\n    this.option().visible = visible;\n\n    this._$thumb.toggleClass(\"dx-state-invisible\", !visible);\n  },\n  _adjustVisibility: function (visible) {\n    if (this._baseContainerToContentRatio && !this._needScrollbar()) {\n      return false;\n    }\n\n    switch (this.option(\"visibilityMode\")) {\n      case SCROLLBAR_VISIBLE.onScroll:\n        break;\n\n      case SCROLLBAR_VISIBLE.onHover:\n        visible = visible || !!this._isHovered;\n        break;\n\n      case SCROLLBAR_VISIBLE.never:\n        visible = false;\n        break;\n\n      case SCROLLBAR_VISIBLE.always:\n        visible = true;\n    }\n\n    return visible;\n  },\n  moveTo: function (location) {\n    if (this._isHidden()) {\n      return;\n    }\n\n    if ((0, _type.isPlainObject)(location)) {\n      location = location[this._prop] || 0;\n    }\n\n    var scrollBarLocation = {};\n    scrollBarLocation[this._prop] = this._calculateScrollBarPosition(location);\n\n    _translator2.default.move(this._$thumb, scrollBarLocation);\n  },\n  _calculateScrollBarPosition: function (location) {\n    return -location * this._thumbRatio;\n  },\n  _update: function () {\n    var containerSize = Math.round(this.option(\"containerSize\"));\n    var contentSize = Math.round(this.option(\"contentSize\"));\n    var baseContainerSize = Math.round(this.option(\"baseContainerSize\"));\n    var baseContentSize = Math.round(this.option(\"baseContentSize\"));\n\n    if (isNaN(baseContainerSize)) {\n      baseContainerSize = containerSize;\n      baseContentSize = contentSize;\n    }\n\n    this._baseContainerToContentRatio = baseContentSize ? baseContainerSize / baseContentSize : baseContainerSize;\n    this._realContainerToContentRatio = contentSize ? containerSize / contentSize : containerSize;\n    var thumbSize = Math.round(Math.max(Math.round(containerSize * this._realContainerToContentRatio), THUMB_MIN_SIZE));\n    this._thumbRatio = (containerSize - thumbSize) / (this.option(\"scaleRatio\") * (contentSize - containerSize));\n    this.option(this._dimension, thumbSize / this.option(\"scaleRatio\"));\n    this.$element().css(\"display\", this._needScrollbar() ? \"\" : \"none\");\n  },\n  _isHidden: function () {\n    return this.option(\"visibilityMode\") === SCROLLBAR_VISIBLE.never;\n  },\n  _needScrollbar: function () {\n    return !this._isHidden() && this._baseContainerToContentRatio < 1;\n  },\n  containerToContentRatio: function () {\n    return this._realContainerToContentRatio;\n  },\n  _normalizeSize: function (size) {\n    return (0, _type.isPlainObject)(size) ? size[this._dimension] || 0 : size;\n  },\n  _clean: function () {\n    this.callBase();\n\n    if (this === activeScrollbar) {\n      activeScrollbar = null;\n    }\n\n    _events_engine2.default.off(this._$thumb, \".\" + SCROLLBAR);\n  },\n  _optionChanged: function (args) {\n    if (this._isHidden()) {\n      return;\n    }\n\n    switch (args.name) {\n      case \"containerSize\":\n      case \"contentSize\":\n        this.option()[args.name] = this._normalizeSize(args.value);\n\n        this._update();\n\n        break;\n\n      case \"baseContentSize\":\n      case \"baseContainerSize\":\n        this._update();\n\n        break;\n\n      case \"visibilityMode\":\n      case \"direction\":\n        this._invalidate();\n\n        break;\n\n      case \"scaleRatio\":\n        this._update();\n\n        break;\n\n      default:\n        this.callBase.apply(this, arguments);\n    }\n  },\n  update: _common2.default.deferRenderer(function () {\n    this._adjustVisibility() && this.option(\"visible\", true);\n  })\n});\n\n_ready_callbacks2.default.add(function () {\n  _events_engine2.default.subscribeGlobal(_dom_adapter2.default.getDocument(), eventUtils.addNamespace(_pointer2.default.up, SCROLLBAR), function () {\n    if (activeScrollbar) {\n      activeScrollbar.feedbackOff();\n    }\n  });\n});\n\nmodule.exports = Scrollbar;","map":null,"metadata":{},"sourceType":"script"}