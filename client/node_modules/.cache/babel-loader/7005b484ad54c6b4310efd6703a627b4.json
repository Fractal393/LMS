{"ast":null,"code":"/**\r\n * DevExtreme (ui/shared/accessibility.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _events_engine = require(\"../../events/core/events_engine\");\n\nvar _events_engine2 = _interopRequireDefault(_events_engine);\n\nvar _utils = require(\"../../events/utils\");\n\nvar eventUtils = _interopRequireWildcard(_utils);\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _dom_adapter = require(\"../../core/dom_adapter\");\n\nvar _dom_adapter2 = _interopRequireDefault(_dom_adapter);\n\nfunction _getRequireWildcardCache() {\n  if (\"function\" !== typeof WeakMap) {\n    return null;\n  }\n\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (null === obj || \"object\" !== _typeof(obj) && \"function\" !== typeof obj) {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar FOCUS_STATE_CLASS = \"dx-state-focused\";\nvar FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nvar FOCUSED_ROW_SELECTOR = \".dx-row-focused\";\nvar GRID_ROW_SELECTOR = \".dx-datagrid-rowsview .dx-row\";\nvar GRID_CELL_SELECTOR = \"\".concat(GRID_ROW_SELECTOR, \" > td\");\nvar TREELIST_ROW_SELECTOR = \".dx-treelist-rowsview .dx-row\";\nvar TREELIST_CELL_SELECTOR = \"\".concat(TREELIST_ROW_SELECTOR, \" > td\");\nvar viewItemSelectorMap = {\n  groupPanel: [\".dx-datagrid-group-panel .dx-group-panel-item[tabindex]\"],\n  columnHeaders: [\".dx-datagrid-headers .dx-header-row > td.dx-datagrid-action\", \".dx-treelist-headers .dx-header-row > td.dx-treelist-action\"],\n  filterRow: [\".dx-datagrid-headers .dx-datagrid-filter-row .dx-editor-cell .dx-texteditor-input\", \".dx-treelist-headers .dx-treelist-filter-row .dx-editor-cell .dx-texteditor-input\"],\n  rowsView: [\"\".concat(FOCUSED_ROW_SELECTOR), \"\".concat(GRID_ROW_SELECTOR, \"[tabindex]\"), \"\".concat(GRID_CELL_SELECTOR, \"[tabindex]\"), \"\".concat(GRID_CELL_SELECTOR), \"\".concat(TREELIST_ROW_SELECTOR, \"[tabindex]\"), \"\".concat(TREELIST_CELL_SELECTOR, \"[tabindex]\"), \"\".concat(TREELIST_CELL_SELECTOR)],\n  footer: [\".dx-datagrid-total-footer .dx-datagrid-summary-item\", \".dx-treelist-total-footer .dx-treelist-summary-item\"],\n  filterPanel: [\".dx-datagrid-filter-panel .dx-icon-filter\", \".dx-treelist-filter-panel .dx-icon-filter\"],\n  pager: [\".dx-datagrid-pager [tabindex]\", \".dx-treelist-pager [tabindex]\"]\n};\nvar isMouseDown = false;\nvar isHiddenFocusing = false;\nvar focusedElementInfo = null;\n\nfunction processKeyDown(viewName, instance, event, action, $mainElement, executeKeyDown) {\n  var isHandled = fireKeyDownEvent(instance, event.originalEvent, executeKeyDown);\n\n  if (isHandled) {\n    return;\n  }\n\n  var keyName = eventUtils.normalizeKeyName(event);\n\n  if (\"enter\" === keyName || \"space\" === keyName) {\n    saveFocusedElementInfo(event.target, instance);\n    action && action({\n      event: event\n    });\n  } else {\n    if (\"tab\" === keyName) {\n      $mainElement.addClass(FOCUS_STATE_CLASS);\n    } else {\n      module.exports.selectView(viewName, instance, event);\n    }\n  }\n}\n\nfunction saveFocusedElementInfo(target, instance) {\n  var $target = (0, _renderer2.default)(target);\n  var ariaLabel = $target.attr(\"aria-label\");\n  var $activeElements = getActiveAccessibleElements(ariaLabel, instance.element());\n  var targetIndex = $activeElements.index($target);\n  focusedElementInfo = (0, _extend.extend)({}, {\n    ariaLabel: ariaLabel,\n    index: targetIndex\n  }, {\n    viewInstance: instance\n  });\n}\n\nfunction getActiveAccessibleElements(ariaLabel, viewElement) {\n  var $viewElement = (0, _renderer2.default)(viewElement);\n  var $activeElements;\n\n  if (ariaLabel) {\n    $activeElements = $viewElement.find('[aria-label=\"'.concat(ariaLabel, '\"][tabindex]'));\n  } else {\n    $activeElements = $viewElement.find(\"[tabindex]\");\n  }\n\n  return $activeElements;\n}\n\nfunction findFocusedViewElement(viewSelectors) {\n  for (var index in viewSelectors) {\n    var selector = viewSelectors[index];\n    var $focusViewElement = (0, _renderer2.default)(selector).first();\n\n    if ($focusViewElement.length) {\n      return $focusViewElement;\n    }\n  }\n}\n\nfunction fireKeyDownEvent(instance, event, executeAction) {\n  var args = {\n    event: event,\n    handled: false\n  };\n\n  if (executeAction) {\n    executeAction(args);\n  } else {\n    instance._createActionByOption(\"onKeyDown\")(args);\n  }\n\n  return args.handled;\n}\n\nfunction onDocumentVisibilityChange() {\n  isHiddenFocusing = \"visible\" === _dom_adapter2.default.getDocument().visibilityState;\n}\n\nmodule.exports = {\n  subscribeVisibilityChange: function () {\n    _events_engine2.default.on(_dom_adapter2.default.getDocument(), \"visibilitychange\", onDocumentVisibilityChange);\n  },\n  unsubscribeVisibilityChange: function () {\n    _events_engine2.default.off(_dom_adapter2.default.getDocument(), \"visibilitychange\", onDocumentVisibilityChange);\n  },\n  hiddenFocus: function (element) {\n    isHiddenFocusing = true;\n    element.focus();\n    isHiddenFocusing = false;\n  },\n  registerKeyboardAction: function (viewName, instance, $element, selector, action, executeKeyDown) {\n    if (instance.option(\"useLegacyKeyboardNavigation\")) {\n      return;\n    }\n\n    var $mainElement = (0, _renderer2.default)(instance.element());\n\n    _events_engine2.default.on($element, \"keydown\", selector, function (e) {\n      return processKeyDown(viewName, instance, e, action, $mainElement, executeKeyDown);\n    });\n\n    _events_engine2.default.on($element, \"mousedown\", selector, function () {\n      isMouseDown = true;\n      $mainElement.removeClass(FOCUS_STATE_CLASS);\n    });\n\n    _events_engine2.default.on($element, \"focusin\", selector, function () {\n      var needShowOverlay = !isMouseDown && !isHiddenFocusing;\n\n      if (needShowOverlay) {\n        $mainElement.addClass(FOCUS_STATE_CLASS);\n      }\n\n      isMouseDown = false;\n    });\n  },\n  restoreFocus: function (instance) {\n    if (!instance.option(\"useLegacyKeyboardNavigation\") && focusedElementInfo) {\n      var viewInstance = focusedElementInfo.viewInstance;\n\n      if (viewInstance) {\n        var $activeElements = getActiveAccessibleElements(focusedElementInfo.ariaLabel, viewInstance.element());\n        var $targetElement = $activeElements.eq(focusedElementInfo.index);\n        focusedElementInfo = null;\n\n        _events_engine2.default.trigger($targetElement, \"focus\");\n      }\n    }\n  },\n  selectView: function (viewName, instance, event) {\n    var keyName = eventUtils.normalizeKeyName(event);\n\n    if (event.ctrlKey && (\"upArrow\" === keyName || \"downArrow\" === keyName)) {\n      var viewNames = Object.keys(viewItemSelectorMap);\n      var viewItemIndex = viewNames.indexOf(viewName);\n\n      while (viewItemIndex >= 0 && viewItemIndex < viewNames.length) {\n        viewItemIndex = \"upArrow\" === keyName ? --viewItemIndex : ++viewItemIndex;\n        var _viewName = viewNames[viewItemIndex];\n        var viewSelectors = viewItemSelectorMap[_viewName];\n        var $focusViewElement = findFocusedViewElement(viewSelectors);\n\n        if ($focusViewElement && $focusViewElement.length) {\n          $focusViewElement.attr(\"tabindex\", instance.option(\"tabindex\") || 0);\n\n          _events_engine2.default.trigger($focusViewElement, \"focus\");\n\n          $focusViewElement.removeClass(FOCUS_DISABLED_CLASS);\n          break;\n        }\n      }\n    }\n  },\n  setTabIndex: function (instance, $element) {\n    if (!instance.option(\"useLegacyKeyboardnavigation\")) {\n      $element.attr(\"tabindex\", instance.option(\"tabindex\") || 0);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}