{"ast":null,"code":"/* eslint consistent-this: 0 */\n// Timeout cached values\n\"use strict\";\n\nvar aFrom = require(\"es5-ext/array/from\"),\n    forEach = require(\"es5-ext/object/for-each\"),\n    nextTick = require(\"next-tick\"),\n    isPromise = require(\"is-promise\"),\n    timeout = require(\"timers-ext/valid-timeout\"),\n    extensions = require(\"../lib/registered-extensions\");\n\nvar noop = Function.prototype,\n    max = Math.max,\n    min = Math.min,\n    create = Object.create;\n\nextensions.maxAge = function (maxAge, conf, options) {\n  var timeouts, postfix, preFetchAge, preFetchTimeouts;\n  maxAge = timeout(maxAge);\n  if (!maxAge) return;\n  timeouts = create(null);\n  postfix = options.async && extensions.async || options.promise && extensions.promise ? \"async\" : \"\";\n  conf.on(\"set\" + postfix, function (id) {\n    timeouts[id] = setTimeout(function () {\n      conf.delete(id);\n    }, maxAge);\n    if (typeof timeouts[id].unref === \"function\") timeouts[id].unref();\n    if (!preFetchTimeouts) return;\n\n    if (preFetchTimeouts[id]) {\n      if (preFetchTimeouts[id] !== \"nextTick\") clearTimeout(preFetchTimeouts[id]);\n    }\n\n    preFetchTimeouts[id] = setTimeout(function () {\n      delete preFetchTimeouts[id];\n    }, preFetchAge);\n    if (typeof preFetchTimeouts[id].unref === \"function\") preFetchTimeouts[id].unref();\n  });\n  conf.on(\"delete\" + postfix, function (id) {\n    clearTimeout(timeouts[id]);\n    delete timeouts[id];\n    if (!preFetchTimeouts) return;\n    if (preFetchTimeouts[id] !== \"nextTick\") clearTimeout(preFetchTimeouts[id]);\n    delete preFetchTimeouts[id];\n  });\n\n  if (options.preFetch) {\n    if (options.preFetch === true || isNaN(options.preFetch)) {\n      preFetchAge = 0.333;\n    } else {\n      preFetchAge = max(min(Number(options.preFetch), 1), 0);\n    }\n\n    if (preFetchAge) {\n      preFetchTimeouts = {};\n      preFetchAge = (1 - preFetchAge) * maxAge;\n      conf.on(\"get\" + postfix, function (id, args, context) {\n        if (!preFetchTimeouts[id]) {\n          preFetchTimeouts[id] = \"nextTick\";\n          nextTick(function () {\n            var result;\n            if (preFetchTimeouts[id] !== \"nextTick\") return;\n            delete preFetchTimeouts[id];\n            conf.delete(id);\n\n            if (options.async) {\n              args = aFrom(args);\n              args.push(noop);\n            }\n\n            result = conf.memoized.apply(context, args);\n\n            if (options.promise) {\n              // Supress eventual error warnings\n              if (isPromise(result)) {\n                if (typeof result.done === \"function\") result.done(noop, noop);else result.then(noop, noop);\n              }\n            }\n          });\n        }\n      });\n    }\n  }\n\n  conf.on(\"clear\" + postfix, function () {\n    forEach(timeouts, function (id) {\n      clearTimeout(id);\n    });\n    timeouts = {};\n\n    if (preFetchTimeouts) {\n      forEach(preFetchTimeouts, function (id) {\n        if (id !== \"nextTick\") clearTimeout(id);\n      });\n      preFetchTimeouts = {};\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"script"}