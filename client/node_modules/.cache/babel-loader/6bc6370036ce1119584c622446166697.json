{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * PdfCompositeField.ts class for EJ2-PDF\n */\n\n\nimport { PdfMultipleValueField } from './multiple-value-field';\n/**\n * Represents class which can concatenate multiple automatic fields into single string.\n */\n\nvar PdfCompositeField =\n/** @class */\nfunction (_super) {\n  __extends(PdfCompositeField, _super); // Constructor\n\n  /**\n   * Initialize a new instance of `PdfCompositeField` class.\n   * @param font Font of the field.\n   * @param brush Color of the field.\n   * @param text Content of the field.\n   * @param list List of the automatic fields in specific order based on the text content.\n   */\n\n\n  function PdfCompositeField(font, brush, text) {\n    var list = [];\n\n    for (var _i = 3; _i < arguments.length; _i++) {\n      list[_i - 3] = arguments[_i];\n    }\n\n    var _this = _super.call(this) || this; // Fields\n\n    /**\n     * Stores the array of automatic fields.\n     * @private\n     */\n\n\n    _this.internalAutomaticFields = null;\n    /**\n     * Stores the text value of the field.\n     * @private\n     */\n\n    _this.internalText = '';\n    _this.font = font;\n    _this.brush = brush;\n    _this.text = text;\n    _this.automaticFields = list;\n    return _this;\n  }\n\n  Object.defineProperty(PdfCompositeField.prototype, \"text\", {\n    // Properties\n\n    /**\n     * Gets and sets the content of the field.\n     * @public\n     */\n    get: function () {\n      return this.internalText;\n    },\n    set: function (value) {\n      this.internalText = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfCompositeField.prototype, \"automaticFields\", {\n    /**\n     * Gets and sets the list of the field to drawn.\n     * @public\n     */\n    get: function () {\n      return this.internalAutomaticFields;\n    },\n    set: function (value) {\n      this.internalAutomaticFields = value;\n    },\n    enumerable: true,\n    configurable: true\n  }); // Implementation\n\n  /**\n   * Return the actual value generated from the list of automatic fields.\n   * @public\n   */\n\n  PdfCompositeField.prototype.getValue = function (graphics) {\n    var values = [];\n    var text = this.text.toString();\n\n    if (typeof this.automaticFields !== 'undefined' && this.automaticFields != null && this.automaticFields.length > 0) {\n      for (var i = 0; i < this.automaticFields.length; i++) {\n        var automaticField = this.automaticFields[i];\n        text = text.replace('{' + i + '}', automaticField.getValue(graphics));\n      }\n    }\n\n    return text;\n  };\n\n  return PdfCompositeField;\n}(PdfMultipleValueField);\n\nexport { PdfCompositeField };","map":null,"metadata":{},"sourceType":"module"}