{"ast":null,"code":"// Reference counter, useful for garbage collector like functionality\n\"use strict\";\n\nvar d = require(\"d\"),\n    extensions = require(\"../lib/registered-extensions\"),\n    create = Object.create,\n    defineProperties = Object.defineProperties;\n\nextensions.refCounter = function (ignore, conf, options) {\n  var cache, postfix;\n  cache = create(null);\n  postfix = options.async && extensions.async || options.promise && extensions.promise ? \"async\" : \"\";\n  conf.on(\"set\" + postfix, function (id, length) {\n    cache[id] = length || 1;\n  });\n  conf.on(\"get\" + postfix, function (id) {\n    ++cache[id];\n  });\n  conf.on(\"delete\" + postfix, function (id) {\n    delete cache[id];\n  });\n  conf.on(\"clear\" + postfix, function () {\n    cache = {};\n  });\n  defineProperties(conf.memoized, {\n    deleteRef: d(function () {\n      var id = conf.get(arguments);\n      if (id === null) return null;\n      if (!cache[id]) return null;\n\n      if (! --cache[id]) {\n        conf.delete(id);\n        return true;\n      }\n\n      return false;\n    }),\n    getRefCount: d(function () {\n      var id = conf.get(arguments);\n      if (id === null) return 0;\n      if (!cache[id]) return 0;\n      return cache[id];\n    })\n  });\n};","map":null,"metadata":{},"sourceType":"script"}