{"ast":null,"code":"/**\r\n * DevExtreme (core/templates/bindable_template.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BindableTemplate = void 0;\n\nvar _renderer = require(\"../renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _template_base = require(\"./template_base\");\n\nvar _events_engine = require(\"../../events/core/events_engine\");\n\nvar _remove_event = require(\"../remove_event\");\n\nvar _remove_event2 = _interopRequireDefault(_remove_event);\n\nvar _type = require(\"../utils/type\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (\"function\" !== typeof superClass && null !== superClass) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (superClass) {\n    _setPrototypeOf(subClass, superClass);\n  }\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function (o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var result,\n        Super = _getPrototypeOf(Derived);\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (\"object\" === _typeof(call) || \"function\" === typeof call)) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (void 0 === self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (\"undefined\" === typeof Reflect || !Reflect.construct) {\n    return false;\n  }\n\n  if (Reflect.construct.sham) {\n    return false;\n  }\n\n  if (\"function\" === typeof Proxy) {\n    return true;\n  }\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function (o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar watchChanges = function () {\n  var globalWatch = function (data, watchMethod, callback) {\n    return watchMethod(function () {\n      return data;\n    }, callback);\n  };\n\n  var fieldsWatch = function (data, watchMethod, fields, fieldsMap, callback) {\n    var resolvedData = {};\n    var missedFields = fields.slice();\n    var watchHandlers = fields.map(function (name) {\n      var fieldGetter = fieldsMap[name];\n      return watchMethod(fieldGetter ? function () {\n        return fieldGetter(data);\n      } : function () {\n        return data[name];\n      }, function (value) {\n        resolvedData[name] = value;\n\n        if (missedFields.length) {\n          var index = missedFields.indexOf(name);\n\n          if (index >= 0) {\n            missedFields.splice(index, 1);\n          }\n        }\n\n        if (!missedFields.length) {\n          callback(resolvedData);\n        }\n      });\n    });\n    return function () {\n      watchHandlers.forEach(function (dispose) {\n        return dispose();\n      });\n    };\n  };\n\n  return function (rawData, watchMethod, fields, fieldsMap, callback) {\n    var fieldsDispose;\n    var globalDispose = globalWatch(rawData, watchMethod, function (dataWithRawFields) {\n      fieldsDispose && fieldsDispose();\n\n      if ((0, _type.isPrimitive)(dataWithRawFields)) {\n        callback(dataWithRawFields);\n        return;\n      }\n\n      fieldsDispose = fieldsWatch(dataWithRawFields, watchMethod, fields, fieldsMap, callback);\n    });\n    return function () {\n      fieldsDispose && fieldsDispose();\n      globalDispose && globalDispose();\n    };\n  };\n}();\n\nvar BindableTemplate = exports.BindableTemplate = function (_TemplateBase) {\n  _inherits(BindableTemplate, _TemplateBase);\n\n  var _super = _createSuper(BindableTemplate);\n\n  function BindableTemplate(render, fields, watchMethod, fieldsMap) {\n    var _this;\n\n    _classCallCheck(this, BindableTemplate);\n\n    _this = _super.call(this);\n    _this._render = render;\n    _this._fields = fields;\n    _this._fieldsMap = fieldsMap || {};\n    _this._watchMethod = watchMethod;\n    return _this;\n  }\n\n  _createClass(BindableTemplate, [{\n    key: \"_renderCore\",\n    value: function (options) {\n      var _this2 = this;\n\n      var $container = (0, _renderer2.default)(options.container);\n      var dispose = watchChanges(options.model, this._watchMethod, this._fields, this._fieldsMap, function (data) {\n        $container.empty();\n\n        _this2._render($container, data, options.model);\n      });\n      (0, _events_engine.on)($container, _remove_event2.default, dispose);\n      return $container.contents();\n    }\n  }]);\n\n  return BindableTemplate;\n}(_template_base.TemplateBase);","map":null,"metadata":{},"sourceType":"script"}