{"ast":null,"code":"/**\r\n * DevExtreme (events/swipe.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar eventUtils = require(\"./utils\");\n\nvar GestureEmitter = require(\"./gesture/emitter.gesture\");\n\nvar registerEmitter = require(\"./core/emitter_registrator\");\n\nvar SWIPE_START_EVENT = \"dxswipestart\";\nvar SWIPE_EVENT = \"dxswipe\";\nvar SWIPE_END_EVENT = \"dxswipeend\";\nvar HorizontalStrategy = {\n  defaultItemSizeFunc: function () {\n    return this.getElement().width();\n  },\n  getBounds: function () {\n    return [this._maxLeftOffset, this._maxRightOffset];\n  },\n  calcOffsetRatio: function (e) {\n    var endEventData = eventUtils.eventData(e);\n    return (endEventData.x - (this._savedEventData && this._savedEventData.x || 0)) / this._itemSizeFunc().call(this, e);\n  },\n  isFastSwipe: function (e) {\n    var endEventData = eventUtils.eventData(e);\n    return this.FAST_SWIPE_SPEED_LIMIT * Math.abs(endEventData.x - this._tickData.x) >= endEventData.time - this._tickData.time;\n  }\n};\nvar VerticalStrategy = {\n  defaultItemSizeFunc: function () {\n    return this.getElement().height();\n  },\n  getBounds: function () {\n    return [this._maxTopOffset, this._maxBottomOffset];\n  },\n  calcOffsetRatio: function (e) {\n    var endEventData = eventUtils.eventData(e);\n    return (endEventData.y - (this._savedEventData && this._savedEventData.y || 0)) / this._itemSizeFunc().call(this, e);\n  },\n  isFastSwipe: function (e) {\n    var endEventData = eventUtils.eventData(e);\n    return this.FAST_SWIPE_SPEED_LIMIT * Math.abs(endEventData.y - this._tickData.y) >= endEventData.time - this._tickData.time;\n  }\n};\nvar STRATEGIES = {\n  horizontal: HorizontalStrategy,\n  vertical: VerticalStrategy\n};\nvar SwipeEmitter = GestureEmitter.inherit({\n  TICK_INTERVAL: 300,\n  FAST_SWIPE_SPEED_LIMIT: 10,\n  ctor: function (element) {\n    this.callBase(element);\n    this.direction = \"horizontal\";\n    this.elastic = true;\n  },\n  _getStrategy: function () {\n    return STRATEGIES[this.direction];\n  },\n  _defaultItemSizeFunc: function () {\n    return this._getStrategy().defaultItemSizeFunc.call(this);\n  },\n  _itemSizeFunc: function () {\n    return this.itemSizeFunc || this._defaultItemSizeFunc;\n  },\n  _init: function (e) {\n    this._tickData = eventUtils.eventData(e);\n  },\n  _start: function (e) {\n    this._savedEventData = eventUtils.eventData(e);\n    e = this._fireEvent(SWIPE_START_EVENT, e);\n\n    if (!e.cancel) {\n      this._maxLeftOffset = e.maxLeftOffset;\n      this._maxRightOffset = e.maxRightOffset;\n      this._maxTopOffset = e.maxTopOffset;\n      this._maxBottomOffset = e.maxBottomOffset;\n    }\n  },\n  _move: function (e) {\n    var strategy = this._getStrategy();\n\n    var moveEventData = eventUtils.eventData(e);\n    var offset = strategy.calcOffsetRatio.call(this, e);\n    offset = this._fitOffset(offset, this.elastic);\n\n    if (moveEventData.time - this._tickData.time > this.TICK_INTERVAL) {\n      this._tickData = moveEventData;\n    }\n\n    this._fireEvent(SWIPE_EVENT, e, {\n      offset: offset\n    });\n\n    e.preventDefault();\n  },\n  _end: function (e) {\n    var strategy = this._getStrategy();\n\n    var offsetRatio = strategy.calcOffsetRatio.call(this, e);\n    var isFast = strategy.isFastSwipe.call(this, e);\n    var startOffset = offsetRatio;\n\n    var targetOffset = this._calcTargetOffset(offsetRatio, isFast);\n\n    startOffset = this._fitOffset(startOffset, this.elastic);\n    targetOffset = this._fitOffset(targetOffset, false);\n\n    this._fireEvent(SWIPE_END_EVENT, e, {\n      offset: startOffset,\n      targetOffset: targetOffset\n    });\n  },\n  _fitOffset: function (offset, elastic) {\n    var strategy = this._getStrategy();\n\n    var bounds = strategy.getBounds.call(this);\n\n    if (offset < -bounds[0]) {\n      return elastic ? (-2 * bounds[0] + offset) / 3 : -bounds[0];\n    }\n\n    if (offset > bounds[1]) {\n      return elastic ? (2 * bounds[1] + offset) / 3 : bounds[1];\n    }\n\n    return offset;\n  },\n  _calcTargetOffset: function (offsetRatio, isFast) {\n    var result;\n\n    if (isFast) {\n      result = Math.ceil(Math.abs(offsetRatio));\n\n      if (offsetRatio < 0) {\n        result = -result;\n      }\n    } else {\n      result = Math.round(offsetRatio);\n    }\n\n    return result;\n  }\n});\nregisterEmitter({\n  emitter: SwipeEmitter,\n  events: [SWIPE_START_EVENT, SWIPE_EVENT, SWIPE_END_EVENT]\n});\nexports.swipe = SWIPE_EVENT;\nexports.start = SWIPE_START_EVENT;\nexports.end = SWIPE_END_EVENT;","map":null,"metadata":{},"sourceType":"script"}