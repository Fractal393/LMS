{"ast":null,"code":"/**\n * ByteArray class\n * Used to keep information about image stream as byte array.\n * @private\n */\nvar ByteArray =\n/** @class */\nfunction () {\n  /**\n   * Initialize the new instance for `byte-array` class\n   * @hidden\n   * @private\n   */\n  function ByteArray(length) {\n    /**\n     * Current stream `position`.\n     * @default 0\n     * @private\n     */\n    this.mPosition = 0;\n    this.buffer = new Uint8Array(length);\n    this.dataView = new DataView(this.buffer.buffer);\n  }\n\n  Object.defineProperty(ByteArray.prototype, \"position\", {\n    /**\n     * Gets and Sets a current `position` of byte array.\n     * @hidden\n     * @private\n     */\n    get: function () {\n      return this.mPosition;\n    },\n    set: function (value) {\n      this.mPosition = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * `Read` from current stream position.\n   * @default 0\n   * @hidden\n   * @private\n   */\n\n  ByteArray.prototype.read = function (buffer, offset, count) {\n    for (var index = offset; index < count; index++) {\n      var position = this.position;\n      buffer.buffer[index] = this.readByte(position);\n      this.position++;\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  ByteArray.prototype.getBuffer = function (index) {\n    return this.buffer[index];\n  };\n  /**\n   * @hidden\n   */\n\n\n  ByteArray.prototype.writeFromBase64String = function (base64) {\n    var arr = this.encodedString(base64);\n    this.buffer = arr;\n  };\n  /**\n   * @hidden\n   */\n\n\n  ByteArray.prototype.encodedString = function (input) {\n    var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n    var chr1;\n    var chr2;\n    var chr3;\n    var enc1;\n    var enc2;\n    var enc3;\n    var enc4;\n    var i = 0;\n    var resultIndex = 0;\n    var dataUrlPrefix = 'data:';\n    input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n    var totalLength = input.length * 3 / 4;\n\n    if (input.charAt(input.length - 1) === keyStr.charAt(64)) {\n      totalLength--;\n    }\n\n    var output = new Uint8Array(totalLength | 0);\n\n    while (i < input.length) {\n      enc1 = keyStr.indexOf(input.charAt(i++));\n      enc2 = keyStr.indexOf(input.charAt(i++));\n      enc3 = keyStr.indexOf(input.charAt(i++));\n      enc4 = keyStr.indexOf(input.charAt(i++));\n      chr1 = enc1 << 2 | enc2 >> 4;\n      chr2 = (enc2 & 15) << 4 | enc3 >> 2;\n      chr3 = (enc3 & 3) << 6 | enc4;\n      output[resultIndex++] = chr1;\n      output[resultIndex++] = chr2;\n      output[resultIndex++] = chr3;\n    }\n\n    return output;\n  };\n  /**\n   * @hidden\n   */\n\n\n  ByteArray.prototype.readByte = function (offset) {\n    return this.buffer[offset];\n  };\n\n  Object.defineProperty(ByteArray.prototype, \"internalBuffer\", {\n    /**\n     * @hidden\n     */\n    get: function () {\n      return this.buffer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ByteArray.prototype, \"count\", {\n    /**\n     * @hidden\n     */\n    get: function () {\n      return this.buffer.byteLength;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * 'readNextTwoBytes' stream\n   * @hidden\n   * @private\n   */\n\n  ByteArray.prototype.readNextTwoBytes = function (stream) {\n    var data = stream.readByte(this.position);\n    this.position++;\n    data <<= 8;\n    data |= stream.readByte(this.position);\n    this.position++;\n    return data;\n  };\n\n  return ByteArray;\n}();\n\nexport { ByteArray };","map":null,"metadata":{},"sourceType":"module"}