{"ast":null,"code":"/**\r\n * DevExtreme (ui/number_box/number_box.spin.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\");\n\nvar domAdapter = require(\"../../core/dom_adapter\");\n\nvar eventsEngine = require(\"../../events/core/events_engine\");\n\nvar Widget = require(\"../widget/ui.widget\");\n\nvar extend = require(\"../../core/utils/extend\").extend;\n\nvar eventUtils = require(\"../../events/utils\");\n\nvar pointerEvents = require(\"../../events/pointer\");\n\nvar feedbackEvents = require(\"../../events/core/emitter.feedback\");\n\nvar holdEvent = require(\"../../events/hold\");\n\nvar Deferred = require(\"../../core/utils/deferred\").Deferred;\n\nvar SPIN_CLASS = \"dx-numberbox-spin\";\nvar SPIN_BUTTON_CLASS = \"dx-numberbox-spin-button\";\nvar SPIN_HOLD_DELAY = 100;\nvar NUMBER_BOX = \"dxNumberBox\";\nvar POINTERUP_EVENT_NAME = eventUtils.addNamespace(pointerEvents.up, NUMBER_BOX);\nvar POINTERCANCEL_EVENT_NAME = eventUtils.addNamespace(pointerEvents.cancel, NUMBER_BOX);\nvar SpinButton = Widget.inherit({\n  _getDefaultOptions: function () {\n    return extend(this.callBase(), {\n      direction: \"up\",\n      onChange: null,\n      activeStateEnabled: true,\n      hoverStateEnabled: true\n    });\n  },\n  _initMarkup: function () {\n    this.callBase();\n    var direction = SPIN_CLASS + \"-\" + this.option(\"direction\");\n    this.$element().addClass(SPIN_BUTTON_CLASS).addClass(direction);\n    this._spinIcon = $(\"<div>\").addClass(direction + \"-icon\").appendTo(this.$element());\n  },\n  _render: function () {\n    this.callBase();\n    var eventName = eventUtils.addNamespace(pointerEvents.down, this.NAME);\n    var $element = this.$element();\n    eventsEngine.off($element, eventName);\n    eventsEngine.on($element, eventName, this._spinDownHandler.bind(this));\n    this._spinChangeHandler = this._createActionByOption(\"onChange\");\n  },\n  _spinDownHandler: function (e) {\n    e.preventDefault();\n\n    this._clearTimer();\n\n    eventsEngine.on(this.$element(), holdEvent.name, function () {\n      this._feedBackDeferred = new Deferred();\n      feedbackEvents.lock(this._feedBackDeferred);\n\n      this._spinChangeHandler({\n        event: e\n      });\n\n      this._holdTimer = setInterval(this._spinChangeHandler, SPIN_HOLD_DELAY, {\n        event: e\n      });\n    }.bind(this));\n    var document = domAdapter.getDocument();\n    eventsEngine.on(document, POINTERUP_EVENT_NAME, this._clearTimer.bind(this));\n    eventsEngine.on(document, POINTERCANCEL_EVENT_NAME, this._clearTimer.bind(this));\n\n    this._spinChangeHandler({\n      event: e\n    });\n  },\n  _dispose: function () {\n    this._clearTimer();\n\n    this.callBase();\n  },\n  _clearTimer: function () {\n    eventsEngine.off(this.$element(), holdEvent.name);\n    var document = domAdapter.getDocument();\n    eventsEngine.off(document, POINTERUP_EVENT_NAME);\n    eventsEngine.off(document, POINTERCANCEL_EVENT_NAME);\n\n    if (this._feedBackDeferred) {\n      this._feedBackDeferred.resolve();\n    }\n\n    if (this._holdTimer) {\n      clearInterval(this._holdTimer);\n    }\n  },\n  _optionChanged: function (args) {\n    switch (args.name) {\n      case \"onChange\":\n      case \"direction\":\n        this._invalidate();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n});\nmodule.exports = SpinButton;","map":null,"metadata":{},"sourceType":"script"}