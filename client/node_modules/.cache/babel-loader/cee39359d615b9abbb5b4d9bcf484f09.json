{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.pager.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _uiGrid_core = require(\"./ui.grid_core.modules\");\n\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\n\nvar _pager = require(\"../pager\");\n\nvar _pager2 = _interopRequireDefault(_pager);\n\nvar _array = require(\"../../core/utils/array\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _window = require(\"../../core/utils/window\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar PAGER_CLASS = \"pager\";\nvar MAX_PAGES_COUNT = 10;\n\nvar getPageIndex = function (dataController) {\n  return 1 + (parseInt(dataController.pageIndex()) || 0);\n};\n\nvar PagerView = _uiGrid_core2.default.View.inherit({\n  init: function () {\n    var that = this;\n    var dataController = that.getController(\"data\");\n    that._isVisible = false;\n    dataController.changed.add(function (e) {\n      if (e && e.repaintChangesOnly) {\n        var pager = that._getPager();\n\n        if (pager) {\n          pager.option({\n            pageIndex: getPageIndex(dataController),\n            pageSize: dataController.pageSize(),\n            pageCount: dataController.pageCount(),\n            totalCount: dataController.totalCount(),\n            hasKnownLastPage: dataController.hasKnownLastPage()\n          });\n        } else {\n          that.render();\n        }\n      } else {\n        if (!e || \"update\" !== e.changeType && \"updateSelection\" !== e.changeType) {\n          that.render();\n        }\n      }\n    });\n  },\n  _getPager: function () {\n    var $element = this.element();\n    return $element && $element.data(\"dxPager\");\n  },\n  _renderCore: function () {\n    var that = this;\n    var $element = that.element().addClass(that.addWidgetPrefix(PAGER_CLASS));\n    var pagerOptions = that.option(\"pager\") || {};\n    var dataController = that.getController(\"data\");\n    var keyboardController = that.getController(\"keyboardNavigation\");\n    var options = {\n      maxPagesCount: MAX_PAGES_COUNT,\n      pageIndex: getPageIndex(dataController),\n      pageCount: dataController.pageCount(),\n      pageSize: dataController.pageSize(),\n      showPageSizes: pagerOptions.showPageSizeSelector,\n      showInfo: pagerOptions.showInfo,\n      pagesNavigatorVisible: pagerOptions.visible,\n      showNavigationButtons: pagerOptions.showNavigationButtons,\n      pageSizes: that.getPageSizes(),\n      totalCount: dataController.totalCount(),\n      hasKnownLastPage: dataController.hasKnownLastPage(),\n      pageIndexChanged: function (pageIndex) {\n        if (dataController.pageIndex() !== pageIndex - 1) {\n          setTimeout(function () {\n            dataController.pageIndex(pageIndex - 1);\n          });\n        }\n      },\n      pageSizeChanged: function (pageSize) {\n        setTimeout(function () {\n          dataController.pageSize(pageSize);\n        });\n      },\n      onKeyDown: function (e) {\n        return keyboardController && keyboardController.executeAction(\"onKeyDown\", e);\n      },\n      useLegacyKeyboardNavigation: this.option(\"useLegacyKeyboardNavigation\"),\n      useKeyboard: this.option(\"keyboardNavigation.enabled\")\n    };\n\n    if ((0, _type.isDefined)(pagerOptions.infoText)) {\n      options.infoText = pagerOptions.infoText;\n    }\n\n    that._createComponent($element, _pager2.default, options);\n  },\n  getPageSizes: function () {\n    var that = this;\n    var dataController = that.getController(\"data\");\n    var pagerOptions = that.option(\"pager\");\n    var allowedPageSizes = pagerOptions && pagerOptions.allowedPageSizes;\n    var pageSize = dataController.pageSize();\n\n    if (!(0, _type.isDefined)(that._pageSizes) || (0, _array.inArray)(pageSize, that._pageSizes) === -1) {\n      that._pageSizes = [];\n\n      if (pagerOptions) {\n        if (Array.isArray(allowedPageSizes)) {\n          that._pageSizes = allowedPageSizes;\n        } else {\n          if (allowedPageSizes && pageSize > 1) {\n            that._pageSizes = [Math.floor(pageSize / 2), pageSize, 2 * pageSize];\n          }\n        }\n      }\n    }\n\n    return that._pageSizes;\n  },\n  isVisible: function () {\n    var that = this;\n    var dataController = that.getController(\"data\");\n    var pagerOptions = that.option(\"pager\");\n    var pagerVisible = pagerOptions && pagerOptions.visible;\n    var scrolling = that.option(\"scrolling\");\n\n    if (that._isVisible) {\n      return true;\n    }\n\n    if (\"auto\" === pagerVisible) {\n      if (scrolling && (\"virtual\" === scrolling.mode || \"infinite\" === scrolling.mode)) {\n        pagerVisible = false;\n      } else {\n        pagerVisible = dataController.pageCount() > 1 || dataController.isLoaded() && !dataController.hasKnownLastPage();\n      }\n    }\n\n    that._isVisible = pagerVisible;\n    return pagerVisible;\n  },\n  getHeight: function () {\n    return this.getElementHeight();\n  },\n  optionChanged: function (args) {\n    var that = this;\n    var name = args.name;\n    var isPager = \"pager\" === name;\n    var isPaging = \"paging\" === name;\n    var isDataSource = \"dataSource\" === name;\n    var isScrolling = \"scrolling\" === name;\n    var dataController = that.getController(\"data\");\n\n    if (isPager || isPaging || isScrolling || isDataSource) {\n      args.handled = true;\n\n      if (dataController.skipProcessingPagingChange(args.fullName)) {\n        return;\n      }\n\n      if (isPager || isPaging) {\n        that._pageSizes = null;\n      }\n\n      if (isPager || isPaging || isScrolling) {\n        that._isVisible = false;\n      }\n\n      if (!isDataSource) {\n        that._invalidate();\n\n        if ((0, _window.hasWindow)() && isPager && that.component) {\n          that.component.resize();\n        }\n      }\n    }\n  }\n});\n\nmodule.exports = {\n  defaultOptions: function () {\n    return {\n      pager: {\n        visible: \"auto\",\n        showPageSizeSelector: false,\n        allowedPageSizes: \"auto\"\n      }\n    };\n  },\n  views: {\n    pagerView: PagerView\n  }\n};","map":null,"metadata":{},"sourceType":"script"}