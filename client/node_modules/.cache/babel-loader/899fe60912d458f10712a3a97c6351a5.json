{"ast":null,"code":"import { Dictionary } from './../collections/dictionary';\nimport { PdfName } from './pdf-name';\nimport { Operators } from './../input-output/pdf-operators';\nimport { DictionaryProperties } from './../input-output/pdf-dictionary-properties';\n/**\n * `PdfDictionary` class is used to perform primitive operations.\n * @private\n */\n\nvar PdfDictionary =\n/** @class */\nfunction () {\n  function PdfDictionary(dictionary) {\n    /**\n     * Internal variable to store the `position`.\n     * @default -1\n     * @private\n     */\n    this.position7 = -1;\n    /**\n     * The `IPdfSavable` with the specified key.\n     * @private\n     */\n\n    this.primitiveItems = new Dictionary();\n    /**\n     * `Start marker` for dictionary.\n     * @private\n     */\n\n    this.prefix = '<<';\n    /**\n     * `End marker` for dictionary.\n     * @private\n     */\n\n    this.suffix = '>>';\n    /**\n     * @hidden\n     * @private\n     */\n\n    this.resources = [];\n    /**\n     * Internal variable to hold `cloned object`.\n     * @default null\n     * @private\n     */\n\n    this.object = null;\n    /**\n     * Flag for PDF file formar 1.5 is dictionary `archiving` needed.\n     * @default true\n     * @private\n     */\n\n    this.archive = true;\n    /**\n     * Represents the Font dictionary.\n     * @hidden\n     * @private\n     */\n\n    this.isFont = false;\n\n    if (typeof dictionary === 'undefined') {\n      this.primitiveItems = new Dictionary();\n      this.encrypt = true;\n      this.dictionaryProperties = new DictionaryProperties();\n    } else {\n      this.primitiveItems = new Dictionary();\n      var keys = dictionary.items.keys();\n      var values = dictionary.items.values();\n\n      for (var index = 0; index < dictionary.items.size(); index++) {\n        this.primitiveItems.setValue(keys[index], values[index]);\n      }\n\n      this.status = dictionary.status;\n      this.freezeChanges(this);\n      this.encrypt = true;\n      this.dictionaryProperties = new DictionaryProperties();\n    }\n  }\n\n  Object.defineProperty(PdfDictionary.prototype, \"items\", {\n    //Properties\n\n    /**\n     * Gets or sets the `IPdfSavable` with the specified key.\n     * @private\n     */\n    get: function () {\n      return this.primitiveItems;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfDictionary.prototype, \"status\", {\n    /**\n     * Gets or sets the `Status` of the specified object.\n     * @private\n     */\n    get: function () {\n      return this.status7;\n    },\n    set: function (value) {\n      this.status7 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfDictionary.prototype, \"isSaving\", {\n    /**\n     * Gets or sets a value indicating whether this document `is saving` or not.\n     * @private\n     */\n    get: function () {\n      return this.isSaving7;\n    },\n    set: function (value) {\n      this.isSaving7 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfDictionary.prototype, \"objectCollectionIndex\", {\n    /**\n     * Gets or sets the `index` value of the specified object.\n     * @private\n     */\n    get: function () {\n      return this.index7;\n    },\n    set: function (value) {\n      this.index7 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfDictionary.prototype, \"clonedObject\", {\n    /**\n     * Returns `cloned object`.\n     * @private\n     */\n    get: function () {\n      return this.object;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfDictionary.prototype, \"position\", {\n    /**\n     * Gets or sets the `position` of the object.\n     * @private\n     */\n    get: function () {\n      return this.position7;\n    },\n    set: function (value) {\n      this.position7 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfDictionary.prototype, \"Count\", {\n    /**\n     * Gets the `count`.\n     * @private\n     */\n    get: function () {\n      return this.primitiveItems.size();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfDictionary.prototype, \"Dictionary\", {\n    /**\n     * Collection of `items` in the object.\n     * @private\n     */\n    get: function () {\n      return this;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Get flag if need to `archive` dictionary.\n   * @private\n   */\n\n  PdfDictionary.prototype.getArchive = function () {\n    return this.archive;\n  };\n  /**\n   * Set flag if need to `archive` dictionary.\n   * @private\n   */\n\n\n  PdfDictionary.prototype.setArchive = function (value) {\n    this.archive = value;\n  };\n  /**\n   * Sets flag if `encryption` is needed.\n   * @private\n   */\n\n\n  PdfDictionary.prototype.setEncrypt = function (value) {\n    this.encrypt = value;\n    this.modify();\n  };\n  /**\n   * Gets flag if `encryption` is needed.\n   * @private\n   */\n\n\n  PdfDictionary.prototype.getEncrypt = function () {\n    return this.encrypt;\n  };\n  /**\n   * `Freezes` the changes.\n   * @private\n   */\n\n\n  PdfDictionary.prototype.freezeChanges = function (freezer) {\n    this.bChanged = false;\n  };\n  /**\n   * Creates a `copy of PdfDictionary`.\n   * @private\n   */\n\n\n  PdfDictionary.prototype.clone = function (crossTable) {\n    //Need to add more codings\n    var newDict = new PdfDictionary();\n    return newDict;\n  };\n  /**\n   * `Mark` this instance modified.\n   * @private\n   */\n\n\n  PdfDictionary.prototype.modify = function () {\n    this.bChanged = true;\n  };\n  /**\n   * `Removes` the specified key.\n   * @private\n   */\n\n\n  PdfDictionary.prototype.remove = function (key) {\n    if (typeof key !== 'string') {\n      this.primitiveItems.remove(key.value);\n      this.modify();\n    } else {\n      this.remove(new PdfName(key));\n    }\n  };\n  /**\n   * `Determines` whether the dictionary contains the key.\n   * @private\n   */\n\n\n  PdfDictionary.prototype.containsKey = function (key) {\n    var returnValue = false;\n    returnValue = this.primitiveItems.containsKey(key.toString());\n    return returnValue;\n  };\n  /**\n   * Raises event `BeginSave`.\n   * @private\n   */\n\n\n  PdfDictionary.prototype.onBeginSave = function () {\n    this.beginSave.sender.beginSave();\n  };\n  /**\n   * Raises event `Font Dictionary BeginSave`.\n   * @private\n   */\n\n\n  PdfDictionary.prototype.onFontDictionaryBeginSave = function () {\n    this.fontDictionaryBeginSave.sender.fontDictionaryBeginSave();\n  };\n  /**\n   * Raises event `Descendant Font BeginSave`.\n   * @private\n   */\n\n\n  PdfDictionary.prototype.onDescendantFontBeginSave = function () {\n    this.descendantFontBeginSave.sender.descendantFontBeginSave();\n  };\n  /**\n   * Raises event 'BeginSave'.\n   * @private\n   */\n\n\n  PdfDictionary.prototype.onTemplateBeginSave = function () {\n    this.pageBeginDrawTemplate.sender.pageBeginSave();\n  };\n  /**\n   * Raises event `BeginSave`.\n   * @private\n   */\n\n\n  PdfDictionary.prototype.onBeginAnnotationSave = function () {\n    this.annotationBeginSave.sender.beginSave();\n  };\n  /**\n   * Raises event `BeginSave`.\n   * @private\n   */\n\n\n  PdfDictionary.prototype.onSectionBeginSave = function (writer) {\n    var saveEvent = this.sectionBeginSave;\n    saveEvent.sender.beginSave(saveEvent.state, writer);\n  };\n\n  PdfDictionary.prototype.save = function (writer, bRaiseEvent) {\n    if (typeof bRaiseEvent === 'undefined') {\n      this.save(writer, true);\n    } else {\n      writer.write(this.prefix);\n\n      if (typeof this.beginSave !== 'undefined') {\n        this.onBeginSave();\n      }\n\n      if (typeof this.descendantFontBeginSave !== 'undefined') {\n        this.onDescendantFontBeginSave();\n      }\n\n      if (typeof this.fontDictionaryBeginSave !== 'undefined') {\n        this.onFontDictionaryBeginSave();\n      }\n\n      if (typeof this.annotationBeginSave !== 'undefined') {\n        this.onBeginAnnotationSave();\n      }\n\n      if (typeof this.sectionBeginSave !== 'undefined') {\n        this.onSectionBeginSave(writer);\n      }\n\n      if (typeof this.pageBeginDrawTemplate !== 'undefined') {\n        this.onTemplateBeginSave();\n      } // }\n\n\n      if (this.Count > 0) {\n        this.saveItems(writer);\n      }\n\n      writer.write(this.suffix);\n      writer.write(Operators.newLine);\n    }\n  };\n  /**\n   * `Save dictionary items`.\n   * @private\n   */\n\n\n  PdfDictionary.prototype.saveItems = function (writer) {\n    writer.write(Operators.newLine);\n    var keys = this.primitiveItems.keys();\n    var values = this.primitiveItems.values();\n\n    for (var index = 0; index < keys.length; index++) {\n      var key = keys[index];\n      var name_1 = new PdfName(key);\n      name_1.save(writer);\n      writer.write(Operators.whiteSpace);\n      var resources = values[index];\n      resources.save(writer);\n      writer.write(Operators.newLine);\n    }\n  };\n\n  return PdfDictionary;\n}();\n\nexport { PdfDictionary };\n\nvar SaveSectionCollectionEventHandler =\n/** @class */\nfunction () {\n  /**\n   * New instance for `save section collection event handler` class.\n   * @private\n   */\n  function SaveSectionCollectionEventHandler(sender) {\n    this.sender = sender;\n  }\n\n  return SaveSectionCollectionEventHandler;\n}();\n\nexport { SaveSectionCollectionEventHandler };\n\nvar SaveDescendantFontEventHandler =\n/** @class */\nfunction () {\n  /**\n   * New instance for `save section collection event handler` class.\n   * @private\n   */\n  function SaveDescendantFontEventHandler(sender) {\n    this.sender = sender;\n  }\n\n  return SaveDescendantFontEventHandler;\n}();\n\nexport { SaveDescendantFontEventHandler };\n\nvar SaveFontDictionaryEventHandler =\n/** @class */\nfunction () {\n  /**\n   * New instance for `save section collection event handler` class.\n   * @private\n   */\n  function SaveFontDictionaryEventHandler(sender) {\n    this.sender = sender;\n  }\n\n  return SaveFontDictionaryEventHandler;\n}();\n\nexport { SaveFontDictionaryEventHandler };\n\nvar SaveAnnotationEventHandler =\n/** @class */\nfunction () {\n  /**\n   * New instance for `save annotation event handler` class.\n   * @private\n   */\n  function SaveAnnotationEventHandler(sender) {\n    this.sender = sender;\n  }\n\n  return SaveAnnotationEventHandler;\n}();\n\nexport { SaveAnnotationEventHandler };\n\nvar SaveSectionEventHandler =\n/** @class */\nfunction () {\n  // constructors\n\n  /**\n   * New instance for `save section event handler` class.\n   * @private\n   */\n  function SaveSectionEventHandler(sender, state) {\n    this.sender = sender;\n    this.state = state;\n  }\n\n  return SaveSectionEventHandler;\n}();\n\nexport { SaveSectionEventHandler };\n/**\n * SaveTemplateEventHandler class used to store information about template elements.\n * @private\n * @hidden\n */\n\nvar SaveTemplateEventHandler =\n/** @class */\nfunction () {\n  /**\n   * New instance for save section collection event handler class.\n   * @public\n   */\n  function SaveTemplateEventHandler(sender) {\n    this.sender = sender;\n  }\n\n  return SaveTemplateEventHandler;\n}();\n\nexport { SaveTemplateEventHandler };","map":null,"metadata":{},"sourceType":"module"}