{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}; /// <reference path='../common/menu-base-model.d.ts'/>\n\n\nimport { attributes, getUniqueID, Collection, NotifyPropertyChanges, Property } from '@syncfusion/ej2-base';\nimport { getZindexPartial } from '@syncfusion/ej2-popups';\nimport { MenuBase, MenuItem } from '../common/menu-base';\n/**\n * The ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.\n * ```html\n * <div id = 'target'></div>\n * <ul id = 'contextmenu'></ul>\n * ```\n * ```typescript\n * <script>\n * var contextMenuObj = new ContextMenu({items: [{ text: 'Cut' }, { text: 'Copy' },{ text: 'Paste' }], target: '#target'});\n * </script>\n * ```\n */\n\nvar ContextMenu =\n/** @class */\nfunction (_super) {\n  __extends(ContextMenu, _super);\n  /**\n   * Constructor for creating the widget.\n   * @private\n   */\n\n\n  function ContextMenu(options, element) {\n    return _super.call(this, options, element) || this;\n  }\n  /**\n   * For internal use only - prerender processing.\n   * @private\n   */\n\n\n  ContextMenu.prototype.preRender = function () {\n    this.isMenu = false;\n    this.element.id = this.element.id || getUniqueID('ej2-contextmenu');\n\n    _super.prototype.preRender.call(this);\n  };\n\n  ContextMenu.prototype.initialize = function () {\n    _super.prototype.initialize.call(this);\n\n    attributes(this.element, {\n      'role': 'context menu',\n      'tabindex': '0'\n    });\n    this.element.style.zIndex = getZindexPartial(this.element).toString();\n  };\n  /**\n   * This method is used to open the ContextMenu in specified position.\n   * @param top - To specify ContextMenu vertical positioning.\n   * @param left - To specify ContextMenu horizontal positioning.\n   * @param target - To calculate z-index for ContextMenu based upon the specified target.\n   * @method open\n   * @returns void\n   */\n\n\n  ContextMenu.prototype.open = function (top, left, target) {\n    _super.prototype.openMenu.call(this, null, null, top, left, null, target);\n  };\n  /**\n   * Closes the ContextMenu if it is opened.\n   */\n\n\n  ContextMenu.prototype.close = function () {\n    _super.prototype.closeMenu.call(this);\n  };\n  /**\n   * Called internally if any of the property value changed\n   * @private\n   * @param {ContextMenuModel} newProp\n   * @param {ContextMenuModel} oldProp\n   * @returns void\n   */\n\n\n  ContextMenu.prototype.onPropertyChanged = function (newProp, oldProp) {\n    _super.prototype.onPropertyChanged.call(this, newProp, oldProp);\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'filter':\n          this.close();\n          this.filter = newProp.filter;\n          break;\n\n        case 'target':\n          this.unWireEvents(oldProp.target);\n          this.wireEvents();\n          break;\n      }\n    }\n  };\n  /**\n   * Get module name.\n   * @returns string\n   * @private\n   */\n\n\n  ContextMenu.prototype.getModuleName = function () {\n    return 'contextmenu';\n  };\n\n  __decorate([Property('')], ContextMenu.prototype, \"target\", void 0);\n\n  __decorate([Property('')], ContextMenu.prototype, \"filter\", void 0);\n\n  __decorate([Collection([], MenuItem)], ContextMenu.prototype, \"items\", void 0);\n\n  ContextMenu = __decorate([NotifyPropertyChanges], ContextMenu);\n  return ContextMenu;\n}(MenuBase);\n\nexport { ContextMenu };","map":null,"metadata":{},"sourceType":"module"}