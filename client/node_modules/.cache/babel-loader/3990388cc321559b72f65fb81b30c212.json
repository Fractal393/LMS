{"ast":null,"code":"/**\n * `PdfString` class is used to perform string related primitive operations.\n * @private\n */\nexport var InternalEnum;\n\n(function (InternalEnum) {\n  //Internals\n\n  /**\n   * public Enum for `ForceEncoding`.\n   * @private\n   */\n  var ForceEncoding;\n\n  (function (ForceEncoding) {\n    /**\n     * Specifies the type of `None`.\n     * @private\n     */\n    ForceEncoding[ForceEncoding[\"None\"] = 0] = \"None\";\n    /**\n     * Specifies the type of `Ascii`.\n     * @private\n     */\n\n    ForceEncoding[ForceEncoding[\"Ascii\"] = 1] = \"Ascii\";\n    /**\n     * Specifies the type of `Unicode`.\n     * @private\n     */\n\n    ForceEncoding[ForceEncoding[\"Unicode\"] = 2] = \"Unicode\";\n  })(ForceEncoding = InternalEnum.ForceEncoding || (InternalEnum.ForceEncoding = {}));\n  /**\n   * public Enum for `SourceType`.\n   * @private\n   */\n\n\n  var SourceType;\n\n  (function (SourceType) {\n    /**\n     * Specifies the type of `StringValue`.\n     * @private\n     */\n    SourceType[SourceType[\"StringValue\"] = 0] = \"StringValue\";\n    /**\n     * Specifies the type of `ByteBuffer`.\n     * @private\n     */\n\n    SourceType[SourceType[\"ByteBuffer\"] = 1] = \"ByteBuffer\";\n  })(SourceType || (SourceType = {}));\n})(InternalEnum || (InternalEnum = {}));\n\nvar PdfString =\n/** @class */\nfunction () {\n  function PdfString(value) {\n    /**\n     * Value indicating whether the string was converted to hex.\n     * @default false\n     * @private\n     */\n    this.bHex = false;\n    /**\n     * Internal variable to store the `position`.\n     * @default -1\n     * @private\n     */\n\n    this.position1 = -1;\n    /**\n     * Internal variable to hold `cloned object`.\n     * @default null\n     * @private\n     */\n\n    this.clonedObject1 = null;\n    /**\n     * `Shows` if the data of the stream was decrypted.\n     * @default false\n     * @private\n     */\n\n    this.bDecrypted = false;\n    /**\n     * Shows if the data of the stream `was decrypted`.\n     * @default false\n     * @private\n     */\n\n    this.isParentDecrypted = false;\n    /**\n     * Gets a value indicating whether the object is `packed or not`.\n     * @default false\n     * @private\n     */\n\n    this.isPacked = false;\n    /**\n     * @hidden\n     * @private\n     */\n\n    this.isFormField = false;\n    /**\n     * @hidden\n     * @private\n     */\n\n    this.isColorSpace = false;\n    /**\n     * @hidden\n     * @private\n     */\n\n    this.isHexString = true;\n\n    if (typeof value === 'undefined') {\n      this.bHex = false;\n    } else {\n      if (!(value.length > 0 && value[0] === '0xfeff')) {\n        this.stringValue = value;\n        this.data = [];\n\n        for (var i = 0; i < value.length; ++i) {\n          this.data.push(value.charCodeAt(i));\n        }\n      }\n    }\n  }\n\n  Object.defineProperty(PdfString.prototype, \"hex\", {\n    //Property\n\n    /**\n     * Gets a value indicating whether string is in `hex`.\n     * @private\n     */\n    get: function () {\n      return this.bHex;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfString.prototype, \"value\", {\n    /**\n     * Gets or sets string `value` of the object.\n     * @private\n     */\n    get: function () {\n      return this.stringValue;\n    },\n    set: function (value) {\n      this.stringValue = value;\n      this.data = null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfString.prototype, \"status\", {\n    /**\n     * Gets or sets the `Status` of the specified object.\n     * @private\n     */\n    get: function () {\n      return this.status1;\n    },\n    set: function (value) {\n      this.status1 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfString.prototype, \"isSaving\", {\n    /**\n     * Gets or sets a value indicating whether this document `is saving` or not.\n     * @private\n     */\n    get: function () {\n      return this.isSaving1;\n    },\n    set: function (value) {\n      this.isSaving1 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfString.prototype, \"objectCollectionIndex\", {\n    /**\n     * Gets or sets the `index` value of the specified object.\n     * @private\n     */\n    get: function () {\n      return this.index1;\n    },\n    set: function (value) {\n      this.index1 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfString.prototype, \"clonedObject\", {\n    /**\n     * Returns `cloned object`.\n     * @private\n     */\n    get: function () {\n      return this.clonedObject1;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfString.prototype, \"position\", {\n    /**\n     * Gets or sets the `position` of the object.\n     * @private\n     */\n    get: function () {\n      return this.position1;\n    },\n    set: function (value) {\n      this.position1 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfString.prototype, \"CrossTable\", {\n    /**\n     * Returns `PdfCrossTable` associated with the object.\n     * @private\n     */\n    get: function () {\n      return this.crossTable;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfString.prototype, \"converted\", {\n    /**\n     * Gets a value indicating whether to check if the value has unicode characters.\n     * @private\n     */\n    get: function () {\n      return this.bConverted;\n    },\n\n    /**\n     * sets a value indicating whether to check if the value has unicode characters.\n     * @private\n     */\n    set: function (value) {\n      this.bConverted = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfString.prototype, \"encode\", {\n    /**\n     * Gets value indicating whether we should convert data to Unicode.\n     */\n    get: function () {\n      return this.bForceEncoding;\n    },\n    set: function (value) {\n      this.bForceEncoding = value;\n    },\n    enumerable: true,\n    configurable: true\n  }); //Methods\n\n  /**\n   * Converts `bytes to string using hex format` for representing string.\n   * @private\n   */\n\n  PdfString.bytesToHex = function (bytes) {\n    if (bytes == null) {\n      return '';\n    }\n\n    var builder = '';\n    return builder;\n  };\n  /**\n   * `Saves` the object using the specified writer.\n   * @private\n   */\n\n\n  PdfString.prototype.save = function (writer) {\n    if (writer === null) {\n      throw new Error('ArgumentNullException : writer');\n    }\n\n    if (this.encode !== undefined && this.encode === InternalEnum.ForceEncoding.Ascii) {\n      writer.write(this.pdfEncode());\n    } else {\n      writer.write(PdfString.stringMark[0] + this.value + PdfString.stringMark[1]);\n    }\n  };\n\n  PdfString.prototype.pdfEncode = function () {\n    var result = '';\n\n    if (this.encode !== undefined && this.encode === InternalEnum.ForceEncoding.Ascii) {\n      var data = this.escapeSymbols(this.value);\n\n      for (var i = 0; i < data.length; i++) {\n        result += String.fromCharCode(data[i]);\n      }\n\n      result = PdfString.stringMark[0] + result + PdfString.stringMark[1];\n    } else {\n      result = this.value;\n    }\n\n    return result;\n  };\n\n  PdfString.prototype.escapeSymbols = function (value) {\n    var data = [];\n\n    for (var i = 0; i < value.length; i++) {\n      var currentData = value.charCodeAt(i);\n\n      switch (currentData) {\n        case 40:\n        case 41:\n          data.push(92);\n          data.push(currentData);\n          break;\n\n        case 13:\n          data.push(92);\n          data.push(114);\n          break;\n\n        case 92:\n          data.push(92);\n          data.push(currentData);\n          break;\n\n        default:\n          data.push(currentData);\n          break;\n      }\n    }\n\n    return data;\n  };\n  /**\n   * Creates a `copy of PdfString`.\n   * @private\n   */\n\n\n  PdfString.prototype.clone = function (crossTable) {\n    if (this.clonedObject1 !== null && this.clonedObject1.CrossTable === crossTable) {\n      return this.clonedObject1;\n    } else {\n      this.clonedObject1 = null;\n    }\n\n    var newString = new PdfString(this.stringValue);\n    newString.bHex = this.bHex;\n    newString.crossTable = crossTable;\n    newString.isColorSpace = this.isColorSpace;\n    this.clonedObject1 = newString;\n    return newString;\n  };\n  /**\n   * Converts string to array of unicode symbols.\n   */\n\n\n  PdfString.toUnicodeArray = function (value, bAddPrefix) {\n    if (value == null) {\n      throw new Error('Argument Null Exception : value');\n    }\n\n    var startIndex = 0;\n    var output = [];\n\n    for (var i = 0; i < value.length; i++) {\n      var code = value.charCodeAt(i);\n      output.push(code / 256 >>> 0);\n      output.push(code & 0xff);\n    }\n\n    return output;\n  };\n  /**\n   * Converts byte data to string.\n   */\n\n\n  PdfString.byteToString = function (data) {\n    if (data == null) {\n      throw new Error('Argument Null Exception : stream');\n    }\n\n    var result = '';\n\n    for (var i = 0; i < data.length; ++i) {\n      result += String.fromCharCode(data[i]);\n    }\n\n    return result;\n  }; //constants = ;\n\n  /**\n   * `General markers` for string.\n   * @private\n   */\n\n\n  PdfString.stringMark = '()';\n  /**\n   * `Hex markers` for string.\n   * @private\n   */\n\n  PdfString.hexStringMark = '<>';\n  /**\n   * Format of password data.\n   * @private\n   */\n\n  PdfString.hexFormatPattern = '{0:X2}';\n  return PdfString;\n}();\n\nexport { PdfString };","map":null,"metadata":{},"sourceType":"module"}