{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Component, EventHandler, Property, Event, Complex, Collection, isBlazor } from '@syncfusion/ej2-base';\nimport { L10n, Internationalization } from '@syncfusion/ej2-base';\nimport { NotifyPropertyChanges, ChildProperty } from '@syncfusion/ej2-base';\nimport { attributes, addClass, removeClass, setStyleAttribute, detach, closest } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined, formatUnit, Browser, SanitizeHtmlHelper } from '@syncfusion/ej2-base';\nimport { Tooltip, getZindexPartial } from '@syncfusion/ej2-popups';\n/**\n * Configures the ticks data of the Slider.\n */\n\nvar TicksData =\n/** @class */\nfunction (_super) {\n  __extends(TicksData, _super);\n\n  function TicksData() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property('None')], TicksData.prototype, \"placement\", void 0);\n\n  __decorate([Property(10)], TicksData.prototype, \"largeStep\", void 0);\n\n  __decorate([Property(1)], TicksData.prototype, \"smallStep\", void 0);\n\n  __decorate([Property(false)], TicksData.prototype, \"showSmallTicks\", void 0);\n\n  __decorate([Property(null)], TicksData.prototype, \"format\", void 0);\n\n  return TicksData;\n}(ChildProperty);\n\nexport { TicksData };\n/**\n * It illustrates the color track data in slider.\n * {% codeBlock src='slider/colorrange/index.md' %}{% endcodeBlock %}\n */\n\nvar ColorRangeData =\n/** @class */\nfunction (_super) {\n  __extends(ColorRangeData, _super);\n\n  function ColorRangeData() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property(null)], ColorRangeData.prototype, \"color\", void 0);\n\n  __decorate([Property(null)], ColorRangeData.prototype, \"start\", void 0);\n\n  __decorate([Property(null)], ColorRangeData.prototype, \"end\", void 0);\n\n  return ColorRangeData;\n}(ChildProperty);\n\nexport { ColorRangeData };\n/**\n * It illustrates the limit data in slider.\n * {% codeBlock src='slider/limits/index.md' %}{% endcodeBlock %}\n */\n\nvar LimitData =\n/** @class */\nfunction (_super) {\n  __extends(LimitData, _super);\n\n  function LimitData() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property(false)], LimitData.prototype, \"enabled\", void 0);\n\n  __decorate([Property(null)], LimitData.prototype, \"minStart\", void 0);\n\n  __decorate([Property(null)], LimitData.prototype, \"minEnd\", void 0);\n\n  __decorate([Property(null)], LimitData.prototype, \"maxStart\", void 0);\n\n  __decorate([Property(null)], LimitData.prototype, \"maxEnd\", void 0);\n\n  __decorate([Property(false)], LimitData.prototype, \"startHandleFixed\", void 0);\n\n  __decorate([Property(false)], LimitData.prototype, \"endHandleFixed\", void 0);\n\n  return LimitData;\n}(ChildProperty);\n\nexport { LimitData };\n/**\n * It illustrates the tooltip data in slider.\n */\n\nvar TooltipData =\n/** @class */\nfunction (_super) {\n  __extends(TooltipData, _super);\n\n  function TooltipData() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property('')], TooltipData.prototype, \"cssClass\", void 0);\n\n  __decorate([Property('Before')], TooltipData.prototype, \"placement\", void 0);\n\n  __decorate([Property('Focus')], TooltipData.prototype, \"showOn\", void 0);\n\n  __decorate([Property(false)], TooltipData.prototype, \"isVisible\", void 0);\n\n  __decorate([Property(null)], TooltipData.prototype, \"format\", void 0);\n\n  return TooltipData;\n}(ChildProperty);\n\nexport { TooltipData };\nvar bootstrapTooltipOffset = 6;\nvar bootstrap4TooltipOffset = 3;\nvar classNames = {\n  root: 'e-slider',\n  rtl: 'e-rtl',\n  sliderHiddenInput: 'e-slider-input',\n  controlWrapper: 'e-control-wrapper',\n  sliderHandle: 'e-handle',\n  rangeBar: 'e-range',\n  sliderButton: 'e-slider-button',\n  firstButton: 'e-first-button',\n  secondButton: 'e-second-button',\n  scale: 'e-scale',\n  tick: 'e-tick',\n  large: 'e-large',\n  tickValue: 'e-tick-value',\n  sliderTooltip: 'e-slider-tooltip',\n  sliderHover: 'e-slider-hover',\n  sliderFirstHandle: 'e-handle-first',\n  sliderSecondHandle: 'e-handle-second',\n  sliderDisabled: 'e-disabled',\n  sliderContainer: 'e-slider-container',\n  horizontalTooltipBefore: 'e-slider-horizontal-before',\n  horizontalTooltipAfter: 'e-slider-horizontal-after',\n  verticalTooltipBefore: 'e-slider-vertical-before',\n  verticalTooltipAfter: 'e-slider-vertical-after',\n  materialTooltip: 'e-material-tooltip',\n  materialTooltipOpen: 'e-material-tooltip-open',\n  materialTooltipActive: 'e-tooltip-active',\n  materialSlider: 'e-material-slider',\n  sliderTrack: 'e-slider-track',\n  sliderHorizantalColor: 'e-slider-horizantal-color',\n  sliderVerticalColor: 'e-slider-vertical-color',\n  sliderHandleFocused: 'e-handle-focused',\n  verticalSlider: 'e-vertical',\n  horizontalSlider: 'e-horizontal',\n  sliderHandleStart: 'e-handle-start',\n  sliderTooltipStart: 'e-material-tooltip-start',\n  sliderTabHandle: 'e-tab-handle',\n  sliderButtonIcon: 'e-button-icon',\n  sliderSmallSize: 'e-small-size',\n  sliderTickPosition: 'e-tick-pos',\n  sliderFirstTick: 'e-first-tick',\n  sliderLastTick: 'e-last-tick',\n  sliderButtonClass: 'e-slider-btn',\n  sliderTooltipWrapper: 'e-tooltip-wrap',\n  sliderTabTrack: 'e-tab-track',\n  sliderTabRange: 'e-tab-range',\n  sliderActiveHandle: 'e-handle-active',\n  sliderMaterialHandle: 'e-material-handle',\n  sliderMaterialRange: 'e-material-range',\n  sliderMaterialDefault: 'e-material-default',\n  materialTooltipShow: 'e-material-tooltip-show',\n  materialTooltipHide: 'e-material-tooltip-hide',\n  readonly: 'e-read-only',\n  limits: 'e-limits',\n  limitBarDefault: 'e-limit-bar',\n  limitBarFirst: 'e-limit-first',\n  limitBarSecond: 'e-limit-second',\n  dragHorizontal: 'e-drag-horizontal',\n  dragVertical: 'e-drag-vertical'\n};\n/**\n * The Slider component allows the user to select a value or range\n * of values in-between a min and max range, by dragging the handle over the slider bar.\n * ```html\n * <div id='slider'></div>\n * ```\n * ```typescript\n * <script>\n *   var sliderObj = new Slider({ value: 10 });\n *   sliderObj.appendTo('#slider');\n * </script>\n * ```\n */\n\nvar Slider =\n/** @class */\nfunction (_super) {\n  __extends(Slider, _super);\n\n  function Slider(options, element) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.horDir = 'left';\n    _this.verDir = 'bottom';\n    _this.transition = {\n      handle: 'left .4s cubic-bezier(.25, .8, .25, 1), right .4s cubic-bezier(.25, .8, .25, 1), ' + 'top .4s cubic-bezier(.25, .8, .25, 1) , bottom .4s cubic-bezier(.25, .8, .25, 1)',\n      rangeBar: 'all .4s cubic-bezier(.25, .8, .25, 1)'\n    };\n    _this.transitionOnMaterialTooltip = {\n      handle: 'left 1ms ease-out, right 1ms ease-out, bottom 1ms ease-out, top 1ms ease-out',\n      rangeBar: 'left 1ms ease-out, right 1ms ease-out, bottom 1ms ease-out, width 1ms ease-out, height 1ms ease-out'\n    };\n    _this.scaleTransform = 'transform .4s cubic-bezier(.25, .8, .25, 1)';\n    _this.customAriaText = null;\n    _this.drag = true;\n    return _this;\n  }\n\n  Slider.prototype.preRender = function () {\n    var localeText = {\n      incrementTitle: 'Increase',\n      decrementTitle: 'Decrease'\n    };\n    this.l10n = new L10n('slider', localeText, this.locale);\n    this.isElementFocused = false;\n    this.tickElementCollection = [];\n    this.tooltipFormatInfo = {};\n    this.ticksFormatInfo = {};\n    this.initCultureInfo();\n    this.initCultureFunc();\n    this.formChecker();\n  };\n\n  Slider.prototype.formChecker = function () {\n    var formElement = closest(this.element, 'form');\n\n    if (formElement) {\n      this.isForm = true; // this condition needs to be checked, if the slider is going to be refreshed by `refresh()`\n      // then we need to revert the slider `value` back to `formResetValue` to preserve the initial value\n\n      if (!isNullOrUndefined(this.formResetValue)) {\n        this.setProperties({\n          'value': this.formResetValue\n        }, true);\n      }\n\n      this.formResetValue = this.value;\n\n      if (this.type === 'Range' && (isNullOrUndefined(this.formResetValue) || typeof this.formResetValue !== 'object')) {\n        this.formResetValue = [parseFloat(formatUnit(this.min)), parseFloat(formatUnit(this.max))];\n      } else if (isNullOrUndefined(this.formResetValue)) {\n        this.formResetValue = parseFloat(formatUnit(this.min));\n      }\n\n      this.formElement = formElement;\n    } else {\n      this.isForm = false;\n    }\n  };\n\n  Slider.prototype.initCultureFunc = function () {\n    this.internationalization = new Internationalization(this.locale);\n  };\n\n  Slider.prototype.initCultureInfo = function () {\n    this.tooltipFormatInfo.format = !isNullOrUndefined(this.tooltip.format) ? this.tooltip.format : null;\n    this.ticksFormatInfo.format = !isNullOrUndefined(this.ticks.format) ? this.ticks.format : null;\n  };\n\n  Slider.prototype.formatString = function (value, formatInfo) {\n    var formatValue = null;\n    var formatString = null;\n\n    if (value || value === 0) {\n      formatValue = this.formatNumber(value);\n      var numberOfDecimals = this.numberOfDecimals(value);\n      formatString = this.internationalization.getNumberFormat(formatInfo)(this.makeRoundNumber(value, numberOfDecimals));\n    }\n\n    return {\n      elementVal: formatValue,\n      formatString: formatString\n    };\n  };\n\n  ;\n\n  Slider.prototype.formatNumber = function (value) {\n    var numberOfDecimals = this.numberOfDecimals(value);\n    return this.internationalization.getNumberFormat({\n      maximumFractionDigits: numberOfDecimals,\n      minimumFractionDigits: numberOfDecimals,\n      useGrouping: false\n    })(value);\n  };\n\n  ;\n\n  Slider.prototype.numberOfDecimals = function (value) {\n    var decimalPart = value.toString().split('.')[1];\n    var numberOfDecimals = !decimalPart || !decimalPart.length ? 0 : decimalPart.length;\n    return numberOfDecimals;\n  };\n\n  Slider.prototype.makeRoundNumber = function (value, precision) {\n    var decimals = precision || 0;\n    return Number(value.toFixed(decimals));\n  };\n\n  ;\n\n  Slider.prototype.fractionalToInteger = function (value) {\n    value = this.numberOfDecimals(value) === 0 ? Number(value).toFixed(this.noOfDecimals) : value;\n    var tens = 1;\n\n    for (var i = 0; i < this.noOfDecimals; i++) {\n      tens *= 10;\n    }\n\n    value = Number((value * tens).toFixed(0));\n    return value;\n  };\n  /**\n   * To Initialize the control rendering\n   * @private\n   */\n\n\n  Slider.prototype.render = function () {\n    if (!isBlazor() || !this.isServerRendered) {\n      this.initialize();\n    }\n\n    this.initRender();\n    this.wireEvents();\n    this.setZindex();\n    this.renderComplete();\n  };\n\n  Slider.prototype.initialize = function () {\n    addClass([this.element], classNames.root);\n    this.setCSSClass();\n  };\n\n  Slider.prototype.setElementWidth = function (width) {\n    if (!isNullOrUndefined(width)) {\n      if (typeof width === 'number') {\n        this.sliderContainer.style.width = formatUnit(width);\n      } else if (typeof width === 'string') {\n        this.sliderContainer.style.width = width.match(/px|%|em/) ? width : formatUnit(width);\n      }\n    }\n  };\n\n  Slider.prototype.setCSSClass = function (oldCSSClass) {\n    if (oldCSSClass) {\n      removeClass([this.element], oldCSSClass.split(' '));\n    }\n\n    if (this.cssClass) {\n      addClass([this.element], this.cssClass.split(' '));\n    }\n  };\n\n  Slider.prototype.setEnabled = function () {\n    if (!this.enabled) {\n      addClass([this.sliderContainer], [classNames.sliderDisabled]);\n\n      if (this.tooltip.isVisible && this.tooltipElement && this.tooltip.showOn === 'Always') {\n        this.tooltipElement.classList.add(classNames.sliderDisabled);\n      }\n\n      this.unwireEvents();\n    } else {\n      removeClass([this.sliderContainer], [classNames.sliderDisabled]);\n\n      if (this.tooltip.isVisible && this.tooltipElement && this.tooltip.showOn === 'Always') {\n        this.tooltipElement.classList.remove(classNames.sliderDisabled);\n      }\n\n      this.wireEvents();\n    }\n  };\n\n  Slider.prototype.getTheme = function (container) {\n    var theme = window.getComputedStyle(container, ':after').getPropertyValue('content');\n    return theme.replace(/['\"]+/g, '');\n  };\n  /**\n   * Initialize the rendering\n   * @private\n   */\n\n\n  Slider.prototype.initRender = function () {\n    if (isBlazor() && this.isServerRendered) {\n      this.sliderContainer = this.element.parentElement;\n      this.sliderTrack = this.element.querySelector('.e-slider-track');\n      this.hiddenInput = this.element.parentElement.querySelector('.e-slider-input');\n    } else {\n      this.sliderContainer = this.createElement('div', {\n        className: classNames.sliderContainer + ' ' + classNames.controlWrapper\n      });\n      this.element.parentNode.insertBefore(this.sliderContainer, this.element);\n      this.sliderContainer.appendChild(this.element);\n      this.sliderTrack = this.createElement('div', {\n        className: classNames.sliderTrack\n      });\n      this.element.appendChild(this.sliderTrack);\n    }\n\n    this.setElementWidth(this.width);\n    this.element.tabIndex = -1;\n    this.getThemeInitialization();\n    this.setHandler();\n    this.createRangeBar();\n\n    if (this.limits.enabled) {\n      this.createLimitBar();\n    }\n\n    if (!isBlazor() || !this.isServerRendered) {\n      this.setOrientClass();\n      this.hiddenInput = this.createElement('input', {\n        attrs: {\n          type: 'hidden',\n          value: isNullOrUndefined(this.value) ? this.min.toString() : this.value.toString(),\n          name: this.element.getAttribute('name') || this.element.getAttribute('id') || '_' + (Math.random() * 1000).toFixed(0) + 'slider',\n          class: classNames.sliderHiddenInput\n        }\n      });\n      this.hiddenInput.tabIndex = -1;\n      this.sliderContainer.appendChild(this.hiddenInput);\n    }\n\n    if (this.showButtons) {\n      this.setButtons();\n    }\n\n    this.setEnableRTL();\n\n    if (this.type === 'Range') {\n      this.rangeValueUpdate();\n    } else {\n      this.value = isNullOrUndefined(this.value) ? parseFloat(formatUnit(this.min.toString())) : this.value;\n    }\n\n    this.previousVal = this.type !== 'Range' ? this.checkHandleValue(parseFloat(formatUnit(this.value.toString()))) : [this.checkHandleValue(parseFloat(formatUnit(this.value[0].toString()))), this.checkHandleValue(parseFloat(formatUnit(this.value[1].toString())))];\n    this.previousChanged = this.previousVal;\n\n    if (!isNullOrUndefined(this.element.hasAttribute('name'))) {\n      this.element.removeAttribute('name');\n    }\n\n    this.setValue();\n\n    if (this.limits.enabled) {\n      this.setLimitBar();\n    }\n\n    if (this.ticks.placement !== 'None') {\n      this.renderScale();\n    }\n\n    if (this.tooltip.isVisible) {\n      this.renderTooltip();\n    }\n\n    if (!isBlazor() || !this.isServerRendered) {\n      if (!this.enabled) {\n        addClass([this.sliderContainer], [classNames.sliderDisabled]);\n      } else {\n        removeClass([this.sliderContainer], [classNames.sliderDisabled]);\n      }\n\n      if (this.readonly) {\n        addClass([this.sliderContainer], [classNames.readonly]);\n      } else {\n        removeClass([this.sliderContainer], [classNames.readonly]);\n      }\n    }\n  };\n\n  Slider.prototype.getThemeInitialization = function () {\n    this.isMaterial = this.getTheme(this.sliderContainer) === 'material' || this.getTheme(this.sliderContainer) === 'material-dark';\n    this.isBootstrap = this.getTheme(this.sliderContainer) === 'bootstrap' || this.getTheme(this.sliderContainer) === 'bootstrap-dark';\n    this.isBootstrap4 = this.getTheme(this.sliderContainer) === 'bootstrap4';\n    this.isMaterialTooltip = this.isMaterial && this.type !== 'Range' && this.tooltip.isVisible;\n  };\n\n  Slider.prototype.createRangeBar = function () {\n    if (this.type !== 'Default') {\n      this.rangeBar = this.createElement('div', {\n        attrs: {\n          class: classNames.rangeBar\n        }\n      });\n      this.element.appendChild(this.rangeBar);\n\n      if (this.drag && this.type === 'Range') {\n        if (this.orientation === 'Horizontal') {\n          this.rangeBar.classList.add(classNames.dragHorizontal);\n        } else {\n          this.rangeBar.classList.add(classNames.dragVertical);\n        }\n      }\n    }\n  };\n\n  Slider.prototype.createLimitBar = function () {\n    if (isBlazor() && this.isServerRendered) {\n      this.limitBarFirst = this.element.querySelectorAll('.e-limits')[0];\n\n      if (this.type === 'Range') {\n        this.limitBarSecond = this.element.querySelectorAll('.e-limit-second')[0];\n      }\n    } else {\n      var firstElementClassName = this.type !== 'Range' ? classNames.limitBarDefault : classNames.limitBarFirst;\n      firstElementClassName += ' ' + classNames.limits;\n      this.limitBarFirst = this.createElement('div', {\n        attrs: {\n          class: firstElementClassName\n        }\n      });\n      this.element.appendChild(this.limitBarFirst);\n\n      if (this.type === 'Range') {\n        this.limitBarSecond = this.createElement('div', {\n          attrs: {\n            class: classNames.limitBarSecond + ' ' + classNames.limits\n          }\n        });\n        this.element.appendChild(this.limitBarSecond);\n      }\n    }\n  };\n\n  Slider.prototype.setOrientClass = function () {\n    if (this.orientation !== 'Vertical') {\n      this.sliderContainer.classList.remove(classNames.verticalSlider);\n      this.sliderContainer.classList.add(classNames.horizontalSlider);\n      this.firstHandle.setAttribute('aria-orientation', 'horizontal');\n\n      if (this.type === 'Range') {\n        this.secondHandle.setAttribute('aria-orientation', 'horizontal');\n      }\n    } else {\n      this.sliderContainer.classList.remove(classNames.horizontalSlider);\n      this.sliderContainer.classList.add(classNames.verticalSlider);\n      this.firstHandle.setAttribute('aria-orientation', 'vertical');\n\n      if (this.type === 'Range') {\n        this.secondHandle.setAttribute('aria-orientation', 'vertical');\n      }\n    }\n  };\n\n  Slider.prototype.setAriaAttributes = function (element) {\n    var _this = this;\n\n    var min = this.min;\n    var max = this.max;\n\n    if (!isNullOrUndefined(this.customValues) && this.customValues.length > 0) {\n      min = this.customValues[0];\n      max = this.customValues[this.customValues.length - 1];\n    }\n\n    if (this.type !== 'Range') {\n      attributes(element, {\n        'aria-valuemin': min.toString(),\n        'aria-valuemax': max.toString()\n      });\n    } else {\n      var range = !isNullOrUndefined(this.customValues) && this.customValues.length > 0 ? [[min.toString(), this.customValues[this.value[1]].toString()], [this.customValues[this.value[0]].toString(), max.toString()]] : [[min.toString(), this.value[1].toString()], [this.value[0].toString(), max.toString()]];\n      range.forEach(function (range, index) {\n        var element = index === 0 ? _this.firstHandle : _this.secondHandle;\n\n        if (element) {\n          attributes(element, {\n            'aria-valuemin': range[0],\n            'aria-valuemax': range[1]\n          });\n        }\n      });\n    }\n  };\n\n  Slider.prototype.createSecondHandle = function () {\n    if (isBlazor() && this.isServerRendered) {\n      this.secondHandle = this.element.querySelector('.e-handle-second');\n    } else {\n      this.secondHandle = this.createElement('div', {\n        attrs: {\n          class: classNames.sliderHandle,\n          'role': 'slider',\n          tabIndex: '0'\n        }\n      });\n      this.secondHandle.classList.add(classNames.sliderSecondHandle);\n      this.element.appendChild(this.secondHandle);\n    }\n  };\n\n  Slider.prototype.createFirstHandle = function () {\n    if (isBlazor() && this.isServerRendered) {\n      this.firstHandle = this.element.querySelector('.e-handle-first');\n    } else {\n      this.firstHandle = this.createElement('div', {\n        attrs: {\n          class: classNames.sliderHandle,\n          'role': 'slider',\n          tabIndex: '0'\n        }\n      });\n      this.firstHandle.classList.add(classNames.sliderFirstHandle);\n      this.element.appendChild(this.firstHandle);\n    }\n\n    if (this.isMaterialTooltip) {\n      this.materialHandle = this.createElement('div', {\n        attrs: {\n          class: classNames.sliderHandle + ' ' + classNames.sliderMaterialHandle\n        }\n      });\n      this.element.appendChild(this.materialHandle);\n    }\n  };\n\n  Slider.prototype.wireFirstHandleEvt = function (destroy) {\n    if (!destroy) {\n      EventHandler.add(this.firstHandle, 'mousedown touchstart', this.handleFocus, this);\n      EventHandler.add(this.firstHandle, 'transitionend', this.transitionEnd, this);\n      EventHandler.add(this.firstHandle, 'mouseenter touchenter', this.handleOver, this);\n      EventHandler.add(this.firstHandle, 'mouseleave touchend', this.handleLeave, this);\n    } else {\n      EventHandler.remove(this.firstHandle, 'mousedown touchstart', this.handleFocus);\n      EventHandler.remove(this.firstHandle, 'transitionend', this.transitionEnd);\n      EventHandler.remove(this.firstHandle, 'mouseenter touchenter', this.handleOver);\n      EventHandler.remove(this.firstHandle, 'mouseleave touchend', this.handleLeave);\n    }\n  };\n\n  Slider.prototype.wireSecondHandleEvt = function (destroy) {\n    if (!destroy) {\n      EventHandler.add(this.secondHandle, 'mousedown touchstart', this.handleFocus, this);\n      EventHandler.add(this.secondHandle, 'transitionend', this.transitionEnd, this);\n      EventHandler.add(this.secondHandle, 'mouseenter touchenter', this.handleOver, this);\n      EventHandler.add(this.secondHandle, 'mouseleave touchend', this.handleLeave, this);\n    } else {\n      EventHandler.remove(this.secondHandle, 'mousedown touchstart', this.handleFocus);\n      EventHandler.remove(this.secondHandle, 'transitionend', this.transitionEnd);\n      EventHandler.remove(this.secondHandle, 'mouseenter touchenter', this.handleOver);\n      EventHandler.remove(this.secondHandle, 'mouseleave touchend', this.handleLeave);\n    }\n  };\n\n  Slider.prototype.handleStart = function () {\n    if (this.type !== 'Range') {\n      this.firstHandle.classList[this.handlePos1 === 0 ? 'add' : 'remove'](classNames.sliderHandleStart);\n\n      if (this.isMaterialTooltip) {\n        this.materialHandle.classList[this.handlePos1 === 0 ? 'add' : 'remove'](classNames.sliderHandleStart);\n\n        if (this.tooltipElement) {\n          this.tooltipElement.classList[this.handlePos1 === 0 ? 'add' : 'remove'](classNames.sliderTooltipStart);\n        }\n      }\n    }\n  };\n\n  Slider.prototype.transitionEnd = function (e) {\n    if (e.propertyName !== 'transform') {\n      this.handleStart();\n      this.getHandle().style.transition = 'none';\n\n      if (this.type !== 'Default') {\n        this.rangeBar.style.transition = 'none';\n      }\n\n      if (this.isMaterial && this.tooltip.isVisible && this.type === 'Default') {\n        this.tooltipElement.style.transition = this.transition.handle;\n      }\n\n      this.tooltipToggle(this.getHandle());\n      this.closeTooltip();\n    }\n  };\n\n  Slider.prototype.handleFocusOut = function () {\n    if (this.firstHandle.classList.contains(classNames.sliderHandleFocused)) {\n      this.firstHandle.classList.remove(classNames.sliderHandleFocused);\n    }\n\n    if (this.type === 'Range') {\n      if (this.secondHandle.classList.contains(classNames.sliderHandleFocused)) {\n        this.secondHandle.classList.remove(classNames.sliderHandleFocused);\n      }\n    }\n  };\n\n  Slider.prototype.handleFocus = function (e) {\n    this.focusSliderElement();\n    this.sliderBarClick(e);\n\n    if (e.currentTarget === this.firstHandle) {\n      this.firstHandle.classList.add(classNames.sliderHandleFocused);\n    } else {\n      this.secondHandle.classList.add(classNames.sliderHandleFocused);\n    }\n\n    EventHandler.add(document, 'mousemove touchmove', this.sliderBarMove, this);\n    EventHandler.add(document, 'mouseup touchend', this.sliderBarUp, this);\n  };\n\n  Slider.prototype.handleOver = function (e) {\n    if (this.tooltip.isVisible && this.tooltip.showOn === 'Hover') {\n      this.tooltipToggle(e.currentTarget);\n    }\n  };\n\n  Slider.prototype.handleLeave = function (e) {\n    if (this.tooltip.isVisible && this.tooltip.showOn === 'Hover' && !e.currentTarget.classList.contains(classNames.sliderHandleFocused) && !e.currentTarget.classList.contains(classNames.sliderTabHandle)) {\n      this.closeTooltip();\n    }\n  };\n\n  Slider.prototype.setHandler = function () {\n    if (this.min > this.max) {\n      this.min = this.max;\n    }\n\n    this.createFirstHandle();\n\n    if (this.type === 'Range') {\n      this.createSecondHandle();\n    }\n  };\n\n  Slider.prototype.setEnableRTL = function () {\n    if (!isBlazor() || !this.isServerRendered) {\n      this.enableRtl && this.orientation !== 'Vertical' ? addClass([this.sliderContainer], classNames.rtl) : removeClass([this.sliderContainer], classNames.rtl);\n      var preDir = this.orientation !== 'Vertical' ? this.horDir : this.verDir;\n\n      if (this.enableRtl) {\n        this.horDir = 'right';\n        this.verDir = 'bottom';\n      } else {\n        this.horDir = 'left';\n        this.verDir = 'bottom';\n      }\n\n      var currDir = this.orientation !== 'Vertical' ? this.horDir : this.verDir;\n\n      if (preDir !== currDir) {\n        if (this.orientation === 'Horizontal') {\n          setStyleAttribute(this.firstHandle, {\n            'right': '',\n            'left': 'auto'\n          });\n\n          if (this.type === 'Range') {\n            setStyleAttribute(this.secondHandle, {\n              'top': '',\n              'left': 'auto'\n            });\n          }\n        }\n      }\n    }\n\n    this.setBarColor();\n  };\n\n  Slider.prototype.tooltipValue = function () {\n    var _this = this;\n\n    var text;\n    var args = {\n      value: this.value,\n      text: ''\n    };\n\n    if (isBlazor() && this.isServerRendered) {\n      args.text = this.formatContent(this.tooltipFormatInfo, false);\n    } else {\n      this.setTooltipContent();\n      args.text = text = this.tooltipObj.content;\n    }\n\n    this.trigger('tooltipChange', args, function (observedArgs) {\n      _this.addTooltipClass(observedArgs.text);\n\n      if (text !== observedArgs.text) {\n        _this.customAriaText = observedArgs.text;\n        _this.tooltipObj.content = observedArgs.text;\n\n        _this.setAriaAttrValue(_this.firstHandle);\n\n        if (_this.type === 'Range') {\n          _this.setAriaAttrValue(_this.secondHandle);\n        }\n      }\n    });\n  };\n\n  Slider.prototype.setTooltipContent = function () {\n    var content;\n    content = this.formatContent(this.tooltipFormatInfo, false);\n    this.tooltipObj.content = content;\n  };\n\n  Slider.prototype.formatContent = function (formatInfo, ariaContent) {\n    var content = '';\n    var handle1 = this.handleVal1;\n    var handle2 = this.handleVal2;\n\n    if (!isNullOrUndefined(this.customValues) && this.customValues.length > 0) {\n      handle1 = this.customValues[this.handleVal1];\n      handle2 = this.customValues[this.handleVal2];\n    }\n\n    if (!ariaContent) {\n      if (this.type === 'Range') {\n        if (this.enableRtl && this.orientation !== 'Vertical') {\n          content = !isNullOrUndefined(formatInfo.format) ? this.formatString(handle2, formatInfo).formatString + ' - ' + this.formatString(handle1, formatInfo).formatString : handle2.toString() + ' - ' + handle1.toString();\n        } else {\n          content = !isNullOrUndefined(formatInfo.format) ? this.formatString(handle1, formatInfo).formatString + ' - ' + this.formatString(handle2, formatInfo).formatString : handle1.toString() + ' - ' + handle2.toString();\n        }\n      } else {\n        if (!isNullOrUndefined(handle1)) {\n          content = !isNullOrUndefined(formatInfo.format) ? this.formatString(handle1, formatInfo).formatString : handle1.toString();\n        }\n      }\n\n      return content;\n    } else {\n      if (this.type === 'Range') {\n        if (this.enableRtl && this.orientation !== 'Vertical') {\n          content = !isNullOrUndefined(this.tooltip) && !isNullOrUndefined(this.tooltip.format) ? this.formatString(handle2, formatInfo).elementVal + ' - ' + this.formatString(handle1, formatInfo).elementVal : handle2.toString() + ' - ' + handle1.toString();\n        } else {\n          content = !isNullOrUndefined(this.tooltip) && !isNullOrUndefined(this.tooltip.format) ? this.formatString(handle1, formatInfo).elementVal + ' - ' + this.formatString(handle2, formatInfo).elementVal : handle1.toString() + ' - ' + handle2.toString();\n        }\n      } else {\n        if (!isNullOrUndefined(handle1)) {\n          content = !isNullOrUndefined(this.tooltip) && !isNullOrUndefined(this.tooltip.format) ? this.formatString(handle1, formatInfo).elementVal : handle1.toString();\n        }\n      }\n\n      return content;\n    }\n  };\n\n  Slider.prototype.addTooltipClass = function (content) {\n    if (this.isMaterialTooltip) {\n      var count = content.toString().length;\n\n      if (!this.tooltipElement) {\n        var cssClass = count > 4 ? classNames.sliderMaterialRange : classNames.sliderMaterialDefault;\n        this.tooltipObj.cssClass = classNames.sliderTooltip + ' ' + cssClass;\n      } else {\n        var cssClass = count > 4 ? {\n          oldCss: classNames.sliderMaterialDefault,\n          newCss: classNames.sliderMaterialRange\n        } : {\n          oldCss: classNames.sliderMaterialRange,\n          newCss: classNames.sliderMaterialDefault\n        };\n        this.tooltipElement.classList.remove(cssClass.oldCss);\n\n        if (!this.tooltipElement.classList.contains(cssClass.newCss)) {\n          this.tooltipElement.classList.add(cssClass.newCss);\n          this.tooltipElement.style.transform = count > 4 ? 'scale(1)' : this.getTooltipTransformProperties(this.previousTooltipClass).rotate;\n        }\n      }\n    }\n  };\n\n  Slider.prototype.tooltipPlacement = function () {\n    return this.orientation === 'Horizontal' ? this.tooltip.placement === 'Before' ? 'TopCenter' : 'BottomCenter' : this.tooltip.placement === 'Before' ? 'LeftCenter' : 'RightCenter';\n  };\n\n  Slider.prototype.tooltipBeforeOpen = function (args) {\n    this.tooltipElement = args.element;\n\n    if (this.tooltip.cssClass) {\n      addClass([this.tooltipElement], this.tooltip.cssClass.split(' ').filter(function (css) {\n        return css;\n      }));\n    }\n\n    args.target.removeAttribute('aria-describedby');\n\n    if (this.isMaterialTooltip) {\n      this.tooltipElement.firstElementChild.classList.add(classNames.materialTooltipHide);\n      this.handleStart();\n      this.setTooltipTransform();\n    }\n  };\n\n  Slider.prototype.tooltipCollision = function (position) {\n    if (this.isBootstrap || this.isBootstrap4 || this.isMaterial && !this.isMaterialTooltip) {\n      var tooltipOffsetValue = this.isBootstrap4 ? bootstrap4TooltipOffset : bootstrapTooltipOffset;\n\n      switch (position) {\n        case 'TopCenter':\n          this.tooltipObj.setProperties({\n            'offsetY': -tooltipOffsetValue\n          }, false);\n          break;\n\n        case 'BottomCenter':\n          this.tooltipObj.setProperties({\n            'offsetY': tooltipOffsetValue\n          }, false);\n          break;\n\n        case 'LeftCenter':\n          this.tooltipObj.setProperties({\n            'offsetX': -tooltipOffsetValue\n          }, false);\n          break;\n\n        case 'RightCenter':\n          this.tooltipObj.setProperties({\n            'offsetX': tooltipOffsetValue\n          }, false);\n          break;\n      }\n    }\n  };\n\n  Slider.prototype.materialTooltipEventCallBack = function (event) {\n    this.sliderBarClick(event);\n    EventHandler.add(document, 'mousemove touchmove', this.sliderBarMove, this);\n    EventHandler.add(document, 'mouseup touchend', this.sliderBarUp, this);\n  };\n\n  Slider.prototype.wireMaterialTooltipEvent = function (destroy) {\n    if (this.isMaterialTooltip) {\n      if (!destroy) {\n        EventHandler.add(this.tooltipElement, 'mousedown touchstart', this.materialTooltipEventCallBack, this);\n      } else {\n        EventHandler.remove(this.tooltipElement, 'mousedown touchstart', this.materialTooltipEventCallBack);\n      }\n    }\n  };\n\n  Slider.prototype.tooltipPositionCalculation = function (position) {\n    var cssClass;\n\n    switch (position) {\n      case 'TopCenter':\n        cssClass = classNames.horizontalTooltipBefore;\n        break;\n\n      case 'BottomCenter':\n        cssClass = classNames.horizontalTooltipAfter;\n        break;\n\n      case 'LeftCenter':\n        cssClass = classNames.verticalTooltipBefore;\n        break;\n\n      case 'RightCenter':\n        cssClass = classNames.verticalTooltipAfter;\n        break;\n    }\n\n    return cssClass;\n  };\n\n  Slider.prototype.getTooltipTransformProperties = function (className) {\n    var transformProperties;\n\n    if (this.tooltipElement) {\n      var position = this.orientation === 'Horizontal' ? this.tooltipElement.clientHeight + 14 - this.tooltipElement.clientHeight / 2 : this.tooltipElement.clientWidth + 14 - this.tooltipElement.clientWidth / 2;\n      transformProperties = this.orientation === 'Horizontal' ? className === classNames.horizontalTooltipBefore ? {\n        rotate: 'rotate(45deg)',\n        translate: \"translateY(\" + position + \"px)\"\n      } : {\n        rotate: 'rotate(225deg)',\n        translate: \"translateY(\" + -position + \"px)\"\n      } : className === classNames.verticalTooltipBefore ? {\n        rotate: 'rotate(-45deg)',\n        translate: \"translateX(\" + position + \"px)\"\n      } : {\n        rotate: 'rotate(-225deg)',\n        translate: \"translateX(\" + -position + \"px)\"\n      };\n    }\n\n    return transformProperties;\n  };\n\n  Slider.prototype.openMaterialTooltip = function () {\n    var _this = this;\n\n    if (this.isMaterialTooltip) {\n      this.refreshTooltip(this.firstHandle);\n      var tooltipContentElement = this.tooltipElement.firstElementChild;\n      tooltipContentElement.classList.remove(classNames.materialTooltipHide);\n      tooltipContentElement.classList.add(classNames.materialTooltipShow);\n      this.firstHandle.style.cursor = 'default';\n      this.tooltipElement.style.transition = this.scaleTransform;\n      this.tooltipElement.classList.add(classNames.materialTooltipOpen);\n      this.materialHandle.style.transform = 'scale(0)';\n\n      if (tooltipContentElement.innerText.length > 4) {\n        this.tooltipElement.style.transform = 'scale(1)';\n      } else {\n        this.tooltipElement.style.transform = this.getTooltipTransformProperties(this.previousTooltipClass).rotate;\n      }\n\n      if (this.type === 'Default') {\n        setTimeout(function () {\n          _this.tooltipElement.style.transition = _this.transition.handle;\n        }, 2500);\n      } else {\n        setTimeout(function () {\n          _this.tooltipElement.style.transition = 'none';\n        }, 2500);\n      }\n    }\n  };\n\n  Slider.prototype.closeMaterialTooltip = function () {\n    var _this = this;\n\n    if (this.isMaterialTooltip) {\n      var tooltipContentElement = this.tooltipElement.firstElementChild;\n      this.tooltipElement.style.transition = this.scaleTransform;\n      tooltipContentElement.classList.remove(classNames.materialTooltipShow);\n      tooltipContentElement.classList.add(classNames.materialTooltipHide);\n      this.firstHandle.style.cursor = '-webkit-grab';\n      this.firstHandle.style.cursor = 'grab';\n\n      if (this.materialHandle) {\n        this.materialHandle.style.transform = 'scale(1)';\n      }\n\n      this.tooltipElement.classList.remove(classNames.materialTooltipOpen);\n      this.setTooltipTransform();\n      this.tooltipTarget = undefined;\n      setTimeout(function () {\n        _this.tooltipElement.style.transition = 'none';\n      }, 2500);\n    }\n  };\n\n  Slider.prototype.checkTooltipPosition = function (args) {\n    if (this.tooltipCollidedPosition === undefined || this.tooltipCollidedPosition !== args.collidedPosition) {\n      if (this.isMaterialTooltip) {\n        var tooltipClass = this.tooltipPositionCalculation(args.collidedPosition);\n\n        if (tooltipClass !== undefined) {\n          args.element.classList.remove(this.previousTooltipClass);\n          args.element.classList.add(tooltipClass);\n          this.previousTooltipClass = tooltipClass;\n        }\n\n        if (args.element.style.transform && args.element.classList.contains(classNames.materialTooltipOpen) && args.element.firstElementChild.innerText.length <= 4) {\n          args.element.style.transform = this.getTooltipTransformProperties(this.previousTooltipClass).rotate;\n        }\n      }\n\n      this.tooltipCollidedPosition = args.collidedPosition;\n    }\n\n    if (this.isMaterialTooltip && this.tooltipElement && this.tooltipElement.style.transform.indexOf('translate') !== -1) {\n      this.setTooltipTransform();\n    }\n  };\n\n  Slider.prototype.setTooltipTransform = function () {\n    var transformProperties = this.getTooltipTransformProperties(this.previousTooltipClass);\n\n    if (this.tooltipElement.firstElementChild.innerText.length > 4) {\n      this.tooltipElement.style.transform = transformProperties.translate + \" scale(0.01)\";\n    } else {\n      this.tooltipElement.style.transform = transformProperties.translate + \" \" + transformProperties.rotate + \" scale(0.01)\";\n    }\n  };\n\n  Slider.prototype.renderTooltip = function () {\n    this.tooltipObj = new Tooltip({\n      showTipPointer: this.isBootstrap || this.isMaterial || this.isBootstrap4,\n      cssClass: classNames.sliderTooltip,\n      height: this.isMaterial ? 30 : 'auto',\n      animation: {\n        open: {\n          effect: 'None'\n        },\n        close: {\n          effect: 'FadeOut',\n          duration: 500\n        }\n      },\n      opensOn: 'Custom',\n      beforeOpen: this.tooltipBeforeOpen.bind(this),\n      beforeCollision: this.checkTooltipPosition.bind(this),\n      beforeClose: this.tooltipBeforeClose.bind(this),\n      enableHtmlSanitizer: this.enableHtmlSanitizer\n    });\n    this.tooltipObj.appendTo(this.firstHandle);\n    this.initializeTooltipProps();\n  };\n\n  Slider.prototype.initializeTooltipProps = function () {\n    var tooltipShowOn = this.isMaterialTooltip ? 'Always' : this.tooltip.showOn === 'Auto' ? 'Hover' : this.tooltip.showOn;\n    this.setProperties({\n      tooltip: {\n        showOn: tooltipShowOn\n      }\n    }, true);\n    this.tooltipObj.position = this.tooltipPlacement();\n    this.tooltipCollision(this.tooltipObj.position);\n    [this.firstHandle, this.rangeBar, this.secondHandle].forEach(function (handle) {\n      if (!isNullOrUndefined(handle)) {\n        handle.style.transition = 'none';\n      }\n    });\n\n    if (this.isMaterialTooltip) {\n      this.sliderContainer.classList.add(classNames.materialSlider);\n\n      if (!isBlazor()) {\n        this.tooltipValue();\n      }\n\n      this.tooltipObj.animation.close.effect = 'None';\n      this.tooltipObj.open(this.firstHandle);\n    }\n  };\n\n  Slider.prototype.tooltipBeforeClose = function () {\n    this.tooltipElement = undefined;\n    this.tooltipCollidedPosition = undefined;\n  };\n\n  Slider.prototype.setButtons = function () {\n    if (isBlazor() && this.isServerRendered) {\n      this.firstBtn = this.element.parentElement.querySelector('.e-slider-button.e-first-button');\n      this.secondBtn = this.element.parentElement.querySelector('.e-slider-button.e-second-button');\n    } else {\n      this.firstBtn = this.createElement('div', {\n        className: classNames.sliderButton + ' ' + classNames.firstButton\n      });\n      this.firstBtn.appendChild(this.createElement('span', {\n        className: classNames.sliderButtonIcon\n      }));\n      this.firstBtn.tabIndex = -1;\n      this.secondBtn = this.createElement('div', {\n        className: classNames.sliderButton + ' ' + classNames.secondButton\n      });\n      this.secondBtn.appendChild(this.createElement('span', {\n        className: classNames.sliderButtonIcon\n      }));\n      this.secondBtn.tabIndex = -1;\n      this.sliderContainer.classList.add(classNames.sliderButtonClass);\n      this.sliderContainer.appendChild(this.firstBtn);\n      this.sliderContainer.appendChild(this.secondBtn);\n      this.sliderContainer.appendChild(this.element);\n      this.buttonTitle();\n    }\n  };\n\n  Slider.prototype.buttonTitle = function () {\n    var enabledRTL = this.enableRtl && this.orientation !== 'Vertical';\n    this.l10n.setLocale(this.locale);\n    var decrementTitle = this.l10n.getConstant('decrementTitle');\n    var incrementTitle = this.l10n.getConstant('incrementTitle');\n    attributes(enabledRTL ? this.secondBtn : this.firstBtn, {\n      'aria-label': decrementTitle,\n      title: decrementTitle\n    });\n    attributes(enabledRTL ? this.firstBtn : this.secondBtn, {\n      'aria-label': incrementTitle,\n      title: incrementTitle\n    });\n  };\n\n  Slider.prototype.buttonFocusOut = function () {\n    if (this.isMaterial) {\n      this.getHandle().classList.remove('e-large-thumb-size');\n    }\n  };\n\n  Slider.prototype.repeatButton = function (args) {\n    var hVal = this.handleValueUpdate();\n    var enabledRTL = this.enableRtl && this.orientation !== 'Vertical';\n    var value;\n\n    if (args.target.parentElement.classList.contains(classNames.firstButton) || args.target.classList.contains(classNames.firstButton)) {\n      enabledRTL ? value = this.add(hVal, parseFloat(this.step.toString()), true) : value = this.add(hVal, parseFloat(this.step.toString()), false);\n    } else if (args.target.parentElement.classList.contains(classNames.secondButton) || args.target.classList.contains(classNames.secondButton)) {\n      enabledRTL ? value = this.add(hVal, parseFloat(this.step.toString()), false) : value = this.add(hVal, parseFloat(this.step.toString()), true);\n    }\n\n    if (this.limits.enabled) {\n      value = this.getLimitCorrectedValues(value);\n    }\n\n    if (value >= this.min && value <= this.max) {\n      this.changeHandleValue(value);\n      this.tooltipToggle(this.getHandle());\n    }\n  };\n\n  Slider.prototype.repeatHandlerMouse = function (args) {\n    args.preventDefault();\n\n    if (args.type === 'mousedown' || args.type === 'touchstart') {\n      this.buttonClick(args);\n      this.repeatInterval = setInterval(this.repeatButton.bind(this), 180, args);\n    }\n  };\n\n  Slider.prototype.materialChange = function () {\n    if (!this.getHandle().classList.contains('e-large-thumb-size')) {\n      this.getHandle().classList.add('e-large-thumb-size');\n    }\n  };\n\n  Slider.prototype.repeatHandlerUp = function (e) {\n    this.changeEvent('changed', e);\n    this.closeTooltip();\n    clearInterval(this.repeatInterval);\n    this.getHandle().focus();\n  };\n\n  Slider.prototype.customTickCounter = function (bigNum) {\n    var tickCount = 4;\n\n    if (!isNullOrUndefined(this.customValues) && this.customValues.length > 0) {\n      if (bigNum > 4) {\n        tickCount = 3;\n      }\n\n      if (bigNum > 7) {\n        tickCount = 2;\n      }\n\n      if (bigNum > 14) {\n        tickCount = 1;\n      }\n\n      if (bigNum > 28) {\n        tickCount = 0;\n      }\n    }\n\n    return tickCount;\n  }; // tslint:disable-next-line:max-func-body-length\n\n\n  Slider.prototype.renderScale = function () {\n    var liElementPosition = 0;\n    var orien = this.orientation === 'Vertical' ? 'v' : 'h';\n    var spanText;\n    this.noOfDecimals = this.numberOfDecimals(this.step);\n\n    if (isBlazor() && this.isServerRendered) {\n      this.ul = this.element.querySelector('ul');\n    } else {\n      this.ul = this.createElement('ul', {\n        className: classNames.scale + ' ' + 'e-' + orien + '-scale ' + classNames.tick + '-' + this.ticks.placement.toLowerCase(),\n        attrs: {\n          role: 'presentation',\n          tabIndex: '-1',\n          'aria-hidden': 'true'\n        }\n      });\n    }\n\n    this.ul.style.zIndex = '-1';\n\n    if (Browser.isAndroid && orien === 'h') {\n      this.ul.classList.add(classNames.sliderTickPosition);\n    }\n\n    var smallStep = this.ticks.smallStep;\n\n    if (!this.ticks.showSmallTicks) {\n      this.ticks.largeStep > 0 ? smallStep = this.ticks.largeStep : smallStep = parseFloat(formatUnit(this.max)) - parseFloat(formatUnit(this.min));\n    } else if (smallStep <= 0) {\n      smallStep = parseFloat(formatUnit(this.step));\n    }\n\n    var min = this.fractionalToInteger(this.min);\n    var max = this.fractionalToInteger(this.max);\n    var steps = this.fractionalToInteger(smallStep);\n    var bigNum = !isNullOrUndefined(this.customValues) && this.customValues.length > 0 && this.customValues.length - 1;\n    var customStep = this.customTickCounter(bigNum);\n    var count = !isNullOrUndefined(this.customValues) && this.customValues.length > 0 ? bigNum * customStep + bigNum : Math.abs((max - min) / steps);\n\n    if (!isBlazor() || !this.isServerRendered) {\n      this.element.appendChild(this.ul);\n    }\n\n    var li;\n    var start = parseFloat(this.min.toString());\n\n    if (orien === 'v') {\n      start = parseFloat(this.max.toString());\n    }\n\n    var left = 0;\n    var islargeTick;\n    var tickWidth = 100 / count;\n\n    if (tickWidth === Infinity) {\n      tickWidth = 5;\n    }\n\n    for (var i = 0, y = !isNullOrUndefined(this.customValues) && this.customValues.length > 0 ? this.customValues.length - 1 : 0, k = 0; i <= count; i++) {\n      li = this.createElement('li', {\n        attrs: {\n          class: classNames.tick,\n          role: 'presentation',\n          tabIndex: '-1',\n          'aria-hidden': 'true'\n        }\n      });\n\n      if (!isNullOrUndefined(this.customValues) && this.customValues.length > 0) {\n        islargeTick = i % (customStep + 1) === 0;\n\n        if (islargeTick) {\n          if (orien === 'h') {\n            start = this.customValues[k];\n            k++;\n          } else {\n            start = this.customValues[y];\n            y--;\n          }\n\n          li.setAttribute('title', start.toString());\n        }\n      } else {\n        li.setAttribute('title', start.toString());\n\n        if (this.numberOfDecimals(this.max) === 0 && this.numberOfDecimals(this.min) === 0 && this.numberOfDecimals(this.step) === 0) {\n          if (orien === 'h') {\n            islargeTick = (start - parseFloat(this.min.toString())) % this.ticks.largeStep === 0 ? true : false;\n          } else {\n            islargeTick = Math.abs(start - parseFloat(this.max.toString())) % this.ticks.largeStep === 0 ? true : false;\n          }\n        } else {\n          var largestep = this.fractionalToInteger(this.ticks.largeStep);\n          var startValue = this.fractionalToInteger(start);\n\n          if (orien === 'h') {\n            islargeTick = (startValue - min) % largestep === 0 ? true : false;\n          } else {\n            islargeTick = Math.abs(startValue - parseFloat(max.toString())) % largestep === 0 ? true : false;\n          }\n        }\n      }\n\n      if (islargeTick) {\n        li.classList.add(classNames.large);\n      }\n\n      orien === 'h' ? li.style.width = tickWidth + '%' : li.style.height = tickWidth + '%';\n      var repeat = islargeTick ? this.ticks.placement === 'Both' ? 2 : 1 : 0;\n\n      if (islargeTick) {\n        for (var j = 0; j < repeat; j++) {\n          this.createTick(li, start, tickWidth);\n        }\n\n        if (isBlazor() && this.isServerRendered && isNullOrUndefined(this.customValues)) {\n          this.updateTicksValues(start, this.ul.children[liElementPosition]);\n          liElementPosition++;\n        }\n      } else if (isNullOrUndefined(this.customValues)) {\n        this.formatTicksValue(li, start);\n\n        if (isBlazor() && this.isServerRendered && isNullOrUndefined(this.customValues)) {\n          this.updateTicksValues(start, this.ul.children[liElementPosition]);\n          liElementPosition++;\n        }\n      }\n\n      if (!isBlazor() || !this.isServerRendered) {\n        this.ul.appendChild(li);\n      }\n\n      this.tickElementCollection.push(li);\n      var decimalPoints = void 0;\n\n      if (isNullOrUndefined(this.customValues)) {\n        if (this.numberOfDecimals(smallStep) > this.numberOfDecimals(start)) {\n          decimalPoints = this.numberOfDecimals(smallStep);\n        } else {\n          decimalPoints = this.numberOfDecimals(start);\n        }\n\n        if (orien === 'h') {\n          start = this.makeRoundNumber(start + smallStep, decimalPoints);\n        } else {\n          start = this.makeRoundNumber(start - smallStep, decimalPoints);\n        }\n\n        left = this.makeRoundNumber(left + smallStep, decimalPoints);\n      }\n    }\n\n    this.ticksAlignment(orien, tickWidth);\n  };\n\n  Slider.prototype.updateTicksValues = function (start, liElement) {\n    if (liElement.childElementCount > 0) {\n      for (var i = 0; i < liElement.childElementCount; i++) {\n        this.blazortTicksValue(liElement, start, liElement.children[i]);\n      }\n    } else {\n      this.blazortTicksValue(liElement, start, null);\n    }\n  };\n\n  Slider.prototype.blazortTicksValue = function (li, start, span) {\n    var _this = this;\n\n    var tickText = this.formatNumber(start);\n    var text = !isNullOrUndefined(this.ticks) && !isNullOrUndefined(this.ticks.format) ? this.formatString(start, this.ticksFormatInfo).formatString : tickText;\n    var eventArgs = {\n      value: start,\n      text: text,\n      tickElement: li\n    };\n    this.trigger('renderingTicks', eventArgs, function (observedArgs) {\n      li.setAttribute('title', observedArgs.text.toString());\n\n      if (span) {\n        if (_this.enableHtmlSanitizer) {\n          span.innerHTML = SanitizeHtmlHelper.sanitize(observedArgs.text.toString());\n        } else {\n          span.innerHTML = observedArgs.text.toString();\n        }\n      }\n    });\n  };\n\n  Slider.prototype.ticksAlignment = function (orien, tickWidth, triggerEvent) {\n    if (triggerEvent === void 0) {\n      triggerEvent = true;\n    }\n\n    this.firstChild = this.ul.firstElementChild;\n    this.lastChild = this.ul.lastElementChild;\n    this.firstChild.classList.add(classNames.sliderFirstTick);\n    this.lastChild.classList.add(classNames.sliderLastTick);\n    this.sliderContainer.classList.add(classNames.scale + '-' + this.ticks.placement.toLowerCase());\n\n    if (orien === 'h') {\n      this.firstChild.style.width = tickWidth / 2 + '%';\n      this.lastChild.style.width = tickWidth / 2 + '%';\n    } else {\n      this.firstChild.style.height = tickWidth / 2 + '%';\n      this.lastChild.style.height = tickWidth / 2 + '%';\n    }\n\n    var eventArgs = {\n      ticksWrapper: this.ul,\n      tickElements: this.tickElementCollection\n    };\n\n    if (triggerEvent) {\n      this.trigger('renderedTicks', eventArgs);\n    }\n\n    this.scaleAlignment();\n  };\n\n  Slider.prototype.createTick = function (li, start, tickWidth) {\n    var span = this.createElement('span', {\n      className: classNames.tickValue + ' ' + classNames.tick + '-' + this.ticks.placement.toLowerCase(),\n      attrs: {\n        role: 'presentation',\n        tabIndex: '-1',\n        'aria-hidden': 'true'\n      }\n    });\n    li.appendChild(span);\n\n    if (isNullOrUndefined(this.customValues)) {\n      this.formatTicksValue(li, start, span, tickWidth);\n    } else {\n      if (this.enableHtmlSanitizer) {\n        span.innerHTML = SanitizeHtmlHelper.sanitize(start.toString());\n      } else {\n        span.innerHTML = start.toString();\n      }\n    }\n  };\n\n  Slider.prototype.formatTicksValue = function (li, start, spanElement, tickWidth) {\n    var _this = this;\n\n    var tickText = this.formatNumber(start);\n    var text = !isNullOrUndefined(this.ticks) && !isNullOrUndefined(this.ticks.format) ? this.formatString(start, this.ticksFormatInfo).formatString : tickText;\n    var eventArgs = {\n      value: start,\n      text: text,\n      tickElement: li\n    };\n    this.trigger('renderingTicks', eventArgs, function (observedArgs) {\n      li.setAttribute('title', observedArgs.text.toString());\n\n      if (spanElement) {\n        if (_this.enableHtmlSanitizer) {\n          spanElement.innerHTML = SanitizeHtmlHelper.sanitize(observedArgs.text.toString());\n        } else {\n          spanElement.innerHTML = observedArgs.text.toString();\n        }\n      }\n\n      if (!isNullOrUndefined(_this.renderingTicks) && isBlazor()) {\n        var orien = _this.orientation === 'Horizontal' ? 'h' : 'v';\n\n        _this.ticksAlignment(orien, tickWidth, false);\n      }\n    });\n  };\n\n  Slider.prototype.scaleAlignment = function () {\n    this.tickValuePosition();\n    var smallTick = 12;\n    var largeTick = 20;\n    var half = largeTick / 2;\n    var orien = this.orientation === 'Vertical' ? 'v' : 'h';\n\n    if (this.orientation === 'Vertical') {\n      this.element.getBoundingClientRect().width <= 15 ? this.sliderContainer.classList.add(classNames.sliderSmallSize) : this.sliderContainer.classList.remove(classNames.sliderSmallSize);\n    } else {\n      this.element.getBoundingClientRect().height <= 15 ? this.sliderContainer.classList.add(classNames.sliderSmallSize) : this.sliderContainer.classList.remove(classNames.sliderSmallSize);\n    }\n  };\n\n  Slider.prototype.tickValuePosition = function () {\n    this.firstChild = this.element.querySelector('ul').children[0];\n    var first = this.firstChild.getBoundingClientRect();\n    var firstChild;\n    var otherChild;\n    var smallStep = this.ticks.smallStep;\n    var count = Math.abs(parseFloat(formatUnit(this.max)) - parseFloat(formatUnit(this.min))) / smallStep;\n\n    if (this.firstChild.children.length > 0) {\n      firstChild = this.firstChild.children[0].getBoundingClientRect();\n    }\n\n    var tickElements = [this.sliderContainer.querySelectorAll('.' + classNames.tick + '.' + classNames.large + ' .' + classNames.tickValue)];\n    var other;\n\n    if (this.ticks.placement === 'Both') {\n      other = [].slice.call(tickElements[0], 2);\n    } else {\n      other = [].slice.call(tickElements[0], 1);\n    }\n\n    var tickWidth = this.orientation === 'Vertical' ? first.height * 2 : first.width * 2;\n\n    for (var i = 0; i < this.firstChild.children.length; i++) {\n      if (this.orientation === 'Vertical') {\n        if (!isBlazor() || !this.isServerRendered) {\n          this.firstChild.children[i].style.top = -(firstChild.height / 2) + 'px';\n        }\n      } else {\n        if (!this.enableRtl) {\n          this.firstChild.children[i].style.left = -(firstChild.width / 2) + 'px';\n        } else {\n          this.firstChild.children[i].style.left = (tickWidth - this.firstChild.children[i].getBoundingClientRect().width) / 2 + 'px';\n        }\n      }\n    }\n\n    for (var i = 0; i < other.length; i++) {\n      otherChild = other[i].getBoundingClientRect();\n\n      if (this.orientation === 'Vertical') {\n        if (!isBlazor() || !this.isServerRendered) {\n          setStyleAttribute(other[i], {\n            top: (tickWidth - otherChild.height) / 2 + 'px'\n          });\n        }\n      } else {\n        setStyleAttribute(other[i], {\n          left: (tickWidth - otherChild.width) / 2 + 'px'\n        });\n      }\n    }\n\n    if (this.enableRtl && this.lastChild.children.length && count !== 0) {\n      this.lastChild.children[0].style.left = -(this.lastChild.getBoundingClientRect().width / 2) + 'px';\n\n      if (this.ticks.placement === 'Both') {\n        if (!isBlazor()) {\n          this.lastChild.children[1].style.left = -(this.lastChild.getBoundingClientRect().width / 2) + 'px';\n        }\n      }\n    }\n\n    if (count === 0) {\n      if (this.orientation === 'Horizontal') {\n        if (!this.enableRtl) {\n          this.firstChild.classList.remove(classNames.sliderLastTick);\n\n          if (!isBlazor()) {\n            this.firstChild.style.left = this.firstHandle.style.left;\n          }\n        } else {\n          this.firstChild.classList.remove(classNames.sliderLastTick);\n          this.firstChild.style.right = this.firstHandle.style.right;\n\n          if (!isBlazor()) {\n            this.firstChild.children[0].style.left = this.firstChild.getBoundingClientRect().width / 2 + 2 + 'px';\n\n            if (this.ticks.placement === 'Both') {\n              this.firstChild.children[1].style.left = this.firstChild.getBoundingClientRect().width / 2 + 2 + 'px';\n            }\n          }\n        }\n      }\n\n      if (!isBlazor() || !this.isServerRendered) {\n        if (this.orientation === 'Vertical') {\n          this.firstChild.classList.remove(classNames.sliderLastTick);\n        }\n      }\n    }\n\n    if (isBlazor() && this.isServerRendered) {\n      var args = void 0;\n\n      if (this.firstChild != null) {\n        if (this.orientation === 'Horizontal') {\n          args = {\n            firstTickPostion: this.firstChild.children[0].style.left\n          };\n        } else {\n          args = {\n            firstTickPostion: -(firstChild.height / 2) + 'px'\n          };\n        }\n      }\n\n      if (other[0] != null) {\n        if (this.orientation === 'Horizontal') {\n          args = {\n            otherTicksPosition: other[0].style.left\n          };\n        } else {\n          args = {\n            otherTicksPosition: (tickWidth - otherChild.height) / 2 + 'px'\n          };\n        }\n      }\n\n      if (this.firstChild != null && other[0] != null) {\n        if (this.orientation === 'Horizontal') {\n          args = {\n            firstTickPostion: this.firstChild.children[0].style.left,\n            otherTicksPosition: other[0].style.left\n          };\n        } else {\n          args = {\n            firstTickPostion: -(firstChild.height / 2) + 'px',\n            otherTicksPosition: (tickWidth - otherChild.height) / 2 + 'px'\n          };\n        }\n      } // tslint:disable\n\n\n      this.interopAdaptor.invokeMethodAsync('SliderTicksData', args); // tslint:enable\n    }\n  };\n\n  Slider.prototype.setAriaAttrValue = function (element) {\n    var ariaValueText;\n    var isTickFormatted = !isNullOrUndefined(this.ticks) && !isNullOrUndefined(this.ticks.format) ? true : false;\n    var text = !isTickFormatted ? this.formatContent(this.ticksFormatInfo, false) : this.formatContent(this.tooltipFormatInfo, false);\n    var valuenow = isTickFormatted ? this.formatContent(this.ticksFormatInfo, true) : this.formatContent(this.tooltipFormatInfo, true);\n    text = !this.customAriaText ? text : this.customAriaText;\n\n    if (text.split(' - ').length === 2) {\n      ariaValueText = text.split(' - ');\n    } else {\n      ariaValueText = [text, text];\n    }\n\n    this.setAriaAttributes(element);\n\n    if (this.type !== 'Range') {\n      attributes(element, {\n        'aria-valuenow': valuenow,\n        'aria-valuetext': text\n      });\n    } else {\n      !this.enableRtl ? element === this.firstHandle ? attributes(element, {\n        'aria-valuenow': valuenow.split(' - ')[0],\n        'aria-valuetext': ariaValueText[0]\n      }) : attributes(element, {\n        'aria-valuenow': valuenow.split(' - ')[1],\n        'aria-valuetext': ariaValueText[1]\n      }) : element === this.firstHandle ? attributes(element, {\n        'aria-valuenow': valuenow.split(' - ')[1],\n        'aria-valuetext': ariaValueText[1]\n      }) : attributes(element, {\n        'aria-valuenow': valuenow.split(' - ')[0],\n        'aria-valuetext': ariaValueText[0]\n      });\n    }\n  };\n\n  Slider.prototype.handleValueUpdate = function () {\n    var hVal;\n\n    if (this.type === 'Range') {\n      if (this.activeHandle === 1) {\n        hVal = this.handleVal1;\n      } else {\n        hVal = this.handleVal2;\n      }\n    } else {\n      hVal = this.handleVal1;\n    }\n\n    return hVal;\n  };\n\n  Slider.prototype.getLimitCorrectedValues = function (value) {\n    if (this.type === 'MinRange' || this.type === 'Default') {\n      value = this.getLimitValueAndPosition(value, this.limits.minStart, this.limits.minEnd)[0];\n    } else {\n      if (this.activeHandle === 1) {\n        value = this.getLimitValueAndPosition(value, this.limits.minStart, this.limits.minEnd)[0];\n      } else {\n        value = this.getLimitValueAndPosition(value, this.limits.maxStart, this.limits.maxEnd)[0];\n      }\n    }\n\n    return value;\n  };\n\n  Slider.prototype.focusSliderElement = function () {\n    if (!this.isElementFocused) {\n      this.element.focus();\n      this.isElementFocused = true;\n    }\n  };\n\n  Slider.prototype.buttonClick = function (args) {\n    this.focusSliderElement();\n    var value;\n    var enabledRTL = this.enableRtl && this.orientation !== 'Vertical';\n    var hVal = this.handleValueUpdate();\n\n    if (args.keyCode === 40 || args.keyCode === 37 || args.currentTarget.classList.contains(classNames.firstButton)) {\n      enabledRTL ? value = this.add(hVal, parseFloat(this.step.toString()), true) : value = this.add(hVal, parseFloat(this.step.toString()), false);\n    } else if (args.keyCode === 38 || args.keyCode === 39 || args.currentTarget.classList.contains(classNames.secondButton)) {\n      enabledRTL ? value = this.add(hVal, parseFloat(this.step.toString()), false) : value = this.add(hVal, parseFloat(this.step.toString()), true);\n    } else if (args.keyCode === 33 || args.currentTarget.classList.contains(classNames.firstButton)) {\n      enabledRTL ? value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), false) : value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), true);\n    } else if (args.keyCode === 34 || args.currentTarget.classList.contains(classNames.secondButton)) {\n      enabledRTL ? value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), true) : value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), false);\n    } else if (args.keyCode === 36) {\n      value = parseFloat(this.min.toString());\n    } else if (args.keyCode === 35) {\n      value = parseFloat(this.max.toString());\n    }\n\n    if (this.limits.enabled) {\n      value = this.getLimitCorrectedValues(value);\n    }\n\n    this.changeHandleValue(value);\n\n    if (this.isMaterial && !this.tooltip.isVisible && !this.getHandle().classList.contains(classNames.sliderTabHandle)) {\n      this.materialChange();\n    }\n\n    this.tooltipToggle(this.getHandle());\n    this.getHandle().focus();\n\n    if (args.currentTarget.classList.contains(classNames.firstButton)) {\n      EventHandler.add(this.firstBtn, 'mouseup touchend', this.buttonUp, this);\n    }\n\n    if (args.currentTarget.classList.contains(classNames.secondButton)) {\n      EventHandler.add(this.secondBtn, 'mouseup touchend', this.buttonUp, this);\n    }\n  };\n\n  Slider.prototype.tooltipToggle = function (target) {\n    if (this.isMaterialTooltip) {\n      !this.tooltipElement.classList.contains(classNames.materialTooltipOpen) ? this.openMaterialTooltip() : this.refreshTooltip(this.firstHandle);\n    } else {\n      !this.tooltipElement ? this.openTooltip(target) : this.refreshTooltip(target);\n    }\n  };\n\n  Slider.prototype.buttonUp = function (args) {\n    if (args.currentTarget.classList.contains(classNames.firstButton)) {\n      EventHandler.remove(this.firstBtn, 'mouseup touchend', this.buttonUp);\n    }\n\n    if (args.currentTarget.classList.contains(classNames.secondButton)) {\n      EventHandler.remove(this.secondBtn, 'mouseup touchend', this.buttonUp);\n    }\n  };\n\n  Slider.prototype.setRangeBar = function () {\n    if (this.orientation === 'Horizontal') {\n      if (this.type === 'MinRange') {\n        this.enableRtl ? this.rangeBar.style.right = '0px' : this.rangeBar.style.left = '0px';\n        setStyleAttribute(this.rangeBar, {\n          'width': isNullOrUndefined(this.handlePos1) ? 0 : this.handlePos1 + 'px'\n        });\n      } else {\n        this.enableRtl ? this.rangeBar.style.right = this.handlePos1 + 'px' : this.rangeBar.style.left = this.handlePos1 + 'px';\n        setStyleAttribute(this.rangeBar, {\n          'width': this.handlePos2 - this.handlePos1 + 'px'\n        });\n      }\n    } else {\n      if (this.type === 'MinRange') {\n        this.rangeBar.style.bottom = '0px';\n        setStyleAttribute(this.rangeBar, {\n          'height': isNullOrUndefined(this.handlePos1) ? 0 : this.handlePos1 + 'px'\n        });\n      } else {\n        this.rangeBar.style.bottom = this.handlePos1 + 'px';\n        setStyleAttribute(this.rangeBar, {\n          'height': this.handlePos2 - this.handlePos1 + 'px'\n        });\n      }\n    }\n  };\n\n  Slider.prototype.checkValidValueAndPos = function (value) {\n    value = this.checkHandleValue(value);\n    value = this.checkHandlePosition(value);\n    return value;\n  };\n\n  Slider.prototype.setLimitBarPositions = function (fromMinPostion, fromMaxpostion, toMinPostion, toMaxpostion) {\n    if (this.orientation === 'Horizontal') {\n      if (!this.enableRtl) {\n        this.limitBarFirst.style.left = fromMinPostion + 'px';\n        this.limitBarFirst.style.width = fromMaxpostion - fromMinPostion + 'px';\n      } else {\n        this.limitBarFirst.style.right = fromMinPostion + 'px';\n        this.limitBarFirst.style.width = fromMaxpostion - fromMinPostion + 'px';\n      }\n    } else {\n      this.limitBarFirst.style.bottom = fromMinPostion + 'px';\n      this.limitBarFirst.style.height = fromMaxpostion - fromMinPostion + 'px';\n    }\n\n    if (this.type === 'Range') {\n      if (this.orientation === 'Horizontal') {\n        if (!this.enableRtl) {\n          this.limitBarSecond.style.left = toMinPostion + 'px';\n          this.limitBarSecond.style.width = toMaxpostion - toMinPostion + 'px';\n        } else {\n          this.limitBarSecond.style.right = toMinPostion + 'px';\n          this.limitBarSecond.style.width = toMaxpostion - toMinPostion + 'px';\n        }\n      } else {\n        this.limitBarSecond.style.bottom = toMinPostion + 'px';\n        this.limitBarSecond.style.height = toMaxpostion - toMinPostion + 'px';\n      }\n    }\n  };\n\n  Slider.prototype.setLimitBar = function () {\n    if (this.type === 'Default' || this.type === 'MinRange') {\n      var fromPosition = this.getLimitValueAndPosition(this.limits.minStart, this.limits.minStart, this.limits.minEnd, true)[0];\n      fromPosition = this.checkValidValueAndPos(fromPosition);\n      var toPosition = this.getLimitValueAndPosition(this.limits.minEnd, this.limits.minStart, this.limits.minEnd, true)[0];\n      toPosition = this.checkValidValueAndPos(toPosition);\n      this.setLimitBarPositions(fromPosition, toPosition);\n    } else if (this.type === 'Range') {\n      var fromMinPostion = this.getLimitValueAndPosition(this.limits.minStart, this.limits.minStart, this.limits.minEnd, true)[0];\n      fromMinPostion = this.checkValidValueAndPos(fromMinPostion);\n      var fromMaxpostion = this.getLimitValueAndPosition(this.limits.minEnd, this.limits.minStart, this.limits.minEnd, true)[0];\n      fromMaxpostion = this.checkValidValueAndPos(fromMaxpostion);\n      var toMinPostion = this.getLimitValueAndPosition(this.limits.maxStart, this.limits.maxStart, this.limits.maxEnd, true)[0];\n      toMinPostion = this.checkValidValueAndPos(toMinPostion);\n      var toMaxpostion = this.getLimitValueAndPosition(this.limits.maxEnd, this.limits.maxStart, this.limits.maxEnd, true)[0];\n      toMaxpostion = this.checkValidValueAndPos(toMaxpostion);\n      this.setLimitBarPositions(fromMinPostion, fromMaxpostion, toMinPostion, toMaxpostion);\n    }\n  };\n\n  Slider.prototype.getLimitValueAndPosition = function (currentValue, minValue, maxValue, limitBar) {\n    if (isNullOrUndefined(minValue)) {\n      minValue = this.min;\n\n      if (isNullOrUndefined(currentValue) && limitBar) {\n        currentValue = minValue;\n      }\n    }\n\n    if (isNullOrUndefined(maxValue)) {\n      maxValue = this.max;\n\n      if (isNullOrUndefined(currentValue) && limitBar) {\n        currentValue = maxValue;\n      }\n    }\n\n    if (currentValue < minValue) {\n      currentValue = minValue;\n    }\n\n    if (currentValue > maxValue) {\n      currentValue = maxValue;\n    }\n\n    return [currentValue, this.checkHandlePosition(currentValue)];\n  };\n\n  Slider.prototype.setValue = function () {\n    if (!isNullOrUndefined(this.customValues) && this.customValues.length > 0) {\n      this.min = 0;\n      this.max = this.customValues.length - 1;\n      this.setBarColor();\n    }\n\n    this.setAriaAttributes(this.firstHandle);\n    this.handleVal1 = isNullOrUndefined(this.value) ? this.checkHandleValue(parseFloat(this.min.toString())) : this.checkHandleValue(parseFloat(this.value.toString()));\n    this.handlePos1 = this.checkHandlePosition(this.handleVal1);\n    this.preHandlePos1 = this.handlePos1;\n    isNullOrUndefined(this.activeHandle) ? this.type === 'Range' ? this.activeHandle = 2 : this.activeHandle = 1 : this.activeHandle = this.activeHandle;\n\n    if (this.type === 'Default' || this.type === 'MinRange') {\n      if (this.limits.enabled) {\n        var values = this.getLimitValueAndPosition(this.handleVal1, this.limits.minStart, this.limits.minEnd);\n        this.handleVal1 = values[0];\n        this.handlePos1 = values[1];\n        this.preHandlePos1 = this.handlePos1;\n      }\n\n      this.setHandlePosition(null);\n      this.handleStart();\n      this.value = this.handleVal1;\n      this.setAriaAttrValue(this.firstHandle);\n      this.changeEvent('changed', null);\n    } else {\n      this.validateRangeValue();\n    }\n\n    if (this.type !== 'Default') {\n      this.setRangeBar();\n    }\n\n    if (this.limits.enabled) {\n      this.setLimitBar();\n    }\n  };\n\n  Slider.prototype.rangeValueUpdate = function () {\n    if (this.value === null || typeof this.value !== 'object') {\n      this.value = [parseFloat(formatUnit(this.min)), parseFloat(formatUnit(this.max))];\n    }\n  };\n\n  Slider.prototype.validateRangeValue = function () {\n    this.rangeValueUpdate();\n    this.setRangeValue();\n  };\n\n  Slider.prototype.modifyZindex = function () {\n    if (this.type === 'Range') {\n      if (this.activeHandle === 1) {\n        this.firstHandle.style.zIndex = this.zIndex + 4 + '';\n        this.secondHandle.style.zIndex = this.zIndex + 3 + '';\n      } else {\n        this.firstHandle.style.zIndex = this.zIndex + 3 + '';\n        this.secondHandle.style.zIndex = this.zIndex + 4 + '';\n      }\n    } else if (this.isMaterialTooltip && this.tooltipElement) {\n      this.tooltipElement.style.zIndex = getZindexPartial(this.element) + '';\n    }\n  };\n\n  Slider.prototype.setHandlePosition = function (event) {\n    var _this = this;\n\n    var handle;\n    var pos = this.activeHandle === 1 ? this.handlePos1 : this.handlePos2;\n\n    if (this.isMaterialTooltip) {\n      handle = [this.firstHandle, this.materialHandle];\n    } else {\n      handle = [this.getHandle()];\n    }\n\n    this.handleStart();\n    handle.forEach(function (handle) {\n      if (_this.orientation === 'Horizontal') {\n        _this.enableRtl ? handle.style.right = pos + \"px\" : handle.style.left = pos + \"px\";\n      } else {\n        handle.style.bottom = pos + \"px\";\n      }\n\n      if (isBlazor() && _this.isServerRendered) {\n        handle.style.removeProperty('visibility');\n      }\n    });\n    this.changeEvent('change', event);\n  };\n\n  Slider.prototype.getHandle = function () {\n    return this.activeHandle === 1 ? this.firstHandle : this.secondHandle;\n  };\n\n  Slider.prototype.setRangeValue = function () {\n    this.updateRangeValue();\n    this.activeHandle = 1;\n    this.setHandlePosition(null);\n    this.activeHandle = 2;\n    this.setHandlePosition(null);\n    this.activeHandle = 1;\n  };\n\n  Slider.prototype.changeEvent = function (eventName, e) {\n    var previous = eventName === 'change' ? this.previousVal : this.previousChanged;\n\n    if (this.type !== 'Range') {\n      this.setProperties({\n        'value': this.handleVal1\n      }, true);\n\n      if (previous !== this.value) {\n        this.trigger(eventName, this.changeEventArgs(eventName, e));\n        this.setPreviousVal(eventName, this.value);\n      }\n\n      this.setAriaAttrValue(this.firstHandle);\n    } else {\n      var value = this.value = [this.handleVal1, this.handleVal2];\n      this.setProperties({\n        'value': value\n      }, true);\n\n      if (previous.length === this.value.length && this.value[0] !== previous[0] || this.value[1] !== previous[1]) {\n        this.trigger(eventName, this.changeEventArgs(eventName, e));\n        this.setPreviousVal(eventName, this.value);\n      }\n\n      this.setAriaAttrValue(this.getHandle());\n    }\n\n    this.hiddenInput.value = this.value.toString();\n  };\n\n  Slider.prototype.changeEventArgs = function (eventName, e) {\n    var eventArgs;\n\n    if (this.tooltip.isVisible && this.tooltipObj) {\n      if (!isBlazor() || !this.isServerRendered) {\n        this.tooltipValue();\n      }\n\n      eventArgs = {\n        value: this.value,\n        previousValue: eventName === 'change' ? this.previousVal : this.previousChanged,\n        action: eventName,\n        text: this.tooltipObj.content,\n        isInteracted: isNullOrUndefined(e) ? false : true\n      };\n    } else {\n      eventArgs = {\n        value: this.value,\n        previousValue: eventName === 'change' ? this.previousVal : this.previousChanged,\n        action: eventName,\n        text: isNullOrUndefined(this.ticksFormatInfo.format) ? this.value.toString() : this.type !== 'Range' ? this.formatString(this.value, this.ticksFormatInfo).formatString : this.formatString(this.value[0], this.ticksFormatInfo).formatString + ' - ' + this.formatString(this.value[1], this.ticksFormatInfo).formatString,\n        isInteracted: isNullOrUndefined(e) ? false : true\n      };\n    }\n\n    return eventArgs;\n  };\n\n  Slider.prototype.setPreviousVal = function (eventName, value) {\n    if (eventName === 'change') {\n      this.previousVal = value;\n    } else {\n      this.previousChanged = value;\n    }\n  };\n\n  Slider.prototype.updateRangeValue = function () {\n    var values = this.value.toString().split(',').map(Number);\n\n    if (this.enableRtl && this.orientation !== 'Vertical' || this.rtl) {\n      this.value = [values[1], values[0]];\n    } else {\n      this.value = [values[0], values[1]];\n    }\n\n    if (this.enableRtl && this.orientation !== 'Vertical') {\n      this.handleVal1 = this.checkHandleValue(this.value[1]);\n      this.handleVal2 = this.checkHandleValue(this.value[0]);\n    } else {\n      this.handleVal1 = this.checkHandleValue(this.value[0]);\n      this.handleVal2 = this.checkHandleValue(this.value[1]);\n    }\n\n    this.handlePos1 = this.checkHandlePosition(this.handleVal1);\n    this.handlePos2 = this.checkHandlePosition(this.handleVal2);\n\n    if (this.handlePos1 > this.handlePos2) {\n      this.handlePos1 = this.handlePos2;\n      this.handleVal1 = this.handleVal2;\n    }\n\n    this.preHandlePos1 = this.handlePos1;\n    this.preHandlePos2 = this.handlePos2;\n\n    if (this.limits.enabled) {\n      this.activeHandle = 1;\n      var values_1 = this.getLimitValueAndPosition(this.handleVal1, this.limits.minStart, this.limits.minEnd);\n      this.handleVal1 = values_1[0];\n      this.handlePos1 = values_1[1];\n      this.preHandlePos1 = this.handlePos1;\n      this.activeHandle = 2;\n      values_1 = this.getLimitValueAndPosition(this.handleVal2, this.limits.maxStart, this.limits.maxEnd);\n      this.handleVal2 = values_1[0];\n      this.handlePos2 = values_1[1];\n      this.preHandlePos2 = this.handlePos2;\n    }\n  };\n\n  Slider.prototype.checkHandlePosition = function (value) {\n    var pos;\n    value = 100 * (value - parseFloat(formatUnit(this.min))) / (parseFloat(formatUnit(this.max)) - parseFloat(formatUnit(this.min)));\n\n    if (this.orientation === 'Horizontal') {\n      pos = this.element.getBoundingClientRect().width * (value / 100);\n    } else {\n      pos = this.element.getBoundingClientRect().height * (value / 100);\n    }\n\n    if (parseFloat(formatUnit(this.max)) === parseFloat(formatUnit(this.min))) {\n      if (this.orientation === 'Horizontal') {\n        pos = this.element.getBoundingClientRect().width;\n      } else {\n        pos = this.element.getBoundingClientRect().height;\n      }\n    }\n\n    return pos;\n  };\n\n  Slider.prototype.checkHandleValue = function (value) {\n    if (this.min > this.max) {\n      this.min = this.max;\n    }\n\n    if (this.min === this.max) {\n      return parseFloat(formatUnit(this.max));\n    }\n\n    var handle = this.tempStartEnd();\n\n    if (value < handle.start) {\n      value = handle.start;\n    } else if (value > handle.end) {\n      value = handle.end;\n    }\n\n    return value;\n  };\n  /**\n   * It is used to reposition slider.\n   * @returns void\n   */\n\n\n  Slider.prototype.reposition = function () {\n    var _this = this;\n\n    this.firstHandle.style.transition = 'none';\n\n    if (this.type !== 'Default') {\n      this.rangeBar.style.transition = 'none';\n    }\n\n    if (this.type === 'Range') {\n      this.secondHandle.style.transition = 'none';\n    }\n\n    this.handlePos1 = this.checkHandlePosition(this.handleVal1);\n\n    if (this.handleVal2) {\n      this.handlePos2 = this.checkHandlePosition(this.handleVal2);\n    }\n\n    if (this.orientation === 'Horizontal') {\n      this.enableRtl ? this.firstHandle.style.right = this.handlePos1 + \"px\" : this.firstHandle.style.left = this.handlePos1 + \"px\";\n\n      if (this.isMaterialTooltip) {\n        this.enableRtl ? this.materialHandle.style.right = this.handlePos1 + \"px\" : this.materialHandle.style.left = this.handlePos1 + \"px\";\n      }\n\n      if (this.type === 'MinRange') {\n        this.enableRtl ? this.rangeBar.style.right = '0px' : this.rangeBar.style.left = '0px';\n        setStyleAttribute(this.rangeBar, {\n          'width': isNullOrUndefined(this.handlePos1) ? 0 : this.handlePos1 + 'px'\n        });\n      } else if (this.type === 'Range') {\n        this.enableRtl ? this.secondHandle.style.right = this.handlePos2 + \"px\" : this.secondHandle.style.left = this.handlePos2 + \"px\";\n        this.enableRtl ? this.rangeBar.style.right = this.handlePos1 + 'px' : this.rangeBar.style.left = this.handlePos1 + 'px';\n        setStyleAttribute(this.rangeBar, {\n          'width': this.handlePos2 - this.handlePos1 + 'px'\n        });\n      }\n    } else {\n      this.firstHandle.style.bottom = this.handlePos1 + \"px\";\n\n      if (this.isMaterialTooltip) {\n        this.materialHandle.style.bottom = this.handlePos1 + \"px\";\n      }\n\n      if (this.type === 'MinRange') {\n        this.rangeBar.style.bottom = '0px';\n        setStyleAttribute(this.rangeBar, {\n          'height': isNullOrUndefined(this.handlePos1) ? 0 : this.handlePos1 + 'px'\n        });\n      } else if (this.type === 'Range') {\n        this.secondHandle.style.bottom = this.handlePos2 + \"px\";\n        this.rangeBar.style.bottom = this.handlePos1 + 'px';\n        setStyleAttribute(this.rangeBar, {\n          'height': this.handlePos2 - this.handlePos1 + 'px'\n        });\n      }\n    }\n\n    if (this.limits.enabled) {\n      this.setLimitBar();\n    }\n\n    if (this.ticks.placement !== 'None' && this.ul) {\n      if (!isBlazor()) {\n        this.removeElement(this.ul);\n        this.ul = undefined;\n      }\n\n      this.renderScale();\n\n      if (isBlazor()) {\n        this.tickValuePosition();\n      }\n    }\n\n    this.handleStart();\n\n    if (!this.tooltip.isVisible) {\n      setTimeout(function () {\n        _this.firstHandle.style.transition = _this.scaleTransform;\n\n        if (_this.type === 'Range') {\n          _this.secondHandle.style.transition = _this.scaleTransform;\n        }\n      });\n    }\n\n    if (!isBlazor() || !this.isServerRendered) {\n      this.refreshTooltip(this.tooltipTarget);\n    }\n\n    this.setBarColor();\n  };\n\n  Slider.prototype.changeHandleValue = function (value) {\n    var position = null;\n\n    if (this.activeHandle === 1) {\n      if (!(this.limits.enabled && this.limits.startHandleFixed)) {\n        this.handleVal1 = this.checkHandleValue(value);\n        this.handlePos1 = this.checkHandlePosition(this.handleVal1);\n\n        if (this.type === 'Range' && this.handlePos1 > this.handlePos2) {\n          this.handlePos1 = this.handlePos2;\n          this.handleVal1 = this.handleVal2;\n        }\n\n        if (this.handlePos1 !== this.preHandlePos1) {\n          position = this.preHandlePos1 = this.handlePos1;\n        }\n      }\n\n      this.modifyZindex();\n    } else {\n      if (!(this.limits.enabled && this.limits.endHandleFixed)) {\n        this.handleVal2 = this.checkHandleValue(value);\n        this.handlePos2 = this.checkHandlePosition(this.handleVal2);\n\n        if (this.type === 'Range' && this.handlePos2 < this.handlePos1) {\n          this.handlePos2 = this.handlePos1;\n          this.handleVal2 = this.handleVal1;\n        }\n\n        if (this.handlePos2 !== this.preHandlePos2) {\n          position = this.preHandlePos2 = this.handlePos2;\n        }\n      }\n\n      this.modifyZindex();\n    }\n\n    if (position !== null) {\n      if (this.type !== 'Default') {\n        this.setRangeBar();\n      }\n\n      this.setHandlePosition(null);\n    }\n  };\n\n  Slider.prototype.tempStartEnd = function () {\n    if (this.min > this.max) {\n      return {\n        start: this.max,\n        end: this.min\n      };\n    } else {\n      return {\n        start: this.min,\n        end: this.max\n      };\n    }\n  };\n\n  Slider.prototype.xyToPosition = function (position) {\n    var pos;\n\n    if (this.min === this.max) {\n      return 100;\n    }\n\n    if (this.orientation === 'Horizontal') {\n      var left = position.x - this.element.getBoundingClientRect().left;\n      var num = this.element.offsetWidth / 100;\n      this.val = left / num;\n    } else {\n      var top_1 = position.y - this.element.getBoundingClientRect().top;\n      var num = this.element.offsetHeight / 100;\n      this.val = 100 - top_1 / num;\n    }\n\n    var val = this.stepValueCalculation(this.val);\n\n    if (val < 0) {\n      val = 0;\n    } else if (val > 100) {\n      val = 100;\n    }\n\n    if (this.enableRtl && this.orientation !== 'Vertical') {\n      val = 100 - val;\n    }\n\n    if (this.orientation === 'Horizontal') {\n      pos = this.element.getBoundingClientRect().width * (val / 100);\n    } else {\n      pos = this.element.getBoundingClientRect().height * (val / 100);\n    }\n\n    return pos;\n  };\n\n  Slider.prototype.stepValueCalculation = function (value) {\n    if (this.step === 0) {\n      this.step = 1;\n    }\n\n    var percentStep = parseFloat(formatUnit(this.step)) / ((parseFloat(formatUnit(this.max)) - parseFloat(formatUnit(this.min))) / 100);\n    var remain = value % Math.abs(percentStep);\n\n    if (remain !== 0) {\n      if (percentStep / 2 > remain) {\n        value -= remain;\n      } else {\n        value += Math.abs(percentStep) - remain;\n      }\n    }\n\n    return value;\n  };\n\n  Slider.prototype.add = function (a, b, addition) {\n    var precision;\n    var x = Math.pow(10, precision || 3);\n    var val;\n\n    if (addition) {\n      val = (Math.round(a * x) + Math.round(b * x)) / x;\n    } else {\n      val = (Math.round(a * x) - Math.round(b * x)) / x;\n    }\n\n    return val;\n  };\n\n  Slider.prototype.positionToValue = function (pos) {\n    var val;\n    var diff = parseFloat(formatUnit(this.max)) - parseFloat(formatUnit(this.min));\n\n    if (this.orientation === 'Horizontal') {\n      val = pos / this.element.getBoundingClientRect().width * diff;\n    } else {\n      val = pos / this.element.getBoundingClientRect().height * diff;\n    }\n\n    var total = this.add(val, parseFloat(this.min.toString()), true);\n    return total;\n  };\n\n  Slider.prototype.sliderBarClick = function (evt) {\n    evt.preventDefault();\n    var pos;\n\n    if (evt.type === 'mousedown' || evt.type === 'mouseup' || evt.type === 'click') {\n      pos = {\n        x: evt.clientX,\n        y: evt.clientY\n      };\n    } else if (evt.type === 'touchend' || evt.type === 'touchstart') {\n      pos = {\n        x: evt.changedTouches[0].clientX,\n        y: evt.changedTouches[0].clientY\n      };\n    }\n\n    var handlepos = this.xyToPosition(pos);\n    var handleVal = this.positionToValue(handlepos);\n\n    if (this.type === 'Range' && this.handlePos2 - handlepos < handlepos - this.handlePos1) {\n      this.activeHandle = 2;\n\n      if (!(this.limits.enabled && this.limits.endHandleFixed)) {\n        if (this.limits.enabled) {\n          var value = this.getLimitValueAndPosition(handleVal, this.limits.maxStart, this.limits.maxEnd);\n          handleVal = value[0];\n          handlepos = value[1];\n        }\n\n        this.secondHandle.classList.add(classNames.sliderActiveHandle);\n        this.handlePos2 = this.preHandlePos2 = handlepos;\n        this.handleVal2 = handleVal;\n      }\n\n      this.modifyZindex();\n      this.secondHandle.focus();\n    } else {\n      this.activeHandle = 1;\n\n      if (!(this.limits.enabled && this.limits.startHandleFixed)) {\n        if (this.limits.enabled) {\n          var value = this.getLimitValueAndPosition(handleVal, this.limits.minStart, this.limits.minEnd);\n          handleVal = value[0];\n          handlepos = value[1];\n        }\n\n        this.firstHandle.classList.add(classNames.sliderActiveHandle);\n        this.handlePos1 = this.preHandlePos1 = handlepos;\n        this.handleVal1 = handleVal;\n      }\n\n      this.modifyZindex();\n      this.firstHandle.focus();\n    }\n\n    if (this.isMaterialTooltip) {\n      this.tooltipElement.classList.add(classNames.materialTooltipActive);\n    }\n\n    var focusedElement = this.element.querySelector('.' + classNames.sliderTabHandle);\n\n    if (focusedElement && this.getHandle() !== focusedElement) {\n      focusedElement.classList.remove(classNames.sliderTabHandle);\n    }\n\n    var handle = this.activeHandle === 1 ? this.firstHandle : this.secondHandle;\n\n    if (evt.target === handle) {\n      if (this.isMaterial && !this.tooltip.isVisible && !this.getHandle().classList.contains(classNames.sliderTabHandle)) {\n        this.materialChange();\n      }\n\n      this.tooltipToggle(this.getHandle());\n      return;\n    }\n\n    if (!this.checkRepeatedValue(handleVal)) {\n      return;\n    }\n\n    var transition = this.isMaterial && this.tooltip.isVisible ? this.transitionOnMaterialTooltip : this.transition;\n    this.getHandle().style.transition = transition.handle;\n\n    if (this.type !== 'Default') {\n      this.rangeBar.style.transition = transition.rangeBar;\n    }\n\n    this.setHandlePosition(evt);\n\n    if (this.type !== 'Default') {\n      this.setRangeBar();\n    }\n  };\n\n  Slider.prototype.handleValueAdjust = function (handleValue, assignValue, handleNumber) {\n    if (handleNumber === 1) {\n      this.handleVal1 = assignValue;\n      this.handleVal2 = this.handleVal1 + this.minDiff;\n    } else if (handleNumber === 2) {\n      this.handleVal2 = assignValue;\n      this.handleVal1 = this.handleVal2 - this.minDiff;\n    }\n\n    this.handlePos1 = this.checkHandlePosition(this.handleVal1);\n    this.handlePos2 = this.checkHandlePosition(this.handleVal2);\n  };\n\n  Slider.prototype.dragRangeBarMove = function (event) {\n    var _a, _b;\n\n    if (event.type !== 'touchmove') {\n      event.preventDefault();\n    }\n\n    this.rangeBarDragged = true;\n    var pos;\n    this.rangeBar.style.transition = 'none';\n    this.firstHandle.style.transition = 'none';\n    this.secondHandle.style.transition = 'none';\n    var xPostion;\n    var yPostion;\n\n    if (event.type === 'mousemove') {\n      _a = [event.clientX, event.clientY], xPostion = _a[0], yPostion = _a[1];\n    } else {\n      _b = [event.changedTouches[0].clientX, event.changedTouches[0].clientY], xPostion = _b[0], yPostion = _b[1];\n    }\n\n    if (!(this.limits.enabled && this.limits.startHandleFixed) && !(this.limits.enabled && this.limits.endHandleFixed)) {\n      if (!this.enableRtl) {\n        pos = {\n          x: xPostion - this.firstPartRemain,\n          y: yPostion + this.secondPartRemain\n        };\n      } else {\n        pos = {\n          x: xPostion + this.secondPartRemain,\n          y: yPostion + this.secondPartRemain\n        };\n      }\n\n      this.handlePos1 = this.xyToPosition(pos);\n      this.handleVal1 = this.positionToValue(this.handlePos1);\n\n      if (!this.enableRtl) {\n        pos = {\n          x: xPostion + this.secondPartRemain,\n          y: yPostion - this.firstPartRemain\n        };\n      } else {\n        pos = {\n          x: xPostion - this.firstPartRemain,\n          y: yPostion - this.firstPartRemain\n        };\n      }\n\n      this.handlePos2 = this.xyToPosition(pos);\n      this.handleVal2 = this.positionToValue(this.handlePos2);\n\n      if (this.limits.enabled) {\n        var value = this.getLimitValueAndPosition(this.handleVal1, this.limits.minStart, this.limits.minEnd);\n        this.handleVal1 = value[0];\n        this.handlePos1 = value[1];\n\n        if (this.handleVal1 === this.limits.minEnd) {\n          this.handleValueAdjust(this.handleVal1, this.limits.minEnd, 1);\n        }\n\n        if (this.handleVal1 === this.limits.minStart) {\n          this.handleValueAdjust(this.handleVal1, this.limits.minStart, 1);\n        }\n\n        value = this.getLimitValueAndPosition(this.handleVal2, this.limits.maxStart, this.limits.maxEnd);\n        this.handleVal2 = value[0];\n        this.handlePos2 = value[1];\n\n        if (this.handleVal2 === this.limits.maxStart) {\n          this.handleValueAdjust(this.handleVal2, this.limits.maxStart, 2);\n        }\n\n        if (this.handleVal2 === this.limits.maxEnd) {\n          this.handleValueAdjust(this.handleVal2, this.limits.maxEnd, 2);\n        }\n      }\n\n      if (this.handleVal2 === this.max) {\n        this.handleValueAdjust(this.handleVal2, this.max, 2);\n      }\n\n      if (this.handleVal1 === this.min) {\n        this.handleValueAdjust(this.handleVal1, this.min, 1);\n      }\n    }\n\n    this.activeHandle = 1;\n    this.setHandlePosition(event);\n    this.activeHandle = 2;\n    this.setHandlePosition(event);\n    this.tooltipToggle(this.rangeBar);\n    this.setRangeBar();\n  };\n\n  Slider.prototype.sliderBarUp = function (event) {\n    this.changeEvent('changed', event);\n    this.handleFocusOut();\n    this.firstHandle.classList.remove(classNames.sliderActiveHandle);\n\n    if (this.type === 'Range') {\n      this.secondHandle.classList.remove(classNames.sliderActiveHandle);\n    }\n\n    this.closeTooltip();\n\n    if (this.isMaterial) {\n      this.getHandle().classList.remove('e-large-thumb-size');\n\n      if (this.isMaterialTooltip) {\n        this.tooltipElement.classList.remove(classNames.materialTooltipActive);\n      }\n    }\n\n    EventHandler.remove(document, 'mousemove touchmove', this.sliderBarMove);\n    EventHandler.remove(document, 'mouseup touchend', this.sliderBarUp);\n  };\n\n  Slider.prototype.sliderBarMove = function (evt) {\n    if (evt.type !== 'touchmove') {\n      evt.preventDefault();\n    }\n\n    var pos;\n\n    if (evt.type === 'mousemove') {\n      pos = {\n        x: evt.clientX,\n        y: evt.clientY\n      };\n    } else {\n      pos = {\n        x: evt.changedTouches[0].clientX,\n        y: evt.changedTouches[0].clientY\n      };\n    }\n\n    var handlepos = this.xyToPosition(pos);\n    var handleVal = this.positionToValue(handlepos);\n    handlepos = Math.round(handlepos);\n\n    if (this.type !== 'Range' && this.activeHandle === 1) {\n      if (!(this.limits.enabled && this.limits.startHandleFixed)) {\n        if (this.limits.enabled) {\n          var valueAndPostion = this.getLimitValueAndPosition(handleVal, this.limits.minStart, this.limits.minEnd);\n          handlepos = valueAndPostion[1];\n          handleVal = valueAndPostion[0];\n        }\n\n        this.handlePos1 = handlepos;\n        this.handleVal1 = handleVal;\n      }\n\n      this.firstHandle.classList.add(classNames.sliderActiveHandle);\n    }\n\n    if (this.type === 'Range') {\n      if (this.activeHandle === 1) {\n        this.firstHandle.classList.add(classNames.sliderActiveHandle);\n\n        if (!(this.limits.enabled && this.limits.startHandleFixed)) {\n          if (handlepos > this.handlePos2) {\n            handlepos = this.handlePos2;\n            handleVal = this.handleVal2;\n          }\n\n          if (handlepos !== this.preHandlePos1) {\n            if (this.limits.enabled) {\n              var value = this.getLimitValueAndPosition(handleVal, this.limits.minStart, this.limits.minEnd);\n              handleVal = value[0];\n              handlepos = value[1];\n            }\n\n            this.handlePos1 = this.preHandlePos1 = handlepos;\n            this.handleVal1 = handleVal;\n            this.activeHandle = 1;\n          }\n        }\n      } else if (this.activeHandle === 2) {\n        this.secondHandle.classList.add(classNames.sliderActiveHandle);\n\n        if (!(this.limits.enabled && this.limits.endHandleFixed)) {\n          if (handlepos < this.handlePos1) {\n            handlepos = this.handlePos1;\n            handleVal = this.handleVal1;\n          }\n\n          if (handlepos !== this.preHandlePos2) {\n            if (this.limits.enabled) {\n              var value = this.getLimitValueAndPosition(handleVal, this.limits.maxStart, this.limits.maxEnd);\n              handleVal = value[0];\n              handlepos = value[1];\n            }\n\n            this.handlePos2 = this.preHandlePos2 = handlepos;\n            this.handleVal2 = handleVal;\n            this.activeHandle = 2;\n          }\n        }\n      }\n    }\n\n    if (!this.checkRepeatedValue(handleVal)) {\n      return;\n    }\n\n    this.getHandle().style.transition = this.scaleTransform;\n\n    if (this.type !== 'Default') {\n      this.rangeBar.style.transition = 'none';\n    }\n\n    this.setHandlePosition(evt);\n\n    if (this.isMaterial && !this.tooltip.isVisible && !this.getHandle().classList.contains(classNames.sliderTabHandle)) {\n      this.materialChange();\n    }\n\n    this.tooltipToggle(this.getHandle());\n\n    if (this.type !== 'Default') {\n      this.setRangeBar();\n    }\n  };\n\n  Slider.prototype.dragRangeBarUp = function (event) {\n    if (!this.rangeBarDragged) {\n      this.focusSliderElement();\n      this.sliderBarClick(event);\n    }\n\n    this.changeEvent('changed', event);\n    this.closeTooltip();\n    EventHandler.remove(document, 'mousemove touchmove', this.dragRangeBarMove);\n    EventHandler.remove(document, 'mouseup touchend', this.dragRangeBarUp);\n    this.rangeBarDragged = false;\n  };\n\n  Slider.prototype.checkRepeatedValue = function (currentValue) {\n    if (this.type === 'Range') {\n      var previousVal = this.enableRtl && this.orientation !== 'Vertical' ? this.activeHandle === 1 ? this.previousVal[1] : this.previousVal[0] : this.activeHandle === 1 ? this.previousVal[0] : this.previousVal[1];\n\n      if (currentValue === previousVal) {\n        return 0;\n      }\n    } else {\n      if (currentValue === this.previousVal) {\n        return 0;\n      }\n    }\n\n    return 1;\n  };\n\n  Slider.prototype.refreshTooltip = function (target) {\n    if (this.tooltip.isVisible && this.tooltipObj) {\n      this.tooltipValue();\n\n      if (target) {\n        this.tooltipObj.refresh(target);\n        this.tooltipTarget = target;\n      }\n    }\n  };\n\n  Slider.prototype.openTooltip = function (target) {\n    if (this.tooltip.isVisible && this.tooltipObj && !this.isMaterialTooltip) {\n      this.tooltipValue();\n      this.tooltipObj.open(target);\n      this.tooltipTarget = target;\n    }\n  };\n\n  Slider.prototype.closeTooltip = function () {\n    if (this.tooltip.isVisible && this.tooltipObj && this.tooltip.showOn !== 'Always' && !this.isMaterialTooltip) {\n      this.tooltipValue();\n      this.tooltipObj.close();\n      this.tooltipTarget = undefined;\n    }\n  };\n\n  Slider.prototype.keyDown = function (event) {\n    switch (event.keyCode) {\n      case 37:\n      case 38:\n      case 39:\n      case 40:\n      case 33:\n      case 34:\n      case 36:\n      case 35:\n        event.preventDefault();\n        this.buttonClick(event);\n        break;\n    }\n  };\n\n  Slider.prototype.wireButtonEvt = function (destroy) {\n    if (!destroy) {\n      EventHandler.add(this.firstBtn, 'mouseleave touchleave', this.buttonFocusOut, this);\n      EventHandler.add(this.secondBtn, 'mouseleave touchleave', this.buttonFocusOut, this);\n      EventHandler.add(this.firstBtn, 'mousedown touchstart', this.repeatHandlerMouse, this);\n      EventHandler.add(this.firstBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp, this);\n      EventHandler.add(this.secondBtn, 'mousedown touchstart', this.repeatHandlerMouse, this);\n      EventHandler.add(this.secondBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp, this);\n      EventHandler.add(this.firstBtn, 'focusout', this.sliderFocusOut, this);\n      EventHandler.add(this.secondBtn, 'focusout', this.sliderFocusOut, this);\n    } else {\n      EventHandler.remove(this.firstBtn, 'mouseleave touchleave', this.buttonFocusOut);\n      EventHandler.remove(this.secondBtn, 'mouseleave touchleave', this.buttonFocusOut);\n      EventHandler.remove(this.firstBtn, 'mousedown touchstart', this.repeatHandlerMouse);\n      EventHandler.remove(this.firstBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp);\n      EventHandler.remove(this.secondBtn, 'mousedown touchstart', this.repeatHandlerMouse);\n      EventHandler.remove(this.secondBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp);\n      EventHandler.remove(this.firstBtn, 'focusout', this.sliderFocusOut);\n      EventHandler.remove(this.secondBtn, 'focusout', this.sliderFocusOut);\n    }\n  };\n\n  Slider.prototype.rangeBarMousedown = function (event) {\n    var _a, _b;\n\n    event.preventDefault();\n    this.focusSliderElement();\n\n    if (this.type === 'Range' && this.drag && event.target === this.rangeBar) {\n      var xPostion = void 0;\n      var yPostion = void 0;\n\n      if (event.type === 'mousedown') {\n        _a = [event.clientX, event.clientY], xPostion = _a[0], yPostion = _a[1];\n      } else if (event.type === 'touchstart') {\n        _b = [event.changedTouches[0].clientX, event.changedTouches[0].clientY], xPostion = _b[0], yPostion = _b[1];\n      }\n\n      if (this.orientation === 'Horizontal') {\n        this.firstPartRemain = xPostion - this.rangeBar.getBoundingClientRect().left;\n        this.secondPartRemain = this.rangeBar.getBoundingClientRect().right - xPostion;\n      } else {\n        this.firstPartRemain = yPostion - this.rangeBar.getBoundingClientRect().top;\n        this.secondPartRemain = this.rangeBar.getBoundingClientRect().bottom - yPostion;\n      }\n\n      this.minDiff = this.handleVal2 - this.handleVal1;\n      this.tooltipToggle(this.rangeBar);\n      var focusedElement = this.element.querySelector('.' + classNames.sliderTabHandle);\n\n      if (focusedElement) {\n        focusedElement.classList.remove(classNames.sliderTabHandle);\n      }\n\n      EventHandler.add(document, 'mousemove touchmove', this.dragRangeBarMove, this);\n      EventHandler.add(document, 'mouseup touchend', this.dragRangeBarUp, this);\n    }\n  };\n\n  Slider.prototype.elementClick = function (event) {\n    event.preventDefault();\n    this.focusSliderElement();\n    this.sliderBarClick(event);\n  };\n\n  Slider.prototype.wireEvents = function () {\n    this.onresize = this.reposition.bind(this);\n    window.addEventListener('resize', this.onresize);\n\n    if (this.enabled && !this.readonly) {\n      EventHandler.add(this.element, 'click', this.elementClick, this);\n\n      if (this.type === 'Range' && this.drag) {\n        EventHandler.add(this.rangeBar, 'mousedown touchstart', this.rangeBarMousedown, this);\n      }\n\n      EventHandler.add(this.sliderContainer, 'keydown', this.keyDown, this);\n      EventHandler.add(this.sliderContainer, 'keyup', this.keyUp, this);\n      EventHandler.add(this.element, 'focusout', this.sliderFocusOut, this);\n      EventHandler.add(this.sliderContainer, 'mouseover mouseout touchstart touchend', this.hover, this);\n      this.wireFirstHandleEvt(false);\n\n      if (this.type === 'Range') {\n        this.wireSecondHandleEvt(false);\n      }\n\n      if (this.showButtons) {\n        this.wireButtonEvt(false);\n      }\n\n      this.wireMaterialTooltipEvent(false);\n\n      if (this.isForm) {\n        EventHandler.add(this.formElement, 'reset', this.formResetHandler, this);\n      }\n    }\n  };\n\n  Slider.prototype.unwireEvents = function () {\n    EventHandler.remove(this.element, 'click', this.elementClick);\n\n    if (this.type === 'Range' && this.drag) {\n      EventHandler.remove(this.rangeBar, 'mousedown touchstart', this.rangeBarMousedown);\n    }\n\n    EventHandler.remove(this.sliderContainer, 'keydown', this.keyDown);\n    EventHandler.remove(this.sliderContainer, 'keyup', this.keyUp);\n    EventHandler.remove(this.element, 'focusout', this.sliderFocusOut);\n    EventHandler.remove(this.sliderContainer, 'mouseover mouseout touchstart touchend', this.hover);\n    this.wireFirstHandleEvt(true);\n\n    if (this.type === 'Range') {\n      this.wireSecondHandleEvt(true);\n    }\n\n    if (this.showButtons) {\n      this.wireButtonEvt(true);\n    }\n\n    this.wireMaterialTooltipEvent(true);\n    EventHandler.remove(this.element, 'reset', this.formResetHandler);\n  };\n\n  Slider.prototype.formResetHandler = function () {\n    this.setProperties({\n      'value': this.formResetValue\n    }, true);\n    this.setValue();\n  };\n\n  Slider.prototype.keyUp = function (event) {\n    if (event.keyCode === 9 && event.target.classList.contains(classNames.sliderHandle)) {\n      this.focusSliderElement();\n\n      if (!event.target.classList.contains(classNames.sliderTabHandle)) {\n        if (this.element.querySelector('.' + classNames.sliderTabHandle)) {\n          this.element.querySelector('.' + classNames.sliderTabHandle).classList.remove(classNames.sliderTabHandle);\n        }\n\n        event.target.classList.add(classNames.sliderTabHandle);\n        var parentElement = event.target.parentElement;\n\n        if (parentElement === this.element) {\n          parentElement.querySelector('.' + classNames.sliderTrack).classList.add(classNames.sliderTabTrack);\n\n          if (this.type === 'Range' || this.type === 'MinRange') {\n            parentElement.querySelector('.' + classNames.rangeBar).classList.add(classNames.sliderTabRange);\n          }\n        }\n\n        if (this.type === 'Range') {\n          event.target.previousSibling.classList.contains(classNames.sliderHandle) ? this.activeHandle = 2 : this.activeHandle = 1;\n        }\n\n        this.getHandle().focus();\n        this.tooltipToggle(this.getHandle());\n      }\n    }\n\n    this.closeTooltip();\n    this.changeEvent('changed', event);\n  };\n\n  Slider.prototype.hover = function (event) {\n    if (!isNullOrUndefined(event)) {\n      if (event.type === 'mouseover' || event.type === 'touchmove' || event.type === 'mousemove' || event.type === 'pointermove' || event.type === 'touchstart') {\n        this.sliderContainer.classList.add(classNames.sliderHover);\n      } else {\n        this.sliderContainer.classList.remove(classNames.sliderHover);\n      }\n    }\n  };\n\n  Slider.prototype.sliderFocusOut = function (event) {\n    if (event.relatedTarget !== this.secondHandle && event.relatedTarget !== this.firstHandle && event.relatedTarget !== this.element && event.relatedTarget !== this.firstBtn && event.relatedTarget !== this.secondBtn) {\n      this.closeMaterialTooltip();\n\n      if (this.element.querySelector('.' + classNames.sliderTabHandle)) {\n        this.element.querySelector('.' + classNames.sliderTabHandle).classList.remove(classNames.sliderTabHandle);\n      }\n\n      if (this.element.querySelector('.' + classNames.sliderTabTrack)) {\n        this.element.querySelector('.' + classNames.sliderTabTrack).classList.remove(classNames.sliderTabTrack);\n\n        if ((this.type === 'Range' || this.type === 'MinRange') && this.element.querySelector('.' + classNames.sliderTabRange)) {\n          this.element.querySelector('.' + classNames.sliderTabRange).classList.remove(classNames.sliderTabRange);\n        }\n      }\n\n      this.hiddenInput.focus();\n      this.hiddenInput.blur();\n      this.isElementFocused = false;\n    }\n  };\n\n  Slider.prototype.removeElement = function (element) {\n    if (element.parentNode) {\n      element.parentNode.removeChild(element);\n    }\n  };\n\n  Slider.prototype.changeSliderType = function (type, args) {\n    if (this.isMaterialTooltip && this.materialHandle) {\n      this.sliderContainer.classList.remove(classNames.materialSlider);\n      this.removeElement(this.materialHandle);\n      this.materialHandle = undefined;\n    }\n\n    this.removeElement(this.firstHandle);\n    this.firstHandle = undefined;\n\n    if (type !== 'Default') {\n      if (type === 'Range') {\n        this.removeElement(this.secondHandle);\n        this.secondHandle = undefined;\n      }\n\n      this.removeElement(this.rangeBar);\n      this.rangeBar = undefined;\n    }\n\n    if (this.tooltip.isVisible && !isNullOrUndefined(this.tooltipObj)) {\n      this.tooltipObj.destroy();\n      this.tooltipElement = undefined;\n      this.tooltipCollidedPosition = undefined;\n    }\n\n    if (this.limits.enabled) {\n      if (type === 'MinRange' || type === 'Default') {\n        if (!isNullOrUndefined(this.limitBarFirst)) {\n          this.removeElement(this.limitBarFirst);\n          this.limitBarFirst = undefined;\n        }\n      } else {\n        if (!isNullOrUndefined(this.limitBarSecond)) {\n          this.removeElement(this.limitBarSecond);\n          this.limitBarSecond = undefined;\n        }\n      }\n    }\n\n    this.activeHandle = 1;\n    this.getThemeInitialization();\n\n    if (this.type === 'Range') {\n      this.rangeValueUpdate();\n    }\n\n    this.createRangeBar();\n\n    if (this.limits.enabled) {\n      this.createLimitBar();\n    }\n\n    this.setHandler();\n    this.setOrientClass();\n    this.wireFirstHandleEvt(false);\n\n    if (this.type === 'Range') {\n      this.wireSecondHandleEvt(false);\n    }\n\n    this.setValue();\n\n    if (this.tooltip.isVisible) {\n      this.renderTooltip();\n      this.wireMaterialTooltipEvent(false);\n    }\n\n    this.setBarColor();\n\n    if (!isBlazor() && !this.isServerRendered || args !== 'tooltip') {\n      this.updateConfig();\n    }\n  };\n\n  Slider.prototype.changeRtl = function () {\n    if (!this.enableRtl && this.type === 'Range') {\n      this.value = [this.handleVal2, this.handleVal1];\n    }\n\n    this.updateConfig();\n\n    if (this.tooltip.isVisible) {\n      this.tooltipObj.refresh(this.firstHandle);\n    }\n\n    if (this.showButtons) {\n      var enabledRTL = this.enableRtl && this.orientation !== 'Vertical';\n      attributes(enabledRTL ? this.secondBtn : this.firstBtn, {\n        'aria-label': 'Decrease',\n        title: 'Decrease'\n      });\n      attributes(enabledRTL ? this.firstBtn : this.secondBtn, {\n        'aria-label': 'Increase',\n        title: 'Increase'\n      });\n    }\n  };\n\n  Slider.prototype.changeOrientation = function () {\n    this.changeSliderType(this.type, 'null');\n  };\n\n  Slider.prototype.updateConfig = function () {\n    this.setEnableRTL();\n    this.setValue();\n\n    if (this.tooltip.isVisible) {\n      if (!isBlazor()) {\n        this.refreshTooltip(this.tooltipTarget);\n      }\n    }\n\n    if (this.ticks.placement !== 'None') {\n      if (this.ul) {\n        this.removeElement(this.ul);\n        this.ul = undefined;\n        this.renderScale();\n      }\n    }\n\n    this.limitsPropertyChange();\n  };\n\n  Slider.prototype.limitsPropertyChange = function () {\n    if (this.limits.enabled) {\n      if (isNullOrUndefined(this.limitBarFirst) && this.type !== 'Range') {\n        this.createLimitBar();\n      }\n\n      if (isNullOrUndefined(this.limitBarFirst) && isNullOrUndefined(this.limitBarSecond) && this.type === 'Range') {\n        this.createLimitBar();\n      }\n\n      this.setLimitBar();\n      this.setValue();\n    } else {\n      if (!isNullOrUndefined(this.limitBarFirst)) {\n        detach(this.limitBarFirst);\n      }\n\n      if (!isNullOrUndefined(this.limitBarSecond)) {\n        detach(this.limitBarSecond);\n      }\n    }\n  };\n  /**\n   * Get the properties to be maintained in the persisted state.\n   * @private\n   */\n\n\n  Slider.prototype.getPersistData = function () {\n    var keyEntity = ['value'];\n    return this.addOnPersist(keyEntity);\n  };\n  /**\n   * Removes the component from the DOM and detaches all its related event handlers.\n   * Also it removes the attributes and classes.\n   * @method destroy\n   * @return {void}\n   */\n\n\n  Slider.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    this.unwireEvents();\n    window.removeEventListener('resize', this.onresize);\n    removeClass([this.sliderContainer], [classNames.sliderDisabled]);\n    this.firstHandle.removeAttribute('aria-orientation');\n\n    if (this.type === 'Range') {\n      this.secondHandle.removeAttribute('aria-orientation');\n    }\n\n    if (!isBlazor() && !this.isServerRendered) {\n      this.sliderContainer.parentNode.insertBefore(this.element, this.sliderContainer);\n      detach(this.sliderContainer);\n    }\n\n    if (this.tooltip.isVisible) {\n      this.tooltipObj.destroy();\n    }\n\n    if (!isBlazor() && !this.isServerRendered) {\n      this.element.innerHTML = '';\n    }\n  };\n  /**\n   * Calls internally if any of the property value is changed.\n   * @private\n   */\n  // tslint:disable-next-line\n\n\n  Slider.prototype.onPropertyChanged = function (newProp, oldProp) {\n    var _this = this;\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'cssClass':\n          this.setCSSClass(oldProp.cssClass);\n          break;\n\n        case 'value':\n          if (newProp && oldProp) {\n            var value = isNullOrUndefined(newProp.value) ? this.type === 'Range' ? [this.min, this.max] : this.min : newProp.value;\n            this.setProperties({\n              'value': value\n            }, true);\n\n            if (!isNullOrUndefined(oldProp.value) && oldProp.value.toString() !== value.toString()) {\n              this.setValue();\n\n              if (!isBlazor() || !this.isServerRendered) {\n                this.refreshTooltip(this.tooltipTarget);\n              }\n\n              if (this.type === 'Range') {\n                if (isNullOrUndefined(newProp.value) || oldProp.value[1] === value[1]) {\n                  this.activeHandle = 1;\n                } else {\n                  this.activeHandle = 2;\n                }\n              }\n            }\n          }\n\n          break;\n\n        case 'min':\n        case 'step':\n        case 'max':\n          if (isBlazor() && this.isServerRendered) {\n            this.isServerRendered = false;\n          }\n\n          this.setMinMaxValue();\n\n          if (isBlazor() && !this.isServerRendered) {\n            this.isServerRendered = true;\n          }\n\n          break;\n\n        case 'tooltip':\n          if (isBlazor() && this.isServerRendered) {\n            this.isServerRendered = false;\n          }\n\n          if (!isNullOrUndefined(newProp.tooltip) && !isNullOrUndefined(oldProp.tooltip)) {\n            this.setTooltip(prop);\n          }\n\n          if (isBlazor() && !this.isServerRendered) {\n            this.isServerRendered = true;\n          }\n\n          break;\n\n        case 'type':\n          if (isBlazor() && this.isServerRendered) {\n            this.isServerRendered = false;\n          }\n\n          if (!isNullOrUndefined(oldProp) && Object.keys(oldProp).length && !isNullOrUndefined(oldProp.type)) {\n            this.changeSliderType(oldProp.type, prop);\n            this.setZindex();\n          }\n\n          if (isBlazor() && !this.isServerRendered) {\n            this.isServerRendered = true;\n          }\n\n          break;\n\n        case 'enableRtl':\n          if (isBlazor() && this.isServerRendered) {\n            if (this.isMaterialTooltip) {\n              this.sliderContainer.classList.add(classNames.materialSlider);\n            }\n\n            this.isServerRendered = false;\n          }\n\n          if (oldProp.enableRtl !== newProp.enableRtl && this.orientation !== 'Vertical') {\n            this.rtl = oldProp.enableRtl;\n            this.changeRtl();\n          }\n\n          if (isBlazor() && !this.isServerRendered) {\n            this.isServerRendered = true;\n          }\n\n          break;\n\n        case 'limits':\n          this.limitsPropertyChange();\n          break;\n\n        case 'orientation':\n          if (isBlazor() && this.isServerRendered) {\n            this.isServerRendered = false;\n          }\n\n          this.changeOrientation();\n\n          if (isBlazor() && !this.isServerRendered) {\n            this.isServerRendered = true;\n          }\n\n          break;\n\n        case 'ticks':\n          if (!isNullOrUndefined(this.sliderContainer.querySelector('.' + classNames.scale))) {\n            if (!isBlazor() || !this.isServerRendered) {\n              detach(this.ul);\n            }\n\n            Array.prototype.forEach.call(this.sliderContainer.classList, function (className) {\n              if (className.match(/e-scale-/)) {\n                _this.sliderContainer.classList.remove(className);\n              }\n            });\n          }\n\n          if (this.ticks.placement !== 'None') {\n            this.renderScale();\n            this.setZindex();\n          }\n\n          break;\n\n        case 'locale':\n          if (this.showButtons) {\n            this.buttonTitle();\n          }\n\n          break;\n\n        case 'showButtons':\n          if (newProp.showButtons) {\n            this.setButtons();\n            this.reposition();\n\n            if (this.enabled && !this.readonly) {\n              this.wireButtonEvt(false);\n            }\n          } else {\n            if (!isBlazor() || !this.isServerRendered) {\n              if (this.firstBtn && this.secondBtn) {\n                this.sliderContainer.removeChild(this.firstBtn);\n                this.sliderContainer.removeChild(this.secondBtn);\n                this.sliderContainer.classList.remove(classNames.sliderButtonClass);\n                this.firstBtn = undefined;\n                this.secondBtn = undefined;\n                this.reposition();\n              }\n            }\n          }\n\n          if (isBlazor() && this.isServerRendered) {\n            if (this.isMaterialTooltip) {\n              this.sliderContainer.classList.add(classNames.materialSlider);\n            }\n          }\n\n          break;\n\n        case 'enabled':\n          this.setEnabled();\n\n          if (isBlazor() && this.isServerRendered) {\n            if (this.isMaterialTooltip) {\n              this.sliderContainer.classList.add(classNames.materialSlider);\n            }\n          }\n\n          break;\n\n        case 'readonly':\n          this.setReadOnly();\n\n          if (isBlazor() && this.isServerRendered) {\n            if (this.isMaterialTooltip) {\n              this.sliderContainer.classList.add(classNames.materialSlider);\n            }\n          }\n\n          break;\n\n        case 'customValues':\n          if (isBlazor() && this.isServerRendered) {\n            this.isServerRendered = false;\n          }\n\n          this.setValue();\n          this.reposition();\n\n          if (isBlazor() && !this.isServerRendered) {\n            this.isServerRendered = true;\n          }\n\n          break;\n\n        case 'colorRange':\n          if (isBlazor() && this.isServerRendered) {\n            this.isServerRendered = false;\n          }\n\n          this.reposition();\n\n          if (isBlazor() && !this.isServerRendered) {\n            this.isServerRendered = true;\n          }\n\n          break;\n\n        case 'width':\n          this.setElementWidth(newProp.width);\n          this.setMinMaxValue();\n\n          if (this.limits) {\n            this.limitsPropertyChange();\n          }\n\n          break;\n      }\n    }\n  };\n\n  Slider.prototype.setReadOnly = function () {\n    if (this.readonly) {\n      this.unwireEvents();\n      this.sliderContainer.classList.add(classNames.readonly);\n    } else {\n      this.wireEvents();\n      this.sliderContainer.classList.remove(classNames.readonly);\n    }\n  };\n\n  Slider.prototype.setMinMaxValue = function () {\n    var _this = this;\n\n    this.setValue();\n\n    if (!isBlazor()) {\n      this.refreshTooltip(this.tooltipTarget);\n    }\n\n    if (!isNullOrUndefined(this.sliderContainer.querySelector('.' + classNames.scale))) {\n      if (this.ul) {\n        detach(this.ul);\n        Array.prototype.forEach.call(this.sliderContainer.classList, function (className) {\n          if (className.match(/e-scale-/)) {\n            _this.sliderContainer.classList.remove(className);\n          }\n        });\n      }\n    }\n\n    if (this.ticks.placement !== 'None') {\n      this.renderScale();\n      this.setZindex();\n    }\n  };\n\n  Slider.prototype.setZindex = function () {\n    this.zIndex = 6;\n\n    if (!isNullOrUndefined(this.ticks) && this.ticks.placement !== 'None') {\n      this.ul.style.zIndex = this.zIndex + -7 + '';\n      this.element.style.zIndex = this.zIndex + 2 + '';\n    }\n\n    if (!this.isMaterial && !isNullOrUndefined(this.ticks) && this.ticks.placement === 'Both') {\n      this.element.style.zIndex = this.zIndex + 2 + '';\n    }\n\n    this.firstHandle.style.zIndex = this.zIndex + 3 + '';\n\n    if (this.type === 'Range') {\n      this.secondHandle.style.zIndex = this.zIndex + 4 + '';\n    }\n  };\n\n  Slider.prototype.setTooltip = function (args) {\n    this.changeSliderType(this.type, args);\n  };\n\n  Slider.prototype.setBarColor = function () {\n    var trackPosition;\n    var trackClassName;\n    var child = this.sliderTrack.lastElementChild;\n\n    while (child) {\n      this.sliderTrack.removeChild(child);\n      child = this.sliderTrack.lastElementChild;\n    }\n\n    for (var i = 0; i < this.colorRange.length; i++) {\n      if (!isNullOrUndefined(this.colorRange[i].start) && !isNullOrUndefined(this.colorRange[i].end)) {\n        if (this.colorRange[i].end > this.colorRange[i].start) {\n          if (this.colorRange[i].start < this.min) {\n            this.colorRange[i].start = this.min;\n          }\n\n          if (this.colorRange[i].end > this.max) {\n            this.colorRange[i].end = this.max;\n          }\n\n          var startingPosition = this.checkHandlePosition(this.colorRange[i].start);\n          var endPosition = this.checkHandlePosition(this.colorRange[i].end);\n          var trackContainer = this.createElement('div');\n          trackContainer.style.backgroundColor = this.colorRange[i].color;\n          trackContainer.style.border = '1px solid ' + this.colorRange[i].color;\n\n          if (this.orientation === 'Horizontal') {\n            trackClassName = classNames.sliderHorizantalColor;\n\n            if (this.enableRtl) {\n              if (isNullOrUndefined(this.customValues)) {\n                trackPosition = this.checkHandlePosition(this.max) - this.checkHandlePosition(this.colorRange[i].end);\n              } else {\n                trackPosition = this.checkHandlePosition(this.customValues.length - this.colorRange[i].end - 1);\n              }\n            } else {\n              trackPosition = this.checkHandlePosition(this.colorRange[i].start);\n            }\n\n            trackContainer.style.width = endPosition - startingPosition + 'px';\n            trackContainer.style.left = trackPosition + 'px';\n          } else {\n            trackClassName = classNames.sliderVerticalColor;\n            trackPosition = this.checkHandlePosition(this.colorRange[i].start);\n            trackContainer.style.height = endPosition - startingPosition + 'px';\n            trackContainer.style.bottom = trackPosition + 'px';\n          }\n\n          trackContainer.classList.add(trackClassName);\n          this.sliderTrack.appendChild(trackContainer);\n        }\n      }\n    }\n  };\n  /**\n   * Gets the component name\n   * @private\n   */\n\n\n  Slider.prototype.getModuleName = function () {\n    return 'slider';\n  };\n\n  __decorate([Property(null)], Slider.prototype, \"value\", void 0);\n\n  __decorate([Property(null)], Slider.prototype, \"customValues\", void 0);\n\n  __decorate([Property(1)], Slider.prototype, \"step\", void 0);\n\n  __decorate([Property(null)], Slider.prototype, \"width\", void 0);\n\n  __decorate([Property(0)], Slider.prototype, \"min\", void 0);\n\n  __decorate([Property(100)], Slider.prototype, \"max\", void 0);\n\n  __decorate([Property(false)], Slider.prototype, \"readonly\", void 0);\n\n  __decorate([Property('Default')], Slider.prototype, \"type\", void 0);\n\n  __decorate([Collection([{}], ColorRangeData)], Slider.prototype, \"colorRange\", void 0);\n\n  __decorate([Complex({}, TicksData)], Slider.prototype, \"ticks\", void 0);\n\n  __decorate([Complex({}, LimitData)], Slider.prototype, \"limits\", void 0);\n\n  __decorate([Property(true)], Slider.prototype, \"enabled\", void 0);\n\n  __decorate([Complex({}, TooltipData)], Slider.prototype, \"tooltip\", void 0);\n\n  __decorate([Property(false)], Slider.prototype, \"showButtons\", void 0);\n\n  __decorate([Property(true)], Slider.prototype, \"enableAnimation\", void 0);\n\n  __decorate([Property('Horizontal')], Slider.prototype, \"orientation\", void 0);\n\n  __decorate([Property('')], Slider.prototype, \"cssClass\", void 0);\n\n  __decorate([Property(false)], Slider.prototype, \"enableHtmlSanitizer\", void 0);\n\n  __decorate([Event()], Slider.prototype, \"created\", void 0);\n\n  __decorate([Event()], Slider.prototype, \"change\", void 0);\n\n  __decorate([Event()], Slider.prototype, \"changed\", void 0);\n\n  __decorate([Event()], Slider.prototype, \"renderingTicks\", void 0);\n\n  __decorate([Event()], Slider.prototype, \"renderedTicks\", void 0);\n\n  __decorate([Event()], Slider.prototype, \"tooltipChange\", void 0);\n\n  Slider = __decorate([NotifyPropertyChanges], Slider);\n  return Slider;\n}(Component);\n\nexport { Slider };","map":null,"metadata":{},"sourceType":"module"}