{"ast":null,"code":"/**\r\n * DevExtreme (ui/file_manager/ui.file_manager.adaptivity.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _window = require(\"../../core/utils/window\");\n\nvar _ui = require(\"../widget/ui.widget\");\n\nvar _ui2 = _interopRequireDefault(_ui);\n\nvar _ui3 = require(\"../drawer/ui.drawer\");\n\nvar _ui4 = _interopRequireDefault(_ui3);\n\nvar _splitter = require(\"../splitter\");\n\nvar _splitter2 = _interopRequireDefault(_splitter);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nfunction _get(target, property, receiver) {\n  if (\"undefined\" !== typeof Reflect && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function (target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) {\n        return;\n      }\n\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n\n    if (null === object) {\n      break;\n    }\n  }\n\n  return object;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (\"function\" !== typeof superClass && null !== superClass) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (superClass) {\n    _setPrototypeOf(subClass, superClass);\n  }\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function (o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var result,\n        Super = _getPrototypeOf(Derived);\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (\"object\" === _typeof(call) || \"function\" === typeof call)) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (void 0 === self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (\"undefined\" === typeof Reflect || !Reflect.construct) {\n    return false;\n  }\n\n  if (Reflect.construct.sham) {\n    return false;\n  }\n\n  if (\"function\" === typeof Proxy) {\n    return true;\n  }\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function (o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar window = (0, _window.getWindow)();\nvar ADAPTIVE_STATE_SCREEN_WIDTH = 573;\nvar FILE_MANAGER_ADAPTIVITY_DRAWER_PANEL_CLASS = \"dx-filemanager-adaptivity-drawer-panel\";\nvar DRAWER_PANEL_CONTENT_INITIAL = \"dx-drawer-panel-content-initial\";\n\nvar FileManagerAdaptivityControl = function (_Widget) {\n  _inherits(FileManagerAdaptivityControl, _Widget);\n\n  var _super = _createSuper(FileManagerAdaptivityControl);\n\n  function FileManagerAdaptivityControl() {\n    _classCallCheck(this, FileManagerAdaptivityControl);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FileManagerAdaptivityControl, [{\n    key: \"_initMarkup\",\n    value: function () {\n      _get(_getPrototypeOf(FileManagerAdaptivityControl.prototype), \"_initMarkup\", this).call(this);\n\n      this._initActions();\n\n      this._isInAdaptiveState = false;\n      var $drawer = (0, _renderer2.default)(\"<div>\").appendTo(this.$element());\n      (0, _renderer2.default)(\"<div>\").addClass(FILE_MANAGER_ADAPTIVITY_DRAWER_PANEL_CLASS).appendTo($drawer);\n      this._drawer = this._createComponent($drawer, _ui4.default);\n\n      this._drawer.option({\n        opened: true,\n        template: this._createDrawerTemplate.bind(this)\n      });\n\n      (0, _renderer2.default)(this._drawer.content()).addClass(DRAWER_PANEL_CONTENT_INITIAL);\n      var $drawerContent = $drawer.find(\".\".concat(FILE_MANAGER_ADAPTIVITY_DRAWER_PANEL_CLASS)).first();\n      var contentRenderer = this.option(\"contentTemplate\");\n\n      if ((0, _type.isFunction)(contentRenderer)) {\n        contentRenderer($drawerContent);\n      }\n    }\n  }, {\n    key: \"_createDrawerTemplate\",\n    value: function (container) {\n      this.option(\"drawerTemplate\")(container);\n      this._splitter = this._createComponent(\"<div>\", _splitter2.default, {\n        container: this.$element(),\n        leftElement: (0, _renderer2.default)(this._drawer.content()),\n        rightElement: (0, _renderer2.default)(this._drawer.viewContent()),\n        onApplyPanelSize: this._onApplyPanelSize.bind(this)\n      });\n\n      this._splitter.$element().appendTo(container);\n    }\n  }, {\n    key: \"_render\",\n    value: function () {\n      _get(_getPrototypeOf(FileManagerAdaptivityControl.prototype), \"_render\", this).call(this);\n\n      this._checkAdaptiveState();\n    }\n  }, {\n    key: \"_onApplyPanelSize\",\n    value: function (e) {\n      if (!(0, _window.hasWindow)()) {\n        return;\n      }\n\n      if (!this._splitter.isSplitterMoved()) {\n        this._updateDrawerDimensions();\n\n        return;\n      }\n\n      (0, _renderer2.default)(this._drawer.content()).removeClass(DRAWER_PANEL_CONTENT_INITIAL);\n      (0, _renderer2.default)(this._drawer.content()).css(\"width\", e.leftPanelWidth);\n\n      this._drawer._initSize();\n\n      this._drawer.resizeContent();\n    }\n  }, {\n    key: \"_updateDrawerDimensions\",\n    value: function () {\n      (0, _renderer2.default)(this._drawer.content()).css(\"width\", \"\");\n\n      this._drawer._initSize();\n\n      this._drawer._strategy.setPanelSize(true);\n    }\n  }, {\n    key: \"_dimensionChanged\",\n    value: function (dimension) {\n      if (!dimension || \"height\" !== dimension) {\n        this._checkAdaptiveState();\n      }\n    }\n  }, {\n    key: \"_checkAdaptiveState\",\n    value: function () {\n      var oldState = this._isInAdaptiveState;\n      this._isInAdaptiveState = this._isSmallScreen();\n\n      if (oldState !== this._isInAdaptiveState) {\n        this.toggleDrawer(!this._isInAdaptiveState, true);\n\n        this._raiseAdaptiveStateChanged(this._isInAdaptiveState);\n      }\n    }\n  }, {\n    key: \"_isSmallScreen\",\n    value: function () {\n      return (0, _renderer2.default)(window).width() <= ADAPTIVE_STATE_SCREEN_WIDTH;\n    }\n  }, {\n    key: \"_initActions\",\n    value: function () {\n      this._actions = {\n        onAdaptiveStateChanged: this._createActionByOption(\"onAdaptiveStateChanged\")\n      };\n    }\n  }, {\n    key: \"_raiseAdaptiveStateChanged\",\n    value: function (enabled) {\n      this._actions.onAdaptiveStateChanged({\n        enabled: enabled\n      });\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function () {\n      return (0, _extend.extend)(_get(_getPrototypeOf(FileManagerAdaptivityControl.prototype), \"_getDefaultOptions\", this).call(this), {\n        drawerTemplate: null,\n        contentTemplate: null,\n        onAdaptiveStateChanged: null\n      });\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function (args) {\n      var name = args.name;\n\n      switch (name) {\n        case \"drawerTemplate\":\n        case \"contentTemplate\":\n          this.repaint();\n          break;\n\n        case \"onAdaptiveStateChanged\":\n          this._actions[name] = this._createActionByOption(name);\n          break;\n\n        default:\n          _get(_getPrototypeOf(FileManagerAdaptivityControl.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }, {\n    key: \"isInAdaptiveState\",\n    value: function () {\n      return this._isInAdaptiveState;\n    }\n  }, {\n    key: \"toggleDrawer\",\n    value: function (showing, skipAnimation) {\n      this._drawer.option(\"animationEnabled\", !skipAnimation);\n\n      this._drawer.toggle(showing);\n\n      var isSplitterActive = this._drawer.option(\"opened\") && !this.isInAdaptiveState();\n\n      this._splitter.toggleState(isSplitterActive);\n    }\n  }]);\n\n  return FileManagerAdaptivityControl;\n}(_ui2.default);\n\nmodule.exports = FileManagerAdaptivityControl;","map":null,"metadata":{},"sourceType":"script"}