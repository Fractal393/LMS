{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _handler = function () {\n  var _ref = (0, _asyncToGenerator3.default)(\n  /*#__PURE__*/\n  _regenerator2.default.mark(function _callee(apiOptions, actions) {\n    var navigateToDir, updateNotifications, getResource, getNotifications, getMessage, notificationId, notificationChildId, prevResourceId, onStart, onProgress, resource, file, response, newResource, notifications, notification, notificationChildrenCount, newNotifications;\n    return _regenerator2.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            navigateToDir = actions.navigateToDir, updateNotifications = actions.updateNotifications, getResource = actions.getResource, getNotifications = actions.getNotifications;\n            getMessage = _translations2.default.bind(null, apiOptions.locale);\n            notificationId = label;\n            notificationChildId = (0, _nanoid2.default)();\n            prevResourceId = getResource().id;\n\n            onStart = function onStart(_ref2) {\n              var name = _ref2.name,\n                  size = _ref2.size;\n              var notifications = getNotifications();\n\n              var notification = _notifications2.default.getNotification(notifications, notificationId);\n\n              var childElement = {\n                elementType: 'NotificationProgressItem',\n                elementProps: {\n                  title: name,\n                  progress: 0,\n                  icon: (0, _icons.getIcon)({\n                    name: name\n                  })\n                }\n              };\n\n              var newChildren = _notifications2.default.addChild(notification && notification.children || [], notificationChildId, childElement);\n\n              var newNotification = {\n                title: newChildren.length > 1 ? getMessage('uploadingItems', {\n                  quantity: newChildren.length\n                }) : getMessage('uploadingItem'),\n                children: newChildren\n              };\n              var newNotifications = notification ? _notifications2.default.updateNotification(notifications, notificationId, newNotification) : _notifications2.default.addNotification(notifications, notificationId, newNotification);\n              updateNotifications(newNotifications);\n            };\n\n            onProgress = function onProgress(progress) {\n              var notifications = getNotifications();\n\n              var notification = _notifications2.default.getNotification(notifications, notificationId);\n\n              var child = _notifications2.default.getChild(notification.children, notificationChildId);\n\n              var newChild = (0, _extends3.default)({}, child, {\n                element: (0, _extends3.default)({}, child.element, {\n                  elementProps: (0, _extends3.default)({}, child.element.elementProps, {\n                    progress: progress\n                  })\n                })\n              });\n\n              var newChildren = _notifications2.default.updateChild(notification.children, notificationChildId, newChild);\n\n              var newNotifications = _notifications2.default.updateNotification(notifications, notificationId, {\n                children: newChildren\n              });\n\n              updateNotifications(newNotifications);\n            };\n\n            resource = getResource();\n            _context.prev = 8;\n            _context.next = 11;\n            return (0, _upload.readLocalFile)(true);\n\n          case 11:\n            file = _context.sent;\n            onStart({\n              name: file.name,\n              size: file.file.size\n            });\n            _context.next = 15;\n            return _api2.default.uploadFileToId({\n              apiOptions: apiOptions,\n              parentId: resource.id,\n              file: file,\n              onProgress: onProgress\n            });\n\n          case 15:\n            response = _context.sent;\n            newResource = (0, _common.normalizeResource)(response.body[0]);\n            notifications = getNotifications();\n            notification = _notifications2.default.getNotification(notifications, notificationId);\n            notificationChildrenCount = notification.children.length;\n            newNotifications = void 0;\n\n            if (notificationChildrenCount > 1) {\n              newNotifications = _notifications2.default.updateNotification(notifications, notificationId, {\n                children: _notifications2.default.removeChild(notification.children, notificationChildId)\n              });\n            } else {\n              newNotifications = _notifications2.default.removeNotification(notifications, notificationId);\n            }\n\n            updateNotifications(newNotifications);\n\n            if (prevResourceId === resource.id) {\n              navigateToDir(resource.id, newResource.id, false);\n            }\n\n            _context.next = 30;\n            break;\n\n          case 26:\n            _context.prev = 26;\n            _context.t0 = _context['catch'](8);\n            (0, _onFailError2.default)({\n              getNotifications: getNotifications,\n              label: getMessage(label),\n              notificationId: notificationId,\n              updateNotifications: updateNotifications\n            });\n            console.log(_context.t0);\n\n          case 30:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, this, [[8, 26]]);\n  }));\n\n  return function _handler(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar _api = require('../api');\n\nvar _api2 = _interopRequireDefault(_api);\n\nvar _notifications = require('../utils/notifications');\n\nvar _notifications2 = _interopRequireDefault(_notifications);\n\nvar _icons = require('../icons');\n\nvar _nanoid = require('nanoid');\n\nvar _nanoid2 = _interopRequireDefault(_nanoid);\n\nvar _onFailError = require('../utils/onFailError');\n\nvar _onFailError2 = _interopRequireDefault(_onFailError);\n\nvar _upload = require('../utils/upload');\n\nvar _iconsSvg = require('../icons-svg');\n\nvar _iconsSvg2 = _interopRequireDefault(_iconsSvg);\n\nvar _translations = require('../translations');\n\nvar _translations2 = _interopRequireDefault(_translations);\n\nvar _common = require('../utils/common');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar label = 'upload';\n\nexports.default = function (apiOptions, actions) {\n  var localeLabel = (0, _translations2.default)(apiOptions.locale, label);\n  var getResource = actions.getResource;\n  return {\n    id: label,\n    icon: {\n      svg: _iconsSvg2.default.fileUpload\n    },\n    label: localeLabel,\n    shouldBeAvailable: function shouldBeAvailable(apiOptions) {\n      var resource = getResource();\n\n      if (!resource || !resource.capabilities) {\n        return false;\n      }\n\n      return resource.capabilities.canAddChildren;\n    },\n    availableInContexts: ['files-view', 'new-button'],\n    handler: function handler() {\n      return _handler(apiOptions, actions);\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}