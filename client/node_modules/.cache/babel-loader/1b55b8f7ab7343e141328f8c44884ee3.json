{"ast":null,"code":"import { extend, isNullOrUndefined, isBlazor } from '@syncfusion/ej2-base';\nimport * as events from '../base/constant';\nimport { isActionPrevent } from '../base/util';\n/**\n * The `Search` module is used to handle search action.\n */\n\nvar Search =\n/** @class */\nfunction () {\n  /**\n   * Constructor for Grid search module.\n   * @hidden\n   */\n  function Search(parent) {\n    this.parent = parent;\n    this.addEventListener();\n  }\n  /**\n   * Searches Grid records by given key.\n   *\n   * > You can customize the default search action by using [`searchSettings`](grid/#searchsettings/).\n   * @param  {string} searchString - Defines the key.\n   * @return {void}\n   */\n\n\n  Search.prototype.search = function (searchString) {\n    var gObj = this.parent;\n    searchString = isNullOrUndefined(searchString) ? '' : searchString;\n\n    if (isActionPrevent(gObj)) {\n      gObj.notify(events.preventBatch, {\n        instance: this,\n        handler: this.search,\n        arg1: searchString\n      });\n      return;\n    }\n\n    if (searchString !== gObj.searchSettings.key) {\n      gObj.searchSettings.key = searchString.toString();\n      gObj.dataBind();\n    } else if (this.refreshSearch) {\n      gObj.refresh();\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  Search.prototype.addEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.on(events.inBoundModelChanged, this.onPropertyChanged, this);\n    this.parent.on(events.searchComplete, this.onSearchComplete, this);\n    this.parent.on(events.destroy, this.destroy, this);\n    this.actionCompleteFunc = this.onActionComplete.bind(this);\n    this.parent.addEventListener(events.actionComplete, this.actionCompleteFunc);\n    this.parent.on(events.cancelBegin, this.cancelBeginEvent, this);\n  };\n  /**\n   * @hidden\n   */\n\n\n  Search.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(events.inBoundModelChanged, this.onPropertyChanged);\n    this.parent.off(events.searchComplete, this.onSearchComplete);\n    this.parent.off(events.destroy, this.destroy);\n    this.parent.removeEventListener(events.actionComplete, this.actionCompleteFunc);\n    this.parent.off(events.cancelBegin, this.cancelBeginEvent);\n  };\n  /**\n   * To destroy the print\n   * @return {void}\n   * @hidden\n   */\n\n\n  Search.prototype.destroy = function () {\n    this.removeEventListener();\n  };\n  /**\n   * @hidden\n   */\n\n\n  Search.prototype.onPropertyChanged = function (e) {\n    if (e.module !== this.getModuleName()) {\n      return;\n    }\n\n    if (!isNullOrUndefined(e.properties.key)) {\n      this.parent.notify(events.modelChanged, {\n        requestType: 'searching',\n        type: events.actionBegin,\n        searchString: this.parent.searchSettings.key\n      });\n    } else {\n      this.parent.notify(events.modelChanged, {\n        requestType: 'searching',\n        type: events.actionBegin\n      });\n    }\n  };\n  /**\n   * The function used to trigger onActionComplete\n   * @return {void}\n   * @hidden\n   */\n\n\n  Search.prototype.onSearchComplete = function (e) {\n    if (isBlazor() && !this.parent.isJsComponent) {\n      e.rows = null;\n    }\n\n    this.parent.trigger(events.actionComplete, extend(e, {\n      searchString: this.parent.searchSettings.key,\n      requestType: 'searching',\n      type: events.actionComplete\n    }));\n  };\n\n  Search.prototype.onActionComplete = function (e) {\n    this.refreshSearch = e.requestType !== 'searching';\n  };\n\n  Search.prototype.cancelBeginEvent = function (e) {\n    if (e.requestType === 'searching') {\n      this.parent.setProperties({\n        searchSettings: {\n          key: ''\n        }\n      }, true);\n    }\n  };\n  /**\n   * For internal use only - Get the module name.\n   * @private\n   */\n\n\n  Search.prototype.getModuleName = function () {\n    return 'search';\n  };\n\n  return Search;\n}();\n\nexport { Search };","map":null,"metadata":{},"sourceType":"module"}