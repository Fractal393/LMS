{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { PdfFont } from './pdf-font';\nimport { PdfSubSuperScript } from './enum';\nimport { PdfArray } from './../../primitives/pdf-array';\n/**\n * `Metrics` of the font.\n * @private\n */\n\nvar PdfFontMetrics =\n/** @class */\nfunction () {\n  function PdfFontMetrics() {\n    /**\n     * `Line gap`.\n     * @private\n     */\n    this.lineGap = 0;\n  } //  Public methods\n\n  /**\n   * Returns `ascent` taking into consideration font`s size.\n   * @private\n   */\n\n\n  PdfFontMetrics.prototype.getAscent = function (format) {\n    var returnValue = this.ascent * PdfFont.charSizeMultiplier * this.getSize(format);\n    return returnValue;\n  };\n  /**\n   * Returns `descent` taking into consideration font`s size.\n   * @private\n   */\n\n\n  PdfFontMetrics.prototype.getDescent = function (format) {\n    var returnValue = this.descent * PdfFont.charSizeMultiplier * this.getSize(format);\n    return returnValue;\n  };\n  /**\n   * Returns `Line gap` taking into consideration font`s size.\n   * @private\n   */\n\n\n  PdfFontMetrics.prototype.getLineGap = function (format) {\n    var returnValue = this.lineGap * PdfFont.charSizeMultiplier * this.getSize(format);\n    return returnValue;\n  };\n  /**\n   * Returns `height` taking into consideration font`s size.\n   * @private\n   */\n\n\n  PdfFontMetrics.prototype.getHeight = function (format) {\n    var height;\n    var clearTypeFonts = ['cambria', 'candara', 'constantia', 'corbel', 'cariadings'];\n    var clearTypeFontCollection = [];\n\n    for (var index = 0; index < clearTypeFonts.length; index++) {\n      var font = clearTypeFonts[index];\n      clearTypeFontCollection.push(font);\n    }\n\n    if (this.getDescent(format) < 0) {\n      // if ((clearTypeFontCollection.indexOf(this.name.toLowerCase()) !== -1) && !this.isUnicodeFont) {\n      //     height = (this.GetAscent(format) - this.GetDescent(format) - this.GetLineGap(format));\n      // } else {\n      height = this.getAscent(format) - this.getDescent(format) + this.getLineGap(format); // }\n    } else {\n      height = this.getAscent(format) + this.getDescent(format) + this.getLineGap(format);\n    }\n\n    return height;\n  };\n  /**\n   * Calculates `size` of the font depending on the subscript/superscript value.\n   * @private\n   */\n\n\n  PdfFontMetrics.prototype.getSize = function (format) {\n    var size = this.size;\n\n    if (format != null) {\n      switch (format.subSuperScript) {\n        case PdfSubSuperScript.SubScript:\n          size /= this.subScriptSizeFactor;\n          break;\n\n        case PdfSubSuperScript.SuperScript:\n          size /= this.superscriptSizeFactor;\n          break;\n      }\n    }\n\n    return size;\n  };\n  /**\n   * `Clones` the metrics.\n   * @private\n   */\n\n\n  PdfFontMetrics.prototype.clone = function () {\n    var metrics = this;\n    metrics.widthTable = WidthTable.clone();\n    return metrics;\n  };\n\n  Object.defineProperty(PdfFontMetrics.prototype, \"widthTable\", {\n    //  Properies\n\n    /**\n     * Gets or sets the `width table`.\n     * @private\n     */\n    get: function () {\n      return this.internalWidthTable;\n    },\n    set: function (value) {\n      this.internalWidthTable = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfFontMetrics;\n}();\n\nexport { PdfFontMetrics };\n\nvar WidthTable =\n/** @class */\nfunction () {\n  function WidthTable() {}\n  /**\n   * Static `clones` this instance of the WidthTable class.\n   * @private\n   */\n\n\n  WidthTable.clone = function () {\n    return null;\n  };\n\n  return WidthTable;\n}();\n\nexport { WidthTable };\n\nvar StandardWidthTable =\n/** @class */\nfunction (_super) {\n  __extends(StandardWidthTable, _super); // Constructors\n\n  /**\n   * Initializes a new instance of the `StandardWidthTable` class.\n   * @private\n   */\n\n\n  function StandardWidthTable(widths) {\n    var _this = _super.call(this) || this;\n\n    if (widths == null) {\n      throw new Error('ArgumentNullException:widths');\n    }\n\n    _this.widths = widths;\n    return _this;\n  } //Properties\n\n  /**\n   * Gets the `32 bit number` at the specified index.\n   * @private\n   */\n\n\n  StandardWidthTable.prototype.items = function (index) {\n    if (index < 0 || index >= this.widths.length) {\n      throw new Error('ArgumentOutOfRangeException:index, The character is not supported by the font.');\n    }\n\n    var result = this.widths[index];\n    return result;\n  };\n\n  Object.defineProperty(StandardWidthTable.prototype, \"length\", {\n    /**\n     * Gets the `length` of the internal array.\n     * @private\n     */\n    get: function () {\n      return this.widths.length;\n    },\n    enumerable: true,\n    configurable: true\n  }); //Overrides\n\n  /**\n   * `Clones` this instance of the WidthTable class.\n   * @private\n   */\n\n  StandardWidthTable.prototype.clone = function () {\n    var swt = this;\n    swt.widths = this.widths;\n    return swt;\n  };\n  /**\n   * Converts width table to a `PDF array`.\n   * @private\n   */\n\n\n  StandardWidthTable.prototype.toArray = function () {\n    var arr = new PdfArray(this.widths);\n    return arr;\n  };\n\n  return StandardWidthTable;\n}(WidthTable);\n\nexport { StandardWidthTable };","map":null,"metadata":{},"sourceType":"module"}