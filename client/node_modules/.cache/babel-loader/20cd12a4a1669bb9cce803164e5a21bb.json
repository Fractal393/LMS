{"ast":null,"code":"/**\r\n * DevExtreme (core/template_manager.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _renderer = require(\"./renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _type = require(\"./utils/type\");\n\nvar _common = require(\"./utils/common\");\n\nvar _extend = require(\"./utils/extend\");\n\nvar _errors = require(\"./errors\");\n\nvar _dom = require(\"./utils/dom\");\n\nvar _function_template = require(\"./templates/function_template\");\n\nvar _empty_template = require(\"./templates/empty_template\");\n\nvar _inflector = require(\"./utils/inflector\");\n\nvar _template_manager = require(\"./utils/template_manager\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nvar TEXT_NODE = 3;\nvar ANONYMOUS_TEMPLATE_NAME = \"template\";\nvar TEMPLATE_SELECTOR = '[data-options*=\"dxTemplate\"]';\nvar TEMPLATE_WRAPPER_CLASS = \"dx-template-wrapper\";\nvar DEPRECATED_WIDGET_NAMES = {\n  button: true,\n  tabs: true,\n  dropDownMenu: true\n};\nvar DX_POLYMORPH_WIDGET_TEMPLATE = new _function_template.FunctionTemplate(function (_ref) {\n  var model = _ref.model,\n      parent = _ref.parent;\n  var widgetName = model.widget;\n\n  if (!widgetName) {\n    return (0, _renderer2.default)();\n  }\n\n  var widgetElement = (0, _renderer2.default)(\"<div>\");\n  var widgetOptions = model.options || {};\n\n  if (DEPRECATED_WIDGET_NAMES[widgetName]) {\n    var deprecatedName = widgetName;\n    widgetName = (0, _inflector.camelize)(\"dx-\" + widgetName);\n    (0, _errors.log)(\"W0001\", 'dxToolbar - \"widget\" item field', deprecatedName, \"16.1\", \"Use: \" + widgetName + \"instead\");\n  }\n\n  if (parent) {\n    parent._createComponent(widgetElement, widgetName, widgetOptions);\n  } else {\n    widgetElement[widgetName](widgetOptions);\n  }\n\n  return widgetElement;\n});\n\nvar TemplateManager = function () {\n  function TemplateManager(createElement, anonymousTemplateName) {\n    _classCallCheck(this, TemplateManager);\n\n    this._tempTemplates = [];\n    this._defaultTemplates = {};\n    this._anonymousTemplateName = anonymousTemplateName || ANONYMOUS_TEMPLATE_NAME;\n    this._createElement = createElement || _template_manager.defaultCreateElement;\n    this._createTemplateIfNeeded = this._createTemplateIfNeeded.bind(this);\n  }\n\n  _createClass(TemplateManager, [{\n    key: \"addDefaultTemplates\",\n    value: function (templates) {\n      this._defaultTemplates = (0, _extend.extend)({}, this._defaultTemplates, templates);\n    }\n  }, {\n    key: \"dispose\",\n    value: function () {\n      this._tempTemplates.forEach(function (tempTemplate) {\n        tempTemplate.template.dispose && tempTemplate.template.dispose();\n      });\n\n      this._tempTemplates = [];\n    }\n  }, {\n    key: \"extractTemplates\",\n    value: function ($el) {\n      var templates = this._extractTemplates($el);\n\n      var anonymousTemplateMeta = this._extractAnonymousTemplate($el);\n\n      return {\n        templates: templates,\n        anonymousTemplateMeta: anonymousTemplateMeta\n      };\n    }\n  }, {\n    key: \"_extractTemplates\",\n    value: function ($el) {\n      var templateElements = $el.contents().filter(TEMPLATE_SELECTOR);\n      var templatesMap = {};\n      templateElements.each(function (_, template) {\n        var templateOptions = (0, _dom.getElementOptions)(template).dxTemplate;\n\n        if (!templateOptions) {\n          return;\n        }\n\n        if (!templateOptions.name) {\n          throw (0, _errors.Error)(\"E0023\");\n        }\n\n        (0, _renderer2.default)(template).addClass(TEMPLATE_WRAPPER_CLASS).detach();\n        templatesMap[templateOptions.name] = templatesMap[templateOptions.name] || [];\n        templatesMap[templateOptions.name].push(template);\n      });\n      var templates = [];\n\n      for (var templateName in templatesMap) {\n        var deviceTemplate = (0, _template_manager.findTemplateByDevice)(templatesMap[templateName]);\n\n        if (deviceTemplate) {\n          templates.push({\n            name: templateName,\n            template: this._createTemplate(deviceTemplate)\n          });\n        }\n      }\n\n      return templates;\n    }\n  }, {\n    key: \"_extractAnonymousTemplate\",\n    value: function ($el) {\n      var $anonymousTemplate = $el.contents().detach();\n      var $notJunkTemplateContent = $anonymousTemplate.filter(function (_, element) {\n        var isTextNode = element.nodeType === TEXT_NODE;\n        var isEmptyText = (0, _renderer2.default)(element).text().trim().length < 1;\n        return !(isTextNode && isEmptyText);\n      });\n      return $notJunkTemplateContent.length > 0 ? {\n        template: this._createTemplate($anonymousTemplate),\n        name: this._anonymousTemplateName\n      } : {};\n    }\n  }, {\n    key: \"_createTemplateIfNeeded\",\n    value: function (templateSource) {\n      var cachedTemplate = this._tempTemplates.filter(function (tempTemplate) {\n        return tempTemplate.source === (0, _template_manager.templateKey)(templateSource);\n      })[0];\n\n      if (cachedTemplate) {\n        return cachedTemplate.template;\n      }\n\n      var template = this._createTemplate(templateSource);\n\n      this._tempTemplates.push({\n        template: template,\n        source: (0, _template_manager.templateKey)(templateSource)\n      });\n\n      return template;\n    }\n  }, {\n    key: \"_createTemplate\",\n    value: function (templateSource) {\n      return this._createElement((0, _template_manager.validateTemplateSource)(templateSource));\n    }\n  }, {\n    key: \"getTemplate\",\n    value: function (templateSource, templates, _ref2, context) {\n      var _this = this;\n\n      var isAsyncTemplate = _ref2.isAsyncTemplate,\n          skipTemplates = _ref2.skipTemplates;\n\n      if (!(0, _type.isFunction)(templateSource)) {\n        return (0, _template_manager.acquireTemplate)(templateSource, this._createTemplateIfNeeded, templates, isAsyncTemplate, skipTemplates, this._defaultTemplates);\n      }\n\n      return new _function_template.FunctionTemplate(function (options) {\n        var templateSourceResult = templateSource.apply(context, (0, _template_manager.getNormalizedTemplateArgs)(options));\n\n        if (!(0, _type.isDefined)(templateSourceResult)) {\n          return new _empty_template.EmptyTemplate();\n        }\n\n        var dispose = false;\n        var template = (0, _template_manager.acquireTemplate)(templateSourceResult, function (templateSource) {\n          if (templateSource.nodeType || (0, _type.isRenderer)(templateSource) && !(0, _renderer2.default)(templateSource).is(\"script\")) {\n            return new _function_template.FunctionTemplate(function () {\n              return templateSource;\n            });\n          }\n\n          dispose = true;\n          return _this._createTemplate(templateSource);\n        }, templates, isAsyncTemplate, skipTemplates, _this._defaultTemplates);\n        var result = template.render(options);\n        dispose && template.dispose && template.dispose();\n        return result;\n      });\n    }\n  }, {\n    key: \"anonymousTemplateName\",\n    get: function () {\n      return this._anonymousTemplateName;\n    }\n  }], [{\n    key: \"createDefaultOptions\",\n    value: function () {\n      return {\n        integrationOptions: {\n          watchMethod: function (fn, callback) {\n            var options = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};\n\n            if (!options.skipImmediate) {\n              callback(fn());\n            }\n\n            return _common.noop;\n          },\n          templates: {\n            \"dx-polymorph-widget\": DX_POLYMORPH_WIDGET_TEMPLATE\n          }\n        }\n      };\n    }\n  }]);\n\n  return TemplateManager;\n}();\n\nexports.default = TemplateManager;","map":null,"metadata":{},"sourceType":"script"}