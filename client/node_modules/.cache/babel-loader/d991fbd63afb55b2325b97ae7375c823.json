{"ast":null,"code":"/**\n * ImageDecoder class\n */\nimport { ByteArray } from './byte-array';\nimport { PdfStream } from './../../primitives/pdf-stream';\nimport { DictionaryProperties } from './../../input-output/pdf-dictionary-properties';\nimport { PdfName } from './../../primitives/pdf-name';\nimport { PdfNumber } from './../../primitives/pdf-number';\nimport { PdfBoolean } from './../../primitives/pdf-boolean';\nimport { PdfDictionary } from './../../primitives/pdf-dictionary';\n/**\n * Specifies the image `format`.\n * @private\n */\n\nexport var ImageFormat;\n\n(function (ImageFormat) {\n  /**\n   * Specifies the type of `Unknown`.\n   * @hidden\n   * @private\n   */\n  ImageFormat[ImageFormat[\"Unknown\"] = 0] = \"Unknown\";\n  /**\n   * Specifies the type of `Bmp`.\n   * @hidden\n   * @private\n   */\n\n  ImageFormat[ImageFormat[\"Bmp\"] = 1] = \"Bmp\";\n  /**\n   * Specifies the type of `Emf`.\n   * @hidden\n   * @private\n   */\n\n  ImageFormat[ImageFormat[\"Emf\"] = 2] = \"Emf\";\n  /**\n   * Specifies the type of `Gif`.\n   * @hidden\n   * @private\n   */\n\n  ImageFormat[ImageFormat[\"Gif\"] = 3] = \"Gif\";\n  /**\n   * Specifies the type of `Jpeg`.\n   * @hidden\n   * @private\n   */\n\n  ImageFormat[ImageFormat[\"Jpeg\"] = 4] = \"Jpeg\";\n  /**\n   * Specifies the type of `Png`.\n   * @hidden\n   * @private\n   */\n\n  ImageFormat[ImageFormat[\"Png\"] = 5] = \"Png\";\n  /**\n   * Specifies the type of `Wmf`.\n   * @hidden\n   * @private\n   */\n\n  ImageFormat[ImageFormat[\"Wmf\"] = 6] = \"Wmf\";\n  /**\n   * Specifies the type of `Icon`.\n   * @hidden\n   * @private\n   */\n\n  ImageFormat[ImageFormat[\"Icon\"] = 7] = \"Icon\";\n})(ImageFormat || (ImageFormat = {}));\n/**\n * `Decode the image stream`.\n * @private\n */\n\n\nvar ImageDecoder =\n/** @class */\nfunction () {\n  /**\n   * Initialize the new instance for `image-decoder` class.\n   * @private\n   */\n  function ImageDecoder(stream) {\n    /**\n     * Start of file markers.\n     * @hidden\n     * @private\n     */\n    this.sof1Marker = 0x00C1;\n    this.sof2Marker = 0x00C2;\n    this.sof3Marker = 0x00C3;\n    this.sof5Marker = 0x00C5;\n    this.sof6Marker = 0x00C6;\n    this.sof7Marker = 0x00C7;\n    this.sof9Marker = 0x00C9;\n    this.sof10Marker = 0x00CA;\n    this.sof11Marker = 0x00CB;\n    this.sof13Marker = 0x00CD;\n    this.sof14Marker = 0x00CE;\n    this.sof15Marker = 0x00CF;\n    /**\n     * Specifies `format` of image.\n     * @hidden\n     * @private\n     */\n\n    this.mFormat = ImageFormat.Unknown;\n    /**\n     * `Bits per component`.\n     * @default 8\n     * @hidden\n     * @private\n     */\n\n    this.mbitsPerComponent = 8;\n    /**\n     * Internal variable for accessing fields from `DictionryProperties` class.\n     * @hidden\n     * @private\n     */\n\n    this.dictionaryProperties = new DictionaryProperties();\n    this.mStream = stream;\n    this.initialize();\n  }\n\n  Object.defineProperty(ImageDecoder.prototype, \"height\", {\n    /**\n     * Gets the `height` of image.\n     * @hidden\n     * @private\n     */\n    get: function () {\n      return this.mHeight;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ImageDecoder.prototype, \"width\", {\n    /**\n     * Gets the `width` of image.\n     * @hidden\n     * @private\n     */\n    get: function () {\n      return this.mWidth;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ImageDecoder.prototype, \"bitsPerComponent\", {\n    /**\n     * Gets `bits per component`.\n     * @hidden\n     * @private\n     */\n    get: function () {\n      return this.mbitsPerComponent;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ImageDecoder.prototype, \"size\", {\n    /**\n     * Gets the `size` of an image data.\n     * @hidden\n     * @private\n     */\n    get: function () {\n      return this.mImageData.count;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ImageDecoder.prototype, \"imageData\", {\n    /**\n     * Gets the value of an `image data`.\n     * @hidden\n     * @private\n     */\n    get: function () {\n      return this.mImageData;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ImageDecoder.prototype, \"imageDataAsNumberArray\", {\n    /**\n     * Gets the value of an `image data as number array`.\n     * @hidden\n     * @private\n     */\n    get: function () {\n      return this.mImageData.internalBuffer.buffer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * `Initialize` image data and image stream.\n   * @hidden\n   * @private\n   */\n\n  ImageDecoder.prototype.initialize = function () {\n    if (this.mFormat === ImageFormat.Unknown && this.checkIfJpeg()) {\n      this.mFormat = ImageFormat.Jpeg;\n      this.parseJpegImage();\n    }\n\n    this.reset();\n    this.mImageData = new ByteArray(this.mStream.count);\n    this.mStream.read(this.mImageData, 0, this.mImageData.count);\n  };\n  /**\n   * `Reset` stream position into 0.\n   * @hidden\n   * @private\n   */\n\n\n  ImageDecoder.prototype.reset = function () {\n    this.mStream.position = 0;\n  };\n  /**\n   * `Parse` Jpeg image.\n   * @hidden\n   * @private\n   */\n\n\n  ImageDecoder.prototype.parseJpegImage = function () {\n    this.reset();\n    var imgData = new ByteArray(this.mStream.count);\n    this.mStream.read(imgData, 0, imgData.count);\n    var i = 4;\n    var isLengthExceed = false;\n    /* tslint:disable */\n\n    var length = imgData.getBuffer(i) * 256 + imgData.getBuffer(i + 1);\n\n    while (i < imgData.count) {\n      i += length;\n\n      if (i < imgData.count) {\n        if (imgData.getBuffer(i + 1) === 192) {\n          this.mHeight = imgData.getBuffer(i + 5) * 256 + imgData.getBuffer(i + 6);\n          this.mWidth = imgData.getBuffer(i + 7) * 256 + imgData.getBuffer(i + 8);\n          return;\n        } else {\n          i += 2;\n          length = imgData.getBuffer(i) * 256 + imgData.getBuffer(i + 1);\n        }\n      } else {\n        isLengthExceed = true;\n        break;\n      }\n    }\n\n    if (isLengthExceed) {\n      this.mStream.position = 0;\n      this.skip(this.mStream, 2);\n      this.readExceededJPGImage(this.mStream);\n    }\n    /* tslint:enable */\n\n  };\n\n  Object.defineProperty(ImageDecoder.prototype, \"format\", {\n    /**\n     * Gets the image `format`.\n     * @private\n     * @hidden\n     */\n    get: function () {\n      return this.mFormat;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * `Checks if JPG`.\n   * @private\n   * @hidden\n   */\n\n  ImageDecoder.prototype.checkIfJpeg = function () {\n    this.reset();\n\n    for (var i = 0; i < ImageDecoder.mJpegHeader.length; i++) {\n      if (ImageDecoder.mJpegHeader[i] !== this.mStream.readByte(i)) {\n        return false;\n      }\n\n      this.mStream.position++;\n    }\n\n    return true;\n  };\n  /**\n   * Return image `dictionary`.\n   * @hidden\n   * @private\n   */\n\n\n  ImageDecoder.prototype.getImageDictionary = function () {\n    if (this.mFormat === ImageFormat.Jpeg) {\n      var tempArrayBuffer = this.imageData.internalBuffer.length;\n      this.imageStream = new PdfStream();\n      this.imageStream.isImage = true;\n      var tempString = '';\n      var decodedString = '';\n\n      for (var i = 0; i < this.imageDataAsNumberArray.byteLength; i++) {\n        tempString += String.fromCharCode(null, this.mStream.readByte(i));\n      }\n\n      for (var i = 0; i < tempString.length; i++) {\n        if (i % 2 !== 0) {\n          decodedString += tempString[i];\n        }\n      }\n\n      this.imageStream.data = [decodedString];\n      this.imageStream.compress = false;\n      this.imageStream.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.xObject));\n      this.imageStream.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.image));\n      this.imageStream.items.setValue(this.dictionaryProperties.width, new PdfNumber(this.width));\n      this.imageStream.items.setValue(this.dictionaryProperties.height, new PdfNumber(this.height));\n      this.imageStream.items.setValue(this.dictionaryProperties.bitsPerComponent, new PdfNumber(this.bitsPerComponent));\n      this.imageStream.items.setValue(this.dictionaryProperties.filter, new PdfName(this.dictionaryProperties.dctdecode));\n      this.imageStream.items.setValue(this.dictionaryProperties.colorSpace, new PdfName(this.getColorSpace()));\n      this.imageStream.items.setValue(this.dictionaryProperties.decodeParms, this.getDecodeParams());\n      return this.imageStream;\n    } else {\n      return this.imageStream;\n    }\n  };\n  /**\n   * Return `colorSpace` of an image.\n   * @hidden\n   * @private\n   */\n\n\n  ImageDecoder.prototype.getColorSpace = function () {\n    return this.dictionaryProperties.deviceRgb;\n  };\n  /**\n   * Return `decode parameters` of an image.\n   * @hidden\n   * @private\n   */\n\n\n  ImageDecoder.prototype.getDecodeParams = function () {\n    var decodeParams = new PdfDictionary();\n    decodeParams.items.setValue(this.dictionaryProperties.columns, new PdfNumber(this.width));\n    decodeParams.items.setValue(this.dictionaryProperties.blackIs1, new PdfBoolean(true));\n    decodeParams.items.setValue(this.dictionaryProperties.k, new PdfNumber(-1));\n    decodeParams.items.setValue(this.dictionaryProperties.predictor, new PdfNumber(15));\n    decodeParams.items.setValue(this.dictionaryProperties.bitsPerComponent, new PdfNumber(this.bitsPerComponent));\n    return decodeParams;\n  };\n  /**\n   * 'readExceededJPGImage' stream\n   * @hidden\n   * @private\n   */\n\n\n  ImageDecoder.prototype.readExceededJPGImage = function (stream) {\n    this.mStream = stream;\n    var isContinueReading = true;\n\n    while (isContinueReading) {\n      var marker = this.getMarker(stream);\n\n      switch (marker) {\n        case this.sof1Marker:\n        case this.sof2Marker:\n        case this.sof3Marker:\n        case this.sof5Marker:\n        case this.sof6Marker:\n        case this.sof7Marker:\n        case this.sof9Marker:\n        case this.sof10Marker:\n        case this.sof11Marker:\n        case this.sof13Marker:\n        case this.sof14Marker:\n        case this.sof15Marker:\n          stream.position += 3;\n          this.mHeight = this.mStream.readNextTwoBytes(stream);\n          this.mWidth = this.mStream.readNextTwoBytes(stream);\n          isContinueReading = false;\n          break;\n\n        default:\n          this.skipStream(stream);\n          break;\n      }\n    }\n  };\n  /**\n   * 'skip' stream\n   * @hidden\n   * @private\n   */\n\n\n  ImageDecoder.prototype.skip = function (stream, noOfBytes) {\n    this.mStream = stream;\n    var temp = new ByteArray(noOfBytes);\n    this.mStream.read(temp, 0, temp.count);\n  };\n  /**\n   * 'getMarker' stream\n   * @hidden\n   * @private\n   */\n\n\n  ImageDecoder.prototype.getMarker = function (stream) {\n    var skippedByte = 0;\n    var marker = 32;\n    marker = stream.readByte(this.mStream.position);\n    stream.position++;\n\n    while (marker !== 255) {\n      skippedByte++;\n      marker = stream.readByte(this.mStream.position);\n      stream.position++;\n    }\n\n    do {\n      marker = stream.readByte(this.mStream.position);\n      stream.position++;\n    } while (marker === 255);\n\n    return marker;\n  };\n  /**\n   * 'skipStream' stream\n   * @hidden\n   * @private\n   */\n\n\n  ImageDecoder.prototype.skipStream = function (stream) {\n    var markerLength = this.mStream.readNextTwoBytes(stream) - 2;\n\n    if (markerLength > 0) {\n      stream.position += markerLength;\n    }\n  };\n  /**\n   * Number array for `png header`.\n   * @hidden\n   * @private\n   */\n\n\n  ImageDecoder.mPngHeader = [137, 80, 78, 71, 13, 10, 26, 10];\n  /**\n   * Number Array for `jpeg header`.\n   * @hidden\n   * @private\n   */\n\n  ImageDecoder.mJpegHeader = [255, 216];\n  /**\n   * Number array for `gif header`.\n   * @hidden\n   * @private\n   */\n\n  ImageDecoder.GIF_HEADER = 'G,I,F,8';\n  /**\n   * Number array for `bmp header.`\n   * @hidden\n   * @private\n   */\n\n  ImageDecoder.BMP_HEADER = 'B,M';\n  return ImageDecoder;\n}();\n\nexport { ImageDecoder };","map":null,"metadata":{},"sourceType":"module"}