{"ast":null,"code":"/**\n *\n */\nimport { EventHandler, Internationalization } from '@syncfusion/ej2-base';\nimport { rippleEffect } from '@syncfusion/ej2-base';\nimport { removeClass, addClass, attributes, HijriParser } from '@syncfusion/ej2-base';\nimport { getUniqueID } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base'; //class constant defination.\n\nvar OTHERMONTH = 'e-other-month';\nvar YEAR = 'e-year';\nvar MONTH = 'e-month';\nvar DECADE = 'e-decade';\nvar DISABLED = 'e-disabled';\nvar OVERLAY = 'e-overlay';\nvar WEEKEND = 'e-weekend';\nvar WEEKNUMBER = 'e-week-number';\nvar SELECTED = 'e-selected';\nvar FOCUSEDDATE = 'e-focused-date';\nvar OTHERMONTHROW = 'e-month-hide';\nvar TODAY = 'e-today';\nvar LINK = 'e-day';\nvar CELL = 'e-cell';\nvar dayMilliSeconds = 86400000;\nvar minDecade = 2060;\nvar maxDecade = 2069;\n\nvar Islamic =\n/** @class */\nfunction () {\n  function Islamic(instance) {\n    this.calendarInstance = instance;\n  }\n\n  Islamic.prototype.getModuleName = function () {\n    return 'islamic';\n  };\n\n  Islamic.prototype.islamicTitleUpdate = function (date, view) {\n    var globalize = new Internationalization(this.calendarInstance.locale);\n\n    switch (view) {\n      case 'days':\n        /* tslint:disable-next-line:max-line-length */\n        this.calendarInstance.headerTitleElement.textContent = globalize.formatDate(date, {\n          type: 'dateTime',\n          format: 'MMMMyyyy',\n          calendar: 'islamic'\n        });\n        break;\n\n      case 'months':\n        /* tslint:disable-next-line:max-line-length */\n        this.calendarInstance.headerTitleElement.textContent = globalize.formatDate(date, {\n          type: 'dateTime',\n          format: 'yyyy',\n          calendar: 'islamic'\n        });\n    }\n  };\n  /* tslint:disable-next-line:max-line-length */\n  // tslint:disable-next-line:max-func-body-length\n\n\n  Islamic.prototype.islamicRenderDays = function (currentDate, value, multiSelection, values) {\n    var tdEles = [];\n    var cellsCount = 42;\n    var localDate = new Date(this.islamicInValue(currentDate));\n    var minMaxDate;\n    var numCells = this.calendarInstance.weekNumber ? 8 : 7; // 8 and 7 denotes the number of columns to be specified.\n\n    this.islamicTitleUpdate(currentDate, 'days');\n    /* tslint:disable-next-line:no-any */\n\n    var islamicDate = this.getIslamicDate(localDate);\n    var gregorianObject = this.toGregorian(islamicDate.year, islamicDate.month, 1);\n    var currentMonth = islamicDate.month;\n    localDate = gregorianObject;\n\n    while (localDate.getDay() !== this.calendarInstance.firstDayOfWeek) {\n      this.calendarInstance.setStartDate(localDate, -1 * dayMilliSeconds);\n    }\n\n    for (var day = 0; day < cellsCount; ++day) {\n      var weekEle = this.calendarInstance.createElement('td', {\n        className: CELL\n      });\n      var weekAnchor = this.calendarInstance.createElement('span');\n\n      if (day % 7 === 0 && this.calendarInstance.weekNumber) {\n        weekAnchor.textContent = '' + this.calendarInstance.getWeek(localDate);\n        weekEle.appendChild(weekAnchor);\n        addClass([weekEle], '' + WEEKNUMBER);\n        tdEles.push(weekEle);\n      }\n\n      minMaxDate = new Date(+localDate);\n      localDate = this.calendarInstance.minMaxDate(localDate);\n      /* tslint:disable-next-line:max-line-length */\n\n      var dateFormatOptions = {\n        type: 'dateTime',\n        skeleton: 'full',\n        calendar: 'islamic'\n      };\n      var date = this.calendarInstance.globalize.parseDate(this.calendarInstance.globalize.formatDate(localDate, dateFormatOptions), dateFormatOptions);\n      var tdEle = this.islamicDayCell(localDate);\n      /* tslint:disable-next-line:max-line-length */\n\n      var title = this.calendarInstance.globalize.formatDate(localDate, {\n        type: 'date',\n        skeleton: 'full',\n        calendar: 'islamic'\n      });\n      var dayLink = this.calendarInstance.createElement('span');\n      /* tslint:disable-next-line:max-line-length */\n\n      dayLink.textContent = this.calendarInstance.globalize.formatDate(localDate, {\n        type: 'date',\n        skeleton: 'd',\n        calendar: 'islamic'\n      });\n      var disabled = this.calendarInstance.min > localDate || this.calendarInstance.max < localDate;\n\n      if (disabled) {\n        addClass([tdEle], DISABLED);\n        addClass([tdEle], OVERLAY);\n      } else {\n        dayLink.setAttribute('title', '' + title);\n      }\n      /* tslint:disable-next-line:no-any */\n\n\n      var hijriMonthObject = this.getIslamicDate(localDate);\n\n      if (currentMonth !== hijriMonthObject.month) {\n        addClass([tdEle], OTHERMONTH);\n      }\n\n      if (localDate.getDay() === 0 || localDate.getDay() === 6) {\n        addClass([tdEle], WEEKEND);\n      }\n\n      tdEle.appendChild(dayLink);\n      this.calendarInstance.renderDayCellArgs = {\n        date: localDate,\n        isDisabled: false,\n        element: tdEle,\n        isOutOfRange: disabled\n      };\n      var argument = this.calendarInstance.renderDayCellArgs;\n      this.calendarInstance.renderDayCellEvent(argument);\n\n      if (argument.isDisabled) {\n        if (this.calendarInstance.isMultiSelection) {\n          if (!isNullOrUndefined(this.calendarInstance.values) && this.calendarInstance.values.length > 0) {\n            for (var index = 0; index < values.length; index++) {\n              /* tslint:disable-next-line:max-line-length */\n              var localDateString = +new Date(this.calendarInstance.globalize.formatDate(argument.date, {\n                type: 'date',\n                skeleton: 'yMd',\n                calendar: 'islamic'\n              }));\n              /* tslint:disable-next-line:max-line-length */\n\n              var tempDateString = +new Date(this.calendarInstance.globalize.formatDate(this.calendarInstance.values[index], {\n                type: 'date',\n                skeleton: 'yMd',\n                calendar: 'islamic'\n              }));\n\n              if (localDateString === tempDateString) {\n                this.calendarInstance.values.splice(index, 1);\n                index = -1;\n              }\n            }\n          }\n        } else if (value && +value === +argument.date) {\n          this.calendarInstance.setProperties({\n            value: null\n          }, true);\n        }\n      }\n\n      if (this.calendarInstance.renderDayCellArgs.isDisabled && !tdEle.classList.contains(SELECTED)) {\n        addClass([tdEle], DISABLED);\n        addClass([tdEle], OVERLAY);\n\n        if (+this.calendarInstance.renderDayCellArgs.date === +this.calendarInstance.todayDate) {\n          this.calendarInstance.todayDisabled = true;\n        }\n      }\n\n      var otherMnthBool = tdEle.classList.contains(OTHERMONTH);\n      var disabledCls = tdEle.classList.contains(DISABLED);\n\n      if (!disabledCls) {\n        EventHandler.add(tdEle, 'click', this.calendarInstance.clickHandler, this.calendarInstance);\n      }\n\n      if (this.calendarInstance.isMultiSelection && !isNullOrUndefined(this.calendarInstance.values) && !otherMnthBool && !disabledCls) {\n        for (var tempValue = 0; tempValue < this.calendarInstance.values.length; tempValue++) {\n          /* tslint:disable-next-line:max-line-length */\n          var localDateString = this.calendarInstance.globalize.formatDate(localDate, {\n            type: 'date',\n            skeleton: 'short',\n            calendar: 'islamic'\n          });\n          var tempDateString = this.calendarInstance.globalize.formatDate(this.calendarInstance.values[tempValue], {\n            type: 'date',\n            skeleton: 'short',\n            calendar: 'islamic'\n          });\n\n          if (localDateString === tempDateString && this.calendarInstance.getDateVal(localDate, this.calendarInstance.values[tempValue])) {\n            addClass([tdEle], SELECTED);\n          } else {\n            this.calendarInstance.updateFocus(otherMnthBool, disabledCls, localDate, tdEle, currentDate);\n          }\n        }\n\n        if (this.calendarInstance.values.length <= 0) {\n          this.calendarInstance.updateFocus(otherMnthBool, disabledCls, localDate, tdEle, currentDate);\n        }\n      } else if (!otherMnthBool && !disabledCls && this.calendarInstance.getDateVal(localDate, value)) {\n        addClass([tdEle], SELECTED);\n      } else {\n        this.calendarInstance.updateFocus(otherMnthBool, disabledCls, localDate, tdEle, currentDate);\n      }\n\n      if (date.getDate() === new Date().getDate() && date.getMonth() === new Date().getMonth()) {\n        if (date.getFullYear() === new Date().getFullYear()) {\n          addClass([tdEle], TODAY);\n        }\n      }\n\n      localDate = new Date(+minMaxDate);\n      tdEles.push(this.calendarInstance.renderDayCellArgs.element);\n      this.calendarInstance.addDay(localDate, 1, null, this.calendarInstance.max, this.calendarInstance.min);\n    }\n\n    return tdEles;\n  };\n\n  Islamic.prototype.islamicIconHandler = function () {\n    new Date(this.islamicInValue(this.calendarInstance.currentDate)).setDate(1);\n    var date = new Date(this.islamicInValue(this.calendarInstance.currentDate));\n\n    switch (this.calendarInstance.currentView()) {\n      case 'Month':\n        var prevMonthCompare = this.islamicCompareMonth(date, this.calendarInstance.min) < 1;\n        var nextMonthCompare = this.islamicCompareMonth(date, this.calendarInstance.max) > -1;\n        this.calendarInstance.previousIconHandler(prevMonthCompare);\n        this.calendarInstance.nextIconHandler(nextMonthCompare);\n        break;\n\n      case 'Year':\n        var prevYearCompare = this.hijriCompareYear(date, this.calendarInstance.min) < 1;\n        var nextYearCompare = this.hijriCompareYear(date, this.calendarInstance.max) > -1;\n        this.calendarInstance.previousIconHandler(prevYearCompare);\n        this.calendarInstance.nextIconHandler(nextYearCompare);\n        break;\n\n      case 'Decade':\n        var prevDecadeCompare = this.hijriCompareDecade(date, this.calendarInstance.min) < 1;\n        var nextDecadeCompare = this.hijriCompareDecade(date, this.calendarInstance.max) > -1;\n        this.calendarInstance.previousIconHandler(prevDecadeCompare);\n        this.calendarInstance.nextIconHandler(nextDecadeCompare);\n    }\n  };\n\n  Islamic.prototype.islamicNext = function () {\n    this.calendarInstance.effect = '';\n    var view = this.calendarInstance.getViewNumber(this.calendarInstance.currentView());\n    /* tslint:disable-next-line:no-any */\n\n    var islamicDate = this.getIslamicDate(this.calendarInstance.currentDate);\n\n    switch (this.calendarInstance.currentView()) {\n      case 'Year':\n        this.calendarInstance.currentDate = this.toGregorian(islamicDate.year + 1, islamicDate.month, 1);\n        this.calendarInstance.switchView(view);\n        break;\n\n      case 'Month':\n        this.calendarInstance.currentDate = this.toGregorian(islamicDate.year, islamicDate.month + 1, 1);\n        this.calendarInstance.switchView(view);\n        break;\n\n      case 'Decade':\n        this.calendarInstance.currentDate = this.toGregorian(islamicDate.year + 10, islamicDate.month, 1);\n        this.calendarInstance.switchView(view);\n        break;\n    }\n  };\n\n  Islamic.prototype.islamicPrevious = function () {\n    var currentView = this.calendarInstance.getViewNumber(this.calendarInstance.currentView());\n    this.calendarInstance.effect = '';\n    /* tslint:disable-next-line:no-any */\n\n    var islamicDate = this.getIslamicDate(this.calendarInstance.currentDate);\n\n    switch (this.calendarInstance.currentView()) {\n      case 'Month':\n        this.calendarInstance.currentDate = this.toGregorian(islamicDate.year, islamicDate.month - 1, 1);\n        this.calendarInstance.switchView(currentView);\n        break;\n\n      case 'Year':\n        this.calendarInstance.currentDate = this.toGregorian(islamicDate.year - 1, islamicDate.month, 1);\n        this.calendarInstance.switchView(currentView);\n        break;\n\n      case 'Decade':\n        this.calendarInstance.currentDate = this.toGregorian(islamicDate.year - 10, islamicDate.month - 1, 1);\n        this.calendarInstance.switchView(currentView);\n        break;\n    }\n  };\n\n  Islamic.prototype.islamicRenderYears = function (e, value) {\n    this.calendarInstance.removeTableHeadElement();\n    var numCells = 4;\n    var days;\n    var tdEles = [];\n    var valueUtil = isNullOrUndefined(value);\n    var curDate = new Date(this.islamicInValue(this.calendarInstance.currentDate));\n    var localDate = curDate;\n    /* tslint:disable-next-line:no-any */\n\n    var islamicDate = this.getIslamicDate(localDate);\n    var gregorianObject = HijriParser.toGregorian(islamicDate.year, 1, 1);\n    localDate = gregorianObject;\n    var mon = islamicDate.month;\n    var yr = islamicDate.year;\n    var curYrs = islamicDate.year;\n    /* tslint:disable-next-line:no-any */\n\n    var minYr = this.getIslamicDate(this.calendarInstance.min).year;\n    /* tslint:disable-next-line:no-any */\n\n    var minMonth = this.getIslamicDate(this.calendarInstance.min).month;\n    /* tslint:disable-next-line:no-any */\n\n    var maxYr = this.getIslamicDate(this.calendarInstance.max).year;\n    /* tslint:disable-next-line:no-any */\n\n    var maxMonth = this.getIslamicDate(this.calendarInstance.max).month;\n    this.islamicTitleUpdate(this.calendarInstance.currentDate, 'months');\n    var disabled = this.calendarInstance.min > localDate || this.calendarInstance.max < localDate;\n\n    for (var month = 1; month <= 12; ++month) {\n      /* tslint:disable-next-line:no-any */\n      var islamicDate_1 = this.getIslamicDate(localDate);\n      var gregorianObject_1 = HijriParser.toGregorian(islamicDate_1.year, month, 1);\n      localDate = gregorianObject_1;\n      var tdEle = this.islamicDayCell(localDate);\n      var dayLink = this.calendarInstance.createElement('span');\n      /* tslint:disable-next-line:max-line-length */\n\n      /* tslint:disable-next-line:no-any */\n\n      var localMonth = value && this.getIslamicDate(value).month === this.getIslamicDate(localDate).month;\n      /* tslint:disable-next-line:no-any  tslint:disable-next-line:max-line-length */\n\n      var select = value && this.getIslamicDate(value).year === yr && localMonth;\n      /* tslint:disable-next-line:max-line-length */\n\n      dayLink.textContent = this.calendarInstance.globalize.formatDate(localDate, {\n        type: 'dateTime',\n        format: 'MMM',\n        calendar: 'islamic'\n      });\n\n      if (this.calendarInstance.min && (curYrs < minYr || month < minMonth && curYrs === minYr) || this.calendarInstance.max && (curYrs > maxYr || month > maxMonth && curYrs >= maxYr)) {\n        addClass([tdEle], DISABLED);\n      } else if (!valueUtil && select) {\n        addClass([tdEle], SELECTED);\n      } else {\n        /* tslint:disable-next-line:no-any */\n        if (this.getIslamicDate(localDate).month === mon &&\n        /* tslint:disable-next-line:no-any */\n        this.getIslamicDate(this.calendarInstance.currentDate).month === mon) {\n          addClass([tdEle], FOCUSEDDATE);\n        }\n      }\n\n      if (!tdEle.classList.contains(DISABLED)) {\n        EventHandler.add(tdEle, 'click', this.calendarInstance.clickHandler, this.calendarInstance);\n      }\n\n      tdEle.appendChild(dayLink);\n      tdEles.push(tdEle);\n    }\n\n    this.islamicRenderTemplate(tdEles, numCells, YEAR, e, value);\n  };\n\n  Islamic.prototype.islamicRenderDecade = function (e, value) {\n    this.calendarInstance.removeTableHeadElement();\n    var numCells = 4;\n    var yearCell = 12;\n    var tdEles = [];\n    var localDate = new Date(this.islamicInValue(this.calendarInstance.currentDate));\n    /* tslint:disable-next-line:no-any */\n\n    var islamicDate = this.getIslamicDate(localDate);\n    var gregorianObject = HijriParser.toGregorian(islamicDate.year, 1, 1);\n    localDate = gregorianObject;\n    var localYr = localDate.getFullYear();\n    var startYr = new Date(this.islamicInValue(localYr - localYr % 10));\n    var endYr = new Date(this.islamicInValue(localYr - localYr % 10 + (10 - 1)));\n    var startFullYr = startYr.getFullYear();\n    var endFullYr = endYr.getFullYear();\n    /* tslint:disable-next-line:max-line-length */\n\n    var startHdrYr = this.calendarInstance.globalize.formatDate(startYr, {\n      type: 'dateTime',\n      format: 'y',\n      calendar: 'islamic'\n    });\n    var endHdrYr = this.calendarInstance.globalize.formatDate(endYr, {\n      type: 'dateTime',\n      format: 'y',\n      calendar: 'islamic'\n    });\n    this.calendarInstance.headerTitleElement.textContent = startHdrYr + ' - ' + endHdrYr;\n    var start = new Date(localYr - localYr % 10 - 2, 0, 1);\n    var startYear = start.getFullYear();\n\n    for (var rowCount = 1; rowCount <= yearCell; ++rowCount) {\n      var year = startYear + rowCount;\n      localDate.setFullYear(year);\n      localDate.setDate(1);\n      localDate.setMonth(0);\n      /* tslint:disable-next-line:no-any */\n\n      var islamicDate_2 = this.getIslamicDate(localDate);\n      var gregorianObject_2 = HijriParser.toGregorian(islamicDate_2.year, 1, 1);\n      localDate = gregorianObject_2;\n      var tdEle = this.islamicDayCell(localDate);\n      attributes(tdEle, {\n        'role': 'gridcell'\n      });\n      var dayLink = this.calendarInstance.createElement('span');\n      /* tslint:disable-next-line:max-line-length */\n\n      dayLink.textContent = this.calendarInstance.globalize.formatDate(localDate, {\n        type: 'dateTime',\n        format: 'y',\n        calendar: 'islamic'\n      });\n      /* tslint:disable-next-line:no-any */\n\n      if (year < startFullYr || year > endFullYr) {\n        addClass([tdEle], OTHERMONTH);\n      } else if (year < new Date(this.islamicInValue(this.calendarInstance.min)).getFullYear() || year > new Date(this.islamicInValue(this.calendarInstance.max)).getFullYear()) {\n        addClass([tdEle], DISABLED);\n      } else if (!isNullOrUndefined(value) &&\n      /* tslint:disable-next-line:no-any */\n      this.getIslamicDate(localDate).year ===\n      /* tslint:disable-next-line:no-any */\n      this.getIslamicDate(value).year) {\n        addClass([tdEle], SELECTED);\n      } else {\n        if (localDate.getFullYear() === this.calendarInstance.currentDate.getFullYear() && !tdEle.classList.contains(DISABLED)) {\n          addClass([tdEle], FOCUSEDDATE);\n        }\n      }\n\n      if (!tdEle.classList.contains(DISABLED)) {\n        EventHandler.add(tdEle, 'click', this.calendarInstance.clickHandler, this.calendarInstance);\n      }\n\n      tdEle.appendChild(dayLink);\n      tdEles.push(tdEle);\n    }\n\n    this.islamicRenderTemplate(tdEles, numCells, 'e-decade', e, value);\n  };\n\n  Islamic.prototype.islamicDayCell = function (localDate) {\n    var dateFormatOptions = {\n      skeleton: 'full',\n      type: 'dateTime',\n      calendar: 'islamic'\n    };\n    var formatDate = this.calendarInstance.globalize.formatDate(localDate, dateFormatOptions);\n    var date = this.calendarInstance.globalize.parseDate(formatDate, dateFormatOptions);\n    var value = date.valueOf();\n    var attrs = {\n      className: CELL,\n      attrs: {\n        'id': '' + getUniqueID('' + value),\n        'aria-selected': 'false',\n        'role': 'gridcell'\n      }\n    };\n    return this.calendarInstance.createElement('td', attrs);\n  };\n\n  Islamic.prototype.islamicRenderTemplate = function (elements, count, classNm, e, value) {\n    var view = this.calendarInstance.getViewNumber(this.calendarInstance.currentView());\n    var trEle;\n    this.calendarInstance.tableBodyElement = this.calendarInstance.createElement('tbody');\n    this.calendarInstance.table.appendChild(this.calendarInstance.tableBodyElement);\n    removeClass([this.calendarInstance.contentElement, this.calendarInstance.headerElement], [MONTH, DECADE, YEAR]);\n    addClass([this.calendarInstance.contentElement, this.calendarInstance.headerElement], [classNm]);\n    var weekNumCell = 41;\n    var numberCell = 35;\n    var otherMonthCell = 6;\n    var row = count;\n    var rowCount = 0;\n\n    for (var dayCell = 0; dayCell < elements.length / count; ++dayCell) {\n      trEle = this.calendarInstance.createElement('tr', {\n        attrs: {\n          'role': 'row'\n        }\n      });\n\n      for (rowCount = 0 + rowCount; rowCount < row; rowCount++) {\n        if (!elements[rowCount].classList.contains('e-week-number') && !isNullOrUndefined(elements[rowCount].children[0])) {\n          addClass([elements[rowCount].children[0]], [LINK]);\n          rippleEffect(elements[rowCount].children[0], {\n            duration: 600,\n            isCenterRipple: true\n          });\n        }\n\n        trEle.appendChild(elements[rowCount]);\n\n        if (this.calendarInstance.weekNumber && rowCount === otherMonthCell + 1 && elements[otherMonthCell + 1].classList.contains(OTHERMONTH)) {\n          addClass([trEle], OTHERMONTHROW);\n        }\n\n        if (!this.calendarInstance.weekNumber && rowCount === otherMonthCell && elements[otherMonthCell].classList.contains(OTHERMONTH)) {\n          addClass([trEle], OTHERMONTHROW);\n        }\n\n        if (this.calendarInstance.weekNumber) {\n          if (rowCount === weekNumCell && elements[weekNumCell].classList.contains(OTHERMONTH)) {\n            addClass([trEle], OTHERMONTHROW);\n          }\n        } else {\n          if (rowCount === numberCell && elements[numberCell].classList.contains(OTHERMONTH)) {\n            addClass([trEle], OTHERMONTHROW);\n          }\n        }\n      }\n\n      row = row + count;\n      rowCount = rowCount + 0;\n      this.calendarInstance.tableBodyElement.appendChild(trEle);\n    }\n\n    this.calendarInstance.table.querySelector('tbody').className = this.calendarInstance.effect;\n    this.islamicIconHandler();\n\n    if (view !== this.calendarInstance.getViewNumber(this.calendarInstance.currentView()) || view === 0 && view !== this.calendarInstance.getViewNumber(this.calendarInstance.currentView())) {\n      this.calendarInstance.navigateHandler(e);\n    }\n\n    this.calendarInstance.setAriaActiveDescendant();\n    this.calendarInstance.changedArgs = {\n      value: this.calendarInstance.value,\n      values: this.calendarInstance.values\n    };\n    this.calendarInstance.changeHandler();\n  };\n\n  Islamic.prototype.islamicCompareMonth = function (start, end) {\n    /* tslint:disable-next-line:no-any */\n    var hijriStart = this.getIslamicDate(start);\n    /* tslint:disable-next-line:no-any */\n\n    var hijriEnd = this.getIslamicDate(end);\n    var result;\n\n    if (hijriStart.year > hijriEnd.year) {\n      result = 1;\n    } else if (hijriStart.year < hijriEnd.year) {\n      result = -1;\n    } else {\n      result = hijriStart.month === hijriEnd.month ? 0 : hijriStart.month > hijriEnd.month ? 1 : -1;\n    }\n\n    return result;\n  };\n\n  ;\n\n  Islamic.prototype.islamicCompare = function (startDate, endDate, modifier) {\n    /* tslint:disable-next-line:no-any */\n    var hijriStart = this.getIslamicDate(startDate);\n    /* tslint:disable-next-line:no-any */\n\n    var hijriEnd = this.getIslamicDate(endDate);\n    var start = hijriEnd.year;\n    var end;\n    var result;\n    end = start;\n    result = 0;\n\n    if (modifier) {\n      start = start - start % modifier;\n      end = start - start % modifier + modifier - 1;\n    }\n\n    if (hijriStart.year > end) {\n      result = 1;\n    } else if (this.calendarInstance.currentView() === 'Decade' && hijriStart.year < start && !(startDate.getFullYear() >= minDecade && startDate.getFullYear() <= maxDecade)) {\n      result = -1;\n    } else if (hijriStart.year < start && this.calendarInstance.currentView() === 'Year') {\n      result = -1;\n    }\n\n    return result;\n  };\n\n  ;\n  /* tslint:disable-next-line:no-any */\n\n  Islamic.prototype.getIslamicDate = function (date) {\n    /* tslint:disable-next-line:no-any */\n    return HijriParser.getHijriDate(date);\n  };\n\n  Islamic.prototype.toGregorian = function (year, month, date) {\n    return HijriParser.toGregorian(year, month, date);\n  };\n\n  Islamic.prototype.hijriCompareYear = function (start, end) {\n    return this.islamicCompare(start, end, 0);\n  };\n\n  Islamic.prototype.hijriCompareDecade = function (start, end) {\n    return this.islamicCompare(start, end, 10);\n  };\n\n  ;\n\n  Islamic.prototype.destroy = function () {\n    this.calendarInstance = null;\n  };\n\n  Islamic.prototype.islamicInValue = function (inValue) {\n    if (inValue instanceof Date) {\n      return inValue.toUTCString();\n    } else {\n      return '' + inValue;\n    }\n  };\n\n  return Islamic;\n}();\n\nexport { Islamic };","map":null,"metadata":{},"sourceType":"module"}