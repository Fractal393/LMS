{"ast":null,"code":"import { closest, isNullOrUndefined, isBlazor } from '@syncfusion/ej2-base';\nimport { click, keyPressed, commandClick, initialEnd } from '../base/constant';\nimport { CellType } from '../base/enum';\nimport { CommandColumnRenderer } from '../renderer/command-column-renderer';\nimport { getUid } from '../base/util';\n/**\n * `CommandColumn` used to handle the command column actions.\n * @hidden\n */\n\nvar CommandColumn =\n/** @class */\nfunction () {\n  function CommandColumn(parent, locator) {\n    this.parent = parent;\n    this.locator = locator;\n    this.initiateRender();\n    this.addEventListener();\n  }\n\n  CommandColumn.prototype.initiateRender = function () {\n    var cellFac = this.locator.getService('cellRendererFactory');\n    cellFac.addCellRenderer(CellType.CommandColumn, new CommandColumnRenderer(this.parent, this.locator));\n  };\n\n  CommandColumn.prototype.commandClickHandler = function (e) {\n    var gObj = this.parent;\n    var gID = gObj.element.id;\n    var target = closest(e.target, 'button');\n\n    if (!target || !closest(e.target, '.e-unboundcell')) {\n      return;\n    }\n\n    var buttonObj = target.ej2_instances[0];\n    var type = buttonObj.commandType;\n    var uid = target.getAttribute('data-uid');\n    var commandColumn;\n    var row = gObj.getRowObjectFromUID(closest(target, '.e-row').getAttribute('data-uid'));\n    var cols = this.parent.columnModel;\n\n    for (var i = 0; i < cols.length; i++) {\n      if (cols[i].commands) {\n        var commandCols = cols[i].commands;\n\n        for (var j = 0; j < commandCols.length; j++) {\n          var idInString = 'uid';\n          var typeInString = 'type';\n\n          if (isBlazor() && !gObj.isJsComponent && commandCols[j][idInString] === uid) {\n            commandColumn = commandCols[j];\n            type = commandCols[j][typeInString];\n          } else if (commandCols[j][idInString] === uid && commandCols[j][typeInString] === type) {\n            commandColumn = commandCols[j];\n          }\n        }\n      }\n    }\n\n    var args = {\n      cancel: false,\n      target: target,\n      commandColumn: commandColumn,\n      rowData: isNullOrUndefined(row) ? undefined : row.data\n    };\n    this.parent.trigger(commandClick, args, function (commandclickargs) {\n      if (buttonObj.disabled || !gObj.editModule || commandclickargs.cancel) {\n        return;\n      }\n\n      switch (type) {\n        case 'Edit':\n          gObj.editModule.endEdit();\n          gObj.editModule.startEdit(closest(target, 'tr'));\n          break;\n\n        case 'Cancel':\n          gObj.editModule.closeEdit();\n          break;\n\n        case 'Save':\n          gObj.editModule.endEdit();\n          break;\n\n        case 'Delete':\n          if (gObj.editSettings.mode !== 'Batch') {\n            gObj.editModule.endEdit();\n          }\n\n          gObj.commandDelIndex = parseInt(closest(target, 'tr').getAttribute('aria-rowindex'), 10);\n          gObj.clearSelection(); //for toogle issue when dbl click\n\n          gObj.selectRow(gObj.commandDelIndex, false);\n          gObj.editModule.deleteRecord();\n          gObj.commandDelIndex = undefined;\n          break;\n      }\n    });\n  };\n  /**\n   * For internal use only - Get the module name.\n   */\n\n\n  CommandColumn.prototype.getModuleName = function () {\n    return 'commandColumn';\n  };\n  /**\n   * To destroy CommandColumn.\n   * @method destroy\n   * @return {void}\n   */\n\n\n  CommandColumn.prototype.destroy = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.removeEventListener();\n  };\n\n  CommandColumn.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(click, this.commandClickHandler);\n    this.parent.off(keyPressed, this.keyPressHandler);\n    this.parent.off(initialEnd, this.load);\n  };\n\n  CommandColumn.prototype.addEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.on(click, this.commandClickHandler, this);\n    this.parent.on(keyPressed, this.keyPressHandler, this);\n    this.parent.on(initialEnd, this.load, this);\n  };\n\n  CommandColumn.prototype.keyPressHandler = function (e) {\n    if (e.action === 'enter' && closest(e.target, '.e-unboundcelldiv')) {\n      this.commandClickHandler(e);\n      e.preventDefault();\n    }\n  };\n\n  CommandColumn.prototype.load = function () {\n    if (isBlazor() && !this.parent.isJsComponent) {\n      return;\n    }\n\n    var uid = 'uid';\n    var col = this.parent.columnModel;\n\n    for (var i = 0; i < col.length; i++) {\n      if (col[i].commands) {\n        var commandCol = col[i].commands;\n\n        for (var j = 0; j < commandCol.length; j++) {\n          commandCol[j][uid] = getUid('gridcommand');\n        }\n      }\n    }\n  };\n\n  return CommandColumn;\n}();\n\nexport { CommandColumn };","map":null,"metadata":{},"sourceType":"module"}