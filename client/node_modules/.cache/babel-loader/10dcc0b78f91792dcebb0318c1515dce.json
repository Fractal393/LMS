{"ast":null,"code":"/**\r\n * DevExtreme (ui/editor/ui.data_expression.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar variableWrapper = require(\"../../core/utils/variable_wrapper\");\n\nvar dataCoreUtils = require(\"../../core/utils/data\");\n\nvar commonUtils = require(\"../../core/utils/common\");\n\nvar typeUtils = require(\"../../core/utils/type\");\n\nvar extend = require(\"../../core/utils/extend\").extend;\n\nvar DataHelperMixin = require(\"../../data_helper\");\n\nvar DataSourceModule = require(\"../../data/data_source/data_source\");\n\nvar ArrayStore = require(\"../../data/array_store\");\n\nvar Deferred = require(\"../../core/utils/deferred\").Deferred;\n\nvar DataExpressionMixin = extend({}, DataHelperMixin, {\n  _dataExpressionDefaultOptions: function () {\n    return {\n      items: [],\n      dataSource: null,\n      itemTemplate: \"item\",\n      value: null,\n      valueExpr: \"this\",\n      displayExpr: void 0\n    };\n  },\n  _initDataExpressions: function () {\n    this._compileValueGetter();\n\n    this._compileDisplayGetter();\n\n    this._initDynamicTemplates();\n\n    this._initDataSource();\n\n    this._itemsToDataSource();\n  },\n  _itemsToDataSource: function () {\n    if (!this.option(\"dataSource\")) {\n      this._dataSource = new DataSourceModule.DataSource({\n        store: new ArrayStore(this.option(\"items\")),\n        pageSize: 0\n      });\n    }\n  },\n  _compileDisplayGetter: function () {\n    this._displayGetter = dataCoreUtils.compileGetter(this._displayGetterExpr());\n  },\n  _displayGetterExpr: function () {\n    return this.option(\"displayExpr\");\n  },\n  _compileValueGetter: function () {\n    this._valueGetter = dataCoreUtils.compileGetter(this._valueGetterExpr());\n  },\n  _valueGetterExpr: function () {\n    return this.option(\"valueExpr\") || \"this\";\n  },\n  _loadValue: function (value) {\n    var deferred = new Deferred();\n    value = this._unwrappedValue(value);\n\n    if (!typeUtils.isDefined(value)) {\n      return deferred.reject().promise();\n    }\n\n    this._loadSingle(this._valueGetterExpr(), value).done(function (item) {\n      this._isValueEquals(this._valueGetter(item), value) ? deferred.resolve(item) : deferred.reject();\n    }.bind(this)).fail(function () {\n      deferred.reject();\n    });\n\n    return deferred.promise();\n  },\n  _getCurrentValue: function () {\n    return this.option(\"value\");\n  },\n  _unwrappedValue: function (value) {\n    value = typeUtils.isDefined(value) ? value : this._getCurrentValue();\n\n    if (value && this._dataSource && \"this\" === this._valueGetterExpr()) {\n      value = this._getItemKey(value);\n    }\n\n    return variableWrapper.unwrap(value);\n  },\n  _getItemKey: function (value) {\n    var key = this._dataSource.key();\n\n    if (Array.isArray(key)) {\n      var result = {};\n\n      for (var i = 0, n = key.length; i < n; i++) {\n        result[key[i]] = value[key[i]];\n      }\n\n      return result;\n    }\n\n    if (key && \"object\" === _typeof(value)) {\n      value = value[key];\n    }\n\n    return value;\n  },\n  _isValueEquals: function (value1, value2) {\n    var dataSourceKey = this._dataSource && this._dataSource.key();\n\n    var isDefined = typeUtils.isDefined;\n\n    var result = this._compareValues(value1, value2);\n\n    if (!result && dataSourceKey && isDefined(value1) && isDefined(value2)) {\n      if (Array.isArray(dataSourceKey)) {\n        result = this._compareByCompositeKey(value1, value2, dataSourceKey);\n      } else {\n        result = this._compareByKey(value1, value2, dataSourceKey);\n      }\n    }\n\n    return result;\n  },\n  _compareByCompositeKey: function (value1, value2, key) {\n    var isObject = typeUtils.isObject;\n\n    if (!isObject(value1) || !isObject(value2)) {\n      return false;\n    }\n\n    for (var i = 0, n = key.length; i < n; i++) {\n      if (value1[key[i]] !== value2[key[i]]) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n  _compareByKey: function (value1, value2, key) {\n    var ensureDefined = commonUtils.ensureDefined;\n    var unwrapObservable = variableWrapper.unwrap;\n    var valueKey1 = ensureDefined(unwrapObservable(value1[key]), value1);\n    var valueKey2 = ensureDefined(unwrapObservable(value2[key]), value2);\n    return this._compareValues(valueKey1, valueKey2);\n  },\n  _compareValues: function (value1, value2) {\n    return dataCoreUtils.toComparable(value1, true) === dataCoreUtils.toComparable(value2, true);\n  },\n  _initDynamicTemplates: commonUtils.noop,\n  _setCollectionWidgetItemTemplate: function () {\n    this._initDynamicTemplates();\n\n    this._setCollectionWidgetOption(\"itemTemplate\", this.option(\"itemTemplate\"));\n  },\n  _getCollectionKeyExpr: function () {\n    var valueExpr = this.option(\"valueExpr\");\n    var isValueExprField = typeUtils.isString(valueExpr) && \"this\" !== valueExpr || typeUtils.isFunction(valueExpr);\n    return isValueExprField ? valueExpr : null;\n  },\n  _dataExpressionOptionChanged: function (args) {\n    switch (args.name) {\n      case \"items\":\n        this._itemsToDataSource();\n\n        this._setCollectionWidgetOption(\"items\");\n\n        break;\n\n      case \"dataSource\":\n        this._initDataSource();\n\n        break;\n\n      case \"itemTemplate\":\n        this._setCollectionWidgetItemTemplate();\n\n        break;\n\n      case \"valueExpr\":\n        this._compileValueGetter();\n\n        break;\n\n      case \"displayExpr\":\n        this._compileDisplayGetter();\n\n        this._initDynamicTemplates();\n\n        this._setCollectionWidgetOption(\"displayExpr\");\n\n    }\n  }\n});\nmodule.exports = DataExpressionMixin;","map":null,"metadata":{},"sourceType":"script"}