{"ast":null,"code":"import { getValue, setValue, merge, isBlazor } from './util';\nimport { Base } from './base';\n/**\n * To detect the changes for inner properties.\n * @private\n */\n\nvar ChildProperty =\n/** @class */\nfunction () {\n  function ChildProperty(parent, propName, defaultValue, isArray) {\n    this.isComplexArraySetter = false;\n    this.properties = {};\n    this.changedProperties = {};\n    this.childChangedProperties = {};\n    this.oldProperties = {}; // tslint:disable-next-line:no-empty\n\n    this.finalUpdate = function () {};\n\n    this.callChildDataBind = getValue('callChildDataBind', Base);\n    this.parentObj = parent;\n    this.controlParent = this.parentObj.controlParent || this.parentObj;\n    this.propName = propName;\n    this.isParentArray = isArray;\n    this.setProperties(defaultValue, true);\n  }\n  /**\n   * Updates the property changes\n   * @param {boolean} val\n   * @param {string} propName\n   * @returns {void}\n   */\n\n\n  ChildProperty.prototype.updateChange = function (val, propName) {\n    if (val === true) {\n      this.parentObj.childChangedProperties[propName] = val;\n    } else {\n      delete this.parentObj.childChangedProperties[propName];\n    }\n\n    if (this.parentObj.updateChange) {\n      this.parentObj.updateChange(val, this.parentObj.propName);\n    }\n  };\n  /**\n   * Updates time out duration\n   */\n\n\n  ChildProperty.prototype.updateTimeOut = function () {\n    if (this.parentObj.updateTimeOut) {\n      this.parentObj.finalUpdate();\n      this.parentObj.updateTimeOut();\n    } else {\n      var changeTime_1 = setTimeout(this.parentObj.dataBind.bind(this.parentObj));\n\n      var clearUpdate = function () {\n        clearTimeout(changeTime_1);\n      };\n\n      this.finalUpdate = clearUpdate;\n    }\n  };\n  /**\n   * Clears changed properties\n   */\n\n\n  ChildProperty.prototype.clearChanges = function () {\n    this.finalUpdate();\n    this.updateChange(false, this.propName);\n    this.oldProperties = {};\n    this.changedProperties = {};\n  };\n  /**\n   * Set property changes\n   * @param {Object} prop\n   * @param {boolean} muteOnChange\n   * {void}\n   */\n\n\n  ChildProperty.prototype.setProperties = function (prop, muteOnChange) {\n    if (muteOnChange === true) {\n      merge(this, prop);\n      this.updateChange(false, this.propName);\n      this.clearChanges();\n    } else {\n      merge(this, prop);\n    }\n  };\n  /**\n   * Binds data\n   */\n\n\n  ChildProperty.prototype.dataBind = function () {\n    this.callChildDataBind(this.childChangedProperties, this);\n\n    if (this.isParentArray) {\n      var curIndex = this.parentObj[this.propName].indexOf(this);\n\n      if (Object.keys(this.changedProperties).length) {\n        setValue(this.propName + '.' + curIndex, this.changedProperties, this.parentObj.changedProperties);\n        setValue(this.propName + '.' + curIndex, this.oldProperties, this.parentObj.oldProperties);\n      }\n    } else {\n      this.parentObj.changedProperties[this.propName] = this.changedProperties;\n      this.parentObj.oldProperties[this.propName] = this.oldProperties;\n    }\n\n    this.clearChanges();\n  };\n  /**\n   * Saves changes to newer values\n   * @param {string} key\n   * @param {Object} newValue\n   * @param {Object} oldValue\n   * @returns {void}\n   */\n\n\n  ChildProperty.prototype.saveChanges = function (key, newValue, oldValue, restrictServerDataBind) {\n    if (this.controlParent.isProtectedOnChange) {\n      return;\n    }\n\n    if (!restrictServerDataBind) {\n      this.serverDataBind(key, newValue, true);\n    }\n\n    this.oldProperties[key] = oldValue;\n    this.changedProperties[key] = newValue;\n    this.updateChange(true, this.propName);\n    this.finalUpdate();\n    this.updateTimeOut();\n  };\n\n  ChildProperty.prototype.serverDataBind = function (key, value, isSaveChanges, action) {\n    if (isBlazor() && !this.parentObj.isComplexArraySetter) {\n      // tslint:disable-next-line:no-any\n      var parent_1;\n      var newChanges = {};\n      var parentKey = isSaveChanges ? this.getParentKey(true) + '.' + key : key;\n      /* istanbul ignore else  */\n\n      if (parentKey.indexOf('.') !== -1) {\n        var complexKeys = parentKey.split('.');\n        parent_1 = newChanges;\n\n        for (var i = 0; i < complexKeys.length; i++) {\n          var isFinal = i === complexKeys.length - 1;\n          parent_1[complexKeys[i]] = isFinal ? value : {};\n          parent_1 = isFinal ? parent_1 : parent_1[complexKeys[i]];\n        }\n      } else {\n        newChanges[parentKey] = {};\n        parent_1 = newChanges[parentKey];\n        newChanges[parentKey][key] = value;\n      }\n      /* istanbul ignore next */\n\n\n      if (this.isParentArray) {\n        var actionProperty = 'ejsAction';\n        parent_1[actionProperty] = action ? action : 'none';\n      }\n\n      this.controlParent.serverDataBind(newChanges);\n    }\n  };\n\n  ChildProperty.prototype.getParentKey = function (isSaveChanges) {\n    // tslint:disable-next-line:no-any\n    var index = '';\n    var propName = this.propName;\n    /* istanbul ignore next */\n\n    if (this.isParentArray) {\n      index = this.parentObj[this.propName].indexOf(this);\n      var valueLength = this.parentObj[this.propName].length;\n      valueLength = isSaveChanges ? valueLength : valueLength > 0 ? valueLength - 1 : 0;\n      index = index !== -1 ? '-' + index : '-' + valueLength;\n      propName = propName + index;\n    }\n\n    if (this.controlParent !== this.parentObj) {\n      propName = this.parentObj.getParentKey() + '.' + this.propName + index;\n    }\n\n    return propName;\n  };\n\n  return ChildProperty;\n}();\n\nexport { ChildProperty };","map":null,"metadata":{},"sourceType":"module"}