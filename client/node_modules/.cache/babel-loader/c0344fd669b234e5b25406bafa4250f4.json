{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}; /// <reference path='../drop-down-list/drop-down-list-model.d.ts'/>\n\n\nimport { EventHandler, Property, Event, addClass, Browser, removeClass, detach } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined, NotifyPropertyChanges, getValue, setValue } from '@syncfusion/ej2-base';\nimport { DropDownList, dropDownListClasses } from '../drop-down-list/drop-down-list';\nimport { Search } from '../common/incremental-search';\nimport { createSpinner, showSpinner, hideSpinner } from '@syncfusion/ej2-popups';\n/* tslint:disable */\n\nimport { Input } from '@syncfusion/ej2-inputs';\n/* tslint:enable */\n\nvar SPINNER_CLASS = 'e-atc-spinner-icon';\ndropDownListClasses.root = 'e-combobox';\nvar inputObject = {\n  container: null,\n  buttons: []\n};\n/**\n * The ComboBox component allows the user to type a value or choose an option from the list of predefined options.\n * ```html\n * <select id=\"list\">\n *      <option value='1'>Badminton</option>\n *      <option value='2'>Basketball</option>\n *      <option value='3'>Cricket</option>\n *      <option value='4'>Football</option>\n *      <option value='5'>Tennis</option>\n * </select>\n * ```\n * ```typescript\n *   let games:ComboBox = new ComboBox();\n *   games.appendTo(\"#list\");\n * ```\n */\n\nvar ComboBox =\n/** @class */\nfunction (_super) {\n  __extends(ComboBox, _super);\n  /**\n   * *Constructor for creating the component\n   */\n\n\n  function ComboBox(options, element) {\n    return _super.call(this, options, element) || this;\n  }\n\n  ;\n  /**\n   * Initialize the event handler\n   * @private\n   */\n\n  ComboBox.prototype.preRender = function () {\n    _super.prototype.preRender.call(this);\n  };\n\n  ComboBox.prototype.getLocaleName = function () {\n    return 'combo-box';\n  };\n\n  ;\n\n  ComboBox.prototype.wireEvent = function () {\n    if (this.getModuleName() === 'combobox') {\n      EventHandler.add(this.inputWrapper.buttons[0], 'mousedown', this.preventBlur, this);\n      EventHandler.add(this.inputWrapper.container, 'blur', this.onBlur, this);\n    }\n\n    if (!isNullOrUndefined(this.inputWrapper.buttons[0])) {\n      EventHandler.add(this.inputWrapper.buttons[0], 'mousedown', this.dropDownClick, this);\n    }\n\n    EventHandler.add(this.inputElement, 'focus', this.targetFocus, this);\n\n    if (!this.readonly) {\n      EventHandler.add(this.inputElement, 'input', this.onInput, this);\n      EventHandler.add(this.inputElement, 'keyup', this.onFilterUp, this);\n      EventHandler.add(this.inputElement, 'keydown', this.onFilterDown, this);\n      EventHandler.add(this.inputElement, 'paste', this.pasteHandler, this);\n    }\n\n    this.bindCommonEvent();\n  };\n\n  ComboBox.prototype.preventBlur = function (e) {\n    if (!this.allowFiltering && document.activeElement !== this.inputElement && !document.activeElement.classList.contains(dropDownListClasses.input) && Browser.isDevice || !Browser.isDevice) {\n      e.preventDefault();\n    }\n  };\n\n  ComboBox.prototype.onBlur = function (e) {\n    var inputValue = this.inputElement.value === '' ? null : this.inputElement.value;\n\n    if (!isNullOrUndefined(this.listData) && !isNullOrUndefined(inputValue) && inputValue !== this.text) {\n      this.customValue(e);\n    }\n\n    _super.prototype.onBlur.call(this, e);\n  };\n\n  ComboBox.prototype.targetElement = function () {\n    return this.inputElement;\n  };\n\n  ComboBox.prototype.setOldText = function (text) {\n    Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);\n    this.customValue();\n    this.removeSelection();\n  };\n\n  ComboBox.prototype.setOldValue = function (value) {\n    if (this.allowCustom) {\n      this.valueMuteChange(this.value);\n    } else {\n      this.valueMuteChange(null);\n    }\n\n    this.removeSelection();\n    this.setHiddenValue();\n  };\n\n  ComboBox.prototype.valueMuteChange = function (value) {\n    var inputValue = isNullOrUndefined(value) ? null : value.toString();\n    Input.setValue(inputValue, this.inputElement, this.floatLabelType, this.showClearButton);\n    this.setProperties({\n      value: value,\n      text: value,\n      index: null\n    }, true);\n    this.activeIndex = this.index;\n    var fields = this.fields;\n    var dataItem = {};\n    dataItem[fields.text] = isNullOrUndefined(value) ? null : value.toString();\n    dataItem[fields.value] = isNullOrUndefined(value) ? null : value.toString();\n    this.itemData = dataItem;\n    this.item = null;\n\n    if (this.previousValue !== this.value) {\n      this.detachChangeEvent(null);\n    }\n  };\n\n  ComboBox.prototype.updateValues = function () {\n    if (!isNullOrUndefined(this.value)) {\n      var li = this.getElementByValue(this.value);\n\n      if (li) {\n        this.setSelection(li, null);\n      } else if (this.allowCustom) {\n        this.valueMuteChange(this.value);\n      } else {\n        this.valueMuteChange(null);\n      }\n    } else if (this.text && isNullOrUndefined(this.value)) {\n      var li = this.getElementByText(this.text);\n\n      if (li) {\n        this.setSelection(li, null);\n      } else {\n        Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);\n        this.customValue();\n      }\n    } else {\n      this.setSelection(this.liCollections[this.activeIndex], null);\n    }\n\n    this.setHiddenValue();\n    Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);\n  };\n\n  ComboBox.prototype.updateIconState = function () {\n    if (this.showClearButton) {\n      if (this.inputElement.value !== '' && !this.readonly) {\n        removeClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);\n      } else {\n        addClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);\n      }\n    }\n  };\n\n  ComboBox.prototype.getAriaAttributes = function () {\n    var ariaAttributes = {\n      'aria-owns': this.element.id + '_options',\n      'role': 'combobox',\n      'aria-autocomplete': 'both',\n      'aria-labelledby': this.hiddenElement.id,\n      'aria-hasPopup': 'true',\n      'aria-expanded': 'false',\n      'aria-readonly': this.readonly.toString(),\n      'autocomplete': 'off',\n      'autocorrect': 'off',\n      'autocapitalize': 'off',\n      'spellcheck': 'false'\n    };\n    return ariaAttributes;\n  };\n\n  ComboBox.prototype.searchLists = function (e) {\n    this.isTyped = true;\n\n    if (this.isFiltering()) {\n      _super.prototype.searchLists.call(this, e);\n\n      if (this.ulElement && this.filterInput.value.trim() === '') {\n        this.setHoverList(this.ulElement.querySelector('.' + dropDownListClasses.li));\n      }\n    } else {\n      if (this.ulElement && this.inputElement.value === '' && this.preventAutoFill) {\n        this.setHoverList(this.ulElement.querySelector('.' + dropDownListClasses.li));\n      }\n\n      this.incrementalSearch(e);\n    }\n  };\n\n  ComboBox.prototype.getNgDirective = function () {\n    return 'EJS-COMBOBOX';\n  };\n\n  ComboBox.prototype.setSearchBox = function () {\n    this.filterInput = this.inputElement;\n    return this.isFiltering() ? this.inputWrapper : inputObject;\n  };\n\n  ComboBox.prototype.onActionComplete = function (ulElement, list, e, isUpdated) {\n    if (!this.isServerBlazor) {\n      _super.prototype.onActionComplete.call(this, ulElement, list, e);\n    }\n\n    if (this.isSelectCustom) {\n      this.removeSelection();\n    }\n\n    if (!this.preventAutoFill && this.getModuleName() === 'combobox' && this.isTyped) {\n      this.inlineSearch();\n    }\n  };\n\n  ComboBox.prototype.getFocusElement = function () {\n    var dataItem = this.isSelectCustom ? {\n      text: ''\n    } : this.getItemData();\n    var selected = this.list.querySelector('.' + dropDownListClasses.selected);\n    var isSelected = dataItem.text === this.inputElement.value && !isNullOrUndefined(selected);\n\n    if (isSelected) {\n      return selected;\n    }\n\n    if ((Browser.isDevice && !this.isDropDownClick || !Browser.isDevice) && !isNullOrUndefined(this.liCollections) && this.liCollections.length > 0) {\n      var inputValue = this.inputElement.value;\n      var activeItem = Search(inputValue, this.liCollections, 'StartsWith', true);\n      var activeElement = activeItem.item;\n\n      if (!isNullOrUndefined(activeElement)) {\n        var count = this.getIndexByValue(activeElement.getAttribute('data-value')) - 1;\n        var height = parseInt(getComputedStyle(this.liCollections[0], null).getPropertyValue('height'), 10);\n\n        if (!isNaN(height) && this.getModuleName() !== 'autocomplete') {\n          this.removeFocus();\n          var fixedHead = this.fields.groupBy ? this.liCollections[0].offsetHeight : 0;\n          this.list.scrollTop = count * height + fixedHead;\n          addClass([activeElement], dropDownListClasses.focus);\n        }\n      } else {\n        if (this.isSelectCustom && this.inputElement.value.trim() !== '') {\n          this.removeFocus();\n          this.list.scrollTop = 0;\n        }\n      }\n\n      return activeElement;\n    } else {\n      return null;\n    }\n  };\n\n  ComboBox.prototype.setValue = function (e) {\n    if (e && e.type === 'keydown' && e.action === 'enter') {\n      this.removeFillSelection();\n    }\n\n    if (this.autofill && this.getModuleName() === 'combobox' && e && e.type === 'keydown' && e.action !== 'enter') {\n      this.preventAutoFill = false;\n      this.inlineSearch(e);\n      return false;\n    } else {\n      return _super.prototype.setValue.call(this, e);\n    }\n  };\n\n  ComboBox.prototype.checkCustomValue = function () {\n    this.itemData = this.getDataByValue(this.value);\n    var dataItem = this.getItemData();\n\n    if (!(this.allowCustom && isNullOrUndefined(dataItem.value) && isNullOrUndefined(dataItem.text))) {\n      this.setProperties({\n        'value': dataItem.value,\n        'text': dataItem.text\n      }, true);\n    }\n  };\n  /**\n   * Shows the spinner loader.\n   * @returns void.\n    */\n\n\n  ComboBox.prototype.showSpinner = function () {\n    if (isNullOrUndefined(this.spinnerElement)) {\n      this.spinnerElement = this.getModuleName() === 'autocomplete' ? this.inputWrapper.buttons[0] || this.inputWrapper.clearButton || Input.appendSpan('e-input-group-icon ' + SPINNER_CLASS, this.inputWrapper.container, this.createElement) : this.inputWrapper.buttons[0] || this.inputWrapper.clearButton;\n      addClass([this.spinnerElement], dropDownListClasses.disableIcon);\n      createSpinner({\n        target: this.spinnerElement,\n        width: Browser.isDevice ? '16px' : '14px'\n      }, this.createElement);\n      showSpinner(this.spinnerElement);\n    }\n  };\n  /**\n   * Hides the spinner loader.\n   * @returns void.\n    */\n\n\n  ComboBox.prototype.hideSpinner = function () {\n    if (!isNullOrUndefined(this.spinnerElement)) {\n      hideSpinner(this.spinnerElement);\n      removeClass([this.spinnerElement], dropDownListClasses.disableIcon);\n\n      if (this.spinnerElement.classList.contains(SPINNER_CLASS)) {\n        detach(this.spinnerElement);\n      } else {\n        this.spinnerElement.innerHTML = '';\n      }\n\n      this.spinnerElement = null;\n    }\n  };\n\n  ComboBox.prototype.setAutoFill = function (activeElement, isHover) {\n    if (!isHover) {\n      this.setHoverList(activeElement);\n    }\n\n    if (this.autofill && !this.preventAutoFill) {\n      var currentValue = this.getTextByValue(activeElement.getAttribute('data-value')).toString();\n      var currentFillValue = this.getFormattedValue(activeElement.getAttribute('data-value'));\n\n      if (this.getModuleName() === 'combobox') {\n        if (!this.isSelected && this.previousValue !== currentFillValue) {\n          this.updateSelectedItem(activeElement, null);\n          this.isSelected = true;\n          this.previousValue = this.getFormattedValue(activeElement.getAttribute('data-value'));\n        } else {\n          this.updateSelectedItem(activeElement, null, true);\n        }\n      }\n\n      if (!this.isAndroidAutoFill(currentValue)) {\n        this.setAutoFillSelection(currentValue);\n      }\n    }\n  };\n\n  ComboBox.prototype.isAndroidAutoFill = function (value) {\n    if (Browser.isAndroid) {\n      var currentPoints = this.getSelectionPoints();\n      var prevEnd = this.prevSelectPoints.end;\n      var curEnd = currentPoints.end;\n      var prevStart = this.prevSelectPoints.start;\n      var curStart = currentPoints.start;\n\n      if (prevEnd !== 0 && (prevEnd === value.length && prevStart === value.length || prevStart > curStart && prevEnd > curEnd || prevEnd === curEnd && prevStart === curStart)) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  };\n\n  ComboBox.prototype.clearAll = function (e, property) {\n    if (isNullOrUndefined(property) || !isNullOrUndefined(property) && isNullOrUndefined(property.dataSource)) {\n      _super.prototype.clearAll.call(this, e);\n\n      if (this.isServerBlazor && this.isFiltering() && this.isPopupOpen && e) {\n        // tslint:disable-next-line\n        this.interopAdaptor.invokeMethodAsync('OnServerRenderList', this.beforePopupOpen, true);\n      }\n    }\n  };\n\n  ComboBox.prototype.isSelectFocusItem = function (element) {\n    return !isNullOrUndefined(element);\n  };\n\n  ComboBox.prototype.inlineSearch = function (e) {\n    var isKeyNavigate = e && (e.action === 'down' || e.action === 'up' || e.action === 'home' || e.action === 'end' || e.action === 'pageUp' || e.action === 'pageDown');\n    var activeElement = isKeyNavigate ? this.liCollections[this.activeIndex] : this.getFocusElement();\n\n    if (!isNullOrUndefined(activeElement)) {\n      if (!isKeyNavigate) {\n        var value = this.getFormattedValue(activeElement.getAttribute('data-value'));\n        this.activeIndex = this.getIndexByValue(value);\n        this.activeIndex = !isNullOrUndefined(this.activeIndex) ? this.activeIndex : null;\n      }\n\n      this.preventAutoFill = this.inputElement.value === '' ? false : this.preventAutoFill;\n      this.setAutoFill(activeElement, isKeyNavigate);\n    } else if (this.inputElement.value === '') {\n      this.activeIndex = null;\n      this.list.scrollTop = 0;\n      var focusItem = this.list.querySelector('.' + dropDownListClasses.li);\n      this.setHoverList(focusItem);\n    } else {\n      this.activeIndex = null;\n      this.removeSelection();\n\n      if (this.liCollections && this.liCollections.length < 0) {\n        this.removeFocus();\n      }\n    }\n  };\n\n  ComboBox.prototype.incrementalSearch = function (e) {\n    this.showPopup();\n\n    if (!isNullOrUndefined(this.listData)) {\n      this.inlineSearch(e);\n      e.preventDefault();\n    }\n  };\n\n  ;\n\n  ComboBox.prototype.setAutoFillSelection = function (currentValue) {\n    var selection = this.getSelectionPoints();\n    var value = this.inputElement.value.substr(0, selection.start);\n\n    if (value && value.toLowerCase() === currentValue.substr(0, selection.start).toLowerCase()) {\n      var inputValue = value + currentValue.substr(value.length, currentValue.length);\n      Input.setValue(inputValue, this.inputElement, this.floatLabelType, this.showClearButton);\n      this.inputElement.setSelectionRange(selection.start, this.inputElement.value.length);\n    } else {\n      Input.setValue(currentValue, this.inputElement, this.floatLabelType, this.showClearButton);\n      this.inputElement.setSelectionRange(0, this.inputElement.value.length);\n    }\n  };\n\n  ;\n\n  ComboBox.prototype.getValueByText = function (text) {\n    return _super.prototype.getValueByText.call(this, text, true, this.ignoreAccent);\n  };\n\n  ComboBox.prototype.unWireEvent = function () {\n    if (this.getModuleName() === 'combobox') {\n      EventHandler.remove(this.inputWrapper.buttons[0], 'mousedown', this.preventBlur);\n      EventHandler.remove(this.inputWrapper.container, 'blur', this.onBlur);\n    }\n\n    if (!isNullOrUndefined(this.inputWrapper.buttons[0])) {\n      EventHandler.remove(this.inputWrapper.buttons[0], 'mousedown', this.dropDownClick);\n    }\n\n    EventHandler.remove(this.inputElement, 'focus', this.targetFocus);\n\n    if (!this.readonly) {\n      EventHandler.remove(this.inputElement, 'input', this.onInput);\n      EventHandler.remove(this.inputElement, 'keyup', this.onFilterUp);\n      EventHandler.remove(this.inputElement, 'keydown', this.onFilterDown);\n      EventHandler.remove(this.inputElement, 'paste', this.pasteHandler);\n    }\n\n    this.unBindCommonEvent();\n  };\n\n  ComboBox.prototype.setSelection = function (li, e) {\n    _super.prototype.setSelection.call(this, li, e);\n\n    if (!isNullOrUndefined(li) && !this.autofill && !this.isDropDownClick) {\n      this.removeFocus();\n    }\n  };\n\n  ComboBox.prototype.selectCurrentItem = function (e) {\n    var li;\n\n    if (this.isPopupOpen) {\n      if (this.isSelected) {\n        li = this.list.querySelector('.' + dropDownListClasses.selected);\n      } else {\n        li = this.list.querySelector('.' + dropDownListClasses.focus);\n      }\n\n      if (li) {\n        this.setSelection(li, e);\n        this.isTyped = false;\n      }\n\n      if (this.isSelected) {\n        this.isSelectCustom = false;\n        this.onChangeEvent(e);\n      }\n    }\n\n    if (e.action === 'enter' && this.inputElement.value.trim() === '') {\n      this.clearAll(e);\n    } else if (this.isTyped && !this.isSelected && isNullOrUndefined(li)) {\n      this.customValue(e);\n    }\n\n    this.hidePopup();\n  };\n\n  ComboBox.prototype.setHoverList = function (li) {\n    this.removeSelection();\n\n    if (this.isValidLI(li) && !li.classList.contains(dropDownListClasses.selected)) {\n      this.removeFocus();\n      li.classList.add(dropDownListClasses.focus);\n    }\n  };\n\n  ;\n\n  ComboBox.prototype.targetFocus = function (e) {\n    if (Browser.isDevice && !this.allowFiltering) {\n      this.preventFocus = false;\n    }\n\n    this.onFocus(e);\n  };\n\n  ComboBox.prototype.dropDownClick = function (e) {\n    e.preventDefault();\n\n    if (Browser.isDevice && !this.allowFiltering) {\n      this.preventFocus = true;\n    }\n\n    _super.prototype.dropDownClick.call(this, e);\n  };\n\n  ComboBox.prototype.customValue = function (e) {\n    var _this = this;\n\n    var value = this.getValueByText(this.inputElement.value);\n\n    if (!this.allowCustom && this.inputElement.value !== '') {\n      var previousValue = this.previousValue;\n      var currentValue = this.value;\n      this.setProperties({\n        value: value\n      });\n\n      if (isNullOrUndefined(this.value)) {\n        Input.setValue('', this.inputElement, this.floatLabelType, this.showClearButton);\n      }\n\n      if (this.autofill && previousValue === this.value && currentValue !== this.value) {\n        this.onChangeEvent(null);\n      }\n    } else if (this.inputElement.value.trim() !== '') {\n      var previousValue_1 = this.value;\n\n      if (isNullOrUndefined(value)) {\n        var value_1 = this.inputElement.value === '' ? null : this.inputElement.value;\n        var eventArgs = void 0;\n        eventArgs = {\n          text: value_1,\n          item: {}\n        };\n\n        if (!this.initial) {\n          this.trigger('customValueSpecifier', eventArgs, function (eventArgs) {\n            _this.updateCustomValueCallback(value_1, eventArgs, previousValue_1, e);\n          });\n        } else {\n          this.updateCustomValueCallback(value_1, eventArgs, previousValue_1);\n        }\n      } else {\n        this.isSelectCustom = false;\n        this.setProperties({\n          value: value\n        });\n\n        if (previousValue_1 !== this.value) {\n          this.onChangeEvent(e);\n        }\n      }\n    } else if (this.allowCustom) {\n      this.isSelectCustom = true;\n    }\n  };\n\n  ComboBox.prototype.updateCustomValueCallback = function (value, eventArgs, previousValue, e) {\n    var fields = this.fields;\n    var item = eventArgs.item;\n    var dataItem = {};\n\n    if (item && getValue(fields.text, item) && getValue(fields.value, item)) {\n      dataItem = item;\n    } else {\n      setValue(fields.text, value, dataItem);\n      setValue(fields.value, value, dataItem);\n    }\n\n    this.itemData = dataItem;\n    var changeData = {\n      text: getValue(fields.text, this.itemData),\n      value: getValue(fields.value, this.itemData),\n      index: null\n    };\n    this.setProperties(changeData, true);\n    this.setSelection(null, null);\n    this.isSelectCustom = true;\n\n    if (previousValue !== this.value) {\n      this.onChangeEvent(e);\n    }\n  };\n  /**\n   * Dynamically change the value of properties.\n   * @private\n   */\n\n\n  ComboBox.prototype.onPropertyChanged = function (newProp, oldProp) {\n    if (this.getModuleName() === 'combobox') {\n      this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);\n    }\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'readonly':\n          Input.setReadonly(this.readonly, this.inputElement);\n\n          if (this.readonly) {\n            EventHandler.remove(this.inputElement, 'input', this.onInput);\n            EventHandler.remove(this.inputElement, 'keyup', this.onFilterUp);\n            EventHandler.remove(this.inputElement, 'keydown', this.onFilterDown);\n          } else {\n            EventHandler.add(this.inputElement, 'input', this.onInput, this);\n            EventHandler.add(this.inputElement, 'keyup', this.onFilterUp, this);\n            EventHandler.add(this.inputElement, 'keydown', this.onFilterDown, this);\n          }\n\n          break;\n\n        case 'allowFiltering':\n          this.setSearchBox();\n\n          if (this.isFiltering() && this.getModuleName() === 'combobox' && isNullOrUndefined(this.list)) {\n            _super.prototype.renderList.call(this);\n          }\n\n          break;\n\n        case 'allowCustom':\n          break;\n\n        default:\n          var comboProps = void 0;\n          comboProps = this.getPropObject(prop, newProp, oldProp);\n\n          _super.prototype.onPropertyChanged.call(this, comboProps.newProperty, comboProps.oldProperty);\n\n          break;\n      }\n    }\n  };\n  /**\n   * To initialize the control rendering.\n   * @private\n   */\n\n\n  ComboBox.prototype.render = function () {\n    _super.prototype.render.call(this);\n\n    this.setSearchBox();\n\n    if (this.isFiltering() && this.getModuleName() === 'combobox' && isNullOrUndefined(this.list)) {\n      _super.prototype.renderList.call(this);\n    }\n\n    this.renderComplete();\n  };\n\n  ;\n  /**\n   * Return the module name of this component.\n   * @private\n   */\n\n  ComboBox.prototype.getModuleName = function () {\n    return 'combobox';\n  };\n  /**\n   * Adds a new item to the combobox popup list. By default, new item appends to the list as the last item,\n   * but you can insert based on the index parameter.\n   * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.\n   * @param { number } itemIndex - Specifies the index to place the newly added item in the popup list.\n   * @return {void}.\n    */\n\n\n  ComboBox.prototype.addItem = function (items, itemIndex) {\n    _super.prototype.addItem.call(this, items, itemIndex);\n  };\n  /**\n   * To filter the data from given data source by using query\n   * @param  {Object[] | DataManager } dataSource - Set the data source to filter.\n   * @param  {Query} query - Specify the query to filter the data.\n   * @param  {FieldSettingsModel} fields - Specify the fields to map the column in the data table.\n   * @return {void}.\n    */\n\n\n  ComboBox.prototype.filter = function (dataSource, query, fields) {\n    _super.prototype.filter.call(this, dataSource, query, fields);\n  };\n  /**\n   * Opens the popup that displays the list of items.\n   * @returns void.\n    */\n\n\n  ComboBox.prototype.showPopup = function () {\n    _super.prototype.showPopup.call(this);\n  };\n  /**\n   * Hides the popup if it is in open state.\n   * @returns void.\n    */\n\n\n  ComboBox.prototype.hidePopup = function (e) {\n    var inputValue = this.inputElement.value === '' ? null : this.inputElement.value;\n\n    if (!isNullOrUndefined(this.listData)) {\n      var isEscape = this.isEscapeKey;\n\n      if (this.isEscapeKey) {\n        Input.setValue(this.typedString, this.inputElement, this.floatLabelType, this.showClearButton);\n        this.isEscapeKey = false;\n      }\n\n      if (this.autofill) {\n        this.removeFillSelection();\n      }\n\n      var dataItem = this.isSelectCustom ? {\n        text: ''\n      } : this.getItemData();\n      var selected = this.list.querySelector('.' + dropDownListClasses.selected);\n\n      if (dataItem.text === this.inputElement.value && !isNullOrUndefined(selected)) {\n        if (this.isSelected) {\n          this.onChangeEvent(e);\n          this.isSelectCustom = false;\n        }\n\n        _super.prototype.hidePopup.call(this, e);\n\n        return;\n      }\n\n      if (this.getModuleName() === 'combobox' && this.inputElement.value.trim() !== '') {\n        var searchItem = Search(this.inputElement.value, this.liCollections, 'Equal', true);\n        this.selectedLI = searchItem.item;\n\n        if (isNullOrUndefined(searchItem.index)) {\n          searchItem.index = Search(this.inputElement.value, this.liCollections, 'StartsWith', true).index;\n        }\n\n        this.activeIndex = searchItem.index;\n\n        if (!isNullOrUndefined(this.selectedLI)) {\n          this.updateSelectedItem(this.selectedLI, null, true);\n        } else if (isEscape) {\n          this.isSelectCustom = true;\n          this.removeSelection();\n        }\n      }\n\n      if (!this.isEscapeKey && this.isTyped && !this.isInteracted) {\n        this.customValue(e);\n      }\n    }\n\n    if (isNullOrUndefined(this.listData) && this.allowCustom && !isNullOrUndefined(inputValue) && inputValue !== this.value) {\n      this.customValue();\n    }\n\n    _super.prototype.hidePopup.call(this, e);\n  };\n  /**\n   * Sets the focus to the component for interaction.\n   * @returns void.\n   */\n\n\n  ComboBox.prototype.focusIn = function () {\n    if (!this.enabled) {\n      return;\n    }\n\n    if (Browser.isDevice && !this.allowFiltering) {\n      this.preventFocus = true;\n    }\n\n    _super.prototype.focusIn.call(this);\n  };\n  /**\n   * Allows you to clear the selected values from the component.\n   * @returns void.\n    */\n\n\n  ComboBox.prototype.clear = function () {\n    this.value = null;\n  };\n  /**\n   * Moves the focus from the component if the component is already focused.\n   * @returns void.\n    */\n\n\n  ComboBox.prototype.focusOut = function (e) {\n    _super.prototype.focusOut.call(this, e);\n  };\n  /**\n   * Gets all the list items bound on this component.\n   * @returns Element[].\n    */\n\n\n  ComboBox.prototype.getItems = function () {\n    return _super.prototype.getItems.call(this);\n  };\n  /**\n   * Gets the data Object that matches the given value.\n   * @param { string | number } value - Specifies the value of the list item.\n   * @returns Object.\n   * @blazorType object\n    */\n\n\n  ComboBox.prototype.getDataByValue = function (value) {\n    return _super.prototype.getDataByValue.call(this, value);\n  };\n\n  ComboBox.prototype.renderHightSearch = function () {// update high light search \n  };\n\n  __decorate([Property(false)], ComboBox.prototype, \"autofill\", void 0);\n\n  __decorate([Property(true)], ComboBox.prototype, \"allowCustom\", void 0);\n\n  __decorate([Property({})], ComboBox.prototype, \"htmlAttributes\", void 0);\n\n  __decorate([Property(false)], ComboBox.prototype, \"allowFiltering\", void 0);\n\n  __decorate([Property(null)], ComboBox.prototype, \"query\", void 0);\n\n  __decorate([Property(null)], ComboBox.prototype, \"index\", void 0);\n\n  __decorate([Property(true)], ComboBox.prototype, \"showClearButton\", void 0);\n\n  __decorate([Property(false)], ComboBox.prototype, \"enableRtl\", void 0);\n\n  __decorate([Event()], ComboBox.prototype, \"customValueSpecifier\", void 0);\n\n  __decorate([Event()], ComboBox.prototype, \"filtering\", void 0);\n\n  __decorate([Property(null)], ComboBox.prototype, \"valueTemplate\", void 0);\n\n  __decorate([Property('Never')], ComboBox.prototype, \"floatLabelType\", void 0);\n\n  __decorate([Property(null)], ComboBox.prototype, \"filterBarPlaceholder\", void 0);\n\n  __decorate([Property(null)], ComboBox.prototype, \"cssClass\", void 0);\n\n  __decorate([Property(null)], ComboBox.prototype, \"headerTemplate\", void 0);\n\n  __decorate([Property(null)], ComboBox.prototype, \"footerTemplate\", void 0);\n\n  __decorate([Property(null)], ComboBox.prototype, \"placeholder\", void 0);\n\n  __decorate([Property('100%')], ComboBox.prototype, \"width\", void 0);\n\n  __decorate([Property('300px')], ComboBox.prototype, \"popupHeight\", void 0);\n\n  __decorate([Property('100%')], ComboBox.prototype, \"popupWidth\", void 0);\n\n  __decorate([Property(false)], ComboBox.prototype, \"readonly\", void 0);\n\n  __decorate([Property(null)], ComboBox.prototype, \"text\", void 0);\n\n  __decorate([Property(null)], ComboBox.prototype, \"value\", void 0);\n\n  ComboBox = __decorate([NotifyPropertyChanges], ComboBox);\n  return ComboBox;\n}(DropDownList);\n\nexport { ComboBox };","map":null,"metadata":{},"sourceType":"module"}