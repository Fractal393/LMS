{"ast":null,"code":"/**\r\n * DevExtreme (ui/drop_down_menu.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../core/renderer\");\n\nvar window = require(\"../core/utils/window\").getWindow();\n\nvar devices = require(\"../core/devices\");\n\nvar registerComponent = require(\"../core/component_registrator\");\n\nvar extend = require(\"../core/utils/extend\").extend;\n\nvar Widget = require(\"./widget/ui.widget\");\n\nvar Button = require(\"./button\");\n\nvar Popover = require(\"./popover\");\n\nvar DataHelperMixin = require(\"../data_helper\");\n\nvar List = require(\"./list\");\n\nvar themes = require(\"./themes\");\n\nvar ChildDefaultTemplate = require(\"../core/templates/child_default_template\").ChildDefaultTemplate;\n\nvar DROP_DOWN_MENU_CLASS = \"dx-dropdownmenu\";\nvar DROP_DOWN_MENU_POPUP_CLASS = \"dx-dropdownmenu-popup\";\nvar DROP_DOWN_MENU_POPUP_WRAPPER_CLASS = \"dx-dropdownmenu-popup-wrapper\";\nvar DROP_DOWN_MENU_LIST_CLASS = \"dx-dropdownmenu-list\";\nvar DROP_DOWN_MENU_BUTTON_CLASS = \"dx-dropdownmenu-button\";\nvar POPUP_OPTION_MAP = {\n  popupWidth: \"width\",\n  popupHeight: \"height\",\n  popupMaxHeight: \"maxHeight\",\n  popupAutoResizeEnabled: \"autoResizeEnabled\"\n};\nvar BUTTON_OPTION_MAP = {\n  buttonIcon: \"icon\",\n  buttonText: \"text\",\n  buttonWidth: \"width\",\n  buttonHeight: \"height\",\n  buttonTemplate: \"template\"\n};\nvar DropDownMenu = Widget.inherit({\n  _supportedKeys: function () {\n    var extension = {};\n\n    if (!this.option(\"opened\") || !this._list.option(\"focusedElement\")) {\n      extension = this._button._supportedKeys();\n    }\n\n    return extend(this.callBase(), extension, {\n      tab: function () {\n        this._popup && this._popup.hide();\n      }\n    });\n  },\n  _getDefaultOptions: function () {\n    return extend(this.callBase(), {\n      items: [],\n      onItemClick: null,\n      dataSource: null,\n      itemTemplate: \"item\",\n      buttonText: \"\",\n      buttonIcon: \"overflow\",\n      buttonWidth: void 0,\n      buttonHeight: void 0,\n      buttonTemplate: \"content\",\n      onButtonClick: null,\n      usePopover: false,\n      popupWidth: \"auto\",\n      popupHeight: \"auto\",\n      activeStateEnabled: true,\n      hoverStateEnabled: true,\n      opened: false,\n      selectionMode: \"none\",\n      selectedItemKeys: [],\n      deferRendering: false,\n      popupPosition: {\n        my: \"top center\",\n        at: \"bottom center\",\n        collision: \"fit flip\",\n        offset: {\n          v: 1\n        }\n      },\n      popupAnimation: void 0,\n      onItemRendered: null,\n      menuWidget: List,\n      popupMaxHeight: void 0,\n      closeOnClick: true,\n      useInkRipple: false,\n      container: void 0,\n      popupAutoResizeEnabled: false\n    });\n  },\n  _defaultOptionsRules: function () {\n    return this.callBase().concat([{\n      device: {\n        platform: \"ios\"\n      },\n      options: {\n        usePopover: true\n      }\n    }, {\n      device: {\n        platform: \"generic\"\n      },\n      options: {\n        popupPosition: {\n          offset: {\n            v: 4\n          }\n        }\n      }\n    }, {\n      device: function () {\n        return \"desktop\" === devices.real().deviceType && !devices.isSimulator();\n      },\n      options: {\n        focusStateEnabled: true\n      }\n    }, {\n      device: {\n        platform: \"android\"\n      },\n      options: {\n        popupPosition: {\n          my: \"top \" + (this.option(\"rtlEnabled\") ? \"left\" : \"right\"),\n          at: \"top \" + (this.option(\"rtlEnabled\") ? \"left\" : \"right\"),\n          collision: \"flipfit\"\n        },\n        popupAnimation: {\n          show: {\n            type: \"pop\",\n            duration: 200,\n            from: {\n              scale: 0\n            },\n            to: {\n              scale: 1\n            }\n          },\n          hide: {\n            type: \"pop\",\n            duration: 200,\n            from: {\n              scale: 1\n            },\n            to: {\n              scale: 0\n            }\n          }\n        }\n      }\n    }, {\n      device: function () {\n        return themes.isMaterial();\n      },\n      options: {\n        useInkRipple: true\n      }\n    }]);\n  },\n  _initOptions: function (options) {\n    if (\"android\" === devices.current().platform) {\n      if (!options.popupPosition) {\n        options.popupPosition = {\n          at: (options.usePopover ? \"bottom \" : \"top \") + (options.rtlEnabled ? \"left\" : \"right\")\n        };\n      }\n    }\n\n    this.callBase(options);\n  },\n  _dataSourceOptions: function () {\n    return {\n      paginate: false\n    };\n  },\n  _init: function () {\n    this.callBase();\n    this.$element().addClass(DROP_DOWN_MENU_CLASS);\n\n    this._initDataSource();\n\n    this._initItemClickAction();\n\n    this._initButtonClickAction();\n  },\n  _initItemClickAction: function () {\n    this._itemClickAction = this._createActionByOption(\"onItemClick\");\n  },\n  _initButtonClickAction: function () {\n    this._buttonClickAction = this._createActionByOption(\"onButtonClick\");\n  },\n  _initTemplates: function () {\n    this._templateManager.addDefaultTemplates({\n      content: new ChildDefaultTemplate(\"content\")\n    });\n\n    this.callBase();\n  },\n  _initMarkup: function () {\n    this._renderButton();\n\n    this.callBase();\n  },\n  _render: function () {\n    this.callBase();\n    this.setAria({\n      role: \"menubar\",\n      haspopup: true,\n      expanded: this.option(\"opened\")\n    });\n  },\n  _renderContentImpl: function () {\n    if (this.option(\"opened\")) {\n      this._renderPopup();\n    }\n  },\n  _clean: function () {\n    this._cleanFocusState();\n\n    if (this._popup) {\n      this._popup.$element().remove();\n\n      delete this._$popup;\n    }\n  },\n  _renderButton: function () {\n    var $button = this.$element().addClass(DROP_DOWN_MENU_BUTTON_CLASS);\n\n    var config = this._buttonOptions();\n\n    this._button = this._createComponent($button, Button, config);\n  },\n  _toggleActiveState: function ($element, value, e) {\n    this._button._toggleActiveState($element, value, e);\n  },\n  _buttonOptions: function () {\n    return {\n      text: this.option(\"buttonText\"),\n      icon: this.option(\"buttonIcon\"),\n      width: this.option(\"buttonWidth\"),\n      height: this.option(\"buttonHeight\"),\n      useInkRipple: this.option(\"useInkRipple\"),\n      template: this.option(\"buttonTemplate\"),\n      focusStateEnabled: false,\n      onClick: function (e) {\n        this.option(\"opened\", !this.option(\"opened\"));\n\n        this._buttonClickAction(e);\n      }.bind(this)\n    };\n  },\n  _toggleMenuVisibility: function (opened) {\n    var state = void 0 === opened ? !this._popup.option(\"visible\") : opened;\n\n    if (opened) {\n      this._renderPopup();\n    }\n\n    this._popup.toggle(state);\n\n    this.setAria(\"expanded\", state);\n  },\n  _renderPopup: function () {\n    if (this._$popup) {\n      return;\n    }\n\n    var $popup = this._$popup = $(\"<div>\").appendTo(this.$element());\n\n    var config = this._popupOptions();\n\n    this._popup = this._createComponent($popup, Popover, config);\n  },\n  _popupOptions: function () {\n    var usePopup = !this.option(\"usePopover\");\n    return {\n      onInitialized: function (args) {\n        args.component._wrapper().addClass(DROP_DOWN_MENU_POPUP_WRAPPER_CLASS).toggleClass(DROP_DOWN_MENU_POPUP_CLASS, usePopup);\n      },\n      visible: this.option(\"opened\"),\n      deferRendering: false,\n      contentTemplate: function (contentElement) {\n        this._renderList(contentElement);\n      }.bind(this),\n      position: this.option(\"popupPosition\"),\n      animation: this.option(\"popupAnimation\"),\n      onOptionChanged: function (args) {\n        if (\"visible\" === args.name) {\n          this.option(\"opened\", args.value);\n        }\n      }.bind(this),\n      target: this.$element(),\n      height: this.option(\"popupHeight\"),\n      width: this.option(\"popupWidth\"),\n      maxHeight: this.option(\"popupMaxHeight\"),\n      container: this.option(\"container\"),\n      autoResizeEnabled: this.option(\"popupAutoResizeEnabled\")\n    };\n  },\n  _renderList: function (contentElement) {\n    var $content = $(contentElement);\n\n    var listConfig = this._listOptions();\n\n    $content.addClass(DROP_DOWN_MENU_LIST_CLASS);\n    this._list = this._createComponent($content, this.option(\"menuWidget\"), listConfig);\n\n    this._list._getAriaTarget = function () {\n      return this.$element();\n    }.bind(this);\n\n    this._setListDataSource();\n\n    var listMaxHeight = .5 * $(window).height();\n\n    if ($content.height() > listMaxHeight) {\n      $content.height(listMaxHeight);\n    }\n  },\n  _listOptions: function () {\n    return {\n      pageLoadMode: \"scrollBottom\",\n      indicateLoading: false,\n      noDataText: \"\",\n      selectionMode: this.option(\"selectionMode\"),\n      selectedItemKeys: this.option(\"selectedItemKeys\"),\n      itemTemplate: this.option(\"itemTemplate\"),\n      onItemClick: function (e) {\n        if (this.option(\"closeOnClick\")) {\n          this.option(\"opened\", false);\n        }\n\n        this._itemClickAction(e);\n      }.bind(this),\n      tabIndex: -1,\n      focusStateEnabled: this.option(\"focusStateEnabled\"),\n      activeStateEnabled: this.option(\"activeStateEnabled\"),\n      onItemRendered: this.option(\"onItemRendered\"),\n      _itemAttributes: {\n        role: \"menuitem\"\n      }\n    };\n  },\n  _setListDataSource: function () {\n    if (this._list) {\n      this._list.option(\"dataSource\", this._dataSource || this.option(\"items\"));\n    }\n\n    delete this._deferRendering;\n  },\n  _getKeyboardListeners: function () {\n    return this.callBase().concat([this._list]);\n  },\n  _toggleVisibility: function (visible) {\n    this.callBase(visible);\n\n    this._button.option(\"visible\", visible);\n  },\n  _optionChanged: function (args) {\n    var name = args.name;\n    var value = args.value;\n\n    switch (name) {\n      case \"items\":\n      case \"dataSource\":\n        if (this.option(\"deferRendering\") && !this.option(\"opened\")) {\n          this._deferRendering = true;\n        } else {\n          this._refreshDataSource();\n\n          this._setListDataSource();\n        }\n\n        break;\n\n      case \"itemTemplate\":\n        if (this._list) {\n          this._list.option(name, this._getTemplate(value));\n        }\n\n        break;\n\n      case \"onItemClick\":\n        this._initItemClickAction();\n\n        break;\n\n      case \"onButtonClick\":\n        this._buttonClickAction();\n\n        break;\n\n      case \"buttonIcon\":\n      case \"buttonText\":\n      case \"buttonWidth\":\n      case \"buttonHeight\":\n      case \"buttonTemplate\":\n        this._button.option(BUTTON_OPTION_MAP[name], value);\n\n        this._renderPopup();\n\n        break;\n\n      case \"popupWidth\":\n      case \"popupHeight\":\n      case \"popupMaxHeight\":\n      case \"popupAutoResizeEnabled\":\n        this._popup.option(POPUP_OPTION_MAP[name], value);\n\n        break;\n\n      case \"usePopover\":\n      case \"menuWidget\":\n      case \"useInkRipple\":\n        this._invalidate();\n\n        break;\n\n      case \"focusStateEnabled\":\n      case \"activeStateEnabled\":\n        if (this._list) {\n          this._list.option(name, value);\n        }\n\n        this.callBase(args);\n        break;\n\n      case \"selectionMode\":\n      case \"selectedItemKeys\":\n      case \"onItemRendered\":\n        if (this._list) {\n          this._list.option(name, value);\n        }\n\n        break;\n\n      case \"opened\":\n        if (this._deferRendering) {\n          this._refreshDataSource();\n\n          this._setListDataSource();\n        }\n\n        this._toggleMenuVisibility(value);\n\n        break;\n\n      case \"deferRendering\":\n      case \"popupPosition\":\n      case \"closeOnClick\":\n        break;\n\n      case \"container\":\n        this._popup && this._popup.option(args.name, args.value);\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  open: function () {\n    this.option(\"opened\", true);\n  },\n  close: function () {\n    this.option(\"opened\", false);\n  }\n}).include(DataHelperMixin);\nregisterComponent(\"dxDropDownMenu\", DropDownMenu);\nmodule.exports = DropDownMenu;","map":null,"metadata":{},"sourceType":"script"}