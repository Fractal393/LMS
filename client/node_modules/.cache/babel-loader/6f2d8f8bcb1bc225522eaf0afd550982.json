{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { CellRenderer } from './cell-renderer';\nimport { headerCellInfo } from '../base/constant';\nimport { setStyleAndAttributes, appendChildren } from '../base/util';\n/**\n * StackedHeaderCellRenderer class which responsible for building stacked header cell content.\n * @hidden\n */\n\nvar StackedHeaderCellRenderer =\n/** @class */\nfunction (_super) {\n  __extends(StackedHeaderCellRenderer, _super);\n\n  function StackedHeaderCellRenderer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.element = _this.parent.createElement('TH', {\n      className: 'e-headercell e-stackedheadercell',\n      attrs: {\n        role: 'columnheader',\n        tabindex: '-1'\n      }\n    });\n    return _this;\n  }\n  /**\n   * Function to render the cell content based on Column object.\n   * @param  {Column} column\n   * @param  {Object} data\n   * @param  {Element}\n   */\n\n\n  StackedHeaderCellRenderer.prototype.render = function (cell, data, attributes) {\n    var node = this.element.cloneNode();\n    var div = this.parent.createElement('div', {\n      className: 'e-stackedheadercelldiv',\n      attrs: {\n        'e-mappinguid': cell.column.uid\n      }\n    });\n    var column = cell.column;\n    node.appendChild(div);\n\n    if (!isNullOrUndefined(column.headerTemplate)) {\n      appendChildren(div, column.getHeaderTemplate()(column, this.parent, 'headerTemplate'));\n    } else {\n      this.appendHtml(div, column.headerText, column.getDomSetter());\n    }\n\n    if (cell.column.toolTip) {\n      node.setAttribute('title', cell.column.toolTip);\n    }\n\n    if (column.clipMode === 'Clip' || !column.clipMode && this.parent.clipMode === 'Clip') {\n      node.classList.add('e-gridclip');\n    } else if (column.clipMode === 'EllipsisWithTooltip' || !column.clipMode && this.parent.clipMode === 'EllipsisWithTooltip') {\n      node.classList.add('e-ellipsistooltip');\n    }\n\n    if (!isNullOrUndefined(cell.column.textAlign)) {\n      div.style.textAlign = cell.column.textAlign;\n    }\n\n    if (cell.column.customAttributes) {\n      setStyleAndAttributes(node, cell.column.customAttributes);\n    }\n\n    node.setAttribute('colspan', cell.colSpan.toString());\n    node.setAttribute('aria-colspan', cell.colSpan.toString());\n    node.setAttribute('aria-rowspan', '1');\n\n    if (this.parent.allowResizing) {\n      var handler = this.parent.createElement('div');\n      handler.className = cell.column.allowResizing ? 'e-rhandler e-rcursor' : 'e-rsuppress';\n      node.appendChild(handler);\n    }\n\n    this.parent.trigger(headerCellInfo, {\n      cell: cell,\n      node: node\n    });\n    return node;\n  };\n\n  return StackedHeaderCellRenderer;\n}(CellRenderer);\n\nexport { StackedHeaderCellRenderer };","map":null,"metadata":{},"sourceType":"module"}