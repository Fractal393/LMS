{"ast":null,"code":"import { ListBase } from '@syncfusion/ej2-lists';\nimport { createElement, select, selectAll, EventHandler, KeyboardEvents, closest, Draggable } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined as isNOU, addClass, removeClass, Touch, isVisible } from '@syncfusion/ej2-base';\nimport { getValue, setValue, remove } from '@syncfusion/ej2-base';\nimport { DataManager, Query } from '@syncfusion/ej2-data';\nimport { hideSpinner, showSpinner } from '@syncfusion/ej2-popups';\nimport * as events from '../base/constant';\nimport * as CLS from '../base/classes';\nimport { createCheckBox } from '@syncfusion/ej2-buttons';\nimport { read, GetDetails, Delete } from '../common/operations';\nimport { doRename, getAccessClass, getPathObject, getFullPath, getDirectoryPath, rename, doDownload, getItemName } from '../common/index';\nimport { removeBlur, cutFiles, copyFiles, addBlur, openSearchFolder, removeActive, pasteHandler } from '../common/index';\nimport { createVirtualDragElement, dragStopHandler, dragStartHandler, draggingHandler, getModule } from '../common/index';\nimport { updateRenamingData, doDeleteFiles, doDownloadFiles } from '../common/index';\nimport { openAction, fileType, refresh, getImageUrl, getSortedData, createDeniedDialog, updateLayout } from '../common/utility';\nimport { createEmptyElement, hasReadAccess, hasEditAccess } from '../common/utility';\nimport { createDialog, createImageDialog } from '../pop-up/dialog';\n/**\n * LargeIconsView module\n */\n\nvar LargeIconsView =\n/** @class */\nfunction () {\n  /**\n   * Constructor for the LargeIcons module\n   * @hidden\n   */\n  function LargeIconsView(parent) {\n    this.isInteraction = true;\n    this.uploadOperation = false;\n    this.count = 0;\n    this.isRendered = true;\n    this.tapCount = 0;\n    this.isPasteOperation = false;\n    this.isInteracted = true;\n    this.parent = parent;\n    this.element = select('#' + this.parent.element.id + CLS.LARGEICON_ID, this.parent.element);\n    addClass([this.element], CLS.LARGE_ICONS);\n    this.addEventListener();\n    this.keyConfigs = {\n      end: 'end',\n      home: 'home',\n      tab: 'tab',\n      moveDown: 'downarrow',\n      moveLeft: 'leftarrow',\n      moveRight: 'rightarrow',\n      moveUp: 'uparrow',\n      ctrlEnd: 'ctrl+end',\n      ctrlHome: 'ctrl+home',\n      ctrlDown: 'ctrl+downarrow',\n      ctrlLeft: 'ctrl+leftarrow',\n      ctrlRight: 'ctrl+rightarrow',\n      ctrlUp: 'ctrl+uparrow',\n      shiftEnd: 'shift+end',\n      shiftHome: 'shift+home',\n      shiftDown: 'shift+downarrow',\n      shiftLeft: 'shift+leftarrow',\n      shiftRight: 'shift+rightarrow',\n      shiftUp: 'shift+uparrow',\n      csEnd: 'ctrl+shift+end',\n      csHome: 'ctrl+shift+home',\n      csDown: 'ctrl+shift+downarrow',\n      csLeft: 'ctrl+shift+leftarrow',\n      csRight: 'ctrl+shift+rightarrow',\n      csUp: 'ctrl+shift+uparrow',\n      space: 'space',\n      ctrlSpace: 'ctrl+space',\n      shiftSpace: 'shift+space',\n      csSpace: 'ctrl+shift+space',\n      ctrlA: 'ctrl+a',\n      enter: 'enter',\n      altEnter: 'alt+enter',\n      esc: 'escape',\n      del: 'delete',\n      ctrlX: 'ctrl+x',\n      ctrlC: 'ctrl+c',\n      ctrlV: 'ctrl+v',\n      f2: 'f2',\n      shiftdel: 'shift+delete',\n      back: 'backspace',\n      ctrlD: 'ctrl+d'\n    };\n  }\n\n  LargeIconsView.prototype.render = function (args) {\n    this.parent.visitedItem = null;\n    this.startItem = null;\n    showSpinner(this.parent.element);\n\n    if (this.parent.view === 'LargeIcons') {\n      this.resetMultiSelect();\n      this.element.setAttribute('tabindex', '0');\n\n      if (this.listObj) {\n        this.unWireEvents();\n        this.removeEventListener();\n      }\n\n      this.parent.notify(events.hideLayout, {});\n      var iconsView = select('#' + this.parent.element.id + CLS.LARGEICON_ID, this.parent.element);\n      var ul = select('ul', iconsView);\n\n      if (ul) {\n        remove(ul);\n      }\n\n      this.listObj = {\n        ariaAttributes: {\n          itemRole: 'option',\n          listRole: 'listbox',\n          itemText: '',\n          groupItemRole: 'group',\n          wrapperRole: ''\n        },\n        showIcon: true,\n        fields: {\n          text: 'name',\n          iconCss: '_fm_icon',\n          imageUrl: '_fm_imageUrl',\n          htmlAttributes: '_fm_htmlAttr'\n        },\n        sortOrder: this.parent.sortOrder,\n        itemCreated: this.onItemCreated.bind(this),\n        enableHtmlSanitizer: this.parent.enableHtmlSanitizer\n      };\n      this.items = [];\n      this.items = this.renderList(args);\n      this.items = getSortedData(this.parent, this.items);\n      this.listElements = ListBase.createListFromJson(createElement, this.items, this.listObj);\n      this.itemList = Array.prototype.slice.call(selectAll('.' + CLS.LIST_ITEM, this.listElements));\n      this.element.appendChild(this.listElements);\n      this.preventImgDrag();\n      this.createDragObj();\n      iconsView.classList.remove(CLS.DISPLAY_NONE);\n\n      if (this.itemList.length === 0) {\n        var emptyList = this.element.querySelector('.' + CLS.LIST_PARENT);\n        this.element.removeChild(emptyList);\n        createEmptyElement(this.parent, this.element, args);\n      } else if (this.itemList.length !== 0 && this.element.querySelector('.' + CLS.EMPTY)) {\n        this.element.removeChild(this.element.querySelector('.' + CLS.EMPTY));\n      }\n\n      if (this.isPasteOperation === true) {\n        this.selectItems(this.parent.pasteNodes);\n        this.isPasteOperation = false;\n      }\n      /* istanbul ignore next */\n\n\n      if (this.uploadOperation === true) {\n        this.selectItems(this.parent.uploadItem);\n        this.parent.setProperties({\n          selectedItems: []\n        }, true);\n        this.count++;\n\n        if (this.count === this.parent.uploadItem.length) {\n          this.uploadOperation = false;\n          this.parent.uploadItem = [];\n        }\n      }\n\n      var activeEle = this.element.querySelectorAll('.' + CLS.ACTIVE);\n\n      if (activeEle.length !== 0) {\n        this.parent.activeModule = 'largeiconsview';\n      }\n\n      for (var i = 0; i < activeEle.length; i++) {\n        activeEle[i].setAttribute('aria-selected', 'true');\n      }\n\n      this.adjustHeight();\n      this.element.style.maxHeight = '100%';\n      this.getItemCount();\n      this.addEventListener();\n      this.wireEvents();\n      this.isRendered = true;\n      hideSpinner(this.parent.element);\n\n      if (this.parent.selectedItems.length) {\n        this.checkItem();\n      }\n    }\n  };\n\n  LargeIconsView.prototype.preventImgDrag = function () {\n    var i = 0;\n\n    while (i < this.itemList.length) {\n      if (this.itemList[i].querySelector('img')) {\n        /* istanbul ignore next */\n        this.itemList[i].ondragstart = function () {\n          return false;\n        };\n      }\n\n      i++;\n    }\n  };\n\n  LargeIconsView.prototype.createDragObj = function () {\n    var _this = this;\n\n    if (!this.parent.isMobile && this.listObj) {\n      if (this.parent.allowDragAndDrop) {\n        if (this.dragObj) {\n          this.dragObj.destroy();\n        }\n\n        this.dragObj = new Draggable(this.listElements, {\n          enableTailMode: true,\n          enableAutoScroll: true,\n          dragTarget: '.' + CLS.LARGE_ICON,\n          helper: this.dragHelper.bind(this),\n          cursorAt: this.parent.dragCursorPosition,\n          dragArea: this.parent.element,\n          dragStop: dragStopHandler.bind(this, this.parent),\n          drag: draggingHandler.bind(this, this.parent),\n          clone: true,\n          dragStart: function (args) {\n            dragStartHandler(_this.parent, args, _this.dragObj);\n          }\n        });\n      } else if (this.dragObj && !this.parent.allowDragAndDrop) {\n        this.dragObj.destroy();\n      }\n    }\n  };\n\n  LargeIconsView.prototype.dragHelper = function (args) {\n    var dragTarget = args.sender.target;\n    var dragLi = closest(dragTarget, '.e-list-item');\n\n    if (!dragLi) {\n      return null;\n    }\n\n    if (dragLi && !dragLi.classList.contains('e-active')) {\n      this.setFocus(dragLi);\n    }\n\n    var activeEle = this.element.querySelectorAll('.' + CLS.ACTIVE);\n    this.parent.activeElements = [];\n    this.parent.dragData = [];\n\n    for (var i = 0; i < activeEle.length; i++) {\n      this.parent.dragData.push(this.getItemObject(activeEle[i]));\n      this.parent.activeElements.push(activeEle[i]);\n    }\n\n    getModule(this.parent, dragLi);\n    this.parent.dragPath = this.parent.path;\n    createVirtualDragElement(this.parent);\n    return this.parent.virtualDragElement;\n  };\n\n  LargeIconsView.prototype.onDropInit = function (args) {\n    if (this.parent.targetModule === this.getModuleName()) {\n      var dropLi = closest(args.target, '.e-list-item');\n      var cwdData = getValue(this.parent.pathId[this.parent.pathId.length - 1], this.parent.feParent);\n\n      if (dropLi) {\n        var info = this.getItemObject(dropLi);\n        this.parent.dropPath = info.isFile ? this.parent.path : getFullPath(this.parent, info, this.parent.path);\n        this.parent.dropData = info.isFile ? cwdData : info;\n      } else {\n        this.parent.dropPath = this.parent.path;\n        this.parent.dropData = cwdData;\n      }\n    }\n  };\n  /**\n   * For internal use only - Get the module name.\n   * @private\n   */\n\n\n  LargeIconsView.prototype.getModuleName = function () {\n    return 'largeiconsview';\n  };\n\n  LargeIconsView.prototype.adjustHeight = function () {\n    var pane = select('#' + this.parent.element.id + CLS.CONTENT_ID, this.parent.element);\n    var bar = select('#' + this.parent.element.id + CLS.BREADCRUMBBAR_ID, this.parent.element);\n    this.element.style.height = pane.offsetHeight - bar.offsetHeight + 'px';\n  };\n\n  LargeIconsView.prototype.onItemCreated = function (args) {\n    args.item.removeAttribute('aria-level');\n\n    if (!this.parent.showFileExtension && getValue('isFile', args.curData)) {\n      var textEle = args.item.querySelector('.' + CLS.LIST_TEXT);\n      var txt = getValue('name', args.curData);\n      var type = getValue('type', args.curData);\n      textEle.innerHTML = txt.substr(0, txt.length - type.length);\n    }\n\n    this.renderCheckbox(args);\n    var eventArgs = {\n      element: args.item,\n      fileDetails: args.curData,\n      module: 'LargeIconsView'\n    };\n    this.parent.trigger('fileLoad', eventArgs);\n  };\n\n  LargeIconsView.prototype.renderCheckbox = function (args) {\n    if (!this.parent.allowMultiSelection) {\n      return;\n    }\n\n    var checkElement;\n    checkElement = createCheckBox(createElement, false, {\n      checked: false,\n      cssClass: 'e-small'\n    });\n    checkElement.setAttribute('role', 'checkbox');\n    checkElement.setAttribute('aria-checked', 'false');\n    args.item.firstElementChild.insertBefore(checkElement, args.item.firstElementChild.childNodes[0]);\n  };\n\n  LargeIconsView.prototype.onLayoutChange = function (args) {\n    if (this.parent.view === 'LargeIcons') {\n      this.destroy();\n      this.render(args);\n      /* istanbul ignore next */\n\n      if (getValue('name', args) === 'layout-change' && this.parent.fileAction === 'move' && this.parent.isCut && this.parent.selectedNodes && this.parent.selectedNodes.length !== 0) {\n        var indexes = this.getIndexes(this.parent.selectedNodes);\n        var length_1 = 0;\n\n        while (length_1 < indexes.length) {\n          addBlur(this.itemList[indexes[length_1]]);\n          length_1++;\n        }\n      }\n\n      var activeEle = this.element.querySelectorAll('.' + CLS.ACTIVE);\n\n      if (activeEle.length !== 0) {\n        this.element.focus();\n      }\n\n      this.checkItem();\n      this.parent.isLayoutChange = false;\n    } else {\n      this.element.setAttribute('tabindex', '-1');\n    }\n  };\n\n  LargeIconsView.prototype.checkItem = function () {\n    var checkEle = this.element.querySelectorAll('.' + CLS.ACTIVE);\n\n    if (checkEle) {\n      var checkLength = 0;\n\n      while (checkLength < checkEle.length) {\n        this.checkState(checkEle[checkLength], true);\n        checkLength++;\n      }\n    }\n  };\n\n  LargeIconsView.prototype.renderList = function (args) {\n    var i = 0;\n    var items = JSON.parse(JSON.stringify(args.files));\n\n    while (i < items.length) {\n      var icon = fileType(items[i]);\n      var name_1 = getValue('name', items[i]);\n      var selected = getItemName(this.parent, items[i]);\n      var className = this.parent.selectedItems && this.parent.selectedItems.indexOf(selected) !== -1 ? CLS.LARGE_ICON + ' e-active' : CLS.LARGE_ICON;\n\n      if (!hasEditAccess(items[i])) {\n        className += ' ' + getAccessClass(items[i]);\n      }\n\n      if (icon === CLS.ICON_IMAGE && this.parent.showThumbnail && hasReadAccess(items[i])) {\n        var imgUrl = getImageUrl(this.parent, items[i]);\n        setValue('_fm_imageUrl', imgUrl, items[i]);\n        setValue('_fm_imageAttr', {\n          alt: name_1\n        }, items[i]);\n      } else {\n        setValue('_fm_icon', icon, items[i]);\n      }\n\n      setValue('_fm_htmlAttr', {\n        class: className,\n        title: name_1\n      }, items[i]);\n      i++;\n    }\n\n    return items;\n  };\n\n  LargeIconsView.prototype.onFinalizeEnd = function (args) {\n    this.render(args);\n  };\n\n  LargeIconsView.prototype.onCreateEnd = function (args) {\n    if (this.parent.view !== 'LargeIcons') {\n      return;\n    }\n\n    this.onLayoutChange(args);\n    this.clearSelect();\n    this.selectItems([getValue(this.parent.hasId ? 'id' : 'name', this.parent.createdItem)]);\n    this.parent.createdItem = null;\n    this.parent.largeiconsviewModule.element.focus();\n  };\n\n  LargeIconsView.prototype.onSelectedData = function () {\n    if (this.parent.activeModule === 'largeiconsview') {\n      this.updateSelectedData();\n    }\n  };\n\n  LargeIconsView.prototype.onDeleteInit = function () {\n    if (this.parent.activeModule === 'largeiconsview') {\n      Delete(this.parent, this.parent.selectedItems, this.parent.path, 'delete');\n    }\n  };\n  /* istanbul ignore next */\n\n\n  LargeIconsView.prototype.onDeleteEnd = function (args) {\n    if (this.parent.view !== 'LargeIcons') {\n      return;\n    }\n\n    this.onLayoutChange(args);\n    this.parent.setProperties({\n      selectedItems: []\n    }, true);\n    this.clearSelect();\n  };\n\n  LargeIconsView.prototype.onRefreshEnd = function (args) {\n    if (this.parent.view !== 'LargeIcons') {\n      return;\n    }\n\n    this.onLayoutChange(args);\n  };\n\n  LargeIconsView.prototype.onRenameInit = function () {\n    if (this.parent.activeModule === 'largeiconsview' && this.parent.selectedItems.length === 1) {\n      this.updateRenameData();\n    }\n  };\n\n  LargeIconsView.prototype.onPathChanged = function (args) {\n    this.parent.isCut = false;\n    /* istanbul ignore next */\n\n    if (this.parent.breadcrumbbarModule.searchObj.element.value === '') {\n      this.parent.searchedItems = [];\n    }\n\n    if (this.parent.view === 'LargeIcons') {\n      removeBlur(this.parent);\n      this.parent.setProperties({\n        selectedItems: []\n      }, true);\n      this.onLayoutChange(args);\n\n      if (this.parent.renamedItem) {\n        this.clearSelect();\n        this.addSelection(this.parent.renamedItem);\n        this.parent.renamedItem = null;\n      }\n    }\n  };\n\n  LargeIconsView.prototype.onOpenInit = function (args) {\n    if (this.parent.activeModule === 'largeiconsview') {\n      this.doOpenAction(args.target);\n    }\n  };\n\n  LargeIconsView.prototype.onHideLayout = function () {\n    if (this.parent.view !== 'LargeIcons' && this.element) {\n      this.element.classList.add(CLS.DISPLAY_NONE);\n    }\n  };\n\n  LargeIconsView.prototype.onSelectAllInit = function () {\n    if (this.parent.view === 'LargeIcons') {\n      this.startItem = this.getFirstItem();\n      var lastItem = this.getLastItem();\n      var eveArgs = {\n        ctrlKey: true,\n        shiftKey: true\n      };\n      this.doSelection(lastItem, eveArgs);\n      this.isInteraction = true;\n      this.isInteracted = true;\n    }\n  };\n\n  LargeIconsView.prototype.onClearAllInit = function () {\n    if (this.parent.view === 'LargeIcons') {\n      this.clearSelection();\n      this.isInteraction = true;\n      this.isInteracted = true;\n    }\n  };\n\n  LargeIconsView.prototype.onBeforeRequest = function () {\n    this.isRendered = false;\n  };\n\n  LargeIconsView.prototype.onAfterRequest = function () {\n    this.isRendered = true;\n  };\n  /* istanbul ignore next */\n\n\n  LargeIconsView.prototype.onSearch = function (args) {\n    if (this.parent.view === 'LargeIcons') {\n      this.parent.setProperties({\n        selectedItems: []\n      }, true);\n      this.parent.notify(events.selectionChanged, {});\n      this.parent.searchedItems = args.files;\n      this.onLayoutChange(args);\n    }\n  };\n\n  LargeIconsView.prototype.onLayoutRefresh = function () {\n    if (this.parent.view !== 'LargeIcons') {\n      return;\n    }\n\n    this.adjustHeight();\n  };\n\n  LargeIconsView.prototype.onUpdateSelectionData = function () {\n    if (this.parent.view !== 'LargeIcons') {\n      return;\n    }\n\n    this.updateSelectedData();\n  };\n\n  LargeIconsView.prototype.onPathColumn = function () {\n    if (this.parent.view === 'LargeIcons' && !isNOU(this.listObj) && this.parent.breadcrumbbarModule.searchObj.element.value === '' && !this.parent.isFiltered && this.parent.sortBy === 'filterPath') {\n      this.parent.sortBy = 'name';\n      this.parent.notify(events.sortByChange, {});\n    }\n  };\n\n  LargeIconsView.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(events.pathColumn, this.onPathColumn);\n    this.parent.off(events.finalizeEnd, this.onFinalizeEnd);\n    this.parent.off(events.createEnd, this.onCreateEnd);\n    this.parent.off(events.selectedData, this.onSelectedData);\n    this.parent.off(events.deleteInit, this.onDeleteInit);\n    this.parent.off(events.deleteEnd, this.onDeleteEnd);\n    this.parent.off(events.refreshEnd, this.onRefreshEnd);\n    this.parent.off(events.pathChanged, this.onPathChanged);\n    this.parent.off(events.layoutChange, this.onLayoutChange);\n    this.parent.off(events.search, this.onSearch);\n    this.parent.off(events.openInit, this.onOpenInit);\n    this.parent.off(events.openEnd, this.onPathChanged);\n    this.parent.off(events.modelChanged, this.onPropertyChanged);\n    this.parent.off(events.methodCall, this.onMethodCall);\n    this.parent.off(events.actionFailure, this.onActionFailure);\n    this.parent.off(events.renameInit, this.onRenameInit);\n    this.parent.off(events.renameEnd, this.onPathChanged);\n    this.parent.off(events.hideLayout, this.onHideLayout);\n    this.parent.off(events.selectAllInit, this.onSelectAllInit);\n    this.parent.off(events.clearAllInit, this.onClearAllInit);\n    this.parent.off(events.menuItemData, this.onMenuItemData);\n    this.parent.off(events.beforeRequest, this.onBeforeRequest);\n    this.parent.off(events.afterRequest, this.onAfterRequest);\n    this.parent.off(events.splitterResize, this.splitterResizeHandler);\n    this.parent.off(events.resizeEnd, this.resizeHandler);\n    this.parent.off(events.pasteInit, this.onpasteInit);\n    this.parent.off(events.pasteEnd, this.onpasteEnd);\n    this.parent.off(events.cutCopyInit, this.oncutCopyInit);\n    this.parent.off(events.dropInit, this.onDropInit);\n    this.parent.off(events.detailsInit, this.onDetailsInit);\n    this.parent.off(events.layoutRefresh, this.onLayoutRefresh);\n    this.parent.off(events.dropPath, this.onDropPath);\n    this.parent.off(events.updateSelectionData, this.onUpdateSelectionData);\n    this.parent.off(events.filterEnd, this.onPathChanged);\n  };\n\n  LargeIconsView.prototype.addEventListener = function () {\n    this.parent.on(events.pathColumn, this.onPathColumn, this);\n    this.parent.on(events.finalizeEnd, this.onFinalizeEnd, this);\n    this.parent.on(events.createEnd, this.onCreateEnd, this);\n    this.parent.on(events.refreshEnd, this.onRefreshEnd, this);\n    this.parent.on(events.selectedData, this.onSelectedData, this);\n    this.parent.on(events.pathChanged, this.onPathChanged, this);\n    this.parent.on(events.deleteInit, this.onDeleteInit, this);\n    this.parent.on(events.pasteInit, this.onpasteInit, this);\n    this.parent.on(events.deleteEnd, this.onDeleteEnd, this);\n    this.parent.on(events.layoutChange, this.onLayoutChange, this);\n    this.parent.on(events.search, this.onSearch, this);\n    this.parent.on(events.openInit, this.onOpenInit, this);\n    this.parent.on(events.renameInit, this.onRenameInit, this);\n    this.parent.on(events.renameEnd, this.onPathChanged, this);\n    this.parent.on(events.openEnd, this.onPathChanged, this);\n    this.parent.on(events.modelChanged, this.onPropertyChanged, this);\n    this.parent.on(events.methodCall, this.onMethodCall, this);\n    this.parent.on(events.actionFailure, this.onActionFailure, this);\n    this.parent.on(events.hideLayout, this.onHideLayout, this);\n    this.parent.on(events.selectAllInit, this.onSelectAllInit, this);\n    this.parent.on(events.clearAllInit, this.onClearAllInit, this);\n    this.parent.on(events.menuItemData, this.onMenuItemData, this);\n    this.parent.on(events.beforeRequest, this.onBeforeRequest, this);\n    this.parent.on(events.afterRequest, this.onAfterRequest, this);\n    this.parent.on(events.dropInit, this.onDropInit, this);\n    this.parent.on(events.detailsInit, this.onDetailsInit, this);\n    this.parent.on(events.splitterResize, this.splitterResizeHandler, this);\n    this.parent.on(events.resizeEnd, this.resizeHandler, this);\n    this.parent.on(events.pasteEnd, this.onpasteEnd, this);\n    this.parent.on(events.cutCopyInit, this.oncutCopyInit, this);\n    this.parent.on(events.layoutRefresh, this.onLayoutRefresh, this);\n    this.parent.on(events.dropPath, this.onDropPath, this);\n    this.parent.on(events.updateSelectionData, this.onUpdateSelectionData, this);\n    this.parent.on(events.filterEnd, this.onPathChanged, this);\n  };\n\n  LargeIconsView.prototype.onActionFailure = function () {\n    this.isInteraction = true;\n    this.isInteracted = true;\n  };\n\n  LargeIconsView.prototype.onMenuItemData = function (args) {\n    if (this.parent.activeModule === this.getModuleName()) {\n      var ele = closest(args.target, 'li');\n      this.parent.itemData = [this.getItemObject(ele)];\n    }\n  };\n\n  LargeIconsView.prototype.onDetailsInit = function () {\n    if (this.parent.activeModule === this.getModuleName()) {\n      if (this.parent.selectedItems.length !== 0) {\n        this.updateSelectedData();\n      } else {\n        this.parent.itemData = [getValue(this.parent.pathId[this.parent.pathId.length - 1], this.parent.feParent)];\n      }\n    }\n  };\n\n  LargeIconsView.prototype.onpasteInit = function () {\n    if (this.parent.activeModule === this.getModuleName()) {\n      this.parent.itemData = this.parent.folderPath === '' ? [getPathObject(this.parent)] : [this.getItemObject(select('.e-active', this.element))];\n    }\n  };\n\n  LargeIconsView.prototype.oncutCopyInit = function () {\n    if (this.parent.activeModule === this.getModuleName()) {\n      var activeEle = this.element.querySelectorAll('.' + CLS.ACTIVE);\n      this.parent.activeRecords = [];\n      this.parent.activeElements = [];\n\n      for (var i = 0; i < activeEle.length; i++) {\n        this.parent.activeElements.push(activeEle[i]);\n        this.parent.activeRecords.push(this.getItemObject(activeEle[i]));\n      }\n    }\n  };\n\n  LargeIconsView.prototype.onpasteEnd = function (args) {\n    if (this.parent.view === 'LargeIcons') {\n      this.isPasteOperation = true;\n\n      if (this.parent.path === this.parent.destinationPath || this.parent.path === getDirectoryPath(this.parent, args)) {\n        this.onPathChanged(args);\n      }\n    }\n  };\n\n  LargeIconsView.prototype.onDropPath = function (args) {\n    if (this.parent.view === 'LargeIcons') {\n      this.isPasteOperation = true;\n      this.onPathChanged(args);\n    }\n  };\n\n  LargeIconsView.prototype.onPropertyChanged = function (e) {\n    if (e.module !== this.getModuleName() && e.module !== 'common') {\n      return;\n    }\n\n    for (var _i = 0, _a = Object.keys(e.newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'allowDragAndDrop':\n          this.createDragObj();\n          break;\n\n        case 'height':\n          this.adjustHeight();\n          break;\n\n        case 'selectedItems':\n          this.isInteraction = false;\n          this.isInteracted = false;\n          var currentSelected = isNOU(this.parent.selectedItems) ? [] : this.parent.selectedItems.slice(0);\n          currentSelected = this.parent.allowMultiSelection ? currentSelected : currentSelected.slice(currentSelected.length - 1);\n          this.parent.setProperties({\n            selectedItems: []\n          }, true);\n          this.onClearAllInit();\n\n          if (currentSelected.length) {\n            this.selectItems(currentSelected);\n          }\n\n          this.parent.setProperties({\n            selectedItems: this.parent.selectedItems\n          }, true);\n          this.isInteraction = true;\n          this.isInteracted = true;\n          break;\n\n        case 'showThumbnail':\n          refresh(this.parent);\n          break;\n\n        case 'showFileExtension':\n          read(this.parent, events.pathChanged, this.parent.path);\n          break;\n\n        case 'showHiddenItems':\n          read(this.parent, events.pathChanged, this.parent.path);\n          break;\n\n        case 'allowMultiSelection':\n          if (this.parent.view !== 'LargeIcons') {\n            break;\n          }\n\n          refresh(this.parent);\n          break;\n\n        case 'view':\n          updateLayout(this.parent, 'LargeIcons');\n          break;\n      }\n    }\n  };\n\n  LargeIconsView.prototype.destroy = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.removeEventListener();\n\n    if (this.listObj) {\n      this.unWireEvents();\n    }\n  };\n\n  LargeIconsView.prototype.wireEvents = function () {\n    this.wireClickEvent(true);\n    this.keyboardModule = new KeyboardEvents(this.element, {\n      keyAction: this.keyActionHandler.bind(this),\n      keyConfigs: this.keyConfigs,\n      eventName: 'keyup'\n    });\n    this.keyboardDownModule = new KeyboardEvents(this.element, {\n      keyAction: this.keydownActionHandler.bind(this),\n      keyConfigs: this.keyConfigs,\n      eventName: 'keydown'\n    });\n    EventHandler.add(this.element, 'mouseover', this.onMouseOver, this);\n  };\n\n  LargeIconsView.prototype.unWireEvents = function () {\n    this.wireClickEvent(false);\n    EventHandler.remove(this.element, 'mouseover', this.onMouseOver);\n    this.keyboardModule.destroy();\n    this.keyboardDownModule.destroy();\n  };\n  /* istanbul ignore next */\n\n\n  LargeIconsView.prototype.onMouseOver = function (e) {\n    var targetEle = closest(e.target, '.e-list-item');\n    removeBlur(this.parent, 'hover');\n\n    if (targetEle !== null) {\n      targetEle.classList.add(CLS.HOVER);\n    }\n  };\n\n  LargeIconsView.prototype.wireClickEvent = function (toBind) {\n    if (toBind) {\n      var proxy_1 = this;\n      this.clickObj = new Touch(this.element, {\n        tap: function (eve) {\n          eve.originalEvent.preventDefault();\n\n          if (proxy_1.parent.isDevice) {\n            proxy_1.tapCount = eve.tapCount;\n            proxy_1.tapEvent = eve;\n            setTimeout(function () {\n              if (proxy_1.tapCount > 0) {\n                proxy_1.doTapAction(proxy_1.tapEvent);\n              }\n\n              proxy_1.tapCount = 0;\n            }, 350);\n          } else {\n            if (eve.tapCount === 2 && eve.originalEvent.which !== 3) {\n              proxy_1.dblClickHandler(eve);\n            } else {\n              proxy_1.clickHandler(eve);\n            }\n          }\n        },\n        tapHold: function (e) {\n          if (proxy_1.parent.isDevice) {\n            proxy_1.multiSelect = proxy_1.parent.allowMultiSelection ? true : false;\n\n            if (proxy_1.parent.allowMultiSelection) {\n              addClass([proxy_1.parent.element], CLS.MULTI_SELECT);\n            }\n\n            proxy_1.clickHandler(e);\n          }\n        }\n      });\n    } else {\n      if (this.clickObj) {\n        this.clickObj.destroy();\n      }\n    }\n  };\n\n  LargeIconsView.prototype.doTapAction = function (eve) {\n    var target = eve.originalEvent.target;\n    var item = closest(target, '.' + CLS.LIST_ITEM);\n\n    if (this.multiSelect || target.classList.contains(CLS.LIST_PARENT) || isNOU(item)) {\n      this.clickHandler(eve);\n    } else {\n      this.parent.isFile = false;\n      this.updateType(item);\n\n      if (!this.parent.isFile) {\n        this.dblClickHandler(eve);\n      } else if (eve.tapCount === 2) {\n        this.clickHandler(eve);\n        this.dblClickHandler(eve);\n      } else {\n        this.clickHandler(eve);\n      }\n    }\n  };\n\n  LargeIconsView.prototype.clickHandler = function (e) {\n    var target = e.originalEvent.target;\n    removeBlur(this.parent, 'hover');\n    this.doSelection(target, e.originalEvent);\n    this.parent.activeModule = 'largeiconsview';\n  };\n  /** @hidden */\n\n\n  LargeIconsView.prototype.doSelection = function (target, e) {\n    var item = closest(target, '.' + CLS.LIST_ITEM);\n    var cList = target.classList;\n    this.parent.isFile = false;\n    var action = 'select';\n\n    if (e.which === 3 && !isNOU(item) && item.classList.contains(CLS.ACTIVE)) {\n      this.updateType(item);\n      return;\n    } else if (!isNOU(item)) {\n      if (this.parent.allowMultiSelection && item.classList.contains(CLS.ACTIVE) && (e.ctrlKey || target.classList.contains(CLS.CHECK))) {\n        action = 'unselect';\n      }\n\n      var fileSelectionArgs = this.triggerSelection(action, item);\n\n      if (fileSelectionArgs.cancel !== true) {\n        if ((!this.parent.allowMultiSelection || !this.multiSelect && e && !e.ctrlKey) && !cList.contains(CLS.FRAME)) {\n          this.updateType(item);\n          this.clearSelect();\n        }\n\n        if (this.parent.allowMultiSelection && e.shiftKey) {\n          if (!(e && e.ctrlKey)) {\n            this.clearSelect();\n          }\n\n          if (!this.startItem) {\n            this.startItem = item;\n          }\n\n          var startIndex = this.itemList.indexOf(this.startItem);\n          var endIndex = this.itemList.indexOf(item);\n\n          if (startIndex > endIndex) {\n            for (var i = startIndex; i >= endIndex; i--) {\n              this.addActive(this.itemList[i]);\n            }\n          } else {\n            for (var i = startIndex; i <= endIndex; i++) {\n              this.addActive(this.itemList[i]);\n            }\n          }\n\n          this.addFocus(this.itemList[endIndex]);\n        } else {\n          this.startItem = item;\n\n          if (this.parent.allowMultiSelection && item.classList.contains(CLS.ACTIVE)) {\n            this.removeActive(item);\n          } else {\n            this.addActive(item);\n          }\n\n          this.addFocus(item);\n        }\n\n        if (this.parent.selectedItems.length === 0) {\n          this.resetMultiSelect();\n        }\n\n        this.parent.notify(events.selectionChanged, {});\n        this.triggerSelect(action, item);\n      }\n    } else {\n      this.clearSelection();\n    }\n  };\n\n  LargeIconsView.prototype.dblClickHandler = function (e) {\n    this.parent.activeModule = 'largeiconsview';\n    var target = e.originalEvent.target;\n    this.doOpenAction(target);\n  };\n\n  LargeIconsView.prototype.clearSelection = function () {\n    this.clearSelect();\n    this.resetMultiSelect();\n    this.parent.notify(events.selectionChanged, {});\n  };\n\n  LargeIconsView.prototype.resetMultiSelect = function () {\n    this.multiSelect = false;\n    removeClass([this.parent.element], CLS.MULTI_SELECT);\n  };\n\n  LargeIconsView.prototype.doOpenAction = function (target) {\n    var _this = this;\n\n    if (isNOU(target)) {\n      return;\n    }\n\n    var item = closest(target, '.' + CLS.LIST_ITEM);\n    this.parent.isFile = false;\n\n    if (!isNOU(item)) {\n      this.updateType(item);\n      var details_1 = this.getItemObject(item);\n\n      if (!hasReadAccess(details_1)) {\n        createDeniedDialog(this.parent, details_1, events.permissionRead);\n        return;\n      }\n\n      var eventArgs = {\n        cancel: false,\n        fileDetails: details_1,\n        module: 'LargeIconsView'\n      };\n      this.parent.trigger('fileOpen', eventArgs, function (fileOpenArgs) {\n        if (!fileOpenArgs.cancel) {\n          var text = getValue('name', details_1);\n\n          if (!_this.parent.isFile) {\n            var val = _this.parent.breadcrumbbarModule.searchObj.element.value;\n\n            if (val === '' && !_this.parent.isFiltered) {\n              var id = getValue('id', details_1);\n              var newPath = _this.parent.path + (isNOU(id) ? text : id) + '/';\n\n              _this.parent.setProperties({\n                path: newPath\n              }, true);\n\n              _this.parent.pathNames.push(text);\n\n              _this.parent.pathId.push(getValue('_fm_id', details_1));\n\n              _this.parent.itemData = [details_1];\n              openAction(_this.parent);\n            } else {\n              openSearchFolder(_this.parent, details_1);\n            }\n\n            _this.parent.isFiltered = false;\n\n            _this.parent.setProperties({\n              selectedItems: []\n            }, true);\n          } else {\n            var icon = fileType(details_1);\n\n            if (icon === CLS.ICON_IMAGE) {\n              var imgUrl = getImageUrl(_this.parent, details_1);\n              createImageDialog(_this.parent, text, imgUrl);\n            }\n          }\n        }\n      });\n    }\n  };\n\n  LargeIconsView.prototype.updateType = function (item) {\n    var folder = select('.' + CLS.FOLDER, item);\n    this.parent.isFile = isNOU(folder) ? true : false;\n  };\n  /* istanbul ignore next */\n  // tslint:disable-next-line:max-func-body-length\n\n\n  LargeIconsView.prototype.keydownActionHandler = function (e) {\n    if (!this.isRendered) {\n      return;\n    }\n\n    switch (e.action) {\n      case 'end':\n      case 'home':\n      case 'moveDown':\n      case 'moveLeft':\n      case 'moveRight':\n      case 'moveUp':\n      case 'ctrlEnd':\n      case 'shiftEnd':\n      case 'csEnd':\n      case 'ctrlHome':\n      case 'shiftHome':\n      case 'csHome':\n      case 'ctrlDown':\n      case 'shiftDown':\n      case 'csDown':\n      case 'ctrlLeft':\n      case 'shiftLeft':\n      case 'csLeft':\n      case 'ctrlRight':\n      case 'shiftRight':\n      case 'csRight':\n      case 'space':\n      case 'ctrlSpace':\n      case 'shiftSpace':\n      case 'csSpace':\n      case 'ctrlA':\n      case 'enter':\n      case 'altEnter':\n      case 'esc':\n      case 'del':\n      case 'shiftdel':\n      case 'ctrlC':\n      case 'ctrlV':\n      case 'ctrlX':\n      case 'f2':\n      case 'ctrlD':\n        e.preventDefault();\n        break;\n\n      default:\n        break;\n    }\n  };\n  /* istanbul ignore next */\n  // tslint:disable-next-line:max-func-body-length\n\n\n  LargeIconsView.prototype.keyActionHandler = function (e) {\n    if (!this.isRendered) {\n      return;\n    }\n\n    var fItem = this.getFocusedItem();\n    var firstItem = this.getFirstItem();\n    var lastItem = this.getLastItem();\n\n    switch (e.action) {\n      case 'end':\n        this.navigateItem(lastItem);\n        break;\n\n      case 'home':\n        this.navigateItem(firstItem);\n        break;\n\n      case 'tab':\n        if (!isNOU(fItem)) {\n          this.addFocus(fItem);\n        } else if (!isNOU(firstItem)) {\n          this.addFocus(firstItem);\n        }\n\n        break;\n\n      case 'moveDown':\n        this.navigateDown(fItem, true);\n        break;\n\n      case 'moveLeft':\n        this.navigateRight(fItem, false);\n        break;\n\n      case 'moveRight':\n        this.navigateRight(fItem, true);\n        break;\n\n      case 'moveUp':\n        this.navigateDown(fItem, false);\n        break;\n\n      case 'ctrlEnd':\n      case 'shiftEnd':\n      case 'csEnd':\n        this.csEndKey(lastItem, e);\n        break;\n\n      case 'ctrlHome':\n      case 'shiftHome':\n      case 'csHome':\n        this.csHomeKey(firstItem, e);\n        break;\n\n      case 'ctrlDown':\n      case 'shiftDown':\n      case 'csDown':\n        this.csDownKey(fItem, e);\n        break;\n\n      case 'ctrlLeft':\n      case 'shiftLeft':\n      case 'csLeft':\n        this.csLeftKey(fItem, e);\n        break;\n\n      case 'ctrlRight':\n      case 'shiftRight':\n      case 'csRight':\n        this.csRightKey(fItem, e);\n        break;\n\n      case 'ctrlUp':\n      case 'shiftUp':\n      case 'csUp':\n        this.csUpKey(fItem, e);\n        break;\n\n      case 'space':\n        this.spaceKey(fItem);\n        break;\n\n      case 'ctrlSpace':\n      case 'shiftSpace':\n      case 'csSpace':\n        if (!isNOU(fItem)) {\n          this.doSelection(fItem, e);\n        }\n\n        break;\n\n      case 'ctrlA':\n        this.ctrlAKey(firstItem, lastItem);\n        break;\n\n      case 'enter':\n        this.doOpenAction(this.parent.visitedItem ? this.parent.visitedItem : this.getVisitedItem());\n        break;\n\n      case 'altEnter':\n        this.parent.notify(events.detailsInit, {});\n        GetDetails(this.parent, this.parent.selectedItems, this.parent.path, 'details');\n        break;\n\n      case 'esc':\n        removeActive(this.parent);\n        break;\n\n      case 'del':\n      case 'shiftdel':\n        this.performDelete();\n        break;\n\n      case 'ctrlC':\n        copyFiles(this.parent);\n        break;\n\n      case 'ctrlV':\n        this.parent.folderPath = '';\n        pasteHandler(this.parent);\n        break;\n\n      case 'ctrlX':\n        cutFiles(this.parent);\n        break;\n\n      case 'f2':\n        this.performRename();\n        break;\n\n      case 'ctrlD':\n        this.doDownload();\n        break;\n    }\n  };\n\n  LargeIconsView.prototype.doDownload = function () {\n    this.updateSelectedData();\n    doDownload(this.parent);\n  };\n\n  LargeIconsView.prototype.performDelete = function () {\n    if (this.parent.selectedItems && this.parent.selectedItems.length > 0) {\n      this.updateSelectedData();\n      var data = this.parent.itemData;\n\n      for (var i = 0; i < data.length; i++) {\n        if (!hasEditAccess(data[i])) {\n          createDeniedDialog(this.parent, data[i], events.permissionEdit);\n          return;\n        }\n      }\n\n      createDialog(this.parent, 'Delete');\n    }\n  };\n\n  LargeIconsView.prototype.performRename = function () {\n    if (this.parent.selectedItems.length === 1) {\n      this.updateRenameData();\n      doRename(this.parent);\n    }\n  };\n\n  LargeIconsView.prototype.updateRenameData = function () {\n    var item = select('.' + CLS.LIST_ITEM + '.' + CLS.ACTIVE, this.element);\n    var data = this.getItemObject(item);\n    updateRenamingData(this.parent, data);\n  };\n\n  LargeIconsView.prototype.getVisitedItem = function () {\n    var item = this.parent.selectedItems[this.parent.selectedItems.length - 1];\n    var indexes = this.getIndexes([item], this.parent.hasId);\n    return this.itemList[indexes[0]];\n  };\n\n  LargeIconsView.prototype.getFocusedItem = function () {\n    return select('.' + CLS.LIST_ITEM + '.' + CLS.FOCUS, this.element);\n  };\n\n  LargeIconsView.prototype.getActiveItem = function () {\n    return select('.' + CLS.LIST_ITEM + '.' + CLS.ACTIVE, this.element);\n  };\n\n  LargeIconsView.prototype.getFirstItem = function () {\n    return this.itemList[0];\n  };\n\n  LargeIconsView.prototype.getLastItem = function () {\n    return this.itemList[this.itemList.length - 1];\n  };\n\n  LargeIconsView.prototype.navigateItem = function (item) {\n    this.setFocus(item);\n  };\n\n  LargeIconsView.prototype.navigateDown = function (fItem, isTowards) {\n    var nItem = this.getNextItem(fItem, isTowards, this.perRow);\n    this.setFocus(nItem);\n  };\n\n  LargeIconsView.prototype.navigateRight = function (fItem, isTowards) {\n    var nItem = this.getNextItem(fItem, isTowards);\n    this.setFocus(nItem);\n  };\n\n  LargeIconsView.prototype.getNextItem = function (li, isTowards, perRow) {\n    if (isNOU(li)) {\n      return this.getFocusedItem() || this.getActiveItem() || this.getFirstItem();\n    }\n\n    var index = this.itemList.indexOf(li);\n    var nextItem;\n\n    do {\n      if (isTowards) {\n        index = perRow ? index + perRow : index + 1;\n      } else {\n        index = perRow ? index - perRow : index - 1;\n      }\n\n      nextItem = this.itemList[index];\n\n      if (isNOU(nextItem)) {\n        return li;\n      }\n    } while (!isVisible(nextItem));\n\n    return nextItem;\n  };\n\n  LargeIconsView.prototype.setFocus = function (nextItem) {\n    if (!isNOU(nextItem)) {\n      var fileSelectionArgs = this.triggerSelection('select', nextItem);\n\n      if (fileSelectionArgs.cancel !== true) {\n        this.startItem = nextItem;\n        this.clearSelect();\n        this.addActive(nextItem);\n        this.addFocus(nextItem);\n        this.parent.notify(events.selectionChanged, {});\n        this.triggerSelect('select', nextItem);\n      }\n    }\n  };\n\n  LargeIconsView.prototype.spaceKey = function (fItem) {\n    if (!isNOU(fItem) && !fItem.classList.contains(CLS.ACTIVE)) {\n      var fileSelectionArgs = this.triggerSelection('select', fItem);\n\n      if (fileSelectionArgs.cancel !== true) {\n        this.addActive(fItem);\n        this.parent.notify(events.selectionChanged, {});\n        this.triggerSelect('select', fItem);\n      }\n    }\n  };\n\n  LargeIconsView.prototype.ctrlAKey = function (firstItem, lastItem) {\n    if (this.parent.allowMultiSelection && !isNOU(firstItem)) {\n      this.startItem = firstItem;\n      var eveArgs = {\n        ctrlKey: true,\n        shiftKey: true\n      };\n      this.doSelection(lastItem, eveArgs);\n    }\n  };\n\n  LargeIconsView.prototype.csEndKey = function (lastItem, e) {\n    if (!this.parent.allowMultiSelection) {\n      this.navigateItem(lastItem);\n    } else if (!isNOU(lastItem)) {\n      e.action === 'ctrlEnd' ? this.addFocus(lastItem) : this.doSelection(lastItem, e);\n    }\n  };\n\n  LargeIconsView.prototype.csHomeKey = function (firstItem, e) {\n    if (!this.parent.allowMultiSelection) {\n      this.navigateItem(firstItem);\n    } else if (!isNOU(firstItem)) {\n      e.action === 'ctrlHome' ? this.addFocus(firstItem) : this.doSelection(firstItem, e);\n    }\n  };\n\n  LargeIconsView.prototype.csDownKey = function (fItem, e) {\n    if (!this.parent.allowMultiSelection) {\n      this.navigateDown(fItem, true);\n    } else {\n      var dItem = this.getNextItem(fItem, true, this.perRow);\n\n      if (!isNOU(dItem)) {\n        e.action === 'ctrlDown' ? this.addFocus(dItem) : this.doSelection(dItem, e);\n      }\n    }\n  };\n\n  LargeIconsView.prototype.csLeftKey = function (fItem, e) {\n    if (!this.parent.allowMultiSelection) {\n      this.navigateRight(fItem, false);\n    } else {\n      var lItem = this.getNextItem(fItem, false);\n\n      if (!isNOU(lItem)) {\n        e.action === 'ctrlLeft' ? this.addFocus(lItem) : this.doSelection(lItem, e);\n      }\n    }\n  };\n\n  LargeIconsView.prototype.csRightKey = function (fItem, e) {\n    if (!this.parent.allowMultiSelection) {\n      this.navigateRight(fItem, true);\n    } else {\n      var rItem = this.getNextItem(fItem, true);\n\n      if (!isNOU(rItem)) {\n        e.action === 'ctrlRight' ? this.addFocus(rItem) : this.doSelection(rItem, e);\n      }\n    }\n  };\n\n  LargeIconsView.prototype.csUpKey = function (fItem, e) {\n    if (!this.parent.allowMultiSelection) {\n      this.navigateDown(fItem, false);\n    } else {\n      var uItem = this.getNextItem(fItem, false, this.perRow);\n\n      if (!isNOU(uItem)) {\n        e.action === 'ctrlUp' ? this.addFocus(uItem) : this.doSelection(uItem, e);\n      }\n    }\n  };\n\n  LargeIconsView.prototype.addActive = function (nextItem) {\n    if (!isNOU(nextItem)) {\n      if (!nextItem.classList.contains(CLS.ACTIVE)) {\n        this.parent.selectedItems.push(this.getDataName(nextItem));\n        this.parent.setProperties({\n          selectedItems: this.parent.selectedItems\n        }, true);\n        addClass([nextItem], [CLS.ACTIVE]);\n        nextItem.setAttribute('aria-selected', 'true');\n        this.checkState(nextItem, true);\n      }\n\n      this.parent.visitedItem = nextItem;\n    }\n  };\n\n  LargeIconsView.prototype.removeActive = function (preItem) {\n    if (!isNOU(preItem)) {\n      removeClass([preItem], [CLS.ACTIVE]);\n\n      if (this.parent.allowMultiSelection) {\n        preItem.setAttribute('aria-selected', 'false');\n      } else {\n        preItem.removeAttribute('aria-selected');\n      }\n\n      this.checkState(preItem, false);\n      var index = this.parent.selectedItems.indexOf(this.getDataName(preItem));\n\n      if (index > -1) {\n        this.parent.selectedItems.splice(index, 1);\n        this.parent.setProperties({\n          selectedItems: this.parent.selectedItems\n        }, true);\n      }\n\n      this.parent.visitedItem = null;\n    }\n  };\n\n  LargeIconsView.prototype.getDataName = function (item) {\n    var data = this.getItemObject(item);\n    return getItemName(this.parent, data);\n  };\n\n  LargeIconsView.prototype.addFocus = function (item) {\n    this.element.setAttribute('tabindex', '-1');\n    var fItem = this.getFocusedItem();\n\n    if (fItem) {\n      fItem.removeAttribute('tabindex');\n      removeClass([fItem], [CLS.FOCUS]);\n    }\n\n    addClass([item], [CLS.FOCUS]);\n    item.setAttribute('tabindex', '0');\n    item.focus();\n  };\n\n  LargeIconsView.prototype.checkState = function (item, toCheck) {\n    if (!this.parent.allowMultiSelection) {\n      return;\n    }\n\n    var checkEle = select('.' + CLS.FRAME, item);\n\n    if (isNOU(checkEle)) {\n      return;\n    }\n\n    if (toCheck) {\n      if (!checkEle.classList.contains(CLS.CHECK)) {\n        addClass([checkEle], CLS.CHECK);\n        closest(checkEle, '.' + CLS.CB_WRAP).setAttribute('aria-checked', 'true');\n      }\n    } else {\n      if (checkEle.classList.contains(CLS.CHECK)) {\n        removeClass([checkEle], CLS.CHECK);\n        closest(checkEle, '.' + CLS.CB_WRAP).setAttribute('aria-checked', 'false');\n      }\n    }\n  };\n\n  LargeIconsView.prototype.clearSelect = function () {\n    var eles = Array.prototype.slice.call(selectAll('.' + CLS.ACTIVE, this.listElements));\n    var fileSelectionArgs;\n\n    if (eles.length !== 0) {\n      fileSelectionArgs = this.triggerSelection('unselect', eles[0]);\n\n      if (fileSelectionArgs.cancel !== true) {\n        for (var i = 0, len = eles.length; i < len; i++) {\n          this.removeActive(eles[i]);\n        }\n      }\n\n      this.triggerSelect('unselect', eles[0]);\n    }\n  };\n\n  LargeIconsView.prototype.resizeHandler = function () {\n    this.getItemCount();\n\n    if (!isNOU(this.listObj)) {\n      this.adjustHeight();\n    }\n  };\n\n  LargeIconsView.prototype.splitterResizeHandler = function () {\n    this.getItemCount();\n  };\n\n  LargeIconsView.prototype.getItemCount = function () {\n    var perRow = 1;\n\n    if (this.itemList) {\n      for (var i = 0, len = this.itemList.length - 1; i < len; i++) {\n        if (this.itemList[i].getBoundingClientRect().top === this.itemList[i + 1].getBoundingClientRect().top) {\n          perRow++;\n        } else {\n          break;\n        }\n      }\n    }\n\n    this.perRow = perRow;\n  };\n\n  LargeIconsView.prototype.triggerSelection = function (action, item) {\n    var data = this.getItemObject(item);\n    var eventArgs = {\n      action: action,\n      fileDetails: data,\n      isInteracted: this.isInteraction,\n      cancel: false,\n      target: item\n    };\n    this.parent.trigger('fileSelection', eventArgs);\n    this.isInteraction = true;\n    return eventArgs;\n  };\n\n  LargeIconsView.prototype.triggerSelect = function (action, item) {\n    var data = this.getItemObject(item);\n    this.parent.visitedData = data;\n    var eventArgs = {\n      action: action,\n      fileDetails: data,\n      isInteracted: this.isInteracted\n    };\n    this.parent.trigger('fileSelect', eventArgs);\n    this.isInteracted = true;\n  };\n\n  LargeIconsView.prototype.selectItems = function (items) {\n    var indexes = this.getIndexes(items, this.parent.hasId);\n\n    for (var j = 0, len = indexes.length; j < len; j++) {\n      var eveArgs = {\n        ctrlKey: true,\n        shiftKey: false\n      };\n      this.doSelection(this.itemList[indexes[j]], eveArgs);\n    }\n  };\n\n  LargeIconsView.prototype.getIndexes = function (items, byId) {\n    var indexes = [];\n    var filter = byId ? 'id' : 'name';\n\n    for (var i = 0, len = this.items.length; i < len; i++) {\n      if (items.indexOf(getValue(filter, this.items[i])) !== -1) {\n        indexes.push(i);\n      }\n    }\n\n    return indexes;\n  };\n\n  LargeIconsView.prototype.getItemObject = function (item) {\n    var index = this.itemList.indexOf(item);\n    return this.items[index];\n  };\n\n  LargeIconsView.prototype.addSelection = function (data) {\n    var resultData = [];\n\n    if (this.parent.hasId) {\n      resultData = new DataManager(this.items).executeLocal(new Query().where('id', 'equal', this.parent.renamedId, false));\n    } else {\n      var newData = new DataManager(this.items).executeLocal(new Query().where('name', 'equal', getValue('name', data), false));\n\n      if (newData.length > 0) {\n        resultData = new DataManager(newData).executeLocal(new Query().where('filterPath', 'equal', this.parent.filterPath, false));\n      }\n    }\n\n    if (resultData.length > 0) {\n      var index = this.items.indexOf(resultData[0]);\n      var eveArgs = {\n        ctrlKey: true,\n        shiftKey: false\n      };\n      this.doSelection(this.itemList[index], eveArgs);\n    }\n  };\n\n  LargeIconsView.prototype.updateSelectedData = function () {\n    var data = [];\n    var items = selectAll('.' + CLS.LIST_ITEM + '.' + CLS.ACTIVE, this.element);\n\n    for (var i = 0; i < items.length; i++) {\n      data[i] = this.getItemObject(items[i]);\n    }\n\n    this.parent.itemData = data;\n  };\n\n  LargeIconsView.prototype.onMethodCall = function (args) {\n    if (this.parent.view !== 'LargeIcons') {\n      return;\n    }\n\n    var action = getValue('action', args);\n\n    switch (action) {\n      case 'deleteFiles':\n        this.deleteFiles(getValue('ids', args));\n        break;\n\n      case 'downloadFiles':\n        this.downloadFiles(getValue('ids', args));\n        break;\n\n      case 'openFile':\n        this.openFile(getValue('id', args));\n        break;\n\n      case 'renameFile':\n        this.isInteraction = false;\n        this.isInteracted = false;\n        this.renameFile(getValue('id', args), getValue('newName', args));\n        break;\n\n      case 'createFolder':\n        this.isInteraction = false;\n        this.isInteracted = false;\n        break;\n\n      case 'clearSelection':\n        this.isInteraction = false;\n        this.isInteracted = false;\n        this.onClearAllInit();\n        break;\n\n      case 'selectAll':\n        this.isInteraction = false;\n        this.isInteracted = false;\n        this.onSelectAllInit();\n        break;\n    }\n  };\n\n  LargeIconsView.prototype.getItemsIndex = function (items) {\n    var indexes = [];\n    var isFilter = this.parent.breadcrumbbarModule.searchObj.element.value !== '' || this.parent.isFiltered ? true : false;\n    var filterName = this.parent.hasId ? 'id' : 'name';\n\n    if (this.parent.hasId || !isFilter) {\n      for (var i = 0, len = this.items.length; i < len; i++) {\n        if (items.indexOf(getValue(filterName, this.items[i])) !== -1) {\n          indexes.push(i);\n        }\n      }\n    } else {\n      for (var i = 0, len = this.items.length; i < len; i++) {\n        var name_2 = getValue('filterPath', this.items[i]) + getValue('name', this.items[i]);\n\n        if (items.indexOf(name_2) !== -1) {\n          indexes.push(i);\n        }\n      }\n    }\n\n    return indexes;\n  };\n\n  LargeIconsView.prototype.deleteFiles = function (ids) {\n    this.parent.activeModule = 'largeiconsview';\n\n    if (isNOU(ids)) {\n      this.performDelete();\n      return;\n    }\n\n    var indexes = this.getItemsIndex(ids);\n\n    if (indexes.length === 0) {\n      return;\n    }\n\n    var data = [];\n    var newIds = [];\n\n    for (var i = 0; i < indexes.length; i++) {\n      data[i] = this.items[indexes[i]];\n      newIds[i] = getItemName(this.parent, data[i]);\n    }\n\n    doDeleteFiles(this.parent, data, newIds);\n  };\n\n  LargeIconsView.prototype.downloadFiles = function (ids) {\n    if (isNOU(ids)) {\n      this.doDownload();\n      return;\n    }\n\n    var index = this.getItemsIndex(ids);\n\n    if (index.length === 0) {\n      return;\n    }\n\n    var data = [];\n    var newIds = [];\n\n    for (var i = 0; i < index.length; i++) {\n      data[i] = this.items[index[i]];\n      newIds[i] = getItemName(this.parent, data[i]);\n    }\n\n    doDownloadFiles(this.parent, data, newIds);\n  };\n\n  LargeIconsView.prototype.openFile = function (id) {\n    if (isNOU(id)) {\n      return;\n    }\n\n    var indexes = this.getItemsIndex([id]);\n\n    if (indexes.length > 0) {\n      this.doOpenAction(this.itemList[indexes[0]]);\n    }\n  };\n\n  LargeIconsView.prototype.renameFile = function (id, name) {\n    this.parent.activeModule = 'largeiconsview';\n\n    if (isNOU(id)) {\n      this.performRename();\n      return;\n    }\n\n    var indexes = this.getItemsIndex([id]);\n\n    if (indexes.length > 0) {\n      updateRenamingData(this.parent, this.items[indexes[0]]);\n\n      if (isNOU(name)) {\n        doRename(this.parent);\n      } else {\n        if (!hasEditAccess(this.parent.itemData[0])) {\n          createDeniedDialog(this.parent, this.parent.itemData[0], events.permissionEdit);\n        } else {\n          rename(this.parent, this.parent.path, name);\n        }\n      }\n    }\n  };\n\n  return LargeIconsView;\n}();\n\nexport { LargeIconsView };","map":null,"metadata":{},"sourceType":"module"}