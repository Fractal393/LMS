{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.selection.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _events_engine = require(\"../../events/core/events_engine\");\n\nvar _events_engine2 = _interopRequireDefault(_events_engine);\n\nvar _uiData_grid = require(\"../data_grid/ui.data_grid.core\");\n\nvar _uiData_grid2 = _interopRequireDefault(_uiData_grid);\n\nvar _uiGrid_core = require(\"./ui.grid_core.utils\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _support = require(\"../../core/utils/support\");\n\nvar _support2 = _interopRequireDefault(_support);\n\nvar _click = require(\"../../events/click\");\n\nvar _click2 = _interopRequireDefault(_click);\n\nvar _message = require(\"../../localization/message\");\n\nvar _message2 = _interopRequireDefault(_message);\n\nvar _utils = require(\"../../events/utils\");\n\nvar _hold = require(\"../../events/hold\");\n\nvar _hold2 = _interopRequireDefault(_hold);\n\nvar _selection = require(\"../selection/selection\");\n\nvar _selection2 = _interopRequireDefault(_selection);\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar EDITOR_CELL_CLASS = \"dx-editor-cell\";\nvar ROW_CLASS = \"dx-row\";\nvar ROW_SELECTION_CLASS = \"dx-selection\";\nvar SELECT_CHECKBOX_CLASS = \"dx-select-checkbox\";\nvar CHECKBOXES_HIDDEN_CLASS = \"dx-select-checkboxes-hidden\";\nvar COMMAND_SELECT_CLASS = \"dx-command-select\";\nvar SELECTION_DISABLED_CLASS = \"dx-selection-disabled\";\nvar DATA_ROW_CLASS = \"dx-data-row\";\nvar SHOW_CHECKBOXES_MODE = \"selection.showCheckBoxesMode\";\nvar SELECTION_MODE = \"selection.mode\";\n\nvar processLongTap = function (that, dxEvent) {\n  var selectionController = that.getController(\"selection\");\n  var rowsView = that.getView(\"rowsView\");\n  var $row = (0, _renderer2.default)(dxEvent.target).closest(\".\" + DATA_ROW_CLASS);\n  var rowIndex = rowsView.getRowIndex($row);\n\n  if (rowIndex < 0) {\n    return;\n  }\n\n  if (\"onLongTap\" === that.option(SHOW_CHECKBOXES_MODE)) {\n    if (selectionController.isSelectionWithCheckboxes()) {\n      selectionController.stopSelectionWithCheckboxes();\n    } else {\n      selectionController.startSelectionWithCheckboxes();\n    }\n  } else {\n    if (\"onClick\" === that.option(SHOW_CHECKBOXES_MODE)) {\n      selectionController.startSelectionWithCheckboxes();\n    }\n\n    if (\"always\" !== that.option(SHOW_CHECKBOXES_MODE)) {\n      selectionController.changeItemSelection(rowIndex, {\n        control: true\n      });\n    }\n  }\n};\n\nexports.SelectionController = _uiData_grid2.default.Controller.inherit(function () {\n  var isSeveralRowsSelected = function (that, selectionFilter) {\n    var keyIndex = 0;\n\n    var store = that._dataController.store();\n\n    var key = store && store.key();\n    var isComplexKey = Array.isArray(key);\n\n    if (!selectionFilter.length) {\n      return false;\n    }\n\n    if (isComplexKey && Array.isArray(selectionFilter[0]) && \"and\" === selectionFilter[1]) {\n      for (var i = 0; i < selectionFilter.length; i++) {\n        if (Array.isArray(selectionFilter[i])) {\n          if (selectionFilter[i][0] !== key[keyIndex] || \"=\" !== selectionFilter[i][1]) {\n            return true;\n          }\n\n          keyIndex++;\n        }\n      }\n\n      return false;\n    }\n\n    return key !== selectionFilter[0];\n  };\n\n  var selectionCellTemplate = function (container, options) {\n    var component = options.component;\n    var rowsView = component.getView(\"rowsView\");\n\n    if (component.option(\"renderAsync\") && !component.option(\"selection.deferred\")) {\n      options.value = component.isRowSelected(options.row.key);\n    }\n\n    rowsView.renderSelectCheckBoxContainer((0, _renderer2.default)(container), options);\n  };\n\n  var selectionHeaderTemplate = function (container, options) {\n    var column = options.column;\n    var $cellElement = (0, _renderer2.default)(container);\n    var columnHeadersView = options.component.getView(\"columnHeadersView\");\n    $cellElement.addClass(EDITOR_CELL_CLASS);\n\n    columnHeadersView._renderSelectAllCheckBox($cellElement, column);\n\n    columnHeadersView._attachSelectAllCheckBoxClickEvent($cellElement);\n  };\n\n  return {\n    init: function () {\n      this._dataController = this.getController(\"data\");\n      this._selectionMode = this.option(SELECTION_MODE);\n      this._isSelectionWithCheckboxes = false;\n      this._selection = this._createSelection();\n\n      this._updateSelectColumn();\n\n      this.createAction(\"onSelectionChanged\", {\n        excludeValidators: [\"disabled\", \"readOnly\"]\n      });\n    },\n    _getSelectionConfig: function () {\n      var that = this;\n      var dataController = that._dataController;\n      var selectionOptions = that.option(\"selection\") || {};\n      return {\n        selectedKeys: that.option(\"selectedRowKeys\"),\n        mode: that._selectionMode,\n        deferred: selectionOptions.deferred,\n        maxFilterLengthInRequest: selectionOptions.maxFilterLengthInRequest,\n        selectionFilter: that.option(\"selectionFilter\"),\n        key: function () {\n          return dataController && dataController.key();\n        },\n        keyOf: function (item) {\n          return dataController && dataController.keyOf(item);\n        },\n        dataFields: function () {\n          return dataController.dataSource() && dataController.dataSource().select();\n        },\n        load: function (options) {\n          return dataController.dataSource() && dataController.dataSource().load(options) || new _deferred.Deferred().resolve([]);\n        },\n        plainItems: function () {\n          return dataController.items(true);\n        },\n        isItemSelected: function (item) {\n          return item.selected;\n        },\n        isSelectableItem: function (item) {\n          return item && \"data\" === item.rowType && !item.isNewRow;\n        },\n        getItemData: function (item) {\n          return item && (item.oldData || item.data || item);\n        },\n        filter: function () {\n          return dataController.getCombinedFilter();\n        },\n        totalCount: function () {\n          return dataController.totalCount();\n        },\n        onSelectionChanged: that._updateSelectedItems.bind(this)\n      };\n    },\n    _updateSelectColumn: function () {\n      var columnsController = this.getController(\"columns\");\n      var isSelectColumnVisible = this.isSelectColumnVisible();\n      columnsController.addCommandColumn({\n        type: \"selection\",\n        command: \"select\",\n        visible: isSelectColumnVisible,\n        visibleIndex: -1,\n        dataType: \"boolean\",\n        alignment: \"center\",\n        cssClass: COMMAND_SELECT_CLASS,\n        width: \"auto\",\n        cellTemplate: selectionCellTemplate,\n        headerCellTemplate: selectionHeaderTemplate\n      });\n      columnsController.columnOption(\"command:select\", \"visible\", isSelectColumnVisible);\n    },\n    _createSelection: function () {\n      var options = this._getSelectionConfig();\n\n      return new _selection2.default(options);\n    },\n    _fireSelectionChanged: function (options) {\n      if (options) {\n        this.executeAction(\"onSelectionChanged\", options);\n      }\n\n      var argument = this.option(\"selection.deferred\") ? {\n        selectionFilter: this.option(\"selectionFilter\")\n      } : {\n        selectedRowKeys: this.option(\"selectedRowKeys\")\n      };\n      this.selectionChanged.fire(argument);\n    },\n    _updateCheckboxesState: function (options) {\n      var isDeferredMode = options.isDeferredMode;\n      var selectionFilter = options.selectionFilter;\n      var selectedItemKeys = options.selectedItemKeys;\n      var removedItemKeys = options.removedItemKeys;\n\n      if (\"onClick\" === this.option(SHOW_CHECKBOXES_MODE)) {\n        if (isDeferredMode ? selectionFilter && isSeveralRowsSelected(this, selectionFilter) : selectedItemKeys.length > 1) {\n          this.startSelectionWithCheckboxes();\n        } else {\n          if (isDeferredMode ? selectionFilter && !selectionFilter.length : 0 === selectedItemKeys.length && removedItemKeys.length) {\n            this.stopSelectionWithCheckboxes();\n          }\n        }\n      }\n    },\n    _updateSelectedItems: function (args) {\n      var that = this;\n      var selectionChangedOptions;\n      var isDeferredMode = that.option(\"selection.deferred\");\n\n      var selectionFilter = that._selection.selectionFilter();\n\n      var dataController = that._dataController;\n      var items = dataController.items();\n\n      if (!items) {\n        return;\n      }\n\n      var isSelectionWithCheckboxes = that.isSelectionWithCheckboxes();\n      var changedItemIndexes = that.getChangedItemIndexes(items);\n\n      that._updateCheckboxesState({\n        selectedItemKeys: args.selectedItemKeys,\n        removedItemKeys: args.removedItemKeys,\n        selectionFilter: selectionFilter,\n        isDeferredMode: isDeferredMode\n      });\n\n      if (changedItemIndexes.length || isSelectionWithCheckboxes !== that.isSelectionWithCheckboxes()) {\n        dataController.updateItems({\n          changeType: \"updateSelection\",\n          itemIndexes: changedItemIndexes\n        });\n      }\n\n      if (isDeferredMode) {\n        that.option(\"selectionFilter\", selectionFilter);\n        selectionChangedOptions = {};\n      } else {\n        if (args.addedItemKeys.length || args.removedItemKeys.length) {\n          that._selectedItemsInternalChange = true;\n          that.option(\"selectedRowKeys\", args.selectedItemKeys.slice(0));\n          that._selectedItemsInternalChange = false;\n          selectionChangedOptions = {\n            selectedRowsData: args.selectedItems.slice(0),\n            selectedRowKeys: args.selectedItemKeys.slice(0),\n            currentSelectedRowKeys: args.addedItemKeys.slice(0),\n            currentDeselectedRowKeys: args.removedItemKeys.slice(0)\n          };\n        }\n      }\n\n      that._fireSelectionChanged(selectionChangedOptions);\n    },\n    getChangedItemIndexes: function (items) {\n      var that = this;\n      var itemIndexes = [];\n      var isDeferredSelection = this.option(\"selection.deferred\");\n\n      for (var i = 0, length = items.length; i < length; i++) {\n        var row = items[i];\n        var isItemSelected = that.isRowSelected(isDeferredSelection ? row.data : row.key);\n\n        if (that._selection.isDataItem(row) && row.isSelected !== isItemSelected) {\n          itemIndexes.push(i);\n        }\n      }\n\n      return itemIndexes;\n    },\n    callbackNames: function () {\n      return [\"selectionChanged\"];\n    },\n    optionChanged: function (args) {\n      var that = this;\n      that.callBase(args);\n\n      switch (args.name) {\n        case \"selection\":\n          var oldSelectionMode = that._selectionMode;\n          that.init();\n          var selectionMode = that._selectionMode;\n          var selectedRowKeys = that.option(\"selectedRowKeys\");\n\n          if (oldSelectionMode !== selectionMode) {\n            if (\"single\" === selectionMode) {\n              if (selectedRowKeys.length > 1) {\n                selectedRowKeys = [selectedRowKeys[0]];\n              }\n            } else {\n              if (\"multiple\" !== selectionMode) {\n                selectedRowKeys = [];\n              }\n            }\n          }\n\n          that.selectRows(selectedRowKeys).always(function () {\n            that._fireSelectionChanged();\n          });\n          that.getController(\"columns\").updateColumns();\n          args.handled = true;\n          break;\n\n        case \"selectionFilter\":\n          this._selection.selectionFilter(args.value);\n\n          args.handled = true;\n          break;\n\n        case \"selectedRowKeys\":\n          var value = args.value || [];\n\n          if (Array.isArray(value) && !that._selectedItemsInternalChange && (that.component.getDataSource() || !value.length)) {\n            that.selectRows(value);\n          }\n\n          args.handled = true;\n      }\n    },\n    publicMethods: function () {\n      return [\"selectRows\", \"deselectRows\", \"selectRowsByIndexes\", \"getSelectedRowKeys\", \"getSelectedRowsData\", \"clearSelection\", \"selectAll\", \"deselectAll\", \"startSelectionWithCheckboxes\", \"stopSelectionWithCheckboxes\", \"isRowSelected\"];\n    },\n    isRowSelected: function (arg) {\n      return this._selection.isItemSelected(arg);\n    },\n    isSelectColumnVisible: function () {\n      return \"multiple\" === this.option(SELECTION_MODE) && (\"always\" === this.option(SHOW_CHECKBOXES_MODE) || \"onClick\" === this.option(SHOW_CHECKBOXES_MODE) || this._isSelectionWithCheckboxes);\n    },\n    _isOnePageSelectAll: function () {\n      return \"page\" === this.option(\"selection.selectAllMode\");\n    },\n    isSelectAll: function () {\n      return this._selection.getSelectAllState(this._isOnePageSelectAll());\n    },\n    selectAll: function () {\n      if (\"onClick\" === this.option(SHOW_CHECKBOXES_MODE)) {\n        this.startSelectionWithCheckboxes();\n      }\n\n      return this._selection.selectAll(this._isOnePageSelectAll());\n    },\n    deselectAll: function () {\n      return this._selection.deselectAll(this._isOnePageSelectAll());\n    },\n    clearSelection: function () {\n      return this.selectedItemKeys([]);\n    },\n    refresh: function () {\n      var selectedRowKeys = this.option(\"selectedRowKeys\") || [];\n\n      if (!this.option(\"selection.deferred\") && selectedRowKeys.length) {\n        return this.selectedItemKeys(selectedRowKeys);\n      }\n\n      return new _deferred.Deferred().resolve().promise();\n    },\n    selectedItemKeys: function (value, preserve, isDeselect, isSelectAll) {\n      return this._selection.selectedItemKeys(value, preserve, isDeselect, isSelectAll);\n    },\n    getSelectedRowKeys: function () {\n      return this._selection.getSelectedItemKeys();\n    },\n    selectRows: function (keys, preserve) {\n      return this.selectedItemKeys(keys, preserve);\n    },\n    deselectRows: function (keys) {\n      return this.selectedItemKeys(keys, true, true);\n    },\n    selectRowsByIndexes: function (indexes) {\n      var items = this._dataController.items();\n\n      var keys = [];\n\n      if (!Array.isArray(indexes)) {\n        indexes = Array.prototype.slice.call(arguments, 0);\n      }\n\n      (0, _iterator.each)(indexes, function () {\n        var item = items[this];\n\n        if (item && \"data\" === item.rowType) {\n          keys.push(item.key);\n        }\n      });\n      return this.selectRows(keys);\n    },\n    getSelectedRowsData: function () {\n      return this._selection.getSelectedItems();\n    },\n    changeItemSelection: function (itemIndex, keys) {\n      keys = keys || {};\n\n      if (this.isSelectionWithCheckboxes()) {\n        keys.control = true;\n      }\n\n      return this._selection.changeItemSelection(this._dataController.getRowIndexDelta() + itemIndex, keys);\n    },\n    focusedItemIndex: function (itemIndex) {\n      var that = this;\n\n      if ((0, _type.isDefined)(itemIndex)) {\n        that._selection._focusedItemIndex = itemIndex;\n      } else {\n        return that._selection._focusedItemIndex;\n      }\n    },\n    isSelectionWithCheckboxes: function () {\n      return \"multiple\" === this.option(SELECTION_MODE) && (\"always\" === this.option(SHOW_CHECKBOXES_MODE) || this._isSelectionWithCheckboxes);\n    },\n    startSelectionWithCheckboxes: function () {\n      var that = this;\n\n      if (\"multiple\" === that.option(SELECTION_MODE) && !that.isSelectionWithCheckboxes()) {\n        that._isSelectionWithCheckboxes = true;\n\n        that._updateSelectColumn();\n\n        return true;\n      }\n\n      return false;\n    },\n    stopSelectionWithCheckboxes: function () {\n      var that = this;\n\n      if (that._isSelectionWithCheckboxes) {\n        that._isSelectionWithCheckboxes = false;\n\n        that._updateSelectColumn();\n\n        return true;\n      }\n\n      return false;\n    }\n  };\n}());\nmodule.exports = {\n  defaultOptions: function () {\n    return {\n      selection: {\n        mode: \"none\",\n        showCheckBoxesMode: \"onClick\",\n        allowSelectAll: true,\n        selectAllMode: \"allPages\",\n        maxFilterLengthInRequest: 1500,\n        deferred: false\n      },\n      selectionFilter: [],\n      selectedRowKeys: []\n    };\n  },\n  controllers: {\n    selection: exports.SelectionController\n  },\n  extenders: {\n    controllers: {\n      data: {\n        init: function () {\n          var selectionController = this.getController(\"selection\");\n          var isDeferredMode = this.option(\"selection.deferred\");\n          this.callBase.apply(this, arguments);\n\n          if (isDeferredMode) {\n            selectionController._updateCheckboxesState({\n              isDeferredMode: true,\n              selectionFilter: this.option(\"selectionFilter\")\n            });\n          }\n        },\n        _loadDataSource: function () {\n          var that = this;\n          return that.callBase().done(function () {\n            that.getController(\"selection\").refresh();\n          });\n        },\n        _processDataItem: function (item, options) {\n          var that = this;\n          var selectionController = that.getController(\"selection\");\n          var hasSelectColumn = selectionController.isSelectColumnVisible();\n          var isDeferredSelection = options.isDeferredSelection = void 0 === options.isDeferredSelection ? this.option(\"selection.deferred\") : options.isDeferredSelection;\n          var dataItem = this.callBase.apply(this, arguments);\n          dataItem.isSelected = selectionController.isRowSelected(isDeferredSelection ? dataItem.data : dataItem.key);\n\n          if (hasSelectColumn && dataItem.values) {\n            for (var i = 0; i < options.visibleColumns.length; i++) {\n              if (\"select\" === options.visibleColumns[i].command) {\n                dataItem.values[i] = dataItem.isSelected;\n                break;\n              }\n            }\n          }\n\n          return dataItem;\n        },\n        refresh: function (options) {\n          var that = this;\n          var d = new _deferred.Deferred();\n          this.callBase.apply(this, arguments).done(function () {\n            if (!options || options.selection) {\n              that.getController(\"selection\").refresh().done(d.resolve).fail(d.reject);\n            } else {\n              d.resolve();\n            }\n          }).fail(d.reject);\n          return d.promise();\n        },\n        _handleDataChanged: function (e) {\n          this.callBase.apply(this, arguments);\n\n          if ((!e || \"refresh\" === e.changeType) && !this._repaintChangesOnly) {\n            this.getController(\"selection\").focusedItemIndex(-1);\n          }\n        },\n        _applyChange: function (change) {\n          var _this = this;\n\n          if (change && \"updateSelection\" === change.changeType) {\n            change.items.forEach(function (item, index) {\n              var currentItem = _this._items[index];\n\n              if (currentItem) {\n                currentItem.isSelected = item.isSelected;\n                currentItem.values = item.values;\n              }\n            });\n            return;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _endUpdateCore: function () {\n          var changes = this._changes;\n          var isUpdateSelection = changes.length > 1 && changes.every(function (change) {\n            return \"updateSelection\" === change.changeType;\n          });\n\n          if (isUpdateSelection) {\n            var itemIndexes = changes.map(function (change) {\n              return change.itemIndexes || [];\n            }).reduce(function (a, b) {\n              return a.concat(b);\n            });\n            this._changes = [{\n              changeType: \"updateSelection\",\n              itemIndexes: itemIndexes\n            }];\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        push: function (changes) {\n          this.callBase.apply(this, arguments);\n          var removedKeys = changes.filter(function (change) {\n            return \"remove\" === change.type;\n          }).map(function (change) {\n            return change.key;\n          });\n          removedKeys.length && this.getController(\"selection\").deselectRows(removedKeys);\n        }\n      },\n      contextMenu: {\n        _contextMenuPrepared: function (options) {\n          var dxEvent = options.event;\n\n          if (dxEvent.originalEvent && \"dxhold\" !== dxEvent.originalEvent.type || options.items && options.items.length > 0) {\n            return;\n          }\n\n          processLongTap(this, dxEvent);\n        }\n      }\n    },\n    views: {\n      columnHeadersView: {\n        init: function () {\n          var that = this;\n          that.callBase();\n          that.getController(\"selection\").selectionChanged.add(that._updateSelectAllValue.bind(that));\n        },\n        _updateSelectAllValue: function () {\n          var that = this;\n          var $element = that.element();\n          var $editor = $element && $element.find(\".\" + SELECT_CHECKBOX_CLASS);\n\n          if ($element && $editor.length && \"multiple\" === that.option(\"selection.mode\")) {\n            $editor.dxCheckBox(\"instance\").option(\"value\", that.getController(\"selection\").isSelectAll());\n          }\n        },\n        _handleDataChanged: function (e) {\n          this.callBase(e);\n\n          if (!e || \"refresh\" === e.changeType) {\n            this._updateSelectAllValue();\n          }\n        },\n        _renderSelectAllCheckBox: function ($container, column) {\n          var that = this;\n          var selectionController = that.getController(\"selection\");\n          var groupElement = (0, _renderer2.default)(\"<div>\").appendTo($container).addClass(SELECT_CHECKBOX_CLASS);\n          that.setAria(\"label\", _message2.default.format(\"dxDataGrid-ariaSelectAll\"), $container);\n          that.getController(\"editorFactory\").createEditor(groupElement, (0, _extend.extend)({}, column, {\n            parentType: \"headerRow\",\n            dataType: \"boolean\",\n            value: selectionController.isSelectAll(),\n            editorOptions: {\n              visible: that.option(\"selection.allowSelectAll\") || false !== selectionController.isSelectAll()\n            },\n            tabIndex: that.option(\"useLegacyKeyboardNavigation\") ? -1 : that.option(\"tabIndex\") || 0,\n            setValue: function (value, e) {\n              var allowSelectAll = that.option(\"selection.allowSelectAll\");\n              e.component.option(\"visible\", allowSelectAll || false !== e.component.option(\"value\"));\n\n              if (!e.event || selectionController.isSelectAll() === value) {\n                return;\n              }\n\n              if (e.value && !allowSelectAll) {\n                e.component.option(\"value\", false);\n              } else {\n                e.value ? selectionController.selectAll() : selectionController.deselectAll();\n              }\n\n              e.event.preventDefault();\n            }\n          }));\n          return groupElement;\n        },\n        _attachSelectAllCheckBoxClickEvent: function ($element) {\n          _events_engine2.default.on($element, _click2.default.name, this.createAction(function (e) {\n            var event = e.event;\n\n            if (!(0, _renderer2.default)(event.target).closest(\".\" + SELECT_CHECKBOX_CLASS).length) {\n              _events_engine2.default.trigger((0, _renderer2.default)(event.currentTarget).children(\".\" + SELECT_CHECKBOX_CLASS), _click2.default.name);\n            }\n\n            event.preventDefault();\n          }));\n        }\n      },\n      rowsView: {\n        renderSelectCheckBoxContainer: function ($container, options) {\n          if (\"data\" === options.rowType && !options.row.isNewRow) {\n            $container.addClass(EDITOR_CELL_CLASS);\n\n            this._attachCheckBoxClickEvent($container);\n\n            this.setAria(\"label\", _message2.default.format(\"dxDataGrid-ariaSelectRow\"), $container);\n\n            this._renderSelectCheckBox($container, options);\n          } else {\n            (0, _uiGrid_core.setEmptyText)($container);\n          }\n        },\n        _renderSelectCheckBox: function (container, options) {\n          var groupElement = (0, _renderer2.default)(\"<div>\").addClass(SELECT_CHECKBOX_CLASS).appendTo(container);\n          this.getController(\"editorFactory\").createEditor(groupElement, (0, _extend.extend)({}, options.column, {\n            parentType: \"dataRow\",\n            dataType: \"boolean\",\n            lookup: null,\n            value: options.value,\n            setValue: function (value, e) {\n              if (e && e.event && \"keydown\" === e.event.type) {\n                _events_engine2.default.trigger(container, _click2.default.name, e);\n              }\n            },\n            row: options.row\n          }));\n          return groupElement;\n        },\n        _attachCheckBoxClickEvent: function ($element) {\n          _events_engine2.default.on($element, _click2.default.name, this.createAction(function (e) {\n            var selectionController = this.getController(\"selection\");\n            var event = e.event;\n            var rowIndex = this.getRowIndex((0, _renderer2.default)(event.currentTarget).closest(\".\" + ROW_CLASS));\n\n            if (rowIndex >= 0) {\n              selectionController.startSelectionWithCheckboxes();\n              selectionController.changeItemSelection(rowIndex, {\n                shift: event.shiftKey\n              });\n\n              if ((0, _renderer2.default)(event.target).closest(\".\" + SELECT_CHECKBOX_CLASS).length) {\n                this.getController(\"data\").updateItems({\n                  changeType: \"updateSelection\",\n                  itemIndexes: [rowIndex]\n                });\n              }\n            }\n          }));\n        },\n        _update: function (change) {\n          var that = this;\n          var tableElements = that.getTableElements();\n\n          if (\"updateSelection\" === change.changeType) {\n            if (tableElements.length > 0) {\n              (0, _iterator.each)(tableElements, function (_, tableElement) {\n                (0, _iterator.each)(change.itemIndexes || [], function (_, index) {\n                  var $row;\n\n                  if (change.items[index]) {\n                    $row = that._getRowElements((0, _renderer2.default)(tableElement)).eq(index);\n\n                    if ($row.length) {\n                      var isSelected = change.items[index].isSelected;\n                      $row.toggleClass(ROW_SELECTION_CLASS, void 0 === isSelected ? false : isSelected).find(\".\" + SELECT_CHECKBOX_CLASS).dxCheckBox(\"option\", \"value\", isSelected);\n                      that.setAria(\"selected\", isSelected, $row);\n                    }\n                  }\n                });\n              });\n\n              that._updateCheckboxesClass();\n            }\n          } else {\n            that.callBase(change);\n          }\n        },\n        _createTable: function () {\n          var that = this;\n          var selectionMode = that.option(\"selection.mode\");\n          var $table = that.callBase.apply(that, arguments);\n\n          if (\"none\" !== selectionMode) {\n            if (\"onLongTap\" === that.option(SHOW_CHECKBOXES_MODE) || !_support2.default.touch) {\n              _events_engine2.default.on($table, (0, _utils.addNamespace)(_hold2.default.name, \"dxDataGridRowsView\"), \".\" + DATA_ROW_CLASS, that.createAction(function (e) {\n                processLongTap(that.component, e.event);\n                e.event.stopPropagation();\n              }));\n            }\n\n            _events_engine2.default.on($table, \"mousedown selectstart\", that.createAction(function (e) {\n              var event = e.event;\n\n              if (event.shiftKey) {\n                event.preventDefault();\n              }\n            }));\n          }\n\n          return $table;\n        },\n        _createRow: function (row) {\n          var $row = this.callBase(row);\n\n          if (row) {\n            var isSelected = !!row.isSelected;\n\n            if (isSelected) {\n              $row.addClass(ROW_SELECTION_CLASS);\n            }\n\n            this.setAria(\"selected\", isSelected, $row);\n          }\n\n          return $row;\n        },\n        _rowClick: function (e) {\n          var that = this;\n          var dxEvent = e.event;\n          var isSelectionDisabled = (0, _renderer2.default)(dxEvent.target).closest(\".\" + SELECTION_DISABLED_CLASS).length;\n\n          if (!that.isClickableElement((0, _renderer2.default)(dxEvent.target))) {\n            if (!isSelectionDisabled && (\"multiple\" !== that.option(SELECTION_MODE) || \"always\" !== that.option(SHOW_CHECKBOXES_MODE))) {\n              if (that.getController(\"selection\").changeItemSelection(e.rowIndex, {\n                control: dxEvent.ctrlKey || dxEvent.metaKey,\n                shift: dxEvent.shiftKey\n              })) {\n                dxEvent.preventDefault();\n                e.handled = true;\n              }\n            }\n\n            that.callBase(e);\n          }\n        },\n        isClickableElement: function ($target) {\n          var isCommandSelect = $target.closest(\".\" + COMMAND_SELECT_CLASS).length;\n          return !!isCommandSelect;\n        },\n        _renderCore: function (change) {\n          this.callBase(change);\n\n          this._updateCheckboxesClass();\n        },\n        _updateCheckboxesClass: function () {\n          var tableElements = this.getTableElements();\n          var selectionController = this.getController(\"selection\");\n          var isCheckBoxesHidden = selectionController.isSelectColumnVisible() && !selectionController.isSelectionWithCheckboxes();\n          (0, _iterator.each)(tableElements, function (_, tableElement) {\n            (0, _renderer2.default)(tableElement).toggleClass(CHECKBOXES_HIDDEN_CLASS, isCheckBoxesHidden);\n          });\n        }\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}