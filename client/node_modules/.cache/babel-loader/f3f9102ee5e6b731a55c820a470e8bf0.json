{"ast":null,"code":"import { Draggable, isBlazor, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { removeClass } from '@syncfusion/ej2-base';\nimport { remove, closest as closestElement, classList } from '@syncfusion/ej2-base';\nimport { parentsUntil, removeElement, getPosition, addRemoveActiveClasses, isActionPrevent } from '../base/util';\nimport * as events from '../base/constant';\nimport { Scroll } from '../actions/scroll';\nimport { Query } from '@syncfusion/ej2-data';\n/**\n *\n * Reorder module is used to handle row reordering.\n * @hidden\n */\n\nvar RowDD =\n/** @class */\nfunction () {\n  /**\n   * Constructor for the Grid print module\n   * @hidden\n   */\n  function RowDD(parent) {\n    var _this = this;\n\n    this.selectedRows = [];\n    this.isOverflowBorder = true;\n    this.selectedRowColls = [];\n    this.isRefresh = true;\n    /* tslint:disable-next-line:max-line-length */\n    // tslint:disable-next-line:max-func-body-length\n\n    this.helper = function (e) {\n      var gObj = _this.parent;\n      var target = _this.draggable.currentStateTarget;\n\n      var visualElement = _this.parent.createElement('div', {\n        className: 'e-cloneproperties e-draganddrop e-grid e-dragclone',\n        styles: 'height:\"auto\", z-index:2, width:' + gObj.element.offsetWidth\n      });\n\n      var table = _this.parent.createElement('table', {\n        styles: 'width:' + gObj.element.offsetWidth\n      });\n\n      var tbody = _this.parent.createElement('tbody');\n\n      if (document.getElementsByClassName('e-griddragarea').length || gObj.rowDropSettings.targetID && !e.sender.target.classList.contains('e-selectionbackground') && gObj.selectionSettings.type !== 'Single' || !gObj.rowDropSettings.targetID && !parentsUntil(e.sender.target, 'e-rowdragdrop')) {\n        return false;\n      }\n\n      if (gObj.rowDropSettings.targetID && gObj.selectionSettings.mode === 'Row' && gObj.selectionSettings.type === 'Single') {\n        gObj.selectRow(parseInt(_this.draggable.currentStateTarget.parentElement.getAttribute('aria-rowindex'), 10));\n      }\n\n      _this.startedRow = closestElement(target, 'tr').cloneNode(true);\n\n      _this.processArgs(target);\n\n      var args = {\n        selectedRow: _this.rows,\n        dragelement: target,\n        cloneElement: visualElement,\n        cancel: false,\n        data: _this.rowData\n      };\n      var selectedRows = gObj.getSelectedRows();\n      gObj.trigger(events.rowDragStartHelper, args);\n      var cancel = 'cancel';\n      var cloneElement = 'cloneElement';\n\n      if (args[cancel]) {\n        return false;\n      }\n\n      removeElement(_this.startedRow, '.e-indentcell');\n      removeElement(_this.startedRow, '.e-detailrowcollapse');\n      removeElement(_this.startedRow, '.e-detailrowexpand');\n\n      _this.removeCell(_this.startedRow, 'e-gridchkbox');\n\n      var exp = new RegExp('e-active', 'g'); //high contrast issue\n\n      _this.startedRow.innerHTML = _this.startedRow.innerHTML.replace(exp, '');\n      tbody.appendChild(_this.startedRow);\n\n      if (gObj.getSelectedRows().length > 1 && _this.startedRow.hasAttribute('aria-selected')) {\n        var dropCountEle = _this.parent.createElement('span', {\n          className: 'e-dropitemscount',\n          innerHTML: '' + selectedRows.length\n        });\n\n        visualElement.appendChild(dropCountEle);\n      }\n\n      var ele = closestElement(target, 'tr').querySelector('.e-icon-rowdragicon');\n\n      if (ele) {\n        ele.classList.add('e-dragstartrow');\n      }\n\n      table.appendChild(tbody);\n      visualElement.appendChild(table);\n      gObj.element.appendChild(visualElement);\n      return visualElement;\n    };\n\n    this.dragStart = function (e) {\n      var gObj = _this.parent;\n\n      if (document.getElementsByClassName('e-griddragarea').length) {\n        return;\n      }\n\n      var target = e.target;\n\n      var spanCssEle = _this.parent.element.querySelector('.e-dropitemscount');\n\n      if (_this.parent.getSelectedRecords().length > 1 && spanCssEle) {\n        spanCssEle.style.left = _this.parent.element.querySelector('.e-cloneproperties table').offsetWidth - 5 + 'px';\n      }\n\n      _this.processArgs(target);\n\n      gObj.trigger(events.rowDragStart, {\n        rows: isBlazor() ? null : _this.rows,\n        target: isBlazor() ? null : e.target,\n        draggableType: 'rows',\n        fromIndex: parseInt(_this.rows[0].getAttribute('aria-rowindex'), 10),\n        data: Object.keys(_this.rowData[0]).length > 0 ? _this.rowData : _this.currentViewData()\n      });\n\n      if (isBlazor()) {\n        e.bindEvents(e.dragElement);\n      }\n\n      _this.dragStartData = _this.rowData;\n      var dropElem = document.getElementById(gObj.rowDropSettings.targetID);\n\n      if (gObj.rowDropSettings.targetID && dropElem && dropElem.ej2_instances && dropElem.ej2_instances[0].getModuleName() === 'grid') {\n        dropElem.ej2_instances[0].getContent().classList.add('e-allowRowDrop');\n      }\n    };\n\n    this.drag = function (e) {\n      var gObj = _this.parent;\n\n      var cloneElement = _this.parent.element.querySelector('.e-cloneproperties');\n\n      var target = _this.getElementFromPosition(cloneElement, e.event);\n\n      classList(cloneElement, ['e-defaultcur'], ['e-notallowedcur', 'e-movecur']);\n      _this.isOverflowBorder = true;\n      _this.hoverState = gObj.enableHover;\n      var trElement = parentsUntil(target, 'e-grid') ? closestElement(e.target, 'tr') : null;\n      gObj.enableHover = false;\n\n      if (!e.target) {\n        return;\n      }\n\n      _this.processArgs(target);\n\n      var args = {\n        rows: _this.rows,\n        target: target,\n        draggableType: 'rows',\n        data: _this.rowData,\n        originalEvent: e,\n        cancel: false\n      };\n      gObj.trigger(events.rowDrag, args);\n\n      _this.stopTimer();\n\n      if (args.cancel) {\n        return;\n      }\n\n      gObj.element.classList.add('e-rowdrag');\n      _this.dragTarget = trElement && parentsUntil(target, 'e-grid').id === cloneElement.parentElement.id ? trElement.rowIndex : parseInt(_this.startedRow.getAttribute('aria-rowindex'), 10);\n\n      if (gObj.rowDropSettings.targetID) {\n        if (!parentsUntil(target, 'e-gridcontent') || parentsUntil(cloneElement.parentElement, 'e-grid').id === parentsUntil(target, 'e-grid').id) {\n          classList(cloneElement, ['e-notallowedcur'], ['e-defaultcur']);\n        } else {\n          classList(cloneElement, ['e-defaultcur'], ['e-notallowedcur']);\n        }\n      } else {\n        var elem = parentsUntil(target, 'e-grid');\n\n        if (elem && elem.id === cloneElement.parentElement.id) {\n          classList(cloneElement, ['e-movecur'], ['e-defaultcur']);\n        } else {\n          classList(cloneElement, ['e-notallowedcur'], ['e-movecur']);\n        }\n      }\n\n      if (!gObj.rowDropSettings.targetID && (!gObj.groupSettings.columns.length || e.target.classList.contains('e-selectionbackground'))) {\n        if (parentsUntil(target, 'e-grid')) {\n          _this.updateScrollPostion(e.event, target);\n        }\n\n        if (_this.isOverflowBorder && parseInt(_this.startedRow.getAttribute('aria-rowindex'), 10) !== _this.dragTarget) {\n          _this.moveDragRows(e, _this.startedRow, trElement);\n        } else {\n          if (trElement && _this.parent.getRowByIndex(_this.parent.getCurrentViewRecords().length - 1).getAttribute('data-uid') === trElement.getAttribute('data-uid')) {\n            var bottomborder = _this.parent.createElement('div', {\n              className: 'e-lastrow-dragborder'\n            });\n\n            var gridcontentEle = _this.parent.getContent();\n\n            bottomborder.style.width = _this.parent.element.offsetWidth - _this.getScrollWidth() + 'px';\n\n            if (!gridcontentEle.querySelectorAll('.e-lastrow-dragborder').length) {\n              gridcontentEle.classList.add('e-grid-relative');\n              gridcontentEle.appendChild(bottomborder);\n              bottomborder.style.bottom = _this.getScrollWidth() + 'px';\n            }\n          }\n\n          _this.removeBorder(trElement);\n        }\n      }\n    };\n\n    this.dragStop = function (e) {\n      if (isActionPrevent(_this.parent)) {\n        _this.parent.notify(events.preventBatch, {\n          instance: _this,\n          handler: _this.processDragStop,\n          arg1: e\n        });\n      } else {\n        _this.processDragStop(e);\n      }\n    };\n\n    this.processDragStop = function (e) {\n      var gObj = _this.parent;\n\n      if (_this.parent.isDestroyed) {\n        return;\n      }\n\n      var targetEle = _this.getElementFromPosition(e.helper, e.event);\n\n      var target = targetEle && !targetEle.classList.contains('e-dlg-overlay') ? targetEle : e.target;\n\n      var cloneElement = _this.parent.element.querySelector('.e-cloneproperties');\n\n      gObj.element.classList.remove('e-rowdrag');\n      var dropElement = document.getElementById(gObj.rowDropSettings.targetID);\n\n      if (gObj.rowDropSettings.targetID && dropElement && dropElement.ej2_instances && dropElement.ej2_instances[0].getModuleName() === 'grid') {\n        dropElement.ej2_instances[0].getContent().classList.remove('e-allowRowDrop');\n      }\n\n      if (gObj.isRowDragable()) {\n        _this.stopTimer();\n\n        gObj.enableHover = _this.hoverState;\n\n        _this.parent.getContent().classList.remove('e-grid-relative');\n\n        _this.removeBorder(targetEle);\n\n        var stRow = gObj.element.querySelector('.e-dragstartrow');\n\n        if (stRow) {\n          stRow.classList.remove('e-dragstartrow');\n        }\n      }\n\n      _this.processArgs(target);\n\n      var args = {\n        target: isBlazor() ? null : target,\n        draggableType: 'rows',\n        cancel: false,\n        fromIndex: parseInt(_this.rows[0].getAttribute('aria-rowindex'), 10),\n        dropIndex: _this.dragTarget,\n        rows: isBlazor() ? null : _this.rows,\n        data: Object.keys(_this.dragStartData[0]).length > 0 ? _this.dragStartData : _this.currentViewData()\n      };\n      gObj.trigger(events.rowDrop, args, function () {\n        if (!parentsUntil(target, 'e-gridcontent') || args.cancel) {\n          _this.dragTarget = null;\n          remove(e.helper);\n          return;\n        }\n\n        _this.isRefresh = false;\n\n        var selectedIndexes = _this.parent.getSelectedRowIndexes();\n\n        if (gObj.isRowDragable()) {\n          if (!isBlazor()) {\n            if (!_this.parent.rowDropSettings.targetID && _this.startedRow.querySelector('td.e-selectionbackground') && selectedIndexes.length > 1 && selectedIndexes.length !== _this.parent.getCurrentViewRecords().length) {\n              _this.reorderRows(selectedIndexes, args.dropIndex);\n            } else {\n              _this.reorderRows([parseInt(_this.startedRow.getAttribute('aria-rowindex'), 10)], _this.dragTarget);\n            }\n          } else {\n            var draggedData = _this.parent.getSelectedRecords().length ? _this.parent.getSelectedRecords() : _this.currentViewData();\n            var changeRecords = {\n              addedRecords: [],\n              deletedRecords: draggedData,\n              changedRecords: []\n            };\n            var toIdx = _this.dragTarget ? _this.dragTarget : args.dropIndex;\n            var dragDropDestinationIndex = 'dragDropDestinationIndex';\n            var query = new Query();\n            query[dragDropDestinationIndex] = toIdx;\n\n            _this.saveChange(changeRecords, query);\n\n            changeRecords.deletedRecords = [];\n            changeRecords.addedRecords = draggedData;\n\n            _this.saveChange(changeRecords, query);\n          }\n\n          _this.dragTarget = null;\n\n          if (!gObj.rowDropSettings.targetID) {\n            remove(e.helper);\n            gObj.refresh();\n          }\n        }\n\n        _this.isRefresh = true;\n      });\n    };\n\n    this.removeCell = function (targetRow, className) {\n      return [].slice.call(targetRow.querySelectorAll('td')).filter(function (cell) {\n        if (cell.classList.contains(className)) {\n          targetRow.deleteCell(cell.cellIndex);\n        }\n      });\n    };\n\n    this.parent = parent;\n\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.on(events.initialEnd, this.initializeDrag, this);\n    this.parent.on(events.columnDrop, this.columnDrop, this);\n    this.onDataBoundFn = this.onDataBound.bind(this);\n    this.parent.addEventListener(events.dataBound, this.onDataBoundFn);\n    this.parent.on(events.uiUpdate, this.enableAfterRender, this);\n  }\n\n  RowDD.prototype.currentViewData = function () {\n    var selectedIndexes = this.parent.getSelectedRowIndexes();\n    var currentVdata = [];\n    var fromIdx = parseInt(this.startedRow.getAttribute('aria-rowindex'), 10);\n\n    for (var i = 0, n = selectedIndexes.length; i < n; i++) {\n      var currentV = 'currentViewData';\n      currentVdata[i] = this.parent[currentV][selectedIndexes[i]];\n    }\n\n    if (!this.parent.rowDropSettings.targetID && selectedIndexes.length === 0) {\n      currentVdata[0] = this.parent.currentViewData[fromIdx];\n    }\n\n    return currentVdata;\n  };\n\n  RowDD.prototype.saveChange = function (changeRecords, query) {\n    var _this = this;\n\n    this.parent.getDataModule().saveChanges(changeRecords, this.parent.getPrimaryKeyFieldNames()[0], {}, query).then(function () {\n      _this.parent.notify(events.modelChanged, {\n        type: events.actionBegin,\n        requestType: 'rowdraganddrop'\n      });\n    }).catch(function (e) {\n      var error = 'error';\n      var message = 'message';\n\n      if (!isNullOrUndefined(e[error]) && !isNullOrUndefined(e[error][message])) {\n        e[error] = e[error][message];\n      }\n\n      _this.parent.trigger(events.actionFailure, e);\n    });\n  };\n\n  RowDD.prototype.reorderRows = function (fromIndexes, toIndex) {\n    var selectedIndexes = this.parent.getSelectedRowIndexes();\n    var selectedRecords = [];\n    var draggedRecords = [];\n    var currentViewData = this.parent.renderModule.data.dataManager.dataSource.json;\n    var dropIdx = toIndex;\n    var actualIdx = fromIndexes[0];\n\n    for (var i = 0, len = fromIndexes.length; i < len; i++) {\n      draggedRecords[i] = currentViewData[fromIndexes[i]];\n    }\n\n    for (var i = 0, len = selectedIndexes.length; i < len; i++) {\n      selectedRecords[i] = currentViewData[selectedIndexes[i]];\n    }\n\n    for (var i = 0, len = draggedRecords.length; i < len; i++) {\n      if (i !== 0) {\n        for (var j = 0, len1 = currentViewData.length; j < len1; j++) {\n          if (JSON.stringify(this.parent.renderModule.data.dataManager.dataSource.json[j]) === JSON.stringify(draggedRecords[i])) {\n            actualIdx = j;\n            break;\n          }\n        }\n\n        for (var j = 0, len1 = currentViewData.length; j < len1; j++) {\n          if (JSON.stringify(this.parent.renderModule.data.dataManager.dataSource.json[j]) === JSON.stringify(draggedRecords[i - 1])) {\n            if (actualIdx > j) {\n              dropIdx = j + 1;\n            }\n\n            break;\n          }\n        }\n      }\n\n      this.reorderRow(actualIdx, dropIdx);\n    }\n\n    if (this.isRefresh) {\n      this.parent.notify(events.modelChanged, {\n        type: events.actionBegin,\n        requestType: 'rowdraganddrop'\n      });\n    }\n\n    for (var i = 0, len = selectedRecords.length; i < len; i++) {\n      for (var j = 0, len1 = currentViewData.length; j < len1; j++) {\n        if (JSON.stringify(this.parent.renderModule.data.dataManager.dataSource.json[j]) === JSON.stringify(selectedRecords[i])) {\n          selectedIndexes[i] = j;\n          break;\n        }\n      }\n    }\n\n    this.selectedRowColls = selectedIndexes;\n  };\n\n  RowDD.prototype.stopTimer = function () {\n    window.clearInterval(this.timer);\n  };\n\n  RowDD.prototype.initializeDrag = function () {\n    var gObj = this.parent;\n    this.draggable = new Draggable(gObj.getContent(), {\n      dragTarget: '.e-rowcelldrag, .e-rowdragdrop, .e-rowcell',\n      distance: 5,\n      helper: this.helper,\n      dragStart: this.dragStart,\n      drag: this.drag,\n      dragStop: this.dragStop\n    });\n  };\n\n  RowDD.prototype.updateScrollPostion = function (e, target) {\n    var _this = this;\n\n    var frzCols = this.parent.getFrozenColumns();\n    var y = getPosition(e).y;\n    var cliRect = this.parent.getContent().getBoundingClientRect();\n    var rowHeight = this.parent.getRowHeight() - 15;\n    var scrollElem = frzCols ? this.parent.getContent().querySelector('.e-movablecontent') : this.parent.getContent().firstElementChild;\n\n    if (cliRect.top + rowHeight >= y) {\n      var scrollPixel_1 = -this.parent.getRowHeight();\n      this.isOverflowBorder = false;\n      this.timer = window.setInterval(function () {\n        _this.setScrollDown(scrollElem, scrollPixel_1, true);\n      }, 200);\n    } else if (cliRect.top + this.parent.getContent().clientHeight - rowHeight - 33 <= y) {\n      var scrollPixel_2 = this.parent.getRowHeight();\n      this.isOverflowBorder = false;\n      this.timer = window.setInterval(function () {\n        _this.setScrollDown(scrollElem, scrollPixel_2, true);\n      }, 200);\n    }\n  };\n\n  RowDD.prototype.setScrollDown = function (scrollElem, scrollPixel, isLeft) {\n    scrollElem.scrollTop = scrollElem.scrollTop + scrollPixel;\n  };\n\n  RowDD.prototype.moveDragRows = function (e, startedRow, targetRow) {\n    var cloneElement = this.parent.element.querySelector('.e-cloneproperties');\n    var element = closestElement(e.target, 'tr');\n\n    if (parentsUntil(element, 'e-gridcontent') && parentsUntil(cloneElement.parentElement, 'e-grid').id === parentsUntil(element, 'e-grid').id) {\n      var targetElement = element ? element : this.startedRow;\n      this.setBorder(targetElement, e.event, startedRow, targetRow);\n    }\n  };\n\n  RowDD.prototype.setBorder = function (element, event, startedRow, targetRow) {\n    var node = this.parent.element;\n    var cloneElement = this.parent.element.querySelector('.e-cloneproperties');\n    this.removeFirstRowBorder(element);\n    this.removeLastRowBorder(element);\n\n    if (parentsUntil(element, 'e-gridcontent') && parentsUntil(cloneElement.parentElement, 'e-grid').id === parentsUntil(element, 'e-grid').id) {\n      removeClass(node.querySelectorAll('.e-rowcell,.e-rowdragdrop'), ['e-dragborder']);\n      var rowElement = [];\n\n      if (targetRow && targetRow.rowIndex === 0) {\n        var div = this.parent.createElement('div', {\n          className: 'e-firstrow-dragborder'\n        });\n        var gridheaderEle = this.parent.getHeaderContent();\n        gridheaderEle.classList.add('e-grid-relative');\n        div.style.width = node.offsetWidth - this.getScrollWidth() + 'px';\n\n        if (!gridheaderEle.querySelectorAll('.e-firstrow-dragborder').length) {\n          gridheaderEle.appendChild(div);\n        }\n      } else if (targetRow && parseInt(startedRow.getAttribute('aria-rowindex'), 10) > targetRow.rowIndex) {\n        element = this.parent.getRowByIndex(targetRow.rowIndex - 1);\n        rowElement = [].slice.call(element.querySelectorAll('.e-rowcell,.e-rowdragdrop,.e-detailrowcollapse'));\n      } else {\n        rowElement = [].slice.call(element.querySelectorAll('.e-rowcell,.e-rowdragdrop,.e-detailrowcollapse'));\n      }\n\n      if (rowElement.length > 0) {\n        addRemoveActiveClasses(rowElement, true, 'e-dragborder');\n      }\n    }\n  };\n\n  RowDD.prototype.getScrollWidth = function () {\n    var scrollElem = this.parent.getContent().firstElementChild;\n    return scrollElem.scrollWidth > scrollElem.offsetWidth ? Scroll.getScrollBarWidth() : 0;\n  };\n\n  RowDD.prototype.removeFirstRowBorder = function (element) {\n    if (this.parent.element.getElementsByClassName('e-firstrow-dragborder').length > 0 && element && element.rowIndex !== 0) {\n      this.parent.element.getElementsByClassName('e-firstrow-dragborder')[0].remove();\n    }\n  };\n\n  RowDD.prototype.removeLastRowBorder = function (element) {\n    var islastRowIndex = element && this.parent.getRowByIndex(this.parent.getCurrentViewRecords().length - 1).getAttribute('data-uid') !== element.getAttribute('data-uid');\n\n    if (this.parent.element.getElementsByClassName('e-lastrow-dragborder').length > 0 && element && islastRowIndex) {\n      this.parent.element.getElementsByClassName('e-lastrow-dragborder')[0].remove();\n    }\n  };\n\n  RowDD.prototype.removeBorder = function (element) {\n    this.removeFirstRowBorder(element);\n    this.removeLastRowBorder(element);\n    element = this.parent.getRows().filter(function (row) {\n      return row.querySelector('td.e-dragborder');\n    })[0];\n\n    if (element) {\n      var rowElement = [].slice.call(element.querySelectorAll('.e-dragborder'));\n      addRemoveActiveClasses(rowElement, false, 'e-dragborder');\n    }\n  };\n\n  RowDD.prototype.getElementFromPosition = function (element, event) {\n    var target;\n    var position = getPosition(event);\n    element.style.display = 'none';\n    target = document.elementFromPoint(position.x, position.y);\n    element.style.display = '';\n    return target;\n  };\n\n  RowDD.prototype.onDataBound = function (e) {\n    if (this.selectedRowColls.length > 0) {\n      this.parent.selectRows(this.selectedRowColls);\n      this.selectedRowColls = [];\n    }\n  };\n\n  RowDD.prototype.getTargetIdx = function (targetRow) {\n    return targetRow ? parseInt(targetRow.getAttribute('aria-rowindex'), 10) : 0;\n  };\n\n  RowDD.prototype.singleRowDrop = function (e) {\n    var targetRow = closestElement(e.target, 'tr');\n    var currentIndex;\n    var srcControl;\n    srcControl = e.droppedElement.parentElement.ej2_instances[0];\n    currentIndex = targetRow ? targetRow.rowIndex : srcControl.currentViewData.length - 1;\n    this.reorderRow(this.startedRowIndex, currentIndex);\n  };\n\n  RowDD.prototype.columnDrop = function (e) {\n    var gObj = this.parent;\n    var draggObj = e.droppedElement.parentElement.ej2_instances[0];\n\n    if (e.droppedElement.getAttribute('action') !== 'grouping') {\n      var targetRow = closestElement(e.target, 'tr');\n      var srcControl_1;\n      var currentIndex = void 0;\n\n      if (e.droppedElement.querySelector('tr').getAttribute('single-dragrow') !== 'true' && e.droppedElement.parentElement.id === gObj.element.id || e.droppedElement.querySelector('tr').getAttribute('single-dragrow') === 'true' && e.droppedElement.parentElement.id !== gObj.element.id) {\n        return;\n      }\n\n      if (e.droppedElement.parentElement.id !== gObj.element.id) {\n        srcControl_1 = e.droppedElement.parentElement.ej2_instances[0];\n      } else if (this.isSingleRowDragDrop || e.droppedElement.querySelector('tr').getAttribute('single-dragrow') === 'true') {\n        this.singleRowDrop(e);\n        return;\n      }\n\n      if (srcControl_1.element.id !== gObj.element.id && srcControl_1.rowDropSettings.targetID !== gObj.element.id) {\n        return;\n      }\n\n      var records = srcControl_1.getSelectedRecords();\n      var targetIndex = currentIndex = this.getTargetIdx(targetRow);\n      var count = 0;\n\n      if (isNaN(targetIndex)) {\n        targetIndex = currentIndex = 0;\n      }\n\n      if (gObj.allowPaging) {\n        targetIndex = targetIndex + gObj.pageSettings.currentPage * gObj.pageSettings.pageSize - gObj.pageSettings.pageSize;\n      } //Todo: drag and drop mapper & BatchChanges\n\n\n      if (!isBlazor()) {\n        gObj.notify(events.rowsAdded, {\n          toIndex: targetIndex,\n          records: records\n        });\n        gObj.notify(events.modelChanged, {\n          type: events.actionBegin,\n          requestType: 'rowdraganddrop'\n        });\n        var selectedRows = srcControl_1.getSelectedRowIndexes();\n        var skip = srcControl_1.allowPaging ? srcControl_1.pageSettings.currentPage * srcControl_1.pageSettings.pageSize - srcControl_1.pageSettings.pageSize : 0;\n        this.selectedRows = [];\n\n        for (var i = 0, len = records.length; i < len; i++) {\n          this.selectedRows.push(skip + selectedRows[i]);\n        }\n\n        srcControl_1.notify(events.rowsRemoved, {\n          indexes: this.selectedRows,\n          records: records\n        });\n        srcControl_1.notify(events.modelChanged, {\n          type: events.actionBegin,\n          requestType: 'rowdraganddrop'\n        });\n      } else {\n        var currentVdata = [];\n        var selectedIndex = srcControl_1.getSelectedRowIndexes();\n\n        for (var i = 0; i < selectedIndex.length; i++) {\n          currentVdata[i] = srcControl_1.currentViewData[selectedIndex[i]];\n        }\n\n        records = currentVdata;\n        var changes = {\n          addedRecords: records,\n          deletedRecords: [],\n          changedRecords: []\n        };\n        var dragDropDestinationIndex = 'dragDropDestinationIndex';\n        var query = new Query();\n        query[dragDropDestinationIndex] = targetIndex;\n        gObj.getDataModule().saveChanges(changes, gObj.getPrimaryKeyFieldNames()[0], {}, query).then(function () {\n          gObj.notify(events.modelChanged, {\n            type: events.actionBegin,\n            requestType: 'rowdraganddrop'\n          });\n        }).catch(function (e) {\n          var message = 'message';\n          var error = 'error';\n\n          if (!isNullOrUndefined(e[error]) && !isNullOrUndefined(e[error][message])) {\n            e[error] = e[error][message];\n          }\n\n          gObj.trigger(events.actionFailure, e);\n        });\n        changes.deletedRecords = records;\n        changes.addedRecords = [];\n        srcControl_1.getDataModule().saveChanges(changes, srcControl_1.getPrimaryKeyFieldNames()[0], {}, query).then(function () {\n          srcControl_1.notify(events.modelChanged, {\n            type: events.actionBegin,\n            requestType: 'rowdraganddrop'\n          });\n        }).catch(function (e) {\n          var error = 'error';\n          var msg = 'message';\n\n          if (!isNullOrUndefined(e[error]) && !isNullOrUndefined(e[error][msg])) {\n            e[error] = e[error][msg];\n          }\n\n          srcControl_1.trigger(events.actionFailure, e);\n        });\n      }\n    }\n  };\n\n  RowDD.prototype.reorderRow = function (fromIndexes, toIndex) {\n    var gObj = this.parent;\n\n    if (!gObj.sortSettings.columns.length && !gObj.groupSettings.columns.length && !gObj.filterSettings.columns.length) {\n      //Todo: drag and drop mapper & BatchChanges                 \n      var skip = gObj.allowPaging ? gObj.pageSettings.currentPage * gObj.pageSettings.pageSize - gObj.pageSettings.pageSize : 0;\n      var fromIndex = fromIndexes;\n      toIndex = toIndex + skip;\n      this.selectedRows = gObj.getSelectedRowIndexes();\n      gObj.notify(events.rowPositionChanged, {\n        fromIndex: fromIndexes + skip,\n        toIndex: toIndex\n      });\n    }\n  };\n\n  RowDD.prototype.enableAfterRender = function (e) {\n    if (e.module === this.getModuleName() && e.enable) {\n      this.initializeDrag();\n    }\n  };\n  /**\n   * To destroy the print\n   * @return {void}\n   * @hidden\n   */\n\n\n  RowDD.prototype.destroy = function () {\n    var gridElement = this.parent.element;\n\n    if (this.parent.isDestroyed || !gridElement || !gridElement.querySelector('.e-gridheader') && !gridElement.querySelector('.e-gridcontent')) {\n      return;\n    }\n\n    this.draggable.destroy();\n    this.parent.off(events.initialEnd, this.initializeDrag);\n    this.parent.off(events.columnDrop, this.columnDrop);\n    this.parent.removeEventListener(events.dataBound, this.onDataBoundFn);\n    this.parent.off(events.uiUpdate, this.enableAfterRender); //destory ejdrag and drop\n  };\n  /**\n   * For internal use only - Get the module name.\n   * @private\n   */\n\n\n  RowDD.prototype.getModuleName = function () {\n    return 'rowDragAndDrop';\n  };\n\n  RowDD.prototype.processArgs = function (target) {\n    var gObj = this.parent;\n\n    if (gObj.getSelectedRecords().length > 0 && this.startedRow.cells[0].classList.contains('e-selectionbackground') === false || gObj.getSelectedRecords().length === 0) {\n      this.rows = [this.startedRow];\n      this.rowData = [this.parent.getRowInfo(this.startedRow.querySelector('.e-rowcell')).rowData];\n    } else {\n      this.rows = gObj.getSelectedRows();\n      this.rowData = gObj.getSelectedRecords();\n    }\n  };\n\n  return RowDD;\n}();\n\nexport { RowDD };","map":null,"metadata":{},"sourceType":"module"}