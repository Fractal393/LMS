{"ast":null,"code":"/* eslint consistent-this: 0, no-shadow:0, no-eq-null: 0, eqeqeq: 0, no-unused-vars: 0 */\n// Support for asynchronous functions\n\"use strict\";\n\nvar aFrom = require(\"es5-ext/array/from\"),\n    objectMap = require(\"es5-ext/object/map\"),\n    mixin = require(\"es5-ext/object/mixin\"),\n    defineLength = require(\"es5-ext/function/_define-length\"),\n    nextTick = require(\"next-tick\");\n\nvar slice = Array.prototype.slice,\n    apply = Function.prototype.apply,\n    create = Object.create;\n\nrequire(\"../lib/registered-extensions\").async = function (tbi, conf) {\n  var waiting = create(null),\n      cache = create(null),\n      base = conf.memoized,\n      original = conf.original,\n      currentCallback,\n      currentContext,\n      currentArgs; // Initial\n\n  conf.memoized = defineLength(function (arg) {\n    var args = arguments,\n        last = args[args.length - 1];\n\n    if (typeof last === \"function\") {\n      currentCallback = last;\n      args = slice.call(args, 0, -1);\n    }\n\n    return base.apply(currentContext = this, currentArgs = args);\n  }, base);\n\n  try {\n    mixin(conf.memoized, base);\n  } catch (ignore) {} // From cache (sync)\n\n\n  conf.on(\"get\", function (id) {\n    var cb, context, args;\n    if (!currentCallback) return; // Unresolved\n\n    if (waiting[id]) {\n      if (typeof waiting[id] === \"function\") waiting[id] = [waiting[id], currentCallback];else waiting[id].push(currentCallback);\n      currentCallback = null;\n      return;\n    } // Resolved, assure next tick invocation\n\n\n    cb = currentCallback;\n    context = currentContext;\n    args = currentArgs;\n    currentCallback = currentContext = currentArgs = null;\n    nextTick(function () {\n      var data;\n\n      if (hasOwnProperty.call(cache, id)) {\n        data = cache[id];\n        conf.emit(\"getasync\", id, args, context);\n        apply.call(cb, data.context, data.args);\n      } else {\n        // Purged in a meantime, we shouldn't rely on cached value, recall\n        currentCallback = cb;\n        currentContext = context;\n        currentArgs = args;\n        base.apply(context, args);\n      }\n    });\n  }); // Not from cache\n\n  conf.original = function () {\n    var args, cb, origCb, result;\n    if (!currentCallback) return apply.call(original, this, arguments);\n    args = aFrom(arguments);\n\n    cb = function self(err) {\n      var cb,\n          args,\n          id = self.id;\n\n      if (id == null) {\n        // Shouldn't happen, means async callback was called sync way\n        nextTick(apply.bind(self, this, arguments));\n        return undefined;\n      }\n\n      delete self.id;\n      cb = waiting[id];\n      delete waiting[id];\n\n      if (!cb) {\n        // Already processed,\n        // outcome of race condition: asyncFn(1, cb), asyncFn.clear(), asyncFn(1, cb)\n        return undefined;\n      }\n\n      args = aFrom(arguments);\n\n      if (conf.has(id)) {\n        if (err) {\n          conf.delete(id);\n        } else {\n          cache[id] = {\n            context: this,\n            args: args\n          };\n          conf.emit(\"setasync\", id, typeof cb === \"function\" ? 1 : cb.length);\n        }\n      }\n\n      if (typeof cb === \"function\") {\n        result = apply.call(cb, this, args);\n      } else {\n        cb.forEach(function (cb) {\n          result = apply.call(cb, this, args);\n        }, this);\n      }\n\n      return result;\n    };\n\n    origCb = currentCallback;\n    currentCallback = currentContext = currentArgs = null;\n    args.push(cb);\n    result = apply.call(original, this, args);\n    cb.cb = origCb;\n    currentCallback = cb;\n    return result;\n  }; // After not from cache call\n\n\n  conf.on(\"set\", function (id) {\n    if (!currentCallback) {\n      conf.delete(id);\n      return;\n    }\n\n    if (waiting[id]) {\n      // Race condition: asyncFn(1, cb), asyncFn.clear(), asyncFn(1, cb)\n      if (typeof waiting[id] === \"function\") waiting[id] = [waiting[id], currentCallback.cb];else waiting[id].push(currentCallback.cb);\n    } else {\n      waiting[id] = currentCallback.cb;\n    }\n\n    delete currentCallback.cb;\n    currentCallback.id = id;\n    currentCallback = null;\n  }); // On delete\n\n  conf.on(\"delete\", function (id) {\n    var result; // If false, we don't have value yet, so we assume that intention is not\n    // to memoize this call. After value is obtained we don't cache it but\n    // gracefully pass to callback\n\n    if (hasOwnProperty.call(waiting, id)) return;\n    if (!cache[id]) return;\n    result = cache[id];\n    delete cache[id];\n    conf.emit(\"deleteasync\", id, slice.call(result.args, 1));\n  }); // On clear\n\n  conf.on(\"clear\", function () {\n    var oldCache = cache;\n    cache = create(null);\n    conf.emit(\"clearasync\", objectMap(oldCache, function (data) {\n      return slice.call(data.args, 1);\n    }));\n  });\n};","map":null,"metadata":{},"sourceType":"script"}