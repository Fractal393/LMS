{"ast":null,"code":"/**\r\n * DevExtreme (ui/popup.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _translator = require(\"../animation/translator\");\n\nvar _translator2 = _interopRequireDefault(_translator);\n\nvar _component_registrator = require(\"../core/component_registrator\");\n\nvar _component_registrator2 = _interopRequireDefault(_component_registrator);\n\nvar _devices = require(\"../core/devices\");\n\nvar _devices2 = _interopRequireDefault(_devices);\n\nvar _dom = require(\"../core/utils/dom\");\n\nvar _dom2 = _interopRequireDefault(_dom);\n\nvar _renderer = require(\"../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _empty_template = require(\"../core/templates/empty_template\");\n\nvar _array = require(\"../core/utils/array\");\n\nvar _browser = require(\"../core/utils/browser\");\n\nvar _browser2 = _interopRequireDefault(_browser);\n\nvar _common = require(\"../core/utils/common\");\n\nvar _extend = require(\"../core/utils/extend\");\n\nvar _inflector = require(\"../core/utils/inflector\");\n\nvar _iterator = require(\"../core/utils/iterator\");\n\nvar _size = require(\"../core/utils/size\");\n\nvar _size2 = _interopRequireDefault(_size);\n\nvar _position = require(\"../core/utils/position\");\n\nvar _type = require(\"../core/utils/type\");\n\nvar _version = require(\"../core/utils/version\");\n\nvar _window = require(\"../core/utils/window\");\n\nvar _window2 = _interopRequireDefault(_window);\n\nvar _message = require(\"../localization/message\");\n\nvar _message2 = _interopRequireDefault(_message);\n\nvar _button = require(\"./button\");\n\nvar _button2 = _interopRequireDefault(_button);\n\nvar _overlay = require(\"./overlay\");\n\nvar _overlay2 = _interopRequireDefault(_overlay);\n\nvar _themes = require(\"./themes\");\n\nvar _themes2 = _interopRequireDefault(_themes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar window = _window2.default.getWindow();\n\nrequire(\"./toolbar/ui.toolbar.base\");\n\nvar POPUP_CLASS = \"dx-popup\";\nvar POPUP_WRAPPER_CLASS = \"dx-popup-wrapper\";\nvar POPUP_FULL_SCREEN_CLASS = \"dx-popup-fullscreen\";\nvar POPUP_FULL_SCREEN_WIDTH_CLASS = \"dx-popup-fullscreen-width\";\nvar POPUP_NORMAL_CLASS = \"dx-popup-normal\";\nvar POPUP_CONTENT_CLASS = \"dx-popup-content\";\nvar POPUP_DRAGGABLE_CLASS = \"dx-popup-draggable\";\nvar POPUP_TITLE_CLASS = \"dx-popup-title\";\nvar POPUP_TITLE_CLOSEBUTTON_CLASS = \"dx-closebutton\";\nvar POPUP_BOTTOM_CLASS = \"dx-popup-bottom\";\nvar TEMPLATE_WRAPPER_CLASS = \"dx-template-wrapper\";\nvar POPUP_CONTENT_FLEX_HEIGHT_CLASS = \"dx-popup-flex-height\";\nvar POPUP_CONTENT_INHERIT_HEIGHT_CLASS = \"dx-popup-inherit-height\";\nvar ALLOWED_TOOLBAR_ITEM_ALIASES = [\"cancel\", \"clear\", \"done\"];\nvar BUTTON_DEFAULT_TYPE = \"default\";\nvar BUTTON_NORMAL_TYPE = \"normal\";\nvar BUTTON_TEXT_MODE = \"text\";\nvar BUTTON_CONTAINED_MODE = \"contained\";\nvar IS_IE11 = _browser2.default.msie && 11 === parseInt(_browser2.default.version);\nvar IS_OLD_SAFARI = _browser2.default.safari && (0, _version.compare)(_browser2.default.version, [11]) < 0;\nvar HEIGHT_STRATEGIES = {\n  \"static\": \"\",\n  inherit: POPUP_CONTENT_INHERIT_HEIGHT_CLASS,\n  flex: POPUP_CONTENT_FLEX_HEIGHT_CLASS\n};\n\nvar getButtonPlace = function (name) {\n  var device = _devices2.default.current();\n\n  var platform = device.platform;\n  var toolbar = \"bottom\";\n  var location = \"before\";\n\n  if (\"ios\" === platform) {\n    switch (name) {\n      case \"cancel\":\n        toolbar = \"top\";\n        break;\n\n      case \"clear\":\n        toolbar = \"top\";\n        location = \"after\";\n        break;\n\n      case \"done\":\n        location = \"after\";\n    }\n  } else {\n    if (\"android\" === platform && device.version && parseInt(device.version[0]) > 4) {\n      switch (name) {\n        case \"cancel\":\n          location = \"after\";\n          break;\n\n        case \"done\":\n          location = \"after\";\n      }\n    } else {\n      if (\"android\" === platform) {\n        location = \"center\";\n      }\n    }\n  }\n\n  return {\n    toolbar: toolbar,\n    location: location\n  };\n};\n\nvar Popup = _overlay2.default.inherit({\n  _getDefaultOptions: function () {\n    return (0, _extend.extend)(this.callBase(), {\n      fullScreen: false,\n      title: \"\",\n      showTitle: true,\n      titleTemplate: \"title\",\n      onTitleRendered: null,\n      dragEnabled: false,\n      toolbarItems: [],\n      showCloseButton: false,\n      bottomTemplate: \"bottom\",\n      useDefaultToolbarButtons: false,\n      useFlatToolbarButtons: false,\n      autoResizeEnabled: true\n    });\n  },\n  _defaultOptionsRules: function () {\n    var themeName = _themes2.default.current();\n\n    return this.callBase().concat([{\n      device: {\n        platform: \"ios\"\n      },\n      options: {\n        animation: this._iosAnimation\n      }\n    }, {\n      device: {\n        platform: \"android\"\n      },\n      options: {\n        animation: this._androidAnimation\n      }\n    }, {\n      device: {\n        platform: \"generic\"\n      },\n      options: {\n        showCloseButton: true\n      }\n    }, {\n      device: function (_device) {\n        return \"desktop\" === _devices2.default.real().deviceType && \"generic\" === _device.platform;\n      },\n      options: {\n        dragEnabled: true\n      }\n    }, {\n      device: function () {\n        return \"desktop\" === _devices2.default.real().deviceType && !_devices2.default.isSimulator();\n      },\n      options: {\n        focusStateEnabled: true\n      }\n    }, {\n      device: function () {\n        return _themes2.default.isMaterial(themeName);\n      },\n      options: {\n        useDefaultToolbarButtons: true,\n        useFlatToolbarButtons: true\n      }\n    }]);\n  },\n  _iosAnimation: {\n    show: {\n      type: \"slide\",\n      duration: 400,\n      from: {\n        position: {\n          my: \"top\",\n          at: \"bottom\"\n        }\n      },\n      to: {\n        position: {\n          my: \"center\",\n          at: \"center\"\n        }\n      }\n    },\n    hide: {\n      type: \"slide\",\n      duration: 400,\n      from: {\n        opacity: 1,\n        position: {\n          my: \"center\",\n          at: \"center\"\n        }\n      },\n      to: {\n        opacity: 1,\n        position: {\n          my: \"top\",\n          at: \"bottom\"\n        }\n      }\n    }\n  },\n  _androidAnimation: function () {\n    var fullScreenConfig = {\n      show: {\n        type: \"slide\",\n        duration: 300,\n        from: {\n          top: \"30%\",\n          opacity: 0\n        },\n        to: {\n          top: 0,\n          opacity: 1\n        }\n      },\n      hide: {\n        type: \"slide\",\n        duration: 300,\n        from: {\n          top: 0,\n          opacity: 1\n        },\n        to: {\n          top: \"30%\",\n          opacity: 0\n        }\n      }\n    };\n    var defaultConfig = {\n      show: {\n        type: \"fade\",\n        duration: 400,\n        from: 0,\n        to: 1\n      },\n      hide: {\n        type: \"fade\",\n        duration: 400,\n        from: 1,\n        to: 0\n      }\n    };\n    return this.option(\"fullScreen\") ? fullScreenConfig : defaultConfig;\n  },\n  _init: function () {\n    this.callBase();\n    this.$element().addClass(POPUP_CLASS);\n\n    this._wrapper().addClass(POPUP_WRAPPER_CLASS);\n\n    this._$popupContent = this._$content.wrapInner((0, _renderer2.default)(\"<div>\").addClass(POPUP_CONTENT_CLASS)).children().eq(0);\n  },\n  _render: function () {\n    var isFullscreen = this.option(\"fullScreen\");\n\n    this._toggleFullScreenClass(isFullscreen);\n\n    this.callBase();\n  },\n  _toggleFullScreenClass: function (value) {\n    this._$content.toggleClass(POPUP_FULL_SCREEN_CLASS, value).toggleClass(POPUP_NORMAL_CLASS, !value);\n  },\n  _initTemplates: function () {\n    this.callBase();\n\n    this._templateManager.addDefaultTemplates({\n      title: new _empty_template.EmptyTemplate(),\n      bottom: new _empty_template.EmptyTemplate()\n    });\n  },\n  _renderContentImpl: function () {\n    this._renderTitle();\n\n    this.callBase();\n\n    this._renderBottom();\n  },\n  _renderTitle: function () {\n    var items = this._getToolbarItems(\"top\");\n\n    var titleText = this.option(\"title\");\n    var showTitle = this.option(\"showTitle\");\n\n    if (showTitle && !!titleText) {\n      items.unshift({\n        location: _devices2.default.current().ios ? \"center\" : \"before\",\n        text: titleText\n      });\n    }\n\n    if (showTitle || items.length > 0) {\n      this._$title && this._$title.remove();\n      var $title = (0, _renderer2.default)(\"<div>\").addClass(POPUP_TITLE_CLASS).insertBefore(this.$content());\n      this._$title = this._renderTemplateByType(\"titleTemplate\", items, $title).addClass(POPUP_TITLE_CLASS);\n\n      this._renderDrag();\n\n      this._executeTitleRenderAction(this._$title);\n    } else {\n      if (this._$title) {\n        this._$title.detach();\n      }\n    }\n  },\n  _renderTemplateByType: function (optionName, data, $container, additionalToolbarOptions) {\n    var template = this._getTemplateByOption(optionName);\n\n    var toolbarTemplate = template instanceof _empty_template.EmptyTemplate;\n\n    if (toolbarTemplate) {\n      var integrationOptions = (0, _extend.extend)({}, this.option(\"integrationOptions\"), {\n        skipTemplates: [\"content\", \"title\"]\n      });\n      var toolbarOptions = (0, _extend.extend)(additionalToolbarOptions, {\n        items: data,\n        rtlEnabled: this.option(\"rtlEnabled\"),\n        useDefaultButtons: this.option(\"useDefaultToolbarButtons\"),\n        useFlatButtons: this.option(\"useFlatToolbarButtons\"),\n        integrationOptions: integrationOptions\n      });\n\n      this._getTemplate(\"dx-polymorph-widget\").render({\n        container: $container,\n        model: {\n          widget: \"dxToolbarBase\",\n          options: toolbarOptions\n        }\n      });\n\n      var $toolbar = $container.children(\"div\");\n      $container.replaceWith($toolbar);\n      return $toolbar;\n    } else {\n      var $result = (0, _renderer2.default)(template.render({\n        container: (0, _dom.getPublicElement)($container)\n      }));\n\n      if ($result.hasClass(TEMPLATE_WRAPPER_CLASS)) {\n        $container.replaceWith($result);\n        $container = $result;\n      }\n\n      return $container;\n    }\n  },\n  _executeTitleRenderAction: function ($titleElement) {\n    this._getTitleRenderAction()({\n      titleElement: (0, _dom.getPublicElement)($titleElement)\n    });\n  },\n  _getTitleRenderAction: function () {\n    return this._titleRenderAction || this._createTitleRenderAction();\n  },\n  _createTitleRenderAction: function () {\n    return this._titleRenderAction = this._createActionByOption(\"onTitleRendered\", {\n      element: this.element(),\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n  },\n  _getCloseButton: function () {\n    return {\n      toolbar: \"top\",\n      location: \"after\",\n      template: this._getCloseButtonRenderer()\n    };\n  },\n  _getCloseButtonRenderer: function () {\n    return function (_, __, container) {\n      var $button = (0, _renderer2.default)(\"<div>\").addClass(POPUP_TITLE_CLOSEBUTTON_CLASS);\n\n      this._createComponent($button, _button2.default, {\n        icon: \"close\",\n        onClick: this._createToolbarItemAction(void 0),\n        integrationOptions: {}\n      });\n\n      (0, _renderer2.default)(container).append($button);\n    }.bind(this);\n  },\n  _getToolbarItems: function (toolbar) {\n    var toolbarItems = this.option(\"toolbarItems\");\n    var toolbarsItems = [];\n    this._toolbarItemClasses = [];\n\n    var currentPlatform = _devices2.default.current().platform;\n\n    var index = 0;\n    (0, _iterator.each)(toolbarItems, function (_, data) {\n      var isShortcut = (0, _type.isDefined)(data.shortcut);\n      var item = isShortcut ? getButtonPlace(data.shortcut) : data;\n\n      if (isShortcut && \"ios\" === currentPlatform && index < 2) {\n        item.toolbar = \"top\";\n        index++;\n      }\n\n      item.toolbar = data.toolbar || item.toolbar || \"top\";\n\n      if (item && item.toolbar === toolbar) {\n        if (isShortcut) {\n          (0, _extend.extend)(item, {\n            location: data.location\n          }, this._getToolbarItemByAlias(data));\n        }\n\n        var isLTROrder = \"generic\" === currentPlatform;\n\n        if (\"done\" === data.shortcut && isLTROrder || \"cancel\" === data.shortcut && !isLTROrder) {\n          toolbarsItems.unshift(item);\n        } else {\n          toolbarsItems.push(item);\n        }\n      }\n    }.bind(this));\n\n    if (\"top\" === toolbar && this.option(\"showCloseButton\") && this.option(\"showTitle\")) {\n      toolbarsItems.push(this._getCloseButton());\n    }\n\n    return toolbarsItems;\n  },\n  _getLocalizationKey: function (itemType) {\n    return \"done\" === itemType.toLowerCase() ? \"OK\" : (0, _inflector.camelize)(itemType, true);\n  },\n  _getToolbarItemByAlias: function (data) {\n    var that = this;\n    var itemType = data.shortcut;\n\n    if ((0, _array.inArray)(itemType, ALLOWED_TOOLBAR_ITEM_ALIASES) < 0) {\n      return false;\n    }\n\n    var itemConfig = (0, _extend.extend)({\n      text: _message2.default.format(this._getLocalizationKey(itemType)),\n      onClick: this._createToolbarItemAction(data.onClick),\n      integrationOptions: {},\n      type: that.option(\"useDefaultToolbarButtons\") ? BUTTON_DEFAULT_TYPE : BUTTON_NORMAL_TYPE,\n      stylingMode: that.option(\"useFlatToolbarButtons\") ? BUTTON_TEXT_MODE : BUTTON_CONTAINED_MODE\n    }, data.options || {});\n    var itemClass = POPUP_CLASS + \"-\" + itemType;\n\n    this._toolbarItemClasses.push(itemClass);\n\n    return {\n      template: function (_, __, container) {\n        var $toolbarItem = (0, _renderer2.default)(\"<div>\").addClass(itemClass).appendTo(container);\n\n        that._createComponent($toolbarItem, _button2.default, itemConfig);\n      }\n    };\n  },\n  _createToolbarItemAction: function (clickAction) {\n    return this._createAction(clickAction, {\n      afterExecute: function (e) {\n        e.component.hide();\n      }\n    });\n  },\n  _renderBottom: function () {\n    var items = this._getToolbarItems(\"bottom\");\n\n    if (items.length) {\n      this._$bottom && this._$bottom.remove();\n      var $bottom = (0, _renderer2.default)(\"<div>\").addClass(POPUP_BOTTOM_CLASS).insertAfter(this.$content());\n      this._$bottom = this._renderTemplateByType(\"bottomTemplate\", items, $bottom, {\n        compactMode: true\n      }).addClass(POPUP_BOTTOM_CLASS);\n\n      this._toggleClasses();\n    } else {\n      this._$bottom && this._$bottom.detach();\n    }\n  },\n  _toggleClasses: function () {\n    var aliases = ALLOWED_TOOLBAR_ITEM_ALIASES;\n    (0, _iterator.each)(aliases, function (_, alias) {\n      var className = POPUP_CLASS + \"-\" + alias;\n\n      if ((0, _array.inArray)(className, this._toolbarItemClasses) >= 0) {\n        this._wrapper().addClass(className + \"-visible\");\n\n        this._$bottom.addClass(className);\n      } else {\n        this._wrapper().removeClass(className + \"-visible\");\n\n        this._$bottom.removeClass(className);\n      }\n    }.bind(this));\n  },\n  _getContainer: function () {\n    if (this.option(\"fullScreen\")) {\n      return (0, _renderer2.default)(window);\n    }\n\n    return this.callBase();\n  },\n  _getDragTarget: function () {\n    return this.topToolbar();\n  },\n  _renderGeometryImpl: function (isDimensionChanged) {\n    if (!isDimensionChanged) {\n      this._resetContentHeight();\n    }\n\n    this.callBase.apply(this, arguments);\n\n    this._setContentHeight();\n  },\n  _resetContentHeight: function () {\n    this._$popupContent.css({\n      height: \"auto\",\n      maxHeight: \"none\"\n    });\n  },\n  _renderDrag: function () {\n    this.callBase();\n\n    this._$content.toggleClass(POPUP_DRAGGABLE_CLASS, this.option(\"dragEnabled\"));\n  },\n  _renderResize: function () {\n    this.callBase();\n\n    this._resizable.option(\"onResize\", function () {\n      this._setContentHeight();\n\n      this._actions.onResize(arguments);\n    }.bind(this));\n  },\n  _setContentHeight: function () {\n    (this.option(\"forceApplyBindings\") || _common.noop)();\n\n    var overlayContent = this.overlayContent().get(0);\n\n    var currentHeightStrategyClass = this._chooseHeightStrategy(overlayContent);\n\n    this.$content().css(this._getHeightCssStyles(currentHeightStrategyClass, overlayContent));\n\n    this._setHeightClasses(this.overlayContent(), currentHeightStrategyClass);\n  },\n  _heightStrategyChangeOffset: function (currentHeightStrategyClass, popupVerticalPaddings) {\n    return currentHeightStrategyClass === HEIGHT_STRATEGIES.flex ? -popupVerticalPaddings : 0;\n  },\n  _chooseHeightStrategy: function (overlayContent) {\n    var isAutoWidth = \"auto\" === overlayContent.style.width || \"\" === overlayContent.style.width;\n    var currentHeightStrategyClass = HEIGHT_STRATEGIES.static;\n\n    if (this._isAutoHeight() && this.option(\"autoResizeEnabled\")) {\n      if (isAutoWidth || IS_OLD_SAFARI) {\n        if (!IS_IE11) {\n          currentHeightStrategyClass = HEIGHT_STRATEGIES.inherit;\n        }\n      } else {\n        currentHeightStrategyClass = HEIGHT_STRATEGIES.flex;\n      }\n    }\n\n    return currentHeightStrategyClass;\n  },\n  _getHeightCssStyles: function (currentHeightStrategyClass, overlayContent) {\n    var cssStyles = {};\n\n    var contentMaxHeight = this._getOptionValue(\"maxHeight\", overlayContent);\n\n    var contentMinHeight = this._getOptionValue(\"minHeight\", overlayContent);\n\n    var popupHeightParts = this._splitPopupHeight();\n\n    var toolbarsAndVerticalOffsetsHeight = popupHeightParts.header + popupHeightParts.footer + popupHeightParts.contentVerticalOffsets + popupHeightParts.popupVerticalOffsets + this._heightStrategyChangeOffset(currentHeightStrategyClass, popupHeightParts.popupVerticalPaddings);\n\n    if (currentHeightStrategyClass === HEIGHT_STRATEGIES.static) {\n      if (!this._isAutoHeight() || contentMaxHeight || contentMinHeight) {\n        var overlayHeight = this.option(\"fullScreen\") ? Math.min((0, _position.getBoundingRect)(overlayContent).height, _window2.default.getWindow().innerHeight) : (0, _position.getBoundingRect)(overlayContent).height;\n        var contentHeight = overlayHeight - toolbarsAndVerticalOffsetsHeight;\n        cssStyles = {\n          height: Math.max(0, contentHeight),\n          minHeight: \"auto\",\n          maxHeight: \"auto\"\n        };\n      }\n    } else {\n      var container = (0, _renderer2.default)(this._getContainer()).get(0);\n\n      var maxHeightValue = _size2.default.addOffsetToMaxHeight(contentMaxHeight, -toolbarsAndVerticalOffsetsHeight, container);\n\n      var minHeightValue = _size2.default.addOffsetToMinHeight(contentMinHeight, -toolbarsAndVerticalOffsetsHeight, container);\n\n      cssStyles = {\n        height: \"auto\",\n        minHeight: minHeightValue,\n        maxHeight: maxHeightValue\n      };\n    }\n\n    return cssStyles;\n  },\n  _setHeightClasses: function ($container, currentClass) {\n    var excessClasses = \"\";\n\n    for (var name in HEIGHT_STRATEGIES) {\n      if (HEIGHT_STRATEGIES[name] !== currentClass) {\n        excessClasses += \" \" + HEIGHT_STRATEGIES[name];\n      }\n    }\n\n    $container.removeClass(excessClasses).addClass(currentClass);\n  },\n  _isAutoHeight: function () {\n    return \"auto\" === this.overlayContent().get(0).style.height;\n  },\n  _splitPopupHeight: function () {\n    var topToolbar = this.topToolbar();\n    var bottomToolbar = this.bottomToolbar();\n    return {\n      header: _size2.default.getVisibleHeight(topToolbar && topToolbar.get(0)),\n      footer: _size2.default.getVisibleHeight(bottomToolbar && bottomToolbar.get(0)),\n      contentVerticalOffsets: _size2.default.getVerticalOffsets(this.overlayContent().get(0), true),\n      popupVerticalOffsets: _size2.default.getVerticalOffsets(this.$content().get(0), true),\n      popupVerticalPaddings: _size2.default.getVerticalOffsets(this.$content().get(0), false)\n    };\n  },\n  _useFixedPosition: function () {\n    return this.callBase() || this.option(\"fullScreen\");\n  },\n  _toggleSafariFullScreen: function (value) {\n    var toggleFullScreenBeforeShown = this._useFixedPosition() && value && !this._isShown;\n\n    if (toggleFullScreenBeforeShown) {\n      this._bodyScrollTop = value ? window.pageYOffset : void 0;\n    } else {\n      this._toggleSafariScrolling(!value);\n    }\n  },\n  _renderDimensions: function () {\n    if (this.option(\"fullScreen\")) {\n      this._$content.css({\n        width: \"100%\",\n        height: \"100%\"\n      });\n    } else {\n      this.callBase.apply(this, arguments);\n    }\n\n    if (_window2.default.hasWindow()) {\n      this._renderFullscreenWidthClass();\n    }\n  },\n  _renderFullscreenWidthClass: function () {\n    this.overlayContent().toggleClass(POPUP_FULL_SCREEN_WIDTH_CLASS, this.overlayContent().outerWidth() === (0, _renderer2.default)(window).width());\n  },\n  refreshPosition: function () {\n    this._renderPosition();\n  },\n  _renderPosition: function () {\n    if (this.option(\"fullScreen\")) {\n      _translator2.default.move(this._$content, {\n        top: 0,\n        left: 0\n      });\n    } else {\n      (this.option(\"forceApplyBindings\") || _common.noop)();\n\n      return this.callBase.apply(this, arguments);\n    }\n  },\n  _optionChanged: function (args) {\n    switch (args.name) {\n      case \"showTitle\":\n      case \"title\":\n      case \"titleTemplate\":\n        this._renderTitle();\n\n        this._renderGeometry();\n\n        break;\n\n      case \"bottomTemplate\":\n        this._renderBottom();\n\n        this._renderGeometry();\n\n        break;\n\n      case \"onTitleRendered\":\n        this._createTitleRenderAction(args.value);\n\n        break;\n\n      case \"toolbarItems\":\n      case \"useDefaultToolbarButtons\":\n      case \"useFlatToolbarButtons\":\n        var shouldRenderGeometry = !args.fullName.match(/^toolbarItems((\\[\\d+\\])(\\.(options|visible).*)?)?$/);\n\n        this._renderTitle();\n\n        this._renderBottom();\n\n        if (shouldRenderGeometry) {\n          this._renderGeometry();\n        }\n\n        break;\n\n      case \"dragEnabled\":\n        this._renderDrag();\n\n        break;\n\n      case \"autoResizeEnabled\":\n        this._renderGeometry();\n\n        _dom2.default.triggerResizeEvent(this._$content);\n\n        break;\n\n      case \"fullScreen\":\n        this._toggleFullScreenClass(args.value);\n\n        this._toggleSafariFullScreen(args.value);\n\n        this._renderGeometry();\n\n        _dom2.default.triggerResizeEvent(this._$content);\n\n        break;\n\n      case \"showCloseButton\":\n        this._renderTitle();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  bottomToolbar: function () {\n    return this._$bottom;\n  },\n  topToolbar: function () {\n    return this._$title;\n  },\n  $content: function () {\n    return this._$popupContent;\n  },\n  content: function () {\n    return (0, _dom.getPublicElement)(this._$popupContent);\n  },\n  overlayContent: function () {\n    return this._$content;\n  }\n});\n\n(0, _component_registrator2.default)(\"dxPopup\", Popup);\nmodule.exports = Popup;\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}