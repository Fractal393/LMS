{"ast":null,"code":"/**\r\n * DevExtreme (events/gesture/emitter.gesture.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\");\n\nvar eventsEngine = require(\"../../events/core/events_engine\");\n\nvar devices = require(\"../../core/devices\");\n\nvar styleUtils = require(\"../../core/utils/style\");\n\nvar callOnce = require(\"../../core/utils/call_once\");\n\nvar domUtils = require(\"../../core/utils/dom\");\n\nvar readyCallbacks = require(\"../../core/utils/ready_callbacks\");\n\nvar ready = readyCallbacks.add;\n\nvar mathUtils = require(\"../../core/utils/math\");\n\nvar noop = require(\"../../core/utils/common\").noop;\n\nvar isDefined = require(\"../../core/utils/type\").isDefined;\n\nvar eventUtils = require(\"../utils\");\n\nvar Emitter = require(\"../core/emitter\");\n\nvar sign = mathUtils.sign;\nvar abs = Math.abs;\nvar SLEEP = 0;\nvar INITED = 1;\nvar STARTED = 2;\nvar TOUCH_BOUNDARY = 10;\nvar IMMEDIATE_TOUCH_BOUNDARY = 0;\nvar IMMEDIATE_TIMEOUT = 180;\n\nvar supportPointerEvents = function () {\n  return styleUtils.styleProp(\"pointer-events\");\n};\n\nvar setGestureCover = callOnce(function () {\n  var GESTURE_COVER_CLASS = \"dx-gesture-cover\";\n  var isDesktop = \"desktop\" === devices.real().deviceType;\n\n  if (!supportPointerEvents() || !isDesktop) {\n    return noop;\n  }\n\n  var $cover = $(\"<div>\").addClass(GESTURE_COVER_CLASS).css(\"pointerEvents\", \"none\");\n  eventsEngine.subscribeGlobal($cover, \"dxmousewheel\", function (e) {\n    e.preventDefault();\n  });\n  ready(function () {\n    $cover.appendTo(\"body\");\n  });\n  return function (toggle, cursor) {\n    $cover.css(\"pointerEvents\", toggle ? \"all\" : \"none\");\n    toggle && $cover.css(\"cursor\", cursor);\n  };\n});\n\nvar gestureCover = function (toggle, cursor) {\n  var gestureCoverStrategy = setGestureCover();\n  gestureCoverStrategy(toggle, cursor);\n};\n\nvar GestureEmitter = Emitter.inherit({\n  gesture: true,\n  configure: function (data) {\n    this.getElement().css(\"msTouchAction\", data.immediate ? \"pinch-zoom\" : \"\");\n    this.callBase(data);\n  },\n  allowInterruptionByMouseWheel: function () {\n    return this._stage !== STARTED;\n  },\n  getDirection: function () {\n    return this.direction;\n  },\n  _cancel: function () {\n    this.callBase.apply(this, arguments);\n\n    this._toggleGestureCover(false);\n\n    this._stage = SLEEP;\n  },\n  start: function (e) {\n    if (e._needSkipEvent || eventUtils.needSkipEvent(e)) {\n      this._cancel(e);\n\n      return;\n    }\n\n    this._startEvent = eventUtils.createEvent(e);\n    this._startEventData = eventUtils.eventData(e);\n    this._stage = INITED;\n\n    this._init(e);\n\n    this._setupImmediateTimer();\n  },\n  _setupImmediateTimer: function () {\n    clearTimeout(this._immediateTimer);\n    this._immediateAccepted = false;\n\n    if (!this.immediate) {\n      return;\n    }\n\n    this._immediateTimer = setTimeout(function () {\n      this._immediateAccepted = true;\n    }.bind(this), IMMEDIATE_TIMEOUT);\n  },\n  move: function (e) {\n    if (this._stage === INITED && this._directionConfirmed(e)) {\n      this._stage = STARTED;\n\n      this._resetActiveElement();\n\n      this._toggleGestureCover(true);\n\n      this._clearSelection(e);\n\n      this._adjustStartEvent(e);\n\n      this._start(this._startEvent);\n\n      if (this._stage === SLEEP) {\n        return;\n      }\n\n      this._requestAccept(e);\n\n      this._move(e);\n\n      this._forgetAccept();\n    } else {\n      if (this._stage === STARTED) {\n        this._clearSelection(e);\n\n        this._move(e);\n      }\n    }\n  },\n  _directionConfirmed: function (e) {\n    var touchBoundary = this._getTouchBoundary(e);\n\n    var delta = eventUtils.eventDelta(this._startEventData, eventUtils.eventData(e));\n    var deltaX = abs(delta.x);\n    var deltaY = abs(delta.y);\n\n    var horizontalMove = this._validateMove(touchBoundary, deltaX, deltaY);\n\n    var verticalMove = this._validateMove(touchBoundary, deltaY, deltaX);\n\n    var direction = this.getDirection(e);\n    var bothAccepted = \"both\" === direction && (horizontalMove || verticalMove);\n    var horizontalAccepted = \"horizontal\" === direction && horizontalMove;\n    var verticalAccepted = \"vertical\" === direction && verticalMove;\n    return bothAccepted || horizontalAccepted || verticalAccepted || this._immediateAccepted;\n  },\n  _validateMove: function (touchBoundary, mainAxis, crossAxis) {\n    return mainAxis && mainAxis >= touchBoundary && (this.immediate ? mainAxis >= crossAxis : true);\n  },\n  _getTouchBoundary: function (e) {\n    return this.immediate || eventUtils.isDxMouseWheelEvent(e) ? IMMEDIATE_TOUCH_BOUNDARY : TOUCH_BOUNDARY;\n  },\n  _adjustStartEvent: function (e) {\n    var touchBoundary = this._getTouchBoundary(e);\n\n    var delta = eventUtils.eventDelta(this._startEventData, eventUtils.eventData(e));\n    this._startEvent.pageX += sign(delta.x) * touchBoundary;\n    this._startEvent.pageY += sign(delta.y) * touchBoundary;\n  },\n  _resetActiveElement: function () {\n    if (\"ios\" === devices.real().platform && this.getElement().find(\":focus\").length) {\n      domUtils.resetActiveElement();\n    }\n  },\n  _toggleGestureCover: function (toggle) {\n    this._toggleGestureCoverImpl(toggle);\n  },\n  _toggleGestureCoverImpl: function (toggle) {\n    var isStarted = this._stage === STARTED;\n\n    if (isStarted) {\n      gestureCover(toggle, this.getElement().css(\"cursor\"));\n    }\n  },\n  _clearSelection: function (e) {\n    if (eventUtils.isDxMouseWheelEvent(e) || eventUtils.isTouchEvent(e)) {\n      return;\n    }\n\n    domUtils.clearSelection();\n  },\n  end: function (e) {\n    this._toggleGestureCover(false);\n\n    if (this._stage === STARTED) {\n      this._end(e);\n    } else {\n      if (this._stage === INITED) {\n        this._stop(e);\n      }\n    }\n\n    this._stage = SLEEP;\n  },\n  dispose: function () {\n    clearTimeout(this._immediateTimer);\n    this.callBase.apply(this, arguments);\n\n    this._toggleGestureCover(false);\n  },\n  _init: noop,\n  _start: noop,\n  _move: noop,\n  _stop: noop,\n  _end: noop\n});\nGestureEmitter.initialTouchBoundary = TOUCH_BOUNDARY;\n\nGestureEmitter.touchBoundary = function (newBoundary) {\n  if (isDefined(newBoundary)) {\n    TOUCH_BOUNDARY = newBoundary;\n    return;\n  }\n\n  return TOUCH_BOUNDARY;\n};\n\nmodule.exports = GestureEmitter;","map":null,"metadata":{},"sourceType":"script"}