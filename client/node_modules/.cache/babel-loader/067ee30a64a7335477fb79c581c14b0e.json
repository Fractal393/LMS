{"ast":null,"code":"/**\r\n * DevExtreme (ui/file_uploader.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _guid = require(\"../core/guid\");\n\nvar _guid2 = _interopRequireDefault(_guid);\n\nvar _window = require(\"../core/utils/window\");\n\nvar _events_engine = require(\"../events/core/events_engine\");\n\nvar _events_engine2 = _interopRequireDefault(_events_engine);\n\nvar _component_registrator = require(\"../core/component_registrator\");\n\nvar _component_registrator2 = _interopRequireDefault(_component_registrator);\n\nvar _callbacks = require(\"../core/utils/callbacks\");\n\nvar _callbacks2 = _interopRequireDefault(_callbacks);\n\nvar _type = require(\"../core/utils/type\");\n\nvar _iterator = require(\"../core/utils/iterator\");\n\nvar _extend = require(\"../core/utils/extend\");\n\nvar _array = require(\"../core/utils/array\");\n\nvar _deferred = require(\"../core/utils/deferred\");\n\nvar _ajax = require(\"../core/utils/ajax\");\n\nvar _ajax2 = _interopRequireDefault(_ajax);\n\nvar _editor = require(\"./editor/editor\");\n\nvar _editor2 = _interopRequireDefault(_editor);\n\nvar _button = require(\"./button\");\n\nvar _button2 = _interopRequireDefault(_button);\n\nvar _progress_bar = require(\"./progress_bar\");\n\nvar _progress_bar2 = _interopRequireDefault(_progress_bar);\n\nvar _browser = require(\"../core/utils/browser\");\n\nvar _browser2 = _interopRequireDefault(_browser);\n\nvar _devices = require(\"../core/devices\");\n\nvar _devices2 = _interopRequireDefault(_devices);\n\nvar _utils = require(\"../events/utils\");\n\nvar eventUtils = _interopRequireWildcard(_utils);\n\nvar _click = require(\"../events/click\");\n\nvar _click2 = _interopRequireDefault(_click);\n\nvar _message = require(\"../localization/message\");\n\nvar _message2 = _interopRequireDefault(_message);\n\nvar _themes = require(\"./themes\");\n\nvar _themes2 = _interopRequireDefault(_themes);\n\nfunction _getRequireWildcardCache() {\n  if (\"function\" !== typeof WeakMap) {\n    return null;\n  }\n\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (null === obj || \"object\" !== _typeof(obj) && \"function\" !== typeof obj) {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nfunction _get(target, property, receiver) {\n  if (\"undefined\" !== typeof Reflect && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function (target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) {\n        return;\n      }\n\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n\n    if (null === object) {\n      break;\n    }\n  }\n\n  return object;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (\"function\" !== typeof superClass && null !== superClass) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (superClass) {\n    _setPrototypeOf(subClass, superClass);\n  }\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function (o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var result,\n        Super = _getPrototypeOf(Derived);\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (\"object\" === _typeof(call) || \"function\" === typeof call)) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (void 0 === self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (\"undefined\" === typeof Reflect || !Reflect.construct) {\n    return false;\n  }\n\n  if (Reflect.construct.sham) {\n    return false;\n  }\n\n  if (\"function\" === typeof Proxy) {\n    return true;\n  }\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function (o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar window = (0, _window.getWindow)();\nvar FILEUPLOADER_CLASS = \"dx-fileuploader\";\nvar FILEUPLOADER_EMPTY_CLASS = \"dx-fileuploader-empty\";\nvar FILEUPLOADER_SHOW_FILE_LIST_CLASS = \"dx-fileuploader-show-file-list\";\nvar FILEUPLOADER_DRAGOVER_CLASS = \"dx-fileuploader-dragover\";\nvar FILEUPLOADER_WRAPPER_CLASS = \"dx-fileuploader-wrapper\";\nvar FILEUPLOADER_CONTAINER_CLASS = \"dx-fileuploader-container\";\nvar FILEUPLOADER_CONTENT_CLASS = \"dx-fileuploader-content\";\nvar FILEUPLOADER_INPUT_WRAPPER_CLASS = \"dx-fileuploader-input-wrapper\";\nvar FILEUPLOADER_INPUT_CONTAINER_CLASS = \"dx-fileuploader-input-container\";\nvar FILEUPLOADER_INPUT_LABEL_CLASS = \"dx-fileuploader-input-label\";\nvar FILEUPLOADER_INPUT_CLASS = \"dx-fileuploader-input\";\nvar FILEUPLOADER_FILES_CONTAINER_CLASS = \"dx-fileuploader-files-container\";\nvar FILEUPLOADER_FILE_CONTAINER_CLASS = \"dx-fileuploader-file-container\";\nvar FILEUPLOADER_FILE_INFO_CLASS = \"dx-fileuploader-file-info\";\nvar FILEUPLOADER_FILE_STATUS_MESSAGE_CLASS = \"dx-fileuploader-file-status-message\";\nvar FILEUPLOADER_FILE_CLASS = \"dx-fileuploader-file\";\nvar FILEUPLOADER_FILE_NAME_CLASS = \"dx-fileuploader-file-name\";\nvar FILEUPLOADER_FILE_SIZE_CLASS = \"dx-fileuploader-file-size\";\nvar FILEUPLOADER_BUTTON_CLASS = \"dx-fileuploader-button\";\nvar FILEUPLOADER_BUTTON_CONTAINER_CLASS = \"dx-fileuploader-button-container\";\nvar FILEUPLOADER_CANCEL_BUTTON_CLASS = \"dx-fileuploader-cancel-button\";\nvar FILEUPLOADER_UPLOAD_BUTTON_CLASS = \"dx-fileuploader-upload-button\";\nvar FILEUPLOADER_INVALID_CLASS = \"dx-fileuploader-invalid\";\nvar FILEUPLOADER_AFTER_LOAD_DELAY = 400;\nvar FILEUPLOADER_CHUNK_META_DATA_NAME = \"chunkMetadata\";\n\nvar renderFileUploaderInput = function () {\n  return (0, _renderer2.default)(\"<input>\").attr(\"type\", \"file\");\n};\n\nvar isFormDataSupported = function () {\n  return !!window.FormData;\n};\n\nvar FileUploader = function (_Editor) {\n  _inherits(FileUploader, _Editor);\n\n  var _super = _createSuper(FileUploader);\n\n  function FileUploader() {\n    _classCallCheck(this, FileUploader);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FileUploader, [{\n    key: \"_supportedKeys\",\n    value: function () {\n      var _this = this;\n\n      var click = function (e) {\n        e.preventDefault();\n\n        var $selectButton = _this._selectButton.$element();\n\n        _events_engine2.default.trigger($selectButton, _click2.default.name);\n      };\n\n      return (0, _extend.extend)(_get(_getPrototypeOf(FileUploader.prototype), \"_supportedKeys\", this).call(this), {\n        space: click,\n        enter: click\n      });\n    }\n  }, {\n    key: \"_setOptionsByReference\",\n    value: function () {\n      _get(_getPrototypeOf(FileUploader.prototype), \"_setOptionsByReference\", this).call(this);\n\n      (0, _extend.extend)(this._optionsByReference, {\n        value: true\n      });\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function () {\n      return (0, _extend.extend)(_get(_getPrototypeOf(FileUploader.prototype), \"_getDefaultOptions\", this).call(this), {\n        chunkSize: 0,\n        value: [],\n        selectButtonText: _message2.default.format(\"dxFileUploader-selectFile\"),\n        uploadButtonText: _message2.default.format(\"dxFileUploader-upload\"),\n        labelText: _message2.default.format(\"dxFileUploader-dropFile\"),\n        name: \"files[]\",\n        multiple: false,\n        accept: \"\",\n        uploadUrl: \"/\",\n        allowCanceling: true,\n        showFileList: true,\n        progress: 0,\n        readyToUploadMessage: _message2.default.format(\"dxFileUploader-readyToUpload\"),\n        uploadedMessage: _message2.default.format(\"dxFileUploader-uploaded\"),\n        uploadFailedMessage: _message2.default.format(\"dxFileUploader-uploadFailedMessage\"),\n        uploadMode: \"instantly\",\n        uploadMethod: \"POST\",\n        uploadHeaders: {},\n        onUploadStarted: null,\n        onUploaded: null,\n        onProgress: null,\n        onUploadError: null,\n        onUploadAborted: null,\n        allowedFileExtensions: [],\n        maxFileSize: 0,\n        minFileSize: 0,\n        inputAttr: {},\n        invalidFileExtensionMessage: _message2.default.format(\"dxFileUploader-invalidFileExtension\"),\n        invalidMaxFileSizeMessage: _message2.default.format(\"dxFileUploader-invalidMaxFileSize\"),\n        invalidMinFileSizeMessage: _message2.default.format(\"dxFileUploader-invalidMinFileSize\"),\n        extendSelection: true,\n        validationMessageMode: \"always\",\n        uploadFile: null,\n        uploadChunk: null,\n        abortUpload: null,\n        validationMessageOffset: {\n          h: 0,\n          v: 0\n        },\n        useNativeInputClick: false,\n        useDragOver: true,\n        nativeDropSupported: true,\n        _uploadButtonType: \"normal\"\n      });\n    }\n  }, {\n    key: \"_defaultOptionsRules\",\n    value: function () {\n      return _get(_getPrototypeOf(FileUploader.prototype), \"_defaultOptionsRules\", this).call(this).concat([{\n        device: function () {\n          return \"desktop\" === _devices2.default.real().deviceType && !_devices2.default.isSimulator();\n        },\n        options: {\n          focusStateEnabled: true\n        }\n      }, {\n        device: [{\n          platform: \"android\"\n        }],\n        options: {\n          validationMessageOffset: {\n            v: 0\n          }\n        }\n      }, {\n        device: function () {\n          return \"desktop\" !== _devices2.default.real().deviceType;\n        },\n        options: {\n          useDragOver: false\n        }\n      }, {\n        device: function () {\n          return !isFormDataSupported();\n        },\n        options: {\n          uploadMode: \"useForm\"\n        }\n      }, {\n        device: function () {\n          return _browser2.default.msie || \"desktop\" !== _devices2.default.real().deviceType;\n        },\n        options: {\n          nativeDropSupported: false\n        }\n      }, {\n        device: function () {\n          return _themes2.default.isMaterial();\n        },\n        options: {\n          _uploadButtonType: \"default\"\n        }\n      }]);\n    }\n  }, {\n    key: \"_init\",\n    value: function () {\n      _get(_getPrototypeOf(FileUploader.prototype), \"_init\", this).call(this);\n\n      this._initFileInput();\n\n      this._initLabel();\n\n      this._setUploadStrategy();\n\n      this._createFiles();\n\n      this._createUploadStartedAction();\n\n      this._createUploadedAction();\n\n      this._createProgressAction();\n\n      this._createUploadErrorAction();\n\n      this._createUploadAbortedAction();\n    }\n  }, {\n    key: \"_setUploadStrategy\",\n    value: function () {\n      var strategy = null;\n\n      if (this.option(\"chunkSize\") > 0) {\n        var uploadChunk = this.option(\"uploadChunk\");\n        strategy = uploadChunk && (0, _type.isFunction)(uploadChunk) ? new CustomChunksFileUploadStrategy(this) : new DefaultChunksFileUploadStrategy(this);\n      } else {\n        var uploadFile = this.option(\"uploadFile\");\n        strategy = uploadFile && (0, _type.isFunction)(uploadFile) ? new CustomWholeFileUploadStrategy(this) : new DefaultWholeFileUploadStrategy(this);\n      }\n\n      this._uploadStrategy = strategy;\n    }\n  }, {\n    key: \"_initFileInput\",\n    value: function () {\n      var _this2 = this;\n\n      this._isCustomClickEvent = false;\n\n      if (!this._$fileInput) {\n        this._$fileInput = renderFileUploaderInput();\n\n        _events_engine2.default.on(this._$fileInput, \"change\", this._inputChangeHandler.bind(this));\n\n        _events_engine2.default.on(this._$fileInput, \"click\", function (e) {\n          e.stopPropagation();\n          return _this2.option(\"useNativeInputClick\") || _this2._isCustomClickEvent;\n        });\n      }\n\n      this._$fileInput.prop({\n        multiple: this.option(\"multiple\"),\n        accept: this.option(\"accept\"),\n        tabIndex: -1\n      });\n    }\n  }, {\n    key: \"_inputChangeHandler\",\n    value: function () {\n      if (this._doPreventInputChange) {\n        return;\n      }\n\n      var fileName = this._$fileInput.val().replace(/^.*\\\\/, \"\");\n\n      var files = this._$fileInput.prop(\"files\");\n\n      if (files && !files.length) {\n        return;\n      }\n\n      var value = files ? this._getFiles(files) : [{\n        name: fileName\n      }];\n\n      this._changeValue(value);\n\n      if (\"instantly\" === this.option(\"uploadMode\")) {\n        this._uploadFiles();\n      }\n    }\n  }, {\n    key: \"_shouldFileListBeExtended\",\n    value: function () {\n      return \"useForm\" !== this.option(\"uploadMode\") && this.option(\"extendSelection\") && this.option(\"multiple\");\n    }\n  }, {\n    key: \"_removeDuplicates\",\n    value: function (files, value) {\n      var result = [];\n\n      for (var i = 0; i < value.length; i++) {\n        if (!this._isFileInArray(files, value[i])) {\n          result.push(value[i]);\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_isFileInArray\",\n    value: function (files, file) {\n      for (var i = 0; i < files.length; i++) {\n        var item = files[i];\n\n        if (item.size === file.size && item.name === file.name) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_changeValue\",\n    value: function (value) {\n      var files = this._shouldFileListBeExtended() ? this.option(\"value\").slice() : [];\n\n      if (\"instantly\" !== this.option(\"uploadMode\")) {\n        value = this._removeDuplicates(files, value);\n      }\n\n      this.option(\"value\", files.concat(value));\n    }\n  }, {\n    key: \"_getFiles\",\n    value: function (fileList) {\n      var values = [];\n      (0, _iterator.each)(fileList, function (_, value) {\n        return values.push(value);\n      });\n      return values;\n    }\n  }, {\n    key: \"_initLabel\",\n    value: function () {\n      if (!this._$inputLabel) {\n        this._$inputLabel = (0, _renderer2.default)(\"<div>\");\n      }\n\n      this._$inputLabel.text(this.option(\"labelText\"));\n    }\n  }, {\n    key: \"_focusTarget\",\n    value: function () {\n      return this.$element().find(\".\" + FILEUPLOADER_BUTTON_CLASS);\n    }\n  }, {\n    key: \"_getSubmitElement\",\n    value: function () {\n      return this._$fileInput;\n    }\n  }, {\n    key: \"_initMarkup\",\n    value: function () {\n      _get(_getPrototypeOf(FileUploader.prototype), \"_initMarkup\", this).call(this);\n\n      this.$element().addClass(FILEUPLOADER_CLASS);\n\n      this._renderWrapper();\n\n      this._renderInputWrapper();\n\n      this._renderSelectButton();\n\n      this._renderInputContainer();\n\n      this._renderUploadButton();\n\n      this._preventRecreatingFiles = true;\n    }\n  }, {\n    key: \"_render\",\n    value: function () {\n      this._preventRecreatingFiles = false;\n\n      this._renderDragEvents();\n\n      this._renderFiles();\n\n      _get(_getPrototypeOf(FileUploader.prototype), \"_render\", this).call(this);\n    }\n  }, {\n    key: \"_createFileProgressBar\",\n    value: function (file) {\n      file.progressBar = this._createProgressBar(file.value.size);\n      file.progressBar.$element().appendTo(file.$file);\n\n      this._initStatusMessage(file);\n\n      this._initCancelButton(file);\n    }\n  }, {\n    key: \"_setStatusMessage\",\n    value: function (file, key) {\n      var _this3 = this;\n\n      setTimeout(function () {\n        if (_this3.option(\"showFileList\")) {\n          if (file.$statusMessage) {\n            file.$statusMessage.text(_this3.option(key));\n            file.$statusMessage.css(\"display\", \"\");\n            file.progressBar.$element().remove();\n          }\n        }\n      }, FILEUPLOADER_AFTER_LOAD_DELAY);\n    }\n  }, {\n    key: \"_createFiles\",\n    value: function () {\n      var _this4 = this;\n\n      var value = this.option(\"value\");\n\n      if (this._files && (0 === value.length || !this._shouldFileListBeExtended())) {\n        this._preventFilesUploading(this._files);\n\n        this._files = null;\n      }\n\n      if (!this._files) {\n        this._files = [];\n      }\n\n      (0, _iterator.each)(value.slice(this._files.length), function (_, value) {\n        var file = _this4._createFile(value);\n\n        _this4._validateFile(file);\n\n        _this4._files.push(file);\n      });\n    }\n  }, {\n    key: \"_preventFilesUploading\",\n    value: function (files) {\n      var _this5 = this;\n\n      files.forEach(function (file) {\n        return _this5._uploadStrategy.abortUpload(file);\n      });\n    }\n  }, {\n    key: \"_validateFile\",\n    value: function (file) {\n      file.isValidFileExtension = this._validateFileExtension(file);\n      file.isValidMinSize = this._validateMinFileSize(file);\n      file.isValidMaxSize = this._validateMaxFileSize(file);\n    }\n  }, {\n    key: \"_validateFileExtension\",\n    value: function (file) {\n      var allowedExtensions = this.option(\"allowedFileExtensions\");\n      var fileExtension = file.value.name.substring(file.value.name.lastIndexOf(\".\")).toLowerCase();\n\n      if (0 === allowedExtensions.length) {\n        return true;\n      }\n\n      for (var i = 0; i < allowedExtensions.length; i++) {\n        if (fileExtension === allowedExtensions[i].toLowerCase()) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_validateMaxFileSize\",\n    value: function (file) {\n      var fileSize = file.value.size;\n      var maxFileSize = this.option(\"maxFileSize\");\n      return maxFileSize > 0 ? fileSize <= maxFileSize : true;\n    }\n  }, {\n    key: \"_validateMinFileSize\",\n    value: function (file) {\n      var fileSize = file.value.size;\n      var minFileSize = this.option(\"minFileSize\");\n      return minFileSize > 0 ? fileSize >= minFileSize : true;\n    }\n  }, {\n    key: \"_createUploadStartedAction\",\n    value: function () {\n      this._uploadStartedAction = this._createActionByOption(\"onUploadStarted\");\n    }\n  }, {\n    key: \"_createUploadedAction\",\n    value: function () {\n      this._uploadedAction = this._createActionByOption(\"onUploaded\");\n    }\n  }, {\n    key: \"_createProgressAction\",\n    value: function () {\n      this._progressAction = this._createActionByOption(\"onProgress\");\n    }\n  }, {\n    key: \"_createUploadAbortedAction\",\n    value: function () {\n      this._uploadAbortedAction = this._createActionByOption(\"onUploadAborted\");\n    }\n  }, {\n    key: \"_createUploadErrorAction\",\n    value: function () {\n      this._uploadErrorAction = this._createActionByOption(\"onUploadError\");\n    }\n  }, {\n    key: \"_createFile\",\n    value: function (value) {\n      return {\n        value: value,\n        loadedSize: 0,\n        onProgress: (0, _callbacks2.default)(),\n        onAbort: (0, _callbacks2.default)(),\n        onLoad: (0, _callbacks2.default)(),\n        onError: (0, _callbacks2.default)(),\n        onLoadStart: (0, _callbacks2.default)(),\n        isValidFileExtension: true,\n        isValidMaxSize: true,\n        isValidMinSize: true,\n        isValid: function () {\n          return this.isValidFileExtension && this.isValidMaxSize && this.isValidMinSize;\n        }\n      };\n    }\n  }, {\n    key: \"_renderFiles\",\n    value: function () {\n      var _this6 = this;\n\n      var value = this.option(\"value\");\n\n      if (!this._$filesContainer) {\n        this._$filesContainer = (0, _renderer2.default)(\"<div>\").addClass(FILEUPLOADER_FILES_CONTAINER_CLASS).appendTo(this._$content);\n      } else {\n        if (!this._shouldFileListBeExtended() || 0 === value.length) {\n          this._$filesContainer.empty();\n        }\n      }\n\n      var showFileList = this.option(\"showFileList\");\n\n      if (showFileList) {\n        (0, _iterator.each)(this._files, function (_, file) {\n          if (!file.$file) {\n            _this6._renderFile(file);\n          }\n        });\n      }\n\n      this.$element().toggleClass(FILEUPLOADER_SHOW_FILE_LIST_CLASS, showFileList);\n\n      this._toggleFileUploaderEmptyClassName();\n\n      this._updateFileNameMaxWidth();\n\n      this._$validationMessage && this._$validationMessage.dxOverlay(\"instance\").repaint();\n    }\n  }, {\n    key: \"_renderFile\",\n    value: function (file) {\n      var value = file.value;\n      var $fileContainer = (0, _renderer2.default)(\"<div>\").addClass(FILEUPLOADER_FILE_CONTAINER_CLASS).appendTo(this._$filesContainer);\n\n      this._renderFileButtons(file, $fileContainer);\n\n      file.$file = (0, _renderer2.default)(\"<div>\").addClass(FILEUPLOADER_FILE_CLASS).appendTo($fileContainer);\n      var $fileInfo = (0, _renderer2.default)(\"<div>\").addClass(FILEUPLOADER_FILE_INFO_CLASS).appendTo(file.$file);\n      file.$statusMessage = (0, _renderer2.default)(\"<div>\").addClass(FILEUPLOADER_FILE_STATUS_MESSAGE_CLASS).appendTo(file.$file);\n      (0, _renderer2.default)(\"<div>\").addClass(FILEUPLOADER_FILE_NAME_CLASS).text(value.name).appendTo($fileInfo);\n\n      if ((0, _type.isDefined)(value.size)) {\n        (0, _renderer2.default)(\"<div>\").addClass(FILEUPLOADER_FILE_SIZE_CLASS).text(this._getFileSize(value.size)).appendTo($fileInfo);\n      }\n\n      if (file.isValid()) {\n        file.$statusMessage.text(this.option(\"readyToUploadMessage\"));\n      } else {\n        if (!file.isValidFileExtension) {\n          file.$statusMessage.append(this._createValidationElement(\"invalidFileExtensionMessage\"));\n        }\n\n        if (!file.isValidMaxSize) {\n          file.$statusMessage.append(this._createValidationElement(\"invalidMaxFileSizeMessage\"));\n        }\n\n        if (!file.isValidMinSize) {\n          file.$statusMessage.append(this._createValidationElement(\"invalidMinFileSizeMessage\"));\n        }\n\n        $fileContainer.addClass(FILEUPLOADER_INVALID_CLASS);\n      }\n    }\n  }, {\n    key: \"_createValidationElement\",\n    value: function (key) {\n      return (0, _renderer2.default)(\"<span>\").text(this.option(key));\n    }\n  }, {\n    key: \"_updateFileNameMaxWidth\",\n    value: function () {\n      var cancelButtonsCount = this.option(\"allowCanceling\") && \"useForm\" !== this.option(\"uploadMode\") ? 1 : 0;\n      var uploadButtonsCount = \"useButtons\" === this.option(\"uploadMode\") ? 1 : 0;\n\n      var filesContainerWidth = this._$filesContainer.find(\".\" + FILEUPLOADER_FILE_CONTAINER_CLASS).first().width() || this._$filesContainer.width();\n\n      var $buttonContainer = this._$filesContainer.find(\".\" + FILEUPLOADER_BUTTON_CONTAINER_CLASS).eq(0);\n\n      var buttonsWidth = $buttonContainer.width() * (cancelButtonsCount + uploadButtonsCount);\n\n      var $fileSize = this._$filesContainer.find(\".\" + FILEUPLOADER_FILE_SIZE_CLASS).eq(0);\n\n      var prevFileSize = $fileSize.text();\n      $fileSize.text(\"1000 Mb\");\n      var fileSizeWidth = $fileSize.width();\n      $fileSize.text(prevFileSize);\n\n      this._$filesContainer.find(\".\" + FILEUPLOADER_FILE_NAME_CLASS).css(\"maxWidth\", filesContainerWidth - buttonsWidth - fileSizeWidth);\n    }\n  }, {\n    key: \"_renderFileButtons\",\n    value: function (file, $container) {\n      var $cancelButton = this._getCancelButton(file);\n\n      $cancelButton && $container.append($cancelButton);\n\n      var $uploadButton = this._getUploadButton(file);\n\n      $uploadButton && $container.append($uploadButton);\n    }\n  }, {\n    key: \"_getCancelButton\",\n    value: function (file) {\n      var _this7 = this;\n\n      if (\"useForm\" === this.option(\"uploadMode\")) {\n        return null;\n      }\n\n      file.cancelButton = this._createComponent((0, _renderer2.default)(\"<div>\").addClass(FILEUPLOADER_BUTTON_CLASS + \" \" + FILEUPLOADER_CANCEL_BUTTON_CLASS), _button2.default, {\n        onClick: function () {\n          return _this7._removeFile(file);\n        },\n        icon: \"close\",\n        visible: this.option(\"allowCanceling\"),\n        integrationOptions: {}\n      });\n      return (0, _renderer2.default)(\"<div>\").addClass(FILEUPLOADER_BUTTON_CONTAINER_CLASS).append(file.cancelButton.$element());\n    }\n  }, {\n    key: \"_getUploadButton\",\n    value: function (file) {\n      var _this8 = this;\n\n      if (!file.isValid() || \"useButtons\" !== this.option(\"uploadMode\")) {\n        return null;\n      }\n\n      file.uploadButton = this._createComponent((0, _renderer2.default)(\"<div>\").addClass(FILEUPLOADER_BUTTON_CLASS + \" \" + FILEUPLOADER_UPLOAD_BUTTON_CLASS), _button2.default, {\n        onClick: function () {\n          return _this8._uploadFile(file);\n        },\n        icon: \"upload\"\n      });\n      file.onLoadStart.add(function () {\n        return file.uploadButton.$element().remove();\n      });\n      return (0, _renderer2.default)(\"<div>\").addClass(FILEUPLOADER_BUTTON_CONTAINER_CLASS).append(file.uploadButton.$element());\n    }\n  }, {\n    key: \"_removeFile\",\n    value: function (file) {\n      file.$file.parent().remove();\n\n      this._files.splice((0, _array.inArray)(file, this._files), 1);\n\n      var value = this.option(\"value\").slice();\n      value.splice((0, _array.inArray)(file.value, value), 1);\n      this._preventRecreatingFiles = true;\n      this.option(\"value\", value);\n      this._preventRecreatingFiles = false;\n\n      this._toggleFileUploaderEmptyClassName();\n\n      this._doPreventInputChange = true;\n\n      this._$fileInput.val(\"\");\n\n      this._doPreventInputChange = false;\n    }\n  }, {\n    key: \"_toggleFileUploaderEmptyClassName\",\n    value: function () {\n      this.$element().toggleClass(FILEUPLOADER_EMPTY_CLASS, !this._files.length || this._hasInvalidFile(this._files));\n    }\n  }, {\n    key: \"_hasInvalidFile\",\n    value: function (files) {\n      for (var i = 0; i < files.length; i++) {\n        if (!files[i].isValid()) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_getFileSize\",\n    value: function (size) {\n      var i = 0;\n      var labels = [_message2.default.format(\"dxFileUploader-bytes\"), _message2.default.format(\"dxFileUploader-kb\"), _message2.default.format(\"dxFileUploader-Mb\"), _message2.default.format(\"dxFileUploader-Gb\")];\n      var count = labels.length - 1;\n\n      while (i < count && size >= 1024) {\n        size /= 1024;\n        i++;\n      }\n\n      return Math.round(size) + \" \" + labels[i];\n    }\n  }, {\n    key: \"_renderSelectButton\",\n    value: function () {\n      var $button = (0, _renderer2.default)(\"<div>\").addClass(FILEUPLOADER_BUTTON_CLASS).appendTo(this._$inputWrapper);\n      this._selectButton = this._createComponent($button, _button2.default, {\n        text: this.option(\"selectButtonText\"),\n        focusStateEnabled: false,\n        integrationOptions: {}\n      });\n\n      if (\"desktop\" === _devices2.default.real().deviceType) {\n        this._selectButton.option(\"onClick\", this._selectButtonClickHandler.bind(this));\n      } else {\n        _events_engine2.default.off($button, \"click\");\n\n        _events_engine2.default.on($button, \"click\", this._selectButtonClickHandler.bind(this));\n      }\n    }\n  }, {\n    key: \"_selectButtonClickHandler\",\n    value: function () {\n      if (this.option(\"useNativeInputClick\")) {\n        return;\n      }\n\n      if (this.option(\"disabled\")) {\n        return false;\n      }\n\n      this._isCustomClickEvent = true;\n\n      _events_engine2.default.trigger(this._$fileInput, \"click\");\n\n      this._isCustomClickEvent = false;\n    }\n  }, {\n    key: \"_renderUploadButton\",\n    value: function () {\n      if (\"useButtons\" !== this.option(\"uploadMode\")) {\n        return;\n      }\n\n      var $uploadButton = (0, _renderer2.default)(\"<div>\").addClass(FILEUPLOADER_BUTTON_CLASS).addClass(FILEUPLOADER_UPLOAD_BUTTON_CLASS).appendTo(this._$content);\n      this._uploadButton = this._createComponent($uploadButton, _button2.default, {\n        text: this.option(\"uploadButtonText\"),\n        onClick: this._uploadButtonClickHandler.bind(this),\n        type: this.option(\"_uploadButtonType\"),\n        integrationOptions: {}\n      });\n    }\n  }, {\n    key: \"_uploadButtonClickHandler\",\n    value: function () {\n      this._uploadFiles();\n    }\n  }, {\n    key: \"_shouldDragOverBeRendered\",\n    value: function () {\n      return \"useForm\" !== this.option(\"uploadMode\") || this.option(\"nativeDropSupported\");\n    }\n  }, {\n    key: \"_renderInputContainer\",\n    value: function () {\n      this._$inputContainer = (0, _renderer2.default)(\"<div>\").addClass(FILEUPLOADER_INPUT_CONTAINER_CLASS).appendTo(this._$inputWrapper);\n\n      if (!this._shouldDragOverBeRendered()) {\n        this._$inputContainer.css(\"display\", \"none\");\n      }\n\n      this._$fileInput.addClass(FILEUPLOADER_INPUT_CLASS);\n\n      this._renderInput();\n\n      var labelId = \"dx-fileuploader-input-label-\".concat(new _guid2.default());\n\n      this._$inputLabel.attr(\"id\", labelId).addClass(FILEUPLOADER_INPUT_LABEL_CLASS).appendTo(this._$inputContainer);\n\n      this.setAria(\"labelledby\", labelId, this._$fileInput);\n    }\n  }, {\n    key: \"_renderInput\",\n    value: function () {\n      if (this.option(\"useNativeInputClick\")) {\n        this._selectButton.option(\"template\", this._selectButtonInputTemplate.bind(this));\n      } else {\n        this._$fileInput.appendTo(this._$inputContainer);\n\n        this._selectButton.option(\"template\", \"content\");\n      }\n\n      this._applyInputAttributes(this.option(\"inputAttr\"));\n    }\n  }, {\n    key: \"_selectButtonInputTemplate\",\n    value: function (data, content) {\n      var $content = (0, _renderer2.default)(content);\n      var $text = (0, _renderer2.default)(\"<span>\").addClass(\"dx-button-text\").text(data.text);\n      $content.append($text).append(this._$fileInput);\n      return $content;\n    }\n  }, {\n    key: \"_renderInputWrapper\",\n    value: function () {\n      this._$inputWrapper = (0, _renderer2.default)(\"<div>\").addClass(FILEUPLOADER_INPUT_WRAPPER_CLASS).appendTo(this._$content);\n    }\n  }, {\n    key: \"_renderDragEvents\",\n    value: function () {\n      _events_engine2.default.off(this._$inputWrapper, \".\" + this.NAME);\n\n      if (!this._shouldDragOverBeRendered()) {\n        return;\n      }\n\n      this._dragEventsTargets = [];\n\n      _events_engine2.default.on(this._$inputWrapper, eventUtils.addNamespace(\"dragenter\", this.NAME), this._dragEnterHandler.bind(this));\n\n      _events_engine2.default.on(this._$inputWrapper, eventUtils.addNamespace(\"dragover\", this.NAME), this._dragOverHandler.bind(this));\n\n      _events_engine2.default.on(this._$inputWrapper, eventUtils.addNamespace(\"dragleave\", this.NAME), this._dragLeaveHandler.bind(this));\n\n      _events_engine2.default.on(this._$inputWrapper, eventUtils.addNamespace(\"drop\", this.NAME), this._dropHandler.bind(this));\n    }\n  }, {\n    key: \"_applyInputAttributes\",\n    value: function (customAttributes) {\n      this._$fileInput.attr(customAttributes);\n    }\n  }, {\n    key: \"_useInputForDrop\",\n    value: function () {\n      return this.option(\"nativeDropSupported\") && \"useForm\" === this.option(\"uploadMode\");\n    }\n  }, {\n    key: \"_dragEnterHandler\",\n    value: function (e) {\n      if (this.option(\"disabled\")) {\n        return false;\n      }\n\n      if (!this._useInputForDrop()) {\n        e.preventDefault();\n      }\n\n      this._updateEventTargets(e);\n\n      this.$element().addClass(FILEUPLOADER_DRAGOVER_CLASS);\n    }\n  }, {\n    key: \"_dragOverHandler\",\n    value: function (e) {\n      if (!this._useInputForDrop()) {\n        e.preventDefault();\n      }\n\n      e.originalEvent.dataTransfer.dropEffect = \"copy\";\n    }\n  }, {\n    key: \"_dragLeaveHandler\",\n    value: function (e) {\n      if (!this._useInputForDrop()) {\n        e.preventDefault();\n      }\n\n      this._updateEventTargets(e);\n\n      if (!this._dragEventsTargets.length) {\n        this.$element().removeClass(FILEUPLOADER_DRAGOVER_CLASS);\n      }\n    }\n  }, {\n    key: \"_updateEventTargets\",\n    value: function (e) {\n      var targetIndex = this._dragEventsTargets.indexOf(e.target);\n\n      var isTargetExists = targetIndex !== -1;\n\n      if (\"dragenter\" === e.type) {\n        !isTargetExists && this._dragEventsTargets.push(e.target);\n      } else {\n        isTargetExists && this._dragEventsTargets.splice(targetIndex, 1);\n      }\n    }\n  }, {\n    key: \"_dropHandler\",\n    value: function (e) {\n      this._dragEventsTargets = [];\n      this.$element().removeClass(FILEUPLOADER_DRAGOVER_CLASS);\n\n      if (this._useInputForDrop()) {\n        return;\n      }\n\n      e.preventDefault();\n      var fileList = e.originalEvent.dataTransfer.files;\n\n      var files = this._getFiles(fileList);\n\n      if (!this.option(\"multiple\") && files.length > 1) {\n        return;\n      }\n\n      this._changeValue(this._filterFiles(files));\n\n      if (\"instantly\" === this.option(\"uploadMode\")) {\n        this._uploadFiles();\n      }\n    }\n  }, {\n    key: \"_filterFiles\",\n    value: function (files) {\n      if (!files.length) {\n        return files;\n      }\n\n      var accept = this.option(\"accept\");\n\n      if (!accept.length) {\n        return files;\n      }\n\n      var result = [];\n\n      var allowedTypes = this._getAllowedFileTypes(accept);\n\n      for (var i = 0, n = files.length; i < n; i++) {\n        if (this._isFileTypeAllowed(files[i], allowedTypes)) {\n          result.push(files[i]);\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_getAllowedFileTypes\",\n    value: function (acceptSting) {\n      if (!acceptSting.length) {\n        return [];\n      }\n\n      return acceptSting.split(\",\").map(function (item) {\n        return item.trim();\n      });\n    }\n  }, {\n    key: \"_isFileTypeAllowed\",\n    value: function (file, allowedTypes) {\n      for (var i = 0, n = allowedTypes.length; i < n; i++) {\n        var allowedType = allowedTypes[i];\n\n        if (\".\" === allowedType[0]) {\n          allowedType = allowedType.replace(\".\", \"\\\\.\");\n\n          if (file.name.match(new RegExp(allowedType + \"$\", \"i\"))) {\n            return true;\n          }\n        } else {\n          allowedType = allowedType.replace(\"*\", \"\");\n\n          if (file.type.match(new RegExp(allowedType, \"i\"))) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_renderWrapper\",\n    value: function () {\n      var $wrapper = (0, _renderer2.default)(\"<div>\").addClass(FILEUPLOADER_WRAPPER_CLASS).appendTo(this.$element());\n      var $container = (0, _renderer2.default)(\"<div>\").addClass(FILEUPLOADER_CONTAINER_CLASS).appendTo($wrapper);\n      this._$content = (0, _renderer2.default)(\"<div>\").addClass(FILEUPLOADER_CONTENT_CLASS).appendTo($container);\n    }\n  }, {\n    key: \"_clean\",\n    value: function () {\n      this._$fileInput.detach();\n\n      delete this._$filesContainer;\n\n      if (this._files) {\n        this._files.forEach(function (file) {\n          file.$file = null;\n          file.$statusMessage = null;\n        });\n      }\n\n      _get(_getPrototypeOf(FileUploader.prototype), \"_clean\", this).call(this);\n    }\n  }, {\n    key: \"_uploadFiles\",\n    value: function () {\n      var _this9 = this;\n\n      if (isFormDataSupported()) {\n        (0, _iterator.each)(this._files, function (_, file) {\n          return _this9._uploadFile(file);\n        });\n      }\n    }\n  }, {\n    key: \"_uploadFile\",\n    value: function (file) {\n      this._uploadStrategy.upload(file);\n    }\n  }, {\n    key: \"_updateProgressBar\",\n    value: function (file, loadedFileData) {\n      file.progressBar && file.progressBar.option({\n        value: loadedFileData.loaded,\n        showStatus: true\n      });\n\n      this._progressAction({\n        file: file.value,\n        segmentSize: loadedFileData.currentSegmentSize,\n        bytesLoaded: loadedFileData.loaded,\n        bytesTotal: loadedFileData.total,\n        event: loadedFileData.event,\n        request: file.request\n      });\n    }\n  }, {\n    key: \"_updateTotalProgress\",\n    value: function (totalFilesSize, totalLoadedFilesSize) {\n      var progress = totalFilesSize ? this._getProgressValue(totalLoadedFilesSize / totalFilesSize) : 0;\n      this.option(\"progress\", progress);\n\n      this._setLoadedSize(totalLoadedFilesSize);\n    }\n  }, {\n    key: \"_getProgressValue\",\n    value: function (ratio) {\n      return Math.floor(100 * ratio);\n    }\n  }, {\n    key: \"_initStatusMessage\",\n    value: function (file) {\n      file.$statusMessage.css(\"display\", \"none\");\n    }\n  }, {\n    key: \"_initCancelButton\",\n    value: function (file) {\n      var _this10 = this;\n\n      file.cancelButton.option(\"onClick\", function () {\n        _this10._preventFilesUploading([file]);\n\n        _this10._removeFile(file);\n      });\n\n      var hideCancelButton = function () {\n        setTimeout(function () {\n          file.cancelButton.option({\n            visible: false\n          });\n        }, FILEUPLOADER_AFTER_LOAD_DELAY);\n      };\n\n      file.onLoad.add(hideCancelButton);\n      file.onError.add(hideCancelButton);\n    }\n  }, {\n    key: \"_createProgressBar\",\n    value: function (fileSize) {\n      var _this11 = this;\n\n      return this._createComponent((0, _renderer2.default)(\"<div>\"), _progress_bar2.default, {\n        value: void 0,\n        min: 0,\n        max: fileSize,\n        statusFormat: function (ratio) {\n          return _this11._getProgressValue(ratio) + \"%\";\n        },\n        showStatus: false,\n        statusPosition: \"right\"\n      });\n    }\n  }, {\n    key: \"_getTotalFilesSize\",\n    value: function () {\n      var _this12 = this;\n\n      if (!this._totalFilesSize) {\n        this._totalFilesSize = 0;\n        (0, _iterator.each)(this._files, function (_, file) {\n          _this12._totalFilesSize += file.value.size;\n        });\n      }\n\n      return this._totalFilesSize;\n    }\n  }, {\n    key: \"_getTotalLoadedFilesSize\",\n    value: function () {\n      var _this13 = this;\n\n      if (!this._totalLoadedFilesSize) {\n        this._totalLoadedFilesSize = 0;\n        (0, _iterator.each)(this._files, function (_, file) {\n          _this13._totalLoadedFilesSize += file.loadedSize;\n        });\n      }\n\n      return this._totalLoadedFilesSize;\n    }\n  }, {\n    key: \"_setLoadedSize\",\n    value: function (value) {\n      this._totalLoadedFilesSize = value;\n    }\n  }, {\n    key: \"_recalculateProgress\",\n    value: function () {\n      this._totalFilesSize = 0;\n      this._totalLoadedFilesSize = 0;\n\n      this._updateTotalProgress(this._getTotalFilesSize(), this._getTotalLoadedFilesSize());\n    }\n  }, {\n    key: \"_getValidationMessageTarget\",\n    value: function () {\n      return this._$inputWrapper;\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function (args) {\n      var value = args.value;\n\n      switch (args.name) {\n        case \"height\":\n        case \"width\":\n          this._updateFileNameMaxWidth();\n\n          _get(_getPrototypeOf(FileUploader.prototype), \"_optionChanged\", this).call(this, args);\n\n          break;\n\n        case \"value\":\n          !value.length && this._$fileInput.val(\"\");\n\n          if (!this._preventRecreatingFiles) {\n            this._createFiles();\n\n            this._renderFiles();\n          }\n\n          this._recalculateProgress();\n\n          _get(_getPrototypeOf(FileUploader.prototype), \"_optionChanged\", this).call(this, args);\n\n          break;\n\n        case \"name\":\n          this._initFileInput();\n\n          _get(_getPrototypeOf(FileUploader.prototype), \"_optionChanged\", this).call(this, args);\n\n          break;\n\n        case \"accept\":\n          this._initFileInput();\n\n          break;\n\n        case \"multiple\":\n          this._initFileInput();\n\n          if (!args.value) {\n            this.reset();\n          }\n\n          break;\n\n        case \"selectButtonText\":\n          this._selectButton.option(\"text\", value);\n\n          break;\n\n        case \"uploadButtonText\":\n          this._uploadButton && this._uploadButton.option(\"text\", value);\n          break;\n\n        case \"_uploadButtonType\":\n          this._uploadButton && this._uploadButton.option(\"type\", value);\n          break;\n\n        case \"maxFileSize\":\n        case \"minFileSize\":\n        case \"allowedFileExtensions\":\n        case \"invalidFileExtensionMessage\":\n        case \"invalidMaxFileSizeMessage\":\n        case \"invalidMinFileSizeMessage\":\n        case \"readyToUploadMessage\":\n        case \"uploadedMessage\":\n        case \"uploadFailedMessage\":\n          this._invalidate();\n\n          break;\n\n        case \"labelText\":\n          this._$inputLabel.text(value);\n\n          break;\n\n        case \"showFileList\":\n          if (!this._preventRecreatingFiles) {\n            this._renderFiles();\n          }\n\n          break;\n\n        case \"uploadFile\":\n        case \"uploadChunk\":\n        case \"chunkSize\":\n          this._setUploadStrategy();\n\n          break;\n\n        case \"abortUpload\":\n        case \"uploadUrl\":\n        case \"progress\":\n        case \"uploadMethod\":\n        case \"uploadHeaders\":\n        case \"extendSelection\":\n          break;\n\n        case \"allowCanceling\":\n        case \"uploadMode\":\n          this.reset();\n\n          this._invalidate();\n\n          break;\n\n        case \"onUploadStarted\":\n          this._createUploadStartedAction();\n\n          break;\n\n        case \"onUploaded\":\n          this._createUploadedAction();\n\n          break;\n\n        case \"onProgress\":\n          this._createProgressAction();\n\n          break;\n\n        case \"onUploadError\":\n          this._createUploadErrorAction();\n\n          break;\n\n        case \"onUploadAborted\":\n          this._createUploadAbortedAction();\n\n          break;\n\n        case \"useNativeInputClick\":\n          this._renderInput();\n\n          break;\n\n        case \"useDragOver\":\n          this._renderDragEvents();\n\n          break;\n\n        case \"nativeDropSupported\":\n          this._invalidate();\n\n          break;\n\n        case \"inputAttr\":\n          this._applyInputAttributes(value);\n\n          break;\n\n        default:\n          _get(_getPrototypeOf(FileUploader.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function () {\n      this.option(\"value\", []);\n    }\n  }]);\n\n  return FileUploader;\n}(_editor2.default);\n\nvar FileBlobReader = function () {\n  function FileBlobReader(file, chunkSize) {\n    _classCallCheck(this, FileBlobReader);\n\n    this.file = file;\n    this.chunkSize = chunkSize;\n    this.index = 0;\n  }\n\n  _createClass(FileBlobReader, [{\n    key: \"read\",\n    value: function () {\n      if (!this.file) {\n        return null;\n      }\n\n      var result = this.createBlobResult(this.file, this.index, this.chunkSize);\n\n      if (result.isCompleted) {\n        this.file = null;\n      }\n\n      this.index++;\n      return result;\n    }\n  }, {\n    key: \"createBlobResult\",\n    value: function (file, index, chunkSize) {\n      var currentPosition = index * chunkSize;\n      return {\n        blob: this.sliceFile(file, currentPosition, chunkSize),\n        index: index,\n        isCompleted: currentPosition + chunkSize >= file.size\n      };\n    }\n  }, {\n    key: \"sliceFile\",\n    value: function (file, startPos, length) {\n      if (file.slice) {\n        return file.slice(startPos, startPos + length);\n      }\n\n      if (file.webkitSlice) {\n        return file.webkitSlice(startPos, startPos + length);\n      }\n\n      return null;\n    }\n  }]);\n\n  return FileBlobReader;\n}();\n\nvar FileUploadStrategyBase = function () {\n  function FileUploadStrategyBase(fileUploader) {\n    _classCallCheck(this, FileUploadStrategyBase);\n\n    this.fileUploader = fileUploader;\n  }\n\n  _createClass(FileUploadStrategyBase, [{\n    key: \"upload\",\n    value: function (file) {\n      if (file.isValid() && !file.uploadStarted) {\n        this._prepareFileBeforeUpload(file);\n\n        this._uploadCore(file);\n      }\n    }\n  }, {\n    key: \"abortUpload\",\n    value: function abortUpload(file) {\n      var _this14 = this;\n\n      if (file._isError || file._isLoaded || file.isAborted) {\n        return;\n      }\n\n      file.request && file.request.abort();\n      file.isAborted = true;\n\n      if (this._isCustomAbortUpload()) {\n        var abortUpload = this.fileUploader.option(\"abortUpload\");\n\n        var arg = this._createAbortUploadArgument(file);\n\n        var deferred = null;\n\n        try {\n          var result = abortUpload(file.value, arg);\n          deferred = (0, _deferred.fromPromise)(result);\n        } catch (error) {\n          deferred = new _deferred.Deferred().reject(error).promise();\n        }\n\n        deferred.done(function () {\n          return file.onAbort.fire();\n        }).fail(function (error) {\n          return _this14._handleFileError(file, error);\n        });\n      }\n    }\n  }, {\n    key: \"_createAbortUploadArgument\",\n    value: function (file) {}\n  }, {\n    key: \"_uploadCore\",\n    value: function (file) {}\n  }, {\n    key: \"_isCustomAbortUpload\",\n    value: function () {\n      var callback = this.fileUploader.option(\"abortUpload\");\n      return callback && (0, _type.isFunction)(callback);\n    }\n  }, {\n    key: \"_handleFileError\",\n    value: function (file, error) {\n      file._isError = true;\n      file.onError.fire(error);\n    }\n  }, {\n    key: \"_prepareFileBeforeUpload\",\n    value: function (file) {\n      if (file.$file) {\n        this.fileUploader._createFileProgressBar(file);\n      }\n\n      file.onLoadStart.add(this._onUploadStarted.bind(this, file));\n      file.onLoad.add(this._onLoadedHandler.bind(this, file));\n      file.onError.add(this._onErrorHandler.bind(this, file));\n      file.onAbort.add(this._onAbortHandler.bind(this, file));\n      file.onProgress.add(this._onProgressHandler.bind(this, file));\n    }\n  }, {\n    key: \"_isStatusError\",\n    value: function (status) {\n      return 400 <= status && status < 500 || 500 <= status && status < 600;\n    }\n  }, {\n    key: \"_onUploadStarted\",\n    value: function (file, e) {\n      file.uploadStarted = true;\n\n      this.fileUploader._uploadStartedAction({\n        file: file.value,\n        event: e,\n        request: file.request\n      });\n    }\n  }, {\n    key: \"_onAbortHandler\",\n    value: function (file, e) {\n      this.fileUploader._uploadAbortedAction({\n        file: file.value,\n        event: e,\n        request: file.request\n      });\n    }\n  }, {\n    key: \"_onErrorHandler\",\n    value: function (file, error) {\n      this.fileUploader._setStatusMessage(file, \"uploadFailedMessage\");\n\n      this.fileUploader._uploadErrorAction({\n        file: file.value,\n        event: void 0,\n        request: file.request,\n        error: error\n      });\n    }\n  }, {\n    key: \"_onLoadedHandler\",\n    value: function (file, e) {\n      file._isLoaded = true;\n\n      this.fileUploader._setStatusMessage(file, \"uploadedMessage\");\n\n      this.fileUploader._uploadedAction({\n        file: file.value,\n        event: e,\n        request: file.request\n      });\n    }\n  }, {\n    key: \"_onProgressHandler\",\n    value: function (file, e) {\n      if (file) {\n        var totalFilesSize = this.fileUploader._getTotalFilesSize();\n\n        var totalLoadedFilesSize = this.fileUploader._getTotalLoadedFilesSize();\n\n        var loadedSize = Math.min(e.loaded, file.value.size);\n        var segmentSize = loadedSize - file.loadedSize;\n        file.loadedSize = loadedSize;\n\n        this.fileUploader._updateTotalProgress(totalFilesSize, totalLoadedFilesSize + segmentSize);\n\n        this.fileUploader._updateProgressBar(file, this._getLoadedData(loadedSize, e.total, segmentSize, e));\n      }\n    }\n  }, {\n    key: \"_getLoadedData\",\n    value: function (loaded, total, currentSegmentSize, event) {\n      return {\n        loaded: loaded,\n        total: total,\n        currentSegmentSize: currentSegmentSize\n      };\n    }\n  }]);\n\n  return FileUploadStrategyBase;\n}();\n\nvar ChunksFileUploadStrategyBase = function (_FileUploadStrategyBa) {\n  _inherits(ChunksFileUploadStrategyBase, _FileUploadStrategyBa);\n\n  var _super2 = _createSuper(ChunksFileUploadStrategyBase);\n\n  function ChunksFileUploadStrategyBase(fileUploader) {\n    var _this15;\n\n    _classCallCheck(this, ChunksFileUploadStrategyBase);\n\n    _this15 = _super2.call(this, fileUploader);\n    _this15.chunkSize = _this15.fileUploader.option(\"chunkSize\");\n    return _this15;\n  }\n\n  _createClass(ChunksFileUploadStrategyBase, [{\n    key: \"_uploadCore\",\n    value: function (file) {\n      var realFile = file.value;\n      var chunksData = {\n        name: realFile.name,\n        loadedBytes: 0,\n        type: realFile.type,\n        blobReader: new FileBlobReader(realFile, this.chunkSize),\n        guid: new _guid2.default(),\n        fileSize: realFile.size,\n        count: Math.ceil(realFile.size / this.chunkSize),\n        customData: {}\n      };\n      file.chunksData = chunksData;\n\n      this._sendChunk(file, chunksData);\n    }\n  }, {\n    key: \"_sendChunk\",\n    value: function (file, chunksData) {\n      var _this16 = this;\n\n      var chunk = chunksData.blobReader.read();\n      chunksData.currentChunk = chunk;\n\n      if (chunk) {\n        this._sendChunkCore(file, chunksData, chunk).done(function () {\n          if (file.isAborted) {\n            return;\n          }\n\n          chunksData.loadedBytes += chunk.blob.size;\n          file.onProgress.fire({\n            loaded: chunksData.loadedBytes,\n            total: file.value.size\n          });\n\n          if (chunk.isCompleted) {\n            file.onLoad.fire();\n          }\n\n          setTimeout(function () {\n            return _this16._sendChunk(file, chunksData);\n          });\n        }).fail(function (error) {\n          if (_this16._shouldHandleError(error)) {\n            _this16._handleFileError(file, error);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"_sendChunkCore\",\n    value: function (file, chunksData, chunk) {}\n  }, {\n    key: \"_shouldHandleError\",\n    value: function (error) {}\n  }, {\n    key: \"_tryRaiseStartLoad\",\n    value: function (file) {\n      if (!file.isStartLoad) {\n        file.isStartLoad = true;\n        file.onLoadStart.fire();\n      }\n    }\n  }, {\n    key: \"_getEvent\",\n    value: function (e) {\n      return null;\n    }\n  }]);\n\n  return ChunksFileUploadStrategyBase;\n}(FileUploadStrategyBase);\n\nvar DefaultChunksFileUploadStrategy = function (_ChunksFileUploadStra) {\n  _inherits(DefaultChunksFileUploadStrategy, _ChunksFileUploadStra);\n\n  var _super3 = _createSuper(DefaultChunksFileUploadStrategy);\n\n  function DefaultChunksFileUploadStrategy() {\n    _classCallCheck(this, DefaultChunksFileUploadStrategy);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(DefaultChunksFileUploadStrategy, [{\n    key: \"_sendChunkCore\",\n    value: function (file, chunksData, chunk) {\n      var _this17 = this;\n\n      return _ajax2.default.sendRequest({\n        url: this.fileUploader.option(\"uploadUrl\"),\n        method: this.fileUploader.option(\"uploadMethod\"),\n        headers: this.fileUploader.option(\"uploadHeaders\"),\n        beforeSend: function (xhr) {\n          file.request = xhr;\n        },\n        upload: {\n          onloadstart: function () {\n            return _this17._tryRaiseStartLoad(file);\n          },\n          onabort: function () {\n            return file.onAbort.fire();\n          }\n        },\n        data: this._createFormData({\n          fileName: chunksData.name,\n          blobName: this.fileUploader.option(\"name\"),\n          blob: chunk.blob,\n          index: chunk.index,\n          count: chunksData.count,\n          type: chunksData.type,\n          guid: chunksData.guid,\n          size: chunksData.fileSize\n        })\n      });\n    }\n  }, {\n    key: \"_shouldHandleError\",\n    value: function (e) {\n      return this._isStatusError(e.status);\n    }\n  }, {\n    key: \"_createFormData\",\n    value: function (options) {\n      var formData = new window.FormData();\n      formData.append(options.blobName, options.blob);\n      formData.append(FILEUPLOADER_CHUNK_META_DATA_NAME, JSON.stringify({\n        FileName: options.fileName,\n        Index: options.index,\n        TotalCount: options.count,\n        FileSize: options.size,\n        FileType: options.type,\n        FileGuid: options.guid\n      }));\n      return formData;\n    }\n  }]);\n\n  return DefaultChunksFileUploadStrategy;\n}(ChunksFileUploadStrategyBase);\n\nvar CustomChunksFileUploadStrategy = function (_ChunksFileUploadStra2) {\n  _inherits(CustomChunksFileUploadStrategy, _ChunksFileUploadStra2);\n\n  var _super4 = _createSuper(CustomChunksFileUploadStrategy);\n\n  function CustomChunksFileUploadStrategy() {\n    _classCallCheck(this, CustomChunksFileUploadStrategy);\n\n    return _super4.apply(this, arguments);\n  }\n\n  _createClass(CustomChunksFileUploadStrategy, [{\n    key: \"_sendChunkCore\",\n    value: function (file, chunksData) {\n      this._tryRaiseStartLoad(file);\n\n      var chunksInfo = this._createChunksInfo(chunksData);\n\n      var uploadChunk = this.fileUploader.option(\"uploadChunk\");\n\n      try {\n        var result = uploadChunk(file.value, chunksInfo);\n        return (0, _deferred.fromPromise)(result);\n      } catch (error) {\n        return new _deferred.Deferred().reject(error).promise();\n      }\n    }\n  }, {\n    key: \"_createAbortUploadArgument\",\n    value: function (file) {\n      return this._createChunksInfo(file.chunksData);\n    }\n  }, {\n    key: \"_shouldHandleError\",\n    value: function (e) {\n      return true;\n    }\n  }, {\n    key: \"_createChunksInfo\",\n    value: function (chunksData) {\n      return {\n        bytesUploaded: chunksData.loadedBytes,\n        chunkCount: chunksData.count,\n        customData: chunksData.customData,\n        chunkBlob: chunksData.currentChunk.blob,\n        chunkIndex: chunksData.currentChunk.index\n      };\n    }\n  }]);\n\n  return CustomChunksFileUploadStrategy;\n}(ChunksFileUploadStrategyBase);\n\nvar WholeFileUploadStrategyBase = function (_FileUploadStrategyBa2) {\n  _inherits(WholeFileUploadStrategyBase, _FileUploadStrategyBa2);\n\n  var _super5 = _createSuper(WholeFileUploadStrategyBase);\n\n  function WholeFileUploadStrategyBase() {\n    _classCallCheck(this, WholeFileUploadStrategyBase);\n\n    return _super5.apply(this, arguments);\n  }\n\n  _createClass(WholeFileUploadStrategyBase, [{\n    key: \"_uploadCore\",\n    value: function (file) {\n      var _this18 = this;\n\n      file.loadedSize = 0;\n\n      this._uploadFile(file).done(function () {\n        if (!file.isAborted) {\n          file.onLoad.fire();\n        }\n      }).fail(function (error) {\n        if (_this18._shouldHandleError(file, error)) {\n          _this18._handleFileError(file, error);\n        }\n      });\n    }\n  }, {\n    key: \"_uploadFile\",\n    value: function (file) {}\n  }, {\n    key: \"_shouldHandleError\",\n    value: function (file, e) {}\n  }, {\n    key: \"_handleProgress\",\n    value: function (file, e) {\n      if (file._isError) {\n        return;\n      }\n\n      file._isProgressStarted = true;\n      file.onProgress.fire(e);\n    }\n  }, {\n    key: \"_getLoadedData\",\n    value: function (loaded, total, segmentSize, event) {\n      var result = _get(_getPrototypeOf(WholeFileUploadStrategyBase.prototype), \"_getLoadedData\", this).call(this, loaded, total, segmentSize, event);\n\n      result.event = event;\n      return result;\n    }\n  }]);\n\n  return WholeFileUploadStrategyBase;\n}(FileUploadStrategyBase);\n\nvar DefaultWholeFileUploadStrategy = function (_WholeFileUploadStrat) {\n  _inherits(DefaultWholeFileUploadStrategy, _WholeFileUploadStrat);\n\n  var _super6 = _createSuper(DefaultWholeFileUploadStrategy);\n\n  function DefaultWholeFileUploadStrategy() {\n    _classCallCheck(this, DefaultWholeFileUploadStrategy);\n\n    return _super6.apply(this, arguments);\n  }\n\n  _createClass(DefaultWholeFileUploadStrategy, [{\n    key: \"_uploadFile\",\n    value: function (file) {\n      var _this19 = this;\n\n      return _ajax2.default.sendRequest({\n        url: this.fileUploader.option(\"uploadUrl\"),\n        method: this.fileUploader.option(\"uploadMethod\"),\n        headers: this.fileUploader.option(\"uploadHeaders\"),\n        beforeSend: function (xhr) {\n          file.request = xhr;\n        },\n        upload: {\n          onprogress: function (e) {\n            return _this19._handleProgress(file, e);\n          },\n          onloadstart: function () {\n            return file.onLoadStart.fire();\n          },\n          onabort: function () {\n            return file.onAbort.fire();\n          }\n        },\n        data: this._createFormData(this.fileUploader.option(\"name\"), file.value)\n      });\n    }\n  }, {\n    key: \"_shouldHandleError\",\n    value: function (file, e) {\n      return this._isStatusError(e.status) || !file._isProgressStarted;\n    }\n  }, {\n    key: \"_createFormData\",\n    value: function (fieldName, fieldValue) {\n      var formData = new window.FormData();\n      formData.append(fieldName, fieldValue, fieldValue.name);\n      return formData;\n    }\n  }]);\n\n  return DefaultWholeFileUploadStrategy;\n}(WholeFileUploadStrategyBase);\n\nvar CustomWholeFileUploadStrategy = function (_WholeFileUploadStrat2) {\n  _inherits(CustomWholeFileUploadStrategy, _WholeFileUploadStrat2);\n\n  var _super7 = _createSuper(CustomWholeFileUploadStrategy);\n\n  function CustomWholeFileUploadStrategy() {\n    _classCallCheck(this, CustomWholeFileUploadStrategy);\n\n    return _super7.apply(this, arguments);\n  }\n\n  _createClass(CustomWholeFileUploadStrategy, [{\n    key: \"_uploadFile\",\n    value: function (file) {\n      var _this20 = this;\n\n      file.onLoadStart.fire();\n\n      var progressCallback = function (loadedBytes) {\n        var arg = {\n          loaded: loadedBytes,\n          total: file.size\n        };\n\n        _this20._handleProgress(file, arg);\n      };\n\n      var uploadFile = this.fileUploader.option(\"uploadFile\");\n\n      try {\n        var result = uploadFile(file.value, progressCallback);\n        return (0, _deferred.fromPromise)(result);\n      } catch (error) {\n        return new _deferred.Deferred().reject(error).promise();\n      }\n    }\n  }, {\n    key: \"_shouldHandleError\",\n    value: function (file, e) {\n      return true;\n    }\n  }]);\n\n  return CustomWholeFileUploadStrategy;\n}(WholeFileUploadStrategyBase);\n\n(0, _component_registrator2.default)(\"dxFileUploader\", FileUploader);\nmodule.exports = FileUploader;\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}