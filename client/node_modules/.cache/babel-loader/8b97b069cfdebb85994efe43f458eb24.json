{"ast":null,"code":"/**\r\n * DevExtreme (file_management/provider_base.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _data = require(\"../core/utils/data\");\n\nvar _common = require(\"../core/utils/common\");\n\nvar _date_serialization = require(\"../core/utils/date_serialization\");\n\nvar _iterator = require(\"../core/utils/iterator\");\n\nvar _type = require(\"../core/utils/type\");\n\nvar _deferred = require(\"../core/utils/deferred\");\n\nvar _file_system_item = require(\"./file_system_item\");\n\nvar _file_system_item2 = _interopRequireDefault(_file_system_item);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nvar DEFAULT_FILE_UPLOAD_CHUNK_SIZE = 2e5;\n\nvar FileSystemProviderBase = function () {\n  function FileSystemProviderBase(options) {\n    _classCallCheck(this, FileSystemProviderBase);\n\n    options = (0, _common.ensureDefined)(options, {});\n    this._keyGetter = (0, _data.compileGetter)(this._getKeyExpr(options));\n    this._nameGetter = (0, _data.compileGetter)(this._getNameExpr(options));\n    this._isDirGetter = (0, _data.compileGetter)(this._getIsDirExpr(options));\n    this._sizeGetter = (0, _data.compileGetter)(this._getSizeExpr(options));\n    this._dateModifiedGetter = (0, _data.compileGetter)(this._getDateModifiedExpr(options));\n    this._thumbnailGetter = (0, _data.compileGetter)(options.thumbnailExpr || \"thumbnail\");\n  }\n\n  _createClass(FileSystemProviderBase, [{\n    key: \"getItems\",\n    value: function (parentDirectory) {\n      return [];\n    }\n  }, {\n    key: \"renameItem\",\n    value: function (item, name) {}\n  }, {\n    key: \"createDirectory\",\n    value: function (parentDirectory, name) {}\n  }, {\n    key: \"deleteItems\",\n    value: function (items) {}\n  }, {\n    key: \"moveItems\",\n    value: function (items, destinationDirectory) {}\n  }, {\n    key: \"copyItems\",\n    value: function (items, destinationDirectory) {}\n  }, {\n    key: \"uploadFileChunk\",\n    value: function (fileData, chunksInfo, destinationDirectory) {}\n  }, {\n    key: \"abortFileUpload\",\n    value: function (fileData, chunksInfo, destinationDirectory) {}\n  }, {\n    key: \"downloadItems\",\n    value: function (items) {}\n  }, {\n    key: \"getItemsContent\",\n    value: function (items) {}\n  }, {\n    key: \"getFileUploadChunkSize\",\n    value: function () {\n      return DEFAULT_FILE_UPLOAD_CHUNK_SIZE;\n    }\n  }, {\n    key: \"_getItemsByType\",\n    value: function (path, folders) {\n      return this.getItems(path).filter(function (item) {\n        return item.isDirectory === folders;\n      });\n    }\n  }, {\n    key: \"_convertDataObjectsToFileItems\",\n    value: function (entries, pathInfo) {\n      var _this = this;\n\n      var result = [];\n      (0, _iterator.each)(entries, function (_, entry) {\n        var fileItem = _this._createFileItem(entry, pathInfo);\n\n        result.push(fileItem);\n      });\n      return result;\n    }\n  }, {\n    key: \"_createFileItem\",\n    value: function (dataObj, pathInfo) {\n      var fileItem = new _file_system_item2.default(pathInfo, this._nameGetter(dataObj), !!this._isDirGetter(dataObj));\n      fileItem.size = this._sizeGetter(dataObj);\n\n      if (void 0 === fileItem.size) {\n        fileItem.size = 0;\n      }\n\n      fileItem.dateModified = (0, _date_serialization.deserializeDate)(this._dateModifiedGetter(dataObj));\n\n      if (void 0 === fileItem.dateModified) {\n        fileItem.dateModified = new Date();\n      }\n\n      if (fileItem.isDirectory) {\n        fileItem.hasSubDirectories = this._hasSubDirs(dataObj);\n      }\n\n      fileItem.key = this._keyGetter(dataObj);\n\n      if (!fileItem.key) {\n        fileItem.key = fileItem.relativeName;\n      }\n\n      fileItem.thumbnail = this._thumbnailGetter(dataObj) || \"\";\n      fileItem.dataItem = dataObj;\n      return fileItem;\n    }\n  }, {\n    key: \"_hasSubDirs\",\n    value: function (dataObj) {\n      return true;\n    }\n  }, {\n    key: \"_getKeyExpr\",\n    value: function (options) {\n      return options.keyExpr || this._defaultKeyExpr;\n    }\n  }, {\n    key: \"_defaultKeyExpr\",\n    value: function (fileItem) {\n      if (2 === arguments.length) {\n        fileItem.__KEY__ = arguments[1];\n        return;\n      }\n\n      return Object.prototype.hasOwnProperty.call(fileItem, \"__KEY__\") ? fileItem.__KEY__ : null;\n    }\n  }, {\n    key: \"_getNameExpr\",\n    value: function (options) {\n      return options.nameExpr || \"name\";\n    }\n  }, {\n    key: \"_getIsDirExpr\",\n    value: function (options) {\n      return options.isDirectoryExpr || \"isDirectory\";\n    }\n  }, {\n    key: \"_getSizeExpr\",\n    value: function (options) {\n      return options.sizeExpr || \"size\";\n    }\n  }, {\n    key: \"_getDateModifiedExpr\",\n    value: function (options) {\n      return options.dateModifiedExpr || \"dateModified\";\n    }\n  }, {\n    key: \"_executeActionAsDeferred\",\n    value: function (action, keepResult) {\n      var deferred = new _deferred.Deferred();\n\n      try {\n        var result = action();\n\n        if ((0, _type.isPromise)(result)) {\n          (0, _deferred.fromPromise)(result).done(function (userResult) {\n            return deferred.resolve(keepResult && userResult || void 0);\n          }).fail(function (error) {\n            return deferred.reject(error);\n          });\n        } else {\n          deferred.resolve(keepResult && result || void 0);\n        }\n      } catch (error) {\n        return deferred.reject(error);\n      }\n\n      return deferred.promise();\n    }\n  }]);\n\n  return FileSystemProviderBase;\n}();\n\nmodule.exports = FileSystemProviderBase;","map":null,"metadata":{},"sourceType":"script"}