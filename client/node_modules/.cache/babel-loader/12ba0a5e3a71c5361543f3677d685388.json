{"ast":null,"code":"import { EventHandler, extend, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { remove, isBlazor, updateBlazorTemplate } from '@syncfusion/ej2-base';\nimport { Toolbar as tool } from '@syncfusion/ej2-navigations';\nimport * as events from '../base/constant';\nimport { templateCompiler, appendChildren } from '../base/util';\nimport { SearchBox } from '../services/focus-strategy';\n/**\n * The `Toolbar` module is used to handle ToolBar actions.\n * @hidden\n */\n\nvar Toolbar =\n/** @class */\nfunction () {\n  function Toolbar(parent, serviceLocator) {\n    this.predefinedItems = {};\n    this.items = ['Add', 'Edit', 'Update', 'Delete', 'Cancel', 'Print', 'Search', 'ColumnChooser', 'PdfExport', 'ExcelExport', 'CsvExport', 'WordExport'];\n    this.parent = parent;\n    this.gridID = parent.element.id;\n    this.serviceLocator = serviceLocator;\n    this.addEventListener();\n  }\n\n  Toolbar.prototype.render = function () {\n    this.l10n = this.serviceLocator.getService('localization');\n    var preItems = ['Add', 'Edit', 'Update', 'Delete', 'Cancel', 'Print', 'PdfExport', 'ExcelExport', 'WordExport', 'CsvExport'];\n\n    for (var _i = 0, preItems_1 = preItems; _i < preItems_1.length; _i++) {\n      var item = preItems_1[_i];\n      var itemStr = item.toLowerCase();\n      var localeName = itemStr[0].toUpperCase() + itemStr.slice(1);\n      this.predefinedItems[item] = {\n        id: this.gridID + '_' + itemStr,\n        prefixIcon: 'e-' + itemStr,\n        text: this.l10n.getConstant(localeName),\n        tooltipText: this.l10n.getConstant(localeName)\n      };\n    }\n\n    this.predefinedItems.Search = {\n      id: this.gridID + '_search',\n      tooltipText: this.l10n.getConstant('Search'),\n      align: 'Right',\n      cssClass: 'e-search-wrapper',\n      type: 'Input'\n    };\n    this.predefinedItems.ColumnChooser = {\n      id: this.gridID + '_' + 'columnchooser',\n      cssClass: 'e-cc e-ccdiv e-cc-toolbar',\n      suffixIcon: 'e-' + 'columnchooser-btn',\n      text: this.l10n.getConstant('Columnchooser'),\n      tooltipText: this.l10n.getConstant('Columnchooser'),\n      align: 'Right'\n    };\n    this.createToolbar();\n  };\n  /**\n   * Gets the toolbar of the Grid.\n   * @return {Element}\n   * @hidden\n   */\n\n\n  Toolbar.prototype.getToolbar = function () {\n    return this.toolbar.element;\n  };\n  /**\n   * Destroys the ToolBar.\n   * @method destroy\n   * @return {void}\n   */\n\n\n  Toolbar.prototype.destroy = function () {\n    if (this.toolbar && !this.toolbar.isDestroyed) {\n      if (!this.toolbar.element) {\n        this.parent.destroyTemplate(['toolbarTemplate']);\n      } else {\n        this.toolbar.destroy();\n      }\n\n      this.unWireEvent();\n      this.removeEventListener();\n      remove(this.element);\n    }\n  };\n\n  Toolbar.prototype.bindSearchEvents = function () {\n    this.searchElement = this.element.querySelector('#' + this.gridID + '_searchbar');\n    this.wireEvent();\n    this.refreshToolbarItems();\n\n    if (this.parent.searchSettings) {\n      this.updateSearchBox();\n    }\n  };\n\n  Toolbar.prototype.toolbarCreated = function () {\n    if (this.element.querySelector('.e-search-wrapper')) {\n      this.element.querySelector('.e-search-wrapper').innerHTML = '<div class=\"e-input-group e-search\" role=\"search\">\\\n        <input id=\"' + this.gridID + '_searchbar\" class=\"e-input\" name=\"input\" type=\"search\" \\\n        placeholder= \\\"' + this.l10n.getConstant('Search') + '\\\"/>\\\n        <span id=\"' + this.gridID + '_searchbutton\" class=\"e-input-group-icon e-search-icon e-icons\" \\\n        tabindex=\"-1\" title=\"' + this.l10n.getConstant('Search') + '\" aria-label= \"search\"></span> \\\n        </div>';\n    }\n\n    this.bindSearchEvents();\n  };\n\n  Toolbar.prototype.createToolbar = function () {\n    var items = this.getItems();\n    this.toolbar = new tool({\n      items: items,\n      clicked: this.toolbarClickHandler.bind(this),\n      enablePersistence: this.parent.enablePersistence,\n      enableRtl: this.parent.enableRtl,\n      created: this.toolbarCreated.bind(this)\n    });\n    var isStringTemplate = 'isStringTemplate';\n    this.toolbar[isStringTemplate] = true;\n    var viewStr = 'viewContainerRef';\n    var registerTemp = 'registeredTemplate';\n\n    if (this.parent[viewStr]) {\n      this.toolbar[registerTemp] = {};\n      this.toolbar[viewStr] = this.parent[viewStr];\n    }\n\n    this.element = this.parent.createElement('div', {\n      id: this.gridID + '_toolbarItems'\n    });\n\n    if (this.parent.toolbarTemplate) {\n      if (!isBlazor() && typeof this.parent.toolbarTemplate === 'string') {\n        this.toolbar.appendTo(this.parent.toolbarTemplate);\n        this.element = this.toolbar.element;\n      } else {\n        if (isBlazor()) {\n          var tempID = this.parent.element.id + 'toolbarTemplate';\n          var item = appendChildren(this.element, templateCompiler(this.parent.toolbarTemplate)({}, this.parent, 'toolbarTemplate', tempID));\n          var items_1 = this.getItem(item);\n          this.toolbar.items.push(items_1);\n          this.toolbar.appendTo(this.element);\n          updateBlazorTemplate(this.parent.element.id + 'toolbarTemplate', 'ToolbarTemplate', this.parent);\n        } else {\n          appendChildren(this.element, templateCompiler(this.parent.toolbarTemplate)({}, this.parent, 'toolbarTemplate'));\n        }\n      }\n    } else {\n      this.toolbar.appendTo(this.element);\n    }\n\n    this.parent.element.insertBefore(this.element, this.parent.getHeaderContent());\n  };\n\n  Toolbar.prototype.refreshToolbarItems = function (args) {\n    var gObj = this.parent;\n    var enableItems = [];\n    var disableItems = [];\n    var edit = gObj.editSettings;\n    var hasData = gObj.currentViewData && gObj.currentViewData.length;\n    edit.allowAdding ? enableItems.push(this.gridID + '_add') : disableItems.push(this.gridID + '_add');\n    edit.allowEditing && hasData ? enableItems.push(this.gridID + '_edit') : disableItems.push(this.gridID + '_edit');\n    edit.allowDeleting && hasData ? enableItems.push(this.gridID + '_delete') : disableItems.push(this.gridID + '_delete');\n\n    if (gObj.editSettings.mode === 'Batch') {\n      if (gObj.element.querySelectorAll('.e-updatedtd').length && (edit.allowAdding || edit.allowEditing)) {\n        enableItems.push(this.gridID + '_update');\n        enableItems.push(this.gridID + '_cancel');\n      } else {\n        disableItems.push(this.gridID + '_update');\n        disableItems.push(this.gridID + '_cancel');\n      }\n    } else {\n      if (gObj.isEdit && (edit.allowAdding || edit.allowEditing)) {\n        enableItems = [this.gridID + '_update', this.gridID + '_cancel'];\n        disableItems = [this.gridID + '_add', this.gridID + '_edit', this.gridID + '_delete'];\n      } else {\n        disableItems.push(this.gridID + '_update');\n        disableItems.push(this.gridID + '_cancel');\n      }\n    }\n\n    this.enableItems(enableItems, true);\n    this.enableItems(disableItems, false);\n  };\n\n  Toolbar.prototype.getItems = function () {\n    var items = [];\n    var toolbarItems = this.parent.toolbar || [];\n\n    if (typeof this.parent.toolbar === 'string') {\n      return [];\n    }\n\n    for (var _i = 0, toolbarItems_1 = toolbarItems; _i < toolbarItems_1.length; _i++) {\n      var item = toolbarItems_1[_i];\n\n      switch (typeof item) {\n        case 'number':\n          items.push(this.getItemObject(this.items[item]));\n          break;\n\n        case 'string':\n          items.push(this.getItemObject(item));\n          break;\n\n        default:\n          items.push(this.getItem(item));\n      }\n    }\n\n    return items;\n  };\n\n  Toolbar.prototype.getItem = function (itemObject) {\n    var item = this.predefinedItems[itemObject.text];\n    return item ? extend(item, item, itemObject) : itemObject;\n  };\n\n  Toolbar.prototype.getItemObject = function (itemName) {\n    return this.predefinedItems[itemName] || {\n      text: itemName,\n      id: this.gridID + '_' + itemName\n    };\n  };\n  /**\n   * Enables or disables ToolBar items.\n   * @param {string[]} items - Defines the collection of itemID of ToolBar items.\n   * @param {boolean} isEnable - Defines the items to be enabled or disabled.\n   * @return {void}\n   * @hidden\n   */\n\n\n  Toolbar.prototype.enableItems = function (items, isEnable) {\n    for (var _i = 0, items_2 = items; _i < items_2.length; _i++) {\n      var item = items_2[_i];\n      var element = this.element.querySelector('#' + item);\n\n      if (element) {\n        this.toolbar.enableItems(element.parentElement, isEnable);\n      }\n    }\n  };\n\n  Toolbar.prototype.toolbarClickHandler = function (args) {\n    var _this = this;\n\n    var gObj = this.parent;\n    var gID = this.gridID;\n    extend(args, {\n      cancel: false\n    });\n    var newArgs = !isBlazor() || this.parent.isJsComponent ? args : {\n      item: args.item,\n      cancel: args.cancel,\n      name: args.name\n    };\n    var originalEvent = args.originalEvent;\n    gObj.trigger(events.toolbarClick, newArgs, function (toolbarargs) {\n      toolbarargs.originalEvent = toolbarargs.originalEvent ? toolbarargs.originalEvent : originalEvent;\n\n      if (!toolbarargs.cancel) {\n        switch (!isNullOrUndefined(toolbarargs.item) && toolbarargs.item.id) {\n          case gID + '_print':\n            gObj.print();\n            break;\n\n          case gID + '_edit':\n            gObj.startEdit();\n            break;\n\n          case gID + '_update':\n            gObj.endEdit();\n            break;\n\n          case gID + '_cancel':\n            gObj.closeEdit();\n            break;\n\n          case gID + '_add':\n            gObj.addRecord();\n            break;\n\n          case gID + '_delete':\n            gObj.deleteRecord();\n            break;\n\n          case gID + '_search':\n            if (toolbarargs.originalEvent.target.id === gID + '_searchbutton') {\n              _this.search();\n            }\n\n            break;\n\n          case gID + '_columnchooser':\n            var tarElement = _this.parent.element.querySelector('.e-ccdiv');\n\n            var y = tarElement.getBoundingClientRect().top;\n            var x = tarElement.getBoundingClientRect().left;\n            var targetEle = toolbarargs.originalEvent.target;\n            y = tarElement.getBoundingClientRect().top + tarElement.offsetTop;\n            gObj.createColumnchooser(x, y, targetEle);\n            break;\n\n          case 'copy':\n            if (isBlazor()) {\n              gObj.copy();\n            }\n\n            break;\n\n          case 'copyheader':\n          case 'copyHeader':\n            if (isBlazor()) {\n              gObj.copy(true);\n            }\n\n            break;\n        }\n      }\n    });\n  };\n\n  Toolbar.prototype.modelChanged = function (e) {\n    if (e.module === 'edit') {\n      this.refreshToolbarItems();\n    }\n  };\n\n  Toolbar.prototype.onPropertyChanged = function (e) {\n    if (e.module !== this.getModuleName() || !this.parent.toolbar) {\n      return;\n    }\n\n    if (this.element) {\n      remove(this.element);\n    }\n\n    this.render();\n  };\n\n  Toolbar.prototype.keyUpHandler = function (e) {\n    if (e.keyCode === 13) {\n      this.search();\n    }\n  };\n\n  Toolbar.prototype.search = function () {\n    this.parent.search(this.searchElement.value);\n  };\n\n  Toolbar.prototype.updateSearchBox = function () {\n    if (this.searchElement) {\n      this.searchElement.value = this.parent.searchSettings.key;\n    }\n  };\n\n  Toolbar.prototype.wireEvent = function () {\n    if (this.searchElement) {\n      this.searchBoxObj = new SearchBox(this.searchElement);\n      EventHandler.add(this.searchElement, 'keyup', this.keyUpHandler, this);\n      this.searchBoxObj.wireEvent();\n    }\n  };\n\n  Toolbar.prototype.unWireEvent = function () {\n    if (this.searchElement) {\n      EventHandler.remove(this.searchElement, 'keyup', this.keyUpHandler);\n      this.searchBoxObj.unWireEvent();\n    }\n  };\n\n  Toolbar.prototype.addEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.on(events.initialEnd, this.render, this);\n    this.parent.on(events.uiUpdate, this.onPropertyChanged, this);\n    this.parent.on(events.inBoundModelChanged, this.updateSearchBox.bind(this));\n    this.parent.on(events.modelChanged, this.refreshToolbarItems, this);\n    this.parent.on(events.toolbarRefresh, this.refreshToolbarItems, this);\n    this.parent.on(events.inBoundModelChanged, this.modelChanged, this);\n    this.parent.on(events.dataBound, this.refreshToolbarItems, this);\n  };\n\n  Toolbar.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(events.initialEnd, this.render);\n    this.parent.off(events.uiUpdate, this.onPropertyChanged);\n    this.parent.off(events.inBoundModelChanged, this.updateSearchBox);\n    this.parent.off(events.modelChanged, this.refreshToolbarItems);\n    this.parent.off(events.toolbarRefresh, this.refreshToolbarItems);\n    this.parent.off(events.inBoundModelChanged, this.modelChanged);\n    this.parent.off(events.dataBound, this.refreshToolbarItems);\n  };\n  /**\n   * For internal use only - Get the module name.\n   */\n\n\n  Toolbar.prototype.getModuleName = function () {\n    return 'toolbar';\n  };\n\n  return Toolbar;\n}();\n\nexport { Toolbar };","map":null,"metadata":{},"sourceType":"module"}