{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.header_filter.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _events_engine = require(\"../../events/core/events_engine\");\n\nvar _events_engine2 = _interopRequireDefault(_events_engine);\n\nvar _uiGrid_core = require(\"./ui.grid_core.modules\");\n\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\n\nvar _filtering = require(\"../shared/filtering\");\n\nvar _filtering2 = _interopRequireDefault(_filtering);\n\nvar _uiGrid_core3 = require(\"./ui.grid_core.utils\");\n\nvar _uiGrid_core4 = _interopRequireDefault(_uiGrid_core3);\n\nvar _uiGrid_core5 = require(\"./ui.grid_core.header_filter_core\");\n\nvar _message = require(\"../../localization/message\");\n\nvar _message2 = _interopRequireDefault(_message);\n\nvar _click = require(\"../../events/click\");\n\nvar _click2 = _interopRequireDefault(_click);\n\nvar _data = require(\"../../core/utils/data\");\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _position = require(\"../../core/utils/position\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _utils = require(\"../../data/data_source/utils\");\n\nvar _date = require(\"../../localization/date\");\n\nvar _date2 = _interopRequireDefault(_date);\n\nvar _variable_wrapper = require(\"../../core/utils/variable_wrapper\");\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nvar _accessibility = require(\"../shared/accessibility\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar DATE_INTERVAL_FORMATS = {\n  month: function (value) {\n    return _date2.default.getMonthNames()[value - 1];\n  },\n  quarter: function (value) {\n    return _date2.default.format(new Date(2e3, 3 * value - 1), \"quarter\");\n  }\n};\n\nvar HeaderFilterController = _uiGrid_core2.default.ViewController.inherit(function () {\n  var getFormatOptions = function (value, column, currentLevel) {\n    var groupInterval = _filtering2.default.getGroupInterval(column);\n\n    var result = _uiGrid_core4.default.getFormatOptionsByColumn(column, \"headerFilter\");\n\n    if (groupInterval) {\n      result.groupInterval = groupInterval[currentLevel];\n\n      if (_uiGrid_core4.default.isDateType(column.dataType)) {\n        result.format = DATE_INTERVAL_FORMATS[groupInterval[currentLevel]];\n      } else {\n        if (\"number\" === column.dataType) {\n          result.getDisplayFormat = function () {\n            var formatOptions = {\n              format: column.format,\n              target: \"headerFilter\"\n            };\n\n            var firstValueText = _uiGrid_core4.default.formatValue(value, formatOptions);\n\n            var secondValue = value + groupInterval[currentLevel];\n\n            var secondValueText = _uiGrid_core4.default.formatValue(secondValue, formatOptions);\n\n            return firstValueText && secondValueText ? firstValueText + \" - \" + secondValueText : \"\";\n          };\n        }\n      }\n    }\n\n    return result;\n  };\n\n  return {\n    init: function () {\n      this._columnsController = this.getController(\"columns\");\n      this._dataController = this.getController(\"data\");\n      this._headerFilterView = this.getView(\"headerFilterView\");\n    },\n    _updateSelectedState: function (items, column) {\n      var i = items.length;\n      var isExclude = \"exclude\" === column.filterType;\n\n      while (i--) {\n        var item = items[i];\n\n        if (\"items\" in items[i]) {\n          this._updateSelectedState(items[i].items, column);\n        }\n\n        (0, _uiGrid_core5.updateHeaderFilterItemSelectionState)(item, _uiGrid_core4.default.getIndexByKey(items[i].value, column.filterValues, null) > -1, isExclude);\n      }\n    },\n    _normalizeGroupItem: function (item, currentLevel, options) {\n      var value;\n      var displayValue;\n      var path = options.path;\n      var valueSelector = options.valueSelector;\n      var displaySelector = options.displaySelector;\n      var column = options.column;\n\n      if (valueSelector && displaySelector) {\n        value = valueSelector(item);\n        displayValue = displaySelector(item);\n      } else {\n        value = item.key;\n        displayValue = value;\n      }\n\n      if (!(0, _type.isObject)(item)) {\n        item = {};\n      } else {\n        item = (0, _extend.extend)({}, item);\n      }\n\n      path.push(value);\n\n      if (1 === path.length) {\n        item.value = path[0];\n      } else {\n        item.value = path.join(\"/\");\n      }\n\n      item.text = this.getHeaderItemText(displayValue, column, currentLevel, options.headerFilterOptions);\n      return item;\n    },\n    getHeaderItemText: function (displayValue, column, currentLevel, headerFilterOptions) {\n      var text = _uiGrid_core4.default.formatValue(displayValue, getFormatOptions(displayValue, column, currentLevel));\n\n      if (!text) {\n        text = headerFilterOptions.texts.emptyValue;\n      }\n\n      return text;\n    },\n    _processGroupItems: function (groupItems, currentLevel, path, options) {\n      var that = this;\n      var displaySelector;\n      var valueSelector;\n      var column = options.column;\n      var lookup = column.lookup;\n      var level = options.level;\n      path = path || [];\n      currentLevel = currentLevel || 0;\n\n      if (lookup) {\n        displaySelector = (0, _data.compileGetter)(lookup.displayExpr);\n        valueSelector = (0, _data.compileGetter)(lookup.valueExpr);\n      }\n\n      for (var i = 0; i < groupItems.length; i++) {\n        groupItems[i] = that._normalizeGroupItem(groupItems[i], currentLevel, {\n          column: options.column,\n          headerFilterOptions: options.headerFilterOptions,\n          displaySelector: displaySelector,\n          valueSelector: valueSelector,\n          path: path\n        });\n\n        if (\"items\" in groupItems[i]) {\n          if (currentLevel === level || !(0, _type.isDefined)(groupItems[i].value)) {\n            delete groupItems[i].items;\n          } else {\n            that._processGroupItems(groupItems[i].items, currentLevel + 1, path, options);\n          }\n        }\n\n        path.pop();\n      }\n    },\n    getDataSource: function (column) {\n      var that = this;\n\n      var dataSource = that._dataController.dataSource();\n\n      var group = _uiGrid_core4.default.getHeaderFilterGroupParameters(column, dataSource && dataSource.remoteOperations().grouping);\n\n      var headerFilterDataSource = column.headerFilter && column.headerFilter.dataSource;\n      var headerFilterOptions = that.option(\"headerFilter\");\n      var isLookup = false;\n      var options = {\n        component: that.component\n      };\n\n      if (!dataSource) {\n        return;\n      }\n\n      if ((0, _type.isDefined)(headerFilterDataSource) && !(0, _type.isFunction)(headerFilterDataSource)) {\n        options.dataSource = (0, _utils.normalizeDataSourceOptions)(headerFilterDataSource);\n      } else {\n        if (column.lookup) {\n          isLookup = true;\n          var lookupDataSourceOptions;\n\n          if (column.lookup.items) {\n            lookupDataSourceOptions = column.lookup.items;\n          } else {\n            lookupDataSourceOptions = column.lookup.dataSource;\n\n            if ((0, _type.isFunction)(lookupDataSourceOptions) && !(0, _variable_wrapper.isWrapped)(lookupDataSourceOptions)) {\n              lookupDataSourceOptions = lookupDataSourceOptions({});\n            }\n          }\n\n          options.dataSource = (0, _utils.normalizeDataSourceOptions)(lookupDataSourceOptions);\n        } else {\n          var cutoffLevel = Array.isArray(group) ? group.length - 1 : 0;\n          that._currentColumn = column;\n\n          var filter = that._dataController.getCombinedFilter();\n\n          that._currentColumn = null;\n          options.dataSource = {\n            filter: filter,\n            group: group,\n            useDefaultSearch: true,\n            load: function (options) {\n              var d = new _deferred.Deferred();\n              options.dataField = column.dataField || column.name;\n              dataSource.load(options).done(function (data) {\n                that._processGroupItems(data, null, null, {\n                  level: cutoffLevel,\n                  column: column,\n                  headerFilterOptions: headerFilterOptions\n                });\n\n                d.resolve(data);\n              }).fail(d.reject);\n              return d;\n            }\n          };\n        }\n      }\n\n      if ((0, _type.isFunction)(headerFilterDataSource)) {\n        headerFilterDataSource.call(column, options);\n      }\n\n      var origPostProcess = options.dataSource.postProcess;\n\n      options.dataSource.postProcess = function (data) {\n        var items = data;\n\n        if (isLookup) {\n          if (0 === this.pageIndex() && !this.searchValue()) {\n            items = items.slice(0);\n            items.unshift(null);\n          }\n\n          that._processGroupItems(items, null, null, {\n            level: 0,\n            column: column,\n            headerFilterOptions: headerFilterOptions\n          });\n        }\n\n        items = origPostProcess && origPostProcess.call(this, items) || items;\n\n        that._updateSelectedState(items, column);\n\n        return items;\n      };\n\n      return options.dataSource;\n    },\n    getCurrentColumn: function () {\n      return this._currentColumn;\n    },\n    showHeaderFilterMenu: function (columnIndex, isGroupPanel) {\n      var columnsController = this._columnsController;\n      var column = (0, _extend.extend)(true, {}, this._columnsController.getColumns()[columnIndex]);\n\n      if (column) {\n        var visibleIndex = columnsController.getVisibleIndex(columnIndex);\n        var view = isGroupPanel ? this.getView(\"headerPanel\") : this.getView(\"columnHeadersView\");\n        var $columnElement = $columnElement || view.getColumnElements().eq(isGroupPanel ? column.groupIndex : visibleIndex);\n        this.showHeaderFilterMenuBase({\n          columnElement: $columnElement,\n          column: column,\n          applyFilter: true,\n          apply: function () {\n            columnsController.columnOption(columnIndex, {\n              filterValues: this.filterValues,\n              filterType: this.filterType\n            });\n          }\n        });\n      }\n    },\n    showHeaderFilterMenuBase: function (options) {\n      var _this = this;\n\n      var that = this;\n      var column = options.column;\n\n      if (column) {\n        var groupInterval = _filtering2.default.getGroupInterval(column);\n\n        var dataSource = that._dataController.dataSource();\n\n        var remoteFiltering = dataSource && dataSource.remoteOperations().filtering;\n        (0, _extend.extend)(options, column, {\n          type: groupInterval && groupInterval.length > 1 ? \"tree\" : \"list\",\n          remoteFiltering: remoteFiltering,\n          onShowing: function (e) {\n            var dxResizableInstance = e.component.overlayContent().dxResizable(\"instance\");\n            dxResizableInstance && dxResizableInstance.option(\"onResizeEnd\", function (e) {\n              var columnsController = that.getController(\"columns\");\n              var headerFilterByColumn = columnsController.columnOption(options.dataField, \"headerFilter\");\n              headerFilterByColumn = headerFilterByColumn || {};\n              headerFilterByColumn.width = e.width;\n              headerFilterByColumn.height = e.height;\n              columnsController.columnOption(options.dataField, \"headerFilter\", headerFilterByColumn, true);\n            });\n          },\n          onHidden: function () {\n            return (0, _accessibility.restoreFocus)(_this);\n          }\n        });\n        options.dataSource = that.getDataSource(options);\n\n        if (options.isFilterBuilder) {\n          options.dataSource.filter = null;\n          options.alignment = \"right\";\n        }\n\n        that._headerFilterView.showHeaderFilterMenu(options.columnElement, options);\n      }\n    },\n    hideHeaderFilterMenu: function () {\n      this._headerFilterView.hideHeaderFilterMenu();\n    }\n  };\n}());\n\nvar ColumnHeadersViewHeaderFilterExtender = (0, _extend.extend)({}, _uiGrid_core5.headerFilterMixin, {\n  _renderCellContent: function ($cell, options) {\n    var that = this;\n    var $headerFilterIndicator;\n    var column = options.column;\n\n    if (!column.command && (0, _uiGrid_core5.allowHeaderFiltering)(column) && that.option(\"headerFilter.visible\") && \"header\" === options.rowType) {\n      $headerFilterIndicator = that._applyColumnState({\n        name: \"headerFilter\",\n        rootElement: $cell,\n        column: column,\n        showColumnLines: that.option(\"showColumnLines\")\n      });\n      $headerFilterIndicator && that._subscribeToIndicatorEvent($headerFilterIndicator, column, \"headerFilter\");\n    }\n\n    that.callBase($cell, options);\n  },\n  _subscribeToIndicatorEvent: function ($indicator, column, indicatorName) {\n    var that = this;\n\n    if (\"headerFilter\" === indicatorName) {\n      _events_engine2.default.on($indicator, _click2.default.name, that.createAction(function (e) {\n        e.event.stopPropagation();\n        that.getController(\"headerFilter\").showHeaderFilterMenu(column.index, false);\n      }));\n    }\n  },\n  _updateIndicator: function ($cell, column, indicatorName) {\n    var $indicator = this.callBase($cell, column, indicatorName);\n    $indicator && this._subscribeToIndicatorEvent($indicator, column, indicatorName);\n  },\n  _updateHeaderFilterIndicators: function () {\n    if (this.option(\"headerFilter.visible\")) {\n      this._updateIndicators(\"headerFilter\");\n    }\n  },\n  _needUpdateFilterIndicators: function () {\n    return true;\n  },\n  _columnOptionChanged: function (e) {\n    var optionNames = e.optionNames;\n\n    if (_uiGrid_core4.default.checkChanges(optionNames, [\"filterValues\", \"filterType\"])) {\n      if (this._needUpdateFilterIndicators()) {\n        this._updateHeaderFilterIndicators();\n      }\n\n      return;\n    }\n\n    this.callBase(e);\n  }\n});\nvar HeaderPanelHeaderFilterExtender = (0, _extend.extend)({}, _uiGrid_core5.headerFilterMixin, {\n  _createGroupPanelItem: function ($rootElement, groupColumn) {\n    var that = this;\n    var $item = that.callBase.apply(that, arguments);\n    var $headerFilterIndicator;\n\n    if (!groupColumn.command && (0, _uiGrid_core5.allowHeaderFiltering)(groupColumn) && that.option(\"headerFilter.visible\")) {\n      $headerFilterIndicator = that._applyColumnState({\n        name: \"headerFilter\",\n        rootElement: $item,\n        column: {\n          alignment: (0, _position.getDefaultAlignment)(that.option(\"rtlEnabled\")),\n          filterValues: groupColumn.filterValues,\n          allowHeaderFiltering: true\n        },\n        showColumnLines: true\n      });\n      $headerFilterIndicator && _events_engine2.default.on($headerFilterIndicator, _click2.default.name, that.createAction(function (e) {\n        var event = e.event;\n        event.stopPropagation();\n        that.getController(\"headerFilter\").showHeaderFilterMenu(groupColumn.index, true);\n      }));\n    }\n\n    return $item;\n  }\n});\n\nfunction invertFilterExpression(filter) {\n  return [\"!\", filter];\n}\n\nvar DataControllerFilterRowExtender = {\n  skipCalculateColumnFilters: function () {\n    return false;\n  },\n  _calculateAdditionalFilter: function () {\n    if (this.skipCalculateColumnFilters()) {\n      return this.callBase();\n    }\n\n    var that = this;\n    var filters = [that.callBase()];\n\n    var columns = that._columnsController.getVisibleColumns(null, true);\n\n    var headerFilterController = that.getController(\"headerFilter\");\n    var currentColumn = headerFilterController.getCurrentColumn();\n    (0, _iterator.each)(columns, function (_, column) {\n      var filter;\n\n      if (currentColumn && currentColumn.index === column.index) {\n        return;\n      }\n\n      if ((0, _uiGrid_core5.allowHeaderFiltering)(column) && column.calculateFilterExpression && Array.isArray(column.filterValues) && column.filterValues.length) {\n        var filterValues = [];\n        (0, _iterator.each)(column.filterValues, function (_, filterValue) {\n          if (Array.isArray(filterValue)) {\n            filter = filterValue;\n          } else {\n            if (column.deserializeValue && !_uiGrid_core4.default.isDateType(column.dataType) && \"number\" !== column.dataType) {\n              filterValue = column.deserializeValue(filterValue);\n            }\n\n            filter = column.createFilterExpression(filterValue, \"=\", \"headerFilter\");\n          }\n\n          if (filter) {\n            filter.columnIndex = column.index;\n          }\n\n          filterValues.push(filter);\n        });\n        filterValues = _uiGrid_core4.default.combineFilters(filterValues, \"or\");\n        filters.push(\"exclude\" === column.filterType ? [\"!\", filterValues] : filterValues);\n      }\n    });\n    return _uiGrid_core4.default.combineFilters(filters);\n  }\n};\nmodule.exports = {\n  invertFilterExpression: invertFilterExpression,\n  defaultOptions: function () {\n    return {\n      headerFilter: {\n        visible: false,\n        width: 252,\n        height: 325,\n        allowSearch: false,\n        searchTimeout: 500,\n        texts: {\n          emptyValue: _message2.default.format(\"dxDataGrid-headerFilterEmptyValue\"),\n          ok: _message2.default.format(\"dxDataGrid-headerFilterOK\"),\n          cancel: _message2.default.format(\"dxDataGrid-headerFilterCancel\")\n        }\n      }\n    };\n  },\n  controllers: {\n    headerFilter: HeaderFilterController\n  },\n  views: {\n    headerFilterView: _uiGrid_core5.HeaderFilterView\n  },\n  extenders: {\n    controllers: {\n      data: DataControllerFilterRowExtender\n    },\n    views: {\n      columnHeadersView: ColumnHeadersViewHeaderFilterExtender,\n      headerPanel: HeaderPanelHeaderFilterExtender\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}