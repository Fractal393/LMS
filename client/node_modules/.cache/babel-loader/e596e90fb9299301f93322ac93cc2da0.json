{"ast":null,"code":"/**\r\n * DevExtreme (ui/drawer/ui.drawer.rendering.strategy.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _fx = require(\"../../animation/fx\");\n\nvar _fx2 = _interopRequireDefault(_fx);\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nvar _inflector = require(\"../../core/utils/inflector\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nvar animation = {\n  moveTo: function (config) {\n    var $element = config.$element;\n    var position = config.position;\n    var direction = config.direction || \"left\";\n    var toConfig = {};\n    var animationType;\n\n    switch (direction) {\n      case \"right\":\n        toConfig.transform = \"translate(\" + position + \"px, 0px)\";\n        animationType = \"custom\";\n        break;\n\n      case \"left\":\n        toConfig.left = position;\n        animationType = \"slide\";\n        break;\n\n      case \"top\":\n      case \"bottom\":\n        toConfig.top = position;\n        animationType = \"slide\";\n    }\n\n    _fx2.default.animate($element, {\n      type: animationType,\n      to: toConfig,\n      duration: config.duration,\n      complete: config.complete\n    });\n  },\n  margin: function margin(config) {\n    var $element = config.$element;\n    var margin = config.margin;\n    var direction = config.direction || \"left\";\n    var toConfig = {};\n    toConfig[\"margin\" + (0, _inflector.camelize)(direction, true)] = margin;\n\n    _fx2.default.animate($element, {\n      to: toConfig,\n      duration: config.duration,\n      complete: config.complete\n    });\n  },\n  fade: function ($element, config, duration, completeAction) {\n    _fx2.default.animate($element, {\n      type: \"fade\",\n      to: config.to,\n      from: config.from,\n      duration: duration,\n      complete: completeAction\n    });\n  },\n  size: function size(config) {\n    var $element = config.$element;\n    var size = config.size;\n    var direction = config.direction || \"left\";\n    var marginTop = config.marginTop || 0;\n    var duration = config.duration;\n    var toConfig = {};\n\n    if (\"right\" === direction || \"left\" === direction) {\n      toConfig.width = size;\n    } else {\n      toConfig.height = size;\n    }\n\n    if (\"bottom\" === direction) {\n      toConfig.marginTop = marginTop;\n    }\n\n    _fx2.default.animate($element, {\n      to: toConfig,\n      duration: duration,\n      complete: config.complete\n    });\n  },\n  complete: function ($element) {\n    _fx2.default.stop($element, true);\n  }\n};\n\nvar DrawerStrategy = function () {\n  function DrawerStrategy(drawer) {\n    _classCallCheck(this, DrawerStrategy);\n\n    this._drawer = drawer;\n  }\n\n  _createClass(DrawerStrategy, [{\n    key: \"getDrawerInstance\",\n    value: function () {\n      return this._drawer;\n    }\n  }, {\n    key: \"renderPanelContent\",\n    value: function (whenPanelContentRendered) {\n      var drawer = this.getDrawerInstance();\n\n      var template = drawer._getTemplate(drawer.option(\"template\"));\n\n      if (template) {\n        template.render({\n          container: drawer.content(),\n          onRendered: function () {\n            whenPanelContentRendered.resolve();\n          }\n        });\n      }\n    }\n  }, {\n    key: \"renderPosition\",\n    value: function (isDrawerOpened, animate) {\n      this._prepareAnimationDeferreds(animate);\n\n      var config = this._getPositionRenderingConfig(isDrawerOpened);\n\n      if (this._useDefaultAnimation()) {\n        this._defaultPositionRendering(config, isDrawerOpened, animate);\n      } else {\n        var revealMode = this.getDrawerInstance().option(\"revealMode\");\n\n        if (\"slide\" === revealMode) {\n          this._slidePositionRendering(config, isDrawerOpened, animate);\n        } else {\n          if (\"expand\" === revealMode) {\n            this._expandPositionRendering(config, isDrawerOpened, animate);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_prepareAnimationDeferreds\",\n    value: function (animate) {\n      var drawer = this.getDrawerInstance();\n      this._contentAnimation = new _deferred.Deferred();\n      this._panelAnimation = new _deferred.Deferred();\n      this._shaderAnimation = new _deferred.Deferred();\n\n      drawer._animations.push(this._contentAnimation, this._panelAnimation, this._shaderAnimation);\n\n      if (animate) {\n        _deferred.when.apply(_renderer2.default, drawer._animations).done(function () {\n          drawer._animationCompleteHandler();\n        });\n      } else {\n        drawer.resizeViewContent();\n      }\n    }\n  }, {\n    key: \"_getPositionRenderingConfig\",\n    value: function (isDrawerOpened) {\n      var drawer = this.getDrawerInstance();\n      return {\n        direction: drawer.calcTargetPosition(),\n        $panel: (0, _renderer2.default)(drawer.content()),\n        $content: (0, _renderer2.default)(drawer.viewContent()),\n        defaultAnimationConfig: this._defaultAnimationConfig(),\n        size: this._getPanelSize(isDrawerOpened)\n      };\n    }\n  }, {\n    key: \"_useDefaultAnimation\",\n    value: function () {\n      return false;\n    }\n  }, {\n    key: \"_elementsAnimationCompleteHandler\",\n    value: function () {\n      this._contentAnimation.resolve();\n\n      this._panelAnimation.resolve();\n    }\n  }, {\n    key: \"_defaultAnimationConfig\",\n    value: function () {\n      var _this = this;\n\n      return {\n        complete: function () {\n          _this._elementsAnimationCompleteHandler();\n        }\n      };\n    }\n  }, {\n    key: \"_getPanelOffset\",\n    value: function (isDrawerOpened) {\n      var drawer = this.getDrawerInstance();\n      var size = drawer.isHorizontalDirection() ? drawer.getRealPanelWidth() : drawer.getRealPanelHeight();\n\n      if (isDrawerOpened) {\n        return -(size - drawer.getMaxSize());\n      } else {\n        return -(size - drawer.getMinSize());\n      }\n    }\n  }, {\n    key: \"_getPanelSize\",\n    value: function (isDrawerOpened) {\n      return isDrawerOpened ? this.getDrawerInstance().getMaxSize() : this.getDrawerInstance().getMinSize();\n    }\n  }, {\n    key: \"renderShaderVisibility\",\n    value: function (isShaderVisible, animate, duration) {\n      var _this2 = this;\n\n      var drawer = this.getDrawerInstance();\n      var fadeConfig = isShaderVisible ? {\n        from: 0,\n        to: 1\n      } : {\n        from: 1,\n        to: 0\n      };\n\n      if (animate) {\n        animation.fade((0, _renderer2.default)(drawer._$shader), fadeConfig, duration, function () {\n          _this2._drawer._toggleShaderVisibility(isShaderVisible);\n\n          _this2._shaderAnimation.resolve();\n        });\n      } else {\n        drawer._toggleShaderVisibility(isShaderVisible);\n\n        drawer._$shader.css(\"opacity\", fadeConfig.to);\n      }\n    }\n  }, {\n    key: \"getPanelContent\",\n    value: function () {\n      return (0, _renderer2.default)(this.getDrawerInstance().content());\n    }\n  }, {\n    key: \"setPanelSize\",\n    value: function (calcFromRealPanelSize) {\n      this.refreshPanelElementSize(calcFromRealPanelSize);\n    }\n  }, {\n    key: \"refreshPanelElementSize\",\n    value: function (calcFromRealPanelSize) {\n      var drawer = this.getDrawerInstance();\n\n      var panelSize = this._getPanelSize(drawer.option(\"opened\"));\n\n      if (drawer.isHorizontalDirection()) {\n        (0, _renderer2.default)(drawer.content()).width(calcFromRealPanelSize ? drawer.getRealPanelWidth() : panelSize);\n      } else {\n        (0, _renderer2.default)(drawer.content()).height(calcFromRealPanelSize ? drawer.getRealPanelHeight() : panelSize);\n      }\n    }\n  }, {\n    key: \"isViewContentFirst\",\n    value: function () {\n      return false;\n    }\n  }]);\n\n  return DrawerStrategy;\n}();\n\nmodule.exports = DrawerStrategy;\nmodule.exports.animation = animation;","map":null,"metadata":{},"sourceType":"script"}