{"ast":null,"code":"/**\r\n * DevExtreme (ui/file_manager/ui.file_manager.editing.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _string = require(\"../../core/utils/string\");\n\nvar _message = require(\"../../localization/message\");\n\nvar _message2 = _interopRequireDefault(_message);\n\nvar _ui = require(\"../widget/ui.widget\");\n\nvar _ui2 = _interopRequireDefault(_ui);\n\nvar _uiFile_manager = require(\"./ui.file_manager.dialog_manager\");\n\nvar _uiFile_manager2 = _interopRequireDefault(_uiFile_manager);\n\nvar _uiFile_manager3 = require(\"./ui.file_manager.file_uploader\");\n\nvar _uiFile_manager4 = _interopRequireDefault(_uiFile_manager3);\n\nvar _uiFile_manager5 = require(\"./ui.file_manager.messages\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) {\n    return;\n  }\n\n  if (\"string\" === typeof o) {\n    return _arrayLikeToArray(o, minLen);\n  }\n\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n\n  if (\"Object\" === n && o.constructor) {\n    n = o.constructor.name;\n  }\n\n  if (\"Map\" === n || \"Set\" === n) {\n    return Array.from(o);\n  }\n\n  if (\"Arguments\" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) {\n    return _arrayLikeToArray(o, minLen);\n  }\n}\n\nfunction _iterableToArray(iter) {\n  if (\"undefined\" !== typeof Symbol && Symbol.iterator in Object(iter)) {\n    return Array.from(iter);\n  }\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    return _arrayLikeToArray(arr);\n  }\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (null == len || len > arr.length) {\n    len = arr.length;\n  }\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nfunction _get(target, property, receiver) {\n  if (\"undefined\" !== typeof Reflect && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function (target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) {\n        return;\n      }\n\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n\n    if (null === object) {\n      break;\n    }\n  }\n\n  return object;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (\"function\" !== typeof superClass && null !== superClass) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (superClass) {\n    _setPrototypeOf(subClass, superClass);\n  }\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function (o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var result,\n        Super = _getPrototypeOf(Derived);\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (\"object\" === _typeof(call) || \"function\" === typeof call)) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (void 0 === self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (\"undefined\" === typeof Reflect || !Reflect.construct) {\n    return false;\n  }\n\n  if (Reflect.construct.sham) {\n    return false;\n  }\n\n  if (\"function\" === typeof Proxy) {\n    return true;\n  }\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function (o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar FileManagerEditingControl = function (_Widget) {\n  _inherits(FileManagerEditingControl, _Widget);\n\n  var _super = _createSuper(FileManagerEditingControl);\n\n  function FileManagerEditingControl() {\n    _classCallCheck(this, FileManagerEditingControl);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FileManagerEditingControl, [{\n    key: \"_initMarkup\",\n    value: function () {\n      _get(_getPrototypeOf(FileManagerEditingControl.prototype), \"_initMarkup\", this).call(this);\n\n      this._initActions();\n\n      this._controller = this.option(\"controller\");\n\n      this._controller.on(\"EditActionStarting\", this._onEditActionStarting.bind(this));\n\n      this._controller.on(\"EditActionResultAcquired\", this._onEditActionResultAcquired.bind(this));\n\n      this._controller.on(\"EditActionItemError\", this._onEditActionItemError.bind(this));\n\n      this._controller.on(\"EditActionError\", this._onEditActionError.bind(this));\n\n      this._controller.on(\"CompleteEditActionItem\", this._onCompleteEditActionItem.bind(this));\n\n      this._controller.on(\"CompleteEditAction\", this._onCompleteEditAction.bind(this));\n\n      this._model = this.option(\"model\");\n      this._uploadOperationInfoMap = {};\n      this._dialogManager = new _uiFile_manager2.default(this.$element(), {\n        chooseDirectoryDialog: {\n          provider: this._controller._fileProvider,\n          getDirectories: this._controller.getDirectories.bind(this._controller),\n          getCurrentDirectory: this._controller.getCurrentDirectory.bind(this._controller)\n        },\n        onDialogClosed: this._onDialogClosed.bind(this)\n      });\n      this._fileUploader = this._createFileUploader();\n\n      this._createMetadataMap();\n    }\n  }, {\n    key: \"_initNotificationControl\",\n    value: function (notificationControl) {\n      var _this = this;\n\n      this._notificationControl = notificationControl;\n\n      this._notificationControl.option({\n        onOperationCanceled: function (_ref) {\n          var info = _ref.info;\n          return _this._onCancelUploadSession(info);\n        },\n        onOperationItemCanceled: function (_ref2) {\n          var item = _ref2.item,\n              itemIndex = _ref2.itemIndex;\n          return _this._onCancelFileUpload(item, itemIndex);\n        }\n      });\n    }\n  }, {\n    key: \"_getFileUploaderComponent\",\n    value: function () {\n      return _uiFile_manager4.default;\n    }\n  }, {\n    key: \"_createFileUploader\",\n    value: function () {\n      var _this2 = this;\n\n      var $fileUploader = (0, _renderer2.default)(\"<div>\").appendTo(this.$element());\n      return this._createComponent($fileUploader, this._getFileUploaderComponent(), {\n        getController: this._getFileUploaderController.bind(this),\n        onUploadSessionStarted: function (e) {\n          return _this2._onUploadSessionStarted(e);\n        },\n        onUploadProgress: function (e) {\n          return _this2._onUploadProgress(e);\n        }\n      });\n    }\n  }, {\n    key: \"_getFileUploaderController\",\n    value: function () {\n      var _this3 = this;\n\n      var uploadDirectory = this._uploadDirectoryInfo && this._uploadDirectoryInfo.fileItem;\n      return {\n        chunkSize: this._controller.getFileUploadChunkSize(),\n        uploadFileChunk: function (fileData, chunksInfo) {\n          return _this3._controller.uploadFileChunk(fileData, chunksInfo, uploadDirectory);\n        },\n        abortFileUpload: function (fileData, chunksInfo) {\n          return _this3._controller.abortFileUpload(fileData, chunksInfo, uploadDirectory);\n        }\n      };\n    }\n  }, {\n    key: \"_createMetadataMap\",\n    value: function () {\n      var _this4 = this;\n\n      this._metadataMap = {\n        create: {\n          action: function (arg) {\n            return _this4._tryCreate(arg);\n          },\n          affectsAllItems: true,\n          singleItemProcessingMessage: _message2.default.format(\"dxFileManager-editingCreateSingleItemProcessingMessage\"),\n          singleItemSuccessMessage: _message2.default.format(\"dxFileManager-editingCreateSingleItemSuccessMessage\"),\n          singleItemErrorMessage: _message2.default.format(\"dxFileManager-editingCreateSingleItemErrorMessage\"),\n          commonErrorMessage: _message2.default.format(\"dxFileManager-editingCreateCommonErrorMessage\")\n        },\n        rename: {\n          action: function (arg) {\n            return _this4._tryRename(arg);\n          },\n          singleItemProcessingMessage: _message2.default.format(\"dxFileManager-editingRenameSingleItemProcessingMessage\"),\n          singleItemSuccessMessage: _message2.default.format(\"dxFileManager-editingRenameSingleItemSuccessMessage\"),\n          singleItemErrorMessage: _message2.default.format(\"dxFileManager-editingRenameSingleItemErrorMessage\"),\n          commonErrorMessage: _message2.default.format(\"dxFileManager-editingRenameCommonErrorMessage\")\n        },\n        \"delete\": {\n          action: function (arg) {\n            return _this4._tryDelete(arg);\n          },\n          singleItemProcessingMessage: _message2.default.format(\"dxFileManager-editingDeleteSingleItemProcessingMessage\"),\n          multipleItemsProcessingMessage: _message2.default.format(\"dxFileManager-editingDeleteMultipleItemsProcessingMessage\"),\n          singleItemSuccessMessage: _message2.default.format(\"dxFileManager-editingDeleteSingleItemSuccessMessage\"),\n          multipleItemsSuccessMessage: _message2.default.format(\"dxFileManager-editingDeleteMultipleItemsSuccessMessage\"),\n          singleItemErrorMessage: _message2.default.format(\"dxFileManager-editingDeleteSingleItemErrorMessage\"),\n          multipleItemsErrorMessage: _message2.default.format(\"dxFileManager-editingDeleteMultipleItemsErrorMessage\"),\n          commonErrorMessage: _message2.default.format(\"dxFileManager-editingDeleteCommonErrorMessage\")\n        },\n        move: {\n          action: function (arg) {\n            return _this4._tryMove(arg);\n          },\n          singleItemProcessingMessage: _message2.default.format(\"dxFileManager-editingMoveSingleItemProcessingMessage\"),\n          multipleItemsProcessingMessage: _message2.default.format(\"dxFileManager-editingMoveMultipleItemsProcessingMessage\"),\n          singleItemSuccessMessage: _message2.default.format(\"dxFileManager-editingMoveSingleItemSuccessMessage\"),\n          multipleItemsSuccessMessage: _message2.default.format(\"dxFileManager-editingMoveMultipleItemsSuccessMessage\"),\n          singleItemErrorMessage: _message2.default.format(\"dxFileManager-editingMoveSingleItemErrorMessage\"),\n          multipleItemsErrorMessage: _message2.default.format(\"dxFileManager-editingMoveMultipleItemsErrorMessage\"),\n          commonErrorMessage: _message2.default.format(\"dxFileManager-editingMoveCommonErrorMessage\")\n        },\n        copy: {\n          action: function (arg) {\n            return _this4._tryCopy(arg);\n          },\n          singleItemProcessingMessage: _message2.default.format(\"dxFileManager-editingCopySingleItemProcessingMessage\"),\n          multipleItemsProcessingMessage: _message2.default.format(\"dxFileManager-editingCopyMultipleItemsProcessingMessage\"),\n          singleItemSuccessMessage: _message2.default.format(\"dxFileManager-editingCopySingleItemSuccessMessage\"),\n          multipleItemsSuccessMessage: _message2.default.format(\"dxFileManager-editingCopyMultipleItemsSuccessMessage\"),\n          singleItemErrorMessage: _message2.default.format(\"dxFileManager-editingCopySingleItemErrorMessage\"),\n          multipleItemsErrorMessage: _message2.default.format(\"dxFileManager-editingCopyMultipleItemsErrorMessage\"),\n          commonErrorMessage: _message2.default.format(\"dxFileManager-editingCopyCommonErrorMessage\")\n        },\n        upload: {\n          action: function (arg) {\n            return _this4._tryUpload(arg);\n          },\n          allowCancel: true,\n          allowItemProgress: true,\n          singleItemProcessingMessage: _message2.default.format(\"dxFileManager-editingUploadSingleItemProcessingMessage\"),\n          multipleItemsProcessingMessage: _message2.default.format(\"dxFileManager-editingUploadMultipleItemsProcessingMessage\"),\n          singleItemSuccessMessage: _message2.default.format(\"dxFileManager-editingUploadSingleItemSuccessMessage\"),\n          multipleItemsSuccessMessage: _message2.default.format(\"dxFileManager-editingUploadMultipleItemsSuccessMessage\"),\n          singleItemErrorMessage: _message2.default.format(\"dxFileManager-editingUploadSingleItemErrorMessage\"),\n          multipleItemsErrorMessage: _message2.default.format(\"dxFileManager-editingUploadMultipleItemsErrorMessage\"),\n          canceledMessage: _message2.default.format(\"dxFileManager-editingUploadCanceledMessage\")\n        },\n        download: {\n          action: function (arg) {\n            return _this4._download(arg);\n          }\n        },\n        getItemContent: {\n          action: function (arg) {\n            return _this4._getItemContent(arg);\n          }\n        },\n        getItems: {\n          singleItemProcessingMessage: \"\",\n          singleItemErrorMessage: _message2.default.format(\"dxFileManager-errorDirectoryOpenFailed\"),\n          commonErrorMessage: _message2.default.format(\"dxFileManager-errorDirectoryOpenFailed\")\n        }\n      };\n    }\n  }, {\n    key: \"getCommandActions\",\n    value: function () {\n      var _this5 = this;\n\n      var result = {};\n      (0, _iterator.each)(this._metadataMap, function (name) {\n        if (Object.prototype.hasOwnProperty.call(_this5._metadataMap, name)) {\n          result[name] = function (arg) {\n            return _this5._executeAction(name, arg);\n          };\n        }\n      });\n      return result;\n    }\n  }, {\n    key: \"_executeAction\",\n    value: function (actionName, arg) {\n      var actionMetadata = this._metadataMap[actionName];\n      return actionMetadata ? actionMetadata.action(arg) : null;\n    }\n  }, {\n    key: \"_onCancelUploadSession\",\n    value: function (info) {\n      this._fileUploader.cancelUpload(info.uploadSessionId);\n    }\n  }, {\n    key: \"_onCancelFileUpload\",\n    value: function (item, itemIndex) {\n      this._fileUploader.cancelFileUpload(item.info.uploadSessionId, itemIndex);\n    }\n  }, {\n    key: \"_onUploadProgress\",\n    value: function (_ref3) {\n      var sessionId = _ref3.sessionId,\n          fileIndex = _ref3.fileIndex,\n          commonValue = _ref3.commonValue,\n          fileValue = _ref3.fileValue;\n      var operationInfo = this._uploadOperationInfoMap[sessionId];\n\n      this._notificationControl.updateOperationItemProgress(operationInfo, fileIndex, 100 * fileValue, 100 * commonValue);\n    }\n  }, {\n    key: \"_onUploadSessionStarted\",\n    value: function (_ref4) {\n      var sessionInfo = _ref4.sessionInfo;\n\n      this._controller.processUploadSession(sessionInfo, this._uploadDirectoryInfo);\n    }\n  }, {\n    key: \"_onEditActionStarting\",\n    value: function (actionInfo) {\n      var actionMetadata = this._metadataMap[actionInfo.name];\n      var context = new FileManagerActionContext(actionMetadata, actionInfo.itemInfos, actionInfo.directory);\n\n      var operationInfo = this._notificationControl.addOperation(context.processingMessage, actionMetadata.allowCancel, !actionMetadata.allowItemProgress);\n\n      (0, _extend.extend)(actionInfo.customData, {\n        context: context,\n        operationInfo: operationInfo\n      });\n\n      if (\"upload\" === actionInfo.name) {\n        var sessionId = actionInfo.customData.sessionInfo.sessionId;\n        operationInfo.uploadSessionId = sessionId;\n        this._uploadOperationInfoMap[sessionId] = operationInfo;\n      }\n    }\n  }, {\n    key: \"_onEditActionResultAcquired\",\n    value: function (actionInfo) {\n      var _this6 = this;\n\n      var _actionInfo$customDat = actionInfo.customData,\n          context = _actionInfo$customDat.context,\n          operationInfo = _actionInfo$customDat.operationInfo;\n      context.singleRequest = actionInfo.singleRequest;\n      var details = context.itemInfos.map(function (itemInfo) {\n        return _this6._getItemProgressDisplayInfo(itemInfo);\n      });\n\n      this._notificationControl.addOperationDetails(operationInfo, details, context.actionMetadata.allowCancel);\n    }\n  }, {\n    key: \"_onEditActionError\",\n    value: function (actionInfo, error) {\n      var _actionInfo$customDat2 = actionInfo.customData,\n          context = _actionInfo$customDat2.context,\n          operationInfo = _actionInfo$customDat2.operationInfo;\n      context.singleRequest = actionInfo.singleRequest;\n\n      this._handleActionError(operationInfo, context, error);\n\n      this._completeAction(operationInfo, context);\n    }\n  }, {\n    key: \"_onEditActionItemError\",\n    value: function (actionInfo, info) {\n      var _actionInfo$customDat3 = actionInfo.customData,\n          context = _actionInfo$customDat3.context,\n          operationInfo = _actionInfo$customDat3.operationInfo;\n\n      this._handleActionError(operationInfo, context, info);\n    }\n  }, {\n    key: \"_onCompleteEditActionItem\",\n    value: function (actionInfo, info) {\n      var _actionInfo$customDat4 = actionInfo.customData,\n          context = _actionInfo$customDat4.context,\n          operationInfo = _actionInfo$customDat4.operationInfo;\n\n      if (!info.result || !info.result.canceled) {\n        context.completeOperationItem(info.index);\n\n        this._notificationControl.completeOperationItem(operationInfo, info.index, context.commonProgress);\n      }\n    }\n  }, {\n    key: \"_onCompleteEditAction\",\n    value: function (actionInfo) {\n      var _actionInfo$customDat5 = actionInfo.customData,\n          context = _actionInfo$customDat5.context,\n          operationInfo = _actionInfo$customDat5.operationInfo;\n\n      this._completeAction(operationInfo, context);\n\n      if (\"upload\" === actionInfo.name) {\n        delete this._uploadOperationInfoMap[actionInfo.customData.sessionInfo.sessionId];\n      }\n    }\n  }, {\n    key: \"_tryCreate\",\n    value: function (parentDirectories) {\n      var _this7 = this;\n\n      var parentDirectoryInfo = parentDirectories && parentDirectories[0] || this._getCurrentDirectory();\n\n      var newDirName = _message2.default.format(\"dxFileManager-newDirectoryName\");\n\n      return this._showDialog(this._dialogManager.getCreateItemDialog(), newDirName).then(function (_ref5) {\n        var name = _ref5.name;\n        return _this7._controller.createDirectory(parentDirectoryInfo, name);\n      });\n    }\n  }, {\n    key: \"_tryRename\",\n    value: function (itemInfos) {\n      var _this8 = this;\n\n      var itemInfo = itemInfos && itemInfos[0] || this._model.getMultipleSelectedItems()[0];\n\n      return this._showDialog(this._dialogManager.getRenameItemDialog(), itemInfo.fileItem.name).then(function (_ref6) {\n        var name = _ref6.name;\n        return _this8._controller.renameItem(itemInfo, name);\n      });\n    }\n  }, {\n    key: \"_tryDelete\",\n    value: function (itemInfos) {\n      var _this9 = this;\n\n      itemInfos = itemInfos || this._model.getMultipleSelectedItems();\n      var itemName = itemInfos[0].fileItem.name;\n      var itemCount = itemInfos.length;\n      return this._showDialog(this._dialogManager.getDeleteItemDialog(), {\n        itemName: itemName,\n        itemCount: itemCount\n      }).then(function () {\n        return _this9._controller.deleteItems(itemInfos);\n      });\n    }\n  }, {\n    key: \"_tryMove\",\n    value: function (itemInfos) {\n      var _this10 = this;\n\n      itemInfos = itemInfos || this._model.getMultipleSelectedItems();\n      return this._showDialog(this._dialogManager.getMoveDialog()).then(function (_ref7) {\n        var folder = _ref7.folder;\n        return _this10._controller.moveItems(itemInfos, folder);\n      });\n    }\n  }, {\n    key: \"_tryCopy\",\n    value: function (itemInfos) {\n      var _this11 = this;\n\n      itemInfos = itemInfos || this._model.getMultipleSelectedItems();\n      return this._showDialog(this._dialogManager.getCopyDialog()).then(function (_ref8) {\n        var folder = _ref8.folder;\n        return _this11._controller.copyItems(itemInfos, folder);\n      });\n    }\n  }, {\n    key: \"_tryUpload\",\n    value: function (destinationFolder) {\n      this._uploadDirectoryInfo = destinationFolder && destinationFolder[0] || this._getCurrentDirectory();\n\n      this._fileUploader.tryUpload();\n    }\n  }, {\n    key: \"_download\",\n    value: function (itemInfos) {\n      itemInfos = itemInfos || this._model.getMultipleSelectedItems();\n      return this._controller.downloadItems(itemInfos);\n    }\n  }, {\n    key: \"_getItemContent\",\n    value: function (itemInfos) {\n      itemInfos = itemInfos || this._model.getMultipleSelectedItems();\n      return this._controller.getItemContent(itemInfos);\n    }\n  }, {\n    key: \"_completeAction\",\n    value: function (operationInfo, context) {\n      this._notificationControl.completeOperation(operationInfo, context.completionMessage, !context.success, context.statusText);\n\n      if (context.hasModifiedItems()) {\n        this._raiseOnSuccess(context.onlyFiles);\n      }\n    }\n  }, {\n    key: \"_handleActionError\",\n    value: function (operationInfo, context, errorInfo) {\n      operationInfo.hasError = true;\n\n      if (context.singleRequest) {\n        this._handleSingleRequestActionError(operationInfo, context, errorInfo);\n      } else {\n        this._handleMultipleRequestActionError(operationInfo, context, errorInfo);\n      }\n    }\n  }, {\n    key: \"_handleSingleRequestActionError\",\n    value: function (operationInfo, context, errorInfo) {\n      var itemInfo = context.getItemForSingleRequestError();\n\n      var errorText = this._getErrorText(errorInfo, itemInfo);\n\n      context.processSingleRequestError(errorText);\n\n      var operationErrorInfo = this._getOperationErrorInfo(context);\n\n      this._notificationControl.completeSingleOperationWithError(operationInfo, operationErrorInfo);\n\n      if (context.multipleItems) {\n        this._raiseOnSuccess(context.onlyFiles);\n      }\n    }\n  }, {\n    key: \"_handleMultipleRequestActionError\",\n    value: function (operationInfo, context, errorInfo) {\n      var itemInfo = context.getItemForMultipleRequestError(errorInfo.index);\n\n      var errorText = this._getErrorText(errorInfo, itemInfo);\n\n      context.processMultipleRequestError(errorInfo.index, errorText);\n\n      var operationErrorInfo = this._getOperationErrorInfo(context);\n\n      this._notificationControl.addOperationDetailsError(operationInfo, operationErrorInfo);\n    }\n  }, {\n    key: \"_getOperationErrorInfo\",\n    value: function (context) {\n      var detailError = context.errorState.currentDetailError;\n      return {\n        commonErrorText: context.errorState.commonErrorText,\n        item: detailError.itemInfo ? this._getItemProgressDisplayInfo(detailError.itemInfo) : null,\n        itemIndex: detailError.itemIndex,\n        detailErrorText: detailError.errorText\n      };\n    }\n  }, {\n    key: \"_getErrorText\",\n    value: function (errorInfo, itemInfo) {\n      var itemName = itemInfo ? itemInfo.fileItem.name : null;\n\n      var errorText = _uiFile_manager5.FileManagerMessages.get(errorInfo.errorId, itemName);\n\n      var errorArgs = {\n        fileSystemItem: itemInfo ? itemInfo.fileItem : null,\n        errorCode: errorInfo.errorId,\n        errorText: errorText\n      };\n\n      this._raiseOnError(errorArgs);\n\n      return errorArgs.errorText;\n    }\n  }, {\n    key: \"_getItemProgressDisplayInfo\",\n    value: function (itemInfo) {\n      return {\n        commonText: itemInfo.fileItem.name,\n        imageUrl: this._getItemThumbnail(itemInfo)\n      };\n    }\n  }, {\n    key: \"_showDialog\",\n    value: function (dialog, dialogArgument) {\n      this._dialogDeferred = new _deferred.Deferred();\n      dialog.show(dialogArgument);\n      return this._dialogDeferred.promise();\n    }\n  }, {\n    key: \"_onDialogClosed\",\n    value: function (e) {\n      var result = e.dialogResult;\n\n      if (result) {\n        this._dialogDeferred.resolve(result);\n      } else {\n        this._dialogDeferred.reject();\n      }\n    }\n  }, {\n    key: \"_getItemThumbnail\",\n    value: function (item) {\n      var itemThumbnailGetter = this.option(\"getItemThumbnail\");\n\n      if (!itemThumbnailGetter) {\n        return null;\n      }\n\n      var info = itemThumbnailGetter(item);\n      return info ? info.thumbnail : null;\n    }\n  }, {\n    key: \"_initActions\",\n    value: function () {\n      this._actions = {\n        onSuccess: this._createActionByOption(\"onSuccess\"),\n        onError: this._createActionByOption(\"onError\"),\n        onCreating: this._createActionByOption(\"onCreating\")\n      };\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function () {\n      return (0, _extend.extend)(_get(_getPrototypeOf(FileManagerEditingControl.prototype), \"_getDefaultOptions\", this).call(this), {\n        model: {\n          getMultipleSelectedItems: null\n        },\n        notificationControl: null,\n        getItemThumbnail: null,\n        onSuccess: null,\n        onError: null,\n        onCreating: null\n      });\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function (args) {\n      var name = args.name;\n\n      switch (name) {\n        case \"model\":\n          this.repaint();\n          break;\n\n        case \"notificationControl\":\n          this._initNotificationControl(args.value);\n\n          break;\n\n        case \"getItemThumbnail\":\n          break;\n\n        case \"onSuccess\":\n        case \"onError\":\n        case \"onCreating\":\n          this._actions[name] = this._createActionByOption(name);\n          break;\n\n        default:\n          _get(_getPrototypeOf(FileManagerEditingControl.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }, {\n    key: \"_raiseOnSuccess\",\n    value: function (updatedOnlyFiles) {\n      this._actions.onSuccess({\n        updatedOnlyFiles: updatedOnlyFiles\n      });\n    }\n  }, {\n    key: \"_raiseOnError\",\n    value: function (args) {\n      this._actions.onError(args);\n    }\n  }, {\n    key: \"_getCurrentDirectory\",\n    value: function () {\n      return this._controller.getCurrentDirectory();\n    }\n  }]);\n\n  return FileManagerEditingControl;\n}(_ui2.default);\n\nvar FileManagerActionContext = function () {\n  function FileManagerActionContext(actionMetadata, itemInfos, directoryInfo) {\n    _classCallCheck(this, FileManagerActionContext);\n\n    this._actionMetadata = actionMetadata;\n    this._itemInfos = itemInfos;\n    this._onlyFiles = !this._actionMetadata.affectsAllItems && this._itemInfos.every(function (info) {\n      return !info.fileItem.isDirectory;\n    });\n    this._items = this._itemInfos.map(function (itemInfo) {\n      return itemInfo.fileItem;\n    });\n    this._multipleItems = this._items.length > 1;\n    this._location = directoryInfo.getDisplayName();\n    this._singleRequest = true;\n    this._completedItems = [];\n    this._commonProgress = 0;\n    this._errorState = {\n      failedCount: 0\n    };\n  }\n\n  _createClass(FileManagerActionContext, [{\n    key: \"completeOperationItem\",\n    value: function (itemIndex) {\n      if (this._singleRequest) {\n        this._completedItems = _toConsumableArray(this._items);\n      } else {\n        var item = this._items[itemIndex];\n\n        this._completedItems.push(item);\n      }\n\n      if (!this._actionMetadata.allowItemProgress) {\n        this._commonProgress = this._completedItems.length / this._items.length * 100;\n      }\n    }\n  }, {\n    key: \"processSingleRequestError\",\n    value: function (errorText) {\n      this._errorState.failedCount = 1;\n      this._errorState.commonErrorText = this._multipleItems ? this._actionMetadata.commonErrorMessage : this._actionMetadata.singleItemErrorMessage;\n      var itemIndex = this._multipleItems ? -1 : 1;\n      var itemInfo = this.getItemForSingleRequestError();\n\n      this._setCurrentDetailError(itemIndex, itemInfo, errorText);\n    }\n  }, {\n    key: \"processMultipleRequestError\",\n    value: function (itemIndex, errorText) {\n      this._errorState.failedCount++;\n      this._errorState.commonErrorText = this._errorState.failedCount > 1 ? (0, _string.format)(this._actionMetadata.multipleItemsErrorMessage, this._errorState.failedCount) : this._actionMetadata.singleItemErrorMessage;\n      var itemInfo = this.getItemForMultipleRequestError(itemIndex);\n\n      this._setCurrentDetailError(itemIndex, itemInfo, errorText);\n    }\n  }, {\n    key: \"hasModifiedItems\",\n    value: function () {\n      return this._hasCompletedItems() || this._singleRequest && !this.success && this._multipleItems;\n    }\n  }, {\n    key: \"getItemForSingleRequestError\",\n    value: function () {\n      return this._multipleItems ? null : this._itemInfos[0];\n    }\n  }, {\n    key: \"getItemForMultipleRequestError\",\n    value: function (itemIndex) {\n      return this._itemInfos[itemIndex];\n    }\n  }, {\n    key: \"_setCurrentDetailError\",\n    value: function (itemIndex, itemInfo, errorText) {\n      this._errorState.currentDetailError = {\n        itemIndex: itemIndex,\n        itemInfo: itemInfo,\n        errorText: errorText\n      };\n    }\n  }, {\n    key: \"_hasCompletedItems\",\n    value: function () {\n      return this._completedItems.length > 0;\n    }\n  }, {\n    key: \"actionMetadata\",\n    get: function () {\n      return this._actionMetadata;\n    }\n  }, {\n    key: \"itemInfos\",\n    get: function () {\n      return this._itemInfos;\n    }\n  }, {\n    key: \"errorState\",\n    get: function () {\n      return this._errorState;\n    }\n  }, {\n    key: \"singleRequest\",\n    get: function () {\n      return this._singleRequest;\n    },\n    set: function (value) {\n      this._singleRequest = value;\n    }\n  }, {\n    key: \"multipleItems\",\n    get: function () {\n      return this._multipleItems;\n    }\n  }, {\n    key: \"onlyFiles\",\n    get: function () {\n      return this._onlyFiles;\n    }\n  }, {\n    key: \"processingMessage\",\n    get: function () {\n      return this._multipleItems ? (0, _string.format)(this._actionMetadata.multipleItemsProcessingMessage, this._items.length, this._location) : (0, _string.format)(this._actionMetadata.singleItemProcessingMessage, this._location);\n    }\n  }, {\n    key: \"successMessage\",\n    get: function () {\n      if (this._hasCompletedItems()) {\n        return this._multipleItems ? (0, _string.format)(this._actionMetadata.multipleItemsSuccessMessage, this._completedItems.length, this._location) : (0, _string.format)(this._actionMetadata.singleItemSuccessMessage, this._location);\n      } else {\n        return this._multipleItems ? (0, _string.format)(this._actionMetadata.multipleItemsErrorMessage, this._items.length) : this._actionMetadata.singleItemErrorMessage;\n      }\n    }\n  }, {\n    key: \"completionMessage\",\n    get: function () {\n      return this.success ? this.successMessage : this.errorState.commonErrorText;\n    }\n  }, {\n    key: \"statusText\",\n    get: function () {\n      return this.success && !this._hasCompletedItems() ? this._actionMetadata.canceledMessage : void 0;\n    }\n  }, {\n    key: \"commonProgress\",\n    get: function () {\n      return this._commonProgress;\n    }\n  }, {\n    key: \"success\",\n    get: function () {\n      return !this._errorState.failedCount;\n    }\n  }]);\n\n  return FileManagerActionContext;\n}();\n\nmodule.exports = FileManagerEditingControl;","map":null,"metadata":{},"sourceType":"script"}