{"ast":null,"code":"import { isNullOrUndefined, isBlazor } from '@syncfusion/ej2-base';\nimport { iterateArrayOrObject } from '../base/util';\nimport * as events from '../base/constant';\n/**\n * The `ShowHide` module is used to control column visibility.\n */\n\nvar ShowHide =\n/** @class */\nfunction () {\n  /**\n   * Constructor for the show hide module.\n   * @hidden\n   */\n  function ShowHide(parent) {\n    this.parent = parent;\n  }\n  /**\n   * Shows a column by column name.\n   * @param  {string|string[]} columnName - Defines a single or collection of column names to show.\n   * @param  {string} showBy - Defines the column key either as field name or header text.\n   * @return {void}\n   */\n\n\n  ShowHide.prototype.show = function (columnName, showBy) {\n    var keys = this.getToggleFields(columnName);\n    var columns = this.getColumns(keys, showBy);\n    this.parent.notify(events.tooltipDestroy, {\n      module: 'edit'\n    });\n\n    for (var i = 0; i < columns.length; i++) {\n      columns[i].visible = true;\n    }\n\n    this.setVisible(columns);\n  };\n  /**\n   * Hides a column by column name.\n   * @param  {string|string[]} columnName - Defines a single or collection of column names to hide.\n   * @param  {string} hideBy - Defines the column key either as field name or header text.\n   * @return {void}\n   */\n\n\n  ShowHide.prototype.hide = function (columnName, hideBy) {\n    var keys = this.getToggleFields(columnName);\n    var columns = this.getColumns(keys, hideBy);\n    this.parent.notify(events.tooltipDestroy, {\n      module: 'edit'\n    });\n\n    for (var i = 0; i < columns.length; i++) {\n      columns[i].visible = false;\n    }\n\n    this.setVisible(columns);\n  };\n\n  ShowHide.prototype.getToggleFields = function (key) {\n    var finalized = [];\n\n    if (typeof key === 'string') {\n      finalized = [key];\n    } else {\n      finalized = key;\n    }\n\n    return finalized;\n  };\n\n  ShowHide.prototype.getColumns = function (keys, getKeyBy) {\n    var _this = this;\n\n    var columns = iterateArrayOrObject(keys, function (key, index) {\n      return iterateArrayOrObject(_this.parent.columnModel, function (item, index) {\n        if (item[getKeyBy] === key) {\n          return item;\n        }\n\n        return undefined;\n      })[0];\n    });\n    return columns;\n  };\n  /**\n   * Shows or hides columns by given column collection.\n   * @private\n   * @param  {Column[]} columns - Specifies the columns.\n   * @return {void}\n   */\n\n\n  ShowHide.prototype.setVisible = function (columns, changedStateColumns) {\n    var _this = this;\n\n    if (changedStateColumns === void 0) {\n      changedStateColumns = [];\n    }\n\n    changedStateColumns = changedStateColumns.length > 0 ? changedStateColumns : isBlazor() ? JSON.parse(JSON.stringify(columns)) : columns;\n    var args = {\n      requestType: 'columnstate',\n      cancel: false,\n      columns: changedStateColumns\n    };\n    var cancel = 'cancel';\n    this.parent.trigger(events.actionBegin, args, function (showHideArgs) {\n      var currentViewCols = _this.parent.getColumns();\n\n      columns = isNullOrUndefined(columns) ? currentViewCols : columns;\n\n      if (showHideArgs[cancel]) {\n        _this.parent.notify(events.resetColumns, {\n          showHideArgs: showHideArgs\n        });\n\n        if (columns.length > 0) {\n          columns[0].visible = true;\n        }\n\n        return;\n      }\n\n      if (_this.parent.allowSelection && _this.parent.getSelectedRecords().length) {\n        _this.parent.clearSelection();\n      }\n\n      if (_this.parent.enableColumnVirtualization) {\n        var colsInCurrentView = columns.filter(function (col1) {\n          return currentViewCols.some(function (col2) {\n            return col1.field === col2.field;\n          });\n        });\n\n        if (colsInCurrentView.length) {\n          _this.parent.notify(events.columnVisibilityChanged, columns);\n        }\n      } else {\n        _this.parent.notify(events.columnVisibilityChanged, columns);\n      }\n\n      var params = {\n        requestType: 'columnstate',\n        columns: changedStateColumns\n      };\n\n      _this.parent.trigger(events.actionComplete, params);\n\n      if (_this.parent.columnQueryMode !== 'All') {\n        _this.parent.refresh();\n      }\n    });\n  };\n\n  return ShowHide;\n}();\n\nexport { ShowHide };","map":null,"metadata":{},"sourceType":"module"}