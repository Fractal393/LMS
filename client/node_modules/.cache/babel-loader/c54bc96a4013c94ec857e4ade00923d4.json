{"ast":null,"code":"/**\r\n * DevExtreme (file_management/file_system_item.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _type = require(\"../core/utils/type\");\n\nvar _utils = require(\"./utils\");\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) {\n    return;\n  }\n\n  if (\"string\" === typeof o) {\n    return _arrayLikeToArray(o, minLen);\n  }\n\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n\n  if (\"Object\" === n && o.constructor) {\n    n = o.constructor.name;\n  }\n\n  if (\"Map\" === n || \"Set\" === n) {\n    return Array.from(o);\n  }\n\n  if (\"Arguments\" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) {\n    return _arrayLikeToArray(o, minLen);\n  }\n}\n\nfunction _iterableToArray(iter) {\n  if (\"undefined\" !== typeof Symbol && Symbol.iterator in Object(iter)) {\n    return Array.from(iter);\n  }\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    return _arrayLikeToArray(arr);\n  }\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (null == len || len > arr.length) {\n    len = arr.length;\n  }\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nvar FileSystemItem = function () {\n  function FileSystemItem() {\n    _classCallCheck(this, FileSystemItem);\n\n    var ctor = (0, _type.isString)(arguments[0]) ? this._publicCtor : this._internalCtor;\n    ctor.apply(this, arguments);\n  }\n\n  _createClass(FileSystemItem, [{\n    key: \"_internalCtor\",\n    value: function (pathInfo, name, isDirectory) {\n      this.name = name || \"\";\n      this.pathInfo = pathInfo && _toConsumableArray(pathInfo) || [];\n      this.parentPath = this._getPathByPathInfo(this.pathInfo);\n      this.relativeName = (0, _utils.pathCombine)(this.parentPath, name);\n      this.key = this._getPathByPathInfo(this.getFullPathInfo(), true);\n      this.path = (0, _utils.pathCombine)(this.parentPath, name);\n      this.pathKeys = this.pathInfo.map(function (_ref) {\n        var key = _ref.key;\n        return key;\n      });\n\n      if (!this.isRoot()) {\n        this.pathKeys.push(this.key);\n      }\n\n      this._initialize(isDirectory);\n    }\n  }, {\n    key: \"_publicCtor\",\n    value: function (path, isDirectory, pathKeys) {\n      this.path = path || \"\";\n      this.pathKeys = pathKeys || [];\n      var pathInfo = [];\n      var parts = (0, _utils.getPathParts)(path, true);\n\n      for (var i = 0; i < parts.length - 1; i++) {\n        var part = parts[i];\n        var pathInfoPart = {\n          key: this.pathKeys[i] || part,\n          name: (0, _utils.getName)(part)\n        };\n        pathInfo.push(pathInfoPart);\n      }\n\n      this.pathInfo = pathInfo;\n      this.relativeName = path;\n      this.name = (0, _utils.getName)(path);\n      this.key = this.pathKeys.length ? this.pathKeys[this.pathKeys.length - 1] : path;\n      this.parentPath = parts.length > 1 ? parts[parts.length - 2] : \"\";\n\n      this._initialize(isDirectory);\n    }\n  }, {\n    key: \"_initialize\",\n    value: function (isDirectory) {\n      this.isDirectory = !!isDirectory;\n      this.size = 0;\n      this.dateModified = new Date();\n      this.thumbnail = \"\";\n      this.tooltipText = \"\";\n    }\n  }, {\n    key: \"getFullPathInfo\",\n    value: function () {\n      var pathInfo = _toConsumableArray(this.pathInfo);\n\n      if (!this.isRoot()) {\n        pathInfo.push({\n          key: this.key,\n          name: this.name\n        });\n      }\n\n      return pathInfo;\n    }\n  }, {\n    key: \"isRoot\",\n    value: function () {\n      return \"\" === this.path;\n    }\n  }, {\n    key: \"getFileExtension\",\n    value: function () {\n      return this.isDirectory ? \"\" : (0, _utils.getFileExtension)(this.name);\n    }\n  }, {\n    key: \"equals\",\n    value: function (item) {\n      return item && this.key === item.key;\n    }\n  }, {\n    key: \"createClone\",\n    value: function () {\n      var result = new FileSystemItem(this.pathInfo, this.name, this.isDirectory);\n      result.key = this.key;\n      result.size = this.size;\n      result.dateModified = this.dateModified;\n      result.thumbnail = this.thumbnail;\n      result.tooltipText = this.tooltipText;\n      result.hasSubDirectories = this.hasSubDirectories;\n      result.dataItem = this.dataItem;\n      return result;\n    }\n  }, {\n    key: \"_getPathByPathInfo\",\n    value: function (pathInfo, escape) {\n      return pathInfo.map(function (info) {\n        return escape ? (0, _utils.getEscapedFileName)(info.name) : info.name;\n      }).join(_utils.PATH_SEPARATOR);\n    }\n  }]);\n\n  return FileSystemItem;\n}();\n\nmodule.exports = FileSystemItem;\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}