{"ast":null,"code":"/**\n * FloatLable Moduel\n * Specifies whether to display the floating label above the input element.\n */\nimport { removeClass, addClass, detach } from '@syncfusion/ej2-base';\nimport { attributes, isNullOrUndefined, createElement, SanitizeHtmlHelper } from '@syncfusion/ej2-base';\nvar FLOATLINE = 'e-float-line';\nvar FLOATTEXT = 'e-float-text';\nvar LABELTOP = 'e-label-top';\nvar LABELBOTTOM = 'e-label-bottom';\n/**\n * Function to create Float Label element.\n * @param overAllWrapper - overall wrapper of multiselect.\n * @param element - the given html element.\n * @param inputElement - specify the input wrapper.\n * @param value - Value of the MultiSelect.\n * @param floatLabelType - Specify the FloatLabel Type.\n * @param placeholder - Specify the PlaceHolder text.\n */\n\nexport function createFloatLabel(overAllWrapper, searchWrapper, element, inputElement, value, floatLabelType, placeholder) {\n  var floatLinelement;\n  var floatLabelElement;\n  floatLinelement = createElement('span', {\n    className: FLOATLINE\n  });\n  floatLabelElement = createElement('label', {\n    className: FLOATTEXT\n  });\n\n  if (!isNullOrUndefined(element.id) && element.id !== '') {\n    floatLabelElement.id = 'label_' + element.id.replace(/ /g, '_');\n    attributes(element, {\n      'aria-labelledby': floatLabelElement.id\n    });\n  }\n\n  if (!isNullOrUndefined(inputElement.placeholder) && inputElement.placeholder !== '') {\n    floatLabelElement.innerText = SanitizeHtmlHelper.sanitize(inputElement.placeholder);\n    inputElement.removeAttribute('placeholder');\n  }\n\n  floatLabelElement.innerText = SanitizeHtmlHelper.sanitize(placeholder);\n  searchWrapper.appendChild(floatLinelement);\n  searchWrapper.appendChild(floatLabelElement);\n  overAllWrapper.classList.add('e-float-input');\n  updateFloatLabelState(value, floatLabelElement);\n\n  if (floatLabelType === 'Always') {\n    if (floatLabelElement.classList.contains(LABELBOTTOM)) {\n      removeClass([floatLabelElement], LABELBOTTOM);\n    }\n\n    addClass([floatLabelElement], LABELTOP);\n  }\n}\n/**\n * Function to update status of the Float Label element.\n * @param value - Value of the MultiSelect.\n * @param label - float label element.\n */\n\nexport function updateFloatLabelState(value, label) {\n  if (value && value.length > 0) {\n    addClass([label], LABELTOP);\n    removeClass([label], LABELBOTTOM);\n  } else {\n    removeClass([label], LABELTOP);\n    addClass([label], LABELBOTTOM);\n  }\n}\n/**\n * Function to remove Float Label element.\n * @param overAllWrapper - overall wrapper of multiselect.\n * @param componentWrapper - wrapper element of multiselect.\n * @param searchWrapper - search wrapper of multiselect.\n * @param inputElement - specify the input wrapper.\n * @param value - Value of the MultiSelect.\n * @param floatLabelType - Specify the FloatLabel Type.\n * @param placeholder - Specify the PlaceHolder text.\n */\n\nexport function removeFloating(overAllWrapper, componentWrapper, searchWrapper, inputElement, value, floatLabelType, placeholder) {\n  var placeholderElement = componentWrapper.querySelector('.' + FLOATTEXT);\n  var floatLine = componentWrapper.querySelector('.' + FLOATLINE);\n  var placeholderText;\n\n  if (!isNullOrUndefined(placeholderElement)) {\n    placeholderText = placeholderElement.innerText;\n    detach(searchWrapper.querySelector('.' + FLOATTEXT));\n    setPlaceHolder(value, inputElement, placeholderText);\n\n    if (!isNullOrUndefined(floatLine)) {\n      detach(searchWrapper.querySelector('.' + FLOATLINE));\n    }\n  } else {\n    placeholderText = placeholder !== null ? placeholder : '';\n    setPlaceHolder(value, inputElement, placeholderText);\n  }\n\n  overAllWrapper.classList.remove('e-float-input');\n}\n/**\n * Function to set the placeholder to the element.\n * @param value - Value of the MultiSelect.\n * @param inputElement - specify the input wrapper.\n * @param placeholder - Specify the PlaceHolder text.\n */\n\nexport function setPlaceHolder(value, inputElement, placeholder) {\n  if (value && value.length) {\n    inputElement.placeholder = '';\n  } else {\n    inputElement.placeholder = placeholder;\n  }\n}\n/**\n * Function for focusing the Float Element.\n * @param overAllWrapper - overall wrapper of multiselect.\n * @param componentWrapper - wrapper element of multiselect.\n */\n\nexport function floatLabelFocus(overAllWrapper, componentWrapper) {\n  overAllWrapper.classList.add('e-input-focus');\n  var label = componentWrapper.querySelector('.' + FLOATTEXT);\n\n  if (!isNullOrUndefined(label)) {\n    addClass([label], LABELTOP);\n\n    if (label.classList.contains(LABELBOTTOM)) {\n      removeClass([label], LABELBOTTOM);\n    }\n  }\n}\n/**\n * Function to focus the Float Label element.\n * @param overAllWrapper - overall wrapper of multiselect.\n * @param componentWrapper - wrapper element of multiselect.\n * @param value - Value of the MultiSelect.\n * @param floatLabelType - Specify the FloatLabel Type.\n * @param placeholder - Specify the PlaceHolder text.\n */\n\nexport function floatLabelBlur(overAllWrapper, componentWrapper, value, floatLabelType, placeholder) {\n  overAllWrapper.classList.remove('e-input-focus');\n  var label = componentWrapper.querySelector('.' + FLOATTEXT);\n\n  if (value && value.length <= 0 && floatLabelType === 'Auto' && !isNullOrUndefined(label)) {\n    if (label.classList.contains(LABELTOP)) {\n      removeClass([label], LABELTOP);\n    }\n\n    addClass([label], LABELBOTTOM);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}