{"ast":null,"code":"/**\r\n * DevExtreme (ui/file_manager/ui.file_manager.command_manager.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FileManagerCommandManager = void 0;\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _message = require(\"../../localization/message\");\n\nvar _message2 = _interopRequireDefault(_message);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nvar FileManagerCommandManager = exports.FileManagerCommandManager = function () {\n  function FileManagerCommandManager(permissions) {\n    _classCallCheck(this, FileManagerCommandManager);\n\n    this._actions = {};\n    this._permissions = permissions || {};\n\n    this._initCommands();\n  }\n\n  _createClass(FileManagerCommandManager, [{\n    key: \"_initCommands\",\n    value: function () {\n      var _this = this;\n\n      this._commands = [{\n        name: \"create\",\n        text: _message2.default.format(\"dxFileManager-commandCreate\"),\n        icon: \"newfolder\",\n        enabled: this._permissions.create,\n        noFileItemRequired: true\n      }, {\n        name: \"rename\",\n        text: _message2.default.format(\"dxFileManager-commandRename\"),\n        icon: \"rename\",\n        enabled: this._permissions.rename,\n        isSingleFileItemCommand: true\n      }, {\n        name: \"move\",\n        text: _message2.default.format(\"dxFileManager-commandMove\"),\n        icon: \"movetofolder\",\n        enabled: this._permissions.move\n      }, {\n        name: \"copy\",\n        text: _message2.default.format(\"dxFileManager-commandCopy\"),\n        icon: \"copy\",\n        enabled: this._permissions.copy\n      }, {\n        name: \"delete\",\n        text: _message2.default.format(\"dxFileManager-commandDelete\"),\n        icon: \"trash\",\n        enabled: this._permissions.delete\n      }, {\n        name: \"download\",\n        text: _message2.default.format(\"dxFileManager-commandDownload\"),\n        icon: \"download\",\n        enabled: this._permissions.download\n      }, {\n        name: \"upload\",\n        text: _message2.default.format(\"dxFileManager-commandUpload\"),\n        icon: \"upload\",\n        enabled: this._permissions.upload,\n        noFileItemRequired: true\n      }, {\n        name: \"refresh\",\n        text: _message2.default.format(\"dxFileManager-commandRefresh\"),\n        icon: \"dx-filemanager-i dx-filemanager-i-refresh\",\n        enabled: true,\n        noFileItemRequired: true\n      }, {\n        name: \"thumbnails\",\n        text: _message2.default.format(\"dxFileManager-commandThumbnails\"),\n        icon: \"mediumiconslayout\",\n        enabled: true,\n        noFileItemRequired: true\n      }, {\n        name: \"details\",\n        text: _message2.default.format(\"dxFileManager-commandDetails\"),\n        icon: \"detailslayout\",\n        enabled: true,\n        noFileItemRequired: true\n      }, {\n        name: \"clearSelection\",\n        text: _message2.default.format(\"dxFileManager-commandClearSelection\"),\n        icon: \"remove\",\n        enabled: true\n      }, {\n        name: \"showNavPane\",\n        hint: _message2.default.format(\"dxFileManager-commandShowNavPane\"),\n        icon: \"menu\",\n        enabled: false,\n        noFileItemRequired: true\n      }];\n      this._commandMap = {};\n\n      this._commands.forEach(function (command) {\n        _this._commandMap[command.name] = command;\n      });\n    }\n  }, {\n    key: \"registerActions\",\n    value: function (actions) {\n      this._actions = (0, _extend.extend)(this._actions, actions);\n    }\n  }, {\n    key: \"executeCommand\",\n    value: function (command, arg) {\n      var commandName = (0, _type.isString)(command) ? command : command.name;\n      var action = this._actions[commandName];\n\n      if (action) {\n        return action(arg);\n      }\n    }\n  }, {\n    key: \"setCommandEnabled\",\n    value: function (commandName, enabled) {\n      var command = this.getCommandByName(commandName);\n\n      if (command) {\n        command.enabled = enabled;\n      }\n    }\n  }, {\n    key: \"getCommandByName\",\n    value: function (name) {\n      return this._commandMap[name];\n    }\n  }, {\n    key: \"isCommandAvailable\",\n    value: function (commandName, itemInfos) {\n      var command = this.getCommandByName(commandName);\n\n      if (!command || !command.enabled) {\n        return false;\n      }\n\n      if (command.noFileItemRequired) {\n        return true;\n      }\n\n      var itemsLength = itemInfos && itemInfos.length || 0;\n\n      if (0 === itemsLength || itemInfos.some(function (item) {\n        return item.fileItem.isRoot() || item.fileItem.isParentFolder;\n      })) {\n        return false;\n      }\n\n      if (\"download\" === commandName) {\n        return itemInfos.every(function (itemInfo) {\n          return !itemInfo.fileItem.isDirectory;\n        });\n      }\n\n      return !command.isSingleFileItemCommand || 1 === itemsLength;\n    }\n  }]);\n\n  return FileManagerCommandManager;\n}();","map":null,"metadata":{},"sourceType":"script"}