{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useFileActionProps = exports.useFileActionTrigger = exports.useFileActions = void 0;\n\nvar react_1 = require(\"react\");\n\nvar recoil_1 = require(\"recoil\");\n\nvar file_actions_recoil_1 = require(\"../recoil/file-actions.recoil\");\n\nvar files_recoil_1 = require(\"../recoil/files.recoil\");\n\nvar options_recoil_1 = require(\"../recoil/options.recoil\");\n\nvar search_recoil_1 = require(\"../recoil/search.recoil\");\n\nvar sort_recoil_1 = require(\"../recoil/sort.recoil\");\n\nvar icons_types_1 = require(\"../types/icons.types\");\n\nvar sort_types_1 = require(\"../types/sort.types\");\n\nvar file_action_handlers_1 = require(\"./file-action-handlers\");\n\nvar file_actions_definitions_1 = require(\"./file-actions-definitions\");\n\nvar file_helper_1 = require(\"./file-helper\");\n\nvar hooks_helpers_1 = require(\"./hooks-helpers\");\n\nexports.useFileActions = function (fileActions, externalFileActonHandler) {\n  // Recoil state: Put file actions and file action map into state\n  var setFileActions = recoil_1.useSetRecoilState(file_actions_recoil_1.fileActionsState);\n  var setFileActionMap = recoil_1.useSetRecoilState(file_actions_recoil_1.fileActionMapState);\n  react_1.useEffect(function () {\n    var fileActionMap = {};\n\n    for (var _i = 0, fileActions_1 = fileActions; _i < fileActions_1.length; _i++) {\n      var action = fileActions_1[_i];\n      fileActionMap[action.id] = action;\n    }\n\n    setFileActions(fileActions);\n    setFileActionMap(fileActionMap);\n  }, [fileActions, setFileActions, setFileActionMap]); // Prepare file action dispatcher (used to dispatch actions to users)\n\n  var internalFileActionDispatcher = file_action_handlers_1.useInternalFileActionDispatcher(externalFileActonHandler); // Recoil state: Put file action dispatcher into Recoil state, in a way that will\n  // not cause unnecessary re-renders.\n\n  var safeInternalFileActionDispatcher = hooks_helpers_1.useRefCallbackWithErrorHandling(internalFileActionDispatcher, 'the internal file action requester');\n  var setDispatchFileAction = recoil_1.useSetRecoilState(file_actions_recoil_1.dispatchFileActionState);\n  react_1.useEffect(function () {\n    return setDispatchFileAction(function () {\n      return safeInternalFileActionDispatcher;\n    });\n  }, [safeInternalFileActionDispatcher, setDispatchFileAction]); // Prepare file action requester (used to request a file action to be dispatched\n  // internally)\n\n  var internalFileActionRequester = file_action_handlers_1.useInternalFileActionRequester(); // Recoil state: Put file action requester into Recoil state, in a way that will\n  // not cause unnecessary re-renders.\n\n  var safeInternalFileActionRequester = hooks_helpers_1.useRefCallbackWithErrorHandling(internalFileActionRequester, 'the internal file action requester');\n  var setRequestFileAction = recoil_1.useSetRecoilState(file_actions_recoil_1.requestFileActionState);\n  react_1.useEffect(function () {\n    return setRequestFileAction(function () {\n      return safeInternalFileActionRequester;\n    });\n  }, [safeInternalFileActionRequester, setRequestFileAction]);\n  return {\n    internalFileActionDispatcher: internalFileActionDispatcher,\n    internalFileActionRequester: internalFileActionRequester\n  };\n};\n\nexports.useFileActionTrigger = function (fileActionId) {\n  var requestFileAction = recoil_1.useRecoilValue(file_actions_recoil_1.requestFileActionState);\n  return react_1.useCallback(function () {\n    return requestFileAction(fileActionId);\n  }, [fileActionId, requestFileAction]);\n};\n\nexports.useFileActionProps = function (fileActionId) {\n  var parentFolder = recoil_1.useRecoilValue(files_recoil_1.parentFolderState);\n  var sortConfig = recoil_1.useRecoilValue(sort_recoil_1.sortConfigState);\n  var optionMap = recoil_1.useRecoilValue(options_recoil_1.optionMapState);\n  var searchBarVisible = recoil_1.useRecoilValue(search_recoil_1.searchBarVisibleState);\n  var action = recoil_1.useRecoilValue(file_actions_recoil_1.fileActionDataState(fileActionId));\n  var actionSelectionSize = recoil_1.useRecoilValue(file_actions_recoil_1.fileActionSelectedFilesCountState(fileActionId));\n  var actionSelectionEmpty = actionSelectionSize === 0;\n  return react_1.useMemo(function () {\n    var _a, _b;\n\n    if (!action) return {\n      icon: null,\n      active: false,\n      disabled: true\n    };\n    var icon = (_b = (_a = action.toolbarButton) === null || _a === void 0 ? void 0 : _a.icon) !== null && _b !== void 0 ? _b : null;\n\n    if (action.sortKeySelector) {\n      if (sortConfig.fileActionId === action.id) {\n        if (sortConfig.order === sort_types_1.SortOrder.Asc) {\n          icon = icons_types_1.ChonkyIconName.sortAsc;\n        } else {\n          icon = icons_types_1.ChonkyIconName.sortDesc;\n        }\n      } else {\n        icon = icons_types_1.ChonkyIconName.circle;\n      }\n    } else if (action.option) {\n      if (optionMap[action.option.id]) {\n        icon = icons_types_1.ChonkyIconName.checkActive;\n      } else {\n        icon = icons_types_1.ChonkyIconName.checkInactive;\n      }\n    }\n\n    var isSearchButtonAndSearchVisible = action.id === file_actions_definitions_1.ChonkyActions.ToggleSearch.id && searchBarVisible;\n    var isSortButtonAndCurrentSort = action.id === sortConfig.fileActionId;\n    var isOptionAndEnabled = action.option ? !!optionMap[action.option.id] : false;\n    var active = isSearchButtonAndSearchVisible || isSortButtonAndCurrentSort || isOptionAndEnabled;\n    var disabled = !!action.requiresSelection && actionSelectionEmpty;\n\n    if (action.id === file_actions_definitions_1.ChonkyActions.OpenParentFolder.id) {\n      // We treat `open_parent_folder` file action as a special case as it\n      // requires the parent folder to be present to work...\n      disabled = disabled || !file_helper_1.FileHelper.isOpenable(parentFolder);\n    }\n\n    return {\n      icon: icon,\n      active: active,\n      disabled: disabled\n    };\n  }, [action, sortConfig, optionMap, searchBarVisible, parentFolder, actionSelectionEmpty]);\n};","map":null,"metadata":{},"sourceType":"script"}