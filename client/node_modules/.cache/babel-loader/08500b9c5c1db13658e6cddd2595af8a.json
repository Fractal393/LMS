{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Input, TextBox } from '@syncfusion/ej2-inputs';\nimport { createCheckBox } from '@syncfusion/ej2-buttons';\nimport { NotifyPropertyChanges, Property, Event } from '@syncfusion/ej2-base';\nimport { Component, EventHandler, attributes, formatUnit, ChildProperty, remove, L10n, extend } from '@syncfusion/ej2-base';\nimport { addClass, removeClass, detach, prepend, Complex, closest, setValue, getValue, compile, append } from '@syncfusion/ej2-base';\nimport { select, selectAll, isNullOrUndefined as isNOU, matches, Browser, KeyboardEvents } from '@syncfusion/ej2-base';\nimport { DataManager, DataUtil } from '@syncfusion/ej2-data';\nimport { Popup } from '@syncfusion/ej2-popups';\nimport { updateBlazorTemplate, resetBlazorTemplate, isBlazor } from '@syncfusion/ej2-base';\nimport { TreeView } from '@syncfusion/ej2-navigations';\nvar RTL = 'e-rtl';\nvar DROPDOWNTREE = 'e-ddt';\nvar HIDDENELEMENT = 'e-ddt-hidden';\nvar DROPDOWNICON = 'e-input-group-icon e-ddt-icon e-icons';\nvar SHOW_CHIP = 'e-show-chip';\nvar SHOW_CLEAR = 'e-show-clear';\nvar SHOW_DD_ICON = 'e-show-dd-icon';\nvar CHIP_INPUT = 'e-chip-input';\nvar INPUTFOCUS = 'e-input-focus';\nvar INPUTGROUP = 'e-input-group';\nvar ICONANIMATION = 'e-icon-anim';\nvar CLOSEICON_CLASS = 'e-clear-icon e-icons';\nvar CHIP_WRAPPER = 'e-chips-wrapper';\nvar CHIP_COLLECTION = 'e-chips-collection';\nvar CHIP = 'e-chips';\nvar CHIP_CONTENT = 'e-chipcontent';\nvar CHIP_CLOSE = 'e-chips-close';\nvar HIDEICON = 'e-icon-hide';\nvar POPUP_CLASS = 'e-ddt e-popup';\nvar PARENTITEM = 'e-list-parent';\nvar CONTENT = 'e-popup-content';\nvar DROPDOWN = 'e-dropdown';\nvar DISABLED = 'e-disabled';\nvar ICONS = 'e-icons';\nvar CHECKALLPARENT = 'e-selectall-parent';\nvar CHECKALLHIDE = 'e-hide-selectall';\nvar BIGGER = 'e-bigger';\nvar SMALL = 'e-small';\nvar ALLTEXT = 'e-all-text';\nvar CHECKBOXFRAME = 'e-frame';\nvar CHECK = 'e-check';\nvar CHECKBOXWRAP = 'e-checkbox-wrapper';\nvar FILTERWRAP = 'e-filter-wrap';\nvar DDTICON = 'e-ddt-icon';\nvar FOOTER = 'e-ddt-footer';\nvar HEADER = 'e-ddt-header';\nvar NODATACONTAINER = 'e-ddt-nodata';\nvar NODATA = 'e-no-data';\nvar HEADERTEMPLATE = 'HeaderTemplate';\nvar FOOTERTEMPLATE = 'FooterTemplate';\nvar NORECORDSTEMPLATE = 'NoRecordsTemplate';\nvar ACTIONFAILURETEMPLATE = 'ActionFailureTemplate';\nvar REMAIN_WRAPPER = 'e-remain';\nvar OVERFLOW_VIEW = 'e-overflow';\nvar SHOW_TEXT = 'e-show-text';\nvar TOTAL_COUNT_WRAPPER = 'e-total-count';\nvar REMAIN_COUNT = 'e-wrap-count';\n\nvar Fields =\n/** @class */\nfunction (_super) {\n  __extends(Fields, _super);\n\n  function Fields() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property('child')], Fields.prototype, \"child\", void 0);\n\n  __decorate([Property([])], Fields.prototype, \"dataSource\", void 0);\n\n  __decorate([Property('expanded')], Fields.prototype, \"expanded\", void 0);\n\n  __decorate([Property('hasChildren')], Fields.prototype, \"hasChildren\", void 0);\n\n  __decorate([Property('htmlAttributes')], Fields.prototype, \"htmlAttributes\", void 0);\n\n  __decorate([Property('iconCss')], Fields.prototype, \"iconCss\", void 0);\n\n  __decorate([Property('imageUrl')], Fields.prototype, \"imageUrl\", void 0);\n\n  __decorate([Property('parentValue')], Fields.prototype, \"parentValue\", void 0);\n\n  __decorate([Property(null)], Fields.prototype, \"query\", void 0);\n\n  __decorate([Property('selected')], Fields.prototype, \"selected\", void 0);\n\n  __decorate([Property(null)], Fields.prototype, \"tableName\", void 0);\n\n  __decorate([Property('text')], Fields.prototype, \"text\", void 0);\n\n  __decorate([Property('tooltip')], Fields.prototype, \"tooltip\", void 0);\n\n  __decorate([Property('value')], Fields.prototype, \"value\", void 0);\n\n  return Fields;\n}(ChildProperty);\n\nexport { Fields };\n\nvar TreeSettings =\n/** @class */\nfunction (_super) {\n  __extends(TreeSettings, _super);\n\n  function TreeSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property(false)], TreeSettings.prototype, \"autoCheck\", void 0);\n\n  __decorate([Property('Auto')], TreeSettings.prototype, \"expandOn\", void 0);\n\n  __decorate([Property(false)], TreeSettings.prototype, \"loadOnDemand\", void 0);\n\n  return TreeSettings;\n}(ChildProperty);\n\nexport { TreeSettings };\n/**\n * The Dropdown Tree control allows you to select single or multiple values from hierarchical data in a tree-like structure.\n * It has several out-of-the-box features, such as data binding, check boxes, templates, filter,\n * UI customization, accessibility, and preselected values.\n * ```html\n *  <input type=\"text\" id=\"tree\"></input>\n * ```\n * ```typescript\n *  let ddtObj: DropDownTree = new DropDownTree();\n *  ddtObj.appendTo(\"#tree\");\n * ```\n */\n\nvar DropDownTree =\n/** @class */\nfunction (_super) {\n  __extends(DropDownTree, _super);\n\n  function DropDownTree(options, element) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.filterTimer = null;\n    _this.isFilteredData = false;\n    _this.isFilterRestore = false;\n    _this.selectedData = [];\n    _this.filterDelayTime = 300;\n    return _this;\n  }\n  /**\n   * Get the properties to be maintained in the persisted state.\n   * @returns string\n   * @hidden\n   */\n\n\n  DropDownTree.prototype.getPersistData = function () {\n    var keyEntity = ['value'];\n    return this.addOnPersist(keyEntity);\n  };\n\n  DropDownTree.prototype.getLocaleName = function () {\n    return 'drop-down-tree';\n  };\n  /**\n   * Initialize the event handler.\n   * @private\n   */\n\n\n  DropDownTree.prototype.preRender = function () {\n    this.inputFocus = false;\n    this.isPopupOpen = false;\n    this.isFirstRender = true;\n    this.isInitialized = false;\n    this.currentText = null;\n    this.currentValue = null;\n    this.oldValue = null;\n    this.removeValue = false;\n    this.selectedText = [];\n    this.treeItems = [];\n    this.dataValue = null;\n    this.isNodeSelected = false;\n    this.isDynamicChange = false;\n    this.clearIconWidth = 0;\n    this.isBlazorPlatForm = isBlazor();\n    this.headerTemplateId = \"\" + this.element.id + HEADERTEMPLATE;\n    this.footerTemplateId = \"\" + this.element.id + FOOTERTEMPLATE;\n    this.actionFailureTemplateId = \"\" + this.element.id + ACTIONFAILURETEMPLATE;\n    this.noRecordsTemplateId = \"\" + this.element.id + NORECORDSTEMPLATE;\n    this.keyConfigs = {\n      escape: 'escape',\n      altUp: 'alt+uparrow',\n      altDown: 'alt+downarrow',\n      tab: 'tab',\n      shiftTab: 'shift+tab',\n      end: 'end',\n      enter: 'enter',\n      home: 'home',\n      moveDown: 'downarrow',\n      moveLeft: 'leftarrow',\n      moveRight: 'rightarrow',\n      moveUp: 'uparrow',\n      ctrlDown: 'ctrl+downarrow',\n      ctrlUp: 'ctrl+uparrow',\n      ctrlEnter: 'ctrl+enter',\n      ctrlHome: 'ctrl+home',\n      ctrlEnd: 'ctrl+end',\n      shiftDown: 'shift+downarrow',\n      shiftUp: 'shift+uparrow',\n      shiftEnter: 'shift+enter',\n      shiftHome: 'shift+home',\n      shiftEnd: 'shift+end',\n      csDown: 'ctrl+shift+downarrow',\n      csUp: 'ctrl+shift+uparrow',\n      csEnter: 'ctrl+shift+enter',\n      csHome: 'ctrl+shift+home',\n      csEnd: 'ctrl+shift+end',\n      space: 'space',\n      ctrlA: 'ctrl+A'\n    };\n  };\n  /**\n   * To Initialize the control rendering\n   * @private\n   */\n\n\n  DropDownTree.prototype.render = function () {\n    this.ensureAutoCheck();\n\n    if (this.element.tagName === 'INPUT') {\n      this.inputEle = this.element;\n\n      if (isNOU(this.inputEle.getAttribute('role'))) {\n        this.inputEle.setAttribute('role', 'textbox');\n      }\n\n      if (isNOU(this.inputEle.getAttribute('type'))) {\n        this.inputEle.setAttribute('type', 'text');\n      }\n    } else {\n      this.inputEle = this.createElement('input', {\n        attrs: {\n          role: 'textbox',\n          type: 'text'\n        }\n      });\n      this.element.parentElement.insertBefore(this.inputEle, this.element);\n    }\n\n    this.inputObj = Input.createInput({\n      element: this.inputEle,\n      floatLabelType: this.floatLabelType,\n      buttons: this.showDropDownIcon ? [DROPDOWNICON] : null,\n      properties: {\n        readonly: true,\n        placeholder: this.placeholder,\n        enabled: this.enabled,\n        cssClass: this.cssClass,\n        enableRtl: this.enableRtl\n      }\n    }, this.createElement);\n    this.inputWrapper = this.inputObj.container;\n\n    if (!this.inputWrapper.classList.contains(INPUTGROUP)) {\n      this.inputWrapper.classList.add(INPUTGROUP);\n    }\n\n    if (this.showDropDownIcon) {\n      this.inputWrapper.classList.add(SHOW_DD_ICON);\n    }\n\n    if (this.element.tagName === this.getDirective()) {\n      this.element.appendChild(this.inputWrapper);\n    }\n\n    this.createHiddenElement();\n    this.createClearIcon();\n    this.inputWrapper.classList.add(DROPDOWNTREE);\n    this.setElementWidth(this.width);\n    this.setAttributes();\n    this.updateDataAttribute();\n    this.setHTMLAttributes();\n    this.popupDiv = this.createElement('div', {\n      className: CONTENT,\n      attrs: {\n        'tabindex': '0'\n      }\n    });\n    this.popupDiv.classList.add(DROPDOWN);\n    this.tree = this.createElement('div', {\n      id: this.element.id + '_tree'\n    });\n    this.popupDiv.appendChild(this.tree);\n    document.body.appendChild(this.popupDiv);\n    this.wireTreeEvents();\n    this.popupDiv.style.display = 'none';\n    this.renderTree();\n    this.isRemoteData = this.fields.dataSource instanceof DataManager;\n\n    if (this.allowMultiSelection || this.showCheckBox) {\n      if (this.mode !== 'Delimiter') {\n        this.createChip();\n      }\n\n      if (!this.wrapText) {\n        this.overFlowWrapper = this.createElement('span', {\n          className: OVERFLOW_VIEW + ' ' + HIDEICON\n        });\n        this.inputWrapper.insertBefore(this.overFlowWrapper, this.hiddenElement);\n\n        if (this.mode !== 'Box') {\n          addClass([this.overFlowWrapper], SHOW_TEXT);\n        }\n      }\n    }\n\n    if (!this.isRemoteData) {\n      this.setTreeValue();\n      this.setTreeText();\n      this.updateHiddenValue();\n      this.setSelectedValue();\n\n      if (!this.wrapText) {\n        this.updateView();\n      }\n    }\n\n    this.wireEvents();\n    var firstUl = select('.' + PARENTITEM, this.treeObj.element);\n\n    if (firstUl && firstUl.getAttribute('aria-multiselectable')) {\n      firstUl.removeAttribute('aria-multiselectable');\n    }\n\n    this.oldValue = this.value;\n    this.isInitialized = true;\n    this.renderComplete();\n  };\n\n  DropDownTree.prototype.ensureAutoCheck = function () {\n    if (this.allowFiltering && this.treeSettings.autoCheck) {\n      this.setProperties({\n        treeSettings: {\n          autoCheck: false\n        }\n      }, true);\n    }\n  };\n\n  DropDownTree.prototype.hideCheckAll = function (flag) {\n    var checkAllEle = !isNOU(this.popupEle) ? this.popupEle.querySelector('.' + CHECKALLPARENT) : null;\n\n    if (!isNOU(checkAllEle)) {\n      if (flag && !checkAllEle.classList.contains(CHECKALLHIDE)) {\n        addClass([checkAllEle], CHECKALLHIDE);\n      } else if (!flag && checkAllEle.classList.contains(CHECKALLHIDE)) {\n        removeClass([checkAllEle], CHECKALLHIDE);\n      }\n    }\n  };\n\n  DropDownTree.prototype.renderFilter = function () {\n    this.filterContainer = this.createElement('div', {\n      id: this.element.id + '_filter_wrap',\n      className: FILTERWRAP\n    });\n    var filterInput = this.createElement('input', {\n      id: this.element.id + '_filter',\n      attrs: {\n        autocomplete: 'off',\n        'aria-label': this.filterBarPlaceholder\n      }\n    });\n    this.filterContainer.appendChild(filterInput);\n    prepend([this.filterContainer], this.popupEle);\n    this.filterObj = new TextBox({\n      value: '',\n      showClearButton: true,\n      placeholder: this.filterBarPlaceholder,\n      input: this.filterChangeHandler.bind(this)\n    });\n    this.filterObj.appendTo('#' + this.element.id + '_filter');\n  };\n\n  DropDownTree.prototype.filterChangeHandler = function (args) {\n    var _this = this;\n\n    if (!isNOU(args.value)) {\n      window.clearTimeout(this.filterTimer);\n      this.filterTimer = window.setTimeout(function () {\n        _this.filterHandler(args.value, args.event);\n      }, this.filterDelayTime);\n    }\n  };\n\n  DropDownTree.prototype.filterHandler = function (value, event) {\n    var _this = this;\n\n    if (!this.isFilteredData) {\n      this.treeData = this.treeObj.getTreeData();\n    }\n\n    var filterFields = this.cloneFields(this.fields);\n    var args = {\n      cancel: false,\n      preventDefaultAction: false,\n      event: event,\n      text: value,\n      fields: filterFields\n    };\n    this.trigger('filtering', args, function (args) {\n      if (!args.cancel) {\n        var flag = false;\n        var fields = void 0;\n        _this.isFilteredData = true;\n\n        if (value === '') {\n          _this.isFilteredData = false;\n          _this.isFilterRestore = true;\n          fields = _this.cloneFields(_this.fields);\n        } else if (args.preventDefaultAction) {\n          fields = args.fields;\n        } else {\n          if (_this.treeDataType === 1) {\n            fields = _this.selfReferencefilter(value, args.fields);\n          } else {\n            if (_this.fields.dataSource instanceof DataManager) {\n              flag = true;\n            } else {\n              fields = _this.nestedFilter(value, args.fields);\n            }\n          }\n        }\n\n        _this.hideCheckAll(_this.isFilteredData);\n\n        if (flag) {\n          return;\n        }\n\n        _this.treeObj.fields = _this.getTreeFields(fields);\n\n        _this.treeObj.dataBind();\n      }\n    });\n  };\n\n  DropDownTree.prototype.nestedFilter = function (value, filteredFields) {\n    var matchedDataSource = [];\n\n    for (var i = 0; i < this.treeData.length; i++) {\n      var filteredChild = this.nestedChildFilter(value, this.treeData[i]);\n\n      if (!isNOU(filteredChild)) {\n        matchedDataSource.push(filteredChild);\n      }\n    }\n\n    filteredFields.dataSource = matchedDataSource;\n    return filteredFields;\n  };\n\n  DropDownTree.prototype.nestedChildFilter = function (value, node) {\n    var children = node[this.fields.child];\n\n    if (isNOU(children)) {\n      return this.isMatchedNode(value, node) ? node : null;\n    } else {\n      var matchedChildren = [];\n\n      for (var i = 0; i < children.length; i++) {\n        var filteredChild = this.nestedChildFilter(value, children[i]);\n\n        if (!isNOU(filteredChild)) {\n          matchedChildren.push(filteredChild);\n        }\n      }\n\n      if (matchedChildren.length !== 0) {\n        node[this.fields.child] = matchedChildren;\n        return node;\n      } else {\n        node[this.fields.child] = null;\n        return this.isMatchedNode(value, node) ? node : null;\n      }\n    }\n  };\n\n  DropDownTree.prototype.selfReferencefilter = function (value, filteredFields) {\n    var matchedData = [];\n    var matchedDataSource = [];\n\n    for (var i = 0; i < this.treeData.length; i++) {\n      if (this.isMatchedNode(value, this.treeData[i])) {\n        matchedData.push(this.treeData[i]);\n      }\n    }\n\n    for (var i = 0; i < matchedData.length; i++) {\n      if (matchedDataSource.indexOf(matchedData[i]) === -1) {\n        matchedDataSource.push(matchedData[i]);\n        var parentId = matchedData[i][this.fields.parentValue];\n\n        while (!isNOU(parentId)) {\n          var parent_1 = null;\n\n          for (var j = 0; j < this.treeData.length; j++) {\n            var value_1 = this.treeData[j][this.fields.value];\n\n            if (!isNOU(value_1) && value_1 === parentId) {\n              parent_1 = this.treeData[j];\n              break;\n            }\n          }\n\n          if (!isNOU(parent_1) && matchedDataSource.indexOf(parent_1) === -1) {\n            matchedDataSource.push(parent_1);\n            parentId = parent_1[this.fields.parentValue];\n          } else {\n            break;\n          }\n        }\n      }\n    }\n\n    filteredFields.dataSource = matchedDataSource;\n    return filteredFields;\n  };\n\n  DropDownTree.prototype.isMatchedNode = function (value, node) {\n    var checkValue = node[this.fields.text];\n\n    if (this.ignoreCase) {\n      checkValue = checkValue.toLowerCase();\n      value = value.toLowerCase();\n    }\n\n    if (this.ignoreAccent) {\n      checkValue = DataUtil.ignoreDiacritics(checkValue);\n      value = DataUtil.ignoreDiacritics(value);\n    }\n\n    if (this.filterType === 'StartsWith') {\n      return checkValue.slice(0, value.length) === value;\n    } else if (this.filterType === 'EndsWith') {\n      return checkValue.slice(-value.length) === value;\n    } else {\n      return checkValue.indexOf(value) !== -1;\n    }\n  };\n  /* To wire events for the dropdown tree */\n\n\n  DropDownTree.prototype.wireEvents = function () {\n    EventHandler.add(this.inputWrapper, 'mouseup', this.dropDownClick, this);\n    EventHandler.add(this.inputWrapper, 'focus', this.focusIn, this);\n    EventHandler.add(this.inputWrapper, 'blur', this.focusOut, this);\n    EventHandler.add(this.inputWrapper, 'mousemove', this.mouseIn, this);\n    EventHandler.add(this.inputWrapper, 'mouseout', this.onMouseLeave, this);\n    EventHandler.add(this.overAllClear, 'mousedown', this.clearAll, this);\n    EventHandler.add(window, 'resize', this.windowResize, this);\n    var formElement = closest(this.inputWrapper, 'form');\n\n    if (formElement) {\n      EventHandler.add(formElement, 'reset', this.resetValueHandler, this);\n    }\n\n    this.keyboardModule = new KeyboardEvents(this.inputWrapper, {\n      keyAction: this.keyActionHandler.bind(this),\n      keyConfigs: this.keyConfigs,\n      eventName: 'keydown'\n    });\n  };\n\n  DropDownTree.prototype.wireTreeEvents = function () {\n    this.keyboardModule = new KeyboardEvents(this.tree, {\n      keyAction: this.treeAction.bind(this),\n      keyConfigs: this.keyConfigs,\n      eventName: 'keydown'\n    });\n  };\n\n  DropDownTree.prototype.wireCheckAllWrapperEvents = function () {\n    this.keyboardModule = new KeyboardEvents(this.checkAllParent, {\n      keyAction: this.checkAllAction.bind(this),\n      keyConfigs: this.keyConfigs,\n      eventName: 'keydown'\n    });\n  };\n  /* To unwire events for the dropdown tree */\n\n\n  DropDownTree.prototype.unWireEvents = function () {\n    EventHandler.remove(this.inputWrapper, 'mouseup', this.dropDownClick);\n    EventHandler.remove(this.inputWrapper, 'focus', this.focusIn);\n    EventHandler.remove(this.inputWrapper, 'blur', this.focusOut);\n    EventHandler.remove(this.inputWrapper, 'mousemove', this.mouseIn);\n    EventHandler.remove(this.inputWrapper, 'mouseout', this.onMouseLeave);\n    EventHandler.remove(this.overAllClear, 'mousedown', this.clearAll);\n    EventHandler.remove(window, 'resize', this.windowResize);\n    var formElement = closest(this.inputWrapper, 'form');\n\n    if (formElement) {\n      EventHandler.remove(formElement, 'reset', this.resetValueHandler);\n    }\n  };\n  /* Trigger when the dropdown is clicked */\n\n\n  DropDownTree.prototype.dropDownClick = function (e) {\n    if (!this.enabled || this.readonly) {\n      return;\n    }\n\n    if (this.isClearButtonClick) {\n      this.isClearButtonClick = false;\n      return;\n    }\n\n    if (!this.wrapText && e.target.classList.contains(CHIP_CLOSE)) {\n      this.removeChip(e);\n    }\n\n    if (this.isPopupOpen) {\n      this.hidePopup();\n    } else {\n      this.focusIn(e);\n      this.renderPopup();\n    }\n\n    this.showOverAllClear();\n  };\n\n  DropDownTree.prototype.mouseIn = function () {\n    if (this.enabled || !this.readonly) {\n      this.showOverAllClear();\n    }\n  };\n\n  DropDownTree.prototype.onMouseLeave = function () {\n    if (!this.inputFocus) {\n      addClass([this.overAllClear], HIDEICON);\n      removeClass([this.inputWrapper], SHOW_CLEAR);\n    }\n  };\n\n  DropDownTree.prototype.getDirective = function () {\n    return 'EJS-DROPDOWNTREE';\n  };\n\n  DropDownTree.prototype.focusOut = function (e) {\n    if (!this.enabled || this.readonly || !this.inputFocus) {\n      return;\n    }\n\n    if ((Browser.isIE || Browser.info.name === 'edge') && e.target === this.inputWrapper) {\n      return;\n    }\n\n    var target = e.relatedTarget;\n\n    if (target !== this.inputEle && isNOU(target) && (e.target !== this.inputWrapper || !this.isPopupOpen)) {\n      this.onFocusOut(e);\n    }\n  };\n\n  DropDownTree.prototype.onFocusOut = function (event) {\n    this.inputFocus = false;\n\n    if (this.isPopupOpen) {\n      this.hidePopup();\n    }\n\n    if (this.isClearButtonClick) {\n      this.isClearButtonClick = false;\n    }\n\n    if (this.showClearButton) {\n      this.clearIconWidth = select('.e-clear-icon', this.inputWrapper).offsetWidth;\n      addClass([this.overAllClear], HIDEICON);\n      removeClass([this.inputWrapper], SHOW_CLEAR);\n    }\n\n    removeClass([this.inputWrapper], [INPUTFOCUS]);\n\n    if (this.allowMultiSelection || this.showCheckBox) {\n      var isValue = this.value ? this.value.length ? true : false : false;\n\n      if (this.mode !== 'Delimiter') {\n        if (this.chipWrapper && this.mode === 'Default') {\n          addClass([this.chipWrapper], HIDEICON);\n          removeClass([this.inputWrapper], SHOW_CHIP);\n          removeClass([this.inputEle], CHIP_INPUT);\n        }\n      }\n\n      if (!this.wrapText && isValue) {\n        this.updateView();\n      }\n    }\n\n    if (this.changeOnBlur) {\n      this.triggerChangeEvent(event);\n    }\n\n    this.removeValue = false;\n    this.oldValue = this.value;\n    this.trigger('blur');\n  };\n\n  DropDownTree.prototype.updateView = function () {\n    if (!this.showCheckBox && !this.allowMultiSelection) {\n      return;\n    }\n\n    if (this.mode !== 'Box') {\n      addClass([this.inputWrapper, this.overFlowWrapper], SHOW_TEXT);\n    } else {\n      addClass([this.inputWrapper], SHOW_CHIP);\n    }\n\n    if (this.value && this.value.length !== 0) {\n      if (this.inputWrapper.contains(this.chipWrapper)) {\n        addClass([this.chipWrapper], HIDEICON);\n      }\n\n      addClass([this.inputEle], CHIP_INPUT);\n      this.updateOverFlowView();\n      this.ensurePlaceHolder();\n    }\n  };\n\n  DropDownTree.prototype.triggerChangeEvent = function (event) {\n    var isEqual = this.compareValues(this.oldValue, this.value);\n\n    if ((!isEqual || this.isChipDelete) && !this.removeValue) {\n      var eventArgs = {\n        e: event,\n        oldValue: this.oldValue,\n        value: this.value,\n        isInteracted: event ? true : false,\n        element: this.element\n      };\n      this.trigger('change', eventArgs);\n    }\n  };\n\n  DropDownTree.prototype.compareValues = function (oldValue, newValue) {\n    if (oldValue === null || oldValue.length === 0) {\n      var isValid = oldValue === null ? newValue === oldValue ? true : false : oldValue.length === 0 ? newValue === oldValue : false;\n      return isValid;\n    } else if (oldValue.length !== newValue.length) {\n      return false;\n    }\n\n    for (var i = 0; i < oldValue.length; i++) {\n      if (oldValue[i] !== newValue[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  DropDownTree.prototype.focusIn = function (e) {\n    if (!this.enabled || this.readonly || this.inputFocus) {\n      return;\n    }\n\n    this.showOverAllClear();\n    this.inputFocus = true;\n    addClass([this.inputWrapper], [INPUTFOCUS]);\n\n    if (this.allowMultiSelection || this.showCheckBox) {\n      if (this.mode !== 'Delimiter' && this.inputFocus) {\n        if (this.chipWrapper && this.value && this.value.length !== 0) {\n          removeClass([this.chipWrapper], HIDEICON);\n          addClass([this.inputEle], CHIP_INPUT);\n        }\n\n        addClass([this.inputWrapper], SHOW_CHIP);\n\n        if (this.popupObj) {\n          this.popupObj.refreshPosition();\n        }\n      }\n\n      if (!this.wrapText) {\n        if (this.inputWrapper.contains(this.overFlowWrapper)) {\n          addClass([this.overFlowWrapper], HIDEICON);\n        }\n\n        if (this.mode === 'Delimiter') {\n          removeClass([this.inputWrapper], SHOW_CHIP);\n          removeClass([this.inputEle], CHIP_INPUT);\n        } else {\n          addClass([this.inputWrapper], SHOW_CHIP);\n        }\n\n        removeClass([this.inputWrapper], SHOW_TEXT);\n        this.ensurePlaceHolder();\n      }\n    }\n\n    var args = {\n      isInteracted: e ? true : false,\n      event: e\n    };\n    this.trigger('focus', args);\n  };\n\n  DropDownTree.prototype.treeAction = function (e) {\n    var _this = this;\n\n    var eventArgs = {\n      cancel: false,\n      event: e\n    };\n    this.trigger('keyPress', eventArgs, function (observedArgs) {\n      if (!observedArgs.cancel) {\n        switch (e.action) {\n          case 'escape':\n          case 'altUp':\n            _this.inputWrapper.focus();\n\n            e.preventDefault();\n\n            if (_this.isPopupOpen) {\n              _this.hidePopup();\n            }\n\n            break;\n\n          case 'tab':\n          case 'shiftTab':\n            if (_this.isPopupOpen) {\n              _this.hidePopup();\n            }\n\n            break;\n\n          case 'enter':\n          case 'ctrlEnter':\n          case 'shiftEnter':\n          case 'csEnter':\n            if (!_this.showCheckBox) {\n              _this.isValueChange = true;\n              _this.keyEventArgs = e;\n            }\n\n            break;\n\n          case 'space':\n            _this.isValueChange = true;\n            _this.keyEventArgs = e;\n            break;\n\n          case 'ctrlA':\n            if (_this.allowMultiSelection) {\n              _this.selectAll(true);\n            }\n\n            break;\n\n          case 'moveRight':\n          case 'moveLeft':\n          case 'shiftDown':\n          case 'moveDown':\n          case 'ctrlDown':\n          case 'csDown':\n          case 'shiftUp':\n          case 'moveUp':\n          case 'ctrlUp':\n          case 'csUp':\n          case 'home':\n          case 'shiftHome':\n          case 'ctrlHome':\n          case 'csHome':\n          case 'end':\n          case 'shiftEnd':\n          case 'ctrlEnd':\n          case 'csEnd':\n        }\n      } else {\n        e.stopImmediatePropagation();\n      }\n    });\n  };\n\n  DropDownTree.prototype.keyActionHandler = function (e) {\n    var _this = this;\n\n    var eventArgs = {\n      cancel: false,\n      event: e\n    };\n    this.trigger('keyPress', eventArgs, function (observedArgs) {\n      if (!observedArgs.cancel) {\n        switch (e.action) {\n          case 'escape':\n          case 'altUp':\n          case 'shiftTab':\n          case 'tab':\n            if (_this.isPopupOpen) {\n              _this.hidePopup();\n            }\n\n            break;\n\n          case 'altDown':\n            if (!_this.isPopupOpen) {\n              _this.showPopup();\n\n              e.preventDefault();\n            }\n\n            break;\n\n          case 'moveDown':\n            if (_this.showSelectAll && _this.showCheckBox) {\n              _this.checkAllParent.focus();\n            }\n\n            break;\n        }\n      }\n    });\n  };\n\n  DropDownTree.prototype.checkAllAction = function (e) {\n    var _this = this;\n\n    var eventArgs = {\n      cancel: false,\n      event: e\n    };\n    this.trigger('keyPress', eventArgs, function (observedArgs) {\n      if (!observedArgs.cancel) {\n        switch (e.action) {\n          case 'space':\n            _this.clickHandler(e);\n\n            break;\n\n          case 'moveDown':\n            _this.treeObj.element.focus();\n\n        }\n      }\n    });\n  };\n\n  DropDownTree.prototype.windowResize = function () {\n    if (this.popupObj) {\n      this.popupObj.setProperties({\n        width: this.setWidth()\n      });\n      this.popupObj.refreshPosition();\n    }\n  };\n\n  DropDownTree.prototype.resetValueHandler = function (e) {\n    var formElement = closest(this.inputWrapper, 'form');\n\n    if (formElement && e.target === formElement) {\n      this.resetValue(true);\n    }\n  };\n\n  DropDownTree.prototype.getAriaAttributes = function () {\n    var disable = this.enabled ? 'false' : 'true';\n    return {\n      'aria-disabled': disable,\n      'aria-owns': this.element.id + '_options',\n      'role': 'listbox',\n      'aria-haspopup': 'true',\n      'aria-expanded': 'false',\n      'aria-activedescendant': 'null',\n      'aria-labelledby': this.hiddenElement.id\n    };\n  };\n\n  DropDownTree.prototype.updateOverFlowView = function () {\n    this.overFlowWrapper.classList.remove(TOTAL_COUNT_WRAPPER);\n    removeClass([this.overFlowWrapper], HIDEICON);\n\n    if (this.value && this.value.length) {\n      var data = '';\n      var overAllContainer = void 0;\n      var temp = void 0;\n      var tempData = void 0;\n      var tempIndex = 1;\n      var wrapperleng = void 0;\n      var remaining = void 0;\n      var downIconWidth = 0;\n      this.overFlowWrapper.innerHTML = '';\n      var l10nLocale = {\n        overflowCountTemplate: '+${count} more..',\n        totalCountTemplate: '${count} selected'\n      };\n      this.l10n = new L10n(this.getLocaleName(), l10nLocale, this.locale);\n      var remainContent = this.l10n.getConstant('overflowCountTemplate');\n      var remainElement = this.createElement('span', {\n        className: REMAIN_WRAPPER\n      });\n      var compiledString = compile(remainContent);\n      var totalCompiledString = compile(this.l10n.getConstant('totalCountTemplate'));\n      remainElement.appendChild(compiledString({\n        'count': this.value.length\n      }, null, null, null, !this.isStringTemplate)[0]);\n      this.overFlowWrapper.appendChild(remainElement);\n      var remainSize = remainElement.offsetWidth;\n      remove(remainElement);\n\n      if (this.showDropDownIcon) {\n        downIconWidth = select('.' + DDTICON, this.inputWrapper).offsetWidth;\n      }\n\n      if (!isNOU(this.value)) {\n        if (this.mode !== 'Box') {\n          for (var index = 0; !isNOU(this.value[index]); index++) {\n            data += index === 0 ? '' : this.delimiterChar + ' ';\n            temp = this.getOverflowVal(index);\n            data += temp;\n            temp = this.overFlowWrapper.innerHTML;\n            this.overFlowWrapper.innerHTML = data;\n            wrapperleng = this.overFlowWrapper.offsetWidth;\n            overAllContainer = this.inputWrapper.offsetWidth;\n\n            if (wrapperleng + downIconWidth + this.clearIconWidth > overAllContainer) {\n              if (tempData !== undefined && tempData !== '') {\n                temp = tempData;\n                index = tempIndex + 1;\n              }\n\n              this.overFlowWrapper.innerHTML = temp;\n              remaining = this.value.length - index;\n              wrapperleng = this.overFlowWrapper.offsetWidth;\n\n              while (wrapperleng + remainSize + downIconWidth + this.clearIconWidth >= overAllContainer && wrapperleng !== 0 && this.overFlowWrapper.innerHTML !== '') {\n                var textArr = this.overFlowWrapper.innerHTML.split(this.delimiterChar);\n                textArr.pop();\n                this.overFlowWrapper.innerHTML = textArr.join(this.delimiterChar);\n                remaining++;\n                wrapperleng = this.overFlowWrapper.offsetWidth;\n              }\n\n              break;\n            } else if (wrapperleng + remainSize + downIconWidth + this.clearIconWidth <= overAllContainer) {\n              tempData = data;\n              tempIndex = index;\n            } else if (index === 0) {\n              tempData = '';\n              tempIndex = -1;\n            }\n          }\n        } else {\n          addClass([this.chipWrapper], HIDEICON);\n          var ele = this.chipWrapper.cloneNode(true);\n          var chips = selectAll('.' + CHIP, ele);\n\n          for (var i = 0; i < chips.length; i++) {\n            temp = this.overFlowWrapper.innerHTML;\n            this.overFlowWrapper.appendChild(chips[i]);\n            data = this.overFlowWrapper.innerHTML;\n            wrapperleng = this.overFlowWrapper.offsetWidth;\n            overAllContainer = this.inputWrapper.offsetWidth;\n\n            if (wrapperleng + downIconWidth + this.clearIconWidth > overAllContainer) {\n              if (tempData !== undefined && tempData !== '') {\n                temp = tempData;\n                i = tempIndex + 1;\n              }\n\n              this.overFlowWrapper.innerHTML = temp;\n              remaining = this.value.length - i;\n              wrapperleng = this.overFlowWrapper.offsetWidth;\n\n              while (wrapperleng + remainSize + downIconWidth + this.clearIconWidth >= overAllContainer && wrapperleng !== 0 && this.overFlowWrapper.innerHTML !== '') {\n                this.overFlowWrapper.removeChild(this.overFlowWrapper.lastChild);\n                remaining++;\n                wrapperleng = this.overFlowWrapper.offsetWidth;\n              }\n\n              break;\n            } else if (wrapperleng + remainSize + downIconWidth + this.clearIconWidth <= overAllContainer) {\n              tempData = data;\n              tempIndex = i;\n            } else if (i === 0) {\n              tempData = '';\n              tempIndex = -1;\n            }\n          }\n        }\n      }\n\n      if (remaining > 0) {\n        var totalWidth = overAllContainer - (downIconWidth + this.clearIconWidth);\n        this.overFlowWrapper.appendChild(this.updateRemainTemplate(remainElement, remaining, compiledString, totalCompiledString, totalWidth));\n      }\n\n      if (this.mode === 'Box' && !this.overFlowWrapper.classList.contains(TOTAL_COUNT_WRAPPER)) {\n        addClass([remainElement], REMAIN_COUNT);\n      }\n    } else {\n      this.overFlowWrapper.innerHTML = '';\n      addClass([this.overFlowWrapper], HIDEICON);\n    }\n\n    this.updateDelimMode();\n  };\n\n  DropDownTree.prototype.updateRemainTemplate = function (remainElement, remaining, compiledString, totalCompiledString, totalWidth) {\n    if (this.overFlowWrapper.firstChild && this.overFlowWrapper.firstChild.nodeType === 3 && this.overFlowWrapper.firstChild.nodeValue === '') {\n      this.overFlowWrapper.removeChild(this.overFlowWrapper.firstChild);\n    }\n\n    remainElement.innerHTML = '';\n    remainElement.appendChild(this.overFlowWrapper.firstChild && (this.overFlowWrapper.firstChild.nodeType === 3 || this.mode === 'Box') ? compiledString({\n      'count': remaining\n    }, null, null, null, !this.isStringTemplate)[0] : totalCompiledString({\n      'count': remaining\n    }, null, null, null, !this.isStringTemplate)[0]);\n\n    if (this.overFlowWrapper.firstChild && (this.overFlowWrapper.firstChild.nodeType === 3 || this.mode === 'Box')) {\n      removeClass([this.overFlowWrapper], TOTAL_COUNT_WRAPPER);\n    } else {\n      addClass([this.overFlowWrapper], TOTAL_COUNT_WRAPPER);\n      removeClass([this.overFlowWrapper], REMAIN_COUNT);\n    }\n\n    return remainElement;\n  };\n\n  DropDownTree.prototype.getOverflowVal = function (index) {\n    var temp;\n    var selectedData = this.getSelectedData(this.value[index]);\n    temp = getValue(this.treeSettings.loadOnDemand ? this.fields.text : 'text', selectedData);\n    return temp;\n  };\n\n  DropDownTree.prototype.updateDelimMode = function () {\n    if (this.mode !== 'Box') {\n      if (select('.' + REMAIN_WRAPPER, this.overFlowWrapper) && !this.overFlowWrapper.classList.contains(TOTAL_COUNT_WRAPPER)) {\n        addClass([this.overFlowWrapper], REMAIN_COUNT);\n        addClass([this.overFlowWrapper], SHOW_TEXT);\n      } else {\n        this.overFlowWrapper.classList.remove(REMAIN_COUNT);\n        removeClass([this.overFlowWrapper], REMAIN_COUNT);\n      }\n    } else if (select('.' + REMAIN_WRAPPER, this.overFlowWrapper)) {\n      this.overFlowWrapper.classList.remove(REMAIN_COUNT);\n    }\n  };\n\n  DropDownTree.prototype.createHiddenElement = function () {\n    if (this.allowMultiSelection || this.showCheckBox) {\n      this.hiddenElement = this.createElement('select', {\n        attrs: {\n          'aria-hidden': 'true',\n          'class': HIDDENELEMENT,\n          'tabindex': '-1',\n          'multiple': ''\n        }\n      });\n    } else {\n      this.hiddenElement = this.createElement('select', {\n        attrs: {\n          'aria-hidden': 'true',\n          'tabindex': '-1',\n          'class': HIDDENELEMENT\n        }\n      });\n    }\n\n    prepend([this.hiddenElement], this.inputWrapper);\n    this.validationAttribute();\n  };\n\n  DropDownTree.prototype.createClearIcon = function () {\n    this.overAllClear = this.createElement('span', {\n      className: CLOSEICON_CLASS\n    });\n    addClass([this.overAllClear], HIDEICON);\n    removeClass([this.inputWrapper], SHOW_CLEAR);\n\n    if (this.showClearButton) {\n      this.inputWrapper.insertBefore(this.overAllClear, this.inputObj.buttons[0]);\n    }\n  };\n\n  DropDownTree.prototype.validationAttribute = function () {\n    var name = this.inputEle.getAttribute('name') ? this.inputEle.getAttribute('name') : this.inputEle.getAttribute('id');\n    this.hiddenElement.setAttribute('name', name);\n    this.inputEle.removeAttribute('name');\n    var attributes = ['required', 'aria-required', 'form'];\n\n    for (var i = 0; i < attributes.length; i++) {\n      var attr = this.inputEle.getAttribute(attributes[i]);\n\n      if (attr) {\n        this.hiddenElement.setAttribute(attributes[i], attr);\n        this.inputEle.removeAttribute(attributes[i]);\n      }\n    }\n  };\n\n  DropDownTree.prototype.createChip = function () {\n    if (!this.inputWrapper.contains(this.chipWrapper)) {\n      this.chipWrapper = this.createElement('span', {\n        className: CHIP_WRAPPER\n      });\n      this.chipCollection = this.createElement('span', {\n        className: CHIP_COLLECTION\n      });\n      this.chipWrapper.appendChild(this.chipCollection);\n      this.inputWrapper.insertBefore(this.chipWrapper, this.hiddenElement);\n      addClass([this.inputWrapper], SHOW_CHIP);\n      var isValid = this.getValidMode();\n\n      if (isValid && this.value !== null) {\n        addClass([this.inputEle], CHIP_INPUT);\n      } else if (this.value === null) {\n        addClass([this.chipWrapper], HIDEICON);\n      }\n    }\n  };\n\n  DropDownTree.prototype.getValidMode = function () {\n    if (this.allowMultiSelection || this.showCheckBox) {\n      return this.mode === 'Box' ? true : this.mode === 'Default' && this.inputFocus ? true : false;\n    } else {\n      return false;\n    }\n  };\n\n  DropDownTree.prototype.createSelectAllWrapper = function () {\n    this.checkAllParent = this.createElement('div', {\n      className: CHECKALLPARENT,\n      attrs: {\n        'tabindex': '0'\n      }\n    });\n    this.selectAllSpan = this.createElement('span', {\n      className: ALLTEXT\n    });\n    this.selectAllSpan.textContent = '';\n    var ele = closest(this.element, '.' + BIGGER);\n    var touchClass = isNOU(ele) ? '' : SMALL;\n    this.checkBoxElement = createCheckBox(this.createElement, true, {\n      cssClass: touchClass\n    });\n    this.checkBoxElement.setAttribute('role', 'checkbox');\n    this.checkAllParent.appendChild(this.checkBoxElement);\n    this.checkAllParent.appendChild(this.selectAllSpan);\n    this.setLocale();\n    EventHandler.add(this.checkAllParent, 'mouseup', this.clickHandler, this);\n    this.wireCheckAllWrapperEvents();\n  };\n\n  DropDownTree.prototype.clickHandler = function (e) {\n    var target;\n\n    if (e.currentTarget && e.currentTarget.classList.contains(CHECKALLPARENT)) {\n      target = e.currentTarget.firstElementChild.lastElementChild;\n    } else {\n      target = e.target;\n    }\n\n    this.checkWrapper = closest(target, '.' + CHECKBOXWRAP);\n\n    if (!isNOU(this.checkWrapper)) {\n      var checkElement = select('.' + CHECKBOXFRAME, this.checkWrapper);\n      this.changeState(this.checkWrapper, checkElement.classList.contains(CHECK) ? 'uncheck' : 'check', e);\n    }\n\n    e.preventDefault();\n  };\n\n  DropDownTree.prototype.changeState = function (wrapper, state, e) {\n    var ariaState;\n    var frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME)[0];\n\n    if (state === 'check' && !frameSpan.classList.contains(CHECK)) {\n      frameSpan.classList.add(CHECK);\n      ariaState = 'true';\n\n      if (!this.isReverseUpdate) {\n        this.treeObj.checkAll();\n\n        if (!this.changeOnBlur) {\n          this.triggerChangeEvent(e);\n        }\n      }\n\n      this.setLocale(true);\n    } else if (state === 'uncheck' && frameSpan.classList.contains(CHECK)) {\n      frameSpan.classList.remove(CHECK);\n      ariaState = 'false';\n\n      if (!this.isReverseUpdate) {\n        this.treeObj.uncheckAll();\n\n        if (!this.changeOnBlur) {\n          this.triggerChangeEvent(e);\n        }\n      }\n\n      this.setLocale(false);\n    }\n\n    this.setMultiSelect();\n    this.ensurePlaceHolder();\n    ariaState = state === 'check' ? 'true' : 'false';\n\n    if (!isNOU(ariaState)) {\n      wrapper.setAttribute('aria-checked', ariaState);\n    }\n  };\n\n  DropDownTree.prototype.setLocale = function (unSelect) {\n    if (!this.selectAllSpan) {\n      return;\n    }\n\n    if (this.selectAllText !== 'Select All' || this.unSelectAllText !== 'Unselect All') {\n      var template = unSelect ? this.unSelectAllText : this.selectAllText;\n      var compiledString = void 0;\n      this.selectAllSpan.textContent = '';\n      compiledString = compile(template);\n\n      for (var _i = 0, _a = compiledString({}, null, null, null, !this.isStringTemplate); _i < _a.length; _i++) {\n        var item = _a[_i];\n        this.selectAllSpan.textContent = item.textContent;\n      }\n    } else {\n      this.selectAllSpan.textContent = unSelect ? this.unSelectAllText : this.selectAllText;\n    }\n  };\n\n  DropDownTree.prototype.setAttributes = function () {\n    this.element.removeAttribute('tabindex');\n    var id = this.element.getAttribute('id');\n    this.hiddenElement.id = id + '_hidden';\n    this.inputWrapper.setAttribute('tabindex', '0');\n    attributes(this.inputWrapper, this.getAriaAttributes());\n  };\n\n  DropDownTree.prototype.setHTMLAttributes = function () {\n    if (Object.keys(this.htmlAttributes).length) {\n      for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {\n        var htmlAttr = _a[_i];\n\n        if (htmlAttr === 'class') {\n          this.inputWrapper.classList.add(this.htmlAttributes[htmlAttr]);\n        } else if (htmlAttr === 'disabled' && this.htmlAttributes[htmlAttr] === 'disabled') {\n          this.setProperties({\n            enabled: false\n          }, true);\n          this.setEnable();\n        } else if (htmlAttr === 'readonly' && !isNOU(this.htmlAttributes[htmlAttr])) {\n          this.setProperties({\n            readonly: true\n          }, true);\n          this.dataBind();\n        } else if (htmlAttr === 'style') {\n          this.inputWrapper.setAttribute('style', this.htmlAttributes[htmlAttr]);\n        } else {\n          var defaultAttr = ['title', 'id', 'placeholder', 'aria-placeholder', 'role', 'autocorrect', 'autocomplete', 'autocapitalize', 'spellcheck', 'minlength', 'maxlength'];\n          var validateAttr = ['name', 'required'];\n\n          if (htmlAttr.indexOf('data') === 0 || validateAttr.indexOf(htmlAttr) > -1) {\n            this.hiddenElement.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);\n          } else if (defaultAttr.indexOf(htmlAttr) > -1) {\n            htmlAttr === 'placeholder' ? Input.setPlaceholder(this.htmlAttributes[htmlAttr], this.inputEle) : this.inputEle.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);\n          } else {\n            this.inputWrapper.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);\n          }\n        }\n      }\n    }\n  };\n\n  DropDownTree.prototype.updateDataAttribute = function () {\n    var value = this.htmlAttributes;\n    var invalidAttr = ['class', 'style', 'id', 'type'];\n    var attr = {};\n\n    for (var a = 0; a < this.element.attributes.length; a++) {\n      if (invalidAttr.indexOf(this.element.attributes[a].name) === -1 && !(this.element.attributes[a].name === 'readonly')) {\n        attr[this.element.attributes[a].name] = this.element.getAttribute(this.element.attributes[a].name);\n      }\n    }\n\n    extend(attr, value, attr);\n    this.setProperties({\n      htmlAttributes: attr\n    }, true);\n  };\n\n  DropDownTree.prototype.showOverAllClear = function () {\n    if (!this.enabled || this.readonly) {\n      return;\n    }\n\n    if (this.overAllClear) {\n      var isValue = this.value ? this.value.length ? true : false : false;\n\n      if (isValue && this.showClearButton) {\n        removeClass([this.overAllClear], HIDEICON);\n        addClass([this.inputWrapper], SHOW_CLEAR);\n      } else {\n        addClass([this.overAllClear], HIDEICON);\n        removeClass([this.inputWrapper], SHOW_CLEAR);\n      }\n    }\n  };\n\n  DropDownTree.prototype.setTreeValue = function () {\n    if (this.value !== null && this.value.length !== 0) {\n      var data = void 0;\n\n      if (this.showCheckBox || this.allowMultiSelection) {\n        for (var i = 0; i < this.value.length; i++) {\n          data = this.treeObj.getTreeData(this.value[i])[0];\n\n          if (isNOU(data)) {\n            this.value.splice(this.value.indexOf(this.value[i]), 1);\n          }\n        }\n\n        if (this.value.length !== 0) {\n          this.setValidValue();\n        }\n      } else {\n        data = this.treeObj.getTreeData(this.value[0])[0];\n\n        if (!isNOU(data)) {\n          this.setProperties({\n            text: data[this.fields.text]\n          }, true);\n          this.setValidValue();\n        } else {\n          this.setProperties({\n            value: this.currentValue\n          }, true);\n        }\n      }\n    }\n  };\n\n  DropDownTree.prototype.setTreeText = function () {\n    if (this.value !== null && !this.isInitialized) {\n      return;\n    }\n\n    if (this.text !== null) {\n      var data = void 0;\n      var valArr = [];\n\n      if (this.showCheckBox || this.allowMultiSelection) {\n        var textArr = this.text.split(this.delimiterChar);\n\n        for (var i = 0; i < textArr.length; i++) {\n          data = this.getItems(textArr[i]);\n\n          if (!isNOU(data)) {\n            valArr.push(data[this.fields.value].toString());\n          }\n        }\n\n        if (valArr.length !== 0) {\n          this.oldValue = this.value;\n          this.setProperties({\n            value: valArr\n          }, true);\n          this.setValidValue();\n        } else {\n          this.setProperties({\n            text: this.currentText\n          }, true);\n        }\n      } else {\n        data = this.getItems(this.text);\n\n        if (!isNOU(data)) {\n          this.oldValue = this.value;\n          this.setProperties({\n            value: [data[this.fields.value].toString()]\n          }, true);\n          this.setValidValue();\n        } else {\n          this.setProperties({\n            text: this.currentText\n          }, true);\n        }\n      }\n    }\n  };\n\n  DropDownTree.prototype.setSelectedValue = function () {\n    if (this.value != null) {\n      return;\n    }\n\n    if (!this.isInitialized) {\n      this.oldValue = this.value;\n\n      if (this.treeObj.selectedNodes.length > 0 && !this.showCheckBox) {\n        this.setProperties({\n          value: this.treeObj.selectedNodes\n        }, true);\n\n        if (this.allowMultiSelection) {\n          this.updateMode();\n        }\n      } else if (this.showCheckBox && this.treeObj.checkedNodes) {\n        if (this.treeObj.checkedNodes.length > 0) {\n          this.setProperties({\n            value: this.treeObj.checkedNodes\n          }, true);\n          setValue('selectedNodes', [], this.treeObj);\n          this.treeObj.dataBind();\n          this.updateMode();\n        }\n      }\n\n      this.updateSelectedValues();\n      this.currentText = this.text;\n      this.currentValue = this.value;\n    }\n  };\n\n  DropDownTree.prototype.setValidValue = function () {\n    if (!this.showCheckBox && !this.allowMultiSelection) {\n      Input.setValue(this.text, this.inputEle, this.floatLabelType);\n      var id = this.value[0].toString();\n\n      if (this.treeObj.selectedNodes[0] !== id) {\n        setValue('selectedNodes', [id], this.treeObj);\n      }\n    } else {\n      if (this.showCheckBox) {\n        this.treeObj.checkedNodes = this.value.slice();\n        setValue('selectedNodes', [], this.treeObj);\n        this.treeObj.dataBind();\n        this.setMultiSelect();\n      } else {\n        this.treeObj.selectedNodes = this.value.slice();\n        this.selectedText = [];\n        this.updateSelectedValues();\n      }\n\n      this.treeObj.dataBind();\n    }\n\n    this.currentText = this.text;\n    this.currentValue = this.value;\n\n    if (this.isInitialized) {\n      this.triggerChangeEvent();\n    }\n  };\n\n  DropDownTree.prototype.getItems = function (givenText) {\n    var data;\n\n    if (this.treeDataType === 1) {\n      for (var i = 0; i < this.treeItems.length; i++) {\n        var text = getValue(this.fields.text, this.treeItems[i]);\n\n        if (!isNOU(this.treeItems[i]) && !isNOU(text) && text === givenText) {\n          data = this.treeItems[i];\n          break;\n        }\n      }\n    } else {\n      data = this.getNestedItems(this.treeItems, this.fields, givenText);\n    }\n\n    return data;\n  };\n\n  DropDownTree.prototype.getNestedItems = function (data, field, givenText) {\n    var newData;\n\n    for (var i = 0, objlen = data.length; i < objlen; i++) {\n      var dataId = getValue(this.fields.text, data[i]);\n\n      if (data[i] && dataId && dataId.toString() === givenText) {\n        return data[i];\n      } else if (typeof field.child === 'string' && !isNOU(getValue(field.child, data[i]))) {\n        var childData = getValue(field.child, data[i]);\n        newData = this.getNestedItems(childData, this.getChildType(field), givenText);\n\n        if (newData !== undefined) {\n          break;\n        }\n      } else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', data[i]))) {\n        var child = 'child';\n        newData = this.getNestedItems(getValue(child, data[i]), this.getChildType(field), givenText);\n\n        if (newData !== undefined) {\n          break;\n        }\n      }\n    }\n\n    return newData;\n  };\n\n  DropDownTree.prototype.getChildType = function (mapper) {\n    return typeof mapper.child === 'string' || isNOU(mapper.child) ? mapper : mapper.child;\n  };\n  /* To render the treeview */\n\n\n  DropDownTree.prototype.renderTree = function () {\n    this.treeObj = new TreeView({\n      fields: this.getTreeFields(this.fields),\n      enableRtl: this.enableRtl,\n      nodeSelected: this.onNodeSelected.bind(this),\n      nodeChecked: this.onNodeChecked.bind(this),\n      nodeChecking: this.beforeCheck.bind(this),\n      actionFailure: this.onActionFailure.bind(this),\n      nodeClicked: this.onNodeClicked.bind(this),\n      dataBound: this.OnDataBound.bind(this),\n      allowMultiSelection: this.allowMultiSelection,\n      showCheckBox: this.showCheckBox,\n      autoCheck: this.treeSettings.autoCheck,\n      sortOrder: this.sortOrder,\n      expandOn: this.treeSettings.expandOn,\n      loadOnDemand: this.treeSettings.loadOnDemand,\n      nodeSelecting: this.onBeforeSelect.bind(this),\n      nodeTemplate: this.itemTemplate\n    });\n    this.treeObj.appendTo('#' + this.tree.id);\n  };\n  /* To render the popup element */\n\n\n  DropDownTree.prototype.renderPopup = function () {\n    var _this = this;\n\n    if (this.isFilteredData) {\n      this.filterObj.value = '';\n      this.treeObj.fields = this.getTreeFields(this.fields);\n      this.isFilterRestore = true;\n      this.isFilteredData = false;\n      this.hideCheckAll(false);\n    }\n\n    var isCancelled = false;\n    var args = {\n      cancel: false\n    };\n    this.trigger('beforeOpen', args, function (args) {\n      if (!args.cancel) {\n        addClass([_this.inputWrapper], [ICONANIMATION]);\n\n        if (_this.isFirstRender) {\n          _this.popupEle = _this.createElement('div', {\n            id: _this.element.id + '_popup',\n            className: POPUP_CLASS + ' ' + (_this.cssClass != null ? _this.cssClass : '')\n          });\n          document.body.appendChild(_this.popupEle);\n\n          _this.createPopup(_this.popupEle);\n        } else {\n          _this.popupEle = _this.popupObj.element;\n        }\n      } else {\n        isCancelled = true;\n      }\n\n      if (_this.isFirstRender && !isCancelled) {\n        prepend([_this.popupDiv], _this.popupEle);\n        _this.popupDiv.style.display = 'block';\n\n        if (_this.allowFiltering) {\n          _this.renderFilter();\n        }\n\n        if (_this.showCheckBox && _this.showSelectAll && !_this.popupDiv.classList.contains(NODATA)) {\n          _this.createSelectAllWrapper();\n\n          _this.popupEle.insertBefore(_this.checkAllParent, _this.popupDiv);\n        }\n\n        if (_this.headerTemplate) {\n          _this.setHeaderTemplate();\n        }\n\n        if (_this.footerTemplate) {\n          _this.setFooterTemplate();\n        }\n\n        _this.isFirstRender = false;\n      }\n\n      if (!isCancelled) {\n        attributes(_this.inputWrapper, {\n          'aria-expanded': 'true'\n        });\n\n        _this.popupObj.show(null, _this.zIndex === 1000 ? _this.inputEle : null);\n\n        _this.popupEle.style.display = 'block';\n\n        _this.updatePopupHeight();\n\n        _this.popupObj.refreshPosition();\n\n        if (!(_this.showCheckBox && _this.showSelectAll) && !_this.popupDiv.classList.contains(NODATA) && _this.treeItems.length > 0) {\n          _this.treeObj.element.focus();\n        }\n\n        if (_this.checkSelectAll && _this.checkBoxElement) {\n          var wrap = closest(_this.checkBoxElement, '.' + CHECKBOXWRAP);\n\n          _this.changeState(wrap, 'check');\n\n          _this.checkSelectAll = false;\n        }\n\n        if (_this.allowFiltering) {\n          removeClass([_this.inputWrapper], [INPUTFOCUS]);\n\n          _this.filterObj.element.focus();\n        }\n\n        var eventArgs = {\n          popup: _this.popupObj\n        };\n\n        _this.trigger('open', eventArgs);\n      }\n    });\n  };\n\n  DropDownTree.prototype.updatePopupHeight = function () {\n    if (this.isFirstRender) {\n      return;\n    }\n\n    var popupHeight = this.getHeight();\n    this.popupEle.style.maxHeight = popupHeight;\n\n    if (this.allowFiltering) {\n      var height = Math.round(this.filterContainer.getBoundingClientRect().height);\n      popupHeight = formatUnit(parseInt(popupHeight, 10) - height + 'px');\n    }\n\n    if (this.headerTemplate) {\n      var height = Math.round(this.header.getBoundingClientRect().height);\n      popupHeight = formatUnit(parseInt(popupHeight, 10) - height + 'px');\n    }\n\n    if (this.showCheckBox && this.showSelectAll) {\n      var height = Math.round(this.checkAllParent.getBoundingClientRect().height);\n      popupHeight = formatUnit(parseInt(popupHeight, 10) - height + 'px');\n    }\n\n    if (this.footerTemplate) {\n      var height = Math.round(this.footer.getBoundingClientRect().height);\n      popupHeight = formatUnit(parseInt(popupHeight, 10) - height + 'px');\n    }\n\n    var border = parseInt(window.getComputedStyle(this.popupEle).borderTopWidth, 10);\n    border = border + parseInt(window.getComputedStyle(this.popupEle).borderBottomWidth, 10);\n    popupHeight = formatUnit(parseInt(popupHeight, 10) - border + 'px');\n    this.popupDiv.style.maxHeight = popupHeight;\n  };\n\n  DropDownTree.prototype.createPopup = function (element) {\n    var _this = this;\n\n    if (this.isFirstRender) {\n      this.popupObj = new Popup(element, {\n        width: this.setWidth(),\n        targetType: 'relative',\n        collision: {\n          X: 'flip',\n          Y: 'flip'\n        },\n        relateTo: this.inputWrapper,\n        zIndex: this.zIndex,\n        enableRtl: this.enableRtl,\n        position: {\n          X: 'left',\n          Y: 'bottom'\n        },\n        close: function () {\n          _this.isPopupOpen = false;\n        },\n        open: function () {\n          EventHandler.add(document, 'mousedown', _this.onDocumentClick, _this);\n          _this.isPopupOpen = true;\n        },\n        targetExitViewport: function () {\n          if (!Browser.isDevice) {\n            _this.hidePopup();\n          }\n        }\n      });\n    }\n  };\n  /* To calculate the width when change via set model */\n\n\n  DropDownTree.prototype.setElementWidth = function (inputWidth) {\n    var ddElement = this.inputWrapper;\n\n    if (!isNOU(inputWidth)) {\n      if (typeof inputWidth === 'number') {\n        ddElement.style.width = formatUnit(inputWidth);\n      } else if (typeof inputWidth === 'string') {\n        ddElement.style.width = inputWidth.match(/px|%|em/) ? inputWidth : formatUnit(inputWidth);\n      }\n    }\n  };\n  /* To calculate the width of the popup */\n\n\n  DropDownTree.prototype.setWidth = function () {\n    var width = formatUnit(this.popupWidth);\n\n    if (width.indexOf('%') > -1) {\n      var inputWidth = this.inputWrapper.offsetWidth * parseFloat(width) / 100;\n      width = inputWidth.toString() + 'px';\n    } else if (typeof this.popupWidth === 'string') {\n      width = this.popupWidth.match(/px|em/) ? this.popupWidth : width;\n    }\n\n    return width;\n  };\n  /* To calculate the height of the popup */\n\n\n  DropDownTree.prototype.getHeight = function () {\n    var height = formatUnit(this.popupHeight);\n\n    if (height.indexOf('%') > -1) {\n      // Will set the height of the popup according to the view port height\n      var viewPortHeight = document.documentElement.clientHeight * parseFloat(height) / 100;\n      height = viewPortHeight.toString() + 'px';\n    } else if (typeof this.popupHeight === 'string') {\n      height = this.popupHeight.match(/px|em/) ? this.popupHeight : height;\n    }\n\n    return height;\n  };\n\n  DropDownTree.prototype.onDocumentClick = function (e) {\n    var target = e.target;\n    var isTree = closest(target, '.' + PARENTITEM);\n    var isFilter = closest(target, '.' + FILTERWRAP);\n    var isScroller = target.classList.contains(DROPDOWN) ? true : matches(target, '.e-ddt .e-popup') || matches(target, '.e-ddt .e-treeview');\n\n    if (this.isPopupOpen && (this.inputWrapper.contains(target) || isTree || isFilter || isScroller) || (this.allowMultiSelection || this.showCheckBox) && (this.isPopupOpen && target.classList.contains(CHIP_CLOSE) || this.isPopupOpen && (target.classList.contains(CHECKALLPARENT) || target.classList.contains(ALLTEXT) || target.classList.contains(CHECKBOXFRAME)))) {\n      this.isDocumentClick = false;\n      e.preventDefault();\n    } else if (!this.inputWrapper.contains(target) && this.inputFocus) {\n      this.focusOut(e);\n    }\n  };\n\n  DropDownTree.prototype.onActionFailure = function (e) {\n    this.trigger('actionFailure', e);\n    this.l10nUpdate(true);\n    addClass([this.popupDiv], NODATA);\n  };\n\n  DropDownTree.prototype.OnDataBound = function (args) {\n    this.treeItems = args.data;\n\n    if (this.treeItems.length <= 0) {\n      this.l10nUpdate();\n      addClass([this.popupDiv], NODATA);\n      this.hideCheckAll(true);\n    } else if (this.popupDiv.classList.contains(NODATA) && this.treeItems.length >= 1) {\n      removeClass([this.popupDiv], NODATA);\n      this.hideCheckAll(false);\n    }\n\n    this.treeDataType = this.getTreeDataType(this.treeItems, this.fields);\n\n    if (this.isFirstRender && this.isRemoteData) {\n      this.setTreeValue();\n      this.setTreeText();\n      this.updateHiddenValue();\n      this.setSelectedValue();\n\n      if (!this.wrapText) {\n        this.updateView();\n      }\n\n      this.treeObj.element.focus();\n    }\n\n    var eventArgs = {\n      data: args.data\n    };\n    this.trigger('dataBound', eventArgs);\n\n    if (this.isFilteredData) {\n      this.treeObj.expandAll();\n    }\n\n    if (this.isFilterRestore) {\n      this.restoreFilterSelection();\n      this.isFilterRestore = false;\n    }\n  };\n\n  DropDownTree.prototype.restoreFilterSelection = function () {\n    if (this.showCheckBox) {\n      this.treeObj.checkedNodes = this.value ? this.value : [];\n    } else {\n      this.treeObj.selectedNodes = this.value ? this.value : [];\n    }\n  };\n  /* To set cssclass for the dropdowntree */\n\n\n  DropDownTree.prototype.setCssClass = function (newClass, oldClass) {\n    var elements = this.popupObj ? [this.inputWrapper, this.popupObj.element] : [this.inputWrapper];\n\n    if (!isNOU(oldClass) && oldClass !== '') {\n      removeClass(elements, oldClass.split(' '));\n    }\n\n    if (!isNOU(newClass) && newClass !== '') {\n      addClass(elements, newClass.split(' '));\n    }\n  };\n\n  DropDownTree.prototype.setEnableRTL = function (state) {\n    if (state) {\n      this.inputWrapper.classList.add(RTL);\n    } else {\n      this.inputWrapper.classList.remove(RTL);\n    }\n\n    if (this.popupObj) {\n      this.popupObj.enableRtl = state;\n      this.popupObj.dataBind();\n    }\n\n    if (this.treeObj) {\n      this.treeObj.enableRtl = state;\n      this.treeObj.dataBind();\n    }\n  };\n  /* To set enable property */\n\n\n  DropDownTree.prototype.setEnable = function () {\n    Input.setEnabled(this.enabled, this.inputEle);\n\n    if (this.enabled) {\n      removeClass([this.inputWrapper], DISABLED);\n      this.inputEle.setAttribute('aria-disabled', 'false');\n      this.inputWrapper.setAttribute('aria-disabled', 'false');\n    } else {\n      if (this.isPopupOpen) {\n        this.hidePopup();\n      }\n\n      addClass([this.inputWrapper], DISABLED);\n\n      if (this.inputWrapper && this.inputWrapper.classList.contains(INPUTFOCUS)) {\n        removeClass([this.inputWrapper], [INPUTFOCUS]);\n      }\n\n      this.inputEle.setAttribute('aria-disabled', 'true');\n      this.inputWrapper.setAttribute('aria-disabled', 'true');\n    }\n  };\n\n  DropDownTree.prototype.cloneFields = function (fields) {\n    var clonedField = {\n      dataSource: fields.dataSource,\n      value: fields.value,\n      text: fields.text,\n      parentValue: fields.parentValue,\n      child: this.cloneChildField(fields.child),\n      hasChildren: fields.hasChildren,\n      expanded: fields.expanded,\n      iconCss: fields.iconCss,\n      imageUrl: fields.imageUrl,\n      htmlAttributes: fields.htmlAttributes,\n      query: fields.query,\n      selected: fields.selected,\n      tableName: fields.tableName,\n      tooltip: fields.tooltip\n    };\n    return clonedField;\n  };\n\n  DropDownTree.prototype.cloneChildField = function (fields) {\n    if (typeof fields === 'string') {\n      return fields;\n    } else {\n      var clonedField = {\n        dataSource: fields.dataSource,\n        value: fields.value,\n        text: fields.text,\n        parentValue: fields.parentValue,\n        child: fields.child ? this.cloneChildField(fields.child) : null,\n        hasChildren: fields.hasChildren,\n        expanded: fields.expanded,\n        iconCss: fields.iconCss,\n        imageUrl: fields.imageUrl,\n        htmlAttributes: fields.htmlAttributes,\n        query: fields.query,\n        selected: fields.selected,\n        tableName: fields.tableName,\n        tooltip: fields.tooltip\n      };\n      return clonedField;\n    }\n  };\n\n  DropDownTree.prototype.getTreeFields = function (fields) {\n    var treeFields = {\n      dataSource: fields.dataSource,\n      id: fields.value,\n      text: fields.text,\n      parentID: fields.parentValue,\n      child: this.getTreeChildren(fields.child),\n      hasChildren: fields.hasChildren,\n      expanded: fields.expanded,\n      iconCss: fields.iconCss,\n      imageUrl: fields.imageUrl,\n      isChecked: fields.selected,\n      htmlAttributes: fields.htmlAttributes,\n      query: fields.query,\n      selected: fields.selected,\n      tableName: fields.tableName,\n      tooltip: fields.tooltip\n    };\n    return treeFields;\n  };\n\n  DropDownTree.prototype.getTreeChildren = function (mapper) {\n    if (typeof mapper === 'string') {\n      return mapper;\n    } else if (!isNOU(mapper)) {\n      var childFields = void 0;\n      mapper = this.getActualProperties(mapper);\n      childFields = mapper;\n\n      if (mapper.value) {\n        childFields.id = mapper.value;\n      }\n\n      if (mapper.parentValue) {\n        childFields.parentID = mapper.parentValue;\n      }\n\n      if (mapper.child) {\n        childFields.child = this.getTreeChildren(mapper.child);\n      }\n\n      if (mapper.selected && this.showCheckBox) {\n        childFields.isChecked = mapper.selected;\n      }\n\n      return childFields;\n    }\n\n    return null;\n  };\n\n  DropDownTree.prototype.getTreeDataType = function (ds, field) {\n    if (this.fields.dataSource instanceof DataManager) {\n      for (var i = 0; i < ds.length; i++) {\n        if (typeof field.child === 'string' && isNOU(getValue(field.child, ds[i]))) {\n          return 1;\n        }\n      }\n\n      return 2;\n    }\n\n    for (var i = 0, len = ds.length; i < len; i++) {\n      if (typeof field.child === 'string' && !isNOU(getValue(field.child, ds[i]))) {\n        return 2;\n      }\n\n      if (!isNOU(getValue(field.parentValue, ds[i])) || !isNOU(getValue(field.hasChildren, ds[i]))) {\n        return 1;\n      }\n    }\n\n    return 1;\n  };\n  /* Triggers when the tree fields is changed dynamically */\n\n\n  DropDownTree.prototype.setFields = function () {\n    this.resetValue();\n    this.treeObj.fields = this.getTreeFields(this.fields);\n    this.treeObj.dataBind();\n  };\n\n  DropDownTree.prototype.getEventArgs = function (args) {\n    var checkData = args.data;\n    var selectData = args.nodeData;\n    var state;\n\n    if (this.showCheckBox) {\n      if (args.action === 'check') {\n        state = 'select';\n      } else if (args.action === 'uncheck') {\n        state = 'un-select';\n      }\n    }\n\n    var eventArgs = {\n      action: this.showCheckBox ? state : args.action,\n      isInteracted: args.isInteracted,\n      item: args.node,\n      itemData: this.showCheckBox ? checkData[0] : selectData\n    };\n    return eventArgs;\n  };\n\n  DropDownTree.prototype.onBeforeSelect = function (args) {\n    if (args.isInteracted) {\n      this.oldValue = this.value ? this.value.slice() : this.value;\n\n      if (this.value === null) {\n        this.setProperties({\n          value: []\n        }, true);\n      }\n    }\n  };\n\n  DropDownTree.prototype.updateHiddenValue = function () {\n    if (this.allowMultiSelection || this.showCheckBox) {\n      return;\n    }\n\n    if (this.value && this.value.length) {\n      this.hiddenElement.innerHTML = '<option selected value =\"' + this.value[0] + '\">' + this.text + '</option>';\n    } else {\n      this.hiddenElement.innerHTML = '';\n    }\n  };\n  /* Triggers when the tree node is selected */\n\n\n  DropDownTree.prototype.onNodeSelected = function (args) {\n    if (this.showCheckBox) {\n      return;\n    }\n\n    var selectedText;\n\n    if (args.isInteracted) {\n      var id = getValue('id', args.nodeData).toString();\n\n      if (!this.allowMultiSelection) {\n        this.hiddenElement.innerHTML = '';\n        this.setProperties({\n          value: [id]\n        }, true);\n\n        if (this.itemTemplate) {\n          selectedText = getValue('text', this.treeObj.getNode(id));\n        } else {\n          selectedText = getValue('text', args.nodeData).toString();\n        }\n\n        Input.setValue(selectedText, this.inputEle, this.floatLabelType);\n        this.setProperties({\n          text: selectedText\n        }, true);\n        this.currentText = this.text;\n        this.currentValue = this.value;\n        attributes(this.inputWrapper, {\n          'aria-describedby': this.element.id\n        });\n        attributes(this.inputWrapper, {\n          'aria-activedescendant': id.toString()\n        });\n        this.updateHiddenValue();\n        this.showOverAllClear();\n        this.hidePopup();\n        this.isNodeSelected = true;\n      } else if (this.allowMultiSelection) {\n        this.setMultiSelect();\n      }\n    }\n\n    var eventArgs = this.getEventArgs(args);\n    this.trigger('select', eventArgs);\n\n    if (this.isValueChange && !this.changeOnBlur) {\n      this.triggerChangeEvent(this.keyEventArgs);\n      this.isValueChange = false;\n    }\n  };\n\n  DropDownTree.prototype.onNodeClicked = function (args) {\n    if (!this.changeOnBlur && this.isNodeSelected) {\n      this.triggerChangeEvent(args.event);\n      this.isNodeSelected = false;\n    }\n\n    var target = args.event.target;\n\n    if ((target.classList.contains('e-fullrow') || target.classList.contains('e-list-text')) && this.showCheckBox) {\n      var getNodeDetails = this.treeObj.getNode(args.node);\n\n      if (getNodeDetails.isChecked === 'true') {\n        this.treeObj.uncheckAll([args.node]);\n      } else {\n        this.treeObj.checkAll([args.node]);\n      }\n\n      this.setMultiSelect();\n      this.ensurePlaceHolder();\n    }\n\n    if (!this.changeOnBlur && (this.allowMultiSelection || this.showCheckBox)) {\n      this.triggerChangeEvent(args.event);\n    }\n  };\n\n  DropDownTree.prototype.onNodeChecked = function (args) {\n    var eventArgs = this.getEventArgs(args);\n    this.trigger('select', eventArgs);\n\n    if (this.isFilteredData && args.action === 'uncheck') {\n      var id = getValue('id', args.data[0]).toString();\n      this.removeSelectedData(id, true);\n    }\n\n    if (!this.isChipDelete && args.isInteracted) {\n      this.setMultiSelect();\n      this.ensurePlaceHolder();\n    }\n\n    if (this.showSelectAll && this.checkBoxElement) {\n      var nodes = this.treeObj.element.querySelectorAll('li');\n      var checkedNodes = this.treeObj.element.querySelectorAll('li .e-checkbox-wrapper[aria-checked=true]');\n      var wrap = closest(this.checkBoxElement, '.' + CHECKBOXWRAP);\n\n      if (wrap && args.action === 'uncheck') {\n        this.isReverseUpdate = true;\n        this.changeState(wrap, 'uncheck');\n        this.isReverseUpdate = false;\n      } else if (wrap && args.action === 'check' && checkedNodes.length === nodes.length) {\n        this.isReverseUpdate = true;\n        this.changeState(wrap, 'check');\n        this.isReverseUpdate = false;\n      }\n    }\n  };\n\n  DropDownTree.prototype.beforeCheck = function (args) {\n    if (args.isInteracted) {\n      this.oldValue = this.value ? this.value.slice() : this.value;\n    }\n  };\n\n  DropDownTree.prototype.updateClearButton = function (state) {\n    if (state) {\n      if (!this.inputWrapper.contains(this.overAllClear)) {\n        this.inputEle.parentElement.insertBefore(this.overAllClear, this.inputEle.nextSibling);\n      } else {\n        removeClass([this.overAllClear], HIDEICON);\n        addClass([this.inputWrapper], SHOW_CLEAR);\n      }\n    } else {\n      addClass([this.overAllClear], HIDEICON);\n      removeClass([this.inputWrapper], SHOW_CLEAR);\n    }\n\n    if ((this.allowMultiSelection || this.showCheckBox) && this.chipWrapper) {\n      var chipClose = selectAll('.' + CHIP_CLOSE, this.chipWrapper);\n\n      for (var i = 0; i < chipClose.length; i++) {\n        if (!state) {\n          addClass([chipClose[i]], HIDEICON);\n        } else {\n          removeClass([chipClose[i]], HIDEICON);\n        }\n      }\n    }\n  };\n\n  DropDownTree.prototype.updateDropDownIconState = function (state) {\n    var spinIcon = select('.' + DDTICON, this.inputWrapper);\n\n    if (state) {\n      if (!spinIcon) {\n        Input.appendSpan(DROPDOWNICON, this.inputWrapper, this.createElement);\n      } else {\n        removeClass([spinIcon], HIDEICON);\n      }\n\n      addClass([this.inputWrapper], SHOW_DD_ICON);\n    } else {\n      addClass([spinIcon], HIDEICON);\n      removeClass([this.inputWrapper], SHOW_DD_ICON);\n    }\n  };\n\n  DropDownTree.prototype.updateMode = function () {\n    if (this.mode !== 'Delimiter') {\n      if (!this.inputWrapper.contains(this.chipWrapper)) {\n        this.createChip();\n      }\n\n      var isValid = this.getValidMode();\n\n      if (this.chipWrapper.classList.contains(HIDEICON) && isValid) {\n        removeClass([this.chipWrapper], HIDEICON);\n        addClass([this.inputWrapper], SHOW_CHIP);\n      } else if (!isValid) {\n        addClass([this.chipWrapper], HIDEICON);\n        removeClass([this.inputWrapper], SHOW_CHIP);\n      }\n\n      var isValue = this.value !== null ? this.value.length !== 0 ? true : false : false;\n\n      if (isValid && isValue) {\n        addClass([this.inputEle], CHIP_INPUT);\n      } else {\n        removeClass([this.inputEle], CHIP_INPUT);\n      }\n    } else if (this.inputEle.classList.contains(CHIP_INPUT)) {\n      removeClass([this.inputEle], CHIP_INPUT);\n\n      if (this.chipWrapper) {\n        addClass([this.chipWrapper], HIDEICON);\n        removeClass([this.inputWrapper], SHOW_CHIP);\n      }\n    }\n  };\n\n  DropDownTree.prototype.ensurePlaceHolder = function () {\n    if (this.value && this.value.length === 0) {\n      removeClass([this.inputEle], CHIP_INPUT);\n\n      if (this.chipWrapper) {\n        addClass([this.chipWrapper], HIDEICON);\n      }\n    }\n  };\n\n  DropDownTree.prototype.ensureClearIconPosition = function (floatLabelType) {\n    if (floatLabelType !== 'Never') {\n      this.inputWrapper.insertBefore(this.overAllClear, this.inputObj.buttons[0]);\n    }\n  };\n\n  DropDownTree.prototype.setMultiSelectValue = function (newValues) {\n    if (!this.isFilteredData) {\n      this.setProperties({\n        value: newValues\n      }, true);\n\n      if (newValues && newValues.length !== 0 && !this.showCheckBox) {\n        this.treeObj.selectedNodes = this.value.slice();\n        this.treeObj.dataBind();\n      }\n    } else {\n      var selectedValues = isNOU(this.value) ? [] : this.value;\n\n      for (var i = 0; i < newValues.length; i++) {\n        if (isNOU(this.value) || this.value.indexOf(newValues[i]) === -1) {\n          selectedValues.push(newValues[i]);\n        }\n      }\n\n      this.setProperties({\n        value: selectedValues\n      }, true);\n    }\n  };\n\n  DropDownTree.prototype.setMultiSelect = function () {\n    if (this.showCheckBox && !this.isDynamicChange) {\n      this.setMultiSelectValue(this.treeObj.checkedNodes);\n    } else {\n      var ddtValue = this.allowMultiSelection ? this.showCheckBox ? this.treeObj.checkedNodes : this.treeObj.selectedNodes : this.value ? this.showCheckBox ? this.value : [this.value[0]] : null;\n      this.setMultiSelectValue(ddtValue);\n\n      if (this.showCheckBox && this.value !== null) {\n        this.treeObj.checkedNodes = this.value;\n        this.treeObj.dataBind();\n      }\n    }\n\n    this.selectedText = [];\n    var checkSelection = this.allowMultiSelection ? true : this.showCheckBox ? true : false;\n\n    if (this.inputWrapper.contains(this.chipWrapper) && !checkSelection) {\n      removeClass([this.inputEle], CHIP_INPUT);\n      detach(this.chipWrapper);\n    }\n\n    var isValid = this.getValidMode();\n\n    if (isValid && this.value !== null) {\n      addClass([this.inputEle], CHIP_INPUT);\n\n      if (this.chipWrapper) {\n        removeClass([this.chipWrapper], HIDEICON);\n      }\n    }\n\n    var isValue = this.value ? this.value.length ? true : false : false;\n\n    if (this.chipWrapper && this.mode === 'Box' && !isValue) {\n      addClass([this.chipWrapper], HIDEICON);\n      removeClass([this.inputEle], CHIP_INPUT);\n    }\n\n    this.updateSelectedValues();\n  };\n\n  DropDownTree.prototype.getSelectedData = function (value) {\n    var data = null;\n\n    if (this.isFilteredData) {\n      for (var i = 0; i < this.selectedData.length; i++) {\n        if (getValue(this.treeSettings.loadOnDemand ? this.fields.value : 'id', this.selectedData[i]).toString() === value) {\n          data = this.selectedData[i];\n          break;\n        }\n      }\n    }\n\n    if (isNOU(data)) {\n      if (this.treeSettings.loadOnDemand) {\n        data = this.treeObj.getTreeData(value)[0];\n      } else {\n        data = this.treeObj.getNode(value);\n      }\n\n      if (!isNOU(data)) {\n        this.selectedData.push(data);\n      }\n    }\n\n    return data;\n  };\n\n  DropDownTree.prototype.removeSelectedData = function (value, muteOnChange) {\n    var selectedValues = isNOU(this.value) ? [] : this.value.slice();\n    selectedValues.splice(selectedValues.indexOf(value), 1);\n    this.setProperties({\n      value: selectedValues\n    }, muteOnChange);\n\n    for (var i = 0; i < this.selectedData.length; i++) {\n      if (getValue(this.treeSettings.loadOnDemand ? this.fields.value : 'id', this.selectedData[i]).toString() === value) {\n        this.selectedData.splice(i, 1);\n        break;\n      }\n    }\n  };\n\n  DropDownTree.prototype.updateSelectedValues = function () {\n    this.dataValue = '';\n    var temp;\n    var text;\n    var textValue = '';\n    var selectedData;\n    this.hiddenElement.innerHTML = '';\n\n    if ((!this.isChipDelete || this.treeSettings.autoCheck) && this.inputWrapper.contains(this.chipWrapper)) {\n      this.chipCollection.innerHTML = '';\n    }\n\n    if (!this.isFilteredData) {\n      this.selectedData = [];\n    }\n\n    if (!isNOU(this.value)) {\n      for (var i = 0, len = this.value.length; i < len; i++) {\n        selectedData = this.getSelectedData(this.value[i]);\n        text = getValue(this.treeSettings.loadOnDemand ? this.fields.text : 'text', selectedData);\n        this.selectedText.push(text);\n        temp = this.selectedText[this.selectedText.length - 1];\n\n        if (this.selectedText.length > 1) {\n          this.dataValue += this.delimiterChar + ' ' + temp;\n          textValue += ',' + temp;\n          this.setProperties({\n            text: textValue\n          }, true);\n        } else {\n          this.dataValue += temp;\n          textValue += temp;\n        }\n\n        if (this.mode !== 'Delimiter' && (!this.isChipDelete || this.treeSettings.autoCheck) && (this.allowMultiSelection || this.showCheckBox)) {\n          this.setChipValues(temp, this.value[i]);\n        }\n\n        this.hiddenElement.innerHTML += '<option selected value =\"' + this.value[i] + '\">' + this.selectedText[this.selectedText.length - 1] + '</option>';\n      }\n    }\n\n    var isValid = this.getValidMode();\n\n    if (this.mode !== 'Box' && (this.allowMultiSelection || this.showCheckBox) && !isValid) {\n      if (this.chipWrapper) {\n        addClass([this.chipWrapper], HIDEICON);\n        removeClass([this.inputWrapper], SHOW_CHIP);\n      }\n    }\n\n    Input.setValue(this.dataValue, this.inputEle, this.floatLabelType);\n\n    if (textValue === '') {\n      this.setProperties({\n        text: null\n      }, true);\n    } else {\n      this.setProperties({\n        text: textValue\n      }, true);\n    }\n\n    if (this.showClearButton && this.inputFocus) {\n      this.showOverAllClear();\n    }\n\n    if ((this.allowMultiSelection || this.showCheckBox) && this.popupObj) {\n      this.popupObj.refreshPosition();\n    }\n\n    this.currentText = this.text;\n    this.currentValue = this.value;\n  };\n\n  DropDownTree.prototype.setChipValues = function (text, value) {\n    if (!this.inputWrapper.contains(this.chipWrapper)) {\n      this.createChip();\n    }\n\n    var chip = this.createElement('span', {\n      className: CHIP,\n      attrs: {\n        'data-value': value\n      }\n    });\n    var chipContent = this.createElement('span', {\n      className: CHIP_CONTENT\n    });\n    var chipClose = this.createElement('span', {\n      className: CHIP_CLOSE + ' ' + ICONS\n    });\n    chipContent.innerHTML = text;\n    chip.appendChild(chipContent);\n    this.chipCollection.appendChild(chip);\n\n    if (this.showClearButton) {\n      chip.appendChild(chipClose);\n      EventHandler.add(chipClose, 'mousedown', this.removeChip, this);\n    }\n  };\n\n  DropDownTree.prototype.setSelectAllWrapper = function (state) {\n    if (this.isFirstRender) {\n      return;\n    }\n\n    if (state && !this.popupEle.contains(this.checkAllParent) && this.showCheckBox) {\n      this.createSelectAllWrapper();\n      this.popupEle.insertBefore(this.checkAllParent, this.popupDiv);\n    } else if (this.popupEle.contains(this.checkAllParent)) {\n      detach(this.checkAllParent);\n      this.checkAllParent = null;\n    }\n  };\n\n  DropDownTree.prototype.setHeaderTemplate = function () {\n    var compiledString;\n\n    if (this.header) {\n      this.header.innerHTML = '';\n    } else {\n      this.header = this.createElement('div');\n      addClass([this.header], HEADER);\n    }\n\n    compiledString = this.templateComplier(this.headerTemplate);\n\n    for (var _i = 0, _a = compiledString({}, null, null, this.headerTemplateId, this.isStringTemplate); _i < _a.length; _i++) {\n      var item = _a[_i];\n      this.header.appendChild(item);\n    }\n\n    this.ddtupdateBlazorTemplates(false, false, true, false);\n    this.popupEle.insertBefore(this.header, this.checkAllParent ? this.checkAllParent : this.popupDiv);\n  };\n\n  DropDownTree.prototype.templateComplier = function (template) {\n    if (template) {\n      var e = void 0;\n\n      try {\n        if (document.querySelectorAll(template).length) {\n          return compile(document.querySelector(template).innerHTML.trim());\n        }\n      } catch (e) {\n        return compile(template);\n      }\n    }\n\n    return compile(template);\n  };\n\n  DropDownTree.prototype.setFooterTemplate = function () {\n    var compiledString;\n\n    if (this.footer) {\n      this.footer.innerHTML = '';\n    } else {\n      this.footer = this.createElement('div');\n      addClass([this.footer], FOOTER);\n    }\n\n    compiledString = this.templateComplier(this.footerTemplate);\n\n    for (var _i = 0, _a = compiledString({}, null, null, this.footerTemplateId, this.isStringTemplate); _i < _a.length; _i++) {\n      var item = _a[_i];\n      this.footer.appendChild(item);\n    }\n\n    this.ddtupdateBlazorTemplates(false, false, false, true);\n    append([this.footer], this.popupEle);\n  };\n\n  DropDownTree.prototype.clearAll = function (e) {\n    if (!this.enabled || this.readonly) {\n      return;\n    }\n\n    this.resetValue();\n    this.showOverAllClear();\n\n    if (this.allowMultiSelection || this.showCheckBox) {\n      if (this.popupObj) {\n        this.popupObj.refreshPosition();\n      }\n\n      if (!this.wrapText) {\n        this.updateOverflowWrapper(true);\n      }\n    }\n\n    if (e) {\n      this.isClearButtonClick = true;\n    }\n\n    if (!this.changeOnBlur) {\n      this.triggerChangeEvent(e);\n    }\n  };\n\n  DropDownTree.prototype.removeChip = function (e) {\n    if (!this.enabled || this.readonly) {\n      return;\n    }\n\n    var element = e.target.parentElement;\n    var value = element.getAttribute('data-value');\n\n    if (this.chipCollection) {\n      if (element) {\n        remove(element);\n      }\n    }\n\n    this.isChipDelete = true;\n    this.isClearButtonClick = true;\n    this.removeSelectedData(value, true);\n    this.selectedText = [];\n\n    if (this.allowMultiSelection) {\n      this.treeObj.selectedNodes = this.value.slice();\n      this.updateSelectedValues();\n    }\n\n    if (this.showCheckBox) {\n      this.treeObj.uncheckAll([value]);\n      this.clearCheckAll();\n      this.setMultiSelect();\n    }\n\n    this.triggerChangeEvent(e);\n    this.isChipDelete = false;\n    this.ensurePlaceHolder();\n  };\n\n  DropDownTree.prototype.resetValue = function (isDynamicChange) {\n    Input.setValue(null, this.inputEle, this.floatLabelType);\n    this.oldValue = this.value;\n    this.dataValue = null;\n    this.setProperties({\n      value: []\n    }, true);\n    this.setProperties({\n      text: null\n    }, true);\n    this.selectedData = [];\n    setValue('selectedNodes', [], this.treeObj);\n    this.hiddenElement.innerHTML = '';\n\n    if (this.showCheckBox) {\n      this.treeObj.uncheckAll();\n      this.setMultiSelect();\n      this.clearCheckAll();\n    }\n\n    if (this.oldValue === null && !isDynamicChange) {\n      this.removeValue = true;\n    } else if (isDynamicChange) {\n      this.triggerChangeEvent();\n    }\n\n    if ((this.allowMultiSelection || this.showCheckBox) && this.chipWrapper) {\n      this.chipCollection.innerHTML = '';\n      this.ensurePlaceHolder();\n    }\n  };\n\n  DropDownTree.prototype.clearCheckAll = function () {\n    if (this.showSelectAll && this.value.length === 0) {\n      this.setLocale(false);\n    }\n  };\n\n  DropDownTree.prototype.selectAllItems = function (state) {\n    if (this.showCheckBox) {\n      state ? this.treeObj.checkAll() : this.treeObj.uncheckAll();\n      this.checkSelectAll = true;\n    } else if (this.allowMultiSelection) {\n      if (!state) {\n        this.treeObj.selectedNodes = [];\n      } else {\n        var li = selectAll('li', this.treeObj.element);\n        var id = void 0;\n        var arr = [];\n\n        for (var i = 0; i < li.length; i++) {\n          id = li[i].getAttribute('data-uid').toString();\n          arr.push(id);\n        }\n\n        this.treeObj.selectedNodes = arr;\n      }\n    }\n\n    this.updateMode();\n    this.setMultiSelect();\n\n    if (!this.wrapText) {\n      state ? this.updateView() : this.updateOverflowWrapper(true);\n    }\n  };\n\n  DropDownTree.prototype.updateTreeSettings = function (prop) {\n    var value = Object.keys(prop.treeSettings)[0];\n\n    if (value === 'autoCheck') {\n      this.ensureAutoCheck();\n      this.treeObj.autoCheck = this.treeSettings.autoCheck;\n    } else if (value === 'loadOnDemand') {\n      this.treeObj.loadOnDemand = this.treeSettings.loadOnDemand;\n    } else if (value === 'expandOn') {\n      this.treeObj.expandOn = this.treeSettings.expandOn;\n      this.treeObj.dataBind();\n      return;\n    }\n\n    this.treeObj.dataBind();\n    this.setMultiSelect();\n  };\n\n  DropDownTree.prototype.updateCheckBoxState = function (checkBox) {\n    if (!this.wrapText) {\n      this.updateOverflowWrapper(false);\n    }\n\n    this.treeObj.showCheckBox = checkBox;\n    this.treeObj.dataBind();\n    this.isDynamicChange = true;\n    this.setSelectAllWrapper(this.showSelectAll);\n\n    if (this.showSelectAll) {\n      this.setLocale();\n    }\n\n    if (this.showCheckBox) {\n      this.updateMode();\n    }\n\n    this.setMultiSelect();\n    this.isDynamicChange = false;\n  };\n\n  DropDownTree.prototype.updateTemplate = function () {\n    if (this.popupObj) {\n      this.popupObj.destroy();\n\n      if (this.isPopupOpen) {\n        this.hidePopup();\n        this.isFirstRender = true;\n        this.renderPopup();\n      } else {\n        this.isFirstRender = true;\n      }\n    }\n  };\n\n  DropDownTree.prototype.l10nUpdate = function (actionFailure) {\n    if (this.noRecord) {\n      this.noRecord.innerHTML = '';\n    } else {\n      this.noRecord = this.createElement('div');\n      addClass([this.noRecord], NODATACONTAINER);\n      prepend([this.noRecord], this.popupDiv);\n    }\n\n    if (this.noRecordsTemplate !== 'No Records Found' || this.actionFailureTemplate !== 'The Request Failed') {\n      var template = actionFailure ? this.actionFailureTemplate : this.noRecordsTemplate;\n      var compiledString = void 0;\n      var templateId = actionFailure ? this.actionFailureTemplateId : this.noRecordsTemplateId;\n      compiledString = this.templateComplier(template);\n\n      for (var _i = 0, _a = compiledString({}, null, null, templateId, this.isStringTemplate); _i < _a.length; _i++) {\n        var item = _a[_i];\n        this.noRecord.appendChild(item);\n      }\n\n      this.ddtupdateBlazorTemplates(!actionFailure, actionFailure);\n    } else {\n      var l10nLocale = {\n        noRecordsTemplate: 'No Records Found',\n        actionFailureTemplate: 'The Request Failed'\n      };\n      this.l10n = new L10n(this.getLocaleName(), l10nLocale, this.locale);\n      this.noRecord.innerHTML = actionFailure ? this.l10n.getConstant('actionFailureTemplate') : this.l10n.getConstant('noRecordsTemplate');\n    }\n  };\n\n  DropDownTree.prototype.ddtupdateBlazorTemplates = function (noRecord, action, header, footer, isEmpty) {\n    if (!this.isStringTemplate) {\n      if (this.noRecordsTemplate && noRecord) {\n        updateBlazorTemplate(this.noRecordsTemplateId, NORECORDSTEMPLATE, this, isEmpty);\n      }\n\n      if (this.actionFailureTemplate && action) {\n        updateBlazorTemplate(this.actionFailureTemplateId, ACTIONFAILURETEMPLATE, this, isEmpty);\n      }\n\n      if (header) {\n        updateBlazorTemplate(this.headerTemplateId, HEADERTEMPLATE, this);\n      }\n\n      if (footer) {\n        updateBlazorTemplate(this.footerTemplateId, FOOTERTEMPLATE, this);\n      }\n    }\n  };\n\n  DropDownTree.prototype.ddtresetBlazorTemplates = function (noRecord, action, header, footer) {\n    if (!this.isStringTemplate) {\n      if (this.noRecordsTemplate && noRecord) {\n        resetBlazorTemplate(this.noRecordsTemplateId, NORECORDSTEMPLATE);\n      }\n\n      if (this.actionFailureTemplate && action) {\n        resetBlazorTemplate(this.actionFailureTemplateId, ACTIONFAILURETEMPLATE);\n      }\n\n      if (header) {\n        resetBlazorTemplate(this.headerTemplateId, HEADERTEMPLATE);\n      }\n\n      if (footer) {\n        resetBlazorTemplate(this.footerTemplateId, FOOTERTEMPLATE);\n      }\n    }\n  };\n\n  DropDownTree.prototype.updateRecordTemplate = function (action) {\n    if (this.treeItems && this.treeItems.length <= 0) {\n      this.l10nUpdate(action);\n      this.updateTemplate();\n    }\n  };\n\n  DropDownTree.prototype.updateOverflowWrapper = function (state) {\n    if (!state) {\n      if (!this.inputWrapper.contains(this.overFlowWrapper)) {\n        this.overFlowWrapper = this.createElement('span', {\n          className: OVERFLOW_VIEW + ' ' + HIDEICON\n        });\n        this.inputWrapper.insertBefore(this.overFlowWrapper, this.hiddenElement);\n      }\n    } else if (this.inputWrapper.contains(this.overFlowWrapper) && state) {\n      this.overFlowWrapper.innerHTML = '';\n    }\n  };\n\n  DropDownTree.prototype.updateMultiSelection = function (state) {\n    if (!this.wrapText) {\n      this.updateOverflowWrapper(false);\n    }\n\n    this.treeObj.allowMultiSelection = state;\n    this.treeObj.dataBind();\n    this.updateOption();\n\n    if (this.allowMultiSelection) {\n      this.updateMode();\n    }\n\n    this.setMultiSelect();\n  };\n\n  DropDownTree.prototype.updateAllowFiltering = function (state) {\n    if (!this.isFirstRender) {\n      if (state) {\n        this.renderFilter();\n      } else {\n        this.destroyFilter();\n      }\n    }\n\n    this.ensureAutoCheck();\n  };\n\n  DropDownTree.prototype.updateFilterPlaceHolder = function () {\n    if (this.filterObj) {\n      this.filterObj.placeholder = this.filterBarPlaceholder;\n      this.filterObj.element.setAttribute('aria-label', this.filterBarPlaceholder);\n    }\n  };\n\n  DropDownTree.prototype.updateValue = function (value) {\n    if (isNOU(value) || value.length === 0) {\n      this.resetValue(true);\n    } else {\n      this.setTreeValue();\n\n      if ((this.allowMultiSelection || this.showCheckBox) && !this.wrapText) {\n        this.updateOverflowWrapper(false);\n        this.updateView();\n      }\n    }\n\n    this.updateHiddenValue();\n  };\n\n  DropDownTree.prototype.updateText = function (text) {\n    if (isNOU(text)) {\n      this.resetValue();\n    } else {\n      this.setTreeText();\n\n      if ((this.allowMultiSelection || this.showCheckBox) && !this.wrapText) {\n        this.updateOverflowWrapper(false);\n        this.updateView();\n      }\n    }\n\n    this.updateHiddenValue();\n  };\n\n  DropDownTree.prototype.updateModelMode = function () {\n    var validMode = this.allowMultiSelection ? true : this.showCheckBox ? true : false;\n\n    if (!validMode) {\n      return;\n    }\n\n    if (!this.wrapText) {\n      var overFlow = select('.' + OVERFLOW_VIEW, this.inputWrapper);\n\n      if (overFlow) {\n        overFlow.innerHTML = '';\n      }\n    }\n\n    this.updateMode();\n    this.setMultiSelect();\n\n    if (!this.wrapText && this.value && this.value.length !== 0) {\n      this.updateOverFlowView();\n      addClass([this.inputEle], CHIP_INPUT);\n\n      if (this.mode === 'Box') {\n        removeClass([this.overFlowWrapper, this.inputWrapper], SHOW_TEXT);\n      } else {\n        addClass([this.overFlowWrapper, this.inputWrapper], SHOW_TEXT);\n      }\n    }\n  };\n\n  DropDownTree.prototype.updateOption = function () {\n    if (!this.hiddenElement.hasAttribute('multiple') && (this.allowMultiSelection || this.showCheckBox)) {\n      this.hiddenElement.setAttribute('multiple', '');\n    } else if (this.hiddenElement.hasAttribute('multiple') && !this.allowMultiSelection && !this.showCheckBox) {\n      this.hiddenElement.removeAttribute('multiple');\n    }\n  };\n  /**\n   * Dynamically change the value of properties.\n   * @private\n   */\n  // tslint:disable-next-line:max-func-body-length\n\n\n  DropDownTree.prototype.onPropertyChanged = function (newProp, oldProp) {\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'width':\n          this.setElementWidth(newProp.width);\n\n          if (this.popupObj) {\n            this.popupObj.element.style.width = this.setWidth();\n          }\n\n          break;\n\n        case 'placeholder':\n          Input.setPlaceholder(newProp.placeholder, this.inputEle);\n          break;\n\n        case 'cssClass':\n          this.setCssClass(newProp.cssClass, oldProp.cssClass);\n          break;\n\n        case 'enableRtl':\n          this.setEnableRTL(this.enableRtl);\n          break;\n\n        case 'fields':\n          this.setFields();\n          break;\n\n        case 'readonly':\n          Input.setReadonly(newProp.readonly, this.inputEle);\n          break;\n\n        case 'enabled':\n          this.setEnable();\n          break;\n\n        case 'floatLabelType':\n          Input.removeFloating(this.inputObj);\n          Input.addFloating(this.inputEle, newProp.floatLabelType, this.placeholder, this.createElement);\n          this.ensureClearIconPosition(newProp.floatLabelType);\n          break;\n\n        case 'showClearButton':\n          this.updateClearButton(newProp.showClearButton);\n          break;\n\n        case 'allowFiltering':\n          this.updateAllowFiltering(newProp.allowFiltering);\n          break;\n\n        case 'filterBarPlaceholder':\n          this.updateFilterPlaceHolder();\n          break;\n\n        case 'value':\n          this.updateValue(newProp.value);\n          break;\n\n        case 'text':\n          this.updateText(newProp.text);\n          break;\n\n        case 'allowMultiSelection':\n          this.updateMultiSelection(newProp.allowMultiSelection);\n          break;\n\n        case 'mode':\n          this.updateModelMode();\n          break;\n\n        case 'delimiterChar':\n          if (this.mode === 'Box') {\n            return;\n          }\n\n          if (this.showCheckBox || this.allowMultiSelection) {\n            this.setMultiSelect();\n          }\n\n          break;\n\n        case 'selectAllText':\n          if (this.showCheckBox && this.showSelectAll) {\n            this.setLocale();\n          }\n\n          break;\n\n        case 'unSelectAllText':\n          if (this.showCheckBox && this.showSelectAll) {\n            this.setLocale(false);\n          }\n\n          break;\n\n        case 'showSelectAll':\n          if (this.showCheckBox) {\n            this.setSelectAllWrapper(newProp.showSelectAll);\n            this.updatePopupHeight();\n          }\n\n          break;\n\n        case 'showCheckBox':\n          this.updateCheckBoxState(newProp.showCheckBox);\n          this.updatePopupHeight();\n          this.updateOption();\n          break;\n\n        case 'treeSettings':\n          this.updateTreeSettings(newProp);\n          break;\n\n        case 'sortOrder':\n          this.treeObj.sortOrder = newProp.sortOrder;\n          this.treeObj.dataBind();\n          break;\n\n        case 'showDropDownIcon':\n          this.updateDropDownIconState(newProp.showDropDownIcon);\n          break;\n\n        case 'popupWidth':\n          if (this.popupObj) {\n            this.popupObj.element.style.width = this.setWidth();\n          }\n\n          break;\n\n        case 'popupHeight':\n          if (this.popupObj) {\n            this.updatePopupHeight();\n          }\n\n          break;\n\n        case 'zIndex':\n          if (this.popupObj) {\n            this.popupObj.zIndex = newProp.zIndex;\n            this.popupObj.dataBind();\n          }\n\n          break;\n\n        case 'headerTemplate':\n          this.updateTemplate();\n          break;\n\n        case 'footerTemplate':\n          this.updateTemplate();\n          break;\n\n        case 'itemTemplate':\n          this.treeObj.nodeTemplate = newProp.itemTemplate;\n          this.treeObj.dataBind();\n          break;\n\n        case 'noRecordsTemplate':\n          this.updateRecordTemplate();\n          break;\n\n        case 'actionFailureTemplate':\n          this.updateRecordTemplate(true);\n          break;\n\n        case 'htmlAttributes':\n          this.setHTMLAttributes();\n          break;\n\n        case 'wrapText':\n          this.updateOverflowWrapper(this.wrapText);\n\n          if ((this.allowMultiSelection || this.showCheckBox) && !this.wrapText) {\n            this.updateView();\n          } else {\n            addClass([this.overFlowWrapper], HIDEICON);\n\n            if (this.chipWrapper && this.mode === 'Box') {\n              removeClass([this.chipWrapper], HIDEICON);\n            } else {\n              removeClass([this.inputWrapper], SHOW_CHIP);\n              removeClass([this.inputEle], CHIP_INPUT);\n            }\n\n            this.ensurePlaceHolder();\n          }\n\n          break;\n      }\n    }\n  };\n  /**\n   * Allows you to clear the selected values from the Dropdown Tree component.\n   * @method clear\n   * @return {void}.\n   */\n\n\n  DropDownTree.prototype.clear = function () {\n    this.clearAll();\n\n    if (this.inputFocus) {\n      this.onFocusOut();\n    } else {\n      if (this.changeOnBlur) {\n        this.triggerChangeEvent();\n      }\n\n      this.removeValue = false;\n    }\n  };\n  /**\n   * Removes the component from the DOM and detaches all its related event handlers. Also, it removes the attributes and classes.\n   * @method destroy\n   * @return {void}.\n   */\n\n\n  DropDownTree.prototype.destroy = function () {\n    this.ddtresetBlazorTemplates(true, true, true, true);\n    this.unWireEvents();\n    this.setCssClass(null, this.cssClass);\n    this.resetValue();\n    this.treeObj.destroy();\n    this.destroyFilter();\n\n    if (this.popupObj) {\n      this.popupObj.destroy();\n      detach(this.popupObj.element);\n    }\n\n    if (this.element.tagName !== this.getDirective()) {\n      this.inputWrapper.parentElement.insertBefore(this.element, this.inputWrapper);\n    }\n\n    detach(this.inputWrapper);\n    detach(this.popupDiv);\n    this.element.classList.remove('e-input');\n\n    _super.prototype.destroy.call(this);\n  };\n\n  DropDownTree.prototype.destroyFilter = function () {\n    if (this.filterObj) {\n      this.filterObj.destroy();\n      detach(this.filterObj.element);\n      detach(this.filterContainer);\n      this.filterObj = null;\n    }\n  };\n  /**\n   * Ensures visibility of the Dropdown Tree item by using item value or item element.\n   * If many Dropdown Tree items are present, and we are in need to find a particular item, then the `ensureVisible` property\n   * helps you to bring the item to visibility by expanding the Dropdown Tree and scrolling to the specific item.\n   * @param  {string | Element} item - Specifies the value of Dropdown Tree item/ Dropdown Tree item element.\n   */\n\n\n  DropDownTree.prototype.ensureVisible = function (item) {\n    this.treeObj.ensureVisible(item);\n  };\n  /**\n   * To get the updated data of source of the Dropdown Tree.\n   * @param  {string | Element} item - Specifies the value of Dropdown Tree item/ Dropdown Tree item element.\n   * @returns { { [key: string]: Object }[] }.\n   */\n\n\n  DropDownTree.prototype.getData = function (item) {\n    return this.treeObj.getTreeData(item);\n  };\n  /**\n   * Close the Dropdown tree pop-up.\n   * @returns void.\n   */\n\n\n  DropDownTree.prototype.hidePopup = function () {\n    var eventArgs = {\n      popup: this.popupObj\n    };\n    this.inputWrapper.classList.remove(ICONANIMATION);\n\n    if (this.popupEle) {\n      this.popupEle.style.display = 'none';\n    }\n\n    attributes(this.inputWrapper, {\n      'aria-expanded': 'false'\n    });\n\n    if (this.popupObj && this.isPopupOpen) {\n      this.popupObj.hide();\n\n      if (this.inputFocus) {\n        this.inputWrapper.focus();\n\n        if (this.allowFiltering) {\n          addClass([this.inputWrapper], [INPUTFOCUS]);\n        }\n      }\n\n      this.trigger('close', eventArgs);\n    }\n  };\n  /**\n   * Based on the state parameter, entire list item will be selected or deselected.\n   * parameter\n   * `true`   - Selects entire Dropdown Tree items.\n   * `false`  - Unselects entire Dropdown Tree items.\n   * @returns void\n   */\n\n\n  DropDownTree.prototype.selectAll = function (state) {\n    this.selectAllItems(state);\n  };\n  /**\n   * Opens the popup that displays the Dropdown Tree items.\n   * @returns void.\n   */\n\n\n  DropDownTree.prototype.showPopup = function () {\n    if (!this.enabled || this.readonly || this.isPopupOpen) {\n      return;\n    }\n\n    this.renderPopup();\n    this.focusIn();\n  };\n  /**\n   * Return the module name.\n   * @private\n   */\n\n\n  DropDownTree.prototype.getModuleName = function () {\n    return 'dropdowntree';\n  };\n\n  __decorate([Property('The Request Failed')], DropDownTree.prototype, \"actionFailureTemplate\", void 0);\n\n  __decorate([Property(false)], DropDownTree.prototype, \"allowFiltering\", void 0);\n\n  __decorate([Property(false)], DropDownTree.prototype, \"allowMultiSelection\", void 0);\n\n  __decorate([Property(true)], DropDownTree.prototype, \"changeOnBlur\", void 0);\n\n  __decorate([Property('')], DropDownTree.prototype, \"cssClass\", void 0);\n\n  __decorate([Property(',')], DropDownTree.prototype, \"delimiterChar\", void 0);\n\n  __decorate([Property(true)], DropDownTree.prototype, \"enabled\", void 0);\n\n  __decorate([Complex({}, Fields)], DropDownTree.prototype, \"fields\", void 0);\n\n  __decorate([Property(null)], DropDownTree.prototype, \"filterBarPlaceholder\", void 0);\n\n  __decorate([Property('StartsWith')], DropDownTree.prototype, \"filterType\", void 0);\n\n  __decorate([Property('Never')], DropDownTree.prototype, \"floatLabelType\", void 0);\n\n  __decorate([Property(null)], DropDownTree.prototype, \"footerTemplate\", void 0);\n\n  __decorate([Property(false)], DropDownTree.prototype, \"ignoreAccent\", void 0);\n\n  __decorate([Property(true)], DropDownTree.prototype, \"ignoreCase\", void 0);\n\n  __decorate([Property(null)], DropDownTree.prototype, \"headerTemplate\", void 0);\n\n  __decorate([Property({})], DropDownTree.prototype, \"htmlAttributes\", void 0);\n\n  __decorate([Property(null)], DropDownTree.prototype, \"itemTemplate\", void 0);\n\n  __decorate([Property('Default')], DropDownTree.prototype, \"mode\", void 0);\n\n  __decorate([Property('No Records Found')], DropDownTree.prototype, \"noRecordsTemplate\", void 0);\n\n  __decorate([Property(null)], DropDownTree.prototype, \"placeholder\", void 0);\n\n  __decorate([Property('300px')], DropDownTree.prototype, \"popupHeight\", void 0);\n\n  __decorate([Property('100%')], DropDownTree.prototype, \"popupWidth\", void 0);\n\n  __decorate([Property(false)], DropDownTree.prototype, \"readonly\", void 0);\n\n  __decorate([Property(false)], DropDownTree.prototype, \"showSelectAll\", void 0);\n\n  __decorate([Property('Select All')], DropDownTree.prototype, \"selectAllText\", void 0);\n\n  __decorate([Property(false)], DropDownTree.prototype, \"showCheckBox\", void 0);\n\n  __decorate([Property(true)], DropDownTree.prototype, \"showClearButton\", void 0);\n\n  __decorate([Property(true)], DropDownTree.prototype, \"showDropDownIcon\", void 0);\n\n  __decorate([Property('None')], DropDownTree.prototype, \"sortOrder\", void 0);\n\n  __decorate([Property(null)], DropDownTree.prototype, \"text\", void 0);\n\n  __decorate([Complex({}, TreeSettings)], DropDownTree.prototype, \"treeSettings\", void 0);\n\n  __decorate([Property('Unselect All')], DropDownTree.prototype, \"unSelectAllText\", void 0);\n\n  __decorate([Property(null)], DropDownTree.prototype, \"value\", void 0);\n\n  __decorate([Property('100%')], DropDownTree.prototype, \"width\", void 0);\n\n  __decorate([Property(1000)], DropDownTree.prototype, \"zIndex\", void 0);\n\n  __decorate([Property(false)], DropDownTree.prototype, \"wrapText\", void 0);\n\n  __decorate([Event()], DropDownTree.prototype, \"actionFailure\", void 0);\n\n  __decorate([Event()], DropDownTree.prototype, \"beforeOpen\", void 0);\n\n  __decorate([Event()], DropDownTree.prototype, \"change\", void 0);\n\n  __decorate([Event()], DropDownTree.prototype, \"close\", void 0);\n\n  __decorate([Event()], DropDownTree.prototype, \"blur\", void 0);\n\n  __decorate([Event()], DropDownTree.prototype, \"created\", void 0);\n\n  __decorate([Event()], DropDownTree.prototype, \"dataBound\", void 0);\n\n  __decorate([Event()], DropDownTree.prototype, \"destroyed\", void 0);\n\n  __decorate([Event()], DropDownTree.prototype, \"filtering\", void 0);\n\n  __decorate([Event()], DropDownTree.prototype, \"focus\", void 0);\n\n  __decorate([Event()], DropDownTree.prototype, \"keyPress\", void 0);\n\n  __decorate([Event()], DropDownTree.prototype, \"open\", void 0);\n\n  __decorate([Event()], DropDownTree.prototype, \"select\", void 0);\n\n  DropDownTree = __decorate([NotifyPropertyChanges], DropDownTree);\n  return DropDownTree;\n}(Component);\n\nexport { DropDownTree };","map":null,"metadata":{},"sourceType":"module"}