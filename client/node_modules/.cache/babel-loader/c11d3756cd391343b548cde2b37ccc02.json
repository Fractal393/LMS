{"ast":null,"code":"/**\n * `PdfName` class is used to perform name (element names) related primitive operations.\n * @private\n */\nvar PdfName =\n/** @class */\nfunction () {\n  function PdfName(value) {\n    /**\n     * `Start symbol` of the name object.\n     * @default /\n     * @private\n     */\n    this.stringStartMark = '/';\n    /**\n     * `Value` of the element.\n     * @private\n     */\n\n    this.internalValue = '';\n    /**\n     * Indicates if the object is currently in `saving state or not`.\n     * @default false\n     * @private\n     */\n\n    this.isSaving6 = false;\n    /**\n     * Internal variable to store the `position`.\n     * @default -1\n     * @private\n     */\n\n    this.position6 = -1;\n    this.internalValue = this.normalizeValue(value);\n  }\n\n  Object.defineProperty(PdfName.prototype, \"status\", {\n    //property\n\n    /**\n     * Gets or sets the `Status` of the specified object.\n     * @private\n     */\n    get: function () {\n      return this.status6;\n    },\n    set: function (value) {\n      this.status6 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfName.prototype, \"isSaving\", {\n    /**\n     * Gets or sets a value indicating whether this document `is saving` or not.\n     * @private\n     */\n    get: function () {\n      return this.isSaving6;\n    },\n    set: function (value) {\n      this.isSaving6 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfName.prototype, \"objectCollectionIndex\", {\n    /**\n     * Gets or sets the `index` value of the specified object.\n     * @private\n     */\n    get: function () {\n      return this.index6;\n    },\n    set: function (value) {\n      this.index6 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfName.prototype, \"position\", {\n    /**\n     * Gets or sets the `position` of the object.\n     * @private\n     */\n    get: function () {\n      return this.position6;\n    },\n    set: function (value) {\n      this.position6 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfName.prototype, \"clonedObject\", {\n    /**\n     * Returns `cloned object`.\n     * @private\n     */\n    get: function () {\n      return null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfName.prototype, \"value\", {\n    /**\n     * Gets or sets the `value` of the object.\n     * @private\n     */\n    get: function () {\n      return this.internalValue;\n    },\n    set: function (value) {\n      // if (value !== this.value) {\n      var val = value;\n\n      if (value !== null && value.length > 0) {\n        // val = (value.substring(0, 1) === this.stringStartMark) ? value.substring(1) : value;\n        val = value;\n        this.internalValue = this.normalizeValue(val);\n      } else {\n        this.internalValue = val;\n      } // }\n\n    },\n    enumerable: true,\n    configurable: true\n  }); //public methods\n\n  /**\n   * `Saves` the name using the specified writer.\n   * @private\n   */\n\n  PdfName.prototype.save = function (writer) {\n    // if (writer === null) {\n    //     throw new Error('ArgumentNullException : writer');\n    // }\n    writer.write(this.toString());\n  };\n  /**\n   * Gets `string` representation of the primitive.\n   * @private\n   */\n\n\n  PdfName.prototype.toString = function () {\n    return this.stringStartMark + this.escapeString(this.value);\n  };\n  /**\n   * Creates a `copy of PdfName`.\n   * @private\n   */\n\n\n  PdfName.prototype.clone = function (crossTable) {\n    var newName = new PdfName();\n    newName.value = this.internalValue;\n    return newName;\n  };\n  /**\n   * Replace some characters with its `escape sequences`.\n   * @private\n   */\n\n\n  PdfName.prototype.escapeString = function (stringValue) {\n    // if (str === null) {\n    //     throw new Error('ArgumentNullException : str');\n    // }\n    // if (str === '') {\n    //     return str;\n    // }\n    var result = '';\n    var len = 0;\n\n    for (var i = 0, len_1 = stringValue.length; i < len_1; i++) {\n      var ch = stringValue[i];\n      var index = PdfName.delimiters.indexOf(ch); // switch (ch) {\n      //     case '\\r' :\n      //         result = result + '\\\\r';\n      //         break;\n      //     case '\\n' :\n      //         result = result + '\\n';\n      //         break;\n      //     case '(' :\n      //     case ')' :\n      //     case '\\\\' :\n      //         //result.Append( '\\\\' ).Append( ch );\n      //         result = result + ch;\n      //         break;\n      //     default :\n      //         result = result + ch;\n      //         break;\n      // }\n\n      result = result + ch;\n    }\n\n    return result;\n  }; //methiods\n\n  /**\n   * Replace a symbol with its code with the precedence of the `sharp sign`.\n   * @private\n   */\n\n\n  PdfName.prototype.normalizeValue = function (value, c) {\n    // if (typeof c === undefined) {\n    //     let str : string = value;\n    //     for (let i : number = 0; i < PdfName.replacements.length; i++) {\n    //         str = this.normalizeValue(str, c);\n    //     }\n    //     return str;\n    // } else {\n    var strFormat = '#{0:X}'; //return value.replace(c.toString(),String.format(strFormat,c));\n\n    return value; // }\n  };\n  /**\n   * PDF `special characters`.\n   * @private\n   */\n\n\n  PdfName.delimiters = '()<>[]{}/%}';\n  /**\n   * The symbols that are not allowed in PDF names and `should be replaced`.\n   * @private\n   */\n\n  PdfName.replacements = [' ', '\\t', '\\n', '\\r'];\n  return PdfName;\n}();\n\nexport { PdfName };","map":null,"metadata":{},"sourceType":"module"}