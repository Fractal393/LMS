{"ast":null,"code":"/**\r\n * DevExtreme (ui/tab_panel.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _support = require(\"../core/utils/support\");\n\nvar _support2 = _interopRequireDefault(_support);\n\nvar _extend = require(\"../core/utils/extend\");\n\nvar _devices = require(\"../core/devices\");\n\nvar _devices2 = _interopRequireDefault(_devices);\n\nvar _dom_adapter = require(\"../core/dom_adapter\");\n\nvar _dom_adapter2 = _interopRequireDefault(_dom_adapter);\n\nvar _component_registrator = require(\"../core/component_registrator\");\n\nvar _component_registrator2 = _interopRequireDefault(_component_registrator);\n\nvar _multi_view = require(\"./multi_view\");\n\nvar _multi_view2 = _interopRequireDefault(_multi_view);\n\nvar _tabs = require(\"./tabs\");\n\nvar _tabs2 = _interopRequireDefault(_tabs);\n\nvar _item = require(\"./tab_panel/item\");\n\nvar _item2 = _interopRequireDefault(_item);\n\nvar _icon = require(\"../core/utils/icon\");\n\nvar _dom = require(\"../core/utils/dom\");\n\nvar _type = require(\"../core/utils/type\");\n\nvar _bindable_template = require(\"../core/templates/bindable_template\");\n\nvar _window = require(\"../core/utils/window\");\n\nvar _window2 = _interopRequireDefault(_window);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar TABPANEL_CLASS = \"dx-tabpanel\";\nvar TABPANEL_TABS_CLASS = \"dx-tabpanel-tabs\";\nvar TABPANEL_CONTAINER_CLASS = \"dx-tabpanel-container\";\nvar TABS_ITEM_TEXT_CLASS = \"dx-tab-text\";\n\nvar TabPanel = _multi_view2.default.inherit({\n  _getDefaultOptions: function () {\n    return (0, _extend.extend)(this.callBase(), {\n      itemTitleTemplate: \"title\",\n      hoverStateEnabled: true,\n      showNavButtons: false,\n      scrollByContent: true,\n      scrollingEnabled: true,\n      onTitleClick: null,\n      onTitleHold: null,\n      onTitleRendered: null,\n      badgeExpr: function (data) {\n        return data ? data.badge : void 0;\n      }\n    });\n  },\n  _defaultOptionsRules: function () {\n    return this.callBase().concat([{\n      device: function () {\n        return \"desktop\" === _devices2.default.real().deviceType && !_devices2.default.isSimulator();\n      },\n      options: {\n        focusStateEnabled: true\n      }\n    }, {\n      device: function () {\n        return !_support2.default.touch;\n      },\n      options: {\n        swipeEnabled: false\n      }\n    }, {\n      device: {\n        platform: \"generic\"\n      },\n      options: {\n        animationEnabled: false\n      }\n    }]);\n  },\n  _init: function () {\n    this.callBase();\n    this.$element().addClass(TABPANEL_CLASS);\n    this.setAria(\"role\", \"tabpanel\");\n  },\n  _initMarkup: function () {\n    this.callBase();\n\n    this._createTitleActions();\n\n    this._renderLayout();\n  },\n  _initTemplates: function () {\n    this.callBase();\n\n    this._templateManager.addDefaultTemplates({\n      title: new _bindable_template.BindableTemplate(function ($container, data) {\n        if ((0, _type.isPlainObject)(data)) {\n          var $iconElement = (0, _icon.getImageContainer)(data.icon);\n\n          if ($iconElement) {\n            $container.append($iconElement);\n          }\n\n          if ((0, _type.isDefined)(data.title) && !(0, _type.isPlainObject)(data.title)) {\n            $container.append(_dom_adapter2.default.createTextNode(data.title));\n          }\n        } else {\n          if ((0, _type.isDefined)(data)) {\n            $container.text(String(data));\n          }\n        }\n\n        $container.wrapInner((0, _renderer2.default)(\"<span>\").addClass(TABS_ITEM_TEXT_CLASS));\n      }, [\"title\", \"icon\"], this.option(\"integrationOptions.watchMethod\"))\n    });\n  },\n  _createTitleActions: function () {\n    this._createTitleClickAction();\n\n    this._createTitleHoldAction();\n\n    this._createTitleRenderedAction();\n  },\n  _createTitleClickAction: function () {\n    this._titleClickAction = this._createActionByOption(\"onTitleClick\");\n  },\n  _createTitleHoldAction: function () {\n    this._titleHoldAction = this._createActionByOption(\"onTitleHold\");\n  },\n  _createTitleRenderedAction: function () {\n    this._titleRenderedAction = this._createActionByOption(\"onTitleRendered\");\n  },\n  _renderContent: function () {\n    var that = this;\n    this.callBase();\n\n    if (this.option(\"templatesRenderAsynchronously\")) {\n      this._resizeEventTimer = setTimeout(function () {\n        that._updateLayout();\n      }, 0);\n    }\n  },\n  _renderLayout: function () {\n    if (this._tabs) {\n      this._updateLayout();\n\n      return;\n    }\n\n    var $element = this.$element();\n    this._$tabContainer = (0, _renderer2.default)(\"<div>\").addClass(TABPANEL_TABS_CLASS).appendTo($element);\n    var $tabs = (0, _renderer2.default)(\"<div>\").appendTo(this._$tabContainer);\n    this._tabs = this._createComponent($tabs, _tabs2.default, this._tabConfig());\n    this._$container = (0, _renderer2.default)(\"<div>\").addClass(TABPANEL_CONTAINER_CLASS).appendTo($element);\n\n    this._$container.append(this._$wrapper);\n\n    this._updateLayout();\n  },\n  _updateLayout: function () {\n    if (_window2.default.hasWindow()) {\n      var tabsHeight = this._$tabContainer.outerHeight();\n\n      this._$container.css({\n        marginTop: -tabsHeight,\n        paddingTop: tabsHeight\n      });\n    }\n  },\n  _refreshActiveDescendant: function () {\n    if (!this._tabs) {\n      return;\n    }\n\n    var tabs = this._tabs;\n    var tabItems = tabs.itemElements();\n    var $activeTab = (0, _renderer2.default)(tabItems[tabs.option(\"selectedIndex\")]);\n    var id = this.getFocusedItemId();\n    this.setAria(\"controls\", void 0, (0, _renderer2.default)(tabItems));\n    this.setAria(\"controls\", id, $activeTab);\n  },\n  _tabConfig: function () {\n    return {\n      selectOnFocus: true,\n      focusStateEnabled: this.option(\"focusStateEnabled\"),\n      hoverStateEnabled: this.option(\"hoverStateEnabled\"),\n      repaintChangesOnly: this.option(\"repaintChangesOnly\"),\n      tabIndex: this.option(\"tabIndex\"),\n      selectedIndex: this.option(\"selectedIndex\"),\n      badgeExpr: this.option(\"badgeExpr\"),\n      onItemClick: this._titleClickAction.bind(this),\n      onItemHold: this._titleHoldAction.bind(this),\n      itemHoldTimeout: this.option(\"itemHoldTimeout\"),\n      onSelectionChanged: function (e) {\n        this.option(\"selectedIndex\", e.component.option(\"selectedIndex\"));\n\n        this._refreshActiveDescendant();\n      }.bind(this),\n      onItemRendered: this._titleRenderedAction.bind(this),\n      itemTemplate: this._getTemplateByOption(\"itemTitleTemplate\"),\n      items: this.option(\"items\"),\n      noDataText: null,\n      scrollingEnabled: this.option(\"scrollingEnabled\"),\n      scrollByContent: this.option(\"scrollByContent\"),\n      showNavButtons: this.option(\"showNavButtons\"),\n      itemTemplateProperty: \"tabTemplate\",\n      loopItemFocus: this.option(\"loop\"),\n      selectionRequired: true,\n      onOptionChanged: function (args) {\n        if (\"focusedElement\" === args.name) {\n          if (args.value) {\n            var $value = (0, _renderer2.default)(args.value);\n\n            var $newItem = this._itemElements().eq($value.index());\n\n            this.option(\"focusedElement\", (0, _dom.getPublicElement)($newItem));\n          } else {\n            this.option(\"focusedElement\", args.value);\n          }\n        }\n      }.bind(this),\n      onFocusIn: function (args) {\n        this._focusInHandler(args.event);\n      }.bind(this),\n      onFocusOut: function (args) {\n        if (!this._isFocusOutHandlerExecuting) {\n          this._focusOutHandler(args.event);\n        }\n      }.bind(this)\n    };\n  },\n  _renderFocusTarget: function () {\n    this._focusTarget().attr(\"tabIndex\", -1);\n  },\n  _updateFocusState: function (e, isFocused) {\n    this.callBase(e, isFocused);\n\n    if (e.target === this._tabs._focusTarget().get(0)) {\n      this._toggleFocusClass(isFocused, this._focusTarget());\n    }\n  },\n  _focusOutHandler: function (e) {\n    this._isFocusOutHandlerExecuting = true;\n    this.callBase.apply(this, arguments);\n\n    this._tabs._focusOutHandler(e);\n\n    this._isFocusOutHandlerExecuting = false;\n  },\n  _setTabsOption: function (name, value) {\n    if (this._tabs) {\n      this._tabs.option(name, value);\n    }\n  },\n  _visibilityChanged: function (visible) {\n    if (visible) {\n      this._tabs._dimensionChanged();\n\n      this._updateLayout();\n    }\n  },\n  registerKeyHandler: function (key, handler) {\n    this.callBase(key, handler);\n\n    if (this._tabs) {\n      this._tabs.registerKeyHandler(key, handler);\n    }\n  },\n  repaint: function () {\n    this.callBase();\n\n    this._tabs.repaint();\n  },\n  _optionChanged: function (args) {\n    var name = args.name;\n    var value = args.value;\n    var fullName = args.fullName;\n\n    switch (name) {\n      case \"dataSource\":\n        this.callBase(args);\n        break;\n\n      case \"items\":\n        this._setTabsOption(name, this.option(name));\n\n        this._updateLayout();\n\n        if (!this.option(\"repaintChangesOnly\")) {\n          this._tabs.repaint();\n        }\n\n        this.callBase(args);\n        break;\n\n      case \"width\":\n        this.callBase(args);\n\n        this._tabs.repaint();\n\n        break;\n\n      case \"selectedIndex\":\n      case \"selectedItem\":\n        this._setTabsOption(fullName, value);\n\n        this.callBase(args);\n\n        if (true === this.option(\"focusStateEnabled\")) {\n          var selectedIndex = this.option(\"selectedIndex\");\n\n          var selectedTabContent = this._itemElements().eq(selectedIndex);\n\n          this.option(\"focusedElement\", (0, _dom.getPublicElement)(selectedTabContent));\n        }\n\n        break;\n\n      case \"itemHoldTimeout\":\n      case \"focusStateEnabled\":\n      case \"hoverStateEnabled\":\n        this._setTabsOption(fullName, value);\n\n        this.callBase(args);\n        break;\n\n      case \"scrollingEnabled\":\n      case \"scrollByContent\":\n      case \"showNavButtons\":\n        this._setTabsOption(fullName, value);\n\n        break;\n\n      case \"focusedElement\":\n        var id = value ? (0, _renderer2.default)(value).index() : value;\n        var newItem = value ? this._tabs._itemElements().eq(id) : value;\n\n        this._setTabsOption(\"focusedElement\", (0, _dom.getPublicElement)(newItem));\n\n        this.callBase(args);\n        break;\n\n      case \"itemTitleTemplate\":\n        this._setTabsOption(\"itemTemplate\", this._getTemplateByOption(\"itemTitleTemplate\"));\n\n        break;\n\n      case \"onTitleClick\":\n        this._createTitleClickAction();\n\n        this._setTabsOption(\"onItemClick\", this._titleClickAction.bind(this));\n\n        break;\n\n      case \"onTitleHold\":\n        this._createTitleHoldAction();\n\n        this._setTabsOption(\"onItemHold\", this._titleHoldAction.bind(this));\n\n        break;\n\n      case \"onTitleRendered\":\n        this._createTitleRenderedAction();\n\n        this._setTabsOption(\"onItemRendered\", this._titleRenderedAction.bind(this));\n\n        break;\n\n      case \"loop\":\n        this._setTabsOption(\"loopItemFocus\", value);\n\n        break;\n\n      case \"badgeExpr\":\n        this._invalidate();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _clean: function () {\n    clearTimeout(this._resizeEventTimer);\n    this.callBase();\n  }\n});\n\nTabPanel.ItemClass = _item2.default;\n(0, _component_registrator2.default)(\"dxTabPanel\", TabPanel);\nmodule.exports = TabPanel;\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}