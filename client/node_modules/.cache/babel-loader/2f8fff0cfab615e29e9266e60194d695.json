{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.state_storing.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _uiGrid_core = require(\"./ui.grid_core.state_storing_core\");\n\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar getDataState = function (that) {\n  var pagerView = that.getView(\"pagerView\");\n  var dataController = that.getController(\"data\");\n  var state = {\n    allowedPageSizes: pagerView ? pagerView.getPageSizes() : void 0,\n    filterPanel: {\n      filterEnabled: that.option(\"filterPanel.filterEnabled\")\n    },\n    filterValue: that.option(\"filterValue\"),\n    focusedRowKey: that.option(\"focusedRowEnabled\") ? that.option(\"focusedRowKey\") : void 0\n  };\n  return (0, _extend.extend)(state, dataController.getUserState());\n};\n\nvar processLoadState = function (that) {\n  var columnsController = that.getController(\"columns\");\n  var selectionController = that.getController(\"selection\");\n  var exportController = that.getController(\"export\");\n  var dataController = that.getController(\"data\");\n\n  if (columnsController) {\n    columnsController.columnsChanged.add(function () {\n      that.updateState({\n        columns: columnsController.getUserState()\n      });\n    });\n  }\n\n  if (selectionController) {\n    selectionController.selectionChanged.add(function (e) {\n      that.updateState({\n        selectedRowKeys: e.selectedRowKeys,\n        selectionFilter: e.selectionFilter\n      });\n    });\n  }\n\n  if (dataController) {\n    that._initialPageSize = that.option(\"paging.pageSize\");\n    that._initialFilterValue = that.option(\"filterValue\");\n    dataController.changed.add(function () {\n      var state = getDataState(that);\n      that.updateState(state);\n    });\n  }\n\n  if (exportController) {\n    exportController.selectionOnlyChanged.add(function () {\n      that.updateState({\n        exportSelectionOnly: exportController.selectionOnly()\n      });\n    });\n  }\n};\n\nvar DEFAULT_FILTER_VALUE = null;\n\nvar getFilterValue = function (that, state) {\n  var filterSyncController = that.getController(\"filterSync\");\n  var columnsController = that.getController(\"columns\");\n  var hasFilterState = state.columns || void 0 !== state.filterValue;\n\n  if (filterSyncController) {\n    if (hasFilterState) {\n      return state.filterValue || filterSyncController.getFilterValueFromColumns(state.columns);\n    } else {\n      return that._initialFilterValue || filterSyncController.getFilterValueFromColumns(columnsController.getColumns());\n    }\n  }\n\n  return DEFAULT_FILTER_VALUE;\n};\n\nmodule.exports = {\n  defaultOptions: function () {\n    return {\n      stateStoring: {\n        enabled: false,\n        storageKey: null,\n        type: \"localStorage\",\n        customLoad: null,\n        customSave: null,\n        savingTimeout: 2e3\n      }\n    };\n  },\n  controllers: {\n    stateStoring: _uiGrid_core2.default.StateStoringController\n  },\n  extenders: {\n    views: {\n      rowsView: {\n        init: function () {\n          var that = this;\n          var dataController = that.getController(\"data\");\n          that.callBase();\n          dataController.stateLoaded.add(function () {\n            if (dataController.isLoaded() && !dataController.getDataSource()) {\n              that.setLoading(false);\n              that.renderNoDataText();\n              var columnHeadersView = that.component.getView(\"columnHeadersView\");\n              columnHeadersView && columnHeadersView.render();\n\n              that.component._fireContentReadyAction();\n            }\n          });\n        }\n      }\n    },\n    controllers: {\n      stateStoring: {\n        init: function () {\n          this.callBase.apply(this, arguments);\n          processLoadState(this);\n        },\n        isLoading: function () {\n          return this.callBase() || this.getController(\"data\").isStateLoading();\n        },\n        state: function (_state) {\n          var result = this.callBase.apply(this, arguments);\n\n          if (void 0 !== _state) {\n            this.applyState((0, _extend.extend)({}, _state));\n          }\n\n          return result;\n        },\n        updateState: function (state) {\n          if (this.isEnabled()) {\n            var oldState = this.state();\n            var newState = (0, _extend.extend)({}, oldState, state);\n            var oldStateHash = (0, _common.getKeyHash)(oldState);\n            var newStateHash = (0, _common.getKeyHash)(newState);\n\n            if (!(0, _common.equalByValue)(oldStateHash, newStateHash)) {\n              (0, _extend.extend)(this._state, state);\n              this.save();\n            }\n          } else {\n            (0, _extend.extend)(this._state, state);\n          }\n        },\n        applyState: function (state) {\n          var that = this;\n          var allowedPageSizes = state.allowedPageSizes;\n          var searchText = state.searchText;\n          var selectedRowKeys = state.selectedRowKeys;\n          var selectionFilter = state.selectionFilter;\n          var exportController = that.getController(\"export\");\n          var columnsController = that.getController(\"columns\");\n          var dataController = that.getController(\"data\");\n          var scrollingMode = that.option(\"scrolling.mode\");\n          var isVirtualScrollingMode = \"virtual\" === scrollingMode || \"infinite\" === scrollingMode;\n          var showPageSizeSelector = true === that.option(\"pager.visible\") && that.option(\"pager.showPageSizeSelector\");\n          that.component.beginUpdate();\n\n          if (columnsController) {\n            columnsController.setUserState(state.columns);\n          }\n\n          if (exportController) {\n            exportController.selectionOnly(state.exportSelectionOnly);\n          }\n\n          if (selectedRowKeys) {\n            that.option(\"selectedRowKeys\", selectedRowKeys);\n          }\n\n          that.option(\"selectionFilter\", selectionFilter);\n\n          if (allowedPageSizes && \"auto\" === that.option(\"pager.allowedPageSizes\")) {\n            that.option(\"pager\").allowedPageSizes = allowedPageSizes;\n          }\n\n          if (that.option(\"focusedRowEnabled\")) {\n            that.option(\"focusedRowKey\", state.focusedRowKey);\n          }\n\n          that.component.endUpdate();\n          searchText && that.option(\"searchPanel.text\", searchText);\n          that.option(\"filterValue\", getFilterValue(that, state));\n          that.option(\"filterPanel.filterEnabled\", state.filterPanel ? state.filterPanel.filterEnabled : true);\n          that.option(\"paging.pageSize\", (!isVirtualScrollingMode || showPageSizeSelector) && (0, _type.isDefined)(state.pageSize) ? state.pageSize : that._initialPageSize);\n          that.option(\"paging.pageIndex\", state.pageIndex || 0);\n          dataController && dataController.reset();\n        }\n      },\n      columns: {\n        getVisibleColumns: function () {\n          var visibleColumns = this.callBase.apply(this, arguments);\n          var stateStoringController = this.getController(\"stateStoring\");\n          return stateStoringController.isEnabled() && !stateStoringController.isLoaded() ? [] : visibleColumns;\n        }\n      },\n      data: {\n        callbackNames: function () {\n          return this.callBase().concat([\"stateLoaded\"]);\n        },\n        _refreshDataSource: function () {\n          var _this = this;\n\n          var callBase = this.callBase;\n          var stateStoringController = this.getController(\"stateStoring\");\n\n          if (stateStoringController.isEnabled() && !stateStoringController.isLoaded()) {\n            clearTimeout(this._restoreStateTimeoutID);\n            var deferred = new _deferred.Deferred();\n            this._restoreStateTimeoutID = setTimeout(function () {\n              stateStoringController.load().always(function () {\n                _this._restoreStateTimeoutID = null;\n              }).done(function () {\n                callBase.call(_this);\n\n                _this.stateLoaded.fire();\n\n                deferred.resolve();\n              }).fail(function (error) {\n                _this.stateLoaded.fire();\n\n                _this._handleLoadError(error || \"Unknown error\");\n\n                deferred.reject();\n              });\n            });\n            return deferred.promise();\n          } else {\n            if (!this.isStateLoading()) {\n              callBase.call(this);\n            }\n          }\n        },\n        isLoading: function () {\n          var that = this;\n          var stateStoringController = that.getController(\"stateStoring\");\n          return this.callBase() || stateStoringController.isLoading();\n        },\n        isStateLoading: function () {\n          return (0, _type.isDefined)(this._restoreStateTimeoutID);\n        },\n        isLoaded: function () {\n          return this.callBase() && !this.isStateLoading();\n        },\n        dispose: function () {\n          clearTimeout(this._restoreStateTimeoutID);\n          this.callBase();\n        }\n      },\n      selection: {\n        _fireSelectionChanged: function (options) {\n          var stateStoringController = this.getController(\"stateStoring\");\n          var isDeferredSelection = this.option(\"selection.deferred\");\n\n          if (stateStoringController.isLoading() && isDeferredSelection) {\n            return;\n          }\n\n          this.callBase.apply(this, arguments);\n        }\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}