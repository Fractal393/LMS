{"ast":null,"code":"import { print as printWindow, createElement, detach, classList } from '@syncfusion/ej2-base';\nimport { getPrintGridModel } from '../base/util';\nimport { Grid } from '../base/grid';\nimport * as events from '../base/constant';\nimport { Deferred } from '@syncfusion/ej2-data';\n/**\n * @hidden\n */\n\nexport function getCloneProperties() {\n  return ['aggregates', 'allowGrouping', 'allowFiltering', 'allowMultiSorting', 'allowReordering', 'allowSorting', 'allowTextWrap', 'childGrid', 'columns', 'currentViewData', 'dataSource', 'detailTemplate', 'enableAltRow', 'enableColumnVirtualization', 'filterSettings', 'gridLines', 'groupSettings', 'height', 'locale', 'pageSettings', 'printMode', 'query', 'queryString', 'enableRtl', 'rowHeight', 'rowTemplate', 'sortSettings', 'textWrapSettings', 'allowPaging', 'hierarchyPrintMode', 'searchSettings', 'queryCellInfo', 'beforeDataBound'];\n}\n/**\n *\n * The `Print` module is used to handle print action.\n */\n\nvar Print =\n/** @class */\nfunction () {\n  /**\n   * Constructor for the Grid print module\n   * @hidden\n   */\n  function Print(parent, scrollModule) {\n    this.isAsyncPrint = false;\n    this.defered = new Deferred();\n    this.parent = parent;\n\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.on(events.contentReady, this.isContentReady(), this);\n    this.parent.addEventListener(events.actionBegin, this.actionBegin.bind(this));\n    this.parent.on(events.onEmpty, this.onEmpty.bind(this));\n    this.parent.on(events.hierarchyPrint, this.hierarchyPrint, this);\n    this.scrollModule = scrollModule;\n  }\n\n  Print.prototype.isContentReady = function () {\n    var _this = this;\n\n    if (this.isPrintGrid() && (this.parent.hierarchyPrintMode === 'None' || !this.parent.childGrid)) {\n      return this.contentReady;\n    }\n\n    return function () {\n      _this.defered.promise.then(function () {\n        _this.contentReady();\n      });\n\n      if (_this.isPrintGrid()) {\n        _this.hierarchyPrint();\n      }\n    };\n  };\n\n  Print.prototype.hierarchyPrint = function () {\n    this.removeColGroup(this.parent);\n    var printGridObj = window.printGridObj;\n\n    if (printGridObj && !printGridObj.element.querySelector('[aria-busy=true')) {\n      printGridObj.printModule.defered.resolve();\n    }\n  };\n  /**\n   * By default, prints all the Grid pages and hides the pager.\n   * > You can customize print options using the\n   * [`printMode`](grid/#printmode-string/).\n   * @return {void}\n   */\n\n\n  Print.prototype.print = function () {\n    this.renderPrintGrid();\n    this.printWind = window.open('', 'print', 'height=' + window.outerHeight + ',width=' + window.outerWidth + ',tabbar=no');\n    this.printWind.moveTo(0, 0);\n    this.printWind.resizeTo(screen.availWidth, screen.availHeight);\n  };\n\n  Print.prototype.onEmpty = function () {\n    if (this.isPrintGrid()) {\n      this.contentReady();\n    }\n  };\n\n  Print.prototype.actionBegin = function () {\n    if (this.isPrintGrid()) {\n      this.isAsyncPrint = true;\n    }\n  };\n\n  Print.prototype.renderPrintGrid = function () {\n    var gObj = this.parent;\n    var element = createElement('div', {\n      id: this.parent.element.id + '_print',\n      className: gObj.element.className + ' e-print-grid'\n    });\n    document.body.appendChild(element);\n    var printGrid = new Grid(getPrintGridModel(gObj, gObj.hierarchyPrintMode));\n    /* tslint:disable-next-line:no-any */\n\n    if (this.parent.isAngular) {\n      /* tslint:disable-next-line:no-any */\n      printGrid.viewContainerRef = this.parent.viewContainerRef;\n    }\n    /* tslint:disable:no-empty */\n\n\n    printGrid.load = function () {};\n\n    printGrid.query = gObj.getQuery().clone();\n    window.printGridObj = printGrid;\n    printGrid.isPrinting = true;\n    var modules = printGrid.getInjectedModules();\n    var injectedModues = gObj.getInjectedModules();\n\n    if (!modules || modules.length !== injectedModues.length) {\n      printGrid.setInjectedModules(injectedModues);\n    }\n\n    gObj.notify(events.printGridInit, {\n      element: element,\n      printgrid: printGrid\n    });\n    this.parent.log('exporting_begin', this.getModuleName());\n    printGrid.registeredTemplate = this.parent.registeredTemplate;\n    printGrid.appendTo(element);\n    printGrid.trigger = gObj.trigger;\n  };\n\n  Print.prototype.contentReady = function () {\n    if (this.isPrintGrid()) {\n      var gObj = this.parent;\n\n      if (this.isAsyncPrint) {\n        this.printGrid();\n        return;\n      }\n\n      var args = {\n        requestType: 'print',\n        element: gObj.element,\n        selectedRows: gObj.getContentTable().querySelectorAll('tr[aria-selected=\"true\"]'),\n        cancel: false,\n        hierarchyPrintMode: gObj.hierarchyPrintMode\n      };\n\n      if (!this.isAsyncPrint) {\n        gObj.trigger(events.beforePrint, args);\n      }\n\n      if (args.cancel) {\n        detach(gObj.element);\n        return;\n      }\n\n      if (!this.isAsyncPrint) {\n        this.printGrid();\n      }\n    }\n  };\n\n  Print.prototype.printGrid = function () {\n    var gObj = this.parent; // Height adjustment on print grid\n\n    if (gObj.height !== 'auto') {\n      // if scroller enabled\n      var cssProps = this.scrollModule.getCssProperties();\n      var contentDiv = gObj.element.querySelector('.e-content');\n      var headerDiv = gObj.element.querySelector('.e-gridheader');\n      contentDiv.style.height = 'auto';\n      contentDiv.style.overflowY = 'auto';\n      headerDiv.style[cssProps.padding] = '';\n      headerDiv.firstElementChild.style[cssProps.border] = '';\n    } // Grid alignment adjustment on grouping\n\n\n    if (gObj.allowGrouping) {\n      if (!gObj.groupSettings.columns.length) {\n        gObj.element.querySelector('.e-groupdroparea').style.display = 'none';\n      } else {\n        this.removeColGroup(gObj);\n      }\n    } // hide horizontal scroll\n\n\n    for (var _i = 0, _a = [].slice.call(gObj.element.querySelectorAll('.e-content')); _i < _a.length; _i++) {\n      var element = _a[_i];\n      element.style.overflowX = 'hidden';\n    } // Hide the waiting popup\n\n\n    var waitingPop = gObj.element.querySelectorAll('.e-spin-show');\n\n    for (var _b = 0, _c = [].slice.call(waitingPop); _b < _c.length; _b++) {\n      var element = _c[_b];\n      classList(element, ['e-spin-hide'], ['e-spin-show']);\n    }\n\n    this.printGridElement(gObj);\n    gObj.isPrinting = false;\n    delete window.printGridObj;\n    var args = {\n      element: gObj.element\n    };\n    gObj.trigger(events.printComplete, args);\n    this.parent.log('exporting_complete', this.getModuleName());\n  };\n\n  Print.prototype.printGridElement = function (gObj) {\n    classList(gObj.element, ['e-print-grid-layout'], ['e-print-grid']);\n\n    if (gObj.isPrinting) {\n      detach(gObj.element);\n    }\n\n    this.printWind = printWindow(gObj.element, this.printWind);\n  };\n\n  Print.prototype.removeColGroup = function (gObj) {\n    var depth = gObj.groupSettings.columns.length;\n    var element = gObj.element;\n    var id = '#' + gObj.element.id;\n\n    if (!depth) {\n      return;\n    }\n\n    var groupCaption = element.querySelectorAll(id + \"captioncell.e-groupcaption\");\n    var colSpan = groupCaption[depth - 1].getAttribute('colspan');\n\n    for (var i = 0; i < groupCaption.length; i++) {\n      groupCaption[i].setAttribute('colspan', colSpan);\n    }\n\n    var colGroups = element.querySelectorAll(\"colgroup\" + id + \"colGroup\");\n    var contentColGroups = element.querySelector('.e-content').querySelectorAll('colgroup');\n    this.hideColGroup(colGroups, depth);\n    this.hideColGroup(contentColGroups, depth);\n  };\n\n  Print.prototype.hideColGroup = function (colGroups, depth) {\n    for (var i = 0; i < colGroups.length; i++) {\n      for (var j = 0; j < depth; j++) {\n        colGroups[i].children[j].style.display = 'none';\n      }\n    }\n  };\n  /**\n   * To destroy the print\n   * @hidden\n   */\n\n\n  Print.prototype.isPrintGrid = function () {\n    return this.parent.element.id.indexOf('_print') > 0 && this.parent.isPrinting;\n  };\n  /**\n   * To destroy the print\n   * @return {void}\n   * @hidden\n   */\n\n\n  Print.prototype.destroy = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(events.contentReady, this.contentReady.bind(this));\n    this.parent.removeEventListener(events.actionBegin, this.actionBegin.bind(this));\n    this.parent.off(events.onEmpty, this.onEmpty.bind(this));\n    this.parent.off(events.hierarchyPrint, this.hierarchyPrint);\n  };\n  /**\n   * For internal use only - Get the module name.\n   * @private\n   */\n\n\n  Print.prototype.getModuleName = function () {\n    return 'print';\n  };\n\n  Print.printGridProp = getCloneProperties().concat([events.beforePrint, events.printComplete, events.load]);\n  return Print;\n}();\n\nexport { Print };","map":null,"metadata":{},"sourceType":"module"}