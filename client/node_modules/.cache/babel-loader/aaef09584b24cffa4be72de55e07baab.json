{"ast":null,"code":"\"use strict\";\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cleanupFileActions = exports.useFileActionsValidation = exports.useFileArrayValidation = exports.cleanupFileArray = exports.isMobileDevice = exports.isFunction = exports.isPlainObject = void 0;\n\nvar react_1 = require(\"react\");\n\nvar logger_1 = require(\"./logger\");\n\nexports.isPlainObject = function (value) {\n  return Object.prototype.toString.call(value) === '[object Object]';\n};\n\nexports.isFunction = function (value) {\n  return !!(value && value.constructor && value.call && value.apply);\n};\n\nexports.isMobileDevice = function () {\n  // noinspection JSDeprecatedSymbols\n  return typeof window.orientation !== 'undefined' || navigator.userAgent.indexOf('IEMobile') !== -1;\n};\n/**\n * This function validates the user-provided files array. It checks the following\n * criteria:\n * - `files` is not an array\n * - there are duplicate file IDs\n * - some files are missing `id` field\n * - some files are missing `name` field\n * - some files have invalid type (they are neither an object nor `null`)\n */\n\n\nexports.cleanupFileArray = function (fileArray, allowNull) {\n  var cleanFileArray;\n  var warningMessage = null;\n  var warningBullets = [];\n\n  if (!Array.isArray(fileArray)) {\n    // @ts-ignore\n    cleanFileArray = allowNull ? null : [];\n\n    if (!allowNull || fileArray !== null) {\n      warningMessage = \"Provided value was replaced \" + (\"with \" + (allowNull ? 'null' : 'empty array') + \".\");\n      warningBullets.push(\"Expected \\\"files\\\" to be an array, got type \" + (\"\\\"\" + typeof fileArray + \"\\\" instead (value: \" + fileArray + \").\"));\n    }\n  } else {\n    var indicesToBeRemoved_1 = new Set();\n    var seenIds = new Set();\n    var duplicateIdSet = new Set();\n    var missingIdIndices = [];\n    var missingNameIndices = [];\n    var invalidTypeIndices = [];\n\n    for (var i = 0; i < fileArray.length; ++i) {\n      var file = fileArray[i];\n\n      if (exports.isPlainObject(file)) {\n        if (file.id && seenIds.has(file.id)) {\n          duplicateIdSet.add(file.id);\n          indicesToBeRemoved_1.add(i);\n        } else {\n          seenIds.add(file.id);\n        }\n\n        if (!file.name) {\n          missingNameIndices.push(i);\n          indicesToBeRemoved_1.add(i);\n        }\n\n        if (!file.id) {\n          missingIdIndices.push(i);\n          indicesToBeRemoved_1.add(i);\n        }\n      } else if (file !== null) {\n        invalidTypeIndices.push(i);\n        indicesToBeRemoved_1.add(i);\n      }\n    }\n\n    if (duplicateIdSet.size > 0) {\n      warningBullets.push(\"Some files have duplicate IDs. These IDs appeared multiple \" + (\"times: \" + Array.from(duplicateIdSet)));\n    }\n\n    if (missingIdIndices.length > 0) {\n      warningBullets.push(\"Some files are missing the \\\"id\\\" field. \" + (\"Relevant file indices: \" + missingIdIndices.join(', ')));\n    }\n\n    if (missingNameIndices.length > 0) {\n      warningBullets.push(\"Some files are missing the \\\"name\\\" field. \" + (\"Relevant file indices: \" + missingNameIndices.join(', ')));\n    }\n\n    if (invalidTypeIndices.length > 0) {\n      warningBullets.push(\"Some files have invalid type (they are neither a plain object nor \\\"null\\\"). \" + (\"Relevant file indices: \" + invalidTypeIndices.join(', ')));\n    }\n\n    if (indicesToBeRemoved_1.size > 0) {\n      // @ts-ignore\n      cleanFileArray = fileArray.filter(function (value, index) {\n        return !indicesToBeRemoved_1.has(index);\n      });\n      warningMessage = indicesToBeRemoved_1.size + \" offending \" + (\"file\" + (indicesToBeRemoved_1.size === 1 ? ' was' : 's were') + \" \") + \" removed from the array.\";\n    } else {\n      cleanFileArray = fileArray;\n    }\n  }\n\n  return {\n    cleanFileArray: cleanFileArray,\n    warningMessage: warningMessage,\n    warningBullets: warningBullets\n  };\n};\n\nexports.useFileArrayValidation = function (files, folderChain) {\n  var _a = react_1.useMemo(function () {\n    var errorMessages = [];\n    var cleanFilesResult = exports.cleanupFileArray(files, false);\n\n    if (cleanFilesResult.warningMessage) {\n      var errorMessage = \"The \\\"files\\\" prop passed to FileBrowser did not pass validation. \" + (cleanFilesResult.warningMessage + \" \") + \"The following errors were encountered:\";\n      logger_1.Logger.error(errorMessage, logger_1.Logger.formatBullets(cleanFilesResult.warningBullets));\n      errorMessages.push({\n        message: errorMessage,\n        bullets: cleanFilesResult.warningBullets\n      });\n    }\n\n    return {\n      cleanFiles: cleanFilesResult.cleanFileArray,\n      errorMessages: errorMessages\n    };\n  }, [files]),\n      cleanFiles = _a.cleanFiles,\n      filesErrorMessages = _a.errorMessages;\n\n  var _b = react_1.useMemo(function () {\n    var errorMessages = [];\n    var cleanFolderChainResult = exports.cleanupFileArray(folderChain, true);\n\n    if (cleanFolderChainResult.warningMessage) {\n      var errorMessage = \"The \\\"folderChain\\\" prop passed to FileBrowser did not pass validation. \" + (cleanFolderChainResult.warningMessage + \" \") + \"The following errors were encountered:\";\n      logger_1.Logger.error(errorMessage, logger_1.Logger.formatBullets(cleanFolderChainResult.warningBullets));\n      errorMessages.push({\n        message: errorMessage,\n        bullets: cleanFolderChainResult.warningBullets\n      });\n    }\n\n    return {\n      cleanFolderChain: cleanFolderChainResult.cleanFileArray,\n      errorMessages: errorMessages\n    };\n  }, [folderChain]),\n      cleanFolderChain = _b.cleanFolderChain,\n      folderChainErrorMessages = _b.errorMessages;\n\n  return {\n    cleanFiles: cleanFiles,\n    cleanFolderChain: cleanFolderChain,\n    errorMessages: __spreadArrays(filesErrorMessages, folderChainErrorMessages)\n  };\n};\n\nexports.useFileActionsValidation = function (fileActions, defaultFileActions, includeDefaultFileActions) {\n  // === Merge user-provided and default file actions (if default actions are enabled)\n  var extendedFileActions = react_1.useMemo(function () {\n    if (!includeDefaultFileActions) return fileActions; // Add default file actions if no actions with the same IDs are present\n\n    var seenFileActionIds = {};\n    fileActions.map(function (action) {\n      if (action && action.id) seenFileActionIds[action.id] = true;\n    });\n\n    var extendedFileActions = __spreadArrays(fileActions);\n\n    for (var _i = 0, defaultFileActions_1 = defaultFileActions; _i < defaultFileActions_1.length; _i++) {\n      var action = defaultFileActions_1[_i];\n      if (seenFileActionIds[action.id]) continue;\n      extendedFileActions.push(action);\n    }\n\n    return extendedFileActions;\n  }, [fileActions, defaultFileActions, includeDefaultFileActions]); // === Validate the extended file action array\n\n  var _a = react_1.useMemo(function () {\n    var errorMessages = [];\n    var cleanFilesResult = exports.cleanupFileActions(extendedFileActions);\n\n    if (cleanFilesResult.warningMessage) {\n      var errorMessage = \"The \\\"fileActions\\\" prop passed to FileBrowser did not pass \" + (\"validation. \" + cleanFilesResult.warningMessage + \" \") + \"The following errors were encountered:\";\n      logger_1.Logger.error(errorMessage, logger_1.Logger.formatBullets(cleanFilesResult.warningBullets));\n      errorMessages.push({\n        message: errorMessage,\n        bullets: cleanFilesResult.warningBullets\n      });\n    }\n\n    return {\n      cleanFileActions: cleanFilesResult.cleanFileActions,\n      errorMessages: errorMessages\n    };\n  }, [extendedFileActions]),\n      cleanFileActions = _a.cleanFileActions,\n      filesErrorMessages = _a.errorMessages;\n\n  return {\n    cleanFileActions: cleanFileActions,\n    errorMessages: filesErrorMessages\n  };\n};\n/**\n * This function validates the user-provided file actions array. It checks the following\n * criteria:\n * - `files` is not an array\n * - there are duplicate file action IDs\n * - some file actions are missing `id` field\n * - some files have invalid type (they are not objects)\n */\n\n\nexports.cleanupFileActions = function (fileActions) {\n  var cleanFileActions;\n  var warningMessage = null;\n  var warningBullets = [];\n\n  if (!Array.isArray(fileActions)) {\n    cleanFileActions = [];\n    warningMessage = \"Provided value was replaced \" + \"with an empty array.\";\n    warningBullets.push(\"Expected \\\"fileActions\\\" to be an array, got type \" + (\"\\\"\" + typeof fileActions + \"\\\" instead (value: \" + fileActions + \").\"));\n  } else {\n    var indicesToBeRemoved_2 = new Set();\n    var seenIds = new Set();\n    var duplicateIdSet = new Set();\n    var missingIdIndices = [];\n    var invalidTypeIndices = [];\n\n    for (var i = 0; i < fileActions.length; ++i) {\n      var fileAction = fileActions[i];\n\n      if (exports.isPlainObject(fileAction)) {\n        if (fileAction.id && seenIds.has(fileAction.id)) {\n          duplicateIdSet.add(fileAction.id);\n          indicesToBeRemoved_2.add(i);\n        } else {\n          seenIds.add(fileAction.id);\n        }\n\n        if (!fileAction.id) {\n          missingIdIndices.push(i);\n          indicesToBeRemoved_2.add(i);\n        }\n      } else {\n        invalidTypeIndices.push(i);\n        indicesToBeRemoved_2.add(i);\n      }\n    }\n\n    if (duplicateIdSet.size > 0) {\n      warningBullets.push(\"Some file actions have duplicate IDs. These IDs appeared multiple \" + (\"times: \" + Array.from(duplicateIdSet)));\n    }\n\n    if (missingIdIndices.length > 0) {\n      warningBullets.push(\"Some file actions are missing the \\\"id\\\" field. \" + (\"Relevant file indices: \" + missingIdIndices.join(', ')));\n    }\n\n    if (invalidTypeIndices.length > 0) {\n      warningBullets.push(\"Some files actions have invalid type (they are not plain object). \" + (\"Relevant file indices: \" + invalidTypeIndices.join(', ')));\n    }\n\n    if (indicesToBeRemoved_2.size > 0) {\n      // @ts-ignore\n      cleanFileActions = fileActions.filter(function (value, index) {\n        return !indicesToBeRemoved_2.has(index);\n      });\n      warningMessage = indicesToBeRemoved_2.size + \" offending \" + (\"file action\" + (indicesToBeRemoved_2.size === 1 ? ' was' : 's were') + \" \") + \" removed from the array.\";\n    } else {\n      cleanFileActions = fileActions;\n    }\n  }\n\n  return {\n    cleanFileActions: cleanFileActions,\n    warningMessage: warningMessage,\n    warningBullets: warningBullets\n  };\n};","map":null,"metadata":{},"sourceType":"script"}