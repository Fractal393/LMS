{"ast":null,"code":"/**\r\n * DevExtreme (ui/number_box/number_box.spins.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _events_engine = require(\"../../events/core/events_engine\");\n\nvar _events_engine2 = _interopRequireDefault(_events_engine);\n\nvar _button = require(\"../text_box/texteditor_button_collection/button\");\n\nvar _button2 = _interopRequireDefault(_button);\n\nvar _number_box = require(\"./number_box.spin\");\n\nvar _number_box2 = _interopRequireDefault(_number_box);\n\nvar _utils = require(\"../../events/utils\");\n\nvar _pointer = require(\"../../events/pointer\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nfunction _get(target, property, receiver) {\n  if (\"undefined\" !== typeof Reflect && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function (target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) {\n        return;\n      }\n\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n\n    if (null === object) {\n      break;\n    }\n  }\n\n  return object;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (\"function\" !== typeof superClass && null !== superClass) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (superClass) {\n    _setPrototypeOf(subClass, superClass);\n  }\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function (o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var result,\n        Super = _getPrototypeOf(Derived);\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (\"object\" === _typeof(call) || \"function\" === typeof call)) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (void 0 === self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (\"undefined\" === typeof Reflect || !Reflect.construct) {\n    return false;\n  }\n\n  if (Reflect.construct.sham) {\n    return false;\n  }\n\n  if (\"function\" === typeof Proxy) {\n    return true;\n  }\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function (o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar SPIN_CLASS = \"dx-numberbox-spin\";\nvar SPIN_CONTAINER_CLASS = \"dx-numberbox-spin-container\";\nvar SPIN_TOUCH_FRIENDLY_CLASS = \"dx-numberbox-spin-touch-friendly\";\n\nvar SpinButtons = function (_TextEditorButton) {\n  _inherits(SpinButtons, _TextEditorButton);\n\n  var _super = _createSuper(SpinButtons);\n\n  function SpinButtons() {\n    _classCallCheck(this, SpinButtons);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SpinButtons, [{\n    key: \"_attachEvents\",\n    value: function (instance, $spinContainer) {\n      var editor = this.editor;\n      var eventName = (0, _utils.addNamespace)(_pointer.down, editor.NAME);\n      var $spinContainerChildren = $spinContainer.children();\n\n      var pointerDownAction = editor._createAction(function (e) {\n        return editor._spinButtonsPointerDownHandler(e);\n      });\n\n      _events_engine2.default.off($spinContainer, eventName);\n\n      _events_engine2.default.on($spinContainer, eventName, function (e) {\n        return pointerDownAction({\n          event: e\n        });\n      });\n\n      _number_box2.default.getInstance($spinContainerChildren.eq(0)).option(\"onChange\", function (e) {\n        return editor._spinUpChangeHandler(e);\n      });\n\n      _number_box2.default.getInstance($spinContainerChildren.eq(1)).option(\"onChange\", function (e) {\n        return editor._spinDownChangeHandler(e);\n      });\n    }\n  }, {\n    key: \"_create\",\n    value: function () {\n      var editor = this.editor;\n      var $spinContainer = (0, _renderer2.default)(\"<div>\").addClass(SPIN_CONTAINER_CLASS);\n      var $spinUp = (0, _renderer2.default)(\"<div>\").appendTo($spinContainer);\n      var $spinDown = (0, _renderer2.default)(\"<div>\").appendTo($spinContainer);\n\n      var options = this._getOptions();\n\n      this._addToContainer($spinContainer);\n\n      editor._createComponent($spinUp, _number_box2.default, (0, _extend.extend)({\n        direction: \"up\"\n      }, options));\n\n      editor._createComponent($spinDown, _number_box2.default, (0, _extend.extend)({\n        direction: \"down\"\n      }, options));\n\n      this._legacyRender(editor.$element(), this._isTouchFriendly(), options.visible);\n\n      return {\n        instance: $spinContainer,\n        $element: $spinContainer\n      };\n    }\n  }, {\n    key: \"_getOptions\",\n    value: function () {\n      var editor = this.editor;\n\n      var visible = this._isVisible();\n\n      var disabled = editor.option(\"disabled\");\n      return {\n        visible: visible,\n        disabled: disabled\n      };\n    }\n  }, {\n    key: \"_isVisible\",\n    value: function () {\n      var editor = this.editor;\n      return _get(_getPrototypeOf(SpinButtons.prototype), \"_isVisible\", this).call(this) && editor.option(\"showSpinButtons\");\n    }\n  }, {\n    key: \"_isTouchFriendly\",\n    value: function () {\n      var editor = this.editor;\n      return editor.option(\"showSpinButtons\") && editor.option(\"useLargeSpinButtons\");\n    }\n  }, {\n    key: \"_legacyRender\",\n    value: function ($editor, isTouchFriendly, isVisible) {\n      $editor.toggleClass(SPIN_TOUCH_FRIENDLY_CLASS, isTouchFriendly);\n      $editor.toggleClass(SPIN_CLASS, isVisible);\n    }\n  }, {\n    key: \"update\",\n    value: function () {\n      var shouldUpdate = _get(_getPrototypeOf(SpinButtons.prototype), \"update\", this).call(this);\n\n      if (shouldUpdate) {\n        var editor = this.editor,\n            instance = this.instance;\n        var $editor = editor.$element();\n\n        var isVisible = this._isVisible();\n\n        var isTouchFriendly = this._isTouchFriendly();\n\n        var $spinButtons = instance.children();\n\n        var spinUp = _number_box2.default.getInstance($spinButtons.eq(0));\n\n        var spinDown = _number_box2.default.getInstance($spinButtons.eq(1));\n\n        var options = this._getOptions();\n\n        spinUp.option(options);\n        spinDown.option(options);\n\n        this._legacyRender($editor, isTouchFriendly, isVisible);\n      }\n    }\n  }]);\n\n  return SpinButtons;\n}(_button2.default);\n\nexports.default = SpinButtons;","map":null,"metadata":{},"sourceType":"script"}