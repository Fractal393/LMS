{"ast":null,"code":"/**\r\n * DevExtreme (ui/file_manager/ui.file_manager.file_uploader.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _guid = require(\"../../core/guid\");\n\nvar _guid2 = _interopRequireDefault(_guid);\n\nvar _ui = require(\"../widget/ui.widget\");\n\nvar _ui2 = _interopRequireDefault(_ui);\n\nvar _file_uploader = require(\"../file_uploader\");\n\nvar _file_uploader2 = _interopRequireDefault(_file_uploader);\n\nvar _uiFile_manager = require(\"./ui.file_manager.common\");\n\nvar _uiFile_manager2 = _interopRequireDefault(_uiFile_manager);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nfunction _get(target, property, receiver) {\n  if (\"undefined\" !== typeof Reflect && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function (target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) {\n        return;\n      }\n\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n\n    if (null === object) {\n      break;\n    }\n  }\n\n  return object;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (\"function\" !== typeof superClass && null !== superClass) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (superClass) {\n    _setPrototypeOf(subClass, superClass);\n  }\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function (o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var result,\n        Super = _getPrototypeOf(Derived);\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (\"object\" === _typeof(call) || \"function\" === typeof call)) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (void 0 === self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (\"undefined\" === typeof Reflect || !Reflect.construct) {\n    return false;\n  }\n\n  if (Reflect.construct.sham) {\n    return false;\n  }\n\n  if (\"function\" === typeof Proxy) {\n    return true;\n  }\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function (o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar FILE_MANAGER_FILE_UPLOADER_CLASS = \"dx-filemanager-fileuploader\";\n\nvar FileManagerFileUploader = function (_Widget) {\n  _inherits(FileManagerFileUploader, _Widget);\n\n  var _super = _createSuper(FileManagerFileUploader);\n\n  function FileManagerFileUploader() {\n    _classCallCheck(this, FileManagerFileUploader);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FileManagerFileUploader, [{\n    key: \"_initMarkup\",\n    value: function () {\n      this._initActions();\n\n      this.$element().addClass(FILE_MANAGER_FILE_UPLOADER_CLASS);\n      this._uploaderInfos = [];\n\n      this._createInternalFileUploader();\n\n      _get(_getPrototypeOf(FileManagerFileUploader.prototype), \"_initMarkup\", this).call(this);\n    }\n  }, {\n    key: \"_createInternalFileUploader\",\n    value: function () {\n      var _this = this;\n\n      var chunkSize = this._getController().chunkSize;\n\n      var $fileUploader = (0, _renderer2.default)(\"<div>\").appendTo(this.$element());\n\n      var fileUploader = this._createComponent($fileUploader, _file_uploader2.default, {\n        name: \"file\",\n        multiple: true,\n        showFileList: false,\n        activeStateEnabled: false,\n        focusStateEnabled: false,\n        hoverStateEnabled: false,\n        labelText: \"\",\n        readyToUploadMessage: \"\",\n        accept: \"*\",\n        chunkSize: chunkSize,\n        onValueChanged: function (e) {\n          return _this._onFileUploaderValueChanged(e);\n        },\n        onProgress: function (e) {\n          return _this._onFileUploaderProgress(e);\n        },\n        onUploaded: function (e) {\n          return _this._onFileUploaderUploaded(e);\n        },\n        onUploadAborted: function (e) {\n          return _this._onFileUploaderUploadAborted(e);\n        },\n        onUploadError: function (e) {\n          return _this._onFileUploaderUploadError(e);\n        }\n      });\n\n      fileUploader.option({\n        uploadChunk: function (file, chunksData) {\n          return _this._fileUploaderUploadChunk(fileUploader, file, chunksData);\n        },\n        abortUpload: function (file, chunksData) {\n          return _this._fileUploaderAbortUpload(fileUploader, file, chunksData);\n        }\n      });\n      var uploaderInfo = {\n        fileUploader: fileUploader\n      };\n\n      this._uploaderInfos.push(uploaderInfo);\n    }\n  }, {\n    key: \"tryUpload\",\n    value: function () {\n      var info = this._findAvailableUploaderInfo();\n\n      if (info) {\n        info.fileUploader._selectButtonClickHandler();\n      }\n    }\n  }, {\n    key: \"cancelUpload\",\n    value: function (sessionId) {\n      this._cancelUpload(sessionId);\n    }\n  }, {\n    key: \"cancelFileUpload\",\n    value: function (sessionId, fileIndex) {\n      this._cancelUpload(sessionId, fileIndex);\n    }\n  }, {\n    key: \"_cancelUpload\",\n    value: function (sessionId, fileIndex) {\n      var _this$_findUploaderIn = this._findUploaderInfoBySessionId(sessionId),\n          fileUploader = _this$_findUploaderIn.fileUploader;\n\n      var files = (0, _type.isDefined)(fileIndex) ? [fileUploader._files[fileIndex]] : fileUploader._files;\n\n      fileUploader._preventFilesUploading(files);\n    }\n  }, {\n    key: \"_fileUploaderUploadChunk\",\n    value: function (fileUploader, file, chunksInfo) {\n      var _this$_findSessionByF = this._findSessionByFile(fileUploader, file),\n          session = _this$_findSessionByF.session,\n          fileIndex = _this$_findSessionByF.fileIndex;\n\n      var controller = session.controller;\n      chunksInfo.fileIndex = fileIndex;\n      return controller.uploadFileChunk(file, chunksInfo);\n    }\n  }, {\n    key: \"_fileUploaderAbortUpload\",\n    value: function (fileUploader, file, chunksInfo) {\n      var _this$_findSessionByF2 = this._findSessionByFile(fileUploader, file),\n          session = _this$_findSessionByF2.session,\n          fileIndex = _this$_findSessionByF2.fileIndex;\n\n      var controller = session.controller;\n      chunksInfo.fileIndex = fileIndex;\n      return controller.abortFileUpload(file, chunksInfo);\n    }\n  }, {\n    key: \"_onFileUploaderValueChanged\",\n    value: function (_ref) {\n      var _this2 = this;\n\n      var component = _ref.component,\n          value = _ref.value;\n\n      if (0 === value.length) {\n        return;\n      }\n\n      var files = value.slice();\n\n      var uploaderInfo = this._findUploaderInfo(component);\n\n      this._uploadFiles(uploaderInfo, files);\n\n      setTimeout(function () {\n        if (!_this2._findAvailableUploaderInfo()) {\n          _this2._createInternalFileUploader();\n        }\n      });\n    }\n  }, {\n    key: \"_onFileUploaderProgress\",\n    value: function (_ref2) {\n      var component = _ref2.component,\n          file = _ref2.file,\n          bytesLoaded = _ref2.bytesLoaded,\n          bytesTotal = _ref2.bytesTotal;\n\n      var _this$_findSessionByF3 = this._findSessionByFile(component, file),\n          session = _this$_findSessionByF3.session,\n          fileIndex = _this$_findSessionByF3.fileIndex;\n\n      var fileValue = 0 !== bytesTotal ? bytesLoaded / bytesTotal : 1;\n      var commonValue = component.option(\"progress\") / 100;\n      var args = {\n        sessionId: session.id,\n        fileIndex: fileIndex,\n        commonValue: commonValue,\n        fileValue: fileValue\n      };\n\n      this._raiseUploadProgress(args);\n    }\n  }, {\n    key: \"_onFileUploaderUploaded\",\n    value: function (_ref3) {\n      var component = _ref3.component,\n          file = _ref3.file;\n\n      var deferred = this._getDeferredForFile(component, file);\n\n      deferred.resolve();\n    }\n  }, {\n    key: \"_onFileUploaderUploadAborted\",\n    value: function (_ref4) {\n      var component = _ref4.component,\n          file = _ref4.file;\n\n      var deferred = this._getDeferredForFile(component, file);\n\n      deferred.resolve({\n        canceled: true\n      });\n    }\n  }, {\n    key: \"_onFileUploaderUploadError\",\n    value: function (_ref5) {\n      var component = _ref5.component,\n          file = _ref5.file,\n          error = _ref5.error;\n\n      var deferred = this._getDeferredForFile(component, file);\n\n      deferred.reject(error);\n    }\n  }, {\n    key: \"_uploadFiles\",\n    value: function (uploaderInfo, files) {\n      var sessionId = new _guid2.default().toString();\n\n      var controller = this._getController();\n\n      var deferreds = files.map(function () {\n        return new _deferred.Deferred();\n      });\n      var session = {\n        id: sessionId,\n        controller: controller,\n        files: files,\n        deferreds: deferreds\n      };\n      uploaderInfo.session = session;\n      var sessionInfo = {\n        sessionId: sessionId,\n        deferreds: deferreds,\n        files: files\n      };\n\n      this._raiseUploadSessionStarted(sessionInfo);\n\n      return (0, _uiFile_manager2.default)(deferreds).always(function () {\n        return setTimeout(function () {\n          uploaderInfo.fileUploader.option(\"value\", []);\n          uploaderInfo.session = null;\n        });\n      });\n    }\n  }, {\n    key: \"_getDeferredForFile\",\n    value: function (fileUploader, file) {\n      var _this$_findSessionByF4 = this._findSessionByFile(fileUploader, file),\n          session = _this$_findSessionByF4.session,\n          fileIndex = _this$_findSessionByF4.fileIndex;\n\n      return session.deferreds[fileIndex];\n    }\n  }, {\n    key: \"_findSessionByFile\",\n    value: function (fileUploader, file) {\n      var uploaderInfo = this._findUploaderInfo(fileUploader);\n\n      var session = uploaderInfo.session;\n      var fileIndex = session.files.indexOf(file);\n      return {\n        session: session,\n        fileIndex: fileIndex\n      };\n    }\n  }, {\n    key: \"_findUploaderInfoBySessionId\",\n    value: function (sessionId) {\n      for (var i = 0; i < this._uploaderInfos.length; i++) {\n        var uploaderInfo = this._uploaderInfos[i];\n        var session = uploaderInfo.session;\n\n        if (session && session.id === sessionId) {\n          return uploaderInfo;\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_findAvailableUploaderInfo\",\n    value: function () {\n      for (var i = 0; i < this._uploaderInfos.length; i++) {\n        var info = this._uploaderInfos[i];\n\n        if (!info.session) {\n          return info;\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_findUploaderInfo\",\n    value: function (fileUploader) {\n      for (var i = 0; i < this._uploaderInfos.length; i++) {\n        var info = this._uploaderInfos[i];\n\n        if (info.fileUploader === fileUploader) {\n          return info;\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_getController\",\n    value: function () {\n      var controllerGetter = this.option(\"getController\");\n      return controllerGetter();\n    }\n  }, {\n    key: \"_raiseUploadSessionStarted\",\n    value: function (sessionInfo) {\n      this._actions.onUploadSessionStarted({\n        sessionInfo: sessionInfo\n      });\n    }\n  }, {\n    key: \"_raiseUploadProgress\",\n    value: function (args) {\n      this._actions.onUploadProgress(args);\n    }\n  }, {\n    key: \"_initActions\",\n    value: function () {\n      this._actions = {\n        onUploadSessionStarted: this._createActionByOption(\"onUploadSessionStarted\"),\n        onUploadProgress: this._createActionByOption(\"onUploadProgress\")\n      };\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function () {\n      return (0, _extend.extend)(_get(_getPrototypeOf(FileManagerFileUploader.prototype), \"_getDefaultOptions\", this).call(this), {\n        getController: null,\n        onUploadSessionStarted: null,\n        onUploadProgress: null\n      });\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function (args) {\n      var name = args.name;\n\n      switch (name) {\n        case \"getController\":\n          this.repaint();\n          break;\n\n        case \"onUploadSessionStarted\":\n        case \"onUploadProgress\":\n          this._actions[name] = this._createActionByOption(name);\n          break;\n\n        default:\n          _get(_getPrototypeOf(FileManagerFileUploader.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }]);\n\n  return FileManagerFileUploader;\n}(_ui2.default);\n\nmodule.exports = FileManagerFileUploader;","map":null,"metadata":{},"sourceType":"script"}