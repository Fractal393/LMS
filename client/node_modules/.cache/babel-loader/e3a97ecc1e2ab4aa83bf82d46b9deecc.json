{"ast":null,"code":"import { PdfGridCell } from './pdf-grid-cell';\nimport { PdfStringFormat } from './../../graphics/fonts/pdf-string-format';\n/**\n * `PdfGridColumn` class represents the schema of a column in a 'PdfGrid'.\n */\n\nvar PdfGridColumn =\n/** @class */\nfunction () {\n  //Constructors\n\n  /**\n   * Initializes a new instance of the `PdfGridColumn` class with the parent grid.\n   * @private\n   */\n  function PdfGridColumn(grid) {\n    /**\n     * The `width` of the column.\n     * @default 0\n     * @private\n     */\n    this.columnWidth = 0;\n    this.grid = grid;\n  }\n\n  Object.defineProperty(PdfGridColumn.prototype, \"width\", {\n    /**\n     * Gets or sets the `width` of the 'PdfGridColumn'.\n     * @private\n     */\n    get: function () {\n      return this.columnWidth;\n    },\n    set: function (value) {\n      this.isCustomWidth = true;\n      this.columnWidth = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridColumn.prototype, \"format\", {\n    /**\n     * Gets or sets the information about the text `formatting`.\n     * @private\n     */\n    get: function () {\n      if (this.stringFormat == null) {\n        this.stringFormat = new PdfStringFormat(); //GetDefaultFormat();\n      }\n\n      return this.stringFormat;\n    },\n    set: function (value) {\n      this.stringFormat = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfGridColumn;\n}();\n\nexport { PdfGridColumn };\n/**\n * `PdfGridColumnCollection` class provides access to an ordered,\n * strongly typed collection of 'PdfGridColumn' objects.\n * @private\n */\n\nvar PdfGridColumnCollection =\n/** @class */\nfunction () {\n  //properties\n  //Constructors\n\n  /**\n   * Initializes a new instance of the `PdfGridColumnCollection` class with the parent grid.\n   * @private\n   */\n  function PdfGridColumnCollection(grid) {\n    /**\n     * @hidden\n     * @private\n     */\n    this.internalColumns = [];\n    /**\n     * @hidden\n     * @private\n     */\n\n    this.columnWidth = 0;\n    this.grid = grid;\n    this.internalColumns = [];\n  } //Iplementation\n\n  /**\n   * `Add` a new column to the 'PdfGrid'.\n   * @private\n   */\n\n\n  PdfGridColumnCollection.prototype.add = function (count) {\n    // public add(column : PdfGridColumn) : void\n    // public add(arg : number|PdfGridColumn) : void {\n    // if (typeof arg === 'number') {\n    for (var i = 0; i < count; i++) {\n      this.internalColumns.push(new PdfGridColumn(this.grid));\n\n      for (var index = 0; index < this.grid.rows.count; index++) {\n        var row = this.grid.rows.getRow(index);\n        var cell = new PdfGridCell();\n        cell.value = '';\n        row.cells.add(cell);\n      }\n    } // } else {\n    //     let column : PdfGridColumn = new PdfGridColumn(this.grid);\n    //     this.columns.push(column);\n    //     return column;\n    // }\n\n  };\n\n  Object.defineProperty(PdfGridColumnCollection.prototype, \"count\", {\n    /**\n     * Gets the `number of columns` in the 'PdfGrid'.[Read-Only].\n     * @private\n     */\n    get: function () {\n      return this.internalColumns.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridColumnCollection.prototype, \"width\", {\n    /**\n     * Gets the `widths`.\n     * @private\n     */\n    get: function () {\n      if (this.columnWidth === 0) {\n        this.columnWidth = this.measureColumnsWidth();\n      }\n\n      if (this.grid.initialWidth !== 0 && this.columnWidth !== this.grid.initialWidth && !this.grid.style.allowHorizontalOverflow) {\n        this.columnWidth = this.grid.initialWidth;\n        this.grid.isPageWidth = true;\n      }\n\n      return this.columnWidth;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridColumnCollection.prototype, \"columns\", {\n    /**\n     * Gets the `array of PdfGridColumn`.[Read-Only]\n     * @private\n     */\n    get: function () {\n      return this.internalColumns;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Gets the `PdfGridColumn` from the specified index.[Read-Only]\n   * @private\n   */\n\n  PdfGridColumnCollection.prototype.getColumn = function (index) {\n    if (index >= 0 && index <= this.columns.length) {\n      return this.columns[index];\n    } else {\n      throw Error('can not get the column from the index: ' + index);\n    }\n  }; //Implementation\n\n  /**\n   * `Calculates the column widths`.\n   * @private\n   */\n\n\n  PdfGridColumnCollection.prototype.measureColumnsWidth = function () {\n    var totalWidth = 0;\n    this.grid.measureColumnsWidth();\n\n    for (var i = 0, count = this.internalColumns.length; i < count; i++) {\n      totalWidth += this.internalColumns[i].width;\n    }\n\n    return totalWidth;\n  };\n  /**\n   * Gets the `widths of the columns`.\n   * @private\n   */\n\n\n  PdfGridColumnCollection.prototype.getDefaultWidths = function (totalWidth) {\n    var widths = [];\n    var summ = 0.0;\n    var subFactor = this.count;\n\n    for (var i = 0; i < this.count; i++) {\n      if (this.grid.isPageWidth && totalWidth >= 0 && !this.internalColumns[i].isCustomWidth) {\n        this.internalColumns[i].width = 0;\n      } else {\n        widths[i] = this.internalColumns[i].width;\n\n        if (this.internalColumns[i].width > 0 && this.internalColumns[i].isCustomWidth) {\n          totalWidth -= this.internalColumns[i].width;\n          subFactor--;\n        } else {\n          widths[i] = 0;\n        }\n      }\n    }\n\n    for (var i = 0; i < this.count; i++) {\n      var width = totalWidth / subFactor;\n\n      if (widths[i] <= 0) {\n        widths[i] = width;\n      }\n    }\n\n    return widths;\n  };\n\n  return PdfGridColumnCollection;\n}();\n\nexport { PdfGridColumnCollection };","map":null,"metadata":{},"sourceType":"module"}