{"ast":null,"code":"import { extend } from '@syncfusion/ej2-base';\nimport { TimePicker } from '@syncfusion/ej2-calendars';\nimport { isEditable, getComplexFieldID, getObject } from '../base/util';\n/**\n * `TimePickerEditCell` is used to handle Timepicker cell type editing.\n * @hidden\n */\n\nvar TimePickerEditCell =\n/** @class */\nfunction () {\n  function TimePickerEditCell(grid) {\n    this.parent = grid;\n  }\n\n  TimePickerEditCell.prototype.create = function (args) {\n    /* tslint:disable-next-line:no-any */\n    var complexField = getComplexFieldID(args.column.field);\n    return this.parent.createElement('input', {\n      className: 'e-field',\n      attrs: {\n        id: this.parent.element.id + complexField,\n        name: complexField,\n        type: 'text',\n        'e-mappinguid': args.column.uid\n      }\n    });\n  };\n\n  TimePickerEditCell.prototype.read = function (element) {\n    return element.ej2_instances[0].value;\n  };\n\n  TimePickerEditCell.prototype.write = function (args) {\n    var isInlineEdit = this.parent.editSettings.mode !== 'Dialog';\n    var rowDataValue = getObject(args.column.field, args.rowData);\n    rowDataValue = rowDataValue ? new Date(rowDataValue) : null;\n    this.obj = new TimePicker(extend({\n      floatLabelType: isInlineEdit ? 'Never' : 'Always',\n      value: rowDataValue,\n      placeholder: isInlineEdit ? '' : args.column.headerText,\n      enableRtl: this.parent.enableRtl,\n      enabled: isEditable(args.column, args.requestType, args.element)\n    }, args.column.edit.params));\n    this.obj.appendTo(args.element);\n  };\n\n  TimePickerEditCell.prototype.destroy = function () {\n    if (this.obj) {\n      this.obj.destroy();\n    }\n  };\n\n  return TimePickerEditCell;\n}();\n\nexport { TimePickerEditCell };","map":null,"metadata":{},"sourceType":"module"}