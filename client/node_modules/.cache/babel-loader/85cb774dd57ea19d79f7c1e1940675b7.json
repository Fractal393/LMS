{"ast":null,"code":"import { extend } from '@syncfusion/ej2-base';\nimport { MaskedTextBox } from '@syncfusion/ej2-inputs';\nimport { isEditable, getComplexFieldID, getObject } from '../base/util';\n/**\n * `MaskedTextBoxCellEdit` is used to handle masked input cell type editing.\n * @hidden\n */\n\nvar MaskedTextBoxCellEdit =\n/** @class */\nfunction () {\n  function MaskedTextBoxCellEdit(parentInstance) {\n    //constructor\n    this.parent = parentInstance;\n  }\n\n  MaskedTextBoxCellEdit.prototype.create = function (args) {\n    //create\n    var columnField = getComplexFieldID(args.column.field);\n    return this.parent.createElement('input', {\n      className: 'e-field',\n      attrs: {\n        id: this.parent.element.id + columnField,\n        name: columnField,\n        type: 'text',\n        'e-mappinguid': args.column.uid\n      }\n    });\n  };\n\n  MaskedTextBoxCellEdit.prototype.write = function (args) {\n    this.column = args.column;\n    var isInlineEdit = this.parent.editSettings.mode !== 'Dialog';\n    this.obj = new MaskedTextBox(extend({\n      fields: {\n        value: args.column.field\n      },\n      value: getObject(args.column.field, args.rowData),\n      floatLabelType: isInlineEdit ? 'Never' : 'Always',\n      mask: '000-000-0000',\n      enabled: isEditable(args.column, args.requestType, args.element)\n    }, args.column.edit.params));\n    this.obj.appendTo(args.element);\n  };\n\n  MaskedTextBoxCellEdit.prototype.read = function (element) {\n    return element.ej2_instances[0].value;\n  };\n\n  MaskedTextBoxCellEdit.prototype.destroy = function () {\n    if (this.obj) {\n      this.obj.destroy();\n    }\n  };\n\n  return MaskedTextBoxCellEdit;\n}();\n\nexport { MaskedTextBoxCellEdit };","map":null,"metadata":{},"sourceType":"module"}