{"ast":null,"code":"/**\r\n * DevExtreme (ui/collection/ui.collection_widget.edit.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _events_engine = require(\"../../events/core/events_engine\");\n\nvar _events_engine2 = _interopRequireDefault(_events_engine);\n\nvar _uiCollection_widget = require(\"./ui.collection_widget.base\");\n\nvar _uiCollection_widget2 = _interopRequireDefault(_uiCollection_widget);\n\nvar _ui = require(\"../widget/ui.errors\");\n\nvar _ui2 = _interopRequireDefault(_ui);\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _uiCollection_widgetEditStrategy = require(\"./ui.collection_widget.edit.strategy.plain\");\n\nvar _uiCollection_widgetEditStrategy2 = _interopRequireDefault(_uiCollection_widgetEditStrategy);\n\nvar _data = require(\"../../core/utils/data\");\n\nvar _data_source = require(\"../../data/data_source/data_source\");\n\nvar _utils = require(\"../../data/data_source/utils\");\n\nvar _selection = require(\"../selection/selection\");\n\nvar _selection2 = _interopRequireDefault(_selection);\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) {\n    return;\n  }\n\n  if (\"string\" === typeof o) {\n    return _arrayLikeToArray(o, minLen);\n  }\n\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n\n  if (\"Object\" === n && o.constructor) {\n    n = o.constructor.name;\n  }\n\n  if (\"Map\" === n || \"Set\" === n) {\n    return Array.from(o);\n  }\n\n  if (\"Arguments\" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) {\n    return _arrayLikeToArray(o, minLen);\n  }\n}\n\nfunction _iterableToArray(iter) {\n  if (\"undefined\" !== typeof Symbol && Symbol.iterator in Object(iter)) {\n    return Array.from(iter);\n  }\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    return _arrayLikeToArray(arr);\n  }\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (null == len || len > arr.length) {\n    len = arr.length;\n  }\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nvar ITEM_DELETING_DATA_KEY = \"dxItemDeleting\";\nvar NOT_EXISTING_INDEX = -1;\n\nvar indexExists = function (index) {\n  return index !== NOT_EXISTING_INDEX;\n};\n\nvar CollectionWidget = _uiCollection_widget2.default.inherit({\n  _setOptionsByReference: function () {\n    this.callBase();\n    (0, _extend.extend)(this._optionsByReference, {\n      selectedItem: true\n    });\n  },\n  _getDefaultOptions: function () {\n    return (0, _extend.extend)(this.callBase(), {\n      selectionMode: \"none\",\n      selectionRequired: false,\n      selectionByClick: true,\n      selectedItems: [],\n      selectedItemKeys: [],\n      maxFilterLengthInRequest: 1500,\n      keyExpr: null,\n      selectedIndex: NOT_EXISTING_INDEX,\n      selectedItem: null,\n      onSelectionChanged: null,\n      onItemReordered: null,\n      onItemDeleting: null,\n      onItemDeleted: null\n    });\n  },\n  ctor: function (element, options) {\n    this._userOptions = options || {};\n    this.callBase(element, options);\n  },\n  _init: function () {\n    this._initEditStrategy();\n\n    this.callBase();\n\n    this._initKeyGetter();\n\n    this._initSelectionModule();\n\n    if (\"multi\" === this.option(\"selectionMode\")) {\n      this._showDeprecatedSelectionMode();\n    }\n  },\n  _initKeyGetter: function () {\n    this._keyGetter = (0, _data.compileGetter)(this.option(\"keyExpr\"));\n  },\n  _getKeysByItems: function (selectedItems) {\n    return this._editStrategy.getKeysByItems(selectedItems);\n  },\n  _getItemsByKeys: function (selectedItemKeys, selectedItems) {\n    return this._editStrategy.getItemsByKeys(selectedItemKeys, selectedItems);\n  },\n  _getKeyByIndex: function (index) {\n    return this._editStrategy.getKeyByIndex(index);\n  },\n  _getIndexByKey: function (key) {\n    return this._editStrategy.getIndexByKey(key);\n  },\n  _getIndexByItemData: function (itemData) {\n    return this._editStrategy.getIndexByItemData(itemData);\n  },\n  _isKeySpecified: function () {\n    return !!(this._dataSource && this._dataSource.key());\n  },\n  _getCombinedFilter: function () {\n    return this._dataSource && this._dataSource.filter();\n  },\n  key: function () {\n    if (this.option(\"keyExpr\")) {\n      return this.option(\"keyExpr\");\n    }\n\n    return this._dataSource && this._dataSource.key();\n  },\n  keyOf: function (item) {\n    var key = item;\n\n    var store = this._dataSource && this._dataSource.store();\n\n    if (this.option(\"keyExpr\")) {\n      key = this._keyGetter(item);\n    } else {\n      if (store) {\n        key = store.keyOf(item);\n      }\n    }\n\n    return key;\n  },\n  _nullValueSelectionSupported: function () {\n    return false;\n  },\n  _initSelectionModule: function () {\n    var that = this;\n    var itemsGetter = that._editStrategy.itemsGetter;\n    this._selection = new _selection2.default({\n      allowNullValue: this._nullValueSelectionSupported(),\n      mode: this.option(\"selectionMode\"),\n      maxFilterLengthInRequest: this.option(\"maxFilterLengthInRequest\"),\n      equalByReference: !this._isKeySpecified(),\n      onSelectionChanged: function (args) {\n        if (args.addedItemKeys.length || args.removedItemKeys.length) {\n          that.option(\"selectedItems\", that._getItemsByKeys(args.selectedItemKeys, args.selectedItems));\n\n          that._updateSelectedItems(args);\n        }\n      },\n      filter: that._getCombinedFilter.bind(that),\n      totalCount: function () {\n        var items = that.option(\"items\");\n        var dataSource = that._dataSource;\n        return dataSource && dataSource.totalCount() >= 0 ? dataSource.totalCount() : items.length;\n      },\n      key: that.key.bind(that),\n      keyOf: that.keyOf.bind(that),\n      load: function (options) {\n        if (that._dataSource) {\n          var loadOptions = that._dataSource.loadOptions();\n\n          options.customQueryParams = loadOptions.customQueryParams;\n          options.userData = that._dataSource._userData;\n        }\n\n        var store = that._dataSource && that._dataSource.store();\n\n        if (store) {\n          return store.load(options).done(function (loadResult) {\n            if (that._disposed) {\n              return;\n            }\n\n            var items = (0, _utils.normalizeLoadResult)(loadResult).data;\n\n            that._dataSource._applyMapFunction(items);\n          });\n        } else {\n          return new _deferred.Deferred().resolve(this.plainItems());\n        }\n      },\n      dataFields: function () {\n        return that._dataSource && that._dataSource.select();\n      },\n      plainItems: itemsGetter.bind(that._editStrategy)\n    });\n  },\n  _initEditStrategy: function () {\n    var Strategy = _uiCollection_widgetEditStrategy2.default;\n    this._editStrategy = new Strategy(this);\n  },\n  _getSelectedItemIndices: function (keys) {\n    var that = this;\n    var indices = [];\n    keys = keys || this._selection.getSelectedItemKeys();\n\n    that._editStrategy.beginCache();\n\n    (0, _iterator.each)(keys, function (_, key) {\n      var selectedIndex = that._getIndexByKey(key);\n\n      if (indexExists(selectedIndex)) {\n        indices.push(selectedIndex);\n      }\n    });\n\n    that._editStrategy.endCache();\n\n    return indices;\n  },\n  _initMarkup: function () {\n    var _this = this;\n\n    this._rendering = true;\n\n    if (!this._dataSource || !this._dataSource.isLoading()) {\n      this._syncSelectionOptions().done(function () {\n        return _this._normalizeSelectedItems();\n      });\n    }\n\n    this.callBase();\n  },\n  _render: function () {\n    this.callBase();\n    this._rendering = false;\n  },\n  _fireContentReadyAction: function () {\n    this._rendering = false;\n    this._rendered = true;\n    this.callBase.apply(this, arguments);\n  },\n  _syncSelectionOptions: function (byOption) {\n    byOption = byOption || this._chooseSelectOption();\n    var selectedItem;\n    var selectedIndex;\n    var selectedItemKeys;\n    var selectedItems;\n\n    switch (byOption) {\n      case \"selectedIndex\":\n        selectedItem = this._editStrategy.getItemDataByIndex(this.option(\"selectedIndex\"));\n\n        if ((0, _type.isDefined)(selectedItem)) {\n          this._setOptionWithoutOptionChange(\"selectedItems\", [selectedItem]);\n\n          this._setOptionWithoutOptionChange(\"selectedItem\", selectedItem);\n\n          this._setOptionWithoutOptionChange(\"selectedItemKeys\", this._editStrategy.getKeysByItems([selectedItem]));\n        } else {\n          this._setOptionWithoutOptionChange(\"selectedItems\", []);\n\n          this._setOptionWithoutOptionChange(\"selectedItemKeys\", []);\n\n          this._setOptionWithoutOptionChange(\"selectedItem\", null);\n        }\n\n        break;\n\n      case \"selectedItems\":\n        selectedItems = this.option(\"selectedItems\") || [];\n        selectedIndex = this._editStrategy.getIndexByItemData(selectedItems[0]);\n\n        if (this.option(\"selectionRequired\") && !indexExists(selectedIndex)) {\n          return this._syncSelectionOptions(\"selectedIndex\");\n        }\n\n        this._setOptionWithoutOptionChange(\"selectedItem\", selectedItems[0]);\n\n        this._setOptionWithoutOptionChange(\"selectedIndex\", selectedIndex);\n\n        this._setOptionWithoutOptionChange(\"selectedItemKeys\", this._editStrategy.getKeysByItems(selectedItems));\n\n        break;\n\n      case \"selectedItem\":\n        selectedItem = this.option(\"selectedItem\");\n        selectedIndex = this._editStrategy.getIndexByItemData(selectedItem);\n\n        if (this.option(\"selectionRequired\") && !indexExists(selectedIndex)) {\n          return this._syncSelectionOptions(\"selectedIndex\");\n        }\n\n        if ((0, _type.isDefined)(selectedItem)) {\n          this._setOptionWithoutOptionChange(\"selectedItems\", [selectedItem]);\n\n          this._setOptionWithoutOptionChange(\"selectedIndex\", selectedIndex);\n\n          this._setOptionWithoutOptionChange(\"selectedItemKeys\", this._editStrategy.getKeysByItems([selectedItem]));\n        } else {\n          this._setOptionWithoutOptionChange(\"selectedItems\", []);\n\n          this._setOptionWithoutOptionChange(\"selectedItemKeys\", []);\n\n          this._setOptionWithoutOptionChange(\"selectedIndex\", NOT_EXISTING_INDEX);\n        }\n\n        break;\n\n      case \"selectedItemKeys\":\n        selectedItemKeys = this.option(\"selectedItemKeys\");\n\n        if (this.option(\"selectionRequired\")) {\n          var selectedItemIndex = this._getIndexByKey(selectedItemKeys[0]);\n\n          if (!indexExists(selectedItemIndex)) {\n            return this._syncSelectionOptions(\"selectedIndex\");\n          }\n        }\n\n        return this._selection.setSelection(selectedItemKeys);\n    }\n\n    return new _deferred.Deferred().resolve().promise();\n  },\n  _chooseSelectOption: function () {\n    var optionName = \"selectedIndex\";\n\n    var isOptionDefined = function (optionName) {\n      var optionValue = this.option(optionName);\n      var length = (0, _type.isDefined)(optionValue) && optionValue.length;\n      return length || optionName in this._userOptions;\n    }.bind(this);\n\n    if (isOptionDefined(\"selectedItems\")) {\n      optionName = \"selectedItems\";\n    } else {\n      if (isOptionDefined(\"selectedItem\")) {\n        optionName = \"selectedItem\";\n      } else {\n        if (isOptionDefined(\"selectedItemKeys\")) {\n          optionName = \"selectedItemKeys\";\n        }\n      }\n    }\n\n    return optionName;\n  },\n  _compareKeys: function (oldKeys, newKeys) {\n    if (oldKeys.length !== newKeys.length) {\n      return false;\n    }\n\n    for (var i = 0; i < newKeys.length; i++) {\n      if (oldKeys[i] !== newKeys[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n  _normalizeSelectedItems: function () {\n    if (\"none\" === this.option(\"selectionMode\")) {\n      this._setOptionWithoutOptionChange(\"selectedItems\", []);\n\n      this._syncSelectionOptions(\"selectedItems\");\n    } else {\n      if (\"single\" === this.option(\"selectionMode\")) {\n        var newSelection = this.option(\"selectedItems\");\n\n        if (newSelection.length > 1 || !newSelection.length && this.option(\"selectionRequired\") && this.option(\"items\") && this.option(\"items\").length) {\n          var currentSelection = this._selection.getSelectedItems();\n\n          var normalizedSelection = void 0 === newSelection[0] ? currentSelection[0] : newSelection[0];\n\n          if (void 0 === normalizedSelection) {\n            normalizedSelection = this._editStrategy.itemsGetter()[0];\n          }\n\n          if (this.option(\"grouped\") && normalizedSelection && normalizedSelection.items) {\n            normalizedSelection.items = [normalizedSelection.items[0]];\n          }\n\n          this._selection.setSelection(this._getKeysByItems([normalizedSelection]));\n\n          this._setOptionWithoutOptionChange(\"selectedItems\", [normalizedSelection]);\n\n          return this._syncSelectionOptions(\"selectedItems\");\n        } else {\n          this._selection.setSelection(this._getKeysByItems(newSelection));\n        }\n      } else {\n        var newKeys = this._getKeysByItems(this.option(\"selectedItems\"));\n\n        var oldKeys = this._selection.getSelectedItemKeys();\n\n        if (!this._compareKeys(oldKeys, newKeys)) {\n          this._selection.setSelection(newKeys);\n        }\n      }\n    }\n\n    return new _deferred.Deferred().resolve().promise();\n  },\n  _itemClickHandler: function (e) {\n    this._createAction(function (e) {\n      this._itemSelectHandler(e.event);\n    }.bind(this), {\n      validatingTargetName: \"itemElement\"\n    })({\n      itemElement: (0, _renderer2.default)(e.currentTarget),\n      event: e\n    });\n\n    this.callBase.apply(this, arguments);\n  },\n  _itemSelectHandler: function (e) {\n    if (!this.option(\"selectionByClick\")) {\n      return;\n    }\n\n    var $itemElement = e.currentTarget;\n\n    if (this.isItemSelected($itemElement)) {\n      this.unselectItem(e.currentTarget);\n    } else {\n      this.selectItem(e.currentTarget);\n    }\n  },\n  _selectedItemElement: function (index) {\n    return this._itemElements().eq(index);\n  },\n  _postprocessRenderItem: function (args) {\n    if (\"none\" !== this.option(\"selectionMode\")) {\n      var $itemElement = (0, _renderer2.default)(args.itemElement);\n\n      var normalizedItemIndex = this._editStrategy.getNormalizedIndex($itemElement);\n\n      var isItemSelected = this._isItemSelected(normalizedItemIndex);\n\n      this._processSelectableItem($itemElement, isItemSelected);\n    }\n  },\n  _processSelectableItem: function ($itemElement, isSelected) {\n    $itemElement.toggleClass(this._selectedItemClass(), isSelected);\n\n    this._setAriaSelected($itemElement, String(isSelected));\n  },\n  _updateSelectedItems: function (args) {\n    var that = this;\n    var addedItemKeys = args.addedItemKeys;\n    var removedItemKeys = args.removedItemKeys;\n\n    if (that._rendered && (addedItemKeys.length || removedItemKeys.length)) {\n      var selectionChangePromise = that._selectionChangePromise;\n\n      if (!that._rendering) {\n        var addedSelection = [];\n        var normalizedIndex;\n        var removedSelection = [];\n\n        that._editStrategy.beginCache();\n\n        for (var i = 0; i < addedItemKeys.length; i++) {\n          normalizedIndex = that._getIndexByKey(addedItemKeys[i]);\n          addedSelection.push(normalizedIndex);\n\n          that._addSelection(normalizedIndex);\n        }\n\n        for (var _i = 0; _i < removedItemKeys.length; _i++) {\n          normalizedIndex = that._getIndexByKey(removedItemKeys[_i]);\n          removedSelection.push(normalizedIndex);\n\n          that._removeSelection(normalizedIndex);\n        }\n\n        that._editStrategy.endCache();\n\n        that._updateSelection(addedSelection, removedSelection);\n      }\n\n      (0, _deferred.when)(selectionChangePromise).done(function () {\n        that._fireSelectionChangeEvent(args.addedItems, args.removedItems);\n      });\n    }\n  },\n  _fireSelectionChangeEvent: function (addedItems, removedItems) {\n    this._createActionByOption(\"onSelectionChanged\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    })({\n      addedItems: addedItems,\n      removedItems: removedItems\n    });\n  },\n  _updateSelection: _common.noop,\n  _setAriaSelected: function ($target, value) {\n    this.setAria(\"selected\", value, $target);\n  },\n  _removeSelection: function (normalizedIndex) {\n    var $itemElement = this._editStrategy.getItemElement(normalizedIndex);\n\n    if (indexExists(normalizedIndex)) {\n      this._processSelectableItem($itemElement, false);\n\n      _events_engine2.default.triggerHandler($itemElement, \"stateChanged\", false);\n    }\n  },\n  _showDeprecatedSelectionMode: function () {\n    _ui2.default.log(\"W0001\", this.NAME, \"selectionMode: 'multi'\", \"16.1\", \"Use selectionMode: 'multiple' instead\");\n\n    this.option(\"selectionMode\", \"multiple\");\n  },\n  _addSelection: function (normalizedIndex) {\n    var $itemElement = this._editStrategy.getItemElement(normalizedIndex);\n\n    if (indexExists(normalizedIndex)) {\n      this._processSelectableItem($itemElement, true);\n\n      _events_engine2.default.triggerHandler($itemElement, \"stateChanged\", true);\n    }\n  },\n  _isItemSelected: function (index) {\n    var key = this._getKeyByIndex(index);\n\n    return this._selection.isItemSelected(key);\n  },\n  _optionChanged: function (args) {\n    var _this2 = this;\n\n    switch (args.name) {\n      case \"selectionMode\":\n        if (\"multi\" === args.value) {\n          this._showDeprecatedSelectionMode();\n        } else {\n          this._invalidate();\n        }\n\n        break;\n\n      case \"dataSource\":\n        if (!args.value || Array.isArray(args.value) && !args.value.length) {\n          this.option(\"selectedItemKeys\", []);\n        }\n\n        this.callBase(args);\n        break;\n\n      case \"selectedIndex\":\n      case \"selectedItem\":\n      case \"selectedItems\":\n      case \"selectedItemKeys\":\n        this._syncSelectionOptions(args.name).done(function () {\n          return _this2._normalizeSelectedItems();\n        });\n\n        break;\n\n      case \"keyExpr\":\n        this._initKeyGetter();\n\n        break;\n\n      case \"selectionRequired\":\n        this._normalizeSelectedItems();\n\n        break;\n\n      case \"selectionByClick\":\n      case \"onSelectionChanged\":\n      case \"onItemDeleting\":\n      case \"onItemDeleted\":\n      case \"onItemReordered\":\n      case \"maxFilterLengthInRequest\":\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _clearSelectedItems: function () {\n    this._setOptionWithoutOptionChange(\"selectedItems\", []);\n\n    this._syncSelectionOptions(\"selectedItems\");\n  },\n  _waitDeletingPrepare: function ($itemElement) {\n    if ($itemElement.data(ITEM_DELETING_DATA_KEY)) {\n      return new _deferred.Deferred().resolve().promise();\n    }\n\n    $itemElement.data(ITEM_DELETING_DATA_KEY, true);\n    var deferred = new _deferred.Deferred();\n    var deletingActionArgs = {\n      cancel: false\n    };\n\n    var deletePromise = this._itemEventHandler($itemElement, \"onItemDeleting\", deletingActionArgs, {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n\n    (0, _deferred.when)(deletePromise).always(function (value) {\n      var deletePromiseExists = !deletePromise;\n      var deletePromiseResolved = !deletePromiseExists && \"resolved\" === deletePromise.state();\n      var argumentsSpecified = !!arguments.length;\n      var shouldDelete = deletePromiseExists || deletePromiseResolved && !argumentsSpecified || deletePromiseResolved && value;\n      (0, _deferred.when)((0, _deferred.fromPromise)(deletingActionArgs.cancel)).always(function () {\n        $itemElement.data(ITEM_DELETING_DATA_KEY, false);\n      }).done(function (cancel) {\n        shouldDelete && !cancel ? deferred.resolve() : deferred.reject();\n      }).fail(deferred.reject);\n    }.bind(this));\n    return deferred.promise();\n  },\n  _deleteItemFromDS: function ($item) {\n    if (!this._dataSource) {\n      return new _deferred.Deferred().resolve().promise();\n    }\n\n    var deferred = new _deferred.Deferred();\n    var disabledState = this.option(\"disabled\");\n\n    var dataStore = this._dataSource.store();\n\n    this.option(\"disabled\", true);\n\n    if (!dataStore.remove) {\n      throw _ui2.default.Error(\"E1011\");\n    }\n\n    dataStore.remove(dataStore.keyOf(this._getItemData($item))).done(function (key) {\n      if (void 0 !== key) {\n        deferred.resolve();\n      } else {\n        deferred.reject();\n      }\n    }).fail(function () {\n      deferred.reject();\n    });\n    deferred.always(function () {\n      this.option(\"disabled\", disabledState);\n    }.bind(this));\n    return deferred;\n  },\n  _tryRefreshLastPage: function () {\n    var deferred = new _deferred.Deferred();\n\n    if (this._isLastPage() || this.option(\"grouped\")) {\n      deferred.resolve();\n    } else {\n      this._refreshLastPage().done(function () {\n        deferred.resolve();\n      });\n    }\n\n    return deferred.promise();\n  },\n  _refreshLastPage: function () {\n    this._expectLastItemLoading();\n\n    return this._dataSource.load();\n  },\n  _updateSelectionAfterDelete: function (index) {\n    var key = this._getKeyByIndex(index);\n\n    this._selection.deselect([key]);\n  },\n  _updateIndicesAfterIndex: function (index) {\n    var itemElements = this._itemElements();\n\n    for (var i = index + 1; i < itemElements.length; i++) {\n      (0, _renderer2.default)(itemElements[i]).data(this._itemIndexKey(), i - 1);\n    }\n  },\n  _simulateOptionChange: function (optionName) {\n    var optionValue = this.option(optionName);\n\n    if (optionValue instanceof _data_source.DataSource) {\n      return;\n    }\n\n    this._optionChangedAction({\n      name: optionName,\n      fullName: optionName,\n      value: optionValue\n    });\n  },\n  isItemSelected: function (itemElement) {\n    return this._isItemSelected(this._editStrategy.getNormalizedIndex(itemElement));\n  },\n  selectItem: function (itemElement) {\n    if (\"none\" === this.option(\"selectionMode\")) {\n      return;\n    }\n\n    var itemIndex = this._editStrategy.getNormalizedIndex(itemElement);\n\n    if (!indexExists(itemIndex)) {\n      return;\n    }\n\n    var key = this._getKeyByIndex(itemIndex);\n\n    if (this._selection.isItemSelected(key)) {\n      return;\n    }\n\n    if (\"single\" === this.option(\"selectionMode\")) {\n      this._selection.setSelection([key]);\n    } else {\n      var selectedItemKeys = this.option(\"selectedItemKeys\") || [];\n\n      this._selection.setSelection([].concat(_toConsumableArray(selectedItemKeys), [key]));\n    }\n  },\n  unselectItem: function (itemElement) {\n    var itemIndex = this._editStrategy.getNormalizedIndex(itemElement);\n\n    if (!indexExists(itemIndex)) {\n      return;\n    }\n\n    var selectedItemKeys = this._selection.getSelectedItemKeys();\n\n    if (this.option(\"selectionRequired\") && selectedItemKeys.length <= 1) {\n      return;\n    }\n\n    var key = this._getKeyByIndex(itemIndex);\n\n    if (!this._selection.isItemSelected(key)) {\n      return;\n    }\n\n    this._selection.deselect([key]);\n  },\n  _deleteItemElementByIndex: function (index) {\n    this._updateSelectionAfterDelete(index);\n\n    this._updateIndicesAfterIndex(index);\n\n    this._editStrategy.deleteItemAtIndex(index);\n  },\n  _afterItemElementDeleted: function ($item, deletedActionArgs) {\n    var changingOption = this._dataSource ? \"dataSource\" : \"items\";\n\n    this._simulateOptionChange(changingOption);\n\n    this._itemEventHandler($item, \"onItemDeleted\", deletedActionArgs, {\n      beforeExecute: function () {\n        $item.remove();\n      },\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n\n    this._renderEmptyMessage();\n  },\n  deleteItem: function (itemElement) {\n    var that = this;\n    var deferred = new _deferred.Deferred();\n\n    var $item = this._editStrategy.getItemElement(itemElement);\n\n    var index = this._editStrategy.getNormalizedIndex(itemElement);\n\n    var itemResponseWaitClass = this._itemResponseWaitClass();\n\n    if (indexExists(index)) {\n      this._waitDeletingPrepare($item).done(function () {\n        $item.addClass(itemResponseWaitClass);\n\n        var deletedActionArgs = that._extendActionArgs($item);\n\n        that._deleteItemFromDS($item).done(function () {\n          that._deleteItemElementByIndex(index);\n\n          that._afterItemElementDeleted($item, deletedActionArgs);\n\n          that._tryRefreshLastPage().done(function () {\n            deferred.resolveWith(that);\n          });\n        }).fail(function () {\n          $item.removeClass(itemResponseWaitClass);\n          deferred.rejectWith(that);\n        });\n      }).fail(function () {\n        deferred.rejectWith(that);\n      });\n    } else {\n      deferred.rejectWith(that);\n    }\n\n    return deferred.promise();\n  },\n  reorderItem: function (itemElement, toItemElement) {\n    var deferred = new _deferred.Deferred();\n    var that = this;\n    var strategy = this._editStrategy;\n    var $movingItem = strategy.getItemElement(itemElement);\n    var $destinationItem = strategy.getItemElement(toItemElement);\n    var movingIndex = strategy.getNormalizedIndex(itemElement);\n    var destinationIndex = strategy.getNormalizedIndex(toItemElement);\n    var changingOption = this._dataSource ? \"dataSource\" : \"items\";\n    var canMoveItems = indexExists(movingIndex) && indexExists(destinationIndex) && movingIndex !== destinationIndex;\n\n    if (canMoveItems) {\n      deferred.resolveWith(this);\n    } else {\n      deferred.rejectWith(this);\n    }\n\n    return deferred.promise().done(function () {\n      $destinationItem[strategy.itemPlacementFunc(movingIndex, destinationIndex)]($movingItem);\n      strategy.moveItemAtIndexToIndex(movingIndex, destinationIndex);\n\n      this._updateIndicesAfterIndex(movingIndex);\n\n      that.option(\"selectedItems\", that._getItemsByKeys(that._selection.getSelectedItemKeys(), that._selection.getSelectedItems()));\n\n      if (\"items\" === changingOption) {\n        that._simulateOptionChange(changingOption);\n      }\n\n      that._itemEventHandler($movingItem, \"onItemReordered\", {\n        fromIndex: strategy.getIndex(movingIndex),\n        toIndex: strategy.getIndex(destinationIndex)\n      }, {\n        excludeValidators: [\"disabled\", \"readOnly\"]\n      });\n    });\n  }\n});\n\nmodule.exports = CollectionWidget;","map":null,"metadata":{},"sourceType":"script"}