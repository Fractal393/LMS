{"ast":null,"code":"/**\r\n * DevExtreme (ui/file_manager/file_items_controller.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _provider_base = require(\"../../file_management/provider_base\");\n\nvar _provider_base2 = _interopRequireDefault(_provider_base);\n\nvar _file_system_item = require(\"../../file_management/file_system_item\");\n\nvar _file_system_item2 = _interopRequireDefault(_file_system_item);\n\nvar _object_provider = require(\"../../file_management/object_provider\");\n\nvar _object_provider2 = _interopRequireDefault(_object_provider);\n\nvar _remote_provider = require(\"../../file_management/remote_provider\");\n\nvar _remote_provider2 = _interopRequireDefault(_remote_provider);\n\nvar _custom_provider = require(\"../../file_management/custom_provider\");\n\nvar _custom_provider2 = _interopRequireDefault(_custom_provider);\n\nvar _errors = require(\"../../file_management/errors\");\n\nvar _errors2 = _interopRequireDefault(_errors);\n\nvar _utils = require(\"../../file_management/utils\");\n\nvar _uiFile_manager = require(\"./ui.file_manager.common\");\n\nvar _uiFile_manager2 = _interopRequireDefault(_uiFile_manager);\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nvar _array = require(\"../../core/utils/array\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _common = require(\"../../core/utils/common\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) {\n    return;\n  }\n\n  if (\"string\" === typeof o) {\n    return _arrayLikeToArray(o, minLen);\n  }\n\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n\n  if (\"Object\" === n && o.constructor) {\n    n = o.constructor.name;\n  }\n\n  if (\"Map\" === n || \"Set\" === n) {\n    return Array.from(o);\n  }\n\n  if (\"Arguments\" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) {\n    return _arrayLikeToArray(o, minLen);\n  }\n}\n\nfunction _iterableToArray(iter) {\n  if (\"undefined\" !== typeof Symbol && Symbol.iterator in Object(iter)) {\n    return Array.from(iter);\n  }\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    return _arrayLikeToArray(arr);\n  }\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (null == len || len > arr.length) {\n    len = arr.length;\n  }\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nvar DEFAULT_ROOT_FILE_SYSTEM_ITEM_NAME = \"Files\";\n\nvar FileItemsController = function () {\n  function FileItemsController(options) {\n    _classCallCheck(this, FileItemsController);\n\n    options = options || {};\n    this._options = (0, _extend.extend)({}, options);\n    this._isInitialized = false;\n    this._dataLoading = false;\n    this._dataLoadingDeferred = null;\n    this._rootDirectoryInfo = this._createRootDirectoryInfo(options.rootText);\n    this._currentDirectoryInfo = this._rootDirectoryInfo;\n    this._defaultIconMap = this._createDefaultIconMap();\n    this._securityController = new FileSecurityController({\n      allowedFileExtensions: this._options.allowedFileExtensions,\n      maxFileSize: this._options.uploadMaxFileSize\n    });\n\n    this._setProvider(options.fileProvider);\n\n    this._initialize();\n  }\n\n  _createClass(FileItemsController, [{\n    key: \"_setProvider\",\n    value: function (fileProvider) {\n      this._fileProvider = this._createFileProvider(fileProvider);\n\n      this._resetState();\n    }\n  }, {\n    key: \"_createFileProvider\",\n    value: function (fileProvider) {\n      if (!fileProvider) {\n        fileProvider = [];\n      }\n\n      if (Array.isArray(fileProvider)) {\n        return new _object_provider2.default({\n          data: fileProvider\n        });\n      }\n\n      if (fileProvider instanceof _provider_base2.default) {\n        return fileProvider;\n      }\n\n      switch (fileProvider.type) {\n        case \"remote\":\n          return new _remote_provider2.default(fileProvider);\n\n        case \"custom\":\n          return new _custom_provider2.default(fileProvider);\n      }\n\n      return new _object_provider2.default(fileProvider);\n    }\n  }, {\n    key: \"setCurrentPath\",\n    value: function (path) {\n      var pathParts = (0, _utils.getPathParts)(path);\n\n      var rawPath = _utils.pathCombine.apply(void 0, _toConsumableArray(pathParts));\n\n      if (this.getCurrentDirectory().fileItem.relativeName === rawPath) {\n        return;\n      }\n\n      return this._setCurrentDirectoryByPathParts(pathParts);\n    }\n  }, {\n    key: \"setCurrentPathByKeys\",\n    value: function (pathKeys) {\n      if ((0, _common.equalByValue)(this.getCurrentDirectory().fileItem.pathKeys, pathKeys, 0, true)) {\n        return;\n      }\n\n      return this._setCurrentDirectoryByPathParts(pathKeys, true);\n    }\n  }, {\n    key: \"getCurrentPath\",\n    value: function () {\n      var currentPath = \"\";\n      var directory = this.getCurrentDirectory();\n\n      while (directory && !directory.fileItem.isRoot()) {\n        var escapedName = (0, _utils.getEscapedFileName)(directory.fileItem.name);\n        currentPath = (0, _utils.pathCombine)(escapedName, currentPath);\n        directory = directory.parentDirectory;\n      }\n\n      return currentPath;\n    }\n  }, {\n    key: \"getCurrentDirectory\",\n    value: function () {\n      return this._currentDirectoryInfo;\n    }\n  }, {\n    key: \"setCurrentDirectory\",\n    value: function (directoryInfo) {\n      if (!directoryInfo) {\n        return;\n      }\n\n      if (this._currentDirectoryInfo && this._currentDirectoryInfo === directoryInfo) {\n        return;\n      }\n\n      var requireRaiseSelectedDirectory = this._currentDirectoryInfo.fileItem.key !== directoryInfo.fileItem.key;\n      this._currentDirectoryInfo = directoryInfo;\n\n      if (requireRaiseSelectedDirectory && this._isInitialized) {\n        if (!this._dataLoading) {\n          this._raiseDataLoading(\"navigation\");\n        }\n\n        this._raiseSelectedDirectoryChanged(directoryInfo);\n      }\n    }\n  }, {\n    key: \"getCurrentItems\",\n    value: function (onlyFiles) {\n      var _this = this;\n\n      return this._dataLoadingDeferred ? this._dataLoadingDeferred.then(function () {\n        return _this._getCurrentItemsInternal(onlyFiles);\n      }) : this._getCurrentItemsInternal(onlyFiles);\n    }\n  }, {\n    key: \"_getCurrentItemsInternal\",\n    value: function (onlyFiles) {\n      var currentDirectory = this.getCurrentDirectory();\n      return onlyFiles ? this.getFiles(currentDirectory) : this.getDirectoryContents(currentDirectory);\n    }\n  }, {\n    key: \"getDirectories\",\n    value: function (parentDirectoryInfo, skipNavigationOnError) {\n      return this.getDirectoryContents(parentDirectoryInfo, skipNavigationOnError).then(function (itemInfos) {\n        return itemInfos.filter(function (info) {\n          return info.fileItem.isDirectory;\n        });\n      });\n    }\n  }, {\n    key: \"getFiles\",\n    value: function (parentDirectoryInfo) {\n      return this.getDirectoryContents(parentDirectoryInfo).then(function (itemInfos) {\n        return itemInfos.filter(function (info) {\n          return !info.fileItem.isDirectory;\n        });\n      });\n    }\n  }, {\n    key: \"getDirectoryContents\",\n    value: function (parentDirectoryInfo, skipNavigationOnError) {\n      var _this2 = this;\n\n      if (!parentDirectoryInfo) {\n        return new _deferred.Deferred().resolve([this._rootDirectoryInfo]).promise();\n      }\n\n      if (parentDirectoryInfo.itemsLoaded) {\n        return new _deferred.Deferred().resolve(parentDirectoryInfo.items).promise();\n      }\n\n      var dirKey = parentDirectoryInfo.getInternalKey();\n      var loadItemsDeferred = this._loadedItems[dirKey];\n\n      if (loadItemsDeferred) {\n        return loadItemsDeferred;\n      }\n\n      loadItemsDeferred = this._getFileItems(parentDirectoryInfo, skipNavigationOnError).then(function (fileItems) {\n        fileItems = fileItems || [];\n        parentDirectoryInfo.items = fileItems.map(function (fileItem) {\n          return fileItem.isDirectory && _this2._createDirectoryInfo(fileItem, parentDirectoryInfo) || _this2._createFileInfo(fileItem, parentDirectoryInfo);\n        });\n        parentDirectoryInfo.itemsLoaded = true;\n        return parentDirectoryInfo.items;\n      });\n      this._loadedItems[dirKey] = loadItemsDeferred;\n      loadItemsDeferred.always(function () {\n        delete _this2._loadedItems[dirKey];\n      });\n      return loadItemsDeferred;\n    }\n  }, {\n    key: \"_getFileItems\",\n    value: function (parentDirectoryInfo, skipNavigationOnError) {\n      var _this3 = this;\n\n      var loadItemsDeferred = null;\n\n      try {\n        loadItemsDeferred = this._fileProvider.getItems(parentDirectoryInfo.fileItem);\n      } catch (error) {\n        return this._handleItemLoadError(parentDirectoryInfo, error, skipNavigationOnError);\n      }\n\n      return (0, _deferred.when)(loadItemsDeferred).then(function (fileItems) {\n        return _this3._securityController.getAllowedItems(fileItems);\n      }, function (errorInfo) {\n        return _this3._handleItemLoadError(parentDirectoryInfo, errorInfo, skipNavigationOnError);\n      });\n    }\n  }, {\n    key: \"createDirectory\",\n    value: function (parentDirectoryInfo, name) {\n      var _this4 = this;\n\n      var actionInfo = this._createEditActionInfo(\"create\", parentDirectoryInfo, parentDirectoryInfo);\n\n      return this._processEditAction(actionInfo, function () {\n        return _this4._fileProvider.createDirectory(parentDirectoryInfo.fileItem, name);\n      }, function () {\n        return _this4._resetDirectoryState(parentDirectoryInfo);\n      });\n    }\n  }, {\n    key: \"renameItem\",\n    value: function (fileItemInfo, name) {\n      var _this5 = this;\n\n      var actionInfo = this._createEditActionInfo(\"rename\", fileItemInfo, fileItemInfo.parentDirectory);\n\n      return this._processEditAction(actionInfo, function () {\n        if (!fileItemInfo.fileItem.isDirectory) {\n          _this5._securityController.validateExtension(name);\n        }\n\n        return _this5._fileProvider.renameItem(fileItemInfo.fileItem, name);\n      }, function () {\n        _this5._resetDirectoryState(fileItemInfo.parentDirectory);\n\n        _this5.setCurrentDirectory(fileItemInfo.parentDirectory);\n      });\n    }\n  }, {\n    key: \"moveItems\",\n    value: function (itemInfos, destinationDirectory) {\n      var _this6 = this;\n\n      var items = itemInfos.map(function (i) {\n        return i.fileItem;\n      });\n\n      var actionInfo = this._createEditActionInfo(\"move\", itemInfos, destinationDirectory);\n\n      return this._processEditAction(actionInfo, function () {\n        return _this6._fileProvider.moveItems(items, destinationDirectory.fileItem);\n      }, function () {\n        itemInfos.forEach(function (itemInfo) {\n          return _this6._resetDirectoryState(itemInfo.parentDirectory);\n        });\n\n        _this6._resetDirectoryState(destinationDirectory);\n\n        _this6.setCurrentDirectory(destinationDirectory);\n      });\n    }\n  }, {\n    key: \"copyItems\",\n    value: function (itemInfos, destinationDirectory) {\n      var _this7 = this;\n\n      var items = itemInfos.map(function (i) {\n        return i.fileItem;\n      });\n\n      var actionInfo = this._createEditActionInfo(\"copy\", itemInfos, destinationDirectory);\n\n      return this._processEditAction(actionInfo, function () {\n        return _this7._fileProvider.copyItems(items, destinationDirectory.fileItem);\n      }, function () {\n        _this7._resetDirectoryState(destinationDirectory);\n\n        _this7.setCurrentDirectory(destinationDirectory);\n\n        destinationDirectory.expanded = true;\n      });\n    }\n  }, {\n    key: \"deleteItems\",\n    value: function (itemInfos) {\n      var _this8 = this;\n\n      var items = itemInfos.map(function (i) {\n        return i.fileItem;\n      });\n      var directory = itemInfos.length > 0 ? itemInfos[0].parentDirectory : null;\n\n      var actionInfo = this._createEditActionInfo(\"delete\", itemInfos, directory);\n\n      return this._processEditAction(actionInfo, function () {\n        return _this8._fileProvider.deleteItems(items);\n      }, function () {\n        itemInfos.forEach(function (itemInfo) {\n          var parentDir = itemInfo.parentDirectory;\n\n          _this8._resetDirectoryState(parentDir);\n\n          _this8.setCurrentDirectory(parentDir);\n        });\n      });\n    }\n  }, {\n    key: \"processUploadSession\",\n    value: function (sessionInfo, uploadDirectoryInfo) {\n      var _this9 = this;\n\n      var itemInfos = this._getItemInfosForUploaderFiles(sessionInfo.files, uploadDirectoryInfo);\n\n      var actionInfo = this._createEditActionInfo(\"upload\", itemInfos, uploadDirectoryInfo, {\n        sessionInfo: sessionInfo\n      });\n\n      return this._processEditAction(actionInfo, function () {\n        return sessionInfo.deferreds;\n      }, function () {\n        return _this9._resetDirectoryState(uploadDirectoryInfo);\n      });\n    }\n  }, {\n    key: \"uploadFileChunk\",\n    value: function (fileData, chunksInfo, destinationDirectory) {\n      this._securityController.validateMaxFileSize(fileData.size);\n\n      this._securityController.validateExtension(fileData.name);\n\n      return (0, _deferred.when)(this._fileProvider.uploadFileChunk(fileData, chunksInfo, destinationDirectory));\n    }\n  }, {\n    key: \"abortFileUpload\",\n    value: function (fileData, chunksInfo, destinationDirectory) {\n      return (0, _deferred.when)(this._fileProvider.abortFileUpload(fileData, chunksInfo, destinationDirectory));\n    }\n  }, {\n    key: \"getFileUploadChunkSize\",\n    value: function () {\n      var chunkSize = this._options.uploadChunkSize;\n\n      if (chunkSize && chunkSize > 0) {\n        return chunkSize;\n      }\n\n      return this._fileProvider.getFileUploadChunkSize();\n    }\n  }, {\n    key: \"downloadItems\",\n    value: function (itemInfos) {\n      var items = itemInfos.map(function (i) {\n        return i.fileItem;\n      });\n\n      this._fileProvider.downloadItems(items);\n    }\n  }, {\n    key: \"getItemContent\",\n    value: function (itemInfos) {\n      var items = itemInfos.map(function (i) {\n        return i.fileItem;\n      });\n      return (0, _deferred.when)(this._fileProvider.getItemsContent(items));\n    }\n  }, {\n    key: \"_handleItemLoadError\",\n    value: function (parentDirectoryInfo, errorInfo, skipNavigationOnError) {\n      var actionInfo = this._createEditActionInfo(\"getItems\", parentDirectoryInfo, parentDirectoryInfo);\n\n      this._raiseEditActionStarting(actionInfo);\n\n      this._raiseEditActionResultAcquired(actionInfo);\n\n      this._raiseEditActionError(actionInfo, {\n        errorId: errorInfo.errorId,\n        fileItem: parentDirectoryInfo.fileItem,\n        index: 0\n      });\n\n      this._resetDirectoryState(parentDirectoryInfo);\n\n      parentDirectoryInfo.expanded = false;\n\n      if (!skipNavigationOnError) {\n        this.setCurrentDirectory(parentDirectoryInfo.parentDirectory);\n      }\n\n      return new _deferred.Deferred().reject().promise();\n    }\n  }, {\n    key: \"_processEditAction\",\n    value: function (actionInfo, action, completeAction) {\n      var _this10 = this;\n\n      var actionResult = null;\n\n      this._raiseEditActionStarting(actionInfo);\n\n      try {\n        actionResult = action();\n      } catch (error) {\n        this._raiseEditActionError(actionInfo, error);\n\n        return new _deferred.Deferred().reject().promise();\n      }\n\n      if (!Array.isArray(actionResult)) {\n        actionResult = [actionResult];\n      } else {\n        if (actionResult.length > 1) {\n          actionInfo.singleRequest = false;\n        }\n      }\n\n      this._raiseEditActionResultAcquired(actionInfo);\n\n      return (0, _uiFile_manager2.default)(actionResult, function (info) {\n        return _this10._raiseCompleteEditActionItem(actionInfo, info);\n      }, function (info) {\n        return _this10._raiseEditActionItemError(actionInfo, info);\n      }).then(function () {\n        completeAction();\n\n        _this10._raiseCompleteEditAction(actionInfo);\n      });\n    }\n  }, {\n    key: \"_createEditActionInfo\",\n    value: function (name, itemInfos, directory, customData) {\n      itemInfos = Array.isArray(itemInfos) ? itemInfos : [itemInfos];\n      customData = customData || {};\n      var items = itemInfos.map(function (itemInfo) {\n        return itemInfo.fileItem;\n      });\n      return {\n        name: name,\n        itemInfos: itemInfos,\n        items: items,\n        directory: directory,\n        customData: customData,\n        singleRequest: true\n      };\n    }\n  }, {\n    key: \"_getItemInfosForUploaderFiles\",\n    value: function (files, parentDirectoryInfo) {\n      var pathInfo = this._getPathInfo(parentDirectoryInfo);\n\n      var result = [];\n\n      for (var i = 0; i < files.length; i++) {\n        var file = files[i];\n        var item = new _file_system_item2.default(pathInfo, file.name, false);\n\n        var itemInfo = this._createFileInfo(item, parentDirectoryInfo);\n\n        result.push(itemInfo);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"refresh\",\n    value: function () {\n      var _this11 = this;\n\n      if (this._lockRefresh) {\n        return this._refreshDeferred;\n      }\n\n      this._lockRefresh = true;\n      return this._executeDataLoad(function () {\n        return _this11._refreshDeferred = _this11._refreshInternal();\n      }, \"refresh\");\n    }\n  }, {\n    key: \"_refreshInternal\",\n    value: function () {\n      var _this12 = this;\n\n      var cachedRootInfo = {\n        items: this._rootDirectoryInfo.items\n      };\n\n      var selectedKeyParts = this._getDirectoryPathKeyParts(this.getCurrentDirectory());\n\n      this._resetDirectoryState(this._rootDirectoryInfo);\n\n      return this._loadItemsRecursive(this._rootDirectoryInfo, cachedRootInfo).then(function () {\n        var dirInfo = _this12._findSelectedDirectoryByPathKeyParts(selectedKeyParts);\n\n        _this12.setCurrentDirectory(dirInfo);\n\n        delete _this12._lockRefresh;\n      });\n    }\n  }, {\n    key: \"_loadItemsRecursive\",\n    value: function (directoryInfo, cachedDirectoryInfo) {\n      var _this13 = this;\n\n      return this.getDirectories(directoryInfo).then(function (dirInfos) {\n        var itemDeferreds = [];\n\n        var _loop = function (i) {\n          var cachedItem = (0, _array.find)(cachedDirectoryInfo.items, function (cache) {\n            return dirInfos[i].fileItem.key === cache.fileItem.key;\n          });\n\n          if (!cachedItem) {\n            return \"continue\";\n          }\n\n          dirInfos[i].expanded = cachedItem.expanded;\n\n          if (dirInfos[i].expanded) {\n            itemDeferreds.push(_this13._loadItemsRecursive(dirInfos[i], cachedItem));\n          }\n        };\n\n        for (var i = 0; i < dirInfos.length; i++) {\n          var _ret = _loop(i);\n\n          if (\"continue\" === _ret) {\n            continue;\n          }\n        }\n\n        return (0, _uiFile_manager2.default)(itemDeferreds);\n      }, function () {\n        return null;\n      });\n    }\n  }, {\n    key: \"_initialize\",\n    value: function () {\n      var _this14 = this;\n\n      var result = this._options.currentPathKeys && this._options.currentPathKeys.length ? this.setCurrentPathByKeys(this._options.currentPathKeys) : this.setCurrentPath(this._options.currentPath);\n\n      var completeInitialization = function () {\n        _this14._isInitialized = true;\n\n        _this14._raiseInitialized();\n      };\n\n      if (result) {\n        (0, _deferred.when)(result).always(completeInitialization);\n      } else {\n        completeInitialization();\n      }\n    }\n  }, {\n    key: \"_setCurrentDirectoryByPathParts\",\n    value: function (pathParts, useKeys) {\n      var _this15 = this;\n\n      return this._executeDataLoad(function () {\n        return _this15._setCurrentDirectoryByPathPartsInternal(pathParts, useKeys);\n      }, \"navigation\");\n    }\n  }, {\n    key: \"_setCurrentDirectoryByPathPartsInternal\",\n    value: function (pathParts, useKeys) {\n      var _this16 = this;\n\n      return this._getDirectoryByPathParts(this._rootDirectoryInfo, pathParts, useKeys).then(function (directoryInfo) {\n        for (var info = directoryInfo.parentDirectory; info; info = info.parentDirectory) {\n          info.expanded = true;\n        }\n\n        _this16.setCurrentDirectory(directoryInfo);\n      });\n    }\n  }, {\n    key: \"_executeDataLoad\",\n    value: function (action, operation) {\n      var _this17 = this;\n\n      this._dataLoading = true;\n      this._dataLoadingDeferred = new _deferred.Deferred();\n\n      if (this._isInitialized) {\n        this._raiseDataLoading(operation);\n      }\n\n      return action().always(function () {\n        _this17._dataLoadingDeferred.resolve();\n\n        _this17._dataLoadingDeferred = null;\n        _this17._dataLoading = false;\n      });\n    }\n  }, {\n    key: \"_getDirectoryByPathParts\",\n    value: function (parentDirectoryInfo, pathParts, useKeys) {\n      var _this18 = this;\n\n      if (pathParts.length < 1) {\n        return new _deferred.Deferred().resolve(parentDirectoryInfo).promise();\n      }\n\n      var fieldName = useKeys ? \"key\" : \"name\";\n      return this.getDirectories(parentDirectoryInfo).then(function (dirInfos) {\n        var subDirInfo = (0, _array.find)(dirInfos, function (d) {\n          return d.fileItem[fieldName] === pathParts[0];\n        });\n\n        if (!subDirInfo) {\n          return new _deferred.Deferred().reject().promise();\n        }\n\n        var restPathParts = _toConsumableArray(pathParts).splice(1);\n\n        return _this18._getDirectoryByPathParts(subDirInfo, restPathParts, useKeys);\n      });\n    }\n  }, {\n    key: \"_getDirectoryPathKeyParts\",\n    value: function (directoryInfo) {\n      var pathParts = [];\n\n      while (directoryInfo && directoryInfo.parentDirectory) {\n        pathParts.unshift(directoryInfo.fileItem.key);\n        directoryInfo = directoryInfo.parentDirectory;\n      }\n\n      return pathParts;\n    }\n  }, {\n    key: \"_findSelectedDirectoryByPathKeyParts\",\n    value: function (keyParts) {\n      var selectedDirInfo = this._rootDirectoryInfo;\n\n      if (0 === keyParts.length) {\n        return selectedDirInfo;\n      }\n\n      var i = 0;\n      var newSelectedDir = selectedDirInfo;\n\n      while (newSelectedDir && i < keyParts.length) {\n        newSelectedDir = (0, _array.find)(selectedDirInfo.items, function (info) {\n          return info.fileItem.key === keyParts[i];\n        });\n\n        if (newSelectedDir) {\n          selectedDirInfo = newSelectedDir;\n        }\n\n        i++;\n      }\n\n      return selectedDirInfo;\n    }\n  }, {\n    key: \"_createDirectoryInfo\",\n    value: function (fileItem, parentDirectoryInfo) {\n      return (0, _extend.extend)(this._createFileInfo(fileItem, parentDirectoryInfo), {\n        icon: \"folder\",\n        expanded: fileItem.isRoot(),\n        items: []\n      });\n    }\n  }, {\n    key: \"_createFileInfo\",\n    value: function (fileItem, parentDirectoryInfo) {\n      return {\n        fileItem: fileItem,\n        parentDirectory: parentDirectoryInfo,\n        icon: this._getFileItemDefaultIcon(fileItem),\n        getInternalKey: function () {\n          return \"FIK_\".concat(this.fileItem.key);\n        },\n        getDisplayName: function () {\n          return this.displayName || this.fileItem.name;\n        }\n      };\n    }\n  }, {\n    key: \"_resetDirectoryState\",\n    value: function (directoryInfo) {\n      directoryInfo.itemsLoaded = false;\n      directoryInfo.items = [];\n    }\n  }, {\n    key: \"_getFileItemDefaultIcon\",\n    value: function (fileItem) {\n      if (fileItem.isDirectory) {\n        return \"folder\";\n      }\n\n      var extension = fileItem.getFileExtension();\n      var icon = this._defaultIconMap[extension];\n      return icon || \"doc\";\n    }\n  }, {\n    key: \"_createDefaultIconMap\",\n    value: function () {\n      var result = {\n        \".txt\": \"txtfile\",\n        \".rtf\": \"rtffile\",\n        \".doc\": \"docfile\",\n        \".docx\": \"docxfile\",\n        \".xls\": \"xlsfile\",\n        \".xlsx\": \"xlsxfile\",\n        \".ppt\": \"pptfile\",\n        \".pptx\": \"pptxfile\",\n        \".pdf\": \"pdffile\"\n      };\n      [\".png\", \".gif\", \".jpg\", \".jpeg\", \".ico\", \".bmp\"].forEach(function (extension) {\n        result[extension] = \"image\";\n      });\n      return result;\n    }\n  }, {\n    key: \"_createRootDirectoryInfo\",\n    value: function (text) {\n      var rootDirectory = new _file_system_item2.default(null, \"\", true);\n\n      var result = this._createDirectoryInfo(rootDirectory, null);\n\n      result.displayName = text || DEFAULT_ROOT_FILE_SYSTEM_ITEM_NAME;\n      return result;\n    }\n  }, {\n    key: \"_raiseInitialized\",\n    value: function () {\n      var e = {\n        controller: this\n      };\n\n      if (this._options.onInitialized) {\n        this._options.onInitialized(e);\n      }\n    }\n  }, {\n    key: \"_raiseDataLoading\",\n    value: function (operation) {\n      if (this._options.onDataLoading) {\n        this._options.onDataLoading({\n          operation: operation\n        });\n      }\n    }\n  }, {\n    key: \"_raiseSelectedDirectoryChanged\",\n    value: function (directoryInfo) {\n      var e = {\n        selectedDirectoryInfo: directoryInfo\n      };\n\n      if (this._options.onSelectedDirectoryChanged) {\n        this._options.onSelectedDirectoryChanged(e);\n      }\n    }\n  }, {\n    key: \"_raiseEditActionStarting\",\n    value: function (actionInfo) {\n      if (this._options.onEditActionStarting) {\n        this._options.onEditActionStarting(actionInfo);\n      }\n    }\n  }, {\n    key: \"_raiseEditActionResultAcquired\",\n    value: function (actionInfo) {\n      if (this._options.onEditActionResultAcquired) {\n        this._options.onEditActionResultAcquired(actionInfo);\n      }\n    }\n  }, {\n    key: \"_raiseEditActionError\",\n    value: function (actionInfo, error) {\n      if (this._options.onEditActionError) {\n        this._options.onEditActionError(actionInfo, error);\n      }\n    }\n  }, {\n    key: \"_raiseEditActionItemError\",\n    value: function (actionInfo, info) {\n      if (this._options.onEditActionItemError) {\n        this._options.onEditActionItemError(actionInfo, info);\n      }\n    }\n  }, {\n    key: \"_raiseCompleteEditActionItem\",\n    value: function (actionInfo, info) {\n      if (this._options.onCompleteEditActionItem) {\n        this._options.onCompleteEditActionItem(actionInfo, info);\n      }\n    }\n  }, {\n    key: \"_raiseCompleteEditAction\",\n    value: function (actionInfo) {\n      if (this._options.onCompleteEditAction) {\n        this._options.onCompleteEditAction(actionInfo);\n      }\n    }\n  }, {\n    key: \"_resetState\",\n    value: function () {\n      this._selectedDirectory = null;\n      this._rootDirectoryInfo.items = [];\n      this._loadedItems = {};\n    }\n  }, {\n    key: \"_getPathInfo\",\n    value: function (directoryInfo) {\n      var pathInfo = [];\n\n      for (var dirInfo = directoryInfo; dirInfo && !dirInfo.fileItem.isRoot(); dirInfo = dirInfo.parentDirectory) {\n        pathInfo.unshift({\n          key: dirInfo.fileItem.key,\n          name: dirInfo.fileItem.name\n        });\n      }\n\n      return pathInfo;\n    }\n  }, {\n    key: \"on\",\n    value: function (eventName, eventHandler) {\n      var finalEventName = \"on\".concat(eventName);\n      this._options[finalEventName] = eventHandler;\n    }\n  }]);\n\n  return FileItemsController;\n}();\n\nexports.default = FileItemsController;\n\nvar FileSecurityController = function () {\n  function FileSecurityController(options) {\n    var _this19 = this;\n\n    _classCallCheck(this, FileSecurityController);\n\n    var defaultOptions = {\n      allowedFileExtensions: [],\n      maxFileSize: 0\n    };\n    this._options = (0, _extend.extend)(defaultOptions, options);\n    this._extensionsMap = {};\n\n    this._allowedFileExtensions.forEach(function (extension) {\n      _this19._extensionsMap[extension.toUpperCase()] = true;\n    });\n  }\n\n  _createClass(FileSecurityController, [{\n    key: \"getAllowedItems\",\n    value: function (items) {\n      var _this20 = this;\n\n      if (0 === this._allowedFileExtensions.length) {\n        return items;\n      }\n\n      return items.filter(function (item) {\n        return item.isDirectory || _this20._isValidExtension(item.name);\n      });\n    }\n  }, {\n    key: \"validateExtension\",\n    value: function (name) {\n      if (!this._isValidExtension(name)) {\n        this._throwError(_errors2.default.WrongFileExtension);\n      }\n    }\n  }, {\n    key: \"validateMaxFileSize\",\n    value: function (size) {\n      if (this._maxFileSize && size > this._maxFileSize) {\n        this._throwError(_errors2.default.MaxFileSizeExceeded);\n      }\n    }\n  }, {\n    key: \"_isValidExtension\",\n    value: function (name) {\n      if (0 === this._allowedFileExtensions.length) {\n        return true;\n      }\n\n      var extension = (0, _utils.getFileExtension)(name).toUpperCase();\n      return this._extensionsMap[extension];\n    }\n  }, {\n    key: \"_throwError\",\n    value: function (errorId) {\n      throw {\n        errorId: errorId\n      };\n    }\n  }, {\n    key: \"_allowedFileExtensions\",\n    get: function () {\n      return this._options.allowedFileExtensions;\n    }\n  }, {\n    key: \"_maxFileSize\",\n    get: function () {\n      return this._options.maxFileSize;\n    }\n  }]);\n\n  return FileSecurityController;\n}();","map":null,"metadata":{},"sourceType":"script"}