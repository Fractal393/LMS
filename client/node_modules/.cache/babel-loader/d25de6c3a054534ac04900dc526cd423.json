{"ast":null,"code":"import { remove, resetBlazorTemplate, updateBlazorTemplate, blazorTemplates, isBlazor } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined, extend } from '@syncfusion/ej2-base';\nimport { DataManager, Query, Deferred, Predicate, DataUtil } from '@syncfusion/ej2-data';\nimport { ValueFormatter } from '../services/value-formatter';\nimport { RenderType, CellType } from '../base/enum';\nimport { Data } from '../actions/data';\nimport { Column } from '../models/column';\nimport { Row } from '../models/row';\nimport { Cell } from '../models/cell';\nimport * as events from '../base/constant';\nimport { prepareColumns, setFormatter, isGroupAdaptive, getDatePredicate, getObject } from '../base/util';\nimport { ContentRender } from '../renderer/content-renderer';\nimport { HeaderRender } from '../renderer/header-renderer';\nimport { CellRenderer } from '../renderer/cell-renderer';\nimport { HeaderCellRenderer } from '../renderer/header-cell-renderer';\nimport { StackedHeaderCellRenderer } from '../renderer/stacked-cell-renderer';\nimport { IndentCellRenderer } from '../renderer/indent-cell-renderer';\nimport { GroupCaptionCellRenderer, GroupCaptionEmptyCellRenderer } from '../renderer/caption-cell-renderer';\nimport { ExpandCellRenderer } from '../renderer/expand-cell-renderer';\nimport { HeaderIndentCellRenderer } from '../renderer/header-indent-renderer';\nimport { DetailHeaderIndentCellRenderer } from '../renderer/detail-header-indent-renderer';\nimport { DetailExpandCellRenderer } from '../renderer/detail-expand-cell-renderer';\nimport { RowDragDropRenderer } from './row-drag-drop-renderer';\nimport { RowDragDropHeaderRenderer } from '../renderer/row-drag-header-indent-render';\n/**\n * Content module is used to render grid content\n * @hidden\n */\n\nvar Render =\n/** @class */\nfunction () {\n  /**\n   * Constructor for render module\n   */\n  function Render(parent, locator) {\n    this.emptyGrid = false;\n    this.counter = 0;\n    this.parent = parent;\n    this.locator = locator;\n    this.data = new Data(parent, locator);\n    this.l10n = locator.getService('localization');\n    this.ariaService = this.locator.getService('ariaService');\n    this.renderer = this.locator.getService('rendererFactory');\n    this.addEventListener();\n  }\n  /**\n   * To initialize grid header, content and footer rendering\n   */\n\n\n  Render.prototype.render = function () {\n    var gObj = this.parent;\n    var isServerRendered = 'isServerRendered';\n    this.headerRenderer = this.renderer.getRenderer(RenderType.Header);\n    this.contentRenderer = this.renderer.getRenderer(RenderType.Content);\n    this.headerRenderer.renderPanel();\n    this.contentRenderer.renderPanel();\n\n    if (gObj.getColumns().length) {\n      this.isLayoutRendered = true;\n      this.headerRenderer.renderTable();\n      this.contentRenderer.renderTable();\n      this.emptyRow(false);\n    }\n\n    this.parent.scrollModule.setWidth();\n    this.parent.scrollModule.setHeight();\n\n    if (this.parent.height !== 'auto') {\n      this.parent.scrollModule.setPadding();\n    }\n\n    if (!(isBlazor() && this.parent[isServerRendered])) {\n      this.refreshDataManager();\n    }\n  };\n  /**\n   * Refresh the entire Grid.\n   * @return {void}\n   */\n\n\n  Render.prototype.refresh = function (e) {\n    var _this = this;\n\n    if (e === void 0) {\n      e = {\n        requestType: 'refresh'\n      };\n    }\n\n    var gObj = this.parent;\n    var preventUpdate = 'preventUpdate';\n    gObj.notify(e.requestType + \"-begin\", e);\n\n    if (isBlazor()) {\n      this.resetTemplates();\n    }\n\n    if (isBlazor() && gObj.isServerRendered) {\n      var bulkChanges = 'bulkChanges';\n\n      if (gObj[bulkChanges].dataSource) {\n        delete gObj[bulkChanges].dataSource;\n      }\n\n      gObj.notify('blazor-action-begin', e);\n\n      if (e.requestType === 'filtering') {\n        var columns = 'columns';\n        e[columns] = null;\n      }\n\n      if (e.requestType === 'sorting') {\n        var target = 'target';\n        e[target] = null;\n      }\n\n      if (gObj.editSettings.mode === 'Batch' && !gObj.isEdit) {\n        gObj.notify('closebatch', {});\n      }\n    }\n\n    var tempPreventUpdate = this.parent[preventUpdate];\n    gObj.trigger(events.actionBegin, e, function (args) {\n      if (args === void 0) {\n        args = {\n          requestType: 'refresh'\n        };\n      }\n\n      if (args.requestType === 'delete' && isBlazor() && !gObj.isJsComponent) {\n        var data = 'data';\n\n        if (isNullOrUndefined(gObj.commandDelIndex)) {\n          args[data] = gObj.getSelectedRecords();\n        } else {\n          var tempSelectedRecord = args[data];\n          args[data] = {};\n          args[data][0] = tempSelectedRecord;\n        }\n      }\n\n      if (args.cancel) {\n        gObj.notify(events.cancelBegin, args);\n        return;\n      }\n\n      if (gObj.editSettings.mode === 'Normal' && gObj.isEdit && e.requestType !== 'infiniteScroll') {\n        gObj.notify('closeinline', {});\n      }\n\n      if (args.requestType === 'delete' && gObj.allowPaging) {\n        var dataLength = args.data.length;\n        var count = gObj.pageSettings.totalRecordsCount - dataLength;\n\n        if (!(gObj.currentViewData.length - dataLength) && count) {\n          gObj.prevPageMoving = true;\n          gObj.setProperties({\n            pageSettings: {\n              totalRecordsCount: count,\n              currentPage: Math.ceil(count / gObj.pageSettings.pageSize)\n            }\n          }, true);\n          gObj.pagerModule.pagerObj.totalRecordsCount = count;\n        }\n      }\n\n      if (isBlazor() && _this.parent.isServerRendered) {\n        if (tempPreventUpdate) {\n          var bulkChanges = 'bulkChanges';\n          gObj[bulkChanges] = {};\n          return;\n        }\n\n        if (e.requestType === 'refresh') {\n          _this.parent.notify('updateaction', args);\n        }\n\n        if (args.requestType !== 'virtualscroll') {\n          _this.parent.showSpinner();\n        }\n\n        if (args.requestType === 'delete' || args.requestType === 'save') {\n          _this.parent.notify(events.addDeleteAction, args);\n\n          _this.parent.notify('add-delete-success', args);\n        } else {\n          _this.parent.allowServerDataBinding = true;\n\n          _this.parent.serverDataBind();\n\n          _this.parent.allowServerDataBinding = false;\n        }\n      } else if (args.requestType === 'reorder' && _this.parent.dataSource && 'result' in _this.parent.dataSource) {\n        _this.contentRenderer.refreshContentRows(args);\n      } else {\n        _this.refreshDataManager(args);\n      }\n    });\n  };\n  /**\n   * @hidden\n   */\n\n\n  Render.prototype.resetTemplates = function () {\n    var gObj = this.parent;\n    var gridColumns = gObj.getColumns();\n\n    if (gObj.detailTemplate) {\n      var detailTemplateID = gObj.element.id + 'detailTemplate';\n      blazorTemplates[detailTemplateID] = [];\n      resetBlazorTemplate(detailTemplateID, 'DetailTemplate');\n    }\n\n    if (gObj.groupSettings.captionTemplate) {\n      resetBlazorTemplate(gObj.element.id + 'captionTemplate', 'CaptionTemplate');\n    }\n\n    if (gObj.rowTemplate) {\n      resetBlazorTemplate(gObj.element.id + 'rowTemplate', 'RowTemplate');\n    }\n\n    if (gObj.toolbarTemplate) {\n      resetBlazorTemplate(gObj.element.id + 'toolbarTemplate', 'ToolbarTemplate');\n    }\n\n    if (gObj.pageSettings.template) {\n      resetBlazorTemplate(gObj.element.id + '_template', 'pageSettings');\n    }\n\n    for (var i = 0; i < gridColumns.length; i++) {\n      if (gridColumns[i].template) {\n        blazorTemplates[gObj.element.id + gridColumns[i].uid] = [];\n        resetBlazorTemplate(gObj.element.id + gridColumns[i].uid, 'Template');\n      }\n\n      if (gridColumns[i].headerTemplate) {\n        resetBlazorTemplate(gObj.element.id + gridColumns[i].uid + 'headerTemplate', 'HeaderTemplate');\n      }\n\n      if (gridColumns[i].filterTemplate) {\n        resetBlazorTemplate(gObj.element.id + gridColumns[i].uid + 'filterTemplate', 'FilterTemplate');\n      }\n    }\n\n    var guid = 'guid';\n\n    for (var k = 0; k < gObj.aggregates.length; k++) {\n      for (var j = 0; j < gObj.aggregates[k].columns.length; j++) {\n        if (gObj.aggregates[k].columns[j].footerTemplate) {\n          var tempID = gObj.element.id + gObj.aggregates[k].columns[j][guid] + 'footerTemplate';\n          resetBlazorTemplate(tempID, 'FooterTemplate');\n        }\n\n        if (gObj.aggregates[k].columns[j].groupFooterTemplate) {\n          var tempID = gObj.element.id + gObj.aggregates[k].columns[j][guid] + 'groupFooterTemplate';\n          resetBlazorTemplate(tempID, 'GroupFooterTemplate');\n        }\n\n        if (gObj.aggregates[k].columns[j].groupCaptionTemplate) {\n          var tempID = gObj.element.id + gObj.aggregates[k].columns[j][guid] + 'groupCaptionTemplate';\n          resetBlazorTemplate(tempID, 'GroupCaptionTemplate');\n        }\n      }\n    }\n  };\n\n  Render.prototype.refreshComplete = function (e) {\n    if (isBlazor() && !this.parent.isJsComponent) {\n      e.rows = null;\n    }\n\n    this.parent.trigger(events.actionComplete, e);\n  };\n  /**\n   * The function is used to refresh the dataManager\n   * @return {void}\n   */\n\n\n  Render.prototype.refreshDataManager = function (args) {\n    var _this = this;\n\n    if (args === void 0) {\n      args = {};\n    }\n\n    if (args.requestType !== 'virtualscroll') {\n      this.parent.showSpinner();\n    }\n\n    this.parent.notify(events.resetInfiniteBlocks, args);\n    this.emptyGrid = false;\n    var dataManager;\n    var isFActon = this.isNeedForeignAction();\n    this.ariaService.setBusy(this.parent.getContent().querySelector('.e-content'), true);\n\n    if (isFActon) {\n      var deffered = new Deferred();\n      dataManager = this.getFData(deffered, args);\n    }\n\n    if (!dataManager) {\n      dataManager = this.data.getData(args, this.data.generateQuery().requiresCount());\n    } else {\n      dataManager = dataManager.then(function (e) {\n        var query = _this.data.generateQuery().requiresCount();\n\n        if (_this.emptyGrid) {\n          var def = new Deferred();\n          def.resolve({\n            result: [],\n            count: 0\n          });\n          return def.promise;\n        }\n\n        return _this.data.getData(args, query);\n      });\n    }\n\n    if (this.parent.getForeignKeyColumns().length && (!isFActon || this.parent.searchSettings.key.length)) {\n      var deffered_1 = new Deferred();\n      dataManager = dataManager.then(function (e) {\n        _this.parent.notify(events.getForeignKeyData, {\n          dataManager: dataManager,\n          result: e,\n          promise: deffered_1,\n          action: args\n        });\n\n        return deffered_1.promise;\n      });\n    }\n\n    if (this.parent.groupSettings.disablePageWiseAggregates && this.parent.groupSettings.columns.length) {\n      dataManager = dataManager.then(function (e) {\n        return _this.validateGroupRecords(e);\n      });\n    }\n\n    dataManager.then(function (e) {\n      return _this.dataManagerSuccess(e, args);\n    }).catch(function (e) {\n      return _this.dataManagerFailure(e, args);\n    });\n  };\n\n  Render.prototype.getFData = function (deferred, args) {\n    this.parent.notify(events.getForeignKeyData, {\n      isComplex: true,\n      promise: deferred,\n      action: args\n    });\n    return deferred.promise;\n  };\n\n  Render.prototype.isNeedForeignAction = function () {\n    var gObj = this.parent;\n    return !!(gObj.allowFiltering && gObj.filterSettings.columns.length || gObj.searchSettings.key.length) && this.foreignKey(this.parent.getForeignKeyColumns());\n  };\n\n  Render.prototype.foreignKey = function (columns) {\n    var _this = this;\n\n    return columns.some(function (col) {\n      var fbool = false;\n      fbool = _this.parent.filterSettings.columns.some(function (value) {\n        return col.uid === value.uid;\n      });\n      return !!(fbool || _this.parent.searchSettings.key.length);\n    });\n  };\n\n  Render.prototype.sendBulkRequest = function (args) {\n    var _this = this;\n\n    args.requestType = 'batchsave';\n    var promise = this.data.saveChanges(args.changes, this.parent.getPrimaryKeyFieldNames()[0], args.original);\n\n    if (isBlazor() && !this.parent.isJsComponent) {\n      promise.then(function (e) {\n        _this.parent.notify('editsuccess', args);\n      }).catch(function (e) {\n        var error = 'error';\n        var message = 'message';\n\n        if (!isNullOrUndefined(e[error]) && !isNullOrUndefined(e[error][message])) {\n          e[error] = e[error][message];\n        }\n\n        _this.parent.trigger(events.actionFailure, e);\n      });\n    } else {\n      var query_1 = this.data.generateQuery().requiresCount();\n\n      if (this.data.dataManager.dataSource.offline) {\n        this.refreshDataManager({\n          requestType: 'batchsave'\n        });\n        return;\n      } else {\n        promise.then(function (e) {\n          _this.data.getData(args, query_1).then(function (e) {\n            return _this.dmSuccess(e, args);\n          }).catch(function (e) {\n            return _this.dmFailure(e, args);\n          });\n        }).catch(function (e) {\n          return _this.dmFailure(e, args);\n        });\n      }\n    }\n  };\n\n  Render.prototype.dmSuccess = function (e, args) {\n    this.dataManagerSuccess(e, args);\n  };\n\n  Render.prototype.dmFailure = function (e, args) {\n    this.dataManagerFailure(e, args);\n  };\n  /**\n   * Render empty row to Grid which is used at the time to represent to no records.\n   * @return {void}\n   * @hidden\n   */\n\n\n  Render.prototype.renderEmptyRow = function () {\n    this.emptyRow(true);\n  };\n\n  Render.prototype.emptyRow = function (isTrigger) {\n    var gObj = this.parent;\n    var tbody = this.contentRenderer.getTable().querySelector('tbody');\n    var tr;\n\n    if (!isNullOrUndefined(tbody)) {\n      remove(tbody);\n    }\n\n    tbody = this.parent.createElement('tbody');\n    var spanCount = 0;\n\n    if (gObj.detailTemplate || gObj.childGrid) {\n      ++spanCount;\n    }\n\n    tr = this.parent.createElement('tr', {\n      className: 'e-emptyrow'\n    });\n    tr.appendChild(this.parent.createElement('td', {\n      innerHTML: this.l10n.getConstant('EmptyRecord'),\n      attrs: {\n        colspan: (gObj.getColumns().length + spanCount).toString()\n      }\n    }));\n    tbody.appendChild(tr);\n    this.contentRenderer.renderEmpty(tbody);\n\n    if (isTrigger) {\n      this.parent.trigger(events.dataBound, {});\n      this.parent.notify(events.onEmpty, {\n        rows: [new Row({\n          isDataRow: true,\n          cells: [new Cell({\n            isDataCell: true,\n            visible: true\n          })]\n        })]\n      });\n    }\n  };\n\n  Render.prototype.dynamicColumnChange = function () {\n    if (this.parent.getCurrentViewRecords().length) {\n      this.updateColumnType(this.parent.getCurrentViewRecords()[0]);\n    }\n  };\n\n  Render.prototype.updateColumnType = function (record) {\n    var columns = this.parent.getColumns();\n    var value;\n    var cFormat = 'customFormat';\n    var equalTo = 'equalTo';\n    var data = record && record.items ? record.items[0] : record;\n    var fmtr = this.locator.getService('valueFormatter');\n\n    for (var i = 0, len = columns.length; i < len; i++) {\n      value = getObject(columns[i].field || '', data);\n\n      if (!isNullOrUndefined(columns[i][cFormat])) {\n        columns[i].format = columns[i][cFormat];\n      }\n\n      if (!isNullOrUndefined(columns[i].validationRules) && !isNullOrUndefined(columns[i].validationRules[equalTo])) {\n        columns[i].validationRules[equalTo][0] = this.parent.element.id + columns[i].validationRules[equalTo][0];\n      }\n\n      if (columns[i].isForeignColumn() && columns[i].columnData) {\n        value = getObject(columns[i].foreignKeyValue || '', columns[i].columnData[0]);\n      }\n\n      if (!isNullOrUndefined(value)) {\n        this.isColTypeDef = true;\n\n        if (!columns[i].type || isBlazor() && this.parent.isServerRendered && columns[i].type === 'none') {\n          columns[i].type = value.getDay ? value.getHours() > 0 || value.getMinutes() > 0 || value.getSeconds() > 0 || value.getMilliseconds() > 0 ? 'datetime' : 'date' : typeof value;\n        }\n      } else {\n        columns[i].type = columns[i].type || (isBlazor() && this.parent.isServerRendered ? 'none' : null);\n      }\n\n      var valueFormatter = new ValueFormatter();\n\n      if (columns[i].format && (columns[i].format.skeleton || columns[i].format.format)) {\n        columns[i].setFormatter(valueFormatter.getFormatFunction(extend({}, columns[i].format)));\n        columns[i].setParser(valueFormatter.getParserFunction(columns[i].format));\n      }\n\n      if (typeof columns[i].format === 'string') {\n        var isServerRendered = 'isServerRendered';\n        var isServerDateMap = this.parent[isServerRendered] || this.parent.printModule.isPrintGrid();\n        setFormatter(this.locator, columns[i], isServerDateMap);\n      } else if (!columns[i].format && columns[i].type === 'number') {\n        columns[i].setParser(fmtr.getParserFunction({\n          format: 'n2'\n        }));\n      }\n    }\n  };\n  /** @hidden */\n  // tslint:disable-next-line:max-func-body-length\n\n\n  Render.prototype.dataManagerSuccess = function (e, args) {\n    var _this = this;\n\n    var gObj = this.parent;\n    this.contentRenderer = this.renderer.getRenderer(RenderType.Content);\n    this.headerRenderer = this.renderer.getRenderer(RenderType.Header);\n    e.actionArgs = args;\n    var isInfiniteDelete = this.parent.enableInfiniteScrolling && !this.parent.infiniteScrollSettings.enableCache && (args.requestType === 'delete' || args.requestType === 'save' && this.parent.infiniteScrollModule.requestType === 'add');\n    gObj.trigger(events.beforeDataBound, e, function (dataArgs) {\n      if (dataArgs.cancel) {\n        return;\n      }\n\n      dataArgs.result = isNullOrUndefined(dataArgs.result) ? [] : dataArgs.result;\n      var len = Object.keys(dataArgs.result).length;\n\n      if (_this.parent.isDestroyed) {\n        return;\n      }\n\n      if (!gObj.getColumns().length && !len && !(gObj.columns.length && gObj.columns[0] instanceof Column)) {\n        gObj.hideSpinner();\n        return;\n      }\n\n      if (_this.isInfiniteEnd(args) && !len) {\n        _this.parent.notify(events.infiniteEditHandler, {\n          e: args,\n          result: e.result,\n          count: e.count,\n          agg: e.aggregates\n        });\n\n        return;\n      }\n\n      _this.parent.isEdit = false;\n\n      _this.parent.notify(events.editReset, {});\n\n      _this.parent.notify(events.tooltipDestroy, {});\n\n      gObj.currentViewData = dataArgs.result;\n\n      if (isBlazor() && gObj.filterSettings.type === 'FilterBar' && (isNullOrUndefined(gObj.currentViewData) || !isNullOrUndefined(gObj.currentViewData) && !gObj.currentViewData.length)) {\n        var gridColumns = gObj.getColumns();\n\n        for (var i = 0; i < gridColumns.length; i++) {\n          if (gridColumns[i].filterTemplate) {\n            var tempID = gObj.element.id + gridColumns[i].uid + 'filterTemplate';\n            resetBlazorTemplate(tempID, 'FilterTemplate');\n            var fieldName = gridColumns[i].field;\n            var filteredColumns = gObj.filterSettings.columns;\n\n            for (var k = 0; k < filteredColumns.length; k++) {\n              if (fieldName === filteredColumns[k].field) {\n                blazorTemplates[tempID][0][fieldName] = filteredColumns[k].value;\n              }\n            }\n\n            updateBlazorTemplate(tempID, 'FilterTemplate', gridColumns[i], false);\n          }\n        }\n      }\n\n      if (!len && dataArgs.count && gObj.allowPaging && args && args.requestType !== 'delete') {\n        gObj.prevPageMoving = true;\n        gObj.pageSettings.totalRecordsCount = dataArgs.count;\n\n        if (args.requestType !== 'paging') {\n          gObj.pageSettings.currentPage = Math.ceil(dataArgs.count / gObj.pageSettings.pageSize);\n        }\n\n        gObj.dataBind();\n        return;\n      }\n\n      if ((!gObj.getColumns().length && len || !_this.isLayoutRendered) && !isGroupAdaptive(gObj)) {\n        _this.updatesOnInitialRender(dataArgs);\n      }\n\n      if (!_this.isColTypeDef && gObj.getCurrentViewRecords()) {\n        if (_this.data.dataManager.dataSource.offline && gObj.dataSource.length) {\n          _this.updateColumnType(gObj.dataSource[0]);\n        } else {\n          _this.updateColumnType(gObj.getCurrentViewRecords()[0]);\n        }\n      }\n\n      if (!_this.parent.isInitialLoad && _this.parent.groupSettings.disablePageWiseAggregates && !_this.parent.groupSettings.columns.length) {\n        dataArgs.result = _this.parent.dataSource instanceof Array ? _this.parent.dataSource : _this.parent.currentViewData;\n      }\n\n      _this.parent.notify(events.dataReady, extend({\n        count: dataArgs.count,\n        result: dataArgs.result,\n        aggregates: dataArgs.aggregates\n      }, args));\n\n      if ((gObj.groupSettings.columns.length || args && args.requestType === 'ungrouping') && args && args.requestType !== 'filtering') {\n        _this.headerRenderer.refreshUI();\n      }\n\n      if (len) {\n        if (isGroupAdaptive(gObj)) {\n          var content = 'content';\n          args.scrollTop = {\n            top: _this.contentRenderer[content].scrollTop\n          };\n        }\n\n        if (!isInfiniteDelete) {\n          _this.contentRenderer.refreshContentRows(args);\n        } else {\n          _this.parent.notify(events.infiniteEditHandler, {\n            e: args,\n            result: e.result,\n            count: e.count,\n            agg: e.aggregates\n          });\n        }\n      } else {\n        if (!gObj.getColumns().length) {\n          gObj.element.innerHTML = '';\n          alert(_this.l10n.getConstant('EmptyDataSourceError')); //ToDO: change this alert as dialog\n\n          return;\n        }\n\n        _this.contentRenderer.setRowElements([]);\n\n        _this.contentRenderer.setRowObjects([]);\n\n        _this.ariaService.setBusy(_this.parent.getContent().querySelector('.e-content'), false);\n\n        _this.renderEmptyRow();\n\n        if (args) {\n          var action = (args.requestType || '').toLowerCase() + '-complete';\n\n          _this.parent.notify(action, args);\n\n          if (args.requestType === 'batchsave') {\n            args.cancel = false;\n            args.rows = [];\n            args.isFrozen = _this.parent.getFrozenColumns() !== 0 && !args.isFrozen;\n\n            _this.parent.trigger(events.actionComplete, args);\n          }\n        }\n\n        _this.parent.hideSpinner();\n      }\n\n      _this.parent.notify(events.toolbarRefresh, {});\n    });\n  };\n  /** @hidden */\n\n\n  Render.prototype.dataManagerFailure = function (e, args) {\n    this.ariaService.setOptions(this.parent.getContent().querySelector('.e-content'), {\n      busy: false,\n      invalid: true\n    });\n    this.parent.trigger(events.actionFailure, {\n      error: e\n    });\n    this.parent.hideSpinner();\n\n    if (args.requestType === 'save' || args.requestType === 'delete' || args.name === 'bulk-save') {\n      return;\n    }\n\n    this.parent.currentViewData = [];\n    this.renderEmptyRow();\n    this.parent.log('actionfailure', {\n      error: e\n    });\n  };\n\n  Render.prototype.isInfiniteEnd = function (args) {\n    return this.parent.enableInfiniteScrolling && !this.parent.infiniteScrollSettings.enableCache && args.requestType === 'delete';\n  };\n\n  Render.prototype.updatesOnInitialRender = function (e) {\n    this.isLayoutRendered = true;\n\n    if (this.parent.columns.length < 1) {\n      this.buildColumns(e.result[0]);\n    }\n\n    prepareColumns(this.parent.columns);\n    this.headerRenderer.renderTable();\n    this.contentRenderer.renderTable();\n    this.parent.isAutoGen = true;\n    this.parent.notify(events.autoCol, {});\n  };\n\n  Render.prototype.iterateComplexColumns = function (obj, field, split) {\n    var keys = Object.keys(obj);\n\n    for (var i = 0; i < keys.length; i++) {\n      var childKeys = typeof obj[keys[i]] === 'object' && obj[keys[i]] && !(obj[keys[i]] instanceof Date) ? Object.keys(obj[keys[i]]) : [];\n\n      if (childKeys.length) {\n        this.iterateComplexColumns(obj[keys[i]], field + (keys[i] + '.'), split);\n      } else {\n        split[this.counter] = field + keys[i];\n        this.counter++;\n      }\n    }\n  };\n\n  Render.prototype.buildColumns = function (record) {\n    var cols = [];\n    var complexCols = {};\n    this.iterateComplexColumns(record, '', complexCols);\n    var columns = Object.keys(complexCols).filter(function (e) {\n      return complexCols[e] !== 'BlazId';\n    }).map(function (field) {\n      return complexCols[field];\n    });\n\n    for (var i = 0, len = columns.length; i < len; i++) {\n      cols[i] = {\n        'field': columns[i]\n      };\n\n      if (this.parent.enableColumnVirtualization) {\n        cols[i].width = !isNullOrUndefined(cols[i].width) ? cols[i].width : 200;\n      }\n    }\n\n    this.parent.setProperties({\n      'columns': cols\n    }, true);\n  };\n\n  Render.prototype.instantiateRenderer = function () {\n    this.renderer.addRenderer(RenderType.Header, new HeaderRender(this.parent, this.locator));\n    this.renderer.addRenderer(RenderType.Content, new ContentRender(this.parent, this.locator));\n    var cellrender = this.locator.getService('cellRendererFactory');\n    cellrender.addCellRenderer(CellType.Header, new HeaderCellRenderer(this.parent, this.locator));\n    cellrender.addCellRenderer(CellType.Data, new CellRenderer(this.parent, this.locator));\n    cellrender.addCellRenderer(CellType.StackedHeader, new StackedHeaderCellRenderer(this.parent, this.locator));\n    cellrender.addCellRenderer(CellType.Indent, new IndentCellRenderer(this.parent, this.locator));\n    cellrender.addCellRenderer(CellType.GroupCaption, new GroupCaptionCellRenderer(this.parent, this.locator));\n    cellrender.addCellRenderer(CellType.GroupCaptionEmpty, new GroupCaptionEmptyCellRenderer(this.parent, this.locator));\n    cellrender.addCellRenderer(CellType.Expand, new ExpandCellRenderer(this.parent, this.locator));\n    cellrender.addCellRenderer(CellType.HeaderIndent, new HeaderIndentCellRenderer(this.parent, this.locator));\n    cellrender.addCellRenderer(CellType.StackedHeader, new StackedHeaderCellRenderer(this.parent, this.locator));\n    cellrender.addCellRenderer(CellType.DetailHeader, new DetailHeaderIndentCellRenderer(this.parent, this.locator));\n    cellrender.addCellRenderer(CellType.RowDragHIcon, new RowDragDropHeaderRenderer(this.parent, this.locator));\n    cellrender.addCellRenderer(CellType.DetailExpand, new DetailExpandCellRenderer(this.parent, this.locator));\n    cellrender.addCellRenderer(CellType.DetailFooterIntent, new IndentCellRenderer(this.parent, this.locator));\n    cellrender.addCellRenderer(CellType.RowDragIcon, new RowDragDropRenderer(this.parent, this.locator));\n  };\n\n  Render.prototype.addEventListener = function () {\n    var _this = this;\n\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.on(events.initialLoad, this.instantiateRenderer, this);\n    this.parent.on('refreshdataSource', this.dataManagerSuccess, this);\n    this.parent.on(events.modelChanged, this.refresh, this);\n    this.parent.on(events.refreshComplete, this.refreshComplete, this);\n    this.parent.on(events.bulkSave, this.sendBulkRequest, this);\n    this.parent.on(events.showEmptyGrid, function () {\n      _this.emptyGrid = true;\n    }, this);\n    this.parent.on(events.autoCol, this.dynamicColumnChange, this);\n  };\n  /** @hidden */\n\n\n  Render.prototype.validateGroupRecords = function (e) {\n    var _this = this;\n\n    var index = e.result.length - 1;\n\n    if (index < 0) {\n      return Promise.resolve(e);\n    }\n\n    var group0 = e.result[0];\n    var groupN = e.result[index];\n    var predicate = [];\n\n    var addWhere = function (input) {\n      var groups = [group0, groupN];\n\n      for (var i = 0; i < groups.length; i++) {\n        predicate.push(new Predicate('field', '==', groups[i].field).and(_this.getPredicate('key', 'equal', groups[i].key)));\n      }\n\n      input.where(Predicate.or(predicate));\n    };\n\n    var query = new Query();\n    addWhere(query);\n    var curDm = new DataManager(e.result);\n    var curFilter = curDm.executeLocal(query);\n    var newQuery = this.data.generateQuery(true);\n    var rPredicate = [];\n\n    if (this.data.isRemote() || isBlazor()) {\n      var groups = [group0, groupN];\n\n      for (var i = 0; i < groups.length; i++) {\n        rPredicate.push(this.getPredicate(groups[i].field, 'equal', groups[i].key));\n      }\n\n      newQuery.where(Predicate.or(rPredicate));\n    } else {\n      addWhere(newQuery);\n    }\n\n    var deferred = new Deferred();\n    this.data.getData({}, newQuery).then(function (r) {\n      _this.updateGroupInfo(curFilter, r.result);\n\n      deferred.resolve(e);\n    }).catch(function (e) {\n      return deferred.reject(e);\n    });\n    return deferred.promise;\n  };\n\n  Render.prototype.getPredicate = function (key, operator, value) {\n    if (value instanceof Date) {\n      return getDatePredicate({\n        field: key,\n        operator: operator,\n        value: value\n      });\n    }\n\n    return new Predicate(key, operator, value);\n  };\n\n  Render.prototype.updateGroupInfo = function (current, untouched) {\n    var dm = new DataManager(untouched);\n    var elements = current;\n\n    for (var i = 0; i < elements.length; i++) {\n      var uGroup = dm.executeLocal(new Query().where(new Predicate('field', '==', elements[i].field).and(this.getPredicate('key', 'equal', elements[i].key))))[0];\n      elements[i].count = uGroup.count;\n      var itemGroup = elements[i].items;\n      var uGroupItem = uGroup.items;\n\n      if (itemGroup.GroupGuid) {\n        elements[i].items = this.updateGroupInfo(elements[i].items, uGroup.items);\n      }\n\n      var rows = this.parent.aggregates;\n\n      for (var j = 0; j < rows.length; j++) {\n        var row = rows[j];\n\n        for (var k = 0; k < row.columns.length; k++) {\n          var types = row.columns[k].type instanceof Array ? row.columns[k].type : [row.columns[k].type];\n\n          for (var l = 0; l < types.length; l++) {\n            var key = row.columns[k].field + ' - ' + types[l].toLowerCase();\n            var data = itemGroup.level ? uGroupItem.records : uGroup.items;\n            var context = this.parent;\n\n            if (types[l] === 'Custom') {\n              var data_1 = itemGroup.level ? uGroupItem : uGroup;\n              elements[i].aggregates[key] = row.columns[k].customAggregate ? row.columns[k].customAggregate.call(context, data_1, row.columns[k]) : '';\n            } else {\n              elements[i].aggregates[key] = DataUtil.aggregates[types[l].toLowerCase()](data, row.columns[k].field);\n            }\n          }\n        }\n      }\n    }\n\n    return current;\n  };\n\n  return Render;\n}();\n\nexport { Render };","map":null,"metadata":{},"sourceType":"module"}