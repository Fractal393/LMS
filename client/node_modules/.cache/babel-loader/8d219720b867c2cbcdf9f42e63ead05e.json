{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { PdfFontFamily, PdfFontStyle, FontEncoding } from './enum';\nimport { PdfFont } from './pdf-font';\nimport { PdfDocument } from './../../document/pdf-document';\nimport { PdfStandardFontMetricsFactory } from './pdf-standard-font-metrics-factory';\nimport { PdfDictionary } from './../../primitives/pdf-dictionary';\nimport { DictionaryProperties } from './../../input-output/pdf-dictionary-properties';\nimport { PdfName } from './../../primitives/pdf-name';\n/**\n * Represents one of the 14 standard fonts.\n * It's used to create a standard PDF font to draw the text in to the PDF.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a new page to the document\n * let page1 : PdfPage = document.pages.add();\n * //\n * // create new standard font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * //\n * // create black brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n * // draw the text\n * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\n\nvar PdfStandardFont =\n/** @class */\nfunction (_super) {\n  __extends(PdfStandardFont, _super);\n\n  function PdfStandardFont(fontFamilyPrototype, size, style) {\n    var _this = _super.call(this, size, typeof style === 'undefined' ? fontFamilyPrototype instanceof PdfStandardFont ? fontFamilyPrototype.style : PdfFontStyle.Regular : style) || this;\n    /**\n     * Gets `ascent` of the font.\n     * @private\n     */\n\n\n    _this.dictionaryProperties = new DictionaryProperties();\n    /**\n     * Gets `encodings` for internal class use.\n     * @hidden\n     * @private\n     */\n\n    _this.encodings = ['Unknown', 'StandardEncoding', 'MacRomanEncoding', 'MacExpertEncoding', 'WinAnsiEncoding', 'PDFDocEncoding', 'IdentityH'];\n\n    if (typeof fontFamilyPrototype === 'undefined') {\n      _this.pdfFontFamily = PdfFontFamily.Helvetica;\n    } else if (fontFamilyPrototype instanceof PdfStandardFont) {\n      _this.pdfFontFamily = fontFamilyPrototype.fontFamily;\n    } else {\n      _this.pdfFontFamily = fontFamilyPrototype;\n    }\n\n    _this.checkStyle();\n\n    _this.initializeInternals();\n\n    return _this;\n  }\n\n  Object.defineProperty(PdfStandardFont.prototype, \"fontFamily\", {\n    /* tslint:enable */\n    //Properties\n\n    /**\n     * Gets the `FontFamily`.\n     * @private\n     */\n    get: function () {\n      return this.pdfFontFamily;\n    },\n    enumerable: true,\n    configurable: true\n  }); //methods\n\n  /**\n   * Checks font `style` of the font.\n   * @private\n   */\n\n  PdfStandardFont.prototype.checkStyle = function () {\n    if (this.fontFamily === PdfFontFamily.Symbol || this.fontFamily === PdfFontFamily.ZapfDingbats) {\n      var style = this.style;\n      style &= ~(PdfFontStyle.Bold | PdfFontStyle.Italic);\n      this.setStyle(style);\n    }\n  };\n  /**\n   * Returns `width` of the line.\n   * @public\n   */\n\n\n  PdfStandardFont.prototype.getLineWidth = function (line, format) {\n    if (line == null) {\n      throw new Error('ArgumentNullException:line');\n    }\n\n    var width = 0;\n    var name = this.name;\n    line = PdfStandardFont.convert(line);\n\n    for (var i = 0, len = line.length; i < len; i++) {\n      var ch = line[i];\n      var charWidth = this.getCharWidthInternal(ch, format);\n      width += charWidth;\n    }\n\n    var size = this.metrics.getSize(format);\n    width *= PdfFont.charSizeMultiplier * size;\n    width = this.applyFormatSettings(line, format, width);\n    return width;\n  };\n  /**\n   * Checks whether fonts are `equals`.\n   * @private\n   */\n\n\n  PdfStandardFont.prototype.equalsToFont = function (font) {\n    var equal = false;\n    var stFont = font;\n\n    if (stFont != null) {\n      var fontFamilyEqual = this.fontFamily === stFont.fontFamily;\n      var lineReducer = ~(PdfFontStyle.Underline | PdfFontStyle.Strikeout);\n      var styleEqual = (this.style & lineReducer) === (stFont.style & lineReducer);\n      equal = fontFamilyEqual && styleEqual;\n    }\n\n    return equal;\n  };\n  /**\n   * `Initializes` font internals..\n   * @private\n   */\n\n\n  PdfStandardFont.prototype.initializeInternals = function () {\n    var equalFont = null; // if (PdfDocument.EnableCache) {\n\n    equalFont = PdfDocument.cache.search(this); // }\n\n    var internals = null; // if (equalFont == null) {\n    // Create font metrics.\n\n    var metrics = PdfStandardFontMetricsFactory.getMetrics(this.pdfFontFamily, this.style, this.size);\n    this.metrics = metrics;\n    internals = this.createInternals();\n    this.setInternals(internals);\n  };\n  /**\n   * `Creates` font`s dictionary.\n   * @private\n   */\n\n\n  PdfStandardFont.prototype.createInternals = function () {\n    var dictionary = new PdfDictionary();\n    dictionary.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.font));\n    dictionary.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.type1));\n    dictionary.items.setValue(this.dictionaryProperties.baseFont, new PdfName(this.metrics.postScriptName));\n\n    if (this.fontFamily !== PdfFontFamily.Symbol && this.fontFamily !== PdfFontFamily.ZapfDingbats) {\n      var encoding = this.encodings[FontEncoding.WinAnsiEncoding];\n      dictionary.items.setValue(this.dictionaryProperties.encoding, new PdfName(encoding));\n    }\n\n    return dictionary;\n  };\n  /**\n   * Returns `width` of the char. This methods doesn`t takes into consideration font`s size.\n   * @private\n   */\n\n\n  PdfStandardFont.prototype.getCharWidthInternal = function (charCode, format) {\n    var width = 0;\n    var code = 0;\n    code = charCode.charCodeAt(0);\n\n    if (this.name === '0' || this.name === '1' || this.name === '2' || this.name === '3' || this.name === '4') {\n      code = code - PdfStandardFont.charOffset;\n    }\n\n    code = code >= 0 && code !== 128 ? code : 0;\n    var metrics = this.metrics;\n    var widthTable = metrics.widthTable;\n    width = widthTable.items(code);\n    return width;\n  };\n  /**\n   * `Converts` the specified text.\n   * @private\n   */\n\n\n  PdfStandardFont.convert = function (text) {\n    return text;\n  }; //Constants\n\n  /**\n   * First character `position`.\n   * @private\n   */\n\n\n  PdfStandardFont.charOffset = 32;\n  return PdfStandardFont;\n}(PdfFont);\n\nexport { PdfStandardFont };","map":null,"metadata":{},"sourceType":"module"}