{"ast":null,"code":"/**\n * PdfPen.ts class for EJ2-PDF\n */\nimport { PdfColor } from './pdf-color';\nimport { PdfSolidBrush } from './brushes/pdf-solid-brush';\nimport { PdfDashStyle, PdfColorSpace } from './enum';\nimport { PdfBrush } from './brushes/pdf-brush';\n/**\n * `PdfPen` class defining settings for drawing operations, that determines the color,\n * width, and style of the drawing elements.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // create a new page\n * let page1 : PdfPage = document.pages.add();\n * // set pen\n * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n * // draw rectangle\n * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));\n * // save the document.\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\n\nvar PdfPen =\n/** @class */\nfunction () {\n  function PdfPen(arg1, arg2) {\n    //Fields\n\n    /**\n     * Specifies the `color of the pen`.\n     * @default new PdfColor()\n     * @private\n     */\n    this.pdfColor = new PdfColor(0, 0, 0);\n    /**\n     * Specifies the `dash offset of the pen`.\n     * @default 0\n     * @private\n     */\n\n    this.dashOffsetValue = 0;\n    /**\n     * Specifies the `dash pattern of the pen`.\n     * @default [0]\n     * @private\n     */\n\n    this.penDashPattern = [0];\n    /**\n     * Specifies the `dash style of the pen`.\n     * @default Solid\n     * @private\n     */\n\n    this.pdfDashStyle = PdfDashStyle.Solid;\n    /**\n     * Specifies the `line cap of the pen`.\n     * @default 0\n     * @private\n     */\n\n    this.pdfLineCap = 0;\n    /**\n     * Specifies the `line join of the pen`.\n     * @default 0\n     * @private\n     */\n\n    this.pdfLineJoin = 0;\n    /**\n     * Specifies the `width of the pen`.\n     * @default 1.0\n     * @private\n     */\n\n    this.penWidth = 1.0;\n    /**\n     * Specifies the `mitter limit of the pen`.\n     * @default 0.0\n     * @private\n     */\n\n    this.internalMiterLimit = 0.0;\n    /**\n     * Stores the `colorspace` value.\n     * @default Rgb\n     * @private\n     */\n\n    this.colorSpace = PdfColorSpace.Rgb;\n\n    if (arg1 instanceof PdfBrush) {\n      this.setBrush(arg1);\n    } else if (arg1 instanceof PdfColor) {\n      this.color = arg1;\n    }\n\n    if (typeof arg2 === 'number') {\n      this.width = arg2;\n    }\n  }\n\n  Object.defineProperty(PdfPen.prototype, \"color\", {\n    //Properties\n\n    /**\n     * Gets or sets the `color of the pen`.\n     * @private\n     */\n    get: function () {\n      return this.pdfColor;\n    },\n    set: function (value) {\n      this.pdfColor = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPen.prototype, \"dashOffset\", {\n    /**\n     * Gets or sets the `dash offset of the pen`.\n     * @private\n     */\n    get: function () {\n      if (typeof this.dashOffsetValue === 'undefined' || this.dashOffsetValue == null) {\n        return 0;\n      } else {\n        return this.dashOffsetValue;\n      }\n    },\n    set: function (value) {\n      this.dashOffsetValue = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPen.prototype, \"dashPattern\", {\n    /**\n     * Gets or sets the `dash pattern of the pen`.\n     * @private\n     */\n    get: function () {\n      return this.penDashPattern;\n    },\n    set: function (value) {\n      this.penDashPattern = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPen.prototype, \"dashStyle\", {\n    /**\n     * Gets or sets the `dash style of the pen`.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // create a new page\n     * let page1 : PdfPage = document.pages.add();\n     * // set pen\n     * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n     * //\n     * // set pen style\n     * pen.dashStyle = PdfDashStyle.DashDot;\n     * // get pen style\n     * let style : PdfDashStyle = pen.dashStyle;\n     * //\n     * // draw rectangle\n     * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));\n     * // save the document.\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this.pdfDashStyle;\n    },\n    set: function (value) {\n      if (this.pdfDashStyle !== value) {\n        this.pdfDashStyle = value;\n\n        switch (this.pdfDashStyle) {\n          case PdfDashStyle.Custom:\n            break;\n\n          case PdfDashStyle.Dash:\n            this.penDashPattern = [3, 1];\n            break;\n\n          case PdfDashStyle.Dot:\n            this.penDashPattern = [1, 1];\n            break;\n\n          case PdfDashStyle.DashDot:\n            this.penDashPattern = [3, 1, 1, 1];\n            break;\n\n          case PdfDashStyle.DashDotDot:\n            this.penDashPattern = [3, 1, 1, 1, 1, 1];\n            break;\n\n          case PdfDashStyle.Solid:\n            break;\n\n          default:\n            this.pdfDashStyle = PdfDashStyle.Solid;\n            this.penDashPattern = [0];\n            break;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPen.prototype, \"lineCap\", {\n    /**\n     * Gets or sets the `line cap of the pen`.\n     * @private\n     */\n    get: function () {\n      return this.pdfLineCap;\n    },\n    set: function (value) {\n      this.pdfLineCap = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPen.prototype, \"lineJoin\", {\n    /**\n     * Gets or sets the `line join style of the pen`.\n     * @private\n     */\n    get: function () {\n      return this.pdfLineJoin;\n    },\n    set: function (value) {\n      this.pdfLineJoin = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPen.prototype, \"miterLimit\", {\n    /**\n     * Gets or sets the `miter limit`.\n     * @private\n     */\n    get: function () {\n      return this.internalMiterLimit;\n    },\n    set: function (value) {\n      this.internalMiterLimit = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPen.prototype, \"width\", {\n    /**\n     * Gets or sets the `width of the pen`.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // create a new page\n     * let page1 : PdfPage = document.pages.add();\n     * // set pen\n     * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n     * //\n     * // set pen width\n     * pen.width = 2;\n     * //\n     * // draw rectangle\n     * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));\n     * // save the document.\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this.penWidth;\n    },\n    set: function (value) {\n      this.penWidth = value;\n    },\n    enumerable: true,\n    configurable: true\n  }); //Helper\n\n  /**\n   * `Clones` this instance of PdfPen class.\n   * @private\n   */\n\n  PdfPen.prototype.clone = function () {\n    var pen = this;\n    return pen;\n  };\n  /**\n   * `Sets the brush`.\n   * @private\n   */\n\n\n  PdfPen.prototype.setBrush = function (brush) {\n    var sBrush = brush;\n\n    if (sBrush != null && sBrush instanceof PdfSolidBrush) {\n      this.color = sBrush.color;\n      this.pdfBrush = sBrush;\n    }\n\n    this.color = sBrush.color;\n    this.pdfBrush = sBrush;\n  };\n  /**\n   * `Monitors the changes`.\n   * @private\n   */\n\n\n  PdfPen.prototype.monitorChanges = function (currentPen, streamWriter, getResources, saveState, currentColorSpace, matrix) {\n    var diff = false;\n    saveState = true;\n\n    if (currentPen == null) {\n      diff = true;\n    }\n\n    diff = this.dashControl(currentPen, saveState, streamWriter);\n    streamWriter.setLineWidth(this.width);\n    streamWriter.setLineJoin(this.lineJoin);\n    streamWriter.setLineCap(this.lineCap);\n    var miterLimit = this.miterLimit;\n\n    if (miterLimit > 0) {\n      streamWriter.setMiterLimit(miterLimit);\n      diff = true;\n    }\n\n    var brush = this.pdfBrush;\n    streamWriter.setColorAndSpace(this.color, currentColorSpace, true);\n    diff = true;\n    return diff;\n  };\n  /**\n   * `Controls the dash style` and behaviour of each line.\n   * @private\n   */\n\n\n  PdfPen.prototype.dashControl = function (pen, saveState, streamWriter) {\n    saveState = true;\n    var lineWidth = this.width;\n    var pattern = this.getPattern();\n    streamWriter.setLineDashPattern(pattern, this.dashOffset * lineWidth);\n    return saveState;\n  };\n  /**\n   * `Gets the pattern` of PdfPen.\n   * @private\n   */\n\n\n  PdfPen.prototype.getPattern = function () {\n    var pattern = this.dashPattern;\n\n    for (var i = 0; i < pattern.length; ++i) {\n      pattern[i] *= this.width;\n    }\n\n    return pattern;\n  };\n\n  return PdfPen;\n}();\n\nexport { PdfPen };","map":null,"metadata":{},"sourceType":"module"}