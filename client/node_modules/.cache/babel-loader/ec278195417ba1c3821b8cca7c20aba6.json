{"ast":null,"code":"import { Browser, EventHandler } from '@syncfusion/ej2-base';\nimport { addClass, removeClass } from '@syncfusion/ej2-base';\nimport { formatUnit, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { getScrollBarWidth, getUpdateUsingRaf } from '../base/util';\nimport { scroll, contentReady, uiUpdate, onEmpty, headerRefreshed, textWrapRefresh, virtualScrollEdit, infiniteScrollHandler, closeFilterDialog } from '../base/constant';\nimport { ColumnWidthService } from '../services/width-controller';\n/**\n * The `Scroll` module is used to handle scrolling behaviour.\n */\n\nvar Scroll =\n/** @class */\nfunction () {\n  /**\n   * Constructor for the Grid scrolling.\n   * @hidden\n   */\n  function Scroll(parent) {\n    this.lastScrollTop = 0; //To maintain scroll state on grid actions.\n\n    this.previousValues = {\n      top: 0,\n      left: 0\n    };\n    this.oneTimeReady = true;\n    this.parent = parent;\n    this.widthService = new ColumnWidthService(parent);\n    this.addEventListener();\n  }\n  /**\n   * For internal use only - Get the module name.\n   * @private\n   */\n\n\n  Scroll.prototype.getModuleName = function () {\n    return 'scroll';\n  };\n  /**\n   * @hidden\n   */\n\n\n  Scroll.prototype.setWidth = function (uiupdate) {\n    this.parent.element.style.width = formatUnit(this.parent.width);\n\n    if (uiupdate) {\n      this.widthService.setWidthToColumns();\n    }\n\n    if (this.parent.toolbarModule && this.parent.toolbarModule.toolbar && this.parent.toolbarModule.toolbar.element) {\n      this.parent.toolbarModule.toolbar.refreshOverflow();\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  Scroll.prototype.setHeight = function () {\n    var mHdrHeight = 0;\n    var content = this.parent.getContent().querySelector('.e-content');\n\n    if (!this.parent.enableVirtualization && this.parent.frozenRows && this.parent.height !== 'auto') {\n      var tbody = this.parent.getHeaderContent().querySelector('tbody');\n      mHdrHeight = tbody ? tbody.offsetHeight : 0;\n      content.style.height = formatUnit(this.parent.height - mHdrHeight);\n    } else {\n      content.style.height = formatUnit(this.parent.height);\n    }\n\n    this.ensureOverflow(content);\n  };\n  /**\n   * @hidden\n   */\n\n\n  Scroll.prototype.setPadding = function () {\n    var content = this.parent.getHeaderContent();\n    var scrollWidth = Scroll.getScrollBarWidth() - this.getThreshold();\n    var cssProps = this.getCssProperties();\n    content.querySelector('.e-headercontent').style[cssProps.border] = scrollWidth > 0 ? '1px' : '0px';\n    content.style[cssProps.padding] = scrollWidth > 0 ? scrollWidth + 'px' : '0px';\n  };\n  /**\n   * @hidden\n   */\n\n\n  Scroll.prototype.removePadding = function (rtl) {\n    var cssProps = this.getCssProperties(rtl);\n    var hDiv = this.parent.getHeaderContent().querySelector('.e-headercontent');\n    hDiv.style[cssProps.border] = '';\n    hDiv.parentElement.style[cssProps.padding] = '';\n    var footerDiv = this.parent.getFooterContent();\n\n    if (footerDiv && footerDiv.classList.contains('e-footerpadding')) {\n      footerDiv.classList.remove('e-footerpadding');\n    }\n  };\n  /**\n   * Refresh makes the Grid adoptable with the height of parent container.\n   *\n   * > The [`height`](grid/#height/) must be set to 100%.\n   * @return\n   */\n\n\n  Scroll.prototype.refresh = function () {\n    if (this.parent.height !== '100%') {\n      return;\n    }\n\n    var content = this.parent.getContent();\n    this.parent.element.style.height = '100%';\n    var height = this.widthService.getSiblingsHeight(content);\n    content.style.height = 'calc(100% - ' + height + 'px)'; //Set the height to the '.e-gridcontent';\n  };\n\n  Scroll.prototype.getThreshold = function () {\n    /* Some browsers places the scroller outside the content,\n     * hence the padding should be adjusted.*/\n    var appName = Browser.info.name;\n\n    if (appName === 'mozilla') {\n      return 0.5;\n    }\n\n    return 1;\n  };\n  /**\n   * @hidden\n   */\n\n\n  Scroll.prototype.addEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.on(onEmpty, this.wireEvents, this);\n    this.parent.on(contentReady, this.wireEvents, this);\n    this.parent.on(uiUpdate, this.onPropertyChanged, this);\n    this.parent.on(textWrapRefresh, this.wireEvents, this);\n    this.parent.on(headerRefreshed, this.setScrollLeft, this);\n  };\n  /**\n   * @hidden\n   */\n\n\n  Scroll.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(onEmpty, this.wireEvents);\n    this.parent.off(contentReady, this.wireEvents);\n    this.parent.off(uiUpdate, this.onPropertyChanged);\n    this.parent.off(textWrapRefresh, this.wireEvents);\n    this.parent.off(headerRefreshed, this.setScrollLeft);\n  };\n\n  Scroll.prototype.setScrollLeft = function () {\n    if (this.parent.frozenColumns) {\n      this.parent.headerModule.getMovableHeader().scrollLeft = this.previousValues.left;\n    }\n  };\n\n  Scroll.prototype.onContentScroll = function (scrollTarget) {\n    var _this = this;\n\n    var element = scrollTarget;\n    var isHeader = element.classList.contains('e-headercontent');\n    return function (e) {\n      if (_this.content.querySelector('tbody') === null || _this.parent.isPreventScrollEvent) {\n        return;\n      }\n\n      if (!isNullOrUndefined(_this.parent.infiniteScrollModule) && _this.parent.enableInfiniteScrolling) {\n        _this.parent.notify(infiniteScrollHandler, e);\n      }\n\n      _this.parent.notify(virtualScrollEdit, {});\n\n      var target = e.target;\n      var left = target.scrollLeft;\n      var sLimit = target.scrollWidth;\n      var isFooter = target.classList.contains('e-summarycontent');\n\n      if (_this.previousValues.left === left) {\n        _this.previousValues.top = !isHeader ? _this.previousValues.top : target.scrollTop;\n        return;\n      }\n\n      _this.parent.notify(closeFilterDialog, e);\n\n      element.scrollLeft = left;\n\n      if (isFooter) {\n        _this.header.scrollLeft = left;\n      }\n\n      _this.previousValues.left = left;\n\n      _this.parent.notify(scroll, {\n        left: left\n      });\n    };\n  };\n\n  Scroll.prototype.onFreezeContentScroll = function (scrollTarget) {\n    var _this = this;\n\n    var element = scrollTarget;\n    return function (e) {\n      if (_this.content.querySelector('tbody') === null) {\n        return;\n      }\n\n      var target = e.target;\n      var top = target.scrollTop;\n\n      if (_this.previousValues.top === top) {\n        return;\n      }\n\n      element.scrollTop = top;\n      _this.previousValues.top = top;\n\n      if (_this.parent.isDestroyed) {\n        return;\n      }\n    };\n  };\n\n  Scroll.prototype.onWheelScroll = function (scrollTarget) {\n    var _this = this;\n\n    var element = scrollTarget;\n    return function (e) {\n      if (_this.content.querySelector('tbody') === null) {\n        return;\n      }\n\n      var top = element.scrollTop + (e.deltaMode === 1 ? e.deltaY * 30 : e.deltaY);\n\n      if (_this.previousValues.top === top) {\n        return;\n      }\n\n      e.preventDefault();\n      _this.parent.getContent().querySelector('.e-frozencontent').scrollTop = top;\n      element.scrollTop = top;\n      _this.previousValues.top = top;\n    };\n  };\n\n  Scroll.prototype.onTouchScroll = function (scrollTarget) {\n    var _this = this;\n\n    var element = scrollTarget;\n    return function (e) {\n      if (e.pointerType === 'mouse') {\n        return;\n      }\n\n      var cont;\n      var mHdr;\n\n      var pageXY = _this.getPointXY(e);\n\n      var top = element.scrollTop + (_this.pageXY.y - pageXY.y);\n      var left = element.scrollLeft + (_this.pageXY.x - pageXY.x);\n\n      if (_this.parent.getHeaderContent().contains(e.target)) {\n        mHdr = _this.parent.getFrozenColumns() ? _this.parent.getHeaderContent().querySelector('.e-movableheader') : _this.parent.getHeaderContent().querySelector('.e-headercontent');\n\n        if (_this.previousValues.left === left || left < 0 || mHdr.scrollWidth - mHdr.clientWidth < left) {\n          return;\n        }\n\n        e.preventDefault();\n        mHdr.scrollLeft = left;\n        element.scrollLeft = left;\n        _this.pageXY.x = pageXY.x;\n        _this.previousValues.left = left;\n      } else {\n        cont = _this.parent.getContent().querySelector('.e-frozencontent');\n\n        if (_this.previousValues.top === top && (top < 0 || cont.scrollHeight - cont.clientHeight < top) || top < 0 || cont.scrollHeight - cont.clientHeight < top) {\n          return;\n        }\n\n        e.preventDefault();\n        cont.scrollTop = top;\n        element.scrollTop = top;\n        _this.pageXY.y = pageXY.y;\n        _this.previousValues.top = top;\n      }\n    };\n  };\n\n  Scroll.prototype.setPageXY = function () {\n    var _this = this;\n\n    return function (e) {\n      if (e.pointerType === 'mouse') {\n        return;\n      }\n\n      _this.pageXY = _this.getPointXY(e);\n    };\n  };\n\n  Scroll.prototype.getPointXY = function (e) {\n    var pageXY = {\n      x: 0,\n      y: 0\n    };\n\n    if (e.touches && e.touches.length) {\n      pageXY.x = e.touches[0].pageX;\n      pageXY.y = e.touches[0].pageY;\n    } else {\n      pageXY.x = e.pageX;\n      pageXY.y = e.pageY;\n    }\n\n    return pageXY;\n  };\n\n  Scroll.prototype.wireEvents = function () {\n    var _this = this;\n\n    if (this.oneTimeReady) {\n      var frzCols = this.parent.getFrozenColumns();\n      this.content = this.parent.getContent().querySelector('.e-content');\n      this.header = this.parent.getHeaderContent().querySelector('.e-headercontent');\n      var mCont = this.content.querySelector('.e-movablecontent');\n      var fCont = this.content.querySelector('.e-frozencontent');\n      var mHdr = this.header.querySelector('.e-movableheader');\n\n      if (this.parent.frozenRows) {\n        EventHandler.add(frzCols ? mHdr : this.header, 'touchstart pointerdown', this.setPageXY(), this);\n        EventHandler.add(frzCols ? mHdr : this.header, 'touchmove pointermove', this.onTouchScroll(frzCols ? mCont : this.content), this);\n      }\n\n      if (frzCols) {\n        EventHandler.add(mCont, 'scroll', this.onContentScroll(mHdr), this);\n        EventHandler.add(mCont, 'scroll', this.onFreezeContentScroll(fCont), this);\n        EventHandler.add(fCont, 'scroll', this.onFreezeContentScroll(mCont), this);\n        EventHandler.add(mHdr, 'scroll', this.onContentScroll(mCont), this);\n        EventHandler.add(fCont, 'wheel', this.onWheelScroll(mCont), this);\n        EventHandler.add(fCont, 'touchstart pointerdown', this.setPageXY(), this);\n        EventHandler.add(fCont, 'touchmove pointermove', this.onTouchScroll(mCont), this);\n      } else {\n        EventHandler.add(this.content, 'scroll', this.onContentScroll(this.header), this);\n        EventHandler.add(this.header, 'scroll', this.onContentScroll(this.content), this);\n      }\n\n      if (this.parent.aggregates.length) {\n        EventHandler.add(this.parent.getFooterContent().firstChild, 'scroll', this.onContentScroll(this.content), this);\n      }\n\n      this.refresh();\n      this.oneTimeReady = false;\n    }\n\n    var table = this.parent.getContentTable();\n    var sLeft;\n    var sHeight;\n    var clientHeight;\n    getUpdateUsingRaf(function () {\n      sLeft = _this.header.scrollLeft;\n      sHeight = table.scrollHeight;\n      clientHeight = _this.parent.getContent().clientHeight;\n    }, function () {\n      if (!_this.parent.enableVirtualization) {\n        if (sHeight < clientHeight) {\n          addClass(table.querySelectorAll('tr:last-child td'), 'e-lastrowcell');\n\n          if (_this.parent.getFrozenColumns()) {\n            addClass(_this.parent.getContent().querySelector('.e-movablecontent').querySelectorAll('tr:last-child td'), 'e-lastrowcell');\n          }\n        }\n\n        if ((_this.parent.frozenRows > 0 || _this.parent.frozenColumns > 0) && _this.header.querySelector('.e-movableheader')) {\n          _this.header.querySelector('.e-movableheader').scrollLeft = _this.previousValues.left;\n        } else {\n          _this.header.scrollLeft = _this.previousValues.left;\n        }\n\n        _this.content.scrollLeft = _this.previousValues.left;\n        _this.content.scrollTop = _this.previousValues.top;\n      }\n\n      if (!_this.parent.enableColumnVirtualization) {\n        _this.content.scrollLeft = sLeft;\n      }\n\n      if (_this.parent.frozenColumns && _this.header.querySelector('.e-movableheader')) {\n        _this.header.querySelector('.e-movableheader').scrollLeft = _this.content.querySelector('.e-movablecontent').scrollLeft;\n      }\n    });\n    this.parent.isPreventScrollEvent = false;\n  };\n  /**\n   * @hidden\n   */\n\n\n  Scroll.prototype.getCssProperties = function (rtl) {\n    var css = {};\n    var enableRtl = isNullOrUndefined(rtl) ? this.parent.enableRtl : rtl;\n    css.border = enableRtl ? 'borderLeftWidth' : 'borderRightWidth';\n    css.padding = enableRtl ? 'paddingLeft' : 'paddingRight';\n    return css;\n  };\n\n  Scroll.prototype.ensureOverflow = function (content) {\n    if (this.parent.getFrozenColumns()) {\n      content.querySelector('.e-movablecontent').style.overflowY = this.parent.height === 'auto' ? 'auto' : 'scroll';\n\n      if (content.querySelector('.e-movablecontent').style.overflowY === 'scroll') {\n        this.setPadding();\n      }\n    } else {\n      content.style.overflowY = this.parent.height === 'auto' ? 'auto' : 'scroll';\n    }\n  };\n\n  Scroll.prototype.onPropertyChanged = function (e) {\n    if (e.module !== this.getModuleName()) {\n      return;\n    }\n\n    this.setPadding();\n    this.oneTimeReady = true;\n\n    if (this.parent.height === 'auto') {\n      this.removePadding();\n    }\n\n    this.wireEvents();\n    this.setHeight();\n    var width = 'width';\n    this.setWidth(!isNullOrUndefined(e.properties[width]));\n  };\n  /**\n   * @hidden\n   */\n\n\n  Scroll.prototype.destroy = function () {\n    var gridElement = this.parent.element;\n\n    if (!gridElement || !gridElement.querySelector('.e-gridheader') && !gridElement.querySelector('.e-gridcontent')) {\n      return;\n    }\n\n    this.removeEventListener(); //Remove padding\n\n    this.removePadding();\n    var cont = this.parent.getContent().querySelector('.e-content');\n    removeClass([this.parent.getHeaderContent().querySelector('.e-headercontent')], 'e-headercontent');\n    removeClass([cont], 'e-content'); //Remove height\n\n    cont.style.height = ''; //Remove width\n\n    this.parent.element.style.width = ''; //Remove Dom event\n\n    EventHandler.remove(cont, 'scroll', this.onContentScroll);\n  };\n  /**\n   * Function to get the scrollbar width of the browser.\n   * @return {number}\n   * @hidden\n   */\n\n\n  Scroll.getScrollBarWidth = function () {\n    return getScrollBarWidth();\n  };\n\n  return Scroll;\n}();\n\nexport { Scroll };","map":null,"metadata":{},"sourceType":"module"}