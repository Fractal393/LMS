{"ast":null,"code":"import { StreamWriter } from '@syncfusion/ej2-file-utils';\nimport { Encoding } from '@syncfusion/ej2-file-utils';\nimport { PdfDocument } from './pdf-document';\n/**\n * `PdfDocumentBase` class represent common properties of PdfDocument classes.\n * @private\n */\n\nvar PdfDocumentBase =\n/** @class */\nfunction () {\n  function PdfDocumentBase(document) {\n    /**\n     * If the stream is copied,  then it specifies true.\n     * @private\n     */\n    this.isStreamCopied = false;\n\n    if (document instanceof PdfDocument) {\n      this.document = document;\n    }\n  }\n\n  Object.defineProperty(PdfDocumentBase.prototype, \"pdfObjects\", {\n    //Prpperties\n\n    /**\n     * Gets the `PDF objects` collection, which stores all objects and references to it..\n     * @private\n     */\n    get: function () {\n      return this.objects;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfDocumentBase.prototype, \"crossTable\", {\n    /**\n     * Gets the `cross-reference` table.\n     * @private\n     */\n    get: function () {\n      return this.pdfCrossTable;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfDocumentBase.prototype, \"currentSavingObj\", {\n    /**\n     * Gets or sets the current saving `object number`.\n     * @private\n     */\n    get: function () {\n      return this.currentSavingObject;\n    },\n    set: function (value) {\n      this.currentSavingObject = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfDocumentBase.prototype, \"catalog\", {\n    /**\n     * Gets the PDF document `catalog`.\n     * @private\n     */\n    get: function () {\n      return this.pdfCatalog;\n    },\n    set: function (value) {\n      this.pdfCatalog = value;\n    },\n    enumerable: true,\n    configurable: true\n  }); //Public methods\n\n  /**\n   * Sets the `main object collection`.\n   * @private\n   */\n\n  PdfDocumentBase.prototype.setMainObjectCollection = function (mainObjectCollection) {\n    this.objects = mainObjectCollection;\n  };\n  /**\n   * Sets the `cross table`.\n   * @private\n   */\n\n\n  PdfDocumentBase.prototype.setCrossTable = function (cTable) {\n    this.pdfCrossTable = cTable;\n  };\n  /**\n   * Sets the `catalog`.\n   * @private\n   */\n\n\n  PdfDocumentBase.prototype.setCatalog = function (catalog) {\n    this.pdfCatalog = catalog;\n  };\n\n  PdfDocumentBase.prototype.save = function (filename) {\n    var _this = this;\n\n    var encoding = new Encoding(true);\n    var SW = new StreamWriter(encoding);\n\n    if (typeof filename === 'undefined') {\n      var encoding_1 = new Encoding(true);\n      var SW_1 = new StreamWriter(encoding_1);\n      return new Promise(function (resolve, reject) {\n        /* tslint:disable-next-line:no-any */\n        var obj = {};\n        obj.blobData = new Blob([_this.document.docSave(SW_1, true)], {\n          type: 'application/pdf'\n        });\n        resolve(obj);\n      });\n    } else {\n      this.document.docSave(SW, filename, true);\n    }\n  };\n  /**\n   * `Clone` of parent object - PdfDocument.\n   * @private\n   */\n\n\n  PdfDocumentBase.prototype.clone = function () {\n    return this.document;\n  };\n\n  return PdfDocumentBase;\n}();\n\nexport { PdfDocumentBase };","map":null,"metadata":{},"sourceType":"module"}