{"ast":null,"code":"/**\r\n * DevExtreme (ui/calendar/ui.calendar.views.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _uiCalendar = require(\"./ui.calendar.base_view\");\n\nvar _uiCalendar2 = _interopRequireDefault(_uiCalendar);\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _date = require(\"../../core/utils/date\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _date2 = require(\"../../localization/date\");\n\nvar _date_serialization = require(\"../../core/utils/date_serialization\");\n\nvar _type = require(\"../../core/utils/type\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar CALENDAR_OTHER_MONTH_CLASS = \"dx-calendar-other-month\";\nvar CALENDAR_OTHER_VIEW_CLASS = \"dx-calendar-other-view\";\nvar Views = {\n  month: _uiCalendar2.default.inherit({\n    _getViewName: function () {\n      return \"month\";\n    },\n    _getDefaultOptions: function () {\n      return (0, _extend.extend)(this.callBase(), {\n        firstDayOfWeek: void 0,\n        rowCount: 6,\n        colCount: 7\n      });\n    },\n    _renderImpl: function () {\n      this.callBase();\n\n      this._renderHeader();\n    },\n    _renderBody: function () {\n      this.callBase();\n\n      this._$table.find(\".\".concat(CALENDAR_OTHER_VIEW_CLASS)).addClass(CALENDAR_OTHER_MONTH_CLASS);\n    },\n    _renderFocusTarget: _common.noop,\n    getCellAriaLabel: function (date) {\n      return (0, _date2.format)(date, \"longdate\");\n    },\n    _renderHeader: function () {\n      var $headerRow = (0, _renderer2.default)(\"<tr>\");\n      var $header = (0, _renderer2.default)(\"<thead>\").append($headerRow);\n\n      this._$table.prepend($header);\n\n      for (var colIndex = 0, colCount = this.option(\"colCount\"); colIndex < colCount; colIndex++) {\n        this._renderHeaderCell(colIndex, $headerRow);\n      }\n    },\n    _renderHeaderCell: function (cellIndex, $headerRow) {\n      var _this$_getDayCaption = this._getDayCaption(this._getFirstDayOfWeek() + cellIndex),\n          fullCaption = _this$_getDayCaption.full,\n          abbrCaption = _this$_getDayCaption.abbreviated;\n\n      var $cell = (0, _renderer2.default)(\"<th>\").attr({\n        scope: \"col\",\n        abbr: fullCaption\n      }).text(abbrCaption);\n\n      this._appendCell($headerRow, $cell);\n    },\n    getNavigatorCaption: function () {\n      return (0, _date2.format)(this.option(\"date\"), \"monthandyear\");\n    },\n    _isTodayCell: function (cellDate) {\n      var today = new Date();\n      return (0, _date.sameDate)(cellDate, today);\n    },\n    _isDateOutOfRange: function (cellDate) {\n      var minDate = this.option(\"min\");\n      var maxDate = this.option(\"max\");\n      return !(0, _date.dateInRange)(cellDate, minDate, maxDate, \"date\");\n    },\n    _isOtherView: function (cellDate) {\n      return cellDate.getMonth() !== this.option(\"date\").getMonth();\n    },\n    _getCellText: function (cellDate) {\n      return (0, _date2.format)(cellDate, \"d\");\n    },\n    _getDayCaption: function (day) {\n      var daysInWeek = this.option(\"colCount\");\n      var dayIndex = day % daysInWeek;\n      return {\n        full: (0, _date2.getDayNames)()[dayIndex],\n        abbreviated: (0, _date2.getDayNames)(\"abbreviated\")[dayIndex]\n      };\n    },\n    _getFirstCellData: function () {\n      var firstDay = (0, _date.getFirstMonthDate)(this.option(\"date\"));\n      var firstMonthDayOffset = this._getFirstDayOfWeek() - firstDay.getDay();\n      var daysInWeek = this.option(\"colCount\");\n\n      if (firstMonthDayOffset >= 0) {\n        firstMonthDayOffset -= daysInWeek;\n      }\n\n      firstDay.setDate(firstDay.getDate() + firstMonthDayOffset);\n      return firstDay;\n    },\n    _getNextCellData: function (date) {\n      date = new Date(date);\n      date.setDate(date.getDate() + 1);\n      return date;\n    },\n    _getFirstDayOfWeek: function () {\n      return (0, _type.isDefined)(this.option(\"firstDayOfWeek\")) ? this.option(\"firstDayOfWeek\") : (0, _date2.firstDayOfWeekIndex)();\n    },\n    _getCellByDate: function (date) {\n      return this._$table.find(\"td[data-value='\".concat((0, _date_serialization.serializeDate)(date, (0, _date.getShortDateFormat)()), \"']\"));\n    },\n    isBoundary: function (date) {\n      return (0, _date.sameMonthAndYear)(date, this.option(\"min\")) || (0, _date.sameMonthAndYear)(date, this.option(\"max\"));\n    },\n    _getDefaultDisabledDatesHandler: function (disabledDates) {\n      return function (args) {\n        var isDisabledDate = disabledDates.some(function (item) {\n          return (0, _date.sameDate)(item, args.date);\n        });\n\n        if (isDisabledDate) {\n          return true;\n        }\n      };\n    }\n  }),\n  year: _uiCalendar2.default.inherit({\n    _getViewName: function () {\n      return \"year\";\n    },\n    _isTodayCell: function (cellDate) {\n      return (0, _date.sameMonthAndYear)(cellDate, new Date());\n    },\n    _isDateOutOfRange: function (cellDate) {\n      return !(0, _date.dateInRange)(cellDate, (0, _date.getFirstMonthDate)(this.option(\"min\")), (0, _date.getLastMonthDate)(this.option(\"max\")));\n    },\n    _isOtherView: function () {\n      return false;\n    },\n    _getCellText: function (cellDate) {\n      return (0, _date2.getMonthNames)(\"abbreviated\")[cellDate.getMonth()];\n    },\n    _getFirstCellData: function () {\n      var data = new Date(this.option(\"date\"));\n      data.setDate(1);\n      data.setMonth(0);\n      return data;\n    },\n    _getNextCellData: function (date) {\n      date = new Date(date);\n      date.setMonth(date.getMonth() + 1);\n      return date;\n    },\n    _getCellByDate: function (date) {\n      var foundDate = new Date(date);\n      foundDate.setDate(1);\n      return this._$table.find(\"td[data-value='\".concat((0, _date_serialization.serializeDate)(foundDate, (0, _date.getShortDateFormat)()), \"']\"));\n    },\n    getCellAriaLabel: function (date) {\n      return (0, _date2.format)(date, \"monthandyear\");\n    },\n    getNavigatorCaption: function () {\n      return (0, _date2.format)(this.option(\"date\"), \"yyyy\");\n    },\n    isBoundary: function (date) {\n      return (0, _date.sameYear)(date, this.option(\"min\")) || (0, _date.sameYear)(date, this.option(\"max\"));\n    }\n  }),\n  decade: _uiCalendar2.default.inherit({\n    _getViewName: function () {\n      return \"decade\";\n    },\n    _isTodayCell: function (cellDate) {\n      return (0, _date.sameYear)(cellDate, new Date());\n    },\n    _isDateOutOfRange: function (cellDate) {\n      var min = this.option(\"min\");\n      var max = this.option(\"max\");\n      return !(0, _date.dateInRange)(cellDate.getFullYear(), min && min.getFullYear(), max && max.getFullYear());\n    },\n    _isOtherView: function (cellDate) {\n      var date = new Date(cellDate);\n      date.setMonth(1);\n      return !(0, _date.sameDecade)(date, this.option(\"date\"));\n    },\n    _getCellText: function (cellDate) {\n      return (0, _date2.format)(cellDate, \"yyyy\");\n    },\n    _getFirstCellData: function () {\n      var year = (0, _date.getFirstYearInDecade)(this.option(\"date\")) - 1;\n      return new Date(year, 0, 1);\n    },\n    _getNextCellData: function (date) {\n      date = new Date(date);\n      date.setFullYear(date.getFullYear() + 1);\n      return date;\n    },\n    getNavigatorCaption: function () {\n      var currentDate = this.option(\"date\");\n      var firstYearInDecade = (0, _date.getFirstYearInDecade)(currentDate);\n      var startDate = new Date(currentDate);\n      var endDate = new Date(currentDate);\n      startDate.setFullYear(firstYearInDecade);\n      endDate.setFullYear(firstYearInDecade + 9);\n      return (0, _date2.format)(startDate, \"yyyy\") + \"-\" + (0, _date2.format)(endDate, \"yyyy\");\n    },\n    _isValueOnCurrentView: function (currentDate, value) {\n      return (0, _date.sameDecade)(currentDate, value);\n    },\n    _getCellByDate: function (date) {\n      var foundDate = new Date(date);\n      foundDate.setDate(1);\n      foundDate.setMonth(0);\n      return this._$table.find(\"td[data-value='\".concat((0, _date_serialization.serializeDate)(foundDate, (0, _date.getShortDateFormat)()), \"']\"));\n    },\n    isBoundary: function (date) {\n      return (0, _date.sameDecade)(date, this.option(\"min\")) || (0, _date.sameDecade)(date, this.option(\"max\"));\n    }\n  }),\n  century: _uiCalendar2.default.inherit({\n    _getViewName: function () {\n      return \"century\";\n    },\n    _isTodayCell: function (cellDate) {\n      return (0, _date.sameDecade)(cellDate, new Date());\n    },\n    _isDateOutOfRange: function (cellDate) {\n      var decade = (0, _date.getFirstYearInDecade)(cellDate);\n      var minDecade = (0, _date.getFirstYearInDecade)(this.option(\"min\"));\n      var maxDecade = (0, _date.getFirstYearInDecade)(this.option(\"max\"));\n      return !(0, _date.dateInRange)(decade, minDecade, maxDecade);\n    },\n    _isOtherView: function (cellDate) {\n      var date = new Date(cellDate);\n      date.setMonth(1);\n      return !(0, _date.sameCentury)(date, this.option(\"date\"));\n    },\n    _getCellText: function (cellDate) {\n      var startDate = (0, _date2.format)(cellDate, \"yyyy\");\n      var endDate = new Date(cellDate);\n      endDate.setFullYear(endDate.getFullYear() + 9);\n      return startDate + \" - \" + (0, _date2.format)(endDate, \"yyyy\");\n    },\n    _getFirstCellData: function () {\n      var decade = (0, _date.getFirstDecadeInCentury)(this.option(\"date\")) - 10;\n      return new Date(decade, 0, 1);\n    },\n    _getNextCellData: function (date) {\n      date = new Date(date);\n      date.setFullYear(date.getFullYear() + 10);\n      return date;\n    },\n    _getCellByDate: function (date) {\n      var foundDate = new Date(date);\n      foundDate.setDate(1);\n      foundDate.setMonth(0);\n      foundDate.setFullYear((0, _date.getFirstYearInDecade)(foundDate));\n      return this._$table.find(\"td[data-value='\".concat((0, _date_serialization.serializeDate)(foundDate, (0, _date.getShortDateFormat)()), \"']\"));\n    },\n    getNavigatorCaption: function () {\n      var currentDate = this.option(\"date\");\n      var firstDecadeInCentury = (0, _date.getFirstDecadeInCentury)(currentDate);\n      var startDate = new Date(currentDate);\n      var endDate = new Date(currentDate);\n      startDate.setFullYear(firstDecadeInCentury);\n      endDate.setFullYear(firstDecadeInCentury + 99);\n      return (0, _date2.format)(startDate, \"yyyy\") + \"-\" + (0, _date2.format)(endDate, \"yyyy\");\n    },\n    isBoundary: function (date) {\n      return (0, _date.sameCentury)(date, this.option(\"min\")) || (0, _date.sameCentury)(date, this.option(\"max\"));\n    }\n  })\n};\nmodule.exports = Views;","map":null,"metadata":{},"sourceType":"script"}