{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FileHelper = void 0;\n\nvar dateformat_1 = __importDefault(require(\"dateformat\"));\n\nvar filesize_1 = __importDefault(require(\"filesize\"));\n\nvar FileHelper =\n/** @class */\nfunction () {\n  function FileHelper() {}\n\n  FileHelper.isDirectory = function (file) {\n    // Not a directory by default\n    return !!file && file.isDir === true;\n  };\n\n  FileHelper.isHidden = function (file) {\n    // Not hidden by default\n    return !!file && file.isHidden === true;\n  };\n\n  FileHelper.isSymlink = function (file) {\n    // Not a symlink by default\n    return !!file && file.isSymlink === true;\n  };\n\n  FileHelper.isClickable = function (file) {\n    // Clickable by default\n    return !!file;\n  };\n\n  FileHelper.isOpenable = function (file) {\n    // Openable by default\n    return !!file && file.openable !== false;\n  };\n\n  FileHelper.isSelectable = function (file) {\n    // Selectable by default\n    return !!file && file.selectable !== false;\n  };\n\n  FileHelper.isDraggable = function (file) {\n    // File & folders are draggable by default, `null` is not\n    return !!file && file.draggable !== false;\n  };\n\n  FileHelper.isDroppable = function (file) {\n    // Folders are droppable by default, files are not\n    if (!file) return false;\n    if (file.isDir && file.droppable !== false) return true;\n    return file.droppable === true;\n  };\n\n  FileHelper.getReadableFileSize = function (file) {\n    if (!file || typeof file.size !== 'number') return null;\n    var size = file.size;\n    var sizeData = filesize_1.default(size, {\n      bits: false,\n      output: 'object'\n    });\n\n    if (sizeData.symbol === 'B') {\n      return Math.round(sizeData.value / 10) / 100.0 + \" KB\";\n    } else if (sizeData.symbol === 'KB') {\n      return Math.round(sizeData.value) + \" \" + sizeData.symbol;\n    }\n\n    return sizeData.value + \" \" + sizeData.symbol;\n  };\n\n  FileHelper.getReadableDate = function (file) {\n    if (!file || !(file.modDate instanceof Date || typeof file.modDate === 'string')) {\n      return null;\n    } // Convert string date into a date object\n\n\n    var date = file.modDate;\n\n    if (typeof date === 'string') {\n      date = new Date(date);\n    } // Confirm that we have a valid date\n\n\n    if (isNaN(date.getTime())) return null;\n    var currentYear = date.getFullYear() === new Date().getFullYear();\n    if (currentYear) return dateformat_1.default(date, 'd mmmm, HH:MM');\n    return dateformat_1.default(date, 'd mmm yyyy, HH:MM');\n  };\n\n  FileHelper.getChildrenCount = function (file) {\n    if (!file || typeof file.childrenCount !== 'number') return null;\n    return file.childrenCount;\n  };\n\n  return FileHelper;\n}();\n\nexports.FileHelper = FileHelper;","map":null,"metadata":{},"sourceType":"script"}