{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { remove, addClass, isNullOrUndefined, isBlazor } from '@syncfusion/ej2-base';\nimport { HeaderRender } from './header-renderer';\nimport { ContentRender } from './content-renderer';\nimport { FreezeRowModelGenerator } from '../services/freeze-row-model-generator';\nimport * as events from '../base/constant';\nimport { renderMovable, getScrollBarWidth, wrap } from '../base/util';\nimport { Input } from '@syncfusion/ej2-inputs';\n/**\n * Freeze module is used to render grid content with frozen rows and columns\n * @hidden\n */\n\nvar FreezeContentRender =\n/** @class */\nfunction (_super) {\n  __extends(FreezeContentRender, _super);\n\n  function FreezeContentRender(parent, locator) {\n    return _super.call(this, parent, locator) || this;\n  }\n\n  FreezeContentRender.prototype.renderPanel = function () {\n    _super.prototype.renderPanel.call(this);\n\n    var fDiv = this.parent.element.querySelector('.e-frozencontent');\n    var mDiv = this.parent.element.querySelector('.e-movablecontent');\n\n    if (isNullOrUndefined(fDiv)) {\n      fDiv = this.parent.createElement('div', {\n        className: 'e-frozencontent'\n      });\n      mDiv = this.parent.createElement('div', {\n        className: 'e-movablecontent'\n      });\n      this.getPanel().querySelector('.e-content').appendChild(fDiv);\n      this.getPanel().querySelector('.e-content').appendChild(mDiv);\n    }\n\n    this.setFrozenContent(fDiv);\n    this.setMovableContent(mDiv);\n  };\n\n  FreezeContentRender.prototype.renderEmpty = function (tbody) {\n    if (isBlazor() && !this.parent.isJsComponent) {\n      return;\n    }\n\n    _super.prototype.renderEmpty.call(this, tbody);\n\n    this.getMovableContent().querySelector('tbody').innerHTML = '<tr><td></td></tr>';\n    addClass([this.getMovableContent().querySelector('tbody').querySelector('tr')], ['e-emptyrow']);\n    this.getFrozenContent().querySelector('.e-emptyrow').querySelector('td').colSpan = this.parent.getFrozenColumns();\n    this.getFrozenContent().style.borderRightWidth = '0px';\n\n    if (this.parent.frozenRows) {\n      this.parent.getHeaderContent().querySelector('.e-frozenheader').querySelector('tbody').innerHTML = '';\n      this.parent.getHeaderContent().querySelector('.e-movableheader').querySelector('tbody').innerHTML = '';\n    }\n  };\n\n  FreezeContentRender.prototype.setFrozenContent = function (ele) {\n    this.frozenContent = ele;\n  };\n\n  FreezeContentRender.prototype.setMovableContent = function (ele) {\n    this.movableContent = ele;\n  };\n\n  FreezeContentRender.prototype.getFrozenContent = function () {\n    return this.frozenContent;\n  };\n\n  FreezeContentRender.prototype.getMovableContent = function () {\n    return this.movableContent;\n  };\n\n  FreezeContentRender.prototype.getModelGenerator = function () {\n    return new FreezeRowModelGenerator(this.parent);\n  };\n\n  FreezeContentRender.prototype.renderTable = function () {\n    var mTbl;\n\n    if (this.getFrozenContent().querySelector('.e-table') == null) {\n      _super.prototype.renderTable.call(this);\n\n      this.getFrozenContent().appendChild(this.getTable());\n      mTbl = this.getTable().cloneNode(true);\n      this.getMovableContent().appendChild(mTbl);\n    } else {\n      this.setTable(this.getFrozenContent().querySelector('.e-table'));\n      this.setColGroup(this.parent.element.querySelector('.e-gridheader').querySelector('colgroup').cloneNode(true));\n      this.getFrozenContent().querySelector('.e-table').appendChild(this.getColGroup());\n      mTbl = this.getMovableContent().querySelector('.e-table');\n\n      if (this.parent.frozenRows) {\n        this.parent.getHeaderContent().classList.add('e-frozenhdrcont');\n      }\n    }\n\n    if (this.getMovableContent().querySelector('colgroup')) {\n      remove(this.getMovableContent().querySelector('colgroup'));\n    }\n\n    var colGroup = this.parent.getHeaderContent().querySelector('.e-movableheader').querySelector('colgroup').cloneNode(true);\n    mTbl.insertBefore(colGroup, mTbl.querySelector('tbody'));\n  };\n\n  return FreezeContentRender;\n}(ContentRender);\n\nexport { FreezeContentRender };\n\nvar FreezeRender =\n/** @class */\nfunction (_super) {\n  __extends(FreezeRender, _super);\n\n  function FreezeRender(parent, locator) {\n    var _this = _super.call(this, parent, locator) || this;\n\n    _this.addEventListener();\n\n    return _this;\n  }\n\n  FreezeRender.prototype.addEventListener = function () {\n    this.parent.on(events.freezeRender, this.refreshFreeze, this);\n    this.parent.on(events.frozenHeight, this.setFrozenHeight, this);\n    this.parent.on(events.uiUpdate, this.enableAfterRender, this);\n  };\n\n  FreezeRender.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(events.frozenHeight, this.setFrozenHeight);\n    this.parent.off(events.uiUpdate, this.enableAfterRender);\n  };\n\n  FreezeRender.prototype.renderTable = function () {\n    if (!isBlazor()) {\n      _super.prototype.renderTable.call(this);\n    } else {\n      this.setTable(this.createTable(this.getFrozenHeader().querySelector('.e-table')));\n      this.parent.notify(events.headerRefreshed, {\n        rows: this.rows,\n        args: {\n          isFrozen: true\n        }\n      });\n      this.createTable(this.getMovableHeader().querySelector('.e-table'));\n    }\n\n    this.rfshMovable();\n    this.updateColgroup();\n    this.initializeHeaderDrag();\n    this.initializeHeaderDrop();\n    this.parent.notify(events.headerRefreshed, {\n      rows: this.rows,\n      args: {\n        isFrozen: false\n      }\n    });\n  };\n\n  FreezeRender.prototype.renderPanel = function () {\n    var fDiv = this.parent.element.querySelector('.e-frozenheader');\n    var mDiv = this.parent.element.querySelector('.e-movableheader');\n\n    _super.prototype.renderPanel.call(this);\n\n    if (isNullOrUndefined(fDiv)) {\n      fDiv = this.parent.createElement('div', {\n        className: 'e-frozenheader'\n      });\n      mDiv = this.parent.createElement('div', {\n        className: 'e-movableheader'\n      });\n      this.getPanel().querySelector('.e-headercontent').appendChild(fDiv);\n      this.getPanel().querySelector('.e-headercontent').appendChild(mDiv);\n    }\n\n    this.setFrozenHeader(fDiv);\n    this.setMovableHeader(mDiv);\n  };\n\n  FreezeRender.prototype.refreshUI = function () {\n    if (!(isBlazor() && this.parent.isServerRendered) || this.parent.frozenRows === 0) {\n      var tbody = this.getMovableHeader().querySelector('tbody');\n      remove(this.getMovableHeader().querySelector('table'));\n\n      _super.prototype.refreshUI.call(this);\n\n      this.rfshMovable();\n      this.getMovableHeader().querySelector('tbody').innerHTML = tbody.innerHTML;\n    } else {\n      if (this.parent.getFrozenColumns() && this.freezeReorder) {\n        _super.prototype.refreshUI.call(this);\n\n        this.freezeReorder = false;\n\n        _super.prototype.refreshUI.call(this);\n      }\n\n      this.rfshMovable();\n    }\n\n    if (!isBlazor() || this.parent.frozenRows === 0) {\n      this.updateColgroup();\n    }\n\n    if (!this.parent.enableVirtualization) {\n      this.widthService.setWidthToTable();\n    }\n\n    if (this.parent.allowTextWrap && this.parent.textWrapSettings.wrapMode === 'Header') {\n      wrap([].slice.call(this.movableHeader.querySelectorAll('tr.e-columnheader')), true);\n    }\n\n    this.parent.updateDefaultCursor();\n\n    if (!isBlazor() || this.parent.frozenRows === 0) {\n      renderMovable(this.parent.getContentTable().querySelector('colgroup'), this.parent.getFrozenColumns());\n    }\n\n    this.initializeHeaderDrag();\n    this.parent.notify(events.headerRefreshed, {\n      rows: this.rows,\n      args: {\n        isFrozen: false\n      }\n    });\n  };\n\n  FreezeRender.prototype.rfshMovable = function () {\n    if (this.parent.enableColumnVirtualization) {\n      this.parent.getFrozenVirtualHeader().querySelector('.e-virtualtable').appendChild(this.getTable());\n      this.parent.getMovableVirtualHeader().querySelector('.e-virtualtable').appendChild(this.createTable());\n    } else {\n      if (!isBlazor() || this.parent.frozenRows === 0) {\n        this.getFrozenHeader().appendChild(this.getTable());\n        this.getMovableHeader().appendChild(this.createTable());\n      }\n    }\n\n    this.refreshStackedHdrHgt();\n    this.addMovableFirstCls();\n  };\n\n  FreezeRender.prototype.addMovableFirstCls = function () {\n    if (this.parent.getVisibleFrozenColumns()) {\n      var movablefirstcell = this.parent.element.querySelector('.e-movableheader').querySelector('thead').querySelectorAll('.e-columnheader');\n      var len = this.parent.element.querySelector('.e-movableheader').querySelector('thead').querySelectorAll('.e-columnheader').length;\n\n      for (var i = 0; i < len; i++) {\n        var cells = 'cells';\n        var element = movablefirstcell[i][cells][0];\n\n        if (element) {\n          addClass([element], ['e-movablefirst']);\n\n          if (movablefirstcell[i][cells][0].rowSpan > 1) {\n            i = i + (movablefirstcell[i][cells][0].rowSpan - 1);\n          }\n        }\n      }\n    }\n  };\n\n  FreezeRender.prototype.refreshFreeze = function (obj) {\n    if (obj.case === 'filter') {\n      var filterRow = this.getTable().querySelector('.e-filterbar');\n\n      if (this.parent.allowFiltering && filterRow && this.getMovableHeader().querySelector('thead')) {\n        this.getMovableHeader().querySelector('thead').appendChild(this.filterRenderer(filterRow, this.parent.getFrozenColumns()));\n        var elements = [].slice.call(this.getMovableHeader().querySelectorAll('thead .e-filterbarcell .e-input'));\n\n        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n          var elem = elements_1[_i];\n          var args = {\n            element: elem,\n            floatLabelType: 'Never',\n            properties: {\n              enableRtl: this.parent.enableRtl,\n              showClearButton: true\n            }\n          };\n          Input.bindInitialEvent(args);\n        }\n      }\n    } else if (obj.case === 'textwrap' || obj.case === 'refreshHeight') {\n      var fRows = void 0;\n      var mRows = void 0;\n      var fHdr = this.getFrozenHeader();\n      var mHdr = this.getMovableHeader();\n      var cont = this.parent.getContent();\n      var wrapMode = this.parent.textWrapSettings.wrapMode;\n      var hdrClassList = this.parent.getHeaderContent().querySelector('.e-headercontent').classList;\n\n      if (obj.case === 'textwrap') {\n        if (wrapMode !== 'Header' || obj.isModeChg) {\n          fRows = cont.querySelector('.e-frozencontent').querySelectorAll('tr');\n          mRows = cont.querySelector('.e-movablecontent').querySelectorAll('tr');\n          this.setWrapHeight(fRows, mRows, obj.isModeChg, true);\n        }\n\n        if (wrapMode === 'Content' && this.parent.allowTextWrap) {\n          hdrClassList.add('e-wrap');\n        } else {\n          hdrClassList.remove('e-wrap');\n        }\n\n        if (wrapMode === 'Both' || obj.isModeChg) {\n          fRows = fHdr.querySelectorAll('tr');\n          mRows = mHdr.querySelectorAll('tr');\n        } else {\n          fRows = fHdr.querySelector(wrapMode === 'Content' ? 'tbody' : 'thead').querySelectorAll('tr');\n          mRows = mHdr.querySelector(wrapMode === 'Content' ? 'tbody' : 'thead').querySelectorAll('tr');\n        }\n\n        if (!this.parent.getHeaderContent().querySelectorAll('.e-stackedheadercell').length) {\n          this.setWrapHeight(fRows, mRows, obj.isModeChg, false, this.colDepth > 1);\n        }\n\n        this.refreshStackedHdrHgt();\n      } else if (obj.case === 'refreshHeight') {\n        this.setWrapHeight(cont.querySelector('.e-frozencontent').querySelectorAll('tr'), cont.querySelector('.e-movablecontent').querySelectorAll('tr'), obj.isModeChg);\n\n        if (!this.parent.getHeaderContent().querySelectorAll('.e-stackedheadercell').length) {\n          this.setWrapHeight(fHdr.querySelectorAll('tr'), mHdr.querySelectorAll('tr'), obj.isModeChg);\n        }\n      }\n    }\n  };\n\n  FreezeRender.prototype.enableAfterRender = function (e) {\n    if (e.module === 'scroll') {\n      this.setFrozenHeight();\n    }\n  };\n\n  FreezeRender.prototype.updateResizeHandler = function () {\n    var elements = [].slice.call(this.parent.getHeaderContent().querySelectorAll('.e-rhandler'));\n\n    for (var i = 0; i < elements.length; i++) {\n      elements[i].style.height = elements[i].parentElement.offsetHeight + 'px';\n    }\n  };\n\n  FreezeRender.prototype.setWrapHeight = function (fRows, mRows, isModeChg, isContReset, isStackedHdr) {\n    var fRowHgt;\n    var mRowHgt;\n    var isWrap = this.parent.allowTextWrap;\n    var wrapMode = this.parent.textWrapSettings.wrapMode;\n    var tHead = this.parent.getHeaderContent().querySelector('thead');\n    var tBody = this.parent.getHeaderContent().querySelector('tbody');\n    var height = [];\n    var width = [];\n\n    for (var i = 0, len = fRows.length; i < len; i++) {\n      //separate loop for performance issue \n      if (!isNullOrUndefined(fRows[i]) && !isNullOrUndefined(mRows[i])) {\n        height[i] = fRows[i].getBoundingClientRect().height; //https://pagebuildersandwich.com/increased-plugins-performance-200/\n\n        width[i] = mRows[i].getBoundingClientRect().height;\n      }\n    }\n\n    for (var i = 0, len = fRows.length; i < len; i++) {\n      if (isModeChg && (wrapMode === 'Header' && isContReset || wrapMode === 'Content' && tHead.contains(fRows[i]) || wrapMode === 'Header' && tBody.contains(fRows[i])) || isStackedHdr) {\n        fRows[i].style.height = null;\n        mRows[i].style.height = null;\n      }\n\n      fRowHgt = height[i];\n      mRowHgt = width[i];\n\n      if (!isNullOrUndefined(fRows[i]) && fRows[i].childElementCount && (isWrap && fRowHgt < mRowHgt || !isWrap && fRowHgt < mRowHgt || this.parent.allowResizing && this.parent.resizeModule && this.parent.resizeModule.isFrozenColResized === false)) {\n        fRows[i].style.height = mRowHgt + 'px';\n      }\n\n      if (mRows && !isNullOrUndefined(mRows[i]) && mRows[i].childElementCount && (isWrap && fRowHgt > mRowHgt || !isWrap && fRowHgt > mRowHgt || this.parent.allowResizing && this.parent.resizeModule && this.parent.resizeModule.isFrozenColResized === true)) {\n        mRows[i].style.height = fRowHgt + 'px';\n      }\n    }\n\n    if (isWrap) {\n      this.setFrozenHeight();\n    }\n  };\n\n  FreezeRender.prototype.setFrozenHeight = function (height) {\n    if (height === void 0) {\n      height = getScrollBarWidth();\n    }\n\n    var movableContentHeight = this.parent.element.querySelector('.e-movablecontent').getBoundingClientRect().height;\n    var movableContent = this.parent.element.querySelector('.e-movablecontent');\n    var frozenContent = this.parent.element.querySelector('.e-frozencontent');\n    var contentScrollWidth = this.parent.getContent().scrollWidth;\n    var contentTableScrollWidth = this.parent.element.querySelector('.e-movablecontent table').scrollWidth + this.parent.getContentTable().scrollWidth;\n\n    if (movableContent.scrollWidth - movableContent.clientWidth) {\n      frozenContent.style.height = movableContentHeight - height + 'px';\n      frozenContent.style.borderBottom = '';\n    } else {\n      frozenContent.style.height = movableContentHeight + 'px';\n\n      if ((frozenContent.scrollHeight <= frozenContent.clientHeight || movableContent.scrollHeight <= movableContent.clientHeight) && contentScrollWidth === contentTableScrollWidth) {\n        this.parent.scrollModule.removePadding();\n      }\n\n      frozenContent.style.borderBottom = '0px';\n    }\n  };\n\n  FreezeRender.prototype.refreshStackedHdrHgt = function () {\n    var fRowSpan;\n    var mRowSpan;\n    var fTr = this.getFrozenHeader().querySelectorAll('.e-columnheader');\n    var mTr = this.getMovableHeader().querySelectorAll('.e-columnheader');\n\n    for (var i = 0, len = fTr.length; i < len; i++) {\n      fRowSpan = this.getRowSpan(fTr[i]);\n      mRowSpan = this.getRowSpan(mTr[i]);\n\n      if (fRowSpan.min > 1) {\n        this.updateStackedHdrRowHgt(i, fRowSpan.max, fTr[i], mTr);\n      } else if (mRowSpan.min > 1) {\n        this.updateStackedHdrRowHgt(i, mRowSpan.max, mTr[i], fTr);\n      }\n    }\n\n    if (this.parent.allowResizing) {\n      this.updateResizeHandler();\n    }\n  };\n\n  FreezeRender.prototype.getRowSpan = function (row) {\n    var rSpan;\n    var minRowSpan;\n    var maxRowSpan;\n\n    for (var i = 0, len = row.childElementCount; i < len; i++) {\n      if (i === 0) {\n        minRowSpan = row.children[0].rowSpan;\n      }\n\n      rSpan = row.children[i].rowSpan;\n      minRowSpan = Math.min(rSpan, minRowSpan);\n      maxRowSpan = Math.max(rSpan, minRowSpan);\n    }\n\n    return {\n      min: minRowSpan,\n      max: maxRowSpan\n    };\n  };\n\n  FreezeRender.prototype.updateStackedHdrRowHgt = function (idx, maxRowSpan, row, rows) {\n    var height = 0;\n\n    for (var i = 0; i < maxRowSpan; i++) {\n      height += rows[idx + i].style.height ? parseInt(rows[idx + i].style.height, 10) : rows[idx + i].offsetHeight;\n    }\n\n    row.style.height = height + 'px';\n  };\n\n  FreezeRender.prototype.setFrozenHeader = function (ele) {\n    this.frozenHeader = ele;\n  };\n\n  FreezeRender.prototype.setMovableHeader = function (ele) {\n    this.movableHeader = ele;\n  };\n\n  FreezeRender.prototype.getFrozenHeader = function () {\n    return this.frozenHeader;\n  };\n\n  FreezeRender.prototype.getMovableHeader = function () {\n    return this.movableHeader;\n  };\n  /**\n   * @hidden\n   */\n\n\n  FreezeRender.prototype.updateColgroup = function () {\n    var mTable = this.getMovableHeader().querySelector('table');\n    remove(this.getMovableHeader().querySelector('colgroup'));\n    mTable.insertBefore(renderMovable(this.getFrozenHeader().querySelector('colgroup'), this.parent.getFrozenColumns()), mTable.querySelector('thead'));\n  };\n\n  FreezeRender.prototype.filterRenderer = function (ele, frozenColumn) {\n    var clone = ele.cloneNode(true);\n    clone.innerHTML = '';\n\n    for (var i = frozenColumn; i < this.parent.getColumns().length; i++) {\n      clone.appendChild(ele.removeChild(ele.children[frozenColumn]));\n    }\n\n    return clone;\n  };\n\n  return FreezeRender;\n}(HeaderRender);\n\nexport { FreezeRender };","map":null,"metadata":{},"sourceType":"module"}