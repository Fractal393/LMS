{"ast":null,"code":"/**\r\n * DevExtreme (ui/validation_summary.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _component_registrator = require(\"../core/component_registrator\");\n\nvar _component_registrator2 = _interopRequireDefault(_component_registrator);\n\nvar _events_engine = require(\"../events/core/events_engine\");\n\nvar _events_engine2 = _interopRequireDefault(_events_engine);\n\nvar _common = require(\"../core/utils/common\");\n\nvar _extend = require(\"../core/utils/extend\");\n\nvar _iterator = require(\"../core/utils/iterator\");\n\nvar _iterator2 = _interopRequireDefault(_iterator);\n\nvar _validation_engine = require(\"./validation_engine\");\n\nvar _validation_engine2 = _interopRequireDefault(_validation_engine);\n\nvar _uiCollection_widget = require(\"./collection/ui.collection_widget.edit\");\n\nvar _uiCollection_widget2 = _interopRequireDefault(_uiCollection_widget);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar VALIDATION_SUMMARY_CLASS = \"dx-validationsummary\";\nvar ITEM_CLASS = VALIDATION_SUMMARY_CLASS + \"-item\";\nvar ITEM_DATA_KEY = VALIDATION_SUMMARY_CLASS + \"-item-data\";\n\nvar ValidationSummary = _uiCollection_widget2.default.inherit({\n  _getDefaultOptions: function () {\n    return (0, _extend.extend)(this.callBase(), {\n      focusStateEnabled: false,\n      noDataText: null\n    });\n  },\n  _setOptionsByReference: function () {\n    this.callBase();\n    (0, _extend.extend)(this._optionsByReference, {\n      validationGroup: true\n    });\n  },\n  _init: function () {\n    this.callBase();\n\n    this._initGroupRegistration();\n  },\n  _initGroupRegistration: function () {\n    var $element = this.$element();\n\n    var group = this.option(\"validationGroup\") || _validation_engine2.default.findGroup($element, this._modelByElement($element));\n\n    var groupConfig = _validation_engine2.default.addGroup(group);\n\n    this._unsubscribeGroup();\n\n    this._groupWasInit = true;\n    this._validationGroup = group;\n    this.groupSubscription = this._groupValidationHandler.bind(this);\n    groupConfig.on(\"validated\", this.groupSubscription);\n  },\n  _unsubscribeGroup: function () {\n    var groupConfig = _validation_engine2.default.getGroupConfig(this._validationGroup);\n\n    groupConfig && groupConfig.off(\"validated\", this.groupSubscription);\n  },\n  _getOrderedItems: function (validators, items) {\n    var orderedItems = [];\n\n    _iterator2.default.each(validators, function (_, validator) {\n      var foundItems = (0, _common.grep)(items, function (item) {\n        if (item.validator === validator) {\n          return true;\n        }\n      });\n\n      if (foundItems.length) {\n        orderedItems = orderedItems.concat(foundItems);\n      }\n    });\n\n    return orderedItems;\n  },\n  _groupValidationHandler: function (params) {\n    var _this = this;\n\n    var items = this._getOrderedItems(params.validators, _iterator2.default.map(params.brokenRules, function (rule) {\n      return {\n        text: rule.message,\n        validator: rule.validator,\n        index: rule.index\n      };\n    }));\n\n    this.validators = params.validators;\n\n    _iterator2.default.each(this.validators, function (_, validator) {\n      if (validator._validationSummary !== _this) {\n        var handler = _this._itemValidationHandler.bind(_this);\n\n        var disposingHandler = function () {\n          validator.off(\"validated\", handler);\n          validator._validationSummary = null;\n          handler = null;\n        };\n\n        validator.on(\"validated\", handler);\n        validator.on(\"disposing\", disposingHandler);\n        validator._validationSummary = _this;\n      }\n    });\n\n    this.option(\"items\", items);\n  },\n  _itemValidationHandler: function (_ref) {\n    var isValid = _ref.isValid,\n        validator = _ref.validator,\n        brokenRules = _ref.brokenRules;\n    var items = this.option(\"items\");\n    var itemsChanged = false;\n    var itemIndex = 0;\n\n    var _loop = function () {\n      var item = items[itemIndex];\n\n      if (item.validator === validator) {\n        var foundRule = (0, _common.grep)(brokenRules || [], function (rule) {\n          return rule.index === item.index;\n        })[0];\n\n        if (isValid || !foundRule) {\n          items.splice(itemIndex, 1);\n          itemsChanged = true;\n          return \"continue\";\n        }\n\n        if (foundRule.message !== item.text) {\n          item.text = foundRule.message;\n          itemsChanged = true;\n        }\n      }\n\n      itemIndex++;\n    };\n\n    while (itemIndex < items.length) {\n      var _ret = _loop();\n\n      if (\"continue\" === _ret) {\n        continue;\n      }\n    }\n\n    _iterator2.default.each(brokenRules, function (_, rule) {\n      var foundItem = (0, _common.grep)(items, function (item) {\n        return item.validator === validator && item.index === rule.index;\n      })[0];\n\n      if (!foundItem) {\n        items.push({\n          text: rule.message,\n          validator: validator,\n          index: rule.index\n        });\n        itemsChanged = true;\n      }\n    });\n\n    if (itemsChanged) {\n      items = this._getOrderedItems(this.validators, items);\n      this.option(\"items\", items);\n    }\n  },\n  _initMarkup: function () {\n    this.$element().addClass(VALIDATION_SUMMARY_CLASS);\n    this.callBase();\n  },\n  _optionChanged: function (args) {\n    switch (args.name) {\n      case \"validationGroup\":\n        this._initGroupRegistration();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _itemClass: function () {\n    return ITEM_CLASS;\n  },\n  _itemDataKey: function () {\n    return ITEM_DATA_KEY;\n  },\n  _postprocessRenderItem: function (params) {\n    _events_engine2.default.on(params.itemElement, \"click\", function () {\n      params.itemData.validator && params.itemData.validator.focus && params.itemData.validator.focus();\n    });\n  },\n  _dispose: function () {\n    this.callBase();\n\n    this._unsubscribeGroup();\n  }\n});\n\n(0, _component_registrator2.default)(\"dxValidationSummary\", ValidationSummary);\nmodule.exports = ValidationSummary;\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}