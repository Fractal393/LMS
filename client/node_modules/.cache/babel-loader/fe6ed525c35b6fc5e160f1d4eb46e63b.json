{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.column_chooser.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _uiGrid_core = require(\"./ui.grid_core.modules\");\n\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\n\nvar _uiGrid_core3 = require(\"./ui.grid_core.columns_view\");\n\nvar _uiGrid_core4 = _interopRequireDefault(_uiGrid_core3);\n\nvar _message = require(\"../../localization/message\");\n\nvar _message2 = _interopRequireDefault(_message);\n\nvar _themes = require(\"../themes\");\n\nvar _themes2 = _interopRequireDefault(_themes);\n\nvar _button = require(\"../button\");\n\nvar _button2 = _interopRequireDefault(_button);\n\nvar _tree_view = require(\"../tree_view\");\n\nvar _tree_view2 = _interopRequireDefault(_tree_view);\n\nvar _devices = require(\"../../core/devices\");\n\nvar _devices2 = _interopRequireDefault(_devices);\n\nvar _popup = require(\"../popup\");\n\nvar _popup2 = _interopRequireDefault(_popup);\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar COLUMN_CHOOSER_CLASS = \"column-chooser\";\nvar COLUMN_CHOOSER_BUTTON_CLASS = \"column-chooser-button\";\nvar NOTOUCH_ACTION_CLASS = \"notouch-action\";\nvar COLUMN_CHOOSER_LIST_CLASS = \"column-chooser-list\";\nvar COLUMN_CHOOSER_PLAIN_CLASS = \"column-chooser-plain\";\nvar COLUMN_CHOOSER_DRAG_CLASS = \"column-chooser-mode-drag\";\nvar COLUMN_CHOOSER_SELECT_CLASS = \"column-chooser-mode-select\";\nvar COLUMN_CHOOSER_ICON_NAME = \"column-chooser\";\nvar COLUMN_CHOOSER_ITEM_CLASS = \"dx-column-chooser-item\";\nvar TREEVIEW_NODE_SELECTOR = \".dx-treeview-node\";\nvar CHECKBOX_SELECTOR = \".dx-checkbox\";\nvar CLICK_TIMEOUT = 300;\n\nvar processItems = function (that, chooserColumns) {\n  var items = [];\n  var isSelectMode = \"select\" === that.option(\"columnChooser.mode\");\n\n  if (chooserColumns.length) {\n    (0, _iterator.each)(chooserColumns, function (index, column) {\n      var item = {\n        text: column.caption,\n        cssClass: column.cssClass,\n        allowHiding: column.allowHiding,\n        expanded: true,\n        id: column.index,\n        disabled: false,\n        disableCheckBox: false === column.allowHiding,\n        parentId: (0, _type.isDefined)(column.ownerBand) ? column.ownerBand : null\n      };\n\n      if (isSelectMode) {\n        item.selected = column.visible;\n      }\n\n      items.push(item);\n    });\n  }\n\n  return items;\n};\n\nvar ColumnChooserController = _uiGrid_core2.default.ViewController.inherit({\n  renderShowColumnChooserButton: function ($element) {\n    var that = this;\n    var columnChooserButtonClass = that.addWidgetPrefix(COLUMN_CHOOSER_BUTTON_CLASS);\n    var columnChooserEnabled = that.option(\"columnChooser.enabled\");\n    var $showColumnChooserButton = $element.find(\".\" + columnChooserButtonClass);\n    var $columnChooserButton;\n\n    if (columnChooserEnabled) {\n      if (!$showColumnChooserButton.length) {\n        $columnChooserButton = (0, _renderer2.default)(\"<div>\").addClass(columnChooserButtonClass).appendTo($element);\n\n        that._createComponent($columnChooserButton, _button2.default, {\n          icon: COLUMN_CHOOSER_ICON_NAME,\n          onClick: function () {\n            that.getView(\"columnChooserView\").showColumnChooser();\n          },\n          hint: that.option(\"columnChooser.title\"),\n          integrationOptions: {}\n        });\n      } else {\n        $showColumnChooserButton.show();\n      }\n    } else {\n      $showColumnChooserButton.hide();\n    }\n  },\n  getPosition: function () {\n    var rowsView = this.getView(\"rowsView\");\n    return {\n      my: \"right bottom\",\n      at: \"right bottom\",\n      of: rowsView && rowsView.element(),\n      collision: \"fit\",\n      offset: \"-2 -2\",\n      boundaryOffset: \"2 2\"\n    };\n  }\n});\n\nvar ColumnChooserView = _uiGrid_core4.default.ColumnsView.inherit({\n  _resizeCore: _common.noop,\n  _isWinDevice: function () {\n    return !!_devices2.default.real().win;\n  },\n  _updateList: function (change) {\n    var items;\n\n    var $popupContent = this._popupContainer.$content();\n\n    var isSelectMode = \"select\" === this.option(\"columnChooser.mode\");\n    var columnChooserList = this._columnChooserList;\n\n    var chooserColumns = this._columnsController.getChooserColumns(isSelectMode);\n\n    if (isSelectMode && columnChooserList && change && \"selection\" === change.changeType) {\n      items = processItems(this, chooserColumns);\n\n      for (var i = 0; i < items.length; i++) {\n        var selected = items[i].selected;\n        var id = items[i].id;\n\n        if (id === change.columnIndex) {\n          if (selected) {\n            columnChooserList.selectItem(id, selected);\n          } else {\n            columnChooserList.unselectItem(id, selected);\n          }\n        }\n      }\n    } else {\n      if (!isSelectMode || !columnChooserList || \"full\" === change) {\n        this._popupContainer._wrapper().toggleClass(this.addWidgetPrefix(COLUMN_CHOOSER_DRAG_CLASS), !isSelectMode).toggleClass(this.addWidgetPrefix(COLUMN_CHOOSER_SELECT_CLASS), isSelectMode);\n\n        items = processItems(this, chooserColumns);\n\n        this._renderTreeView($popupContent, items);\n      }\n    }\n  },\n  _initializePopupContainer: function () {\n    var that = this;\n    var $element = that.element().addClass(that.addWidgetPrefix(COLUMN_CHOOSER_CLASS));\n    var columnChooserOptions = that.option(\"columnChooser\");\n\n    var themeName = _themes2.default.current();\n\n    var isGenericTheme = _themes2.default.isGeneric(themeName);\n\n    var isMaterial = _themes2.default.isMaterial(themeName);\n\n    var dxPopupOptions = {\n      visible: false,\n      shading: false,\n      showCloseButton: false,\n      dragEnabled: true,\n      resizeEnabled: true,\n      toolbarItems: [{\n        text: columnChooserOptions.title,\n        toolbar: \"top\",\n        location: isGenericTheme || isMaterial ? \"before\" : \"center\"\n      }],\n      position: that.getController(\"columnChooser\").getPosition(),\n      width: columnChooserOptions.width,\n      height: columnChooserOptions.height,\n      rtlEnabled: that.option(\"rtlEnabled\"),\n      onHidden: function () {\n        if (that._isWinDevice()) {\n          (0, _renderer2.default)(\"body\").removeClass(that.addWidgetPrefix(NOTOUCH_ACTION_CLASS));\n        }\n      },\n      container: columnChooserOptions.container\n    };\n\n    if (isGenericTheme || isMaterial) {\n      (0, _extend.extend)(dxPopupOptions, {\n        showCloseButton: true\n      });\n    } else {\n      dxPopupOptions.toolbarItems[dxPopupOptions.toolbarItems.length] = {\n        shortcut: \"cancel\"\n      };\n    }\n\n    if (!(0, _type.isDefined)(this._popupContainer)) {\n      that._popupContainer = that._createComponent($element, _popup2.default, dxPopupOptions);\n\n      that._popupContainer.on(\"optionChanged\", function (args) {\n        if (\"visible\" === args.name) {\n          that.renderCompleted.fire();\n        }\n      });\n    } else {\n      this._popupContainer.option(dxPopupOptions);\n    }\n  },\n  _renderCore: function (change) {\n    if (this._popupContainer) {\n      this._updateList(change);\n    }\n  },\n  _renderTreeView: function ($container, items) {\n    var that = this;\n    var columnChooser = this.option(\"columnChooser\");\n    var isSelectMode = \"select\" === columnChooser.mode;\n    var treeViewConfig = {\n      items: items,\n      dataStructure: \"plain\",\n      activeStateEnabled: true,\n      focusStateEnabled: true,\n      hoverStateEnabled: true,\n      itemTemplate: \"item\",\n      showCheckBoxesMode: \"none\",\n      rootValue: null,\n      searchEnabled: columnChooser.allowSearch,\n      searchTimeout: columnChooser.searchTimeout,\n      onItemRendered: function (e) {\n        if (e.itemData.disableCheckBox) {\n          var $treeViewNode = (0, _renderer2.default)(e.itemElement).closest(TREEVIEW_NODE_SELECTOR);\n          var $checkBox;\n\n          if ($treeViewNode.length) {\n            $checkBox = $treeViewNode.find(CHECKBOX_SELECTOR);\n\n            if ($checkBox.length) {\n              var checkBoxInstance = $checkBox.data(\"dxCheckBox\");\n              checkBoxInstance && checkBoxInstance.option(\"disabled\", true);\n            }\n          }\n        }\n      }\n    };\n    var scrollableInstance = $container.find(\".dx-scrollable\").data(\"dxScrollable\");\n    var scrollTop = scrollableInstance && scrollableInstance.scrollTop();\n\n    if (isSelectMode && !this._columnsController.isBandColumnsUsed()) {\n      $container.addClass(this.addWidgetPrefix(COLUMN_CHOOSER_PLAIN_CLASS));\n    }\n\n    treeViewConfig.onContentReady = function (e) {\n      (0, _common.deferUpdate)(function () {\n        if (scrollTop) {\n          var scrollable = (0, _renderer2.default)(e.element).find(\".dx-scrollable\").data(\"dxScrollable\");\n          scrollable && scrollable.scrollTo({\n            y: scrollTop\n          });\n        }\n\n        that.renderCompleted.fire();\n      });\n    };\n\n    if (this._isWinDevice()) {\n      treeViewConfig.useNativeScrolling = false;\n    }\n\n    (0, _extend.extend)(treeViewConfig, isSelectMode ? this._prepareSelectModeConfig() : this._prepareDragModeConfig());\n\n    if (this._columnChooserList) {\n      if (!treeViewConfig.searchEnabled) {\n        treeViewConfig.searchValue = \"\";\n      }\n\n      this._columnChooserList.option(treeViewConfig);\n    } else {\n      this._columnChooserList = this._createComponent($container, _tree_view2.default, treeViewConfig);\n      $container.addClass(this.addWidgetPrefix(COLUMN_CHOOSER_LIST_CLASS));\n    }\n  },\n  _prepareDragModeConfig: function () {\n    var columnChooserOptions = this.option(\"columnChooser\");\n    return {\n      noDataText: columnChooserOptions.emptyPanelText,\n      activeStateEnabled: false,\n      focusStateEnabled: false,\n      hoverStateEnabled: false,\n      itemTemplate: function (data, index, item) {\n        (0, _renderer2.default)(item).text(data.text).parent().addClass(data.cssClass).addClass(COLUMN_CHOOSER_ITEM_CLASS);\n      }\n    };\n  },\n  _prepareSelectModeConfig: function () {\n    var that = this;\n\n    var selectionChangedHandler = function (e) {\n      var visibleColumns = that._columnsController.getVisibleColumns().filter(function (item) {\n        return !item.command;\n      });\n\n      var isLastColumnUnselected = 1 === visibleColumns.length && !e.itemData.selected;\n\n      if (isLastColumnUnselected) {\n        e.component.selectItem(e.itemElement);\n      } else {\n        setTimeout(function () {\n          that._columnsController.columnOption(e.itemData.id, \"visible\", e.itemData.selected);\n        }, CLICK_TIMEOUT);\n      }\n    };\n\n    return {\n      selectNodesRecursive: false,\n      showCheckBoxesMode: \"normal\",\n      onItemSelectionChanged: selectionChangedHandler\n    };\n  },\n  _columnOptionChanged: function (e) {\n    var changeTypes = e.changeTypes;\n    var optionNames = e.optionNames;\n    var isSelectMode = \"select\" === this.option(\"columnChooser.mode\");\n    this.callBase(e);\n\n    if (isSelectMode) {\n      if (optionNames.visible && 1 === optionNames.length && void 0 !== e.columnIndex) {\n        this.render(null, {\n          changeType: \"selection\",\n          columnIndex: e.columnIndex\n        });\n      } else {\n        if (optionNames.showInColumnChooser || optionNames.visible || changeTypes.columns && optionNames.all) {\n          this.render(null, \"full\");\n        }\n      }\n    }\n  },\n  optionChanged: function (args) {\n    switch (args.name) {\n      case \"columnChooser\":\n        this._initializePopupContainer();\n\n        this.render(null, \"full\");\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  getColumnElements: function () {\n    var result = [];\n    var $node;\n    var isSelectMode = \"select\" === this.option(\"columnChooser.mode\");\n\n    var chooserColumns = this._columnsController.getChooserColumns(isSelectMode);\n\n    var $content = this._popupContainer && this._popupContainer.$content();\n\n    var $nodes = $content && $content.find(\".dx-treeview-node\");\n\n    if ($nodes) {\n      chooserColumns.forEach(function (column) {\n        $node = $nodes.filter(\"[data-item-id = '\" + column.index + \"']\");\n        var item = $node.length ? $node.children(\".\" + COLUMN_CHOOSER_ITEM_CLASS).get(0) : null;\n        result.push(item);\n      });\n    }\n\n    return (0, _renderer2.default)(result);\n  },\n  getName: function () {\n    return \"columnChooser\";\n  },\n  getColumns: function () {\n    return this._columnsController.getChooserColumns();\n  },\n  allowDragging: function (column, sourceLocation) {\n    var columnVisible = column && column.allowHiding && (\"columnChooser\" !== sourceLocation || !column.visible && this._columnsController.isParentColumnVisible(column.index));\n\n    return this.isColumnChooserVisible() && columnVisible;\n  },\n  getBoundingRect: function () {\n    var that = this;\n\n    var container = that._popupContainer && that._popupContainer._container();\n\n    if (container && container.is(\":visible\")) {\n      var offset = container.offset();\n      return {\n        left: offset.left,\n        top: offset.top,\n        right: offset.left + container.outerWidth(),\n        bottom: offset.top + container.outerHeight()\n      };\n    }\n\n    return null;\n  },\n  showColumnChooser: function () {\n    if (!this._popupContainer) {\n      this._initializePopupContainer();\n\n      this.render();\n    }\n\n    this._popupContainer.show();\n\n    if (this._isWinDevice()) {\n      (0, _renderer2.default)(\"body\").addClass(this.addWidgetPrefix(NOTOUCH_ACTION_CLASS));\n    }\n  },\n  hideColumnChooser: function () {\n    if (this._popupContainer) {\n      this._popupContainer.hide();\n    }\n  },\n  isColumnChooserVisible: function () {\n    var popupContainer = this._popupContainer;\n    return popupContainer && popupContainer.option(\"visible\");\n  },\n  publicMethods: function () {\n    return [\"showColumnChooser\", \"hideColumnChooser\"];\n  }\n});\n\nmodule.exports = {\n  defaultOptions: function () {\n    return {\n      columnChooser: {\n        enabled: false,\n        allowSearch: false,\n        searchTimeout: 500,\n        mode: \"dragAndDrop\",\n        width: 250,\n        height: 260,\n        title: _message2.default.format(\"dxDataGrid-columnChooserTitle\"),\n        emptyPanelText: _message2.default.format(\"dxDataGrid-columnChooserEmptyText\"),\n        container: void 0\n      }\n    };\n  },\n  controllers: {\n    columnChooser: ColumnChooserController\n  },\n  views: {\n    columnChooserView: ColumnChooserView\n  },\n  extenders: {\n    views: {\n      headerPanel: {\n        _getToolbarItems: function () {\n          var items = this.callBase();\n          return this._appendColumnChooserItem(items);\n        },\n        _appendColumnChooserItem: function (items) {\n          var that = this;\n          var columnChooserEnabled = that.option(\"columnChooser.enabled\");\n\n          if (columnChooserEnabled) {\n            var onClickHandler = function () {\n              that.component.getView(\"columnChooserView\").showColumnChooser();\n            };\n\n            var onInitialized = function (e) {\n              (0, _renderer2.default)(e.element).addClass(that._getToolbarButtonClass(that.addWidgetPrefix(COLUMN_CHOOSER_BUTTON_CLASS)));\n            };\n\n            var hintText = that.option(\"columnChooser.title\");\n            var toolbarItem = {\n              widget: \"dxButton\",\n              options: {\n                icon: COLUMN_CHOOSER_ICON_NAME,\n                onClick: onClickHandler,\n                hint: hintText,\n                text: hintText,\n                onInitialized: onInitialized\n              },\n              showText: \"inMenu\",\n              location: \"after\",\n              name: \"columnChooserButton\",\n              locateInMenu: \"auto\",\n              sortIndex: 40\n            };\n            items.push(toolbarItem);\n          }\n\n          return items;\n        },\n        optionChanged: function (args) {\n          switch (args.name) {\n            case \"columnChooser\":\n              this._invalidate();\n\n              args.handled = true;\n              break;\n\n            default:\n              this.callBase(args);\n          }\n        },\n        isVisible: function () {\n          var that = this;\n          var columnChooserEnabled = that.option(\"columnChooser.enabled\");\n          return that.callBase() || columnChooserEnabled;\n        }\n      }\n    },\n    controllers: {\n      columns: {\n        allowMoveColumn: function (fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation) {\n          var columnChooserMode = this.option(\"columnChooser.mode\");\n          var isMoveColumnDisallowed = \"select\" === columnChooserMode && \"columnChooser\" === targetLocation;\n          return isMoveColumnDisallowed ? false : this.callBase(fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation);\n        }\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}