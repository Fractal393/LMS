{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}; /// <reference path='../drop-down-base/drop-down-base-model.d.ts'/>\n\n\nimport { DropDownBase, dropDownBaseClasses } from '../drop-down-base/drop-down-base';\nimport { FieldSettings } from '../drop-down-base/drop-down-base';\nimport { Popup, createSpinner, showSpinner, hideSpinner } from '@syncfusion/ej2-popups';\nimport { attributes, setValue, SanitizeHtmlHelper } from '@syncfusion/ej2-base';\nimport { NotifyPropertyChanges, extend } from '@syncfusion/ej2-base';\nimport { EventHandler, Property, Event, compile, L10n } from '@syncfusion/ej2-base';\nimport { Animation, Browser, prepend, isBlazor, Complex } from '@syncfusion/ej2-base';\nimport { Search } from '../common/incremental-search';\nimport { append, addClass, removeClass, closest, detach, remove } from '@syncfusion/ej2-base';\nimport { getUniqueID, formatUnit, isNullOrUndefined, isUndefined } from '@syncfusion/ej2-base';\n/* tslint:disable */\n\nimport { DataManager, Query, Predicate } from '@syncfusion/ej2-data';\nimport { createFloatLabel, removeFloating, floatLabelFocus, floatLabelBlur } from './float-label';\n/* tslint:enable */\n\nvar FOCUS = 'e-input-focus';\nvar DISABLED = 'e-disabled';\nvar OVER_ALL_WRAPPER = 'e-multiselect e-input-group e-control-wrapper';\nvar ELEMENT_WRAPPER = 'e-multi-select-wrapper';\nvar ELEMENT_MOBILE_WRAPPER = 'e-mob-wrapper';\nvar HIDE_LIST = 'e-hide-listitem';\nvar DELIMITER_VIEW = 'e-delim-view';\nvar CHIP_WRAPPER = 'e-chips-collection';\nvar CHIP = 'e-chips';\nvar CHIP_CONTENT = 'e-chipcontent';\nvar CHIP_CLOSE = 'e-chips-close';\nvar CHIP_SELECTED = 'e-chip-selected';\nvar SEARCHBOX_WRAPPER = 'e-searcher';\nvar DELIMITER_VIEW_WRAPPER = 'e-delimiter';\nvar ZERO_SIZE = 'e-zero-size';\nvar REMAIN_WRAPPER = 'e-remain';\nvar CLOSEICON_CLASS = 'e-chips-close e-close-hooker';\nvar DELIMITER_WRAPPER = 'e-delim-values';\nvar POPUP_WRAPPER = 'e-ddl e-popup e-multi-select-list-wrapper';\nvar INPUT_ELEMENT = 'e-dropdownbase';\nvar RTL_CLASS = 'e-rtl';\nvar CLOSE_ICON_HIDE = 'e-close-icon-hide';\nvar MOBILE_CHIP = 'e-mob-chip';\nvar FOOTER = 'e-ddl-footer';\nvar HEADER = 'e-ddl-header';\nvar DISABLE_ICON = 'e-ddl-disable-icon';\nvar SPINNER_CLASS = 'e-ms-spinner-icon';\nvar HIDDEN_ELEMENT = 'e-multi-hidden';\nvar destroy = 'destroy';\nvar dropdownIcon = 'e-input-group-icon e-ddl-icon';\nvar iconAnimation = 'e-icon-anim';\nvar TOTAL_COUNT_WRAPPER = 'e-delim-total';\nvar BOX_ELEMENT = 'e-multiselect-box';\nvar FILTERPARENT = 'e-filter-parent';\nvar CUSTOM_WIDTH = 'e-search-custom-width';\n/**\n * The Multiselect allows the user to pick a more than one value from list of predefined values.\n * ```html\n * <select id=\"list\">\n *      <option value='1'>Badminton</option>\n *      <option value='2'>Basketball</option>\n *      <option value='3'>Cricket</option>\n *      <option value='4'>Football</option>\n *      <option value='5'>Tennis</option>\n * </select>\n * ```\n * ```typescript\n * <script>\n *   var multiselectObj = new Multiselect();\n *   multiselectObj.appendTo(\"#list\");\n * </script>\n * ```\n */\n\nvar MultiSelect =\n/** @class */\nfunction (_super) {\n  __extends(MultiSelect, _super);\n  /**\n   * Constructor for creating the DropDownList widget.\n   */\n\n\n  function MultiSelect(option, element) {\n    var _this = _super.call(this, option, element) || this;\n\n    _this.isValidKey = false;\n    _this.selectAllEventData = [];\n    _this.selectAllEventEle = [];\n    _this.isDynamicDataChange = false;\n    _this.scrollFocusStatus = false;\n    _this.keyDownStatus = false;\n    return _this;\n  }\n\n  ;\n\n  MultiSelect.prototype.enableRTL = function (state) {\n    if (state) {\n      this.overAllWrapper.classList.add(RTL_CLASS);\n    } else {\n      this.overAllWrapper.classList.remove(RTL_CLASS);\n    }\n\n    if (this.popupObj) {\n      this.popupObj.enableRtl = state;\n      this.popupObj.dataBind();\n    }\n  };\n\n  MultiSelect.prototype.requiredModules = function () {\n    var modules = [];\n\n    if (this.mode === 'CheckBox') {\n      this.isGroupChecking = this.enableGroupCheckBox;\n\n      if (this.enableGroupCheckBox) {\n        var prevOnChange = this.isProtectedOnChange;\n        this.isProtectedOnChange = true;\n        this.enableSelectionOrder = false;\n        this.isProtectedOnChange = prevOnChange;\n      }\n\n      this.allowCustomValue = false;\n      this.hideSelectedItem = false;\n      this.closePopupOnSelect = false;\n      modules.push({\n        member: 'CheckBoxSelection',\n        args: [this]\n      });\n    }\n\n    return modules;\n  };\n\n  MultiSelect.prototype.updateHTMLAttribute = function () {\n    if (Object.keys(this.htmlAttributes).length) {\n      for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {\n        var htmlAttr = _a[_i];\n\n        switch (htmlAttr) {\n          case 'class':\n            var updatedClassValue = this.htmlAttributes[htmlAttr].replace(/\\s+/g, ' ').trim();\n\n            if (updatedClassValue !== '') {\n              addClass([this.overAllWrapper], updatedClassValue.split(' '));\n              addClass([this.popupWrapper], updatedClassValue.split(' '));\n            }\n\n            break;\n\n          case 'disabled':\n            this.enable(false);\n            break;\n\n          case 'placeholder':\n            if (!this.placeholder) {\n              this.inputElement.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);\n              this.setProperties({\n                placeholder: this.inputElement.placeholder\n              }, true);\n              this.refreshPlaceHolder();\n            }\n\n            break;\n\n          default:\n            var defaultAttr = ['id'];\n            var validateAttr = ['name', 'required', 'aria-required', 'form'];\n            var containerAttr = ['title', 'role', 'style', 'class'];\n\n            if (defaultAttr.indexOf(htmlAttr) > -1) {\n              this.element.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);\n            } else if (htmlAttr.indexOf('data') === 0 || validateAttr.indexOf(htmlAttr) > -1) {\n              this.hiddenElement.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);\n            } else if (containerAttr.indexOf(htmlAttr) > -1) {\n              this.overAllWrapper.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);\n            } else {\n              this.inputElement.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);\n            }\n\n            break;\n        }\n      }\n    }\n  };\n\n  MultiSelect.prototype.updateReadonly = function (state) {\n    if (state || this.mode === 'CheckBox') {\n      this.inputElement.setAttribute('readonly', 'true');\n    } else {\n      this.inputElement.removeAttribute('readonly');\n    }\n  };\n\n  MultiSelect.prototype.updateClearButton = function (state) {\n    if (state) {\n      if (this.overAllClear.parentNode) {\n        this.overAllClear.style.display = '';\n      } else {\n        this.componentWrapper.appendChild(this.overAllClear);\n      }\n\n      this.componentWrapper.classList.remove(CLOSE_ICON_HIDE);\n    } else {\n      this.overAllClear.style.display = 'none';\n      this.componentWrapper.classList.add(CLOSE_ICON_HIDE);\n    }\n  };\n\n  MultiSelect.prototype.updateCssClass = function () {\n    if (!isNullOrUndefined(this.cssClass) && this.cssClass !== '') {\n      var updatedCssClassValues = this.cssClass;\n      updatedCssClassValues = this.cssClass.replace(/\\s+/g, ' ').trim();\n\n      if (updatedCssClassValues !== '') {\n        addClass([this.overAllWrapper], updatedCssClassValues.split(' '));\n        addClass([this.popupWrapper], updatedCssClassValues.split(' '));\n      }\n    }\n  };\n\n  MultiSelect.prototype.updateOldPropCssClass = function (oldClass) {\n    if (!isNullOrUndefined(oldClass) && oldClass !== '') {\n      oldClass = oldClass.replace(/\\s+/g, ' ').trim();\n\n      if (oldClass !== '') {\n        removeClass([this.overAllWrapper], oldClass.split(' '));\n        removeClass([this.popupWrapper], oldClass.split(' '));\n      }\n    }\n  };\n\n  MultiSelect.prototype.onPopupShown = function () {\n    var _this = this;\n\n    var listItems;\n    var mainListItems;\n\n    if (Browser.isDevice && this.mode === 'CheckBox' && this.allowFiltering) {\n      var proxy_1 = this;\n\n      window.onpopstate = function () {\n        proxy_1.hidePopup();\n        proxy_1.inputElement.focus();\n      };\n\n      history.pushState({}, '');\n    }\n\n    var animModel = {\n      name: 'FadeIn',\n      duration: 100\n    };\n    var eventArgs = {\n      popup: this.popupObj,\n      cancel: false,\n      animation: animModel\n    };\n    this.trigger('open', eventArgs, function (eventArgs) {\n      if (!eventArgs.cancel) {\n        _this.focusAtFirstListItem();\n\n        document.body.appendChild(_this.popupObj.element);\n\n        if (_this.mode === 'CheckBox' && _this.enableGroupCheckBox && !isNullOrUndefined(_this.fields.groupBy)) {\n          _this.updateListItems(_this.list.querySelectorAll('li.e-list-item'), _this.mainList.querySelectorAll('li.e-list-item'));\n        }\n\n        if (_this.mode === 'CheckBox' || _this.showDropDownIcon) {\n          addClass([_this.overAllWrapper], [iconAnimation]);\n        }\n\n        _this.refreshPopup();\n\n        _this.popupObj.show(eventArgs.animation, _this.zIndex === 1000 ? _this.element : null);\n\n        attributes(_this.inputElement, {\n          'aria-expanded': 'true'\n        });\n\n        if (_this.isFirstClick) {\n          _this.loadTemplate();\n        }\n      }\n    });\n  };\n\n  MultiSelect.prototype.updateListItems = function (listItems, mainListItems) {\n    for (var i = 0; i < listItems.length; i++) {\n      this.findGroupStart(listItems[i]);\n      this.findGroupStart(mainListItems[i]);\n    }\n\n    this.deselectHeader();\n  };\n\n  MultiSelect.prototype.loadTemplate = function () {\n    this.refreshListItems(null);\n\n    if (this.mode === 'CheckBox') {\n      this.removeFocus();\n    }\n\n    this.notify('reOrder', {\n      module: 'CheckBoxSelection',\n      enable: this.mode === 'CheckBox',\n      e: this\n    });\n  };\n\n  MultiSelect.prototype.setScrollPosition = function () {\n    if ((!this.hideSelectedItem && this.mode !== 'CheckBox' || this.mode === 'CheckBox' && !this.enableSelectionOrder) && !isNullOrUndefined(this.value) && this.value.length > 0) {\n      var valueEle = this.findListElement(this.hideSelectedItem ? this.ulElement : this.list, 'li', 'data-value', this.value[this.value.length - 1]);\n\n      if (!isNullOrUndefined(valueEle)) {\n        this.scrollBottom(valueEle);\n      }\n    }\n  };\n\n  MultiSelect.prototype.focusAtFirstListItem = function () {\n    if (this.ulElement && this.ulElement.querySelector('li.' + dropDownBaseClasses.li)) {\n      var element = void 0;\n\n      if (this.mode === 'CheckBox') {\n        this.removeFocus();\n        return;\n      } else {\n        element = this.ulElement.querySelector('li.' + dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')');\n      }\n\n      if (element !== null) {\n        this.removeFocus();\n        this.addListFocus(element);\n      }\n    }\n  };\n\n  MultiSelect.prototype.focusAtLastListItem = function (data) {\n    var activeElement;\n\n    if (data) {\n      activeElement = Search(data, this.liCollections, 'StartsWith', this.ignoreCase);\n    } else {\n      if (this.value && this.value.length) {\n        Search(this.value[this.value.length - 1], this.liCollections, 'StartsWith', this.ignoreCase);\n      } else {\n        activeElement = null;\n      }\n    }\n\n    if (activeElement && activeElement.item !== null) {\n      this.addListFocus(activeElement.item);\n      this.scrollBottom(activeElement.item, activeElement.index);\n    }\n  };\n\n  MultiSelect.prototype.getAriaAttributes = function () {\n    var ariaAttributes = {\n      'aria-disabled': 'false',\n      'aria-owns': this.element.id + '_options',\n      'role': 'listbox',\n      'aria-multiselectable': 'true',\n      'aria-activedescendant': 'null',\n      'aria-haspopup': 'true',\n      'aria-expanded': 'false'\n    };\n    return ariaAttributes;\n  };\n\n  MultiSelect.prototype.updateListARIA = function () {\n    attributes(this.ulElement, {\n      'id': this.element.id + '_options',\n      'role': 'listbox',\n      'aria-hidden': 'false'\n    });\n    var disableStatus = this.inputElement.disabled ? true : false;\n    attributes(this.inputElement, this.getAriaAttributes());\n\n    if (disableStatus) {\n      attributes(this.inputElement, {\n        'aria-disabled': 'true'\n      });\n    }\n\n    this.ensureAriaDisabled(disableStatus ? 'true' : 'false');\n  };\n\n  MultiSelect.prototype.ensureAriaDisabled = function (status) {\n    if (this.htmlAttributes && this.htmlAttributes['aria-disabled']) {\n      var attr = this.htmlAttributes;\n      extend(attr, {\n        'aria-disabled': status\n      }, attr);\n      this.setProperties({\n        htmlAttributes: attr\n      }, true);\n    }\n  };\n\n  MultiSelect.prototype.removelastSelection = function (e) {\n    var elements;\n    elements = this.chipCollectionWrapper.querySelectorAll('span.' + CHIP);\n    var value = elements[elements.length - 1].getAttribute('data-value');\n\n    if (!isNullOrUndefined(this.value)) {\n      this.tempValues = this.value.slice();\n    }\n\n    this.removeValue(value, e);\n    this.removeChipSelection();\n    this.updateDelimeter(this.delimiterChar, e);\n    this.makeTextBoxEmpty();\n\n    if (this.mainList && this.listData) {\n      this.refreshSelection();\n    }\n\n    this.checkPlaceholderSize();\n  };\n\n  MultiSelect.prototype.onActionFailure = function (e) {\n    _super.prototype.onActionFailure.call(this, e);\n\n    this.renderPopup();\n    this.onPopupShown();\n  };\n\n  MultiSelect.prototype.targetElement = function () {\n    this.targetInputElement = this.inputElement;\n\n    if (this.mode === 'CheckBox' && this.allowFiltering) {\n      this.notify('targetElement', {\n        module: 'CheckBoxSelection',\n        enable: this.mode === 'CheckBox'\n      });\n    }\n\n    return this.targetInputElement.value;\n  };\n\n  MultiSelect.prototype.getForQuery = function (valuecheck) {\n    var predicate;\n    var field = isNullOrUndefined(this.fields.value) ? this.fields.text : this.fields.value;\n\n    for (var i = 0; i < valuecheck.length; i++) {\n      if (i === 0) {\n        predicate = new Predicate(field, 'equal', valuecheck[i]);\n      } else {\n        predicate = predicate.or(field, 'equal', valuecheck[i]);\n      }\n    }\n\n    return this.getQuery(this.query).where(predicate);\n  };\n\n  MultiSelect.prototype.onActionComplete = function (ulElement, list, e, isUpdated) {\n    _super.prototype.onActionComplete.call(this, ulElement, list, e);\n\n    this.updateSelectElementData(this.allowFiltering);\n    var proxy = this;\n    var valuecheck = [];\n\n    if (isBlazor() && this.isServerRendered && this.isDynamicDataChange && this.value !== null && this.value.length > 0) {\n      var items = [];\n\n      for (var k = 0; k < this.value.length; k++) {\n        var itemsData = this.getDataByValue(this.value[k]);\n\n        if (itemsData) {\n          // tslint:disable-next-line\n          items.push(itemsData[this.fields.value]); // remove the condition for hybrid\n        }\n      }\n\n      if (items.length === 0) {\n        this.setProperties({\n          'value': null\n        });\n      }\n    }\n\n    if (!isNullOrUndefined(this.value) && !this.allowCustomValue) {\n      for (var i = 0; i < this.value.length; i++) {\n        var checkEle = this.findListElement(this.allowFiltering && !isNullOrUndefined(this.mainList) ? this.mainList : ulElement, 'li', 'data-value', proxy.value[i]);\n\n        if (!checkEle) {\n          valuecheck.push(proxy.value[i]);\n        }\n      }\n    }\n\n    if (valuecheck.length > 0 && this.dataSource instanceof DataManager && !isNullOrUndefined(this.value)) {\n      this.dataSource.executeQuery(this.getForQuery(valuecheck)).then(function (e) {\n        proxy.addItem(e.result, list.length);\n        proxy.updateActionList(ulElement, list, e);\n      });\n    } else {\n      this.updateActionList(ulElement, list, e);\n    }\n\n    if (isBlazor() && this.isServerRendered && this.allowFiltering && this.mode === 'CheckBox') {\n      this.removeFocus();\n    }\n\n    if (isBlazor() && this.isServerRendered && this.isDynamicDataChange && this.value && this.value.length > 0) {\n      this.updateVal(this.value, null, 'value');\n      this.addValidInputClass();\n      this.isDynamicDataChange = false;\n    }\n\n    if (this.dataSource instanceof DataManager && this.mode === 'CheckBox' && this.allowFiltering && !(isBlazor() && this.isServerRendered)) {\n      this.removeFocus();\n    }\n  };\n\n  MultiSelect.prototype.updateActionList = function (ulElement, list, e, isUpdated) {\n    if (this.mode === 'CheckBox' && this.showSelectAll) {\n      this.notify('selectAll', {\n        module: 'CheckBoxSelection',\n        enable: this.mode === 'CheckBox'\n      });\n    }\n\n    if (!this.mainList && !this.mainData) {\n      this.mainList = ulElement.cloneNode ? ulElement.cloneNode(true) : ulElement;\n      this.mainData = list;\n      this.mainListCollection = this.liCollections;\n    } else if (!isNullOrUndefined(this.mainData) && this.mainData.length === 0) {\n      this.mainData = list;\n    }\n\n    if ((this.remoteCustomValue || list.length <= 0) && this.allowCustomValue && this.inputFocus && this.allowFiltering && this.inputElement.value && this.inputElement.value !== '') {\n      this.checkForCustomValue(this.tempQuery, this.fields);\n      return;\n    }\n\n    if (this.value && this.value.length && (this.mode !== 'CheckBox' && this.inputElement.value !== '' || this.mode === 'CheckBox')) {\n      this.refreshSelection();\n    }\n\n    this.updateListARIA();\n    this.unwireListEvents();\n    this.wireListEvents();\n\n    if (!isNullOrUndefined(this.setInitialValue)) {\n      this.setInitialValue();\n    }\n\n    if (!isNullOrUndefined(this.selectAllAction)) {\n      this.selectAllAction();\n    }\n\n    if (this.setDynValue) {\n      if (!isNullOrUndefined(this.text) && (isNullOrUndefined(this.value) || this.value.length === 0)) {\n        this.initialTextUpdate();\n      }\n\n      this.initialValueUpdate();\n      this.initialUpdate();\n      this.refreshPlaceHolder();\n\n      if (this.mode !== 'CheckBox' && this.changeOnBlur) {\n        this.updateValueState(null, this.value, null);\n      }\n    }\n\n    this.renderPopup();\n\n    if (this.beforePopupOpen) {\n      this.beforePopupOpen = false;\n      this.onPopupShown();\n    }\n  };\n\n  MultiSelect.prototype.refreshSelection = function () {\n    var value;\n    var element;\n    var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;\n\n    if (!isNullOrUndefined(this.value)) {\n      for (var index = 0; !isNullOrUndefined(this.value[index]); index++) {\n        value = this.value[index];\n        element = this.findListElement(this.list, 'li', 'data-value', value);\n\n        if (element) {\n          addClass([element], className);\n\n          if (this.hideSelectedItem && element.previousSibling && element.previousElementSibling.classList.contains(dropDownBaseClasses.group) && (!element.nextElementSibling || element.nextElementSibling.classList.contains(dropDownBaseClasses.group))) {\n            addClass([element.previousElementSibling], className);\n          }\n\n          if (this.hideSelectedItem && this.fields.groupBy && !element.previousElementSibling.classList.contains(HIDE_LIST)) {\n            this.hideGroupItem(value);\n          }\n\n          if (this.hideSelectedItem && element.classList.contains(dropDownBaseClasses.focus)) {\n            removeClass([element], dropDownBaseClasses.focus);\n            var listEle = element.parentElement.querySelectorAll('.' + dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')');\n\n            if (listEle.length > 0) {\n              addClass([listEle[0]], dropDownBaseClasses.focus);\n            } else {\n              this.ulElement = this.ulElement.cloneNode ? this.ulElement.cloneNode(true) : this.ulElement;\n              this.l10nUpdate();\n              addClass([this.list], dropDownBaseClasses.noData);\n            }\n          }\n\n          element.setAttribute('aria-selected', 'true');\n\n          if (this.mode === 'CheckBox' && element.classList.contains('e-active')) {\n            var ariaValue = element.firstElementChild.getAttribute('aria-checked');\n\n            if (isNullOrUndefined(ariaValue) || ariaValue === 'false') {\n              var args = {\n                module: 'CheckBoxSelection',\n                enable: this.mode === 'CheckBox',\n                li: element,\n                e: null\n              };\n              this.notify('updatelist', args);\n            }\n          }\n        }\n      }\n    }\n\n    this.checkSelectAll();\n    this.checkMaxSelection();\n  };\n\n  MultiSelect.prototype.hideGroupItem = function (value) {\n    var element;\n    var element1;\n    var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;\n    element1 = element = this.findListElement(this.ulElement, 'li', 'data-value', value);\n    var i = 0;\n    var j = 0;\n    var temp = true;\n    var temp1 = true;\n\n    do {\n      if (element && element.previousElementSibling && !element.previousElementSibling.classList.contains(HIDE_LIST) && element.previousElementSibling.classList.contains(dropDownBaseClasses.li)) {\n        temp = false;\n      }\n\n      if (!temp || !element || element.previousElementSibling && element.previousElementSibling.classList.contains(dropDownBaseClasses.group)) {\n        i = 10;\n      } else {\n        element = element.previousElementSibling;\n      }\n\n      if (element1 && element1.nextElementSibling && !element1.nextElementSibling.classList.contains(HIDE_LIST) && element1.nextElementSibling.classList.contains(dropDownBaseClasses.li)) {\n        temp1 = false;\n      }\n\n      if (!temp1 || !element1 || element1.nextElementSibling && element1.nextElementSibling.classList.contains(dropDownBaseClasses.group)) {\n        j = 10;\n      } else {\n        element1 = element1.nextElementSibling;\n      }\n    } while (i < 10 || j < 10);\n\n    if (temp && temp1 && !element.previousElementSibling.classList.contains(HIDE_LIST)) {\n      addClass([element.previousElementSibling], className);\n    } else if (temp && temp1 && element.previousElementSibling.classList.contains(HIDE_LIST)) {\n      removeClass([element.previousElementSibling], className);\n    }\n  };\n\n  MultiSelect.prototype.checkSelectAll = function () {\n    var groupItemLength = this.list.querySelectorAll('li.e-list-group-item.e-active').length;\n    var listItem = this.list.querySelectorAll('li.e-list-item');\n    var searchCount = this.list.querySelectorAll('li.' + dropDownBaseClasses.li).length;\n    var searchActiveCount = this.list.querySelectorAll('li.' + dropDownBaseClasses.selected).length;\n\n    if (this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {\n      searchActiveCount = searchActiveCount - groupItemLength;\n    }\n\n    if ((searchCount === searchActiveCount || searchActiveCount === this.maximumSelectionLength) && this.mode === 'CheckBox' && this.showSelectAll) {\n      this.notify('checkSelectAll', {\n        module: 'CheckBoxSelection',\n        enable: this.mode === 'CheckBox',\n        value: 'check'\n      });\n    } else if (searchCount !== searchActiveCount && this.mode === 'CheckBox' && this.showSelectAll) {\n      this.notify('checkSelectAll', {\n        module: 'CheckBoxSelection',\n        enable: this.mode === 'CheckBox',\n        value: 'uncheck'\n      });\n    }\n\n    if (this.enableGroupCheckBox && this.fields.groupBy && !this.enableSelectionOrder) {\n      for (var i = 0; i < listItem.length; i++) {\n        this.findGroupStart(listItem[i]);\n      }\n\n      this.deselectHeader();\n    }\n  };\n\n  MultiSelect.prototype.openClick = function (e) {\n    if (!this.openOnClick && this.mode !== 'CheckBox') {\n      if (this.targetElement() !== '') {\n        this.showPopup();\n      } else {\n        this.hidePopup();\n      }\n    } else if (!this.openOnClick && this.mode === 'CheckBox' && !this.isPopupOpen()) {\n      this.showPopup();\n    }\n  };\n\n  MultiSelect.prototype.KeyUp = function (e) {\n    if (this.mode === 'CheckBox' && !this.openOnClick) {\n      var char = String.fromCharCode(e.keyCode);\n      var isWordCharacter = char.match(/\\w/);\n\n      if (!isNullOrUndefined(isWordCharacter)) {\n        this.isValidKey = true;\n      }\n    }\n\n    this.isValidKey = this.isPopupOpen() && e.keyCode === 8 || this.isValidKey;\n    this.isValidKey = e.ctrlKey && e.keyCode === 86 ? false : this.isValidKey;\n\n    if (this.isValidKey) {\n      this.isValidKey = false;\n      this.expandTextbox();\n      this.showOverAllClear();\n\n      switch (e.keyCode) {\n        default:\n          // For filtering works in mobile firefox\n          this.search(e);\n      }\n    }\n  };\n  /**\n   * To filter the multiselect data from given data source by using query\n   * @param  {Object[] | DataManager } dataSource - Set the data source to filter.\n   * @param  {Query} query - Specify the query to filter the data.\n   * @param  {FieldSettingsModel} fields - Specify the fields to map the column in the data table.\n   * @return {void}.\n   */\n\n\n  MultiSelect.prototype.filter = function (dataSource, query, fields) {\n    this.isFiltered = true;\n    this.remoteFilterAction = true;\n    this.dataUpdater(dataSource, query, fields);\n  };\n\n  MultiSelect.prototype.getQuery = function (query) {\n    var filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();\n\n    if (this.filterAction) {\n      if (this.targetElement() !== null) {\n        var dataType = this.typeOfData(this.dataSource).typeof;\n\n        if (!(this.dataSource instanceof DataManager) && dataType === 'string' || dataType === 'number') {\n          filterQuery.where('', this.filterType, this.targetElement(), this.ignoreCase, this.ignoreAccent);\n        } else {\n          var fields = this.fields;\n          filterQuery.where(!isNullOrUndefined(fields.text) ? fields.text : '', this.filterType, this.targetElement(), this.ignoreCase, this.ignoreAccent);\n        }\n      }\n\n      return filterQuery;\n    } else {\n      return query ? query : this.query ? this.query : new Query();\n    }\n  };\n\n  MultiSelect.prototype.dataUpdater = function (dataSource, query, fields) {\n    this.isDataFetched = false;\n\n    if (this.targetElement().trim() === '') {\n      var list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;\n\n      if (this.backCommand) {\n        this.remoteCustomValue = false;\n        this.onActionComplete(list, this.mainData);\n\n        if (this.value && this.value.length) {\n          this.refreshSelection();\n        }\n\n        if (this.keyCode !== 8) {\n          this.focusAtFirstListItem();\n        }\n\n        this.notify('reOrder', {\n          module: 'CheckBoxSelection',\n          enable: this.mode === 'CheckBox',\n          e: this\n        });\n      }\n    } else {\n      this.resetList(dataSource, fields, query);\n\n      if (this.allowCustomValue) {\n        if (!(dataSource instanceof DataManager)) {\n          this.checkForCustomValue(query, fields);\n        } else {\n          this.remoteCustomValue = true;\n          this.tempQuery = query;\n        }\n      }\n    }\n\n    this.refreshPopup();\n\n    if (this.mode === 'CheckBox') {\n      this.removeFocus();\n    }\n  };\n\n  MultiSelect.prototype.checkForCustomValue = function (query, fields) {\n    var dataChecks = !this.getValueByText(this.inputElement.value, this.ignoreCase);\n\n    if (this.allowCustomValue && dataChecks) {\n      var value = this.inputElement.value;\n      var field = fields ? fields : this.fields;\n      var customData = !isNullOrUndefined(this.mainData) && this.mainData.length > 0 ? this.mainData[0] : this.mainData;\n\n      if (typeof customData !== 'string') {\n        var dataItem = {};\n        setValue(field.text, value, dataItem);\n        setValue(field.value, value, dataItem);\n        var tempData = JSON.parse(JSON.stringify(this.listData));\n        tempData.splice(0, 0, dataItem);\n        this.resetList(tempData, field, query);\n      } else {\n        var tempData = [this.inputElement.value];\n        this.resetList(tempData, field);\n      }\n    }\n\n    if (this.value && this.value.length) {\n      this.refreshSelection();\n    }\n  };\n\n  MultiSelect.prototype.getNgDirective = function () {\n    return 'EJS-MULTISELECT';\n  };\n\n  MultiSelect.prototype.wrapperClick = function (e) {\n    this.setDynValue = false;\n\n    if (!this.enabled) {\n      return;\n    }\n\n    if (e.target === this.overAllClear) {\n      e.preventDefault();\n      return;\n    }\n\n    if (!this.inputFocus) {\n      this.inputElement.focus();\n    }\n\n    if (!this.readonly) {\n      if (e.target && e.target.classList.toString().indexOf(CHIP_CLOSE) !== -1) {\n        if (this.isPopupOpen()) {\n          this.refreshPopup();\n        }\n\n        return;\n      }\n\n      if (!this.isPopupOpen() && (this.openOnClick || this.showDropDownIcon && e.target && e.target.className === dropdownIcon)) {\n        this.showPopup();\n      } else {\n        this.hidePopup();\n\n        if (this.mode === 'CheckBox') {\n          this.showOverAllClear();\n          this.inputFocus = true;\n\n          if (!this.overAllWrapper.classList.contains(FOCUS)) {\n            this.overAllWrapper.classList.add(FOCUS);\n          }\n        }\n      }\n    }\n\n    if (!(this.targetElement() && this.targetElement() !== '')) {\n      e.preventDefault();\n    }\n  };\n\n  MultiSelect.prototype.enable = function (state) {\n    if (state) {\n      this.overAllWrapper.classList.remove(DISABLED);\n      this.inputElement.removeAttribute('disabled');\n      attributes(this.inputElement, {\n        'aria-disabled': 'false'\n      });\n      this.ensureAriaDisabled('false');\n    } else {\n      this.overAllWrapper.classList.add(DISABLED);\n      this.inputElement.setAttribute('disabled', 'true');\n      attributes(this.inputElement, {\n        'aria-disabled': 'true'\n      });\n      this.ensureAriaDisabled('true');\n    }\n\n    if (this.enabled !== state) {\n      this.enabled = state;\n    }\n\n    this.hidePopup();\n  };\n\n  MultiSelect.prototype.onBlur = function (eve, isDocClickFromCheck) {\n    var target;\n\n    if (!isNullOrUndefined(eve)) {\n      target = eve.relatedTarget;\n    }\n\n    if (this.popupObj && document.body.contains(this.popupObj.element) && this.popupObj.element.contains(target)) {\n      if (this.mode !== 'CheckBox') {\n        this.inputElement.focus();\n      } else if (this.floatLabelType === 'Auto' && (this.overAllWrapper.classList.contains('e-outline') || this.overAllWrapper.classList.contains('e-filled'))) {\n        addClass([this.overAllWrapper], 'e-valid-input');\n      }\n\n      return;\n    }\n\n    if (this.floatLabelType === 'Auto' && this.overAllWrapper.classList.contains('e-outline') && this.mode === 'CheckBox' && (isNullOrUndefined(this.value) || this.value.length === 0)) {\n      removeClass([this.overAllWrapper], 'e-valid-input');\n    }\n\n    if (this.mode === 'CheckBox' && Browser.isIE && !isNullOrUndefined(eve) && !isDocClickFromCheck) {\n      this.inputFocus = false;\n      this.overAllWrapper.classList.remove(FOCUS);\n      return;\n    }\n\n    if (this.scrollFocusStatus) {\n      if (!isNullOrUndefined(eve)) {\n        eve.preventDefault();\n      }\n\n      this.inputElement.focus();\n      this.scrollFocusStatus = false;\n      return;\n    }\n\n    this.inputFocus = false;\n    this.overAllWrapper.classList.remove(FOCUS);\n    this.refreshListItems(null);\n\n    if (this.mode !== 'Box' && this.mode !== 'CheckBox') {\n      this.updateDelimView();\n    }\n\n    if (this.changeOnBlur) {\n      this.updateValueState(eve, this.value, this.tempValues);\n      this.dispatchEvent(this.hiddenElement, 'change');\n    }\n\n    this.overAllClear.style.display = 'none';\n\n    if (this.isPopupOpen()) {\n      this.DropDownBaseresetBlazorTemplates(false, false, true, true, false, true, true);\n      this.hidePopup();\n    }\n\n    this.makeTextBoxEmpty();\n    this.trigger('blur');\n    this.focused = true;\n\n    if (Browser.isDevice && this.mode !== 'Delimiter' && this.mode !== 'CheckBox') {\n      this.removeChipFocus();\n    }\n\n    this.removeChipSelection();\n    this.refreshInputHight();\n    floatLabelBlur(this.overAllWrapper, this.componentWrapper, this.value, this.floatLabelType, this.placeholder);\n    this.refreshPlaceHolder();\n\n    if ((this.allowFiltering || this.enableSelectionOrder === true && this.mode === 'CheckBox') && !isNullOrUndefined(this.mainList)) {\n      this.ulElement = this.mainList;\n    }\n\n    this.checkPlaceholderSize();\n  };\n\n  MultiSelect.prototype.checkPlaceholderSize = function () {\n    if (this.showDropDownIcon) {\n      var downIconWidth = this.dropIcon.offsetWidth + parseInt(window.getComputedStyle(this.dropIcon).marginRight, 10);\n      this.setPlaceholderSize(downIconWidth);\n    } else {\n      if (!isNullOrUndefined(this.dropIcon)) {\n        this.setPlaceholderSize(this.showDropDownIcon ? this.dropIcon.offsetWidth : 0);\n      }\n    }\n  };\n\n  MultiSelect.prototype.setPlaceholderSize = function (downIconWidth) {\n    if (isNullOrUndefined(this.value) || this.value.length === 0) {\n      if (this.dropIcon.offsetWidth !== 0) {\n        this.searchWrapper.style.width = 'calc(100% - ' + (downIconWidth + 10) + 'px';\n      } else {\n        addClass([this.searchWrapper], CUSTOM_WIDTH);\n      }\n    } else if (!isNullOrUndefined(this.value)) {\n      this.searchWrapper.removeAttribute('style');\n      removeClass([this.searchWrapper], CUSTOM_WIDTH);\n    }\n  };\n\n  MultiSelect.prototype.refreshInputHight = function () {\n    if ((!this.value || !this.value.length) && (isNullOrUndefined(this.text) || this.text === '')) {\n      this.searchWrapper.classList.remove(ZERO_SIZE);\n    } else {\n      this.searchWrapper.classList.add(ZERO_SIZE);\n    }\n  };\n\n  MultiSelect.prototype.validateValues = function (newValue, oldValue) {\n    return JSON.stringify(newValue.slice().sort()) !== JSON.stringify(oldValue.slice().sort());\n  };\n\n  MultiSelect.prototype.updateValueState = function (event, newVal, oldVal) {\n    var newValue = newVal ? newVal : [];\n    var oldValue = oldVal ? oldVal : [];\n\n    if (this.initStatus && this.validateValues(newValue, oldValue)) {\n      var eventArgs = {\n        e: event,\n        oldValue: oldVal,\n        value: newVal,\n        isInteracted: event ? true : false,\n        element: this.element\n      };\n      this.trigger('change', eventArgs);\n      this.updateTempValue();\n\n      if (!this.changeOnBlur) {\n        this.dispatchEvent(this.hiddenElement, 'change');\n      }\n    }\n  };\n\n  MultiSelect.prototype.updateTempValue = function () {\n    if (!this.value) {\n      this.tempValues = this.value;\n    } else {\n      this.tempValues = this.value.slice();\n    }\n  };\n\n  MultiSelect.prototype.getPagingCount = function () {\n    var height = this.list.classList.contains(dropDownBaseClasses.noData) ? null : getComputedStyle(this.getItems()[0], null).getPropertyValue('height');\n    return Math.round(this.list.offsetHeight / parseInt(height, 10));\n  };\n\n  MultiSelect.prototype.pageUpSelection = function (steps) {\n    var collection = this.list.querySelectorAll('li.' + dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');\n    var previousItem;\n    previousItem = steps >= 0 ? collection[steps + 1] : collection[0];\n    this.addListFocus(previousItem);\n    this.scrollBottom(previousItem, this.getIndexByValue(previousItem.getAttribute('data-value')));\n  };\n\n  ;\n\n  MultiSelect.prototype.pageDownSelection = function (steps) {\n    var list = this.getItems();\n    var collection = this.list.querySelectorAll('li.' + dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');\n    var previousItem;\n    previousItem = steps <= collection.length ? collection[steps - 1] : collection[collection.length - 1];\n    this.addListFocus(previousItem);\n    this.scrollBottom(previousItem, this.getIndexByValue(previousItem.getAttribute('data-value')));\n  };\n\n  MultiSelect.prototype.getItems = function () {\n    if (!this.list) {\n      _super.prototype.render.call(this);\n    }\n\n    return this.ulElement && this.ulElement.querySelectorAll('.' + dropDownBaseClasses.li).length > 0 ? this.ulElement.querySelectorAll('.' + dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')') : [];\n  };\n\n  MultiSelect.prototype.focusInHandler = function (e) {\n    if (this.enabled) {\n      this.showOverAllClear();\n      this.inputFocus = true;\n\n      if (this.value && this.value.length) {\n        if (this.mode !== 'Delimiter' && this.mode !== 'CheckBox') {\n          this.chipCollectionWrapper.style.display = '';\n        } else {\n          this.showDelimWrapper();\n        }\n\n        if (this.mode !== 'CheckBox') {\n          this.viewWrapper.style.display = 'none';\n        }\n      }\n\n      if (this.mode !== 'CheckBox') {\n        this.searchWrapper.classList.remove(ZERO_SIZE);\n      }\n\n      this.checkPlaceholderSize();\n\n      if (this.focused) {\n        var args = {\n          isInteracted: e ? true : false,\n          event: e\n        };\n        this.trigger('focus', args);\n        this.focused = false;\n      }\n\n      if (!this.overAllWrapper.classList.contains(FOCUS)) {\n        this.overAllWrapper.classList.add(FOCUS);\n      }\n\n      floatLabelFocus(this.overAllWrapper, this.componentWrapper);\n\n      if (this.isPopupOpen()) {\n        this.refreshPopup();\n      }\n\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  MultiSelect.prototype.showDelimWrapper = function () {\n    if (this.mode === 'CheckBox') {\n      this.viewWrapper.style.display = '';\n    } else {\n      this.delimiterWrapper.style.display = '';\n    }\n\n    this.componentWrapper.classList.add(DELIMITER_VIEW_WRAPPER);\n  };\n\n  MultiSelect.prototype.hideDelimWrapper = function () {\n    this.delimiterWrapper.style.display = 'none';\n    this.componentWrapper.classList.remove(DELIMITER_VIEW_WRAPPER);\n  };\n\n  MultiSelect.prototype.expandTextbox = function () {\n    var size = 5;\n\n    if (this.placeholder) {\n      size = size > this.inputElement.placeholder.length ? size : this.inputElement.placeholder.length;\n    }\n\n    if (this.inputElement.value.length > size) {\n      this.inputElement.size = this.inputElement.value.length;\n    } else {\n      this.inputElement.size = size;\n    }\n  };\n\n  MultiSelect.prototype.isPopupOpen = function () {\n    return this.popupWrapper !== null && this.popupWrapper.parentElement !== null;\n  };\n\n  MultiSelect.prototype.refreshPopup = function () {\n    if (this.popupObj && this.mobFilter) {\n      this.popupObj.setProperties({\n        width: this.calcPopupWidth()\n      });\n      this.popupObj.refreshPosition(this.overAllWrapper);\n      this.popupObj.resolveCollision();\n    }\n  };\n\n  MultiSelect.prototype.checkTextLength = function () {\n    return this.targetElement().length < 1;\n  };\n\n  MultiSelect.prototype.popupKeyActions = function (e) {\n    switch (e.keyCode) {\n      case 38:\n        this.hidePopup();\n\n        if (this.mode === 'CheckBox') {\n          this.inputElement.focus();\n        }\n\n        e.preventDefault();\n        break;\n\n      case 40:\n        if (!this.isPopupOpen()) {\n          this.showPopup();\n          e.preventDefault();\n        }\n\n        break;\n    }\n  };\n\n  MultiSelect.prototype.updateAriaAttribute = function () {\n    var focusedItem = this.list.querySelector('.' + dropDownBaseClasses.focus);\n\n    if (!isNullOrUndefined(focusedItem)) {\n      this.inputElement.setAttribute('aria-activedescendant', focusedItem.id);\n    }\n  };\n\n  MultiSelect.prototype.homeNavigation = function (isHome) {\n    this.removeFocus();\n    var scrollEle = this.ulElement.querySelectorAll('li.' + dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');\n\n    if (scrollEle.length > 0) {\n      var element = scrollEle[isHome ? 0 : scrollEle.length - 1];\n      element.classList.add(dropDownBaseClasses.focus);\n      this.scrollBottom(element);\n    }\n  };\n\n  MultiSelect.prototype.onKeyDown = function (e) {\n    if (this.readonly || !this.enabled && this.mode !== 'CheckBox') {\n      return;\n    }\n\n    this.keyDownStatus = true;\n\n    if (e.keyCode > 111 && e.keyCode < 124) {\n      return;\n    }\n\n    if (e.altKey) {\n      this.popupKeyActions(e);\n      return;\n    } else if (this.isPopupOpen()) {\n      var focusedItem = this.list.querySelector('.' + dropDownBaseClasses.focus);\n      var activeIndex = void 0;\n\n      switch (e.keyCode) {\n        case 36:\n        case 35:\n          this.homeNavigation(e.keyCode === 36 ? true : false);\n          break;\n\n        case 33:\n          e.preventDefault();\n\n          if (focusedItem) {\n            this.getIndexByValue(focusedItem.getAttribute('data-value'));\n            this.pageUpSelection(activeIndex - this.getPagingCount());\n            this.updateAriaAttribute();\n          }\n\n          return;\n\n        case 34:\n          e.preventDefault();\n\n          if (focusedItem) {\n            this.getIndexByValue(focusedItem.getAttribute('data-value'));\n            this.pageDownSelection(activeIndex + this.getPagingCount());\n            this.updateAriaAttribute();\n          }\n\n          return;\n\n        case 38:\n          this.arrowUp(e);\n          break;\n\n        case 40:\n          this.arrowDown(e);\n          break;\n\n        case 27:\n          e.preventDefault();\n          this.hidePopup();\n\n          if (this.mode === 'CheckBox') {\n            this.inputElement.focus();\n          }\n\n          return;\n\n        case 13:\n          e.preventDefault();\n\n          if (this.mode !== 'CheckBox') {\n            this.selectByKey(e);\n          }\n\n          this.checkPlaceholderSize();\n          return;\n\n        case 32:\n          this.spaceKeySelection(e);\n          return;\n\n        case 9:\n          e.preventDefault();\n          this.hidePopup();\n          this.inputElement.focus();\n          this.overAllWrapper.classList.add(FOCUS);\n      }\n    } else {\n      switch (e.keyCode) {\n        case 13:\n        case 9:\n        case 16:\n        case 17:\n        case 20:\n          return;\n\n        case 40:\n          if (this.openOnClick) {\n            this.showPopup();\n          }\n\n          break;\n\n        case 27:\n          e.preventDefault();\n          this.escapeAction();\n          return;\n      }\n    }\n\n    if (this.checkTextLength()) {\n      this.keyNavigation(e);\n    }\n\n    if (this.mode === 'CheckBox' && this.enableSelectionOrder) {\n      this.checkBackCommand(e);\n    }\n\n    this.expandTextbox();\n    this.refreshPopup();\n  };\n\n  MultiSelect.prototype.arrowDown = function (e) {\n    e.preventDefault();\n    this.moveByList(1);\n    this.keyAction = true;\n\n    if (document.activeElement.classList.contains('e-input-filter') || this.mode === 'CheckBox' && !this.allowFiltering && document.activeElement !== this.list) {\n      this.list.focus();\n      EventHandler.add(this.list, 'keydown', this.onKeyDown, this);\n    }\n\n    this.updateAriaAttribute();\n  };\n\n  MultiSelect.prototype.arrowUp = function (e) {\n    e.preventDefault();\n    this.keyAction = true;\n    var list = this.list.querySelectorAll('li.' + dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');\n\n    if (this.enableGroupCheckBox && this.mode === 'CheckBox' && !isNullOrUndefined(this.fields.groupBy)) {\n      list = this.list.querySelectorAll('li.' + dropDownBaseClasses.li + ',li.' + dropDownBaseClasses.group + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');\n    }\n\n    var focuseElem = this.list.querySelector('li.' + dropDownBaseClasses.focus);\n    var index = Array.prototype.slice.call(list).indexOf(focuseElem);\n\n    if (index <= 0 && this.mode === 'CheckBox' && this.allowFiltering) {\n      this.keyAction = false;\n      this.notify('inputFocus', {\n        module: 'CheckBoxSelection',\n        enable: this.mode === 'CheckBox',\n        value: 'focus'\n      });\n    } else {\n      this.list.focus();\n    }\n\n    this.moveByList(-1);\n    this.updateAriaAttribute();\n  };\n\n  MultiSelect.prototype.spaceKeySelection = function (e) {\n    if (this.mode === 'CheckBox') {\n      if (!document.activeElement.classList.contains('e-input-filter')) {\n        e.preventDefault();\n        this.keyAction = true;\n        this.list.focus();\n      }\n\n      this.selectByKey(e);\n    }\n\n    this.checkPlaceholderSize();\n  };\n\n  MultiSelect.prototype.checkBackCommand = function (e) {\n    if (e.keyCode === 8 && this.targetElement() === '') {\n      this.backCommand = false;\n    } else {\n      this.backCommand = true;\n    }\n  };\n\n  MultiSelect.prototype.keyNavigation = function (e) {\n    if (this.mode !== 'Delimiter' && this.mode !== 'CheckBox' && this.value && this.value.length) {\n      switch (e.keyCode) {\n        case 37:\n          //left arrow   \n          e.preventDefault();\n          this.moveBy(-1, e);\n          break;\n\n        case 39:\n          //right arrow  \n          e.preventDefault();\n          this.moveBy(1, e);\n          break;\n\n        case 8:\n          this.removelastSelection(e);\n          break;\n\n        case 46:\n          //del\n          this.removeSelectedChip(e);\n          break;\n      }\n    } else if (e.keyCode === 8 && this.mode === 'Delimiter') {\n      if (this.value && this.value.length) {\n        e.preventDefault();\n        var temp = this.value[this.value.length - 1];\n        this.removeValue(temp, e);\n        this.updateDelimeter(this.delimiterChar, e);\n        this.focusAtLastListItem(temp);\n      }\n    }\n  };\n\n  MultiSelect.prototype.selectByKey = function (e) {\n    this.removeChipSelection();\n    this.selectListByKey(e);\n\n    if (this.hideSelectedItem) {\n      this.focusAtFirstListItem();\n    }\n  };\n\n  MultiSelect.prototype.escapeAction = function () {\n    var temp = this.tempValues ? this.tempValues.slice() : [];\n\n    if (this.value && this.validateValues(this.value, temp)) {\n      if (this.mode !== 'CheckBox') {\n        this.value = temp;\n        this.initialValueUpdate();\n      }\n\n      if (this.mode !== 'Delimiter' && this.mode !== 'CheckBox') {\n        this.chipCollectionWrapper.style.display = '';\n      } else {\n        this.showDelimWrapper();\n      }\n\n      this.refreshPlaceHolder();\n\n      if (this.value.length) {\n        this.showOverAllClear();\n      } else {\n        this.hideOverAllClear();\n      }\n    }\n\n    this.makeTextBoxEmpty();\n  };\n\n  MultiSelect.prototype.scrollBottom = function (selectedLI, activeIndex) {\n    var currentOffset = this.list.offsetHeight;\n    var nextBottom = selectedLI.offsetTop + selectedLI.offsetHeight - this.list.scrollTop;\n    var nextOffset = this.list.scrollTop + nextBottom - currentOffset;\n    var boxRange = selectedLI.offsetTop + selectedLI.offsetHeight - this.list.scrollTop;\n    boxRange = this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ? boxRange - this.fixedHeaderElement.offsetHeight : boxRange;\n\n    if (activeIndex === 0) {\n      this.list.scrollTop = 0;\n    } else if (nextBottom > currentOffset) {\n      this.list.scrollTop = nextOffset;\n    } else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {\n      this.list.scrollTop = nextOffset;\n    }\n  };\n\n  MultiSelect.prototype.scrollTop = function (selectedLI, activeIndex) {\n    var nextOffset = selectedLI.offsetTop - this.list.scrollTop;\n    var nextBottom = selectedLI.offsetTop + selectedLI.offsetHeight - this.list.scrollTop;\n    nextOffset = this.fields.groupBy && !isUndefined(this.fixedHeaderElement) ? nextOffset - this.fixedHeaderElement.offsetHeight : nextOffset;\n    var boxRange = selectedLI.offsetTop + selectedLI.offsetHeight - this.list.scrollTop;\n\n    if (activeIndex === 0) {\n      this.list.scrollTop = 0;\n    } else if (nextOffset < 0) {\n      this.list.scrollTop = this.list.scrollTop + nextOffset;\n    } else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {\n      this.list.scrollTop = selectedLI.offsetTop - (this.fields.groupBy && !isUndefined(this.fixedHeaderElement) ? this.fixedHeaderElement.offsetHeight : 0);\n    }\n  };\n\n  MultiSelect.prototype.selectListByKey = function (e) {\n    var li = this.list.querySelector('li.' + dropDownBaseClasses.focus);\n    var limit = this.value && this.value.length ? this.value.length : 0;\n    var target;\n\n    if (li !== null) {\n      if (li.classList.contains('e-active')) {\n        limit = limit - 1;\n      }\n\n      if (this.isValidLI(li) && limit < this.maximumSelectionLength) {\n        this.updateListSelection(li, e);\n        this.addListFocus(li);\n\n        if (this.mode === 'CheckBox') {\n          this.updateDelimView();\n          this.updateDelimeter(this.delimiterChar, e);\n          this.refreshInputHight();\n          this.checkPlaceholderSize();\n\n          if (this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {\n            target = li.firstElementChild.lastElementChild;\n            this.findGroupStart(target);\n            this.deselectHeader();\n          }\n        } else {\n          this.updateDelimeter(this.delimiterChar, e);\n        }\n\n        this.makeTextBoxEmpty();\n\n        if (this.mode !== 'CheckBox') {\n          this.refreshListItems(li.textContent);\n        }\n\n        if (!this.changeOnBlur) {\n          this.updateValueState(e, this.value, this.tempValues);\n        }\n\n        this.refreshPopup();\n      } else {\n        if (!this.isValidLI(li) && limit < this.maximumSelectionLength) {\n          target = li.firstElementChild.lastElementChild;\n          target.classList.contains('e-check') ? this.selectAllItem(false, e, li) : this.selectAllItem(true, e, li);\n        }\n      }\n\n      this.refreshSelection();\n\n      if (this.closePopupOnSelect) {\n        this.hidePopup();\n      }\n    }\n\n    this.refreshPlaceHolder();\n  };\n\n  MultiSelect.prototype.refreshListItems = function (data) {\n    if ((this.allowFiltering || this.mode === 'CheckBox' && this.enableSelectionOrder === true || this.allowCustomValue) && this.mainList && this.listData) {\n      var list = void 0;\n      list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;\n      this.onActionComplete(list, this.mainData);\n      this.focusAtLastListItem(data);\n\n      if (this.value && this.value.length) {\n        this.refreshSelection();\n      }\n    }\n  };\n\n  MultiSelect.prototype.removeSelectedChip = function (e) {\n    var selectedElem = this.chipCollectionWrapper.querySelector('span.' + CHIP_SELECTED);\n    var temp;\n\n    if (selectedElem !== null) {\n      if (!isNullOrUndefined(this.value)) {\n        this.tempValues = this.value.slice();\n      }\n\n      temp = selectedElem.nextElementSibling;\n\n      if (temp !== null) {\n        this.removeChipSelection();\n        this.addChipSelection(temp, e);\n      }\n\n      this.removeValue(selectedElem.getAttribute('data-value'), e);\n      this.makeTextBoxEmpty();\n    }\n\n    if (this.closePopupOnSelect) {\n      this.hidePopup();\n    }\n\n    this.checkPlaceholderSize();\n  };\n\n  MultiSelect.prototype.moveByTop = function (state) {\n    var elements = this.list.querySelectorAll('li.' + dropDownBaseClasses.li);\n    var index;\n\n    if (elements.length > 1) {\n      this.removeFocus();\n      index = state ? 0 : elements.length - 1;\n      this.addListFocus(elements[index]);\n      this.scrollBottom(elements[index], index);\n    }\n\n    this.updateAriaAttribute();\n  };\n\n  MultiSelect.prototype.moveByList = function (position) {\n    if (this.list) {\n      var elements = this.list.querySelectorAll('li.' + dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');\n\n      if (this.mode === 'CheckBox' && this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {\n        elements = this.list.querySelectorAll('li.' + dropDownBaseClasses.li + ',li.' + dropDownBaseClasses.group + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');\n      }\n\n      var selectedElem = this.list.querySelector('li.' + dropDownBaseClasses.focus);\n      var temp = -1;\n\n      if (elements.length) {\n        for (var index = 0; index < elements.length; index++) {\n          if (elements[index] === selectedElem) {\n            temp = index;\n            break;\n          }\n        }\n\n        if (position > 0) {\n          if (temp < elements.length - 1) {\n            this.removeFocus();\n            this.addListFocus(elements[++temp]);\n            this.updateCheck(elements[temp]);\n            this.scrollBottom(elements[temp], temp);\n          }\n        } else {\n          if (temp > 0) {\n            this.removeFocus();\n            this.addListFocus(elements[--temp]);\n            this.updateCheck(elements[temp]);\n            this.scrollTop(elements[temp], temp);\n          }\n        }\n      }\n    }\n  };\n\n  MultiSelect.prototype.updateCheck = function (element) {\n    if (this.mode === 'CheckBox' && this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {\n      var checkElement = element.firstElementChild.lastElementChild;\n\n      if (checkElement.classList.contains('e-check')) {\n        element.classList.add('e-active');\n      } else {\n        element.classList.remove('e-active');\n      }\n    }\n  };\n\n  MultiSelect.prototype.moveBy = function (position, e) {\n    var elements;\n    var selectedElem;\n    var temp;\n    elements = this.chipCollectionWrapper.querySelectorAll('span.' + CHIP);\n    selectedElem = this.chipCollectionWrapper.querySelector('span.' + CHIP_SELECTED);\n\n    if (selectedElem === null) {\n      if (position < 0) {\n        this.addChipSelection(elements[elements.length - 1], e);\n      }\n    } else {\n      if (position < 0) {\n        temp = selectedElem.previousElementSibling;\n\n        if (temp !== null) {\n          this.removeChipSelection();\n          this.addChipSelection(temp, e);\n        }\n      } else {\n        temp = selectedElem.nextElementSibling;\n        this.removeChipSelection();\n\n        if (temp !== null) {\n          this.addChipSelection(temp, e);\n        }\n      }\n    }\n  };\n\n  MultiSelect.prototype.chipClick = function (e) {\n    if (this.enabled) {\n      var elem = closest(e.target, '.' + CHIP);\n      this.removeChipSelection();\n      this.addChipSelection(elem, e);\n    }\n  };\n\n  MultiSelect.prototype.removeChipSelection = function () {\n    if (this.chipCollectionWrapper) {\n      this.removeChipFocus();\n    }\n  };\n\n  MultiSelect.prototype.addChipSelection = function (element, e) {\n    addClass([element], CHIP_SELECTED);\n    this.trigger('chipSelection', e);\n  };\n\n  MultiSelect.prototype.onChipRemove = function (e) {\n    if (e.which === 3 || e.button === 2) {\n      return;\n    }\n\n    if (this.enabled && !this.readonly) {\n      var element = e.target.parentElement;\n      var customVal = element.getAttribute('data-value');\n      var value = this.getFormattedValue(customVal);\n\n      if (this.allowCustomValue && (customVal !== 'false' && value === false || !isNullOrUndefined(value) && value.toString() === 'NaN')) {\n        value = customVal;\n      }\n\n      if (this.isPopupOpen() && this.mode !== 'CheckBox') {\n        this.hidePopup();\n      }\n\n      if (!this.inputFocus) {\n        this.inputElement.focus();\n      }\n\n      this.removeValue(value, e);\n\n      if (isNullOrUndefined(this.findListElement(this.list, 'li', 'data-value', value)) && this.mainList && this.listData) {\n        var list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;\n        this.onActionComplete(list, this.mainData);\n      }\n\n      this.updateDelimeter(this.delimiterChar, e);\n\n      if (this.placeholder && this.floatLabelType === 'Never') {\n        this.makeTextBoxEmpty();\n        this.checkPlaceholderSize();\n      } else {\n        this.inputElement.value = '';\n      }\n\n      e.preventDefault();\n    }\n  };\n\n  MultiSelect.prototype.makeTextBoxEmpty = function () {\n    this.inputElement.value = '';\n    this.refreshPlaceHolder();\n  };\n\n  MultiSelect.prototype.refreshPlaceHolder = function () {\n    if (this.placeholder && this.floatLabelType === 'Never') {\n      if (this.value && this.value.length || !isNullOrUndefined(this.text) && this.text !== '') {\n        this.inputElement.placeholder = '';\n      } else {\n        this.inputElement.placeholder = this.placeholder;\n      }\n    } else {\n      this.setFloatLabelType();\n    }\n\n    this.expandTextbox();\n  };\n\n  MultiSelect.prototype.removeValue = function (value, eve, length, isClearAll) {\n    var _this = this;\n\n    var index = this.value.indexOf(this.getFormattedValue(value));\n\n    if (index === -1 && this.allowCustomValue && !isNullOrUndefined(value)) {\n      index = this.value.indexOf(value.toString());\n    }\n\n    var targetEle = eve && eve.target;\n    isClearAll = isClearAll || targetEle && targetEle.classList.contains('e-close-hooker') ? true : null;\n    var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;\n\n    if (index !== -1) {\n      var element_1 = this.findListElement(this.list, 'li', 'data-value', value);\n      var val_1 = this.getDataByValue(value);\n      var eventArgs = {\n        e: eve,\n        item: element_1,\n        itemData: val_1,\n        isInteracted: eve ? true : false,\n        cancel: false\n      };\n      this.trigger('removing', eventArgs, function (eventArgs) {\n        if (eventArgs.cancel) {\n          _this.removeIndex++;\n        } else {\n          var removeVal = _this.value.slice(0);\n\n          removeVal.splice(index, 1);\n\n          if (isBlazor() && _this.isServerRendered) {\n            var removedValues = [].concat([], removeVal);\n\n            _this.setProperties({\n              value: removedValues.length === 0 ? null : removedValues\n            }, true);\n          } else {\n            _this.setProperties({\n              value: [].concat([], removeVal)\n            }, true);\n          }\n\n          if (element_1 !== null) {\n            var hideElement = _this.findListElement(_this.mainList, 'li', 'data-value', value);\n\n            element_1.setAttribute('aria-selected', 'false');\n            removeClass([element_1], className);\n\n            if (hideElement) {\n              hideElement.setAttribute('aria-selected', 'false');\n              removeClass([element_1, hideElement], className);\n            }\n\n            _this.notify('activeList', {\n              module: 'CheckBoxSelection',\n              enable: _this.mode === 'CheckBox',\n              li: element_1,\n              e: _this,\n              index: index\n            });\n\n            _this.notify('updatelist', {\n              module: 'CheckBoxSelection',\n              enable: _this.mode === 'CheckBox',\n              li: element_1,\n              e: eve\n            });\n\n            attributes(_this.inputElement, {\n              'aria-activedescendant': element_1.id\n            });\n\n            if (_this.value && _this.value.length !== _this.mainData.length && _this.mode === 'CheckBox' && _this.showSelectAll) {\n              _this.notify('checkSelectAll', {\n                module: 'CheckBoxSelection',\n                enable: _this.mode === 'CheckBox',\n                value: 'uncheck'\n              });\n            }\n          }\n\n          if (_this.hideSelectedItem && _this.fields.groupBy) {\n            _this.hideGroupItem(value);\n          }\n\n          _this.updateMainList(true, value);\n\n          _this.removeChip(value);\n\n          _this.updateChipStatus();\n\n          var limit = _this.value && _this.value.length ? _this.value.length : 0;\n\n          if (limit < _this.maximumSelectionLength) {\n            var collection = _this.list.querySelectorAll('li.' + dropDownBaseClasses.li + ':not(.e-active)');\n\n            removeClass(collection, 'e-disable');\n          }\n\n          _this.trigger('removed', eventArgs);\n\n          var targetEle_1 = eve && eve.currentTarget;\n          var isSelectAll = targetEle_1 && targetEle_1.classList.contains('e-selectall-parent') ? true : null;\n\n          if (!_this.changeOnBlur && !isClearAll && eve && length && !isSelectAll) {\n            _this.updateValueState(eve, _this.value, _this.tempValues);\n          }\n\n          if (length) {\n            _this.selectAllEventData.push(val_1);\n\n            _this.selectAllEventEle.push(element_1);\n          }\n\n          if (length === 1) {\n            if (!_this.changeOnBlur) {\n              _this.updateValueState(eve, _this.value, _this.tempValues);\n            }\n\n            var args = {\n              event: eve,\n              items: _this.selectAllEventEle,\n              itemData: _this.selectAllEventData,\n              isInteracted: eve ? true : false,\n              isChecked: false\n            };\n\n            _this.trigger('selectedAll', args);\n\n            _this.selectAllEventData = [];\n            _this.selectAllEventEle = [];\n          }\n\n          if (isClearAll && (length === 1 || length === null)) {\n            _this.clearAllCallback(eve, isClearAll);\n          }\n\n          if (isBlazor() && _this.isServerRendered && (isNullOrUndefined(_this.value) || _this.value.length === 0)) {\n            _this.updatedataValueItems(eve);\n          }\n        }\n      });\n    }\n  };\n\n  MultiSelect.prototype.updateMainList = function (state, value) {\n    if (this.allowFiltering || this.mode === 'CheckBox') {\n      var element2 = this.findListElement(this.mainList, 'li', 'data-value', value);\n\n      if (element2) {\n        if (state) {\n          element2.setAttribute('aria-selected', 'false');\n          removeClass([element2], this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected);\n\n          if (this.mode === 'CheckBox') {\n            element2.firstElementChild.setAttribute('aria-checked', 'false');\n            removeClass([element2.firstElementChild.lastElementChild], 'e-check');\n          }\n        } else {\n          element2.setAttribute('aria-selected', 'true');\n          addClass([element2], this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected);\n\n          if (this.mode === 'CheckBox') {\n            element2.firstElementChild.setAttribute('aria-checked', 'true');\n            addClass([element2.firstElementChild.lastElementChild], 'e-check');\n          }\n        }\n      }\n    }\n  };\n\n  MultiSelect.prototype.removeChip = function (value) {\n    if (this.chipCollectionWrapper) {\n      var element = this.findListElement(this.chipCollectionWrapper, 'span', 'data-value', value);\n\n      if (element) {\n        remove(element);\n      }\n    }\n  };\n\n  MultiSelect.prototype.setWidth = function (width) {\n    if (!isNullOrUndefined(width)) {\n      if (typeof width === 'number') {\n        this.overAllWrapper.style.width = formatUnit(width);\n      } else if (typeof width === 'string') {\n        this.overAllWrapper.style.width = width.match(/px|%|em/) ? width : formatUnit(width);\n      }\n    }\n  };\n\n  MultiSelect.prototype.updateChipStatus = function () {\n    if (this.value && this.value.length) {\n      if (!isNullOrUndefined(this.chipCollectionWrapper)) {\n        this.chipCollectionWrapper.style.display = '';\n      }\n\n      if (this.mode === 'Delimiter' || this.mode === 'CheckBox') {\n        this.showDelimWrapper();\n      }\n\n      this.showOverAllClear();\n    } else {\n      if (!isNullOrUndefined(this.chipCollectionWrapper)) {\n        this.chipCollectionWrapper.style.display = 'none';\n      }\n\n      if (!isNullOrUndefined(this.delimiterWrapper)) {\n        this.delimiterWrapper.style.display = 'none';\n      }\n\n      this.hideOverAllClear();\n    }\n  };\n\n  MultiSelect.prototype.addValue = function (value, text, eve) {\n    if (!this.value) {\n      this.value = [];\n    }\n\n    if (this.value.indexOf(value) < 0) {\n      this.setProperties({\n        value: [].concat([], this.value, [value])\n      }, true);\n    }\n\n    var element = this.findListElement(this.list, 'li', 'data-value', value);\n    this.removeFocus();\n\n    if (element) {\n      this.addListFocus(element);\n      this.addListSelection(element);\n    }\n\n    if (this.mode !== 'Delimiter' && this.mode !== 'CheckBox') {\n      this.addChip(text, value, eve);\n    }\n\n    if (this.hideSelectedItem && this.fields.groupBy) {\n      this.hideGroupItem(value);\n    }\n\n    this.updateChipStatus();\n    this.checkMaxSelection();\n  };\n\n  MultiSelect.prototype.checkMaxSelection = function () {\n    var limit = this.value && this.value.length ? this.value.length : 0;\n\n    if (limit === this.maximumSelectionLength) {\n      var collection = this.list.querySelectorAll('li.' + dropDownBaseClasses.li + ':not(.e-active)');\n      addClass(collection, 'e-disable');\n    }\n  };\n\n  MultiSelect.prototype.dispatchSelect = function (value, eve, element, isNotTrigger, length) {\n    var _this = this;\n\n    if (this.initStatus && !isNotTrigger) {\n      var val_2 = this.getDataByValue(value);\n      var eventArgs = {\n        e: eve,\n        item: element,\n        itemData: val_2,\n        isInteracted: eve ? true : false,\n        cancel: false\n      };\n      this.trigger('select', eventArgs, function (eventArgs) {\n        if (!eventArgs.cancel) {\n          if (length) {\n            _this.selectAllEventData.push(val_2);\n\n            _this.selectAllEventEle.push(element);\n          }\n\n          if (length === 1) {\n            var args = {\n              event: eve,\n              items: _this.selectAllEventEle,\n              itemData: _this.selectAllEventData,\n              isInteracted: eve ? true : false,\n              isChecked: true\n            };\n\n            _this.trigger('selectedAll', args);\n\n            _this.selectAllEventData = [];\n          }\n\n          _this.updateListSelectEventCallback(value, element, eve);\n        }\n      });\n    }\n  };\n\n  MultiSelect.prototype.addChip = function (text, value, e) {\n    if (this.chipCollectionWrapper) {\n      this.getChip(text, value, e);\n    }\n  };\n\n  MultiSelect.prototype.removeChipFocus = function () {\n    var elements;\n    var closeElements;\n    elements = this.chipCollectionWrapper.querySelectorAll('span.' + CHIP);\n    closeElements = this.chipCollectionWrapper.querySelectorAll('span.' + CHIP_CLOSE.split(' ')[0]);\n    removeClass(elements, CHIP_SELECTED);\n\n    if (Browser.isDevice) {\n      for (var index = 0; index < closeElements.length; index++) {\n        closeElements[index].style.display = 'none';\n      }\n    }\n  };\n\n  MultiSelect.prototype.onMobileChipInteraction = function (e) {\n    var chipElem = closest(e.target, '.' + CHIP);\n    var chipClose = chipElem.querySelector('span.' + CHIP_CLOSE.split(' ')[0]);\n\n    if (this.enabled && !this.readonly) {\n      if (!chipElem.classList.contains(CHIP_SELECTED)) {\n        this.removeChipFocus();\n        chipClose.style.display = '';\n        chipElem.classList.add(CHIP_SELECTED);\n      }\n\n      this.refreshPopup();\n      e.preventDefault();\n    }\n  };\n\n  MultiSelect.prototype.multiCompiler = function (multiselectTemplate) {\n    var checkTemplate = false;\n\n    if (multiselectTemplate) {\n      var exception = void 0;\n\n      try {\n        checkTemplate = document.querySelectorAll(multiselectTemplate).length ? true : false;\n      } catch (exception) {\n        checkTemplate = false;\n      }\n    }\n\n    return checkTemplate;\n  };\n\n  MultiSelect.prototype.getChip = function (data, value, e) {\n    var _this = this;\n\n    var itemData = {\n      text: value,\n      value: value\n    };\n    var chip = this.createElement('span', {\n      className: CHIP,\n      attrs: {\n        'data-value': value,\n        'title': data\n      }\n    });\n    var compiledString;\n    var chipContent = this.createElement('span', {\n      className: CHIP_CONTENT\n    });\n    var chipClose = this.createElement('span', {\n      className: CHIP_CLOSE\n    });\n\n    if (this.mainData) {\n      itemData = isBlazor() && this.isServerRendered ? JSON.parse(JSON.stringify(this.getDataByValue(value))) : this.getDataByValue(value);\n    }\n\n    if (this.valueTemplate && !isNullOrUndefined(itemData)) {\n      var valuecheck = this.multiCompiler(this.valueTemplate);\n\n      if (valuecheck) {\n        compiledString = compile(document.querySelector(this.valueTemplate).innerHTML.trim());\n      } else {\n        compiledString = compile(this.valueTemplate);\n      }\n\n      for (var _i = 0, _a = compiledString(itemData, null, null, this.valueTemplateId, this.isStringTemplate); _i < _a.length; _i++) {\n        var item = _a[_i];\n        chipContent.appendChild(item);\n      }\n\n      this.DropDownBaseupdateBlazorTemplates(false, false, false, false, true, false, false, false);\n    } else if (this.enableHtmlSanitizer) {\n      chipContent.innerText = data;\n    } else {\n      chipContent.innerHTML = data;\n    }\n\n    chip.appendChild(chipContent);\n    var eventArgs = {\n      isInteracted: e ? true : false,\n      itemData: itemData,\n      e: e,\n      setClass: function (classes) {\n        addClass([chip], classes);\n      },\n      cancel: false\n    };\n    this.trigger('tagging', eventArgs, function (eventArgs) {\n      if (!eventArgs.cancel) {\n        if (eventArgs.setClass && typeof eventArgs.setClass === 'string' && isBlazor() && _this.isServerRendered) {\n          addClass([chip], eventArgs.setClass);\n        }\n\n        if (Browser.isDevice) {\n          chip.classList.add(MOBILE_CHIP);\n          append([chipClose], chip);\n          chipClose.style.display = 'none';\n          EventHandler.add(chip, 'click', _this.onMobileChipInteraction, _this);\n        } else {\n          EventHandler.add(chip, 'mousedown', _this.chipClick, _this);\n\n          if (_this.showClearButton) {\n            chip.appendChild(chipClose);\n          }\n        }\n\n        EventHandler.add(chipClose, 'mousedown', _this.onChipRemove, _this);\n\n        _this.chipCollectionWrapper.appendChild(chip);\n\n        if (!_this.changeOnBlur && e) {\n          _this.updateValueState(e, _this.value, _this.tempValues);\n        }\n      }\n    });\n  };\n\n  MultiSelect.prototype.calcPopupWidth = function () {\n    var width = formatUnit(this.popupWidth);\n\n    if (width.indexOf('%') > -1) {\n      var inputWidth = this.componentWrapper.offsetWidth * parseFloat(width) / 100;\n      width = inputWidth.toString() + 'px';\n    }\n\n    return width;\n  };\n\n  MultiSelect.prototype.mouseIn = function () {\n    if (this.enabled && !this.readonly) {\n      this.showOverAllClear();\n    }\n  };\n\n  MultiSelect.prototype.mouseOut = function () {\n    if (!this.inputFocus) {\n      this.overAllClear.style.display = 'none';\n    }\n  };\n\n  MultiSelect.prototype.listOption = function (dataSource, fields) {\n    var iconCss = isNullOrUndefined(fields.iconCss) ? false : true;\n    var fieldProperty = isNullOrUndefined(fields.properties) ? fields : fields.properties;\n    this.listCurrentOptions = fields.text !== null || fields.value !== null ? {\n      fields: fieldProperty,\n      showIcon: iconCss,\n      ariaAttributes: {\n        groupItemRole: 'presentation'\n      }\n    } : {\n      fields: {\n        value: 'text'\n      }\n    };\n    extend(this.listCurrentOptions, this.listCurrentOptions, fields, true);\n\n    if (this.mode === 'CheckBox') {\n      this.notify('listoption', {\n        module: 'CheckBoxSelection',\n        enable: this.mode === 'CheckBox',\n        dataSource: dataSource,\n        fieldProperty: fieldProperty\n      });\n    }\n\n    return this.listCurrentOptions;\n  };\n\n  MultiSelect.prototype.renderPopup = function () {\n    var _this = this;\n\n    if (!this.list) {\n      _super.prototype.render.call(this);\n    }\n\n    if (!this.popupObj) {\n      var args = {\n        cancel: false\n      };\n      this.trigger('beforeOpen', args, function (args) {\n        if (!args.cancel) {\n          document.body.appendChild(_this.popupWrapper);\n\n          var checkboxFilter = _this.popupWrapper.querySelector('.' + FILTERPARENT);\n\n          if (_this.mode === 'CheckBox' && !_this.allowFiltering && checkboxFilter && _this.filterParent) {\n            checkboxFilter.remove();\n            _this.filterParent = null;\n          }\n\n          var overAllHeight = parseInt(_this.popupHeight, 10);\n          _this.popupWrapper.style.visibility = 'hidden';\n\n          if (_this.headerTemplate) {\n            _this.setHeaderTemplate();\n\n            overAllHeight -= _this.header.offsetHeight;\n          }\n\n          append([_this.list], _this.popupWrapper);\n\n          if (_this.footerTemplate) {\n            _this.setFooterTemplate();\n\n            overAllHeight -= _this.footer.offsetHeight;\n          }\n\n          if (_this.mode === 'CheckBox' && _this.showSelectAll) {\n            _this.notify('selectAll', {\n              module: 'CheckBoxSelection',\n              enable: _this.mode === 'CheckBox'\n            });\n\n            overAllHeight -= _this.selectAllHeight;\n          } else if (_this.mode === 'CheckBox' && !_this.showSelectAll && (!_this.headerTemplate || !_this.footerTemplate)) {\n            _this.notify('selectAll', {\n              module: 'CheckBoxSelection',\n              enable: _this.mode === 'CheckBox'\n            });\n\n            overAllHeight = parseInt(_this.popupHeight, 10);\n          } else if (_this.mode === 'CheckBox' && !_this.showSelectAll) {\n            _this.notify('selectAll', {\n              module: 'CheckBoxSelection',\n              enable: _this.mode === 'CheckBox'\n            });\n\n            overAllHeight = parseInt(_this.popupHeight, 10);\n\n            if (_this.headerTemplate && _this.header) {\n              overAllHeight -= _this.header.offsetHeight;\n            }\n\n            if (_this.footerTemplate && _this.footer) {\n              overAllHeight -= _this.footer.offsetHeight;\n            }\n          }\n\n          if (_this.mode === 'CheckBox') {\n            var args_1 = {\n              module: 'CheckBoxSelection',\n              enable: _this.mode === 'CheckBox',\n              popupElement: _this.popupWrapper\n            };\n\n            if (_this.allowFiltering) {\n              _this.notify('searchBox', args_1);\n\n              overAllHeight -= _this.searchBoxHeight;\n            }\n\n            addClass([_this.popupWrapper], 'e-checkbox');\n          }\n\n          if (_this.popupHeight !== 'auto') {\n            _this.list.style.maxHeight = formatUnit(overAllHeight);\n            _this.popupWrapper.style.maxHeight = formatUnit(_this.popupHeight);\n          } else {\n            _this.list.style.maxHeight = formatUnit(_this.popupHeight);\n          }\n\n          _this.popupObj = new Popup(_this.popupWrapper, {\n            width: _this.calcPopupWidth(),\n            targetType: 'relative',\n            position: {\n              X: 'left',\n              Y: 'bottom'\n            },\n            relateTo: _this.overAllWrapper,\n            collision: {\n              X: 'flip',\n              Y: 'flip'\n            },\n            offsetY: 1,\n            enableRtl: _this.enableRtl,\n            zIndex: _this.zIndex,\n            close: function () {\n              if (_this.popupObj.element.parentElement) {\n                _this.popupObj.unwireScrollEvents();\n\n                detach(_this.popupObj.element);\n              }\n            },\n            open: function () {\n              _this.popupObj.resolveCollision();\n\n              if (!_this.isFirstClick) {\n                var ulElement = _this.list.querySelector('ul');\n\n                if (ulElement) {\n                  if (_this.itemTemplate && isBlazor() && _this.isServerRendered) {\n                    setTimeout(function () {\n                      _this.mainList = _this.ulElement;\n                    }, 0);\n                  } else if (!(_this.mode !== 'CheckBox' && (_this.allowFiltering || _this.allowCustomValue) && _this.targetElement().trim() !== '')) {\n                    _this.mainList = ulElement.cloneNode ? ulElement.cloneNode(true) : ulElement;\n                  }\n                }\n\n                _this.isFirstClick = true;\n              }\n\n              _this.popupObj.wireScrollEvents();\n\n              if (!(_this.mode !== 'CheckBox' && (_this.allowFiltering || _this.allowCustomValue) && _this.targetElement().trim() !== '')) {\n                _this.loadTemplate();\n              }\n\n              _this.setScrollPosition();\n\n              if (_this.allowFiltering) {\n                _this.notify('inputFocus', {\n                  module: 'CheckBoxSelection',\n                  enable: _this.mode === 'CheckBox',\n                  value: 'focus'\n                });\n              }\n            },\n            targetExitViewport: function () {\n              if (!Browser.isDevice) {\n                _this.hidePopup();\n              }\n            }\n          });\n\n          if (_this.mode === 'CheckBox' && Browser.isDevice && _this.allowFiltering) {\n            _this.notify('deviceSearchBox', {\n              module: 'CheckBoxSelection',\n              enable: _this.mode === 'CheckBox'\n            });\n          }\n\n          _this.popupObj.close();\n\n          _this.popupWrapper.style.visibility = '';\n        }\n      });\n    }\n  };\n\n  MultiSelect.prototype.setHeaderTemplate = function () {\n    var compiledString;\n\n    if (this.header) {\n      this.header.remove();\n    }\n\n    this.header = this.createElement('div');\n    addClass([this.header], HEADER);\n    var headercheck = this.multiCompiler(this.headerTemplate);\n\n    if (headercheck) {\n      compiledString = compile(document.querySelector(this.headerTemplate).innerHTML.trim());\n    } else {\n      compiledString = compile(this.headerTemplate);\n    }\n\n    var elements = compiledString({}, null, null, this.headerTemplateId, this.isStringTemplate);\n\n    for (var temp = 0; temp < elements.length; temp++) {\n      this.header.appendChild(elements[temp]);\n    }\n\n    this.DropDownBaseupdateBlazorTemplates(false, false, false, false, false, true, false);\n\n    if (this.mode === 'CheckBox' && this.showSelectAll) {\n      prepend([this.header], this.popupWrapper);\n    } else {\n      append([this.header], this.popupWrapper);\n    }\n\n    EventHandler.add(this.header, 'mousedown', this.onListMouseDown, this);\n  };\n\n  MultiSelect.prototype.setFooterTemplate = function () {\n    var compiledString;\n\n    if (this.footer) {\n      this.footer.remove();\n    }\n\n    this.footer = this.createElement('div');\n    addClass([this.footer], FOOTER);\n    var footercheck = this.multiCompiler(this.footerTemplate);\n\n    if (footercheck) {\n      compiledString = compile(document.querySelector(this.footerTemplate).innerHTML.trim());\n    } else {\n      compiledString = compile(this.footerTemplate);\n    }\n\n    var elements = compiledString({}, null, null, this.footerTemplateId, this.isStringTemplate);\n\n    for (var temp = 0; temp < elements.length; temp++) {\n      this.footer.appendChild(elements[temp]);\n    }\n\n    this.DropDownBaseupdateBlazorTemplates(false, false, false, false, false, false, true);\n    append([this.footer], this.popupWrapper);\n    EventHandler.add(this.footer, 'mousedown', this.onListMouseDown, this);\n  };\n\n  MultiSelect.prototype.ClearAll = function (e) {\n    if (this.enabled && !this.readonly) {\n      var temp = void 0;\n\n      if (this.value && this.value.length > 0) {\n        var liElement = this.list && this.list.querySelectorAll('li.e-list-item');\n\n        if (liElement && liElement.length > 0) {\n          this.selectAllItems(false, e);\n        } else {\n          this.removeIndex = 0;\n\n          for (temp = this.value[this.removeIndex]; this.removeIndex < this.value.length; temp = this.value[this.removeIndex]) {\n            this.removeValue(temp, e, null, true);\n\n            if (this.value === null && isBlazor() && this.isServerRendered) {\n              break;\n            }\n          }\n        }\n      } else {\n        this.clearAllCallback(e);\n      }\n    }\n  };\n\n  MultiSelect.prototype.clearAllCallback = function (e, isClearAll) {\n    var tempValues = this.value ? this.value.slice() : [];\n\n    if (this.mainList && this.listData && (this.allowFiltering && this.mode !== 'CheckBox' || this.allowCustomValue)) {\n      var list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;\n      this.onActionComplete(list, this.mainData);\n    }\n\n    this.focusAtFirstListItem();\n    this.updateDelimeter(this.delimiterChar, e);\n\n    if (this.mode !== 'Box' && (!this.inputFocus || this.mode === 'CheckBox')) {\n      this.updateDelimView();\n    }\n\n    this.makeTextBoxEmpty();\n    this.checkPlaceholderSize();\n\n    if (this.isPopupOpen()) {\n      this.refreshPopup();\n    }\n\n    if (!this.inputFocus) {\n      if (this.changeOnBlur) {\n        this.updateValueState(e, this.value, tempValues);\n      }\n\n      if (this.mode !== 'CheckBox') {\n        this.inputElement.focus();\n      }\n    }\n\n    if (this.mode === 'CheckBox') {\n      this.refreshPlaceHolder();\n      this.refreshInputHight();\n\n      if (this.changeOnBlur && isClearAll && (isNullOrUndefined(this.value) || this.value.length === 0)) {\n        this.updateValueState(e, this.value, this.tempValues);\n      }\n    }\n\n    if (!this.changeOnBlur && isClearAll && (isNullOrUndefined(this.value) || this.value.length === 0)) {\n      this.updateValueState(e, this.value, this.tempValues);\n    }\n\n    if (this.mode === 'CheckBox' && this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {\n      this.updateListItems(this.list.querySelectorAll('li.e-list-item'), this.mainList.querySelectorAll('li.e-list-item'));\n    }\n\n    e.preventDefault();\n  };\n\n  MultiSelect.prototype.windowResize = function () {\n    this.refreshPopup();\n\n    if ((!this.inputFocus || this.mode === 'CheckBox') && this.viewWrapper && this.viewWrapper.parentElement) {\n      this.updateDelimView();\n    }\n  };\n\n  MultiSelect.prototype.resetValueHandler = function (e) {\n    var formElement = closest(this.inputElement, 'form');\n\n    if (formElement && e.target === formElement) {\n      var textVal = this.element.tagName === this.getNgDirective() ? null : this.element.getAttribute('data-initial-value');\n      this.text = textVal;\n    }\n  };\n\n  MultiSelect.prototype.wireEvent = function () {\n    EventHandler.add(this.componentWrapper, 'mousedown', this.wrapperClick, this);\n    EventHandler.add(window, 'resize', this.windowResize, this);\n    EventHandler.add(this.inputElement, 'focus', this.focusInHandler, this);\n    EventHandler.add(this.inputElement, 'keydown', this.onKeyDown, this);\n    EventHandler.add(this.inputElement, 'keyup', this.KeyUp, this);\n\n    if (this.mode !== 'CheckBox') {\n      EventHandler.add(this.inputElement, 'input', this.onInput, this);\n    }\n\n    EventHandler.add(this.inputElement, 'blur', this.onBlur, this);\n    EventHandler.add(this.componentWrapper, 'mousemove', this.mouseIn, this);\n    var formElement = closest(this.inputElement, 'form');\n\n    if (formElement) {\n      EventHandler.add(formElement, 'reset', this.resetValueHandler, this);\n    }\n\n    EventHandler.add(this.componentWrapper, 'mouseout', this.mouseOut, this);\n    EventHandler.add(this.overAllClear, 'mouseup', this.ClearAll, this);\n    EventHandler.add(this.inputElement, 'paste', this.pasteHandler, this);\n  };\n\n  MultiSelect.prototype.onInput = function (e) {\n    if (this.keyDownStatus) {\n      this.isValidKey = true;\n    } else {\n      this.isValidKey = false;\n    }\n\n    this.keyDownStatus = false; // For Filtering works in mobile firefox\n\n    if (Browser.isDevice && Browser.info.name === 'mozilla') {\n      this.search(e);\n    }\n  };\n\n  MultiSelect.prototype.pasteHandler = function (event) {\n    var _this = this;\n\n    setTimeout(function () {\n      _this.search(event);\n    });\n  };\n\n  MultiSelect.prototype.search = function (e) {\n    var _this = this;\n\n    if (!this.isPopupOpen() && this.openOnClick) {\n      this.showPopup();\n    }\n\n    this.openClick(e);\n\n    if (this.checkTextLength() && !this.allowFiltering && e.keyCode !== 8) {\n      this.focusAtFirstListItem();\n    } else {\n      var text = this.targetElement();\n      this.keyCode = e.keyCode;\n\n      if (this.allowFiltering) {\n        var eventArgs_1 = {\n          preventDefaultAction: false,\n          text: this.targetElement(),\n          updateData: function (dataSource, query, fields) {\n            if (eventArgs_1.cancel) {\n              return;\n            }\n\n            _this.isFiltered = true;\n            _this.remoteFilterAction = true;\n\n            _this.dataUpdater(dataSource, query, fields);\n          },\n          event: e,\n          cancel: false\n        };\n        this.trigger('filtering', eventArgs_1, function (eventArgs) {\n          if (!eventArgs.cancel) {\n            if (!_this.isFiltered && !eventArgs.preventDefaultAction) {\n              _this.filterAction = true;\n\n              _this.dataUpdater(_this.dataSource, null, _this.fields);\n            }\n          }\n        });\n      } else if (this.allowCustomValue) {\n        var query = new Query();\n        query = text !== '' ? query.where(this.fields.text, 'startswith', text, this.ignoreCase, this.ignoreAccent) : query;\n        this.dataUpdater(this.mainData, query, this.fields);\n      } else {\n        var liCollections = void 0;\n        liCollections = this.list.querySelectorAll('li.' + dropDownBaseClasses.li + ':not(.e-hide-listitem)');\n        var activeElement = Search(this.targetElement(), liCollections, 'StartsWith', this.ignoreCase);\n\n        if (activeElement && activeElement.item !== null) {\n          this.addListFocus(activeElement.item);\n          this.list.scrollTop = activeElement.item.offsetHeight * activeElement.index;\n        } else if (this.targetElement() !== '') {\n          this.removeFocus();\n        } else {\n          this.focusAtFirstListItem();\n        }\n      }\n    }\n  };\n\n  MultiSelect.prototype.preRender = function () {\n    if (this.allowFiltering === null) {\n      this.allowFiltering = this.mode === 'CheckBox' ? true : false;\n    }\n\n    this.initializeData();\n    this.updateDataAttribute(this.htmlAttributes);\n\n    _super.prototype.preRender.call(this);\n  };\n\n  MultiSelect.prototype.getLocaleName = function () {\n    return 'multi-select';\n  };\n\n  ;\n\n  MultiSelect.prototype.initializeData = function () {\n    this.mainListCollection = [];\n    this.beforePopupOpen = false;\n    this.filterAction = false;\n    this.remoteFilterAction = false;\n    this.isFirstClick = false;\n    this.mobFilter = true;\n    this.isFiltered = false;\n    this.focused = true;\n    this.initial = true;\n    this.backCommand = true;\n  };\n\n  MultiSelect.prototype.updateData = function (delimiterChar, e) {\n    var data = '';\n    var delim = this.mode === 'Delimiter' || this.mode === 'CheckBox';\n    var text = [];\n    var temp;\n    var tempData = this.listData;\n    this.listData = this.mainData;\n    this.hiddenElement.innerHTML = '';\n\n    if (!isNullOrUndefined(this.value)) {\n      for (var index = 0; !isNullOrUndefined(this.value[index]); index++) {\n        if (this.listData) {\n          temp = this.getTextByValue(this.value[index]);\n        } else {\n          temp = this.value[index];\n        }\n\n        data += temp + delimiterChar + ' ';\n        text.push(temp);\n        this.hiddenElement.innerHTML += '<option selected value =\"' + this.value[index] + '\">' + index + '</option>';\n      }\n    }\n\n    this.setProperties({\n      text: text.toString()\n    }, true);\n\n    if (delim) {\n      this.updateWrapperText(this.delimiterWrapper, data);\n      this.delimiterWrapper.setAttribute('id', getUniqueID('delim_val'));\n      this.inputElement.setAttribute('aria-describedby', this.delimiterWrapper.id);\n    }\n\n    var targetEle = e && e.target;\n    var isClearAll = targetEle && targetEle.classList.contains('e-close-hooker') ? true : null;\n\n    if (!this.changeOnBlur && e && !isClearAll || this.isSelectAll) {\n      this.isSelectAll = false;\n      this.updateValueState(e, this.value, this.tempValues);\n    }\n\n    this.listData = tempData;\n    this.addValidInputClass();\n  };\n\n  MultiSelect.prototype.initialTextUpdate = function () {\n    if (!isNullOrUndefined(this.text)) {\n      var textArr = this.text.split(this.delimiterChar);\n      var textVal = [];\n\n      for (var index = 0; textArr.length > index; index++) {\n        var val = this.getValueByText(textArr[index]);\n\n        if (!isNullOrUndefined(val)) {\n          textVal.push(val);\n        } else if (this.allowCustomValue) {\n          textVal.push(textArr[index]);\n        }\n      }\n\n      if (textVal && textVal.length) {\n        this.setProperties({\n          value: textVal\n        }, true);\n      }\n    } else {\n      this.setProperties({\n        value: null\n      }, true);\n    }\n  };\n\n  MultiSelect.prototype.renderList = function (isEmptyData) {\n    if (!isEmptyData && this.allowCustomValue && this.list && (this.list.textContent === this.noRecordsTemplate || this.list.querySelector('.e-ul') && this.list.querySelector('.e-ul').childElementCount === 0)) {\n      isEmptyData = true;\n    }\n\n    _super.prototype.render.call(this, isEmptyData);\n\n    this.unwireListEvents();\n    this.wireListEvents();\n  };\n\n  MultiSelect.prototype.initialValueUpdate = function () {\n    if (this.list) {\n      var text = void 0;\n      var textField = void 0;\n      var valueField = void 0;\n      var element = void 0;\n      var value = void 0;\n\n      if (this.chipCollectionWrapper) {\n        this.chipCollectionWrapper.innerHTML = '';\n      }\n\n      this.removeListSelection();\n\n      if (!isNullOrUndefined(this.value)) {\n        for (var index = 0; !isNullOrUndefined(this.value[index]); index++) {\n          value = this.value[index];\n          element = this.findListElement(this.hideSelectedItem ? this.ulElement : this.list, 'li', 'data-value', value);\n          text = this.getTextByValue(value);\n\n          if (element && element.getAttribute('aria-selected') !== 'true' || element && element.getAttribute('aria-selected') === 'true' && this.hideSelectedItem && (this.mode === 'Box' || this.mode === 'Default')) {\n            this.addChip(text, value);\n            this.addListSelection(element);\n          } else if (value && this.allowCustomValue) {\n            var indexItem = this.listData.length;\n            var newValue = {};\n            setValue(this.fields.text, value, newValue);\n            setValue(this.fields.value, value, newValue);\n            var noDataEle = this.popupWrapper.querySelector('.' + dropDownBaseClasses.noData);\n            this.addItem(newValue, indexItem);\n\n            if (this.popupWrapper.contains(noDataEle)) {\n              this.list.setAttribute('style', noDataEle.getAttribute('style'));\n              this.popupWrapper.replaceChild(this.list, noDataEle);\n              this.wireListEvents();\n            }\n\n            this.addChip(text, value);\n            this.addListSelection(element);\n          }\n        }\n      }\n\n      if (this.mode === 'CheckBox') {\n        this.updateDelimView();\n\n        if (this.changeOnBlur) {\n          this.updateValueState(null, this.value, this.tempValues);\n        }\n\n        this.updateDelimeter(this.delimiterChar);\n        this.refreshInputHight();\n      } else {\n        this.updateDelimeter(this.delimiterChar);\n      }\n\n      if (this.mode === 'CheckBox' && this.showSelectAll && (isNullOrUndefined(this.value) || !this.value.length)) {\n        this.notify('checkSelectAll', {\n          module: 'CheckBoxSelection',\n          enable: this.mode === 'CheckBox',\n          value: 'uncheck'\n        });\n      }\n\n      if (this.mode === 'Box') {\n        this.chipCollectionWrapper.style.display = '';\n      } else if (this.mode === 'Delimiter' || this.mode === 'CheckBox') {\n        this.showDelimWrapper();\n      }\n    }\n  };\n\n  MultiSelect.prototype.updateActionCompleteData = function (li, item) {\n    if (this.value && this.value.indexOf(li.getAttribute('data-value')) > -1) {\n      this.mainList = this.ulElement;\n      addClass([li], HIDE_LIST);\n    }\n  };\n\n  MultiSelect.prototype.updateAddItemList = function (list, itemCount) {\n    if (this.popupObj && this.popupObj.element && this.popupObj.element.querySelector('.' + dropDownBaseClasses.noData) && list) {\n      this.list = list;\n      this.mainList = this.ulElement = list.querySelector('ul');\n      remove(this.popupWrapper.querySelector('.e-content'));\n      this.popupObj = null;\n      this.renderPopup();\n    }\n  };\n\n  MultiSelect.prototype.updateDataList = function () {\n    if (this.mainList && this.ulElement && this.mainList.childElementCount < this.ulElement.childElementCount) {\n      this.mainList = this.ulElement.cloneNode ? this.ulElement.cloneNode(true) : this.ulElement;\n    }\n  };\n\n  MultiSelect.prototype.isValidLI = function (li) {\n    return li && !li.classList.contains(dropDownBaseClasses.disabled) && !li.classList.contains(dropDownBaseClasses.group) && li.classList.contains(dropDownBaseClasses.li);\n  };\n\n  ;\n\n  MultiSelect.prototype.updateListSelection = function (li, e, length) {\n    var customVal = li.getAttribute('data-value');\n    var value = this.getFormattedValue(customVal);\n\n    if (this.allowCustomValue && (customVal !== 'false' && value === false || !isNullOrUndefined(value) && value.toString() === 'NaN')) {\n      value = customVal;\n    }\n\n    var text = this.getTextByValue(value);\n    this.removeHover();\n\n    if (!this.value || this.value.indexOf(value) === -1) {\n      this.dispatchSelect(value, e, li, li.getAttribute('aria-selected') === 'true', length);\n    } else {\n      this.removeValue(value, e, length);\n    }\n  };\n\n  MultiSelect.prototype.updateListSelectEventCallback = function (value, li, e) {\n    var _this = this;\n\n    var text = this.getTextByValue(value);\n\n    if ((this.allowCustomValue || this.allowFiltering) && !this.findListElement(this.mainList, 'li', 'data-value', value)) {\n      var temp_1 = li.cloneNode(true);\n      var data_1 = this.getDataByValue(value);\n      var eventArgs = {\n        newData: data_1,\n        cancel: false\n      };\n      this.trigger('customValueSelection', eventArgs, function (eventArgs) {\n        if (!eventArgs.cancel) {\n          append([temp_1], _this.mainList);\n\n          _this.mainData.push(data_1);\n\n          _this.remoteCustomValue = false;\n\n          _this.addValue(value, text, e);\n        }\n      });\n    } else {\n      this.remoteCustomValue = false;\n      this.addValue(value, text, e);\n    }\n\n    if (isBlazor() && this.isServerRendered && this.value && this.list && this.value.length === this.list.querySelectorAll('li.e-list-item').length || this.value.length === this.maximumSelectionLength) {\n      this.updatedataValueItems(e);\n      this.checkPlaceholderSize();\n    }\n\n    if (isBlazor() && this.isServerRendered) {\n      this.checkPlaceholderSize();\n      this.makeTextBoxEmpty();\n    }\n  };\n\n  MultiSelect.prototype.removeListSelection = function () {\n    var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;\n    var selectedItems = this.list.querySelectorAll('.' + className);\n    var temp = selectedItems.length;\n\n    if (selectedItems && selectedItems.length) {\n      removeClass(selectedItems, className);\n\n      while (temp > 0) {\n        selectedItems[temp - 1].setAttribute('aria-selected', 'false');\n        temp--;\n      }\n    }\n\n    if (!isNullOrUndefined(this.mainList)) {\n      var selectItems = this.mainList.querySelectorAll('.' + className);\n      var temp1 = selectItems.length;\n\n      if (selectItems && selectItems.length) {\n        removeClass(selectItems, className);\n\n        while (temp1 > 0) {\n          selectItems[temp1 - 1].setAttribute('aria-selected', 'false');\n\n          if (this.mode === 'CheckBox') {\n            if (selectedItems && selectedItems.length > temp1 - 1) {\n              selectedItems[temp1 - 1].firstElementChild.setAttribute('aria-checked', 'false');\n              removeClass([selectedItems[temp1 - 1].firstElementChild.lastElementChild], 'e-check');\n            }\n\n            selectItems[temp1 - 1].firstElementChild.setAttribute('aria-checked', 'false');\n            removeClass([selectItems[temp1 - 1].firstElementChild.lastElementChild], 'e-check');\n          }\n\n          temp1--;\n        }\n      }\n    }\n  };\n\n  ;\n\n  MultiSelect.prototype.removeHover = function () {\n    var hoveredItem = this.list.querySelectorAll('.' + dropDownBaseClasses.hover);\n\n    if (hoveredItem && hoveredItem.length) {\n      removeClass(hoveredItem, dropDownBaseClasses.hover);\n    }\n  };\n\n  ;\n\n  MultiSelect.prototype.removeFocus = function () {\n    if (this.list && this.mainList) {\n      var hoveredItem = this.list.querySelectorAll('.' + dropDownBaseClasses.focus);\n      var mainlist = this.mainList.querySelectorAll('.' + dropDownBaseClasses.focus);\n\n      if (hoveredItem && hoveredItem.length) {\n        removeClass(hoveredItem, dropDownBaseClasses.focus);\n        removeClass(mainlist, dropDownBaseClasses.focus);\n      }\n    }\n  };\n\n  ;\n\n  MultiSelect.prototype.addListHover = function (li) {\n    if (this.enabled && this.isValidLI(li)) {\n      this.removeHover();\n      addClass([li], dropDownBaseClasses.hover);\n    } else {\n      if (li !== null && li.classList.contains('e-list-group-item') && this.enableGroupCheckBox && this.mode === 'CheckBox' && !isNullOrUndefined(this.fields.groupBy)) {\n        this.removeHover();\n        addClass([li], dropDownBaseClasses.hover);\n      }\n    }\n  };\n\n  ;\n\n  MultiSelect.prototype.addListFocus = function (element) {\n    if (this.enabled && this.isValidLI(element)) {\n      this.removeFocus();\n      addClass([element], dropDownBaseClasses.focus);\n    } else {\n      if (this.enableGroupCheckBox && this.mode === 'CheckBox' && !isNullOrUndefined(this.fields.groupBy)) {\n        addClass([element], dropDownBaseClasses.focus);\n      }\n    }\n  };\n\n  MultiSelect.prototype.addListSelection = function (element) {\n    var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;\n\n    if (this.isValidLI(element) && !element.classList.contains(dropDownBaseClasses.hover)) {\n      addClass([element], className);\n      this.updateMainList(false, element.getAttribute('data-value'));\n      element.setAttribute('aria-selected', 'true');\n\n      if (this.mode === 'CheckBox') {\n        var ariaCheck = element.firstElementChild.getAttribute('aria-checked');\n\n        if (ariaCheck === 'false' || isNullOrUndefined(ariaCheck)) {\n          this.notify('updatelist', {\n            module: 'CheckBoxSelection',\n            enable: this.mode === 'CheckBox',\n            li: element,\n            e: this\n          });\n        }\n      }\n\n      this.notify('activeList', {\n        module: 'CheckBoxSelection',\n        enable: this.mode === 'CheckBox',\n        li: element,\n        e: this\n      });\n\n      if (this.chipCollectionWrapper !== null) {\n        this.removeChipSelection();\n      }\n\n      attributes(this.inputElement, {\n        'aria-activedescendant': element.id\n      });\n    }\n  };\n\n  MultiSelect.prototype.updateDelimeter = function (delimChar, e) {\n    this.updateData(delimChar, e);\n  };\n\n  MultiSelect.prototype.onMouseClick = function (e) {\n    this.scrollFocusStatus = false;\n    var target = e.target;\n    var li = closest(target, '.' + dropDownBaseClasses.li);\n    var headerLi = closest(target, '.' + dropDownBaseClasses.group);\n\n    if (headerLi && this.enableGroupCheckBox && this.mode === 'CheckBox' && this.fields.groupBy) {\n      target = target.classList.contains('e-list-group-item') ? target.firstElementChild.lastElementChild : e.target;\n\n      if (target.classList.contains('e-check')) {\n        this.selectAllItem(false, e);\n        target.classList.remove('e-check');\n        target.classList.remove('e-stop');\n        closest(target, '.' + 'e-list-group-item').classList.remove('e-active');\n        target.setAttribute('aria-selected', 'false');\n      } else {\n        this.selectAllItem(true, e);\n        target.classList.remove('e-stop');\n        target.classList.add('e-check');\n        closest(target, '.' + 'e-list-group-item').classList.add('e-active');\n        target.setAttribute('aria-selected', 'true');\n      }\n\n      this.refreshSelection();\n      this.checkSelectAll();\n    } else {\n      if (this.isValidLI(li)) {\n        var limit = this.value && this.value.length ? this.value.length : 0;\n\n        if (li.classList.contains('e-active')) {\n          limit = limit - 1;\n        }\n\n        if (limit < this.maximumSelectionLength) {\n          this.updateListSelection(li, e);\n          this.checkPlaceholderSize();\n          this.addListFocus(li);\n\n          if ((this.allowCustomValue || this.allowFiltering) && this.mainList && this.listData) {\n            if (this.mode !== 'CheckBox') {\n              this.focusAtLastListItem(li.getAttribute('data-value'));\n            }\n\n            this.refreshSelection();\n          } else {\n            this.makeTextBoxEmpty();\n          }\n        }\n\n        if (this.mode === 'CheckBox') {\n          this.updateDelimView();\n          this.updateDelimeter(this.delimiterChar, e);\n          this.refreshInputHight();\n        } else {\n          this.updateDelimeter(this.delimiterChar, e);\n        }\n\n        this.checkSelectAll();\n        this.refreshPopup();\n\n        if (this.hideSelectedItem) {\n          this.focusAtFirstListItem();\n        }\n\n        if (this.closePopupOnSelect) {\n          this.hidePopup();\n        } else {\n          e.preventDefault();\n        }\n\n        this.makeTextBoxEmpty();\n        this.findGroupStart(target);\n      } else {\n        e.preventDefault();\n      }\n\n      if (this.mode !== 'CheckBox') {\n        this.refreshListItems(isNullOrUndefined(li) ? null : li.textContent);\n      }\n\n      this.refreshPlaceHolder();\n      this.deselectHeader();\n    }\n  };\n\n  MultiSelect.prototype.findGroupStart = function (target) {\n    if (this.enableGroupCheckBox && this.mode === 'CheckBox' && !isNullOrUndefined(this.fields.groupBy)) {\n      var count = 0;\n      var liChecked = 0;\n      var liUnchecked = 0;\n      var groupValues = void 0;\n\n      if (this.itemTemplate && !target.getElementsByClassName('e-frame').length) {\n        while (!target.getElementsByClassName('e-frame').length) {\n          target = target.parentElement;\n        }\n      }\n\n      if (target.classList.contains('e-frame')) {\n        target = target.parentElement.parentElement;\n      }\n\n      groupValues = this.findGroupAttrtibutes(target, liChecked, liUnchecked, count, 0);\n      groupValues = this.findGroupAttrtibutes(target, groupValues[0], groupValues[1], groupValues[2], 1);\n\n      while (!target.classList.contains('e-list-group-item')) {\n        if (target.classList.contains('e-list-icon')) {\n          target = target.parentElement;\n        }\n\n        target = target.previousElementSibling;\n\n        if (target == null) {\n          break;\n        }\n      }\n\n      this.updateCheckBox(target, groupValues[0], groupValues[1], groupValues[2]);\n    }\n  };\n\n  MultiSelect.prototype.findGroupAttrtibutes = function (listElement, checked, unChecked, count, position) {\n    while (!listElement.classList.contains('e-list-group-item')) {\n      if (listElement.classList.contains('e-list-icon')) {\n        listElement = listElement.parentElement;\n      }\n\n      if (listElement.getElementsByClassName('e-frame')[0].classList.contains('e-check') && listElement.classList.contains('e-list-item')) {\n        checked++;\n      } else if (listElement.classList.contains('e-list-item')) {\n        unChecked++;\n      }\n\n      count++;\n      listElement = position ? listElement.nextElementSibling : listElement.previousElementSibling;\n\n      if (listElement == null) {\n        break;\n      }\n    }\n\n    return [checked, unChecked, count];\n  };\n\n  MultiSelect.prototype.updateCheckBox = function (groupHeader, checked, unChecked, count) {\n    if (groupHeader === null) {\n      return;\n    }\n\n    var checkBoxElement = groupHeader.getElementsByClassName('e-frame')[0];\n\n    if (count === checked) {\n      checkBoxElement.classList.remove('e-stop');\n      checkBoxElement.classList.add('e-check');\n      closest(checkBoxElement, '.' + 'e-list-group-item').classList.add('e-active');\n      groupHeader.setAttribute('aria-selected', 'true');\n    } else if (count === unChecked) {\n      checkBoxElement.classList.remove('e-check');\n      checkBoxElement.classList.remove('e-stop');\n      closest(checkBoxElement, '.' + 'e-list-group-item').classList.remove('e-active');\n      groupHeader.setAttribute('aria-selected', 'false');\n    } else if (this.maximumSelectionLength === checked - 1) {\n      checkBoxElement.classList.remove('e-stop');\n      groupHeader.setAttribute('aria-selected', 'true');\n      closest(checkBoxElement, '.' + 'e-list-group-item').classList.add('e-active');\n      checkBoxElement.classList.add('e-check');\n    } else {\n      checkBoxElement.classList.remove('e-check');\n      checkBoxElement.classList.add('e-stop');\n      closest(checkBoxElement, '.' + 'e-list-group-item').classList.add('e-active');\n      groupHeader.setAttribute('aria-selected', 'false');\n    }\n  };\n\n  MultiSelect.prototype.deselectHeader = function () {\n    var limit = this.value && this.value.length ? this.value.length : 0;\n    var collection = this.list.querySelectorAll('li.e-list-group-item:not(.e-active)');\n\n    if (limit < this.maximumSelectionLength) {\n      removeClass(collection, 'e-disable');\n    }\n\n    if (limit === this.maximumSelectionLength) {\n      addClass(collection, 'e-disable');\n    }\n  };\n\n  MultiSelect.prototype.onMouseOver = function (e) {\n    var currentLi = closest(e.target, '.' + dropDownBaseClasses.li);\n\n    if (currentLi === null && this.mode === 'CheckBox' && !isNullOrUndefined(this.fields.groupBy) && this.enableGroupCheckBox) {\n      currentLi = closest(e.target, '.' + dropDownBaseClasses.group);\n    }\n\n    this.addListHover(currentLi);\n  };\n\n  MultiSelect.prototype.onMouseLeave = function (e) {\n    this.removeHover();\n  };\n\n  MultiSelect.prototype.onListMouseDown = function (e) {\n    e.preventDefault();\n    this.scrollFocusStatus = true;\n  };\n\n  MultiSelect.prototype.onDocumentClick = function (e) {\n    if (this.mode !== 'CheckBox') {\n      var target = e.target;\n\n      if (!(!isNullOrUndefined(this.popupObj) && closest(target, '#' + this.popupObj.element.id)) && !this.overAllWrapper.contains(e.target)) {\n        this.scrollFocusStatus = false;\n      } else {\n        this.scrollFocusStatus = (Browser.isIE || Browser.info.name === 'edge') && document.activeElement === this.inputElement;\n      }\n    }\n  };\n\n  MultiSelect.prototype.wireListEvents = function () {\n    EventHandler.add(document, 'mousedown', this.onDocumentClick, this);\n    EventHandler.add(this.list, 'mousedown', this.onListMouseDown, this);\n    EventHandler.add(this.list, 'mouseup', this.onMouseClick, this);\n    EventHandler.add(this.list, 'mouseover', this.onMouseOver, this);\n    EventHandler.add(this.list, 'mouseout', this.onMouseLeave, this);\n  };\n\n  ;\n\n  MultiSelect.prototype.unwireListEvents = function () {\n    EventHandler.remove(document, 'mousedown', this.onDocumentClick);\n\n    if (this.list) {\n      EventHandler.remove(this.list, 'mousedown', this.onListMouseDown);\n      EventHandler.remove(this.list, 'mouseup', this.onMouseClick);\n      EventHandler.remove(this.list, 'mouseover', this.onMouseOver);\n      EventHandler.remove(this.list, 'mouseout', this.onMouseLeave);\n    }\n  };\n\n  ;\n\n  MultiSelect.prototype.hideOverAllClear = function () {\n    if (!this.value || !this.value.length || this.inputElement.value === '') {\n      this.overAllClear.style.display = 'none';\n    }\n  };\n\n  MultiSelect.prototype.showOverAllClear = function () {\n    if ((this.value && this.value.length || this.inputElement.value !== '') && this.showClearButton && this.readonly !== true) {\n      this.overAllClear.style.display = '';\n    } else {\n      this.overAllClear.style.display = 'none';\n    }\n  };\n  /**\n   * Sets the focus to widget for interaction.\n   * @returns void\n   */\n\n\n  MultiSelect.prototype.focusIn = function () {\n    if (document.activeElement !== this.inputElement && this.enabled) {\n      this.inputElement.focus();\n    }\n  };\n  /**\n   * Remove the focus from widget, if the widget is in focus state.\n   * @returns void\n   */\n\n\n  MultiSelect.prototype.focusOut = function () {\n    if (document.activeElement === this.inputElement && this.enabled) {\n      this.inputElement.blur();\n    }\n  };\n  /**\n   * Shows the spinner loader.\n   * @returns void.\n   */\n\n\n  MultiSelect.prototype.showSpinner = function () {\n    if (isNullOrUndefined(this.spinnerElement)) {\n      if (this.overAllClear.style.display !== 'none') {\n        this.spinnerElement = this.overAllClear;\n      } else {\n        this.spinnerElement = this.createElement('span', {\n          className: CLOSEICON_CLASS + ' ' + SPINNER_CLASS\n        });\n        this.componentWrapper.appendChild(this.spinnerElement);\n      }\n\n      createSpinner({\n        target: this.spinnerElement,\n        width: Browser.isDevice ? '16px' : '14px'\n      }, this.createElement);\n      addClass([this.spinnerElement], DISABLE_ICON);\n      showSpinner(this.spinnerElement);\n    }\n  };\n  /**\n   * Hides the spinner loader.\n   * @returns void.\n   */\n\n\n  MultiSelect.prototype.hideSpinner = function () {\n    if (!isNullOrUndefined(this.spinnerElement)) {\n      hideSpinner(this.spinnerElement);\n      removeClass([this.spinnerElement], DISABLE_ICON);\n\n      if (this.spinnerElement.classList.contains(SPINNER_CLASS)) {\n        detach(this.spinnerElement);\n      } else {\n        this.spinnerElement.innerHTML = '';\n      }\n\n      this.spinnerElement = null;\n    }\n  };\n\n  MultiSelect.prototype.updateWrapperText = function (wrapperType, wrapperData) {\n    if (this.valueTemplate || !this.enableHtmlSanitizer) {\n      wrapperType.innerHTML = wrapperData;\n    } else {\n      wrapperType.innerText = SanitizeHtmlHelper.sanitize(wrapperData);\n    }\n  };\n\n  MultiSelect.prototype.updateDelimView = function () {\n    if (this.delimiterWrapper) {\n      this.hideDelimWrapper();\n    }\n\n    if (this.chipCollectionWrapper) {\n      this.chipCollectionWrapper.style.display = 'none';\n    }\n\n    this.viewWrapper.style.display = '';\n    this.viewWrapper.style.width = '';\n    this.viewWrapper.classList.remove(TOTAL_COUNT_WRAPPER);\n\n    if (this.value && this.value.length) {\n      var data = '';\n      var temp = void 0;\n      var tempData = void 0;\n      var tempIndex = 1;\n      var wrapperleng = void 0;\n      var remaining = void 0;\n      var downIconWidth = 0;\n      var overAllContainer = void 0;\n      this.updateWrapperText(this.viewWrapper, data);\n      var l10nLocale = {\n        noRecordsTemplate: 'No records found',\n        actionFailureTemplate: 'Request failed',\n        overflowCountTemplate: '+${count} more..',\n        totalCountTemplate: '${count} selected'\n      };\n      var l10n = new L10n(this.getLocaleName(), {}, this.locale);\n\n      if (l10n.getConstant('actionFailureTemplate') === '') {\n        l10n = new L10n('dropdowns', l10nLocale, this.locale);\n      }\n\n      var remainContent = l10n.getConstant('overflowCountTemplate');\n      var raminElement = this.createElement('span', {\n        className: REMAIN_WRAPPER\n      });\n      var compiledString = compile(remainContent);\n      var totalCompiledString = compile(l10n.getConstant('totalCountTemplate'));\n      raminElement.appendChild(compiledString({\n        'count': this.value.length\n      }, null, null, null, !this.isStringTemplate)[0]);\n      this.viewWrapper.appendChild(raminElement);\n      var remainSize = raminElement.offsetWidth;\n      remove(raminElement);\n\n      if (this.showDropDownIcon) {\n        downIconWidth = this.dropIcon.offsetWidth + parseInt(window.getComputedStyle(this.dropIcon).marginRight, 10);\n      }\n\n      if (!isNullOrUndefined(this.value)) {\n        for (var index = 0; !isNullOrUndefined(this.value[index]); index++) {\n          data += index === 0 ? '' : this.delimiterChar + ' ';\n          temp = this.getOverflowVal(index);\n          data += temp;\n          temp = this.viewWrapper.innerHTML;\n          this.updateWrapperText(this.viewWrapper, data);\n          wrapperleng = this.viewWrapper.offsetWidth + parseInt(window.getComputedStyle(this.viewWrapper).paddingRight, 10);\n          overAllContainer = this.componentWrapper.offsetWidth - parseInt(window.getComputedStyle(this.componentWrapper).paddingLeft, 10) - parseInt(window.getComputedStyle(this.componentWrapper).paddingRight, 10);\n\n          if (wrapperleng + downIconWidth > overAllContainer) {\n            if (tempData !== undefined && tempData !== '') {\n              temp = tempData;\n              index = tempIndex + 1;\n            }\n\n            this.updateWrapperText(this.viewWrapper, temp);\n            remaining = this.value.length - index;\n            wrapperleng = this.viewWrapper.offsetWidth;\n\n            while (wrapperleng + remainSize + downIconWidth > overAllContainer && wrapperleng !== 0 && this.viewWrapper.innerHTML !== '') {\n              var textArr = this.viewWrapper.innerHTML.split(this.delimiterChar);\n              textArr.pop();\n              this.viewWrapper.innerHTML = textArr.join(this.delimiterChar);\n\n              if (this.viewWrapper.innerHTML === '') {\n                remaining++;\n              }\n\n              wrapperleng = this.viewWrapper.offsetWidth;\n            }\n\n            break;\n          } else if (wrapperleng + remainSize + downIconWidth <= overAllContainer) {\n            tempData = data;\n            tempIndex = index;\n          } else if (index === 0) {\n            tempData = '';\n            tempIndex = -1;\n          }\n        }\n      }\n\n      if (remaining > 0) {\n        var totalWidth = overAllContainer - downIconWidth;\n        this.viewWrapper.appendChild(this.updateRemainTemplate(raminElement, this.viewWrapper, remaining, compiledString, totalCompiledString, totalWidth));\n        this.updateRemainWidth(this.viewWrapper, totalWidth);\n        this.updateRemainingText(raminElement, downIconWidth, remaining, compiledString, totalCompiledString);\n      }\n    } else {\n      this.viewWrapper.innerHTML = '';\n      this.viewWrapper.style.display = 'none';\n    }\n  };\n\n  MultiSelect.prototype.updateRemainWidth = function (viewWrapper, totalWidth) {\n    if (viewWrapper.classList.contains(TOTAL_COUNT_WRAPPER) && totalWidth < viewWrapper.offsetWidth + parseInt(window.getComputedStyle(viewWrapper).paddingLeft, 10) + parseInt(window.getComputedStyle(viewWrapper).paddingLeft, 10)) {\n      viewWrapper.style.width = totalWidth + 'px';\n    }\n  };\n\n  MultiSelect.prototype.updateRemainTemplate = function (raminElement, viewWrapper, remaining, compiledString, totalCompiledString, totalWidth) {\n    if (viewWrapper.firstChild && viewWrapper.firstChild.nodeType === 3 && viewWrapper.firstChild.nodeValue === '') {\n      viewWrapper.removeChild(viewWrapper.firstChild);\n    }\n\n    raminElement.innerHTML = '';\n    raminElement.appendChild(viewWrapper.firstChild && viewWrapper.firstChild.nodeType === 3 ? compiledString({\n      'count': remaining\n    }, null, null, null, !this.isStringTemplate)[0] : totalCompiledString({\n      'count': remaining\n    }, null, null, null, !this.isStringTemplate)[0]);\n\n    if (viewWrapper.firstChild && viewWrapper.firstChild.nodeType === 3) {\n      viewWrapper.classList.remove(TOTAL_COUNT_WRAPPER);\n    } else {\n      viewWrapper.classList.add(TOTAL_COUNT_WRAPPER);\n      this.updateRemainWidth(viewWrapper, totalWidth);\n    }\n\n    return raminElement;\n  };\n\n  MultiSelect.prototype.updateRemainingText = function (raminElement, downIconWidth, remaining, compiledString, totalCompiledString) {\n    var overAllContainer = this.componentWrapper.offsetWidth - parseInt(window.getComputedStyle(this.componentWrapper).paddingLeft, 10) - parseInt(window.getComputedStyle(this.componentWrapper).paddingRight, 10);\n    var wrapperleng = this.viewWrapper.offsetWidth + parseInt(window.getComputedStyle(this.viewWrapper).paddingRight, 10);\n\n    if (wrapperleng + downIconWidth >= overAllContainer && wrapperleng !== 0 && this.viewWrapper.firstChild && this.viewWrapper.firstChild.nodeType === 3) {\n      while (wrapperleng + downIconWidth > overAllContainer && wrapperleng !== 0 && this.viewWrapper.firstChild && this.viewWrapper.firstChild.nodeType === 3) {\n        var textArr = this.viewWrapper.firstChild.nodeValue.split(this.delimiterChar);\n        textArr.pop();\n        this.viewWrapper.firstChild.nodeValue = textArr.join(this.delimiterChar);\n\n        if (this.viewWrapper.firstChild.nodeValue === '') {\n          this.viewWrapper.removeChild(this.viewWrapper.firstChild);\n        }\n\n        remaining++;\n        wrapperleng = this.viewWrapper.offsetWidth;\n      }\n\n      var totalWidth = overAllContainer - downIconWidth;\n      this.updateRemainTemplate(raminElement, this.viewWrapper, remaining, compiledString, totalCompiledString, totalWidth);\n    }\n  };\n\n  MultiSelect.prototype.getOverflowVal = function (index) {\n    var temp;\n\n    if (this.mainData && this.mainData.length) {\n      if (this.mode === 'CheckBox') {\n        var newTemp = this.listData;\n        this.listData = this.mainData;\n        temp = this.getTextByValue(this.value[index]);\n        this.listData = newTemp;\n      } else {\n        temp = this.getTextByValue(this.value[index]);\n      }\n    } else {\n      temp = this.value[index];\n    }\n\n    return temp;\n  };\n\n  MultiSelect.prototype.unWireEvent = function () {\n    EventHandler.remove(this.componentWrapper, 'mousedown', this.wrapperClick);\n    EventHandler.remove(window, 'resize', this.windowResize);\n    EventHandler.remove(this.inputElement, 'focus', this.focusInHandler);\n    EventHandler.remove(this.inputElement, 'keydown', this.onKeyDown);\n\n    if (this.mode !== 'CheckBox') {\n      EventHandler.remove(this.inputElement, 'input', this.onInput);\n    }\n\n    EventHandler.remove(this.inputElement, 'keyup', this.KeyUp);\n    var formElement = closest(this.inputElement, 'form');\n\n    if (formElement) {\n      EventHandler.remove(formElement, 'reset', this.resetValueHandler);\n    }\n\n    EventHandler.remove(this.inputElement, 'blur', this.onBlur);\n    EventHandler.remove(this.componentWrapper, 'mousemove', this.mouseIn);\n    EventHandler.remove(this.componentWrapper, 'mouseout', this.mouseOut);\n    EventHandler.remove(this.overAllClear, 'mousedown', this.ClearAll);\n    EventHandler.remove(this.inputElement, 'paste', this.pasteHandler);\n  };\n\n  MultiSelect.prototype.selectAllItem = function (state, event, list) {\n    var li;\n    li = this.list.querySelectorAll(state ? 'li.e-list-item:not([aria-selected=\"true\"]):not(.e-reorder-hide)' : 'li.e-list-item[aria-selected=\"true\"]:not(.e-reorder-hide)');\n\n    if (this.value && this.value.length && this.isPopupOpen() && event && event.target && closest(event.target, '.e-close-hooker') && this.allowFiltering) {\n      li = this.mainList.querySelectorAll(state ? 'li.e-list-item:not([aria-selected=\"true\"]):not(.e-reorder-hide)' : 'li.e-list-item[aria-selected=\"true\"]:not(.e-reorder-hide)');\n    }\n\n    if (this.enableGroupCheckBox && this.mode === 'CheckBox' && !isNullOrUndefined(this.fields.groupBy)) {\n      var target = event ? event.target : null;\n      target = event && event.keyCode === 32 ? list : target;\n      target = target && target.classList.contains('e-frame') ? target.parentElement.parentElement : target;\n\n      if (target && target.classList.contains('e-list-group-item')) {\n        var listElement = target.nextElementSibling;\n\n        if (isNullOrUndefined(listElement)) {\n          return;\n        }\n\n        while (listElement.classList.contains('e-list-item')) {\n          if (state) {\n            if (!listElement.firstElementChild.lastElementChild.classList.contains('e-check')) {\n              var selectionLimit = this.value && this.value.length ? this.value.length : 0;\n\n              if (listElement.classList.contains('e-active')) {\n                selectionLimit -= 1;\n              }\n\n              if (selectionLimit < this.maximumSelectionLength) {\n                this.updateListSelection(listElement, event);\n              }\n            }\n          } else {\n            if (listElement.firstElementChild.lastElementChild.classList.contains('e-check')) {\n              this.updateListSelection(listElement, event);\n            }\n          }\n\n          listElement = listElement.nextElementSibling;\n\n          if (listElement == null) {\n            break;\n          }\n        }\n\n        if (target.classList.contains('e-list-group-item')) {\n          var focusedElement = this.list.getElementsByClassName('e-item-focus')[0];\n\n          if (focusedElement) {\n            focusedElement.classList.remove('e-item-focus');\n          }\n\n          state ? target.classList.add('e-active') : target.classList.remove('e-active');\n          target.classList.add('e-item-focus');\n        }\n\n        this.textboxValueUpdate();\n        this.checkPlaceholderSize();\n\n        if (!this.changeOnBlur && event) {\n          this.updateValueState(event, this.value, this.tempValues);\n        }\n      } else {\n        this.updateValue(event, li, state);\n      }\n    } else {\n      this.updateValue(event, li, state);\n    }\n  };\n\n  MultiSelect.prototype.updateValue = function (event, li, state) {\n    var _this = this;\n\n    var length = li.length;\n\n    if (li && li.length) {\n      var index_1 = 0;\n      var count_1 = 0;\n\n      if (this.enableGroupCheckBox) {\n        count_1 = state ? this.maximumSelectionLength - (this.value ? this.value.length : 0) : li.length;\n      } else {\n        count_1 = state ? this.maximumSelectionLength - (this.value ? this.value.length : 0) : this.maximumSelectionLength;\n      }\n\n      while (index_1 < length && index_1 <= 50 && index_1 < count_1) {\n        this.updateListSelection(li[index_1], event, length - index_1);\n        this.findGroupStart(li[index_1]);\n        index_1++;\n      }\n\n      if (length > 50) {\n        setTimeout(function () {\n          while (index_1 < length && index_1 < count_1) {\n            _this.updateListSelection(li[index_1], event, length - index_1);\n\n            _this.findGroupStart(li[index_1]);\n\n            index_1++;\n          }\n\n          if (!(isBlazor() && _this.isServerRendered)) {\n            _this.updatedataValueItems(event);\n          }\n        }, 0);\n      }\n    }\n\n    if (!(isBlazor() && this.isServerRendered)) {\n      this.updatedataValueItems(event);\n      this.checkPlaceholderSize();\n    }\n  };\n\n  MultiSelect.prototype.updatedataValueItems = function (event) {\n    this.deselectHeader();\n    this.textboxValueUpdate(event);\n  };\n\n  MultiSelect.prototype.textboxValueUpdate = function (event) {\n    if (this.mode !== 'Box' && !this.isPopupOpen()) {\n      this.updateDelimView();\n    } else {\n      this.searchWrapper.classList.remove(ZERO_SIZE);\n    }\n\n    if (this.mode === 'CheckBox') {\n      this.updateDelimView();\n      this.updateDelimeter(this.delimiterChar, event);\n      this.refreshInputHight();\n    } else {\n      this.updateDelimeter(this.delimiterChar, event);\n    }\n\n    this.refreshPlaceHolder();\n  };\n\n  MultiSelect.prototype.setZIndex = function () {\n    if (this.popupObj) {\n      this.popupObj.setProperties({\n        'zIndex': this.zIndex\n      });\n    }\n  };\n\n  MultiSelect.prototype.updateDataSource = function (prop) {\n    if (isNullOrUndefined(this.list)) {\n      this.renderPopup();\n    } else {\n      this.resetList(this.dataSource);\n    }\n\n    if (this.value && this.value.length && !(isBlazor() && this.isServerRendered)) {\n      this.setProperties({\n        'value': this.value\n      });\n      this.refreshSelection();\n    }\n  };\n\n  MultiSelect.prototype.onLoadSelect = function () {\n    this.setDynValue = true;\n    this.renderPopup();\n  };\n\n  MultiSelect.prototype.selectAllItems = function (state, event) {\n    var _this = this;\n\n    if (isNullOrUndefined(this.list)) {\n      this.selectAllAction = function () {\n        if (_this.mode === 'CheckBox' && _this.showSelectAll) {\n          var args = {\n            module: 'CheckBoxSelection',\n            enable: _this.mode === 'CheckBox',\n            value: state ? 'check' : 'uncheck'\n          };\n\n          _this.notify('checkSelectAll', args);\n        }\n\n        _this.selectAllItem(state, event);\n\n        _this.selectAllAction = null;\n      };\n\n      _super.prototype.render.call(this);\n    } else {\n      this.selectAllAction = null;\n\n      if (this.mode === 'CheckBox' && this.showSelectAll) {\n        var args = {\n          value: state ? 'check' : 'uncheck',\n          enable: this.mode === 'CheckBox',\n          module: 'CheckBoxSelection'\n        };\n        this.notify('checkSelectAll', args);\n      }\n\n      this.selectAllItem(state, event);\n    }\n  };\n  /**\n   * Get the properties to be maintained in the persisted state.\n   */\n\n\n  MultiSelect.prototype.getPersistData = function () {\n    return this.addOnPersist(['value']);\n  };\n\n  ;\n  /**\n   * Dynamically change the value of properties.\n   * @private\n   */\n\n  MultiSelect.prototype.onPropertyChanged = function (newProp, oldProp) {\n    if (newProp.dataSource && !isNullOrUndefined(Object.keys(newProp.dataSource)) || newProp.query && !isNullOrUndefined(Object.keys(newProp.query))) {\n      this.mainList = null;\n      this.mainData = null;\n      this.isFirstClick = false;\n      this.isDynamicDataChange = true;\n    }\n\n    if (this.getModuleName() === 'multiselect') {\n      this.filterAction = false;\n      this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);\n    }\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'query':\n        case 'dataSource':\n          if (this.mode === 'CheckBox' && this.showSelectAll) {\n            if (!isNullOrUndefined(this.popupObj)) {\n              this.popupObj.destroy();\n              this.popupObj = null;\n            }\n\n            this.renderPopup();\n          }\n\n          break;\n\n        case 'htmlAttributes':\n          this.updateHTMLAttribute();\n          break;\n\n        case 'showClearButton':\n          this.updateClearButton(newProp.showClearButton);\n          break;\n\n        case 'text':\n          this.updateVal(this.value, this.value, 'text');\n          break;\n\n        case 'value':\n          this.updateVal(this.value, oldProp.value, 'value');\n          this.addValidInputClass();\n          break;\n\n        case 'width':\n          this.setWidth(newProp.width);\n          this.popupObj.setProperties({\n            width: this.calcPopupWidth()\n          });\n          break;\n\n        case 'placeholder':\n          this.refreshPlaceHolder();\n          break;\n\n        case 'filterBarPlaceholder':\n          if (this.allowFiltering) {\n            this.notify('filterBarPlaceholder', {\n              filterBarPlaceholder: newProp.filterBarPlaceholder\n            });\n          }\n\n          break;\n\n        case 'delimiterChar':\n          if (this.mode !== 'Box') {\n            this.updateDelimView();\n          }\n\n          this.updateData(newProp.delimiterChar);\n          break;\n\n        case 'cssClass':\n          this.updateOldPropCssClass(oldProp.cssClass);\n          this.updateCssClass();\n          break;\n\n        case 'enableRtl':\n          this.enableRTL(newProp.enableRtl);\n\n          _super.prototype.onPropertyChanged.call(this, newProp, oldProp);\n\n          break;\n\n        case 'readonly':\n          this.updateReadonly(newProp.readonly);\n          this.hidePopup();\n          break;\n\n        case 'enabled':\n          this.hidePopup();\n          this.enable(newProp.enabled);\n          break;\n\n        case 'showSelectAll':\n          if (this.popupObj) {\n            this.popupObj.destroy();\n            this.popupObj = null;\n          }\n\n          this.renderPopup();\n          break;\n\n        case 'showDropDownIcon':\n          this.dropDownIcon();\n          break;\n\n        case 'floatLabelType':\n          this.setFloatLabelType();\n          this.addValidInputClass();\n          break;\n\n        case 'enableSelectionOrder':\n          break;\n\n        case 'selectAllText':\n          this.notify('selectAllText', false);\n          break;\n\n        case 'popupHeight':\n        case 'headerTemplate':\n        case 'footerTemplate':\n          this.reInitializePoup();\n          break;\n\n        case 'allowFiltering':\n          if (this.mode === 'CheckBox' && this.popupObj) {\n            this.reInitializePoup();\n          }\n\n          this.updateSelectElementData(this.allowFiltering);\n          break;\n\n        default:\n          var msProps = void 0;\n          msProps = this.getPropObject(prop, newProp, oldProp);\n\n          _super.prototype.onPropertyChanged.call(this, msProps.newProperty, msProps.oldProperty);\n\n          break;\n      }\n    }\n  };\n\n  MultiSelect.prototype.reInitializePoup = function () {\n    if (this.popupObj) {\n      this.popupObj.destroy();\n      this.popupObj = null;\n    }\n\n    this.renderPopup();\n  };\n\n  MultiSelect.prototype.updateVal = function (newProp, oldProp, prop) {\n    if (!this.list) {\n      this.onLoadSelect();\n    } else if (!this.inputFocus) {\n      if (prop === 'text') {\n        this.initialTextUpdate();\n        newProp = this.value;\n      }\n\n      if (isNullOrUndefined(this.value) || this.value.length === 0) {\n        this.tempValues = oldProp;\n      }\n\n      this.initialValueUpdate();\n\n      if (this.mode !== 'Box') {\n        this.updateDelimView();\n      }\n\n      this.refreshInputHight();\n      this.refreshPlaceHolder();\n\n      if (this.mode !== 'CheckBox' && this.changeOnBlur) {\n        this.updateValueState(null, newProp, oldProp);\n      }\n\n      this.checkPlaceholderSize();\n    }\n\n    if (!this.changeOnBlur) {\n      this.updateValueState(null, newProp, oldProp);\n    }\n  };\n  /**\n   * Adds a new item to the multiselect popup list. By default, new item appends to the list as the last item,\n   * but you can insert based on the index parameter.\n   * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.\n   * @param { number } itemIndex - Specifies the index to place the newly added item in the popup list.\n   * @return {void}.\n   */\n\n\n  MultiSelect.prototype.addItem = function (items, itemIndex) {\n    _super.prototype.addItem.call(this, items, itemIndex);\n  };\n  /**\n   * Hides the popup, if the popup in a open state.\n   * @returns void\n   */\n\n\n  MultiSelect.prototype.hidePopup = function () {\n    var _this = this;\n\n    var delay = 100;\n\n    if (this.isPopupOpen()) {\n      var animModel = {\n        name: 'FadeOut',\n        duration: 100,\n        delay: delay ? delay : 0\n      };\n      var eventArgs = {\n        popup: this.popupObj,\n        cancel: false,\n        animation: animModel\n      };\n      this.trigger('close', eventArgs, function (eventArgs) {\n        if (!eventArgs.cancel) {\n          _this.beforePopupOpen = false;\n\n          _this.overAllWrapper.classList.remove(iconAnimation);\n\n          _this.popupObj.hide(new Animation(eventArgs.animation));\n\n          attributes(_this.inputElement, {\n            'aria-expanded': 'false'\n          });\n\n          if (_this.allowFiltering) {\n            _this.notify('inputFocus', {\n              module: 'CheckBoxSelection',\n              enable: _this.mode === 'CheckBox',\n              value: 'clear'\n            });\n          }\n\n          _this.popupObj.hide();\n\n          removeClass([document.body, _this.popupObj.element], 'e-popup-full-page');\n          EventHandler.remove(_this.list, 'keydown', _this.onKeyDown);\n        }\n      });\n    }\n  };\n  /**\n   * Shows the popup, if the popup in a closed state.\n   * @returns void\n   */\n\n\n  MultiSelect.prototype.showPopup = function () {\n    if (!this.enabled) {\n      return;\n    }\n\n    if (isBlazor() && this.isServerRendered && this.itemTemplate) {\n      this.DropDownBaseupdateBlazorTemplates(true, false, false, false, false, false, false, false);\n\n      if (this.mode !== 'CheckBox' && this.list) {\n        this.refreshSelection();\n      }\n    }\n\n    if (!this.ulElement) {\n      this.beforePopupOpen = true;\n\n      _super.prototype.render.call(this);\n\n      if (this.mode === 'CheckBox' && Browser.isDevice && this.allowFiltering) {\n        this.notify('popupFullScreen', {\n          module: 'CheckBoxSelection',\n          enable: this.mode === 'CheckBox'\n        });\n      }\n\n      return;\n    }\n\n    if (this.mode === 'CheckBox' && Browser.isDevice && this.allowFiltering) {\n      this.notify('popupFullScreen', {\n        module: 'CheckBoxSelection',\n        enable: this.mode === 'CheckBox'\n      });\n    }\n\n    var mainLiLength = this.ulElement.querySelectorAll('li.' + 'e-list-item').length;\n    var liLength = this.ulElement.querySelectorAll('li.' + dropDownBaseClasses.li + '.' + HIDE_LIST).length;\n\n    if (mainLiLength > 0 && mainLiLength === liLength && liLength === this.mainData.length) {\n      this.beforePopupOpen = false;\n      return;\n    }\n\n    this.onPopupShown();\n  };\n  /**\n   * Based on the state parameter, entire list item will be selected/deselected.\n   * parameter\n   * `true`   - Selects entire list items.\n   * `false`  - Un Selects entire list items.\n   * @returns void\n   */\n\n\n  MultiSelect.prototype.selectAll = function (state) {\n    this.isSelectAll = true;\n    this.selectAllItems(state);\n  };\n\n  MultiSelect.prototype.getModuleName = function () {\n    return 'multiselect';\n  };\n\n  ;\n  /**\n   * Allows you to clear the selected values from the Multiselect component.\n   * @returns void\n   */\n\n  MultiSelect.prototype.clear = function () {\n    this.selectAll(false);\n    this.setProperties({\n      value: null\n    }, true);\n  };\n  /**\n   * To Initialize the control rendering\n   * @private\n   */\n\n\n  MultiSelect.prototype.render = function () {\n    this.setDynValue = this.initStatus = false;\n    this.isSelectAll = false;\n    this.searchWrapper = this.createElement('span', {\n      className: SEARCHBOX_WRAPPER + ' ' + (this.mode === 'Box' ? BOX_ELEMENT : '')\n    });\n    this.viewWrapper = this.createElement('span', {\n      className: DELIMITER_VIEW + ' ' + DELIMITER_WRAPPER,\n      styles: 'display:none;'\n    });\n    this.overAllClear = this.createElement('span', {\n      className: CLOSEICON_CLASS,\n      styles: 'display:none;'\n    });\n    this.componentWrapper = this.createElement('div', {\n      className: ELEMENT_WRAPPER\n    });\n    this.overAllWrapper = this.createElement('div', {\n      className: OVER_ALL_WRAPPER\n    });\n\n    if (this.mode === 'CheckBox') {\n      addClass([this.overAllWrapper], 'e-checkbox');\n    }\n\n    if (Browser.isDevice) {\n      this.componentWrapper.classList.add(ELEMENT_MOBILE_WRAPPER);\n    }\n\n    this.setWidth(this.width);\n    this.overAllWrapper.appendChild(this.componentWrapper);\n    this.popupWrapper = this.createElement('div', {\n      id: this.element.id + '_popup',\n      className: POPUP_WRAPPER\n    });\n\n    if (this.mode === 'Delimiter' || this.mode === 'CheckBox') {\n      this.delimiterWrapper = this.createElement('span', {\n        className: DELIMITER_WRAPPER,\n        styles: 'display:none'\n      });\n      this.componentWrapper.appendChild(this.delimiterWrapper);\n    } else {\n      this.chipCollectionWrapper = this.createElement('span', {\n        className: CHIP_WRAPPER,\n        styles: 'display:none'\n      });\n\n      if (this.mode === 'Default') {\n        this.chipCollectionWrapper.setAttribute('id', getUniqueID('chip_default'));\n      } else if (this.mode === 'Box') {\n        this.chipCollectionWrapper.setAttribute('id', getUniqueID('chip_box'));\n      }\n\n      this.componentWrapper.appendChild(this.chipCollectionWrapper);\n    }\n\n    if (this.mode !== 'Box') {\n      this.componentWrapper.appendChild(this.viewWrapper);\n    }\n\n    this.componentWrapper.appendChild(this.searchWrapper);\n\n    if (this.showClearButton && !Browser.isDevice) {\n      this.componentWrapper.appendChild(this.overAllClear);\n    } else {\n      this.componentWrapper.classList.add(CLOSE_ICON_HIDE);\n    }\n\n    this.dropDownIcon();\n    this.inputElement = this.createElement('input', {\n      className: INPUT_ELEMENT,\n      attrs: {\n        spellcheck: 'false',\n        type: 'text',\n        autocomplete: 'off',\n        tabindex: '0'\n      }\n    });\n\n    if (this.mode === 'Default' || this.mode === 'Box') {\n      this.inputElement.setAttribute('aria-describedby', this.chipCollectionWrapper.id);\n    }\n\n    if (this.element.tagName !== this.getNgDirective()) {\n      this.element.style.display = 'none';\n    }\n\n    if (this.element.tagName === this.getNgDirective()) {\n      this.element.appendChild(this.overAllWrapper);\n      this.searchWrapper.appendChild(this.inputElement);\n    } else {\n      this.element.parentElement.insertBefore(this.overAllWrapper, this.element);\n      this.searchWrapper.appendChild(this.inputElement);\n      this.searchWrapper.appendChild(this.element);\n      this.element.removeAttribute('tabindex');\n    }\n\n    if (this.floatLabelType !== 'Never') {\n      createFloatLabel(this.overAllWrapper, this.searchWrapper, this.element, this.inputElement, this.value, this.floatLabelType, this.placeholder);\n    } else if (this.floatLabelType === 'Never') {\n      this.refreshPlaceHolder();\n    }\n\n    this.addValidInputClass();\n    this.element.style.opacity = '';\n    var id = this.element.getAttribute('id') ? this.element.getAttribute('id') : getUniqueID('ej2_dropdownlist');\n    this.element.id = id;\n    this.hiddenElement = this.createElement('select', {\n      attrs: {\n        'aria-hidden': 'true',\n        'class': HIDDEN_ELEMENT,\n        'tabindex': '-1',\n        'multiple': ''\n      }\n    });\n    this.componentWrapper.appendChild(this.hiddenElement);\n    this.validationAttribute(this.element, this.hiddenElement);\n\n    if (this.mode !== 'CheckBox') {\n      this.hideOverAllClear();\n    }\n\n    this.wireEvent();\n    this.enable(this.enabled);\n    this.enableRTL(this.enableRtl);\n    this.checkInitialValue();\n    this.renderComplete();\n  };\n\n  MultiSelect.prototype.checkInitialValue = function () {\n    var _this = this;\n\n    var isData = this.dataSource instanceof Array ? this.dataSource.length > 0 : !isNullOrUndefined(this.dataSource);\n\n    if (!(this.value && this.value.length) && isNullOrUndefined(this.text) && !isData && this.element.tagName === 'SELECT' && this.element.options.length > 0) {\n      var optionsElement = this.element.options;\n      var valueCol = [];\n      var textCol = '';\n\n      for (var index = 0, optionsLen = optionsElement.length; index < optionsLen; index++) {\n        var opt = optionsElement[index];\n\n        if (!isNullOrUndefined(opt.getAttribute('selected'))) {\n          opt.getAttribute('value') ? valueCol.push(opt.getAttribute('value')) : textCol += opt.text + this.delimiterChar;\n        }\n      }\n\n      if (valueCol.length > 0) {\n        this.setProperties({\n          value: valueCol\n        }, true);\n      } else if (textCol !== '') {\n        this.setProperties({\n          text: textCol\n        }, true);\n      }\n\n      if (valueCol.length > 0 || textCol !== '') {\n        this.refreshInputHight();\n        this.refreshPlaceHolder();\n      }\n    }\n\n    if (this.value && this.value.length || !isNullOrUndefined(this.text)) {\n      this.renderPopup();\n    }\n\n    if (!isNullOrUndefined(this.text) && (isNullOrUndefined(this.value) || this.value.length === 0)) {\n      this.initialTextUpdate();\n    }\n\n    if (this.value && this.value.length) {\n      if (!(this.dataSource instanceof DataManager)) {\n        this.initialValueUpdate();\n        this.initialUpdate();\n      } else {\n        this.setInitialValue = function () {\n          _this.initStatus = false;\n\n          _this.initialValueUpdate();\n\n          _this.initialUpdate();\n\n          _this.setInitialValue = null;\n          _this.initStatus = true;\n        };\n      }\n\n      this.updateTempValue();\n    } else {\n      this.initialUpdate();\n    }\n\n    this.initStatus = true;\n    this.checkAutoFocus();\n\n    if (!isNullOrUndefined(this.text)) {\n      this.element.setAttribute('data-initial-value', this.text);\n    }\n  };\n\n  MultiSelect.prototype.checkAutoFocus = function () {\n    if (this.element.hasAttribute('autofocus')) {\n      this.inputElement.focus();\n    }\n  };\n\n  MultiSelect.prototype.setFloatLabelType = function () {\n    removeFloating(this.overAllWrapper, this.componentWrapper, this.searchWrapper, this.inputElement, this.value, this.floatLabelType, this.placeholder);\n\n    if (this.floatLabelType !== 'Never') {\n      createFloatLabel(this.overAllWrapper, this.searchWrapper, this.element, this.inputElement, this.value, this.floatLabelType, this.placeholder);\n    }\n  };\n\n  MultiSelect.prototype.addValidInputClass = function () {\n    if (!isNullOrUndefined(this.value) && this.value.length || this.floatLabelType === 'Always') {\n      addClass([this.overAllWrapper], 'e-valid-input');\n    } else {\n      removeClass([this.overAllWrapper], 'e-valid-input');\n    }\n  };\n\n  MultiSelect.prototype.dropDownIcon = function () {\n    if (this.showDropDownIcon) {\n      this.dropIcon = this.createElement('span', {\n        className: dropdownIcon\n      });\n      this.componentWrapper.appendChild(this.dropIcon);\n      addClass([this.componentWrapper], ['e-down-icon']);\n    } else {\n      if (!isNullOrUndefined(this.dropIcon)) {\n        this.dropIcon.parentElement.removeChild(this.dropIcon);\n        removeClass([this.componentWrapper], ['e-down-icon']);\n      }\n    }\n  };\n\n  MultiSelect.prototype.initialUpdate = function () {\n    if (this.mode !== 'Box') {\n      this.updateDelimView();\n    }\n\n    this.updateCssClass();\n    this.updateHTMLAttribute();\n    this.updateReadonly(this.readonly);\n    this.refreshInputHight();\n    this.checkPlaceholderSize();\n  };\n  /**\n   * Removes the component from the DOM and detaches all its related event handlers. Also it removes the attributes and classes.\n   * @method destroy\n   * @return {void}\n   */\n\n\n  MultiSelect.prototype.destroy = function () {\n    if (this.popupObj) {\n      this.popupObj.hide();\n    }\n\n    this.notify(destroy, {});\n    this.unwireListEvents();\n    this.unWireEvent();\n    this.list = null;\n    this.popupObj = null;\n    this.mainList = null;\n    this.mainData = null;\n    this.filterParent = null;\n    this.ulElement = null;\n\n    _super.prototype.destroy.call(this);\n\n    var temp = ['readonly', 'aria-disabled', 'aria-placeholder', 'placeholder'];\n    var length = temp.length;\n\n    while (length > 0) {\n      this.inputElement.removeAttribute(temp[length - 1]);\n      length--;\n    }\n\n    this.element.removeAttribute('data-initial-value');\n    this.element.style.display = 'block';\n\n    if (this.overAllWrapper.parentElement) {\n      if (this.overAllWrapper.parentElement.tagName === this.getNgDirective()) {\n        remove(this.overAllWrapper);\n      } else {\n        this.overAllWrapper.parentElement.insertBefore(this.element, this.overAllWrapper);\n        remove(this.overAllWrapper);\n      }\n    }\n  };\n\n  ;\n\n  __decorate([Complex({\n    text: null,\n    value: null,\n    iconCss: null,\n    groupBy: null\n  }, FieldSettings)], MultiSelect.prototype, \"fields\", void 0);\n\n  __decorate([Property(false)], MultiSelect.prototype, \"enablePersistence\", void 0);\n\n  __decorate([Property(null)], MultiSelect.prototype, \"groupTemplate\", void 0);\n\n  __decorate([Property('No records found')], MultiSelect.prototype, \"noRecordsTemplate\", void 0);\n\n  __decorate([Property('Request failed')], MultiSelect.prototype, \"actionFailureTemplate\", void 0);\n\n  __decorate([Property('None')], MultiSelect.prototype, \"sortOrder\", void 0);\n\n  __decorate([Property(true)], MultiSelect.prototype, \"enabled\", void 0);\n\n  __decorate([Property(false)], MultiSelect.prototype, \"enableHtmlSanitizer\", void 0);\n\n  __decorate([Property([])], MultiSelect.prototype, \"dataSource\", void 0);\n\n  __decorate([Property(null)], MultiSelect.prototype, \"query\", void 0);\n\n  __decorate([Property('StartsWith')], MultiSelect.prototype, \"filterType\", void 0);\n\n  __decorate([Property(1000)], MultiSelect.prototype, \"zIndex\", void 0);\n\n  __decorate([Property(false)], MultiSelect.prototype, \"ignoreAccent\", void 0);\n\n  __decorate([Property()], MultiSelect.prototype, \"locale\", void 0);\n\n  __decorate([Property(false)], MultiSelect.prototype, \"enableGroupCheckBox\", void 0);\n\n  __decorate([Property(null)], MultiSelect.prototype, \"cssClass\", void 0);\n\n  __decorate([Property('100%')], MultiSelect.prototype, \"width\", void 0);\n\n  __decorate([Property('300px')], MultiSelect.prototype, \"popupHeight\", void 0);\n\n  __decorate([Property('100%')], MultiSelect.prototype, \"popupWidth\", void 0);\n\n  __decorate([Property(null)], MultiSelect.prototype, \"placeholder\", void 0);\n\n  __decorate([Property(null)], MultiSelect.prototype, \"filterBarPlaceholder\", void 0);\n\n  __decorate([Property({})], MultiSelect.prototype, \"htmlAttributes\", void 0);\n\n  __decorate([Property(null)], MultiSelect.prototype, \"valueTemplate\", void 0);\n\n  __decorate([Property(null)], MultiSelect.prototype, \"headerTemplate\", void 0);\n\n  __decorate([Property(null)], MultiSelect.prototype, \"footerTemplate\", void 0);\n\n  __decorate([Property(null)], MultiSelect.prototype, \"itemTemplate\", void 0);\n\n  __decorate([Property(null)], MultiSelect.prototype, \"allowFiltering\", void 0);\n\n  __decorate([Property(true)], MultiSelect.prototype, \"changeOnBlur\", void 0);\n\n  __decorate([Property(false)], MultiSelect.prototype, \"allowCustomValue\", void 0);\n\n  __decorate([Property(true)], MultiSelect.prototype, \"showClearButton\", void 0);\n\n  __decorate([Property(1000)], MultiSelect.prototype, \"maximumSelectionLength\", void 0);\n\n  __decorate([Property(false)], MultiSelect.prototype, \"readonly\", void 0);\n\n  __decorate([Property(null)], MultiSelect.prototype, \"text\", void 0);\n\n  __decorate([Property(null)], MultiSelect.prototype, \"value\", void 0);\n\n  __decorate([Property(true)], MultiSelect.prototype, \"hideSelectedItem\", void 0);\n\n  __decorate([Property(true)], MultiSelect.prototype, \"closePopupOnSelect\", void 0);\n\n  __decorate([Property('Default')], MultiSelect.prototype, \"mode\", void 0);\n\n  __decorate([Property(',')], MultiSelect.prototype, \"delimiterChar\", void 0);\n\n  __decorate([Property(true)], MultiSelect.prototype, \"ignoreCase\", void 0);\n\n  __decorate([Property(false)], MultiSelect.prototype, \"showDropDownIcon\", void 0);\n\n  __decorate([Property('Never')], MultiSelect.prototype, \"floatLabelType\", void 0);\n\n  __decorate([Property(false)], MultiSelect.prototype, \"showSelectAll\", void 0);\n\n  __decorate([Property('Select All')], MultiSelect.prototype, \"selectAllText\", void 0);\n\n  __decorate([Property('Unselect All')], MultiSelect.prototype, \"unSelectAllText\", void 0);\n\n  __decorate([Property(true)], MultiSelect.prototype, \"enableSelectionOrder\", void 0);\n\n  __decorate([Property(true)], MultiSelect.prototype, \"openOnClick\", void 0);\n\n  __decorate([Event()], MultiSelect.prototype, \"change\", void 0);\n\n  __decorate([Event()], MultiSelect.prototype, \"removing\", void 0);\n\n  __decorate([Event()], MultiSelect.prototype, \"removed\", void 0);\n\n  __decorate([Event()], MultiSelect.prototype, \"selectedAll\", void 0);\n\n  __decorate([Event()], MultiSelect.prototype, \"beforeOpen\", void 0);\n\n  __decorate([Event()], MultiSelect.prototype, \"open\", void 0);\n\n  __decorate([Event()], MultiSelect.prototype, \"close\", void 0);\n\n  __decorate([Event()], MultiSelect.prototype, \"blur\", void 0);\n\n  __decorate([Event()], MultiSelect.prototype, \"focus\", void 0);\n\n  __decorate([Event()], MultiSelect.prototype, \"chipSelection\", void 0);\n\n  __decorate([Event()], MultiSelect.prototype, \"filtering\", void 0);\n\n  __decorate([Event()], MultiSelect.prototype, \"tagging\", void 0);\n\n  __decorate([Event()], MultiSelect.prototype, \"customValueSelection\", void 0);\n\n  MultiSelect = __decorate([NotifyPropertyChanges], MultiSelect);\n  return MultiSelect;\n}(DropDownBase);\n\nexport { MultiSelect };","map":null,"metadata":{},"sourceType":"module"}