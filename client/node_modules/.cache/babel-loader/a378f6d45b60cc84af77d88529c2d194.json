{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { merge, isNullOrUndefined, extend, Property } from '@syncfusion/ej2-base';\nimport { isBlazor } from '@syncfusion/ej2-base';\nimport { Query, DataUtil } from '@syncfusion/ej2-data';\nimport { ValueFormatter } from '../services/value-formatter';\nimport { getUid, templateCompiler, getForeignData, getObject } from '../base/util';\n/**\n * Represents Grid `Column` model class.\n */\n\nvar Column =\n/** @class */\nfunction () {\n  function Column(options) {\n    var _this = this;\n    /**\n     * If `disableHtmlEncode` is set to true, it encodes the HTML of the header and content cells.\n     * @default true\n     */\n\n\n    this.disableHtmlEncode = true;\n    /**\n     * If `allowSorting` set to false, then it disables sorting option of a particular column.\n     * By default all columns are sortable.\n     * @default true\n     */\n\n    this.allowSorting = true;\n    /**\n     * If `allowResizing` is set to false, it disables resize option of a particular column.\n     * By default all the columns can be resized.\n     * @default true\n     */\n\n    this.allowResizing = true;\n    /**\n     * If `allowFiltering` set to false, then it disables filtering option and filter bar element of a particular column.\n     * By default all columns are filterable.\n     * @default true\n     */\n\n    this.allowFiltering = true;\n    /**\n     * If `allowGrouping` set to false, then it disables grouping of a particular column.\n     * By default all columns are groupable.\n     * @default true\n     */\n\n    this.allowGrouping = true;\n    /**\n     * If `allowReordering` set to false, then it disables reorder of a particular column.\n     * By default all columns can be reorder.\n     * @default true\n     */\n\n    this.allowReordering = true;\n    /**\n     * If `showColumnMenu` set to false, then it disable the column menu of a particular column.\n     * By default column menu will show for all columns\n     * @default true\n     */\n\n    this.showColumnMenu = true;\n    /**\n     * If `enableGroupByFormat` set to true, then it groups the particular column by formatted values.\n     * @default true\n     */\n\n    this.enableGroupByFormat = false;\n    /**\n     * If `allowEditing` set to false, then it disables editing of a particular column.\n     * By default all columns are editable.\n     * @default true\n     */\n\n    this.allowEditing = true;\n    /**\n     *  It is used to customize the default filter options for a specific columns.\n     * * type -  Specifies the filter type as menu or checkbox.\n     * * ui - to render custom component for specific column it has following functions.\n     * * ui.create â€“ It is used for creating custom components.\n     * * ui.read -  It is used for read the value from the component.\n     * * ui.write - It is used to apply component model as dynamically.\n     * {% codeBlock src=\"grid/filter-menu-api/index.ts\" %}{% endcodeBlock %}\n     *\n     * > Check the [`Filter UI`](../../grid/filtering/#custom-component-in-filter-menu) for its customization.\n     *  @default {}\n     */\n\n    this.filter = {};\n    /**\n     * If `showInColumnChooser` set to false, then hide the particular column in column chooser.\n     *  By default all columns are displayed in column Chooser.\n     * @default true\n     */\n\n    this.showInColumnChooser = true;\n    /**\n     * Defines the `IEditCell` object to customize default edit cell.\n     * @default {}\n     */\n\n    this.edit = {};\n    /**\n     * If `allowSearching` set to false, then it disables Searching of a particular column.\n     * By default all columns allow Searching.\n     * @default true\n     */\n\n    this.allowSearching = true;\n    /**\n     * If `autoFit` set to true, then the particular column content width will be\n     * adjusted based on its content in the initial rendering itself.\n     * Setting this property as true is equivalent to calling `autoFitColumns` method in the `dataBound` event.\n     * @default false\n     */\n\n    this.autoFit = false;\n    this.sortDirection = 'Descending';\n    /** @hidden */\n\n    this.getEditTemplate = function () {\n      return _this.editTemplateFn;\n    };\n    /** @hidden */\n\n\n    this.getFilterTemplate = function () {\n      return _this.filterTemplateFn;\n    };\n\n    merge(this, options);\n\n    if (this.type === 'none') {\n      this.type = isBlazor() && !isNullOrUndefined(this.template) && isNullOrUndefined(this.field) ? 'none' : null;\n    } else if (this.type) {\n      this.type = typeof this.type === 'string' ? this.type.toLowerCase() : undefined;\n    }\n\n    if (this.editType) {\n      this.editType = this.editType.toLowerCase();\n    }\n\n    if (isNullOrUndefined(this.uid)) {\n      this.uid = getUid('grid-column');\n    }\n\n    var valueFormatter = new ValueFormatter();\n\n    if (options.format && (options.format.skeleton || options.format.format)) {\n      this.setFormatter(valueFormatter.getFormatFunction(extend({}, options.format)));\n      this.setParser(valueFormatter.getParserFunction(options.format));\n    }\n\n    this.toJSON = function () {\n      var col = {};\n      var skip = ['filter', 'dataSource', isBlazor() ? ' ' : 'headerText', 'template', 'headerTemplate', 'edit', 'editTemplate', 'filterTemplate', 'commandsTemplate'];\n      var keys = Object.keys(_this);\n\n      for (var i = 0; i < keys.length; i++) {\n        if (keys[i] === 'columns') {\n          col[keys[i]] = [];\n\n          for (var j = 0; j < _this[keys[i]].length; j++) {\n            col[keys[i]].push(_this[keys[i]][j].toJSON());\n          }\n        } else if (skip.indexOf(keys[i]) < 0) {\n          col[keys[i]] = _this[keys[i]];\n        }\n      }\n\n      return col;\n    };\n\n    if (!this.field) {\n      this.allowFiltering = false;\n      this.allowGrouping = false;\n      this.allowSorting = false;\n\n      if (this.columns) {\n        this.allowResizing = this.columns.some(function (col) {\n          return col.allowResizing;\n        });\n      }\n    }\n\n    if (this.commands && !this.textAlign) {\n      this.textAlign = 'Right';\n    }\n\n    if (this.template || this.commandsTemplate) {\n      this.templateFn = templateCompiler(this.template || this.commandsTemplate);\n    }\n\n    if (this.headerTemplate) {\n      this.headerTemplateFn = templateCompiler(this.headerTemplate);\n    }\n\n    if (!isNullOrUndefined(this.filter) && this.filter.itemTemplate) {\n      this.fltrTemplateFn = templateCompiler(this.filter.itemTemplate);\n    }\n\n    if (this.editTemplate) {\n      this.editTemplateFn = templateCompiler(this.editTemplate);\n    }\n\n    if (this.filterTemplate) {\n      this.filterTemplateFn = templateCompiler(this.filterTemplate);\n    }\n\n    if (this.isForeignColumn() && (isNullOrUndefined(this.editType) || this.editType === 'dropdownedit' || this.editType === 'defaultedit')) {\n      this.editType = 'dropdownedit';\n      this.edit.params = extend({\n        dataSource: this.dataSource,\n        query: new Query(),\n        fields: {\n          value: this.foreignKeyField || this.field,\n          text: this.foreignKeyValue\n        }\n      }, this.edit.params);\n    }\n\n    if (this.sortComparer) {\n      var a_1 = this.sortComparer;\n\n      this.sortComparer = function comparer(x, y, xObj, yObj) {\n        if (typeof a_1 === 'string') {\n          a_1 = getObject(a_1, window);\n        }\n\n        if (this.sortDirection === 'Descending') {\n          var z = x;\n          x = y;\n          y = z;\n          var obj = xObj;\n          xObj = yObj;\n          yObj = obj;\n        }\n\n        return a_1(x, y, xObj, yObj);\n      };\n    }\n\n    if (!this.sortComparer && this.isForeignColumn()) {\n      this.sortComparer = function (x, y) {\n        x = getObject(_this.foreignKeyValue, getForeignData(_this, {}, x)[0]);\n        y = getObject(_this.foreignKeyValue, getForeignData(_this, {}, y)[0]);\n        return _this.sortDirection === 'Descending' ? DataUtil.fnDescending(x, y) : DataUtil.fnAscending(x, y);\n      };\n    }\n  }\n  /** @hidden */\n\n\n  Column.prototype.getSortDirection = function () {\n    return this.sortDirection;\n  };\n  /** @hidden */\n\n\n  Column.prototype.setSortDirection = function (direction) {\n    this.sortDirection = direction;\n  };\n  /** @hidden */\n\n\n  Column.prototype.setProperties = function (column) {\n    //Angular two way binding\n    var keys = Object.keys(column);\n\n    for (var i = 0; i < keys.length; i++) {\n      this[keys[i]] = column[keys[i]];\n    }\n  };\n  /**\n   * @hidden\n   * It defines the column is foreign key column or not.\n   */\n\n\n  Column.prototype.isForeignColumn = function () {\n    return !!(this.dataSource && this.foreignKeyValue);\n  };\n  /** @hidden */\n\n\n  Column.prototype.getFormatter = function () {\n    return this.formatFn;\n  };\n  /** @hidden */\n\n\n  Column.prototype.setFormatter = function (value) {\n    this.formatFn = value;\n  };\n  /** @hidden */\n\n\n  Column.prototype.getParser = function () {\n    return this.parserFn;\n  };\n  /** @hidden */\n\n\n  Column.prototype.setParser = function (value) {\n    this.parserFn = value;\n  };\n  /** @hidden */\n\n\n  Column.prototype.getColumnTemplate = function () {\n    return this.templateFn;\n  };\n  /** @hidden */\n\n\n  Column.prototype.getHeaderTemplate = function () {\n    return this.headerTemplateFn;\n  };\n  /** @hidden */\n\n\n  Column.prototype.getFilterItemTemplate = function () {\n    return this.fltrTemplateFn;\n  };\n  /** @hidden */\n\n\n  Column.prototype.getDomSetter = function () {\n    return this.disableHtmlEncode ? 'textContent' : 'innerHTML';\n  };\n\n  return Column;\n}();\n\nexport { Column };\n/**\n * Define options for custom command buttons.\n */\n\nvar CommandColumnModel =\n/** @class */\nfunction () {\n  function CommandColumnModel() {}\n\n  __decorate([Property()], CommandColumnModel.prototype, \"title\", void 0);\n\n  __decorate([Property()], CommandColumnModel.prototype, \"type\", void 0);\n\n  __decorate([Property()], CommandColumnModel.prototype, \"buttonOption\", void 0);\n\n  return CommandColumnModel;\n}();\n\nexport { CommandColumnModel };","map":null,"metadata":{},"sourceType":"module"}