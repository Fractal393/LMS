{"ast":null,"code":"/**\n * PdfPageSettings.ts class for EJ2-PDF\n */\nimport { SizeF, PointF } from './../drawing/pdf-drawing';\nimport { PdfPageSize } from './pdf-page-size';\nimport { PdfPageRotateAngle, PdfPageOrientation } from './enum';\nimport { PdfMargins } from './../graphics/pdf-margins';\n/**\n * The class provides various `setting` related with PDF pages.\n */\n\nvar PdfPageSettings =\n/** @class */\nfunction () {\n  function PdfPageSettings(margins) {\n    //Fields\n\n    /**\n     * The page `margins`.\n     * @private\n     */\n    this.pageMargins = new PdfMargins();\n    /**\n     * The page `size`.\n     * @default a4\n     * @private\n     */\n\n    this.pageSize = PdfPageSize.a4;\n    /**\n     * The page `rotation angle`.\n     * @default PdfPageRotateAngle.RotateAngle0\n     * @private\n     */\n\n    this.rotateAngle = PdfPageRotateAngle.RotateAngle0;\n    /**\n     * The page `orientation`.\n     * @default PdfPageOrientation.Portrait\n     * @private\n     */\n\n    this.pageOrientation = PdfPageOrientation.Portrait;\n    /**\n     * The page `origin`.\n     * @default 0,0\n     * @private\n     */\n\n    this.pageOrigin = new PointF(0, 0);\n    /**\n     * Checks the Whether the `rotation` is applied or not.\n     * @default false\n     * @private\n     */\n\n    this.isRotation = false;\n\n    if (typeof margins === 'number') {\n      this.pageMargins.setMargins(margins);\n    }\n  }\n\n  Object.defineProperty(PdfPageSettings.prototype, \"size\", {\n    //Properties\n\n    /**\n     * Gets or sets the `size` of the page.\n     * @private\n     */\n    get: function () {\n      return this.pageSize;\n    },\n    set: function (value) {\n      this.setSize(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPageSettings.prototype, \"orientation\", {\n    /**\n     * Gets or sets the page `orientation`.\n     * @private\n     */\n    get: function () {\n      return this.pageOrientation;\n    },\n    set: function (orientation) {\n      if (this.pageOrientation !== orientation) {\n        this.pageOrientation = orientation;\n        this.updateSize(orientation);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPageSettings.prototype, \"margins\", {\n    /**\n     * Gets or sets the `margins` of the page.\n     * @private\n     */\n    get: function () {\n      return this.pageMargins;\n    },\n    set: function (value) {\n      this.pageMargins = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPageSettings.prototype, \"width\", {\n    /**\n     * Gets or sets the `width` of the page.\n     * @private\n     */\n    get: function () {\n      return this.pageSize.width;\n    },\n    set: function (value) {\n      this.pageSize.width = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPageSettings.prototype, \"height\", {\n    /**\n     * Gets or sets the `height` of the page.\n     * @private\n     */\n    get: function () {\n      return this.pageSize.height;\n    },\n    set: function (value) {\n      this.pageSize.height = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPageSettings.prototype, \"origin\", {\n    /**\n     * Gets or sets the `origin` of the page.\n     * @private\n     */\n    get: function () {\n      return this.pageOrigin;\n    },\n    set: function (value) {\n      this.pageOrigin = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPageSettings.prototype, \"rotate\", {\n    /**\n     * Gets or sets the number of degrees by which the page should be `rotated` clockwise when displayed or printed.\n     * @private\n     */\n    get: function () {\n      return this.rotateAngle;\n    },\n    set: function (value) {\n      this.rotateAngle = value;\n      this.isRotation = true;\n    },\n    enumerable: true,\n    configurable: true\n  }); //Methods\n\n  /**\n   * `Update page size` depending on orientation.\n   * @private\n   */\n\n  PdfPageSettings.prototype.updateSize = function (orientation) {\n    var min = Math.min(this.pageSize.width, this.pageSize.height);\n    var max = Math.max(this.pageSize.width, this.pageSize.height);\n\n    switch (orientation) {\n      case PdfPageOrientation.Portrait:\n        this.pageSize = new SizeF(min, max);\n        break;\n\n      case PdfPageOrientation.Landscape:\n        this.pageSize = new SizeF(max, min);\n        break;\n    }\n  };\n  /**\n   * Creates a `clone` of the object.\n   * @private\n   */\n\n\n  PdfPageSettings.prototype.clone = function () {\n    var settings = this;\n    settings.pageMargins = this.pageMargins.clone(); // if (GetTransition() != null)\n    // {\n    //     settings.Transition = (PdfPageTransition)Transition.clone();\n    // }\n\n    return settings;\n  };\n  /**\n   * Returns `size`, shrinked by the margins.\n   * @private\n   */\n\n\n  PdfPageSettings.prototype.getActualSize = function () {\n    var width = this.width - (this.margins.left + this.margins.right);\n    var height = this.height - (this.margins.top + this.margins.bottom);\n    var size = new SizeF(width, height);\n    return size;\n  };\n  /**\n   * Sets `size` to the page aaccording to the orientation.\n   * @private\n   */\n\n\n  PdfPageSettings.prototype.setSize = function (size) {\n    var min = Math.min(size.width, size.height);\n    var max = Math.max(size.width, size.height);\n\n    if (this.orientation === PdfPageOrientation.Portrait) {\n      this.pageSize = new SizeF(min, max);\n    } else {\n      this.pageSize = new SizeF(max, min);\n    }\n  };\n\n  return PdfPageSettings;\n}();\n\nexport { PdfPageSettings };","map":null,"metadata":{},"sourceType":"module"}