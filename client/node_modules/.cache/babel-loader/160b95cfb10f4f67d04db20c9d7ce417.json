{"ast":null,"code":"import { isUndefined, throwError, isNullOrUndefined, extend, isBlazor, getValue } from '../util';\nimport { defaultCurrencyCode } from '../internationalization';\nimport { IntlBase as base } from './intl-base';\nimport { ParserBase as parser } from './parser-base';\nvar errorText = {\n  'ms': 'minimumSignificantDigits',\n  'ls': 'maximumSignificantDigits',\n  'mf': 'minimumFractionDigits',\n  'lf': 'maximumFractionDigits'\n};\nvar integerError = 'minimumIntegerDigits';\nvar percentSign = 'percentSign';\nvar minusSign = 'minusSign';\nvar spaceRegex = /\\s/;\nvar mapper = ['infinity', 'nan', 'group', 'decimal', 'exponential'];\nvar infinity = 'infinity';\nvar nan = 'nan';\n/**\n * Module for number formatting.\n * @private\n */\n\nvar NumberFormat =\n/** @class */\nfunction () {\n  function NumberFormat() {}\n  /**\n   * Returns the formatter function for given skeleton.\n   * @param {string} culture -  Specifies the culture name to be which formatting.\n   * @param {NumberFormatOptions} option - Specific the format in which number  will format.\n   * @param {Object} object- Specifies the global cldr data collection.\n   * @return Function.\n   */\n\n\n  NumberFormat.numberFormatter = function (culture, option, cldr) {\n    var _this = this;\n\n    var fOptions = extend({}, option);\n    var cOptions = {};\n    var dOptions = {};\n    var symbolPattern;\n    var dependable = base.getDependables(cldr, culture, '', true);\n    var numObject = dependable.numericObject;\n    dOptions.numberMapper = isBlazor() ? extend({}, numObject) : parser.getNumberMapper(dependable.parserObject, parser.getNumberingSystem(cldr), true);\n    dOptions.currencySymbol = isBlazor() ? getValue('currencySymbol', numObject) : base.getCurrencySymbol(dependable.numericObject, fOptions.currency || defaultCurrencyCode, option.altSymbol);\n    /* tslint:disable no-any */\n\n    dOptions.percentSymbol = isBlazor() ? getValue('numberSymbols.percentSign', numObject) : dOptions.numberMapper.numberSymbols[percentSign];\n    dOptions.minusSymbol = isBlazor() ? getValue('numberSymbols.minusSign', numObject) : dOptions.numberMapper.numberSymbols[minusSign];\n    var symbols = dOptions.numberMapper.numberSymbols;\n\n    if (option.format && !base.formatRegex.test(option.format)) {\n      cOptions = base.customFormat(option.format, dOptions, dependable.numericObject);\n    } else {\n      extend(fOptions, base.getProperNumericSkeleton(option.format || 'N'));\n      fOptions.isCurrency = fOptions.type === 'currency';\n      fOptions.isPercent = fOptions.type === 'percent';\n\n      if (!isBlazor()) {\n        symbolPattern = base.getSymbolPattern(fOptions.type, dOptions.numberMapper.numberSystem, dependable.numericObject, fOptions.isAccount);\n      }\n\n      fOptions.groupOne = this.checkValueRange(fOptions.maximumSignificantDigits, fOptions.minimumSignificantDigits, true);\n      this.checkValueRange(fOptions.maximumFractionDigits, fOptions.minimumFractionDigits, false, true);\n\n      if (!isUndefined(fOptions.fractionDigits)) {\n        fOptions.minimumFractionDigits = fOptions.maximumFractionDigits = fOptions.fractionDigits;\n      }\n\n      if (isUndefined(fOptions.useGrouping)) {\n        fOptions.useGrouping = true;\n      }\n\n      if (fOptions.isCurrency && !isBlazor()) {\n        symbolPattern = symbolPattern.replace(/\\u00A4/g, base.defaultCurrency);\n      }\n\n      if (!isBlazor()) {\n        var split = symbolPattern.split(';');\n        cOptions.nData = base.getFormatData(split[1] || '-' + split[0], true, dOptions.currencySymbol);\n        cOptions.pData = base.getFormatData(split[0], false, dOptions.currencySymbol);\n\n        if (fOptions.useGrouping) {\n          fOptions.groupSeparator = symbols[mapper[2]];\n          fOptions.groupData = this.getGroupingDetails(split[0]);\n        }\n      } else {\n        cOptions.nData = extend({}, {}, getValue(fOptions.type + 'nData', numObject));\n        cOptions.pData = extend({}, {}, getValue(fOptions.type + 'pData', numObject));\n\n        if (fOptions.type === 'currency' && option.currency) {\n          base.replaceBlazorCurrency([cOptions.pData, cOptions.nData], dOptions.currencySymbol, option.currency);\n        }\n      }\n\n      var minFrac = isUndefined(fOptions.minimumFractionDigits);\n\n      if (minFrac) {\n        fOptions.minimumFractionDigits = cOptions.nData.minimumFraction;\n      }\n\n      if (isUndefined(fOptions.maximumFractionDigits)) {\n        var mval = cOptions.nData.maximumFraction;\n        fOptions.maximumFractionDigits = isUndefined(mval) && fOptions.isPercent ? 0 : mval;\n      }\n\n      var mfrac = fOptions.minimumFractionDigits;\n      var lfrac = fOptions.maximumFractionDigits;\n\n      if (!isUndefined(mfrac) && !isUndefined(lfrac)) {\n        if (mfrac > lfrac) {\n          fOptions.maximumFractionDigits = mfrac;\n        }\n      }\n    }\n\n    extend(cOptions.nData, fOptions);\n    extend(cOptions.pData, fOptions);\n    return function (value) {\n      if (isNaN(value)) {\n        return symbols[mapper[1]];\n      } else if (!isFinite(value)) {\n        return symbols[mapper[0]];\n      }\n\n      return _this.intNumberFormatter(value, cOptions, dOptions);\n    };\n  };\n  /**\n   * Returns grouping details for the pattern provided\n   * @param {string} pattern\n   * @returns {GroupDetails}\n   */\n\n\n  NumberFormat.getGroupingDetails = function (pattern) {\n    var ret = {};\n    var match = pattern.match(base.negativeDataRegex);\n\n    if (match && match[4]) {\n      var pattern_1 = match[4];\n      var p = pattern_1.lastIndexOf(',');\n\n      if (p !== -1) {\n        var temp = pattern_1.split('.')[0];\n        ret.primary = temp.length - p - 1;\n        var s = pattern_1.lastIndexOf(',', p - 1);\n\n        if (s !== -1) {\n          ret.secondary = p - 1 - s;\n        }\n      }\n    }\n\n    return ret;\n  };\n  /**\n   * Returns if the provided integer range is valid.\n   * @param {number} val1\n   * @param {number} val2\n   * @param {boolean} checkbothExist\n   * @param {boolean} isFraction\n   * @returns {boolean}\n   */\n\n\n  NumberFormat.checkValueRange = function (val1, val2, checkbothExist, isFraction) {\n    var decide = isFraction ? 'f' : 's';\n    var dint = 0;\n    var str1 = errorText['l' + decide];\n    var str2 = errorText['m' + decide];\n\n    if (!isUndefined(val1)) {\n      this.checkRange(val1, str1, isFraction);\n      dint++;\n    }\n\n    if (!isUndefined(val2)) {\n      this.checkRange(val2, str2, isFraction);\n      dint++;\n    }\n\n    if (dint === 2) {\n      if (val1 < val2) {\n        throwError(str2 + 'specified must be less than the' + str1);\n      } else {\n        return true;\n      }\n    } else if (checkbothExist && dint === 1) {\n      throwError('Both' + str2 + 'and' + str2 + 'must be present');\n    }\n\n    return false;\n  };\n  /**\n   * Check if the provided fraction range is valid\n   * @param {number} val\n   * @param {string} text\n   * @param {boolean} isFraction\n   * @returns {void}\n   */\n\n\n  NumberFormat.checkRange = function (val, text, isFraction) {\n    var range = isFraction ? [0, 20] : [1, 21];\n\n    if (val < range[0] || val > range[1]) {\n      throwError(text + 'value must be within the range' + range[0] + 'to' + range[1]);\n    }\n  };\n  /**\n   * Returns formatted numeric string for provided formatting options\n   * @param {number} value\n   * @param {base.GenericFormatOptions} fOptions\n   * @param {CommonOptions} dOptions\n   * @returns {string}\n   */\n\n\n  NumberFormat.intNumberFormatter = function (value, fOptions, dOptions) {\n    var curData;\n\n    if (isUndefined(fOptions.nData.type)) {\n      return undefined;\n    } else {\n      if (value < 0) {\n        value = value * -1;\n        curData = fOptions.nData;\n      } else if (value === 0) {\n        curData = fOptions.zeroData || fOptions.pData;\n      } else {\n        curData = fOptions.pData;\n      }\n\n      var fValue = '';\n\n      if (curData.isPercent) {\n        value = value * 100;\n      }\n\n      if (curData.groupOne) {\n        fValue = this.processSignificantDigits(value, curData.minimumSignificantDigits, curData.maximumSignificantDigits);\n      } else {\n        fValue = this.processFraction(value, curData.minimumFractionDigits, curData.maximumFractionDigits);\n\n        if (curData.minimumIntegerDigits) {\n          fValue = this.processMinimumIntegers(fValue, curData.minimumIntegerDigits);\n        }\n      }\n\n      if (curData.type === 'scientific') {\n        fValue = value.toExponential(curData.maximumFractionDigits);\n        fValue = fValue.replace('e', dOptions.numberMapper.numberSymbols[mapper[4]]);\n      }\n\n      fValue = fValue.replace('.', dOptions.numberMapper.numberSymbols[mapper[3]]);\n\n      if (curData.useGrouping) {\n        fValue = this.groupNumbers(fValue, curData.groupData.primary, curData.groupSeparator || ',', dOptions.numberMapper.numberSymbols[mapper[3]] || '.', curData.groupData.secondary);\n      }\n\n      fValue = parser.convertValueParts(fValue, base.latnParseRegex, dOptions.numberMapper.mapper);\n\n      if (curData.nlead === 'N/A') {\n        return curData.nlead;\n      } else {\n        return curData.nlead + fValue + curData.nend;\n      }\n    }\n  };\n  /**\n   * Returns significant digits processed numeric string\n   * @param {number} value\n   * @param {number} min\n   * @param {number} max\n   * @returns {string}\n   */\n\n\n  NumberFormat.processSignificantDigits = function (value, min, max) {\n    var temp = value + '';\n    var tn;\n    var length = temp.length;\n\n    if (length < min) {\n      return value.toPrecision(min);\n    } else {\n      temp = value.toPrecision(max);\n      tn = +temp;\n      return tn + '';\n    }\n  };\n  /**\n   * Returns grouped numeric string\n   * @param {string} val\n   * @param {number} level1\n   * @param {string} sep\n   * @param {string} decimalSymbol\n   * @param {number} level2\n   * @returns {string}\n   */\n\n\n  NumberFormat.groupNumbers = function (val, level1, sep, decimalSymbol, level2) {\n    var flag = !isNullOrUndefined(level2) && level2 !== 0;\n    var split = val.split(decimalSymbol);\n    var prefix = split[0];\n    var length = prefix.length;\n    var str = '';\n\n    while (length > level1) {\n      str = prefix.slice(length - level1, length) + (str.length ? sep + str : '');\n      length -= level1;\n\n      if (flag) {\n        level1 = level2;\n        flag = false;\n      }\n    }\n\n    split[0] = prefix.slice(0, length) + (str.length ? sep : '') + str;\n    return split.join(decimalSymbol);\n  };\n  /**\n   * Returns fraction processed numeric string\n   * @param {number} value\n   * @param {number} min\n   * @param {number} max\n   * @returns {string}\n   */\n\n\n  NumberFormat.processFraction = function (value, min, max) {\n    var temp = (value + '').split('.')[1];\n    var length = temp ? temp.length : 0;\n\n    if (min && length < min) {\n      var ret = '';\n\n      if (length === 0) {\n        ret = value.toFixed(min);\n      } else {\n        ret += value;\n\n        for (var j = 0; j < min - length; j++) {\n          ret += '0';\n        }\n\n        return ret;\n      }\n\n      return value.toFixed(min);\n    } else if (!isNullOrUndefined(max) && (length > max || max === 0)) {\n      return value.toFixed(max);\n    }\n\n    return value + '';\n  };\n  /**\n   * Returns integer processed numeric string\n   * @param {string} value\n   * @param {number} min\n   * @returns {string}\n   */\n\n\n  NumberFormat.processMinimumIntegers = function (value, min) {\n    var temp = value.split('.');\n    var lead = temp[0];\n    var len = lead.length;\n\n    if (len < min) {\n      for (var i = 0; i < min - len; i++) {\n        lead = '0' + lead;\n      }\n\n      temp[0] = lead;\n    }\n\n    return temp.join('.');\n  };\n\n  return NumberFormat;\n}();\n\nexport { NumberFormat };","map":null,"metadata":{},"sourceType":"module"}