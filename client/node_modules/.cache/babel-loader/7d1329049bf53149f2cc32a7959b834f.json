{"ast":null,"code":"import { classNames } from './list-view';\nimport { EventHandler, append, isNullOrUndefined, detach, removeClass, addClass, compile, formatUnit } from '@syncfusion/ej2-base';\nimport { isBlazor, debounce } from '@syncfusion/ej2-base';\nimport { ListBase } from '../common/list-base';\nimport { DataManager } from '@syncfusion/ej2-data';\nvar listElementCount = 1.5;\nvar windowElementCount = 3;\n\nvar Virtualization =\n/** @class */\nfunction () {\n  function Virtualization(instance) {\n    this.elementDifference = 0;\n    this.listViewInstance = instance;\n  }\n  /**\n   * For internal use only.\n   * @private\n   */\n\n\n  Virtualization.prototype.isNgTemplate = function () {\n    return !isNullOrUndefined(this.listViewInstance.templateRef) && typeof this.listViewInstance.templateRef !== 'string';\n  };\n  /**\n   * For internal use only.\n   * @private\n   */\n\n\n  Virtualization.prototype.uiVirtualization = function () {\n    this.wireScrollEvent(false);\n    var curViewDS = this.listViewInstance.curViewDS;\n    var firstDs = curViewDS.slice(0, 1);\n\n    if (!(isBlazor() || this.listViewInstance.isServerRendered)) {\n      this.listViewInstance.ulElement = this.listViewInstance.curUL = ListBase.createList(this.listViewInstance.createElement, firstDs, this.listViewInstance.listBaseOption);\n      this.listViewInstance.contentContainer = this.listViewInstance.createElement('div', {\n        className: classNames.content\n      });\n      this.listViewInstance.element.appendChild(this.listViewInstance.contentContainer);\n      this.listViewInstance.contentContainer.appendChild(this.listViewInstance.ulElement);\n    }\n\n    this.listItemHeight = this.listViewInstance.ulElement.firstElementChild.getBoundingClientRect().height;\n    this.expectedDomItemCount = this.ValidateItemCount(10000);\n    this.domItemCount = this.ValidateItemCount(Object.keys(this.listViewInstance.curViewDS).length);\n    this.uiFirstIndex = 0;\n    this.uiLastIndex = this.domItemCount - 1;\n    var otherDs = curViewDS.slice(1, this.domItemCount);\n\n    if (!(isBlazor() || this.listViewInstance.isServerRendered)) {\n      var listItems = ListBase.createListItemFromJson(this.listViewInstance.createElement, otherDs, this.listViewInstance.listBaseOption);\n      append(listItems, this.listViewInstance.ulElement);\n      this.listViewInstance.liCollection = this.listViewInstance.curUL.querySelectorAll('li');\n      this.topElement = this.listViewInstance.createElement('div');\n      this.listViewInstance.ulElement.insertBefore(this.topElement, this.listViewInstance.ulElement.firstElementChild);\n      this.bottomElement = this.listViewInstance.createElement('div');\n      this.listViewInstance.ulElement.insertBefore(this.bottomElement, null);\n      this.totalHeight = Object.keys(curViewDS).length * this.listItemHeight - this.domItemCount * this.listItemHeight;\n      this.topElement.style.height = 0 + 'px';\n      this.bottomElement.style.height = this.totalHeight + 'px';\n      this.topElementHeight = 0;\n      this.bottomElementHeight = this.totalHeight;\n    } else {\n      this.listViewInstance.contentContainer = this.listViewInstance.element.querySelector('.e-content');\n      this.listViewInstance.liCollection = this.listViewInstance.curUL.querySelectorAll('li');\n    }\n\n    this.listDiff = 0;\n    this.uiIndicesInitialization();\n  };\n\n  Virtualization.prototype.wireScrollEvent = function (destroy) {\n    if (!destroy) {\n      if (!(isBlazor() && this.listViewInstance.isServerRendered)) {\n        if (this.listViewInstance.isWindow) {\n          this.onVirtualScroll = this.onVirtualUiScroll.bind(this);\n          window.addEventListener('scroll', this.onVirtualScroll);\n        } else {\n          EventHandler.add(this.listViewInstance.element, 'scroll', this.onVirtualUiScroll, this);\n        }\n      } else {\n        if (this.listViewInstance.isWindow) {\n          // tslint:disable-next-line:no-any\n          this.onVirtualScroll = debounce(this.onVirtualUiScroll.bind(this), 350); // tslint:enable-next-line:no-any      \n\n          this.updateUl = this.updateUlContainer.bind(this);\n          window.addEventListener('scroll', this.onVirtualScroll);\n          window.addEventListener('scroll', this.updateUl);\n        } else {\n          EventHandler.add(this.listViewInstance.element, 'scroll', debounce(this.onVirtualUiScroll, 350), this);\n          EventHandler.add(this.listViewInstance.element, 'scroll', this.updateUlContainer, this);\n        }\n      }\n    } else {\n      this.listViewInstance.isWindow ? window.removeEventListener('scroll', this.onVirtualScroll) : EventHandler.remove(this.listViewInstance.element, 'scroll', this.onVirtualUiScroll);\n      this.listViewInstance.isWindow ? window.removeEventListener('scroll', this.updateUl) : EventHandler.remove(this.listViewInstance.element, 'scroll', this.updateUlContainer);\n    }\n  };\n\n  Virtualization.prototype.updateUlContainer = function (e) {\n    var listDiff;\n    var virtualElementContainer = this.listViewInstance.ulElement.querySelector('.' + classNames.virtualElementContainer);\n\n    if (isNullOrUndefined(this.listViewInstance.liElementHeight)) {\n      this.listViewInstance.updateLiElementHeight();\n    }\n\n    if (this.listViewInstance.isWindow) {\n      // tslint:disable-next-line:no-any\n      listDiff = Math.round(e.target.documentElement.scrollTop / this.listViewInstance.liElementHeight) - 2; // tslint:enable-next-line:no-any  \n    } else {\n      // tslint:disable-next-line:no-any\n      listDiff = Math.round(e.target.scrollTop / this.listViewInstance.liElementHeight) - 2; // tslint:enable-next-line:no-any  \n    }\n\n    if ((listDiff - 1) * this.listViewInstance.liElementHeight < 0) {\n      virtualElementContainer.style.top = '0px';\n    } else {\n      virtualElementContainer.style.top = listDiff * this.listViewInstance.liElementHeight + 'px';\n    }\n  };\n\n  Virtualization.prototype.ValidateItemCount = function (dataSourceLength) {\n    var height = parseFloat(formatUnit(this.listViewInstance.height));\n    var itemCount;\n\n    if (this.listViewInstance.isWindow) {\n      itemCount = Math.round(window.innerHeight / this.listItemHeight * windowElementCount);\n    } else {\n      if (typeof this.listViewInstance.height === 'string' && this.listViewInstance.height.indexOf('%') !== -1) {\n        // tslint:disable-next-line:max-line-length\n        itemCount = Math.round(this.listViewInstance.element.getBoundingClientRect().height / this.listItemHeight * listElementCount);\n      } else {\n        itemCount = Math.round(height / this.listItemHeight * listElementCount);\n      }\n    }\n\n    if (itemCount > dataSourceLength) {\n      itemCount = dataSourceLength;\n    }\n\n    return itemCount;\n  };\n\n  Virtualization.prototype.uiIndicesInitialization = function () {\n    this.uiIndices = {\n      'activeIndices': [],\n      'disabledItemIndices': [],\n      'hiddenItemIndices': []\n    };\n    var data = this.listViewInstance.curViewDS;\n\n    for (var i = 0; i < data.length; i++) {\n      if (this.listViewInstance.showCheckBox && data[i][this.listViewInstance.fields.isChecked]) {\n        this.uiIndices.activeIndices.push(i);\n      }\n\n      if (!isNullOrUndefined(data[i][this.listViewInstance.fields.enabled]) && !data[i][this.listViewInstance.fields.enabled]) {\n        this.uiIndices.disabledItemIndices.push(i);\n      }\n    }\n\n    if (this.isNgTemplate()) {\n      var items = this.listViewInstance.element.querySelectorAll('.' + classNames.listItem);\n\n      for (var index = 0; index < items.length; index++) {\n        items[index].context = this.listViewInstance.viewContainerRef.get(index).context;\n      }\n    }\n  };\n\n  Virtualization.prototype.refreshItemHeight = function () {\n    if (this.listViewInstance.curViewDS.length) {\n      var curViewDS = this.listViewInstance.curViewDS;\n\n      if (isBlazor() && this.listViewInstance.isServerRendered) {\n        this.listViewInstance.ulElement.children[0].style.height = this.listViewInstance.liElementHeight * Object.keys(curViewDS).length + 'px';\n      } else {\n        this.listItemHeight = this.topElement.nextSibling.getBoundingClientRect().height;\n        this.totalHeight = Object.keys(curViewDS).length * this.listItemHeight - this.domItemCount * this.listItemHeight;\n        this.bottomElementHeight = this.totalHeight;\n        this.bottomElement.style.height = this.totalHeight + 'px';\n      }\n    }\n  };\n\n  Virtualization.prototype.getscrollerHeight = function (startingHeight) {\n    return this.listViewInstance.isWindow ? pageYOffset - startingHeight <= 0 ? 0 : pageYOffset - startingHeight : this.listViewInstance.element.scrollTop - startingHeight <= 0 ? 0 : this.listViewInstance.element.scrollTop - startingHeight;\n  };\n\n  Virtualization.prototype.onVirtualUiScroll = function (e) {\n    var _a;\n\n    var startingHeight;\n\n    if (this.listViewInstance.isWindow) {\n      startingHeight = this.listViewInstance.ulElement.getBoundingClientRect().top - document.documentElement.getBoundingClientRect().top;\n    } else {\n      startingHeight = this.listViewInstance.headerEle ? this.listViewInstance.headerEle.getBoundingClientRect().height : 0;\n    }\n\n    this.scrollPosition = isNullOrUndefined(this.scrollPosition) ? 0 : this.scrollPosition;\n    var scroll = this.getscrollerHeight(startingHeight);\n    this.topElementHeight = this.listItemHeight * Math.floor(scroll / this.listItemHeight);\n    this.bottomElementHeight = this.totalHeight - this.topElementHeight;\n    _a = scroll <= this.totalHeight ? [this.topElementHeight, this.bottomElementHeight] : [this.totalHeight, 0], this.topElementHeight = _a[0], this.bottomElementHeight = _a[1];\n\n    if (isBlazor() && this.listViewInstance.isServerRendered) {\n      var listDiff = void 0;\n\n      if (isNullOrUndefined(this.listViewInstance.liElementHeight)) {\n        this.listViewInstance.updateLiElementHeight();\n      }\n\n      if (this.listViewInstance.isWindow) {\n        listDiff = Math.round(document.documentElement.scrollTop / this.listViewInstance.liElementHeight);\n      } else {\n        // tslint:disable-next-line:no-any\n        listDiff = Math.round(e.target.scrollTop / this.listViewInstance.liElementHeight); // tslint:enable-next-line:no-any\n      }\n\n      if (listDiff - 2 - this.elementDifference >= 3 || listDiff - 2 - this.elementDifference <= -1) {\n        var args = {\n          listDiff: listDiff - 2,\n          selectedItems: this.listViewInstance.previousSelectedItems\n        };\n        this.listViewInstance.interopAdaptor.invokeMethodAsync('VirtalScrolling', args);\n\n        if (this.listViewInstance.ulElement.querySelector('.e-focused')) {\n          this.listViewInstance.ulElement.querySelector('.e-focused').classList.remove('e-focused');\n        }\n\n        this.elementDifference = listDiff - 2;\n      }\n    } else {\n      if (this.topElementHeight !== parseFloat(this.topElement.style.height)) {\n        this.topElement.style.height = this.topElementHeight + 'px';\n        this.bottomElement.style.height = this.bottomElementHeight + 'px';\n\n        if (scroll > this.scrollPosition) {\n          var listDiff = Math.round(this.topElementHeight / this.listItemHeight - this.listDiff);\n\n          if (listDiff > this.expectedDomItemCount + 5) {\n            this.onLongScroll(listDiff, true);\n          } else {\n            this.onNormalScroll(listDiff, true);\n          }\n        } else {\n          var listDiff = Math.round(this.listDiff - this.topElementHeight / this.listItemHeight);\n\n          if (listDiff > this.expectedDomItemCount + 5) {\n            this.onLongScroll(listDiff, false);\n          } else {\n            this.onNormalScroll(listDiff, false);\n          }\n        }\n      }\n\n      this.listDiff = Math.round(this.topElementHeight / this.listItemHeight);\n\n      if (typeof this.listViewInstance.onUIScrolled === 'function') {\n        this.listViewInstance.onUIScrolled();\n      }\n    }\n\n    this.scrollPosition = scroll;\n  };\n\n  Virtualization.prototype.onLongScroll = function (listDiff, isScrollingDown) {\n    var index = isScrollingDown ? this.uiFirstIndex + listDiff : this.uiFirstIndex - listDiff;\n    var elements = this.listViewInstance.ulElement.querySelectorAll('li');\n\n    for (var i = 0; i < elements.length; i++) {\n      this.updateUI(elements[i], index);\n      index++;\n    }\n\n    this.uiLastIndex = isScrollingDown ? this.uiLastIndex + listDiff : this.uiLastIndex - listDiff;\n    this.uiFirstIndex = isScrollingDown ? this.uiFirstIndex + listDiff : this.uiFirstIndex - listDiff;\n  };\n\n  Virtualization.prototype.onNormalScroll = function (listDiff, isScrollingDown) {\n    if (isScrollingDown) {\n      for (var i = 0; i < listDiff; i++) {\n        var index = ++this.uiLastIndex;\n        this.updateUI(this.topElement.nextElementSibling, index, this.bottomElement);\n        this.uiFirstIndex++;\n      }\n    } else {\n      for (var i = 0; i < listDiff; i++) {\n        var index = --this.uiFirstIndex;\n        var target = this.topElement.nextSibling;\n        this.updateUI(this.bottomElement.previousElementSibling, index, target);\n        this.uiLastIndex--;\n      }\n    }\n  };\n\n  Virtualization.prototype.updateUiContent = function (element, index) {\n    var curViewDs = this.listViewInstance.curViewDS;\n\n    if (typeof this.listViewInstance.dataSource[0] === 'string' || typeof this.listViewInstance.dataSource[0] === 'number') {\n      element.dataset.uid = ListBase.generateId();\n      element.getElementsByClassName(classNames.listItemText)[0].innerHTML = this.listViewInstance.curViewDS[index].toString();\n    } else {\n      element.dataset.uid = curViewDs[index][this.listViewInstance.fields.id] ? curViewDs[index][this.listViewInstance.fields.id].toString() : ListBase.generateId();\n      element.getElementsByClassName(classNames.listItemText)[0].innerHTML = curViewDs[index][this.listViewInstance.fields.text].toString();\n    }\n\n    if (this.listViewInstance.showIcon) {\n      if (element.querySelector('.' + classNames.listIcon)) {\n        detach(element.querySelector('.' + classNames.listIcon));\n      }\n\n      if (this.listViewInstance.curViewDS[index][this.listViewInstance.fields.iconCss]) {\n        var textContent = element.querySelector('.' + classNames.textContent);\n        var target = this.listViewInstance.createElement('div', {\n          className: classNames.listIcon + ' ' + this.listViewInstance.curViewDS[index][this.listViewInstance.fields.iconCss]\n        });\n        textContent.insertBefore(target, element.querySelector('.' + classNames.listItemText));\n      }\n    }\n\n    if (this.listViewInstance.showCheckBox && this.listViewInstance.fields.groupBy) {\n      if (!this.checkListWrapper) {\n        this.checkListWrapper = this.listViewInstance.curUL.querySelector('.' + classNames.checkboxWrapper).cloneNode(true);\n      }\n\n      var textContent = element.querySelector('.' + classNames.textContent);\n\n      if (this.listViewInstance.curViewDS[index].isHeader) {\n        if (element.querySelector('.' + classNames.checkboxWrapper)) {\n          element.classList.remove(classNames.checklist);\n          textContent.classList.remove(classNames.checkbox);\n          detach(element.querySelector('.' + classNames.checkboxWrapper));\n        }\n      } else {\n        if (!element.querySelector('.' + classNames.checkboxWrapper)) {\n          element.classList.add(classNames.checklist);\n          textContent.classList.add(classNames.checkbox);\n          textContent.insertBefore(this.checkListWrapper.cloneNode(true), element.querySelector('.' + classNames.listItemText));\n        }\n      }\n    }\n  };\n\n  Virtualization.prototype.changeElementAttributes = function (element, index) {\n    element.classList.remove(classNames.disable);\n\n    if (this.uiIndices.disabledItemIndices.length && this.uiIndices.disabledItemIndices.indexOf(index) !== -1) {\n      element.classList.add(classNames.disable);\n    }\n\n    element.style.display = '';\n\n    if (this.uiIndices.hiddenItemIndices.length && this.uiIndices.hiddenItemIndices.indexOf(index) !== -1) {\n      element.style.display = 'none';\n    }\n\n    if (this.listViewInstance.showCheckBox) {\n      var checklistElement = element.querySelector('.' + classNames.checkboxWrapper);\n      element.classList.remove(classNames.selected);\n      element.classList.remove(classNames.focused);\n\n      if (checklistElement) {\n        checklistElement.removeAttribute('aria-checked');\n        checklistElement.firstElementChild.classList.remove(classNames.checked);\n      }\n\n      if (this.uiIndices.activeIndices.length && this.uiIndices.activeIndices.indexOf(index) !== -1 && !this.listViewInstance.curUL.querySelector(classNames.selected)) {\n        element.classList.add(classNames.selected);\n        checklistElement.firstElementChild.classList.add(classNames.checked);\n        checklistElement.setAttribute('aria-checked', 'true');\n\n        if (this.activeIndex === index) {\n          element.classList.add(classNames.focused);\n        }\n      }\n    } else {\n      element.classList.remove(classNames.selected);\n      element.removeAttribute('aria-selected');\n\n      if (!isNullOrUndefined(this.activeIndex) && this.activeIndex === index && !this.listViewInstance.curUL.querySelector(classNames.selected)) {\n        element.classList.add(classNames.selected);\n        element.setAttribute('aria-selected', 'true');\n      }\n    }\n\n    if (this.listViewInstance.fields.groupBy) {\n      if (this.listViewInstance.curViewDS[index].isHeader) {\n        if (element.classList.contains(classNames.listItem)) {\n          element.classList.remove(classNames.listItem);\n          element.setAttribute('role', 'group');\n          element.classList.add(classNames.groupListItem);\n        }\n      } else {\n        if (element.classList.contains(classNames.groupListItem)) {\n          element.classList.remove(classNames.groupListItem);\n          element.setAttribute('role', 'listitem');\n          element.classList.add(classNames.listItem);\n        }\n      }\n    }\n  };\n\n  Virtualization.prototype.findDSAndIndexFromId = function (ds, fields) {\n    var _this = this;\n\n    var resultJSON = {};\n    fields = this.listViewInstance.getElementUID(fields);\n\n    if (!isNullOrUndefined(fields)) {\n      ds.some(function (data, index) {\n        if (fields[_this.listViewInstance.fields.id] && fields[_this.listViewInstance.fields.id].toString() === (data[_this.listViewInstance.fields.id] && data[_this.listViewInstance.fields.id].toString()) || fields === data) {\n          resultJSON.index = index;\n          resultJSON.data = data;\n          return true;\n        } else {\n          return false;\n        }\n      });\n    }\n\n    return resultJSON;\n  };\n\n  Virtualization.prototype.getSelectedItems = function () {\n    var _this = this;\n\n    if (!isNullOrUndefined(this.activeIndex) || this.listViewInstance.showCheckBox && this.uiIndices.activeIndices.length) {\n      var dataCollection = [];\n      var textCollection = [];\n\n      if (typeof this.listViewInstance.dataSource[0] === 'string' || typeof this.listViewInstance.dataSource[0] === 'number') {\n        var curViewDS_1 = this.listViewInstance.curViewDS;\n\n        if (this.listViewInstance.showCheckBox) {\n          var indices = this.uiIndices.activeIndices;\n\n          for (var i = 0; i < indices.length; i++) {\n            dataCollection.push(curViewDS_1[indices[i]]);\n          }\n\n          return {\n            text: dataCollection,\n            data: dataCollection,\n            index: this.uiIndices.activeIndices.map(function (index) {\n              return _this.listViewInstance.dataSource.indexOf(curViewDS_1[index]);\n            })\n          };\n        } else {\n          return {\n            text: curViewDS_1[this.activeIndex],\n            data: curViewDS_1[this.activeIndex],\n            index: this.listViewInstance.dataSource.indexOf(curViewDS_1[this.activeIndex])\n          };\n        }\n      } else {\n        if (isBlazor() && this.listViewInstance.isServerRendered) {\n          var scrollDiff = Math.round(this.listViewInstance.element.scrollTop / this.listViewInstance.liElementHeight) - 2;\n\n          if (scrollDiff < 0) {\n            scrollDiff = 0;\n          }\n\n          this.activeIndex += scrollDiff;\n        }\n\n        var curViewDS_2 = this.listViewInstance.curViewDS;\n        var text = this.listViewInstance.fields.text;\n\n        if (this.listViewInstance.showCheckBox) {\n          var indexArray = this.uiIndices.activeIndices;\n\n          for (var i = 0; i < indexArray.length; i++) {\n            textCollection.push(curViewDS_2[indexArray[i]][text]);\n            dataCollection.push(curViewDS_2[indexArray[i]]);\n          }\n\n          var dataSource_1 = this.listViewInstance.dataSource instanceof DataManager ? curViewDS_2 : this.listViewInstance.dataSource;\n          return {\n            text: textCollection,\n            data: dataCollection,\n            index: this.uiIndices.activeIndices.map(function (index) {\n              return dataSource_1.indexOf(curViewDS_2[index]);\n            })\n          };\n        } else {\n          var dataSource = this.listViewInstance.dataSource instanceof DataManager ? curViewDS_2 : this.listViewInstance.dataSource;\n          return {\n            text: curViewDS_2[this.activeIndex][this.listViewInstance.fields.text],\n            data: curViewDS_2[this.activeIndex],\n            index: dataSource.indexOf(curViewDS_2[this.activeIndex])\n          };\n        }\n      }\n    } else {\n      return undefined;\n    }\n  };\n\n  Virtualization.prototype.selectItem = function (obj) {\n    var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);\n\n    if (Object.keys(resutJSON).length) {\n      var isSelected = this.activeIndex === resutJSON.index;\n      var isChecked = void 0;\n      this.activeIndex = resutJSON.index;\n\n      if (this.listViewInstance.showCheckBox) {\n        if (this.uiIndices.activeIndices.indexOf(resutJSON.index) === -1) {\n          isChecked = true;\n          this.uiIndices.activeIndices.push(resutJSON.index);\n        } else {\n          isChecked = false;\n          this.uiIndices.activeIndices.splice(this.uiIndices.activeIndices.indexOf(resutJSON.index), 1);\n        }\n\n        if (this.listViewInstance.curUL.querySelector('.' + classNames.focused)) {\n          this.listViewInstance.curUL.querySelector('.' + classNames.focused).classList.remove(classNames.focused);\n        }\n      }\n\n      if (this.listViewInstance.getLiFromObjOrElement(obj)) {\n        if (this.listViewInstance.showCheckBox) {\n          this.listViewInstance.setCheckboxLI(this.listViewInstance.getLiFromObjOrElement(obj));\n        } else {\n          this.listViewInstance.setSelectLI(this.listViewInstance.getLiFromObjOrElement(obj));\n        }\n      } else {\n        var eventArgs = void 0;\n\n        if (typeof this.listViewInstance.dataSource[0] === 'string' || typeof this.listViewInstance.dataSource[0] === 'number') {\n          eventArgs = {\n            text: this.listViewInstance.curViewDS[this.activeIndex],\n            data: this.listViewInstance.curViewDS[this.activeIndex],\n            index: this.activeIndex\n          };\n        } else {\n          var curViewDS = this.listViewInstance.curViewDS;\n          eventArgs = {\n            text: curViewDS[this.activeIndex][this.listViewInstance.fields.text],\n            data: curViewDS[this.activeIndex],\n            index: this.activeIndex\n          };\n        }\n\n        if (this.listViewInstance.showCheckBox) {\n          eventArgs.isChecked = isChecked;\n          this.listViewInstance.trigger('select', eventArgs);\n        } else if (!isSelected) {\n          this.listViewInstance.removeSelect();\n          this.listViewInstance.trigger('select', eventArgs);\n        }\n      }\n    } else if (isNullOrUndefined(obj) && !this.listViewInstance.showCheckBox) {\n      this.listViewInstance.removeSelect();\n      this.activeIndex = undefined;\n    }\n\n    if (isBlazor() && this.listViewInstance.isServerRendered) {\n      // tslint:disable-next-line:no-any\n      var elementId = resutJSON.data[this.listViewInstance.fields.id]; // tslint:enable-next-line:no-any\n\n      if (this.listViewInstance.showCheckBox) {\n        if (!this.listViewInstance.previousSelectedItems.includes(elementId)) {\n          this.listViewInstance.previousSelectedItems.push(elementId);\n        } else {\n          var indexPosition = this.listViewInstance.previousSelectedItems.indexOf(elementId);\n\n          if (indexPosition > -1) {\n            this.listViewInstance.previousSelectedItems.splice(indexPosition, 1);\n          }\n        }\n      } else {\n        this.listViewInstance.previousSelectedItems[0] = elementId;\n      }\n\n      this.listViewInstance.removeActiveClass();\n    }\n  };\n\n  Virtualization.prototype.enableItem = function (obj) {\n    var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);\n\n    if (isBlazor() && this.listViewInstance.isServerRendered) {\n      var itemId = resutJSON.data[this.listViewInstance.fields.id];\n\n      if (!this.listViewInstance.enabledItems.includes(itemId)) {\n        this.listViewInstance.enabledItems.push(itemId);\n        this.listViewInstance.removeActiveClass();\n      }\n\n      if (this.listViewInstance.disabledItems.includes(itemId)) {\n        var indexPosition = this.listViewInstance.disabledItems.indexOf(itemId);\n\n        if (indexPosition > -1) {\n          this.listViewInstance.disabledItems.splice(indexPosition, 1);\n        }\n      }\n    } else {\n      if (Object.keys(resutJSON).length) {\n        this.uiIndices.disabledItemIndices.splice(this.uiIndices.disabledItemIndices.indexOf(resutJSON.index), 1);\n      }\n    }\n  };\n\n  Virtualization.prototype.disableItem = function (obj) {\n    var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);\n\n    if (isBlazor() && this.listViewInstance.isServerRendered) {\n      var liElementId = resutJSON.data[this.listViewInstance.fields.id];\n\n      if (!this.listViewInstance.disabledItems.includes(liElementId)) {\n        this.listViewInstance.disabledItems.push(liElementId);\n        this.listViewInstance.removeActiveClass();\n      }\n\n      if (this.listViewInstance.enabledItems.includes(liElementId)) {\n        var indexPosition = this.listViewInstance.enabledItems.indexOf(liElementId);\n\n        if (indexPosition > -1) {\n          this.listViewInstance.enabledItems.splice(indexPosition, 1);\n        }\n      }\n    } else {\n      if (Object.keys(resutJSON).length && this.uiIndices.disabledItemIndices.indexOf(resutJSON.index) === -1) {\n        this.uiIndices.disabledItemIndices.push(resutJSON.index);\n      }\n    }\n  };\n\n  Virtualization.prototype.showItem = function (obj) {\n    var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);\n\n    if (isBlazor() && this.listViewInstance.isServerRendered) {\n      // tslint:disable-next-line:no-any\n      var hiddenElementId = resutJSON.data[this.listViewInstance.fields.id]; // tslint:enable-next-line:no-any\n\n      if (this.listViewInstance.hiddenItems.includes(hiddenElementId)) {\n        var indexPosition = this.listViewInstance.hiddenItems.indexOf(hiddenElementId);\n\n        if (indexPosition > -1) {\n          this.listViewInstance.previousSelectedItems.splice(indexPosition, 1);\n          this.listViewInstance.removeActiveClass();\n        }\n      }\n    } else {\n      if (Object.keys(resutJSON).length) {\n        this.uiIndices.hiddenItemIndices.splice(this.uiIndices.hiddenItemIndices.indexOf(resutJSON.index), 1);\n      }\n    }\n  };\n\n  Virtualization.prototype.hideItem = function (obj) {\n    var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);\n\n    if (isBlazor() && this.listViewInstance.isServerRendered) {\n      // tslint:disable-next-line:no-any\n      var elementId = resutJSON.data[this.listViewInstance.fields.id]; // tslint:enable-next-line:no-any\n\n      if (!this.listViewInstance.hiddenItems.includes(elementId)) {\n        this.listViewInstance.hiddenItems.push(elementId);\n        this.listViewInstance.removeActiveClass();\n      }\n    } else {\n      if (Object.keys(resutJSON).length && this.uiIndices.hiddenItemIndices.indexOf(resutJSON.index) === -1) {\n        this.uiIndices.hiddenItemIndices.push(resutJSON.index);\n      }\n    }\n  };\n\n  Virtualization.prototype.removeItem = function (obj) {\n    var dataSource;\n    var curViewDS = this.listViewInstance.curViewDS;\n    var resutJSON = this.findDSAndIndexFromId(curViewDS, obj);\n\n    if (isBlazor() && this.listViewInstance.isServerRendered) {\n      if (resutJSON.index !== undefined) {\n        // tslint:disable\n        this.listViewInstance.interopAdaptor.invokeMethodAsync('RemoveItemPosition', resutJSON.index); // tslint:enable\n      }\n    }\n\n    if (Object.keys(resutJSON).length) {\n      dataSource = resutJSON.data;\n\n      if (curViewDS[resutJSON.index - 1] && curViewDS[resutJSON.index - 1].isHeader && curViewDS[resutJSON.index - 1].items.length === 1) {\n        this.removeUiItem(resutJSON.index - 1);\n        this.removeUiItem(resutJSON.index - 1);\n      } else {\n        if (!(isBlazor() && this.listViewInstance.isServerRendered)) {\n          this.removeUiItem(resutJSON.index);\n        }\n      }\n    }\n\n    var listDataSource = this.listViewInstance.dataSource instanceof DataManager ? this.listViewInstance.localData : this.listViewInstance.dataSource;\n    var index = listDataSource.indexOf(dataSource);\n\n    if (index !== -1) {\n      listDataSource.splice(index, 1);\n      this.listViewInstance.setViewDataSource(listDataSource);\n    } // recollect all the list item into collection\n\n\n    this.listViewInstance.liCollection = this.listViewInstance.curUL.querySelectorAll('li');\n  };\n\n  Virtualization.prototype.setCheckboxLI = function (li, e) {\n    if (isBlazor() && this.listViewInstance.isServerRendered) {\n      this.uiFirstIndex = Math.round(this.listViewInstance.element.scrollTop / 36) - 4;\n\n      if (this.uiFirstIndex < 0) {\n        this.uiFirstIndex = 0;\n      }\n    }\n\n    var index = Array.prototype.indexOf.call(this.listViewInstance.curUL.querySelectorAll('li'), li) + this.uiFirstIndex;\n    this.activeIndex = Array.prototype.indexOf.call(this.listViewInstance.curUL.querySelectorAll('li'), li) + this.uiFirstIndex;\n\n    if (li.classList.contains(classNames.selected)) {\n      if (this.uiIndices.activeIndices.indexOf(index) === -1) {\n        this.uiIndices.activeIndices.push(index);\n      }\n    } else {\n      this.uiIndices.activeIndices.splice(this.uiIndices.activeIndices.indexOf(index), 1);\n    }\n  };\n\n  Virtualization.prototype.setSelectLI = function (li, e) {\n    this.activeIndex = Array.prototype.indexOf.call(this.listViewInstance.curUL.querySelectorAll('li'), li) + this.uiFirstIndex;\n  };\n\n  Virtualization.prototype.checkedItem = function (checked) {\n    if (checked) {\n      this.uiIndices.activeIndices = [];\n      this.activeIndex = undefined;\n      var data = this.listViewInstance.curViewDS;\n\n      for (var index = 0; index < data.length; index++) {\n        if (!data[index].isHeader) {\n          this.uiIndices.activeIndices.push(index);\n        }\n      }\n    } else {\n      this.activeIndex = undefined;\n      this.uiIndices.activeIndices = [];\n    }\n  };\n\n  Virtualization.prototype.addUiItem = function (index) {\n    // virtually new add list item based on the scollbar position\n    // if the scroll bar is at the top, just pretend the new item has been added since no UI\n    // change is required for the item that has been added at last but when scroll bar is at the bottom\n    // just detach top and inject into bottom to mimic new item is added\n    var curViewDs = this.listViewInstance.curViewDS;\n    this.changeUiIndices(index, true);\n\n    if (this.activeIndex && this.activeIndex >= index) {\n      this.activeIndex++;\n    }\n\n    if (this.listViewInstance.showCheckBox && curViewDs[index][this.listViewInstance.fields.isChecked]) {\n      this.uiIndices.activeIndices.push(index);\n    }\n\n    if (!parseFloat(this.bottomElement.style.height) && !parseFloat(this.topElement.style.height)) {\n      this.bottomElement.style.height = parseFloat(this.bottomElement.style.height) + this.listItemHeight + 'px';\n    }\n\n    if (parseFloat(this.bottomElement.style.height)) {\n      var liItem = this.listViewInstance.curUL.lastElementChild.previousSibling;\n      var target = this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 1]) || this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 2]);\n\n      if (target) {\n        this.bottomElement.style.height = parseFloat(this.bottomElement.style.height) + this.listItemHeight + 'px';\n        this.updateUI(liItem, index, target);\n      }\n    } else {\n      var liItem = this.listViewInstance.curUL.firstElementChild.nextSibling;\n      var target = void 0;\n\n      if (Object.keys(this.listViewInstance.curViewDS).length - 1 === index) {\n        target = this.listViewInstance.curUL.lastElementChild;\n      } else {\n        target = this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 1]) || this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 2]);\n      }\n\n      this.topElement.style.height = parseFloat(this.topElement.style.height) + this.listItemHeight + 'px';\n      this.uiFirstIndex++;\n      this.uiLastIndex++;\n\n      if (target) {\n        this.updateUI(liItem, index, target);\n        this.listViewInstance.isWindow ? window.scrollTo(0, pageYOffset + this.listItemHeight) : this.listViewInstance.element.scrollTop += this.listItemHeight;\n      }\n    }\n\n    this.totalHeight += this.listItemHeight;\n    this.listDiff = Math.round(parseFloat(this.topElement.style.height) / this.listItemHeight);\n  };\n\n  Virtualization.prototype.removeUiItem = function (index) {\n    this.totalHeight -= this.listItemHeight;\n    var curViewDS = this.listViewInstance.curViewDS[index];\n    var liItem = this.listViewInstance.getLiFromObjOrElement(curViewDS);\n    this.listViewInstance.curViewDS.splice(index, 1);\n\n    if (this.activeIndex && this.activeIndex >= index) {\n      this.activeIndex--;\n    }\n\n    if (liItem) {\n      if (this.domItemCount > Object.keys(this.listViewInstance.curViewDS).length) {\n        detach(liItem);\n        this.domItemCount--;\n        this.uiLastIndex--;\n        this.totalHeight = 0;\n      } else {\n        if (liItem.classList.contains(classNames.disable)) {\n          liItem.classList.remove(classNames.disable);\n          this.uiIndices.disabledItemIndices.splice(this.uiIndices.disabledItemIndices.indexOf(index), 1);\n        }\n\n        if (liItem.style.display === 'none') {\n          liItem.style.display = '';\n          this.uiIndices.hiddenItemIndices.splice(this.uiIndices.hiddenItemIndices.indexOf(index), 1);\n        }\n\n        if (this.listViewInstance.showCheckBox && liItem.classList.contains(classNames.selected)) {\n          this.listViewInstance.removeSelect();\n          this.uiIndices.activeIndices.splice(this.uiIndices.activeIndices.indexOf(index), 1);\n          var checklistElement = liItem.querySelector('.' + classNames.checkboxWrapper);\n          checklistElement.removeAttribute('aria-checked');\n          checklistElement.firstElementChild.classList.remove(classNames.checked);\n\n          if (liItem.classList.contains(classNames.focused)) {\n            liItem.classList.remove(classNames.focused);\n            this.activeIndex = undefined;\n          }\n        } else if (liItem.classList.contains(classNames.selected)) {\n          this.listViewInstance.removeSelect();\n          this.activeIndex = undefined;\n        }\n\n        if (!parseFloat(this.bottomElement.style.height) && !parseFloat(this.topElement.style.height)) {\n          this.updateUI(liItem, this.uiLastIndex, this.bottomElement);\n        } else if (parseFloat(this.bottomElement.style.height)) {\n          this.bottomElement.style.height = parseFloat(this.bottomElement.style.height) - this.listItemHeight + 'px';\n          this.updateUI(liItem, this.uiLastIndex, this.bottomElement);\n        } else {\n          this.topElement.style.height = parseFloat(this.topElement.style.height) - this.listItemHeight + 'px';\n          this.updateUI(liItem, this.uiFirstIndex - 1, this.topElement.nextSibling);\n          this.uiLastIndex--;\n          this.uiFirstIndex--;\n        }\n      }\n    }\n\n    this.changeUiIndices(index, false);\n    this.listDiff = Math.round(parseFloat(this.topElement.style.height) / this.listItemHeight);\n  };\n\n  Virtualization.prototype.changeUiIndices = function (index, increment) {\n    var keys = Object.keys(this.uiIndices);\n\n    for (var ind = 0; ind < keys.length; ind++) {\n      this.uiIndices[keys[ind]] = this.uiIndices[keys[ind]].map(function (i) {\n        if (i >= index) {\n          return increment ? ++i : --i;\n        } else {\n          return i;\n        }\n      });\n    }\n  };\n\n  Virtualization.prototype.addItem = function (data, fields, dataSource) {\n    for (var i = 0; i < data.length; i++) {\n      var currentItem = data[i]; // push the given data to main data array\n\n      dataSource.push(currentItem); // recalculate all the group data or other datasource related things\n\n      this.listViewInstance.setViewDataSource(dataSource); // render list items for first time due to no datasource present earlier\n\n      if (!this.domItemCount) {\n        // fresh rendering for first time\n        if ((this.listViewInstance.template || this.listViewInstance.groupTemplate) && !this.isNgTemplate()) {\n          this.listViewInstance.listBaseOption.template = null;\n          this.listViewInstance.listBaseOption.groupTemplate = null;\n          this.listViewInstance.listBaseOption.itemCreated = this.createUIItem.bind(this);\n        }\n\n        this.uiVirtualization(); // when expected expected DOM count doesn't meet the condition we need to create and inject new item into DOM\n      } else if (this.domItemCount < this.expectedDomItemCount) {\n        var ds = this.listViewInstance.findItemFromDS(dataSource, fields);\n\n        if (ds instanceof Array) {\n          if (this.listViewInstance.ulElement) {\n            var index = this.listViewInstance.curViewDS.indexOf(currentItem); // inject new list item into DOM\n\n            this.createAndInjectNewItem(currentItem, index); // check for group header item\n\n            var curViewDS = this.listViewInstance.curViewDS[index - 1];\n\n            if (curViewDS && curViewDS.isHeader && curViewDS.items.length === 1) {\n              // target group item index in datasource\n              --index; // inject new group header into DOM for previously created list item\n\n              this.createAndInjectNewItem(curViewDS, index);\n            }\n          } // recollect all the list item into collection\n\n\n          this.listViewInstance.liCollection = this.listViewInstance.curUL.querySelectorAll('li');\n        }\n      } else {\n        var index = this.listViewInstance.curViewDS.indexOf(currentItem); // virtually new add list item based on the scollbar position\n\n        this.addUiItem(index); // check for group header item needs to be added\n\n        var curViewDS = this.listViewInstance.curViewDS[index - 1];\n\n        if (curViewDS && curViewDS.isHeader && curViewDS.items.length === 1) {\n          this.addUiItem(index - 1);\n        }\n      }\n    }\n  };\n\n  Virtualization.prototype.createAndInjectNewItem = function (itemData, index) {\n    // generate li item for given datasource\n    var target;\n    var li = ListBase.createListItemFromJson(this.listViewInstance.createElement, [itemData], this.listViewInstance.listBaseOption); // check for target element whether to insert before last item or group item\n\n    if (Object.keys(this.listViewInstance.curViewDS).length - 1 === index) {\n      target = this.listViewInstance.curUL.lastElementChild;\n    } else {\n      // target group header's first child item to append its header\n      target = this.listViewInstance.getLiFromObjOrElement(this.listViewInstance.curViewDS[index + 1]) || this.listViewInstance.getLiFromObjOrElement(this.listViewInstance.curViewDS[index + 2]);\n    } // insert before the target element\n\n\n    this.listViewInstance.ulElement.insertBefore(li[0], target); // increment internal DOM count, last index count for new element\n\n    this.domItemCount++;\n\n    if (this.bottomElementHeight <= 0) {\n      this.uiLastIndex++;\n    } // recalculate the current item height, to avoid jumpy scroller\n\n\n    this.refreshItemHeight();\n  };\n\n  Virtualization.prototype.createUIItem = function (args) {\n    var virtualTemplate = this.listViewInstance.template;\n    var template = this.listViewInstance.createElement('div');\n    var commonTemplate = '<div class=\"e-text-content\" role=\"presentation\"> ' + '<span class=\"e-list-text\"> ${' + this.listViewInstance.fields.text + '} </span></div>';\n\n    if (this.listViewInstance.showCheckBox) {\n      // tslint:disable-next-line:no-any\n      this.listViewInstance.renderCheckbox(args); // tslint:enable-next-line:no-any\n\n      if (!isNullOrUndefined(this.listViewInstance.virtualCheckBox) && !isNullOrUndefined(this.listViewInstance.virtualCheckBox.outerHTML)) {\n        var div = document.createElement('div');\n        div.innerHTML = this.listViewInstance.template || commonTemplate;\n        div.children[0].classList.add('e-checkbox');\n        this.listViewInstance.checkBoxPosition === 'Left' ? div.children[0].classList.add('e-checkbox-left') : div.children[0].classList.add('e-checkbox-right');\n\n        if (this.listViewInstance.checkBoxPosition === 'Left') {\n          div.children[0].insertBefore(this.listViewInstance.virtualCheckBox, div.childNodes[0].children[0]);\n        } else {\n          div.children[0].appendChild(this.listViewInstance.virtualCheckBox);\n        }\n\n        this.listViewInstance.template = div.innerHTML;\n      }\n\n      template.innerHTML = this.listViewInstance.template;\n      this.listViewInstance.template = virtualTemplate;\n    } else {\n      template.innerHTML = this.listViewInstance.template || commonTemplate;\n    } // tslint:disable-next-line:no-any\n\n\n    var templateElements = template.getElementsByTagName('*');\n    var groupTemplate = this.listViewInstance.createElement('div');\n\n    if (this.listViewInstance.fields.groupBy) {\n      groupTemplate.innerHTML = this.listViewInstance.groupTemplate || commonTemplate;\n    } // tslint:disable-next-line:no-any\n\n\n    var groupTemplateElements = groupTemplate.getElementsByTagName('*');\n\n    if (args.curData.isHeader) {\n      this.headerData = args.curData;\n    }\n\n    this.templateData = args.curData.isHeader ? args.curData.items[0] : args.curData;\n    args.item.innerHTML = '';\n    args.item.context = {\n      data: args.curData,\n      nodes: {\n        flatTemplateNodes: [],\n        groupTemplateNodes: []\n      }\n    };\n\n    for (var i = 0; i < templateElements.length; i++) {\n      this.compileTemplate(templateElements[i], args.item, false);\n    }\n\n    for (var i = 0; i < groupTemplateElements.length; i++) {\n      this.compileTemplate(groupTemplateElements[i], args.item, true);\n    }\n\n    args.item.context.template = args.curData.isHeader ? template.firstElementChild : groupTemplate.firstElementChild;\n    args.item.context.type = args.curData.isHeader ? 'flatList' : 'groupList';\n    var element = args.curData.isHeader ? groupTemplate : template;\n    args.item.insertBefore(element.firstElementChild, null);\n  };\n\n  Virtualization.prototype.compileTemplate = function (element, item, isHeader) {\n    this.textProperty(element, item, isHeader);\n    this.classProperty(element, item, isHeader);\n    this.attributeProperty(element, item, isHeader);\n  };\n\n  Virtualization.prototype.onChange = function (newData, listElement) {\n    listElement.context.data = newData;\n    var groupTemplateNodes = listElement.context.nodes.groupTemplateNodes;\n    var flatTemplateNodes = listElement.context.nodes.flatTemplateNodes;\n\n    if (!isNullOrUndefined(newData.isHeader) && newData.isHeader && listElement.context.type === 'groupList') {\n      var element = listElement.firstElementChild;\n      detach(listElement.firstElementChild);\n      listElement.insertBefore(listElement.context.template, null);\n      listElement.context.template = element;\n      listElement.context.type = 'flatList';\n\n      for (var i = 0; i < groupTemplateNodes.length; i++) {\n        groupTemplateNodes[i].onChange(newData);\n      }\n    } else if (!newData.isHeader && listElement.context.type === 'flatList') {\n      var element = listElement.firstElementChild;\n      detach(listElement.firstElementChild);\n      listElement.insertBefore(listElement.context.template, null);\n      listElement.context.template = element;\n      listElement.context.type = 'groupList';\n\n      for (var i = 0; i < flatTemplateNodes.length; i++) {\n        flatTemplateNodes[i].onChange(newData);\n      }\n    } else if (!newData.isHeader) {\n      for (var i = 0; i < flatTemplateNodes.length; i++) {\n        flatTemplateNodes[i].onChange(newData);\n      }\n    } else {\n      for (var i = 0; i < groupTemplateNodes.length; i++) {\n        groupTemplateNodes[i].onChange(newData);\n      }\n    }\n  };\n\n  Virtualization.prototype.updateContextData = function (listElement, node, isHeader) {\n    if (isHeader) {\n      listElement.context.nodes.groupTemplateNodes.push(node);\n    } else {\n      listElement.context.nodes.flatTemplateNodes.push(node);\n    }\n  };\n\n  Virtualization.prototype.classProperty = function (element, listElement, isHeader) {\n    var regex = new RegExp('\\\\${([^}]*)}', 'g');\n    var resultantOutput = [];\n    var regexMatch;\n\n    while (regexMatch !== null) {\n      var match = regex.exec(element.className);\n      resultantOutput.push(match);\n      regexMatch = match;\n\n      if (regexMatch === null) {\n        resultantOutput.pop();\n      }\n    }\n\n    if (resultantOutput && resultantOutput.length) {\n      var _loop_1 = function (i) {\n        var classNameMatch = resultantOutput[i];\n        var classFunction;\n\n        if (classNameMatch[1].indexOf('?') !== -1 && classNameMatch[1].indexOf(':') !== -1) {\n          // tslint:disable-next-line:no-function-constructor-with-string-args\n          classFunction = new Function('data', 'return ' + classNameMatch[1].replace(/\\$/g, 'data.'));\n        } else {\n          // tslint:disable-next-line:no-function-constructor-with-string-args\n          classFunction = new Function('data', 'return ' + 'data.' + classNameMatch[1]);\n        }\n\n        var subNode = {};\n\n        if (isHeader) {\n          subNode.bindedvalue = classFunction(this_1.headerData);\n        } else {\n          subNode.bindedvalue = classFunction(this_1.templateData);\n        }\n\n        subNode.onChange = function (value) {\n          if (subNode.bindedvalue) {\n            removeClass([element], subNode.bindedvalue.split(' ').filter(function (css) {\n              return css;\n            }));\n          }\n\n          var newCss = classFunction(value);\n\n          if (newCss) {\n            addClass([element], newCss.split(' ').filter(function (css) {\n              return css;\n            }));\n          }\n\n          subNode.bindedvalue = newCss;\n        };\n\n        var className = classNameMatch[0].split(' ');\n\n        for (var i_1 = 0; i_1 < className.length; i_1++) {\n          element.classList.remove(className[i_1]);\n        }\n\n        if (subNode.bindedvalue) {\n          addClass([element], subNode.bindedvalue.split(' ').filter(function (css) {\n            return css;\n          }));\n        }\n\n        this_1.updateContextData(listElement, subNode, isHeader);\n      };\n\n      var this_1 = this;\n\n      for (var i = 0; i < resultantOutput.length; i++) {\n        _loop_1(i);\n      }\n    }\n  };\n\n  Virtualization.prototype.attributeProperty = function (element, listElement, isHeader) {\n    var attributeNames = [];\n\n    for (var i = 0; i < element.attributes.length; i++) {\n      attributeNames.push(element.attributes[i].nodeName);\n    }\n\n    if (attributeNames.indexOf('class') !== -1) {\n      attributeNames.splice(attributeNames.indexOf('class'), 1);\n    }\n\n    var _loop_2 = function (i) {\n      var attributeName = attributeNames[i];\n      var attrNameMatch = new RegExp('\\\\${([^}]*)}', 'g').exec(attributeName) || [];\n      var attrValueMatch = new RegExp('\\\\${([^}]*)}', 'g').exec(element.getAttribute(attributeName)) || [];\n      var attributeNameFunction;\n      var attributeValueFunction;\n\n      if (attrNameMatch.length || attrValueMatch.length) {\n        if (attrNameMatch[1]) {\n          // tslint:disable-next-line:no-function-constructor-with-string-args\n          attributeNameFunction = new Function('data', 'return ' + 'data.' + attrNameMatch[1]);\n        }\n\n        if (attrValueMatch[1]) {\n          if (attrValueMatch[1].indexOf('?') !== -1 && attrValueMatch[1].indexOf(':') !== -1) {\n            // tslint:disable-next-line:no-function-constructor-with-string-args\n            attributeValueFunction = new Function('data', 'return ' + attrValueMatch[1].replace(/\\$/g, 'data.'));\n          } else {\n            // tslint:disable-next-line:no-function-constructor-with-string-args\n            attributeValueFunction = new Function('data', 'return ' + 'data.' + attrValueMatch[1]);\n          }\n        }\n\n        var subNode_1 = {};\n\n        if (isHeader) {\n          subNode_1.bindedvalue = [attrNameMatch[1] === undefined ? undefined : attributeNameFunction(this_2.headerData), attrValueMatch[1] === undefined ? undefined : attributeValueFunction(this_2.headerData)];\n        } else {\n          subNode_1.bindedvalue = [attrNameMatch[1] === undefined ? undefined : attributeNameFunction(this_2.templateData), attrValueMatch[1] === undefined ? undefined : attributeValueFunction(this_2.templateData)];\n        }\n\n        subNode_1.attrName = subNode_1.bindedvalue[0] === undefined ? attributeName : subNode_1.bindedvalue[0];\n\n        subNode_1.onChange = function (value) {\n          var bindedvalue = subNode_1.bindedvalue[1] === undefined ? element.getAttribute(subNode_1.attrName) : attributeValueFunction(value);\n          element.removeAttribute(subNode_1.attrName);\n          subNode_1.attrName = subNode_1.bindedvalue[0] === undefined ? subNode_1.attrName : attributeNameFunction(value);\n          element.setAttribute(subNode_1.attrName, bindedvalue);\n          subNode_1.bindedvalue = [subNode_1.bindedvalue[0] === undefined ? undefined : attributeNameFunction(value), subNode_1.bindedvalue[1] === undefined ? undefined : attributeValueFunction(value)];\n        };\n\n        var attributeValue = subNode_1.bindedvalue[1] === undefined ? element.getAttribute(attributeName) : subNode_1.bindedvalue[1];\n        element.removeAttribute(attributeName);\n        element.setAttribute(subNode_1.attrName, attributeValue);\n        this_2.updateContextData(listElement, subNode_1, isHeader);\n      }\n    };\n\n    var this_2 = this;\n\n    for (var i = 0; i < attributeNames.length; i++) {\n      _loop_2(i);\n    }\n  };\n\n  Virtualization.prototype.textProperty = function (element, listElement, isHeader) {\n    var regex = new RegExp('\\\\${([^}]*)}', 'g');\n    var resultantOutput = [];\n    var regexMatch;\n\n    while (regexMatch !== null) {\n      var match = regex.exec(element.innerText);\n      resultantOutput.push(match);\n      regexMatch = match;\n\n      if (regexMatch === null) {\n        resultantOutput.pop();\n      }\n    }\n\n    var isChildHasTextContent = Array.prototype.some.call(element.children, function (element) {\n      if (new RegExp('\\\\${([^}]*)}', 'g').exec(element.innerText)) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n\n    if (resultantOutput && resultantOutput.length && !isChildHasTextContent) {\n      var _loop_3 = function (i) {\n        var textPropertyMatch = resultantOutput[i];\n        var subNode = {};\n        var textFunction;\n\n        if (textPropertyMatch[1].indexOf('?') !== -1 && textPropertyMatch[1].indexOf(':') !== -1) {\n          // tslint:disable-next-line:no-function-constructor-with-string-args\n          textFunction = new Function('data', 'return ' + textPropertyMatch[1].replace(/\\$/g, 'data.'));\n        } else {\n          // tslint:disable-next-line:no-function-constructor-with-string-args\n          textFunction = new Function('data', 'return ' + 'data.' + textPropertyMatch[1]);\n        }\n\n        if (isHeader) {\n          subNode.bindedvalue = textFunction(this_3.headerData);\n        } else {\n          subNode.bindedvalue = textFunction(this_3.templateData);\n        }\n\n        subNode.onChange = function (value) {\n          element.innerText = element.innerText.replace(subNode.bindedvalue, textFunction(value));\n          subNode.bindedvalue = textFunction(value);\n        };\n\n        element.innerText = element.innerText.replace(textPropertyMatch[0], subNode.bindedvalue);\n        this_3.updateContextData(listElement, subNode, isHeader);\n      };\n\n      var this_3 = this;\n\n      for (var i = 0; i < resultantOutput.length; i++) {\n        _loop_3(i);\n      }\n    }\n  };\n\n  Virtualization.prototype.reRenderUiVirtualization = function () {\n    this.wireScrollEvent(true);\n\n    if (this.listViewInstance.contentContainer) {\n      detach(this.listViewInstance.contentContainer);\n    }\n\n    this.listViewInstance.preRender(); // resetting the dom count to 0, to avoid edge case of dataSource suddenly becoming zero\n    // and then manually adding item using addItem API\n\n    this.domItemCount = 0;\n    this.listViewInstance.header();\n    this.listViewInstance.setLocalData();\n  };\n\n  Virtualization.prototype.updateUI = function (element, index, targetElement) {\n    var onChange = this.isNgTemplate() ? this.onNgChange : this.onChange;\n\n    if (this.listViewInstance.template || this.listViewInstance.groupTemplate) {\n      var curViewDS = this.listViewInstance.curViewDS[index];\n      element.dataset.uid = curViewDS[this.listViewInstance.fields.id] ? curViewDS[this.listViewInstance.fields.id].toString() : ListBase.generateId();\n      onChange(curViewDS, element, this);\n    } else {\n      this.updateUiContent(element, index);\n    }\n\n    this.changeElementAttributes(element, index);\n\n    if (targetElement) {\n      this.listViewInstance.ulElement.insertBefore(element, targetElement);\n    }\n  };\n\n  Virtualization.prototype.onNgChange = function (newData, listElement, virtualThis) {\n    // compile given target element with template for new data\n    var templateCompiler = compile(virtualThis.listViewInstance.template);\n    var resultElement = templateCompiler(newData);\n\n    while (listElement.lastChild) {\n      listElement.removeChild(listElement.lastChild);\n    }\n\n    listElement.appendChild(resultElement[0]);\n  };\n\n  Virtualization.prototype.getModuleName = function () {\n    return 'virtualization';\n  };\n\n  Virtualization.prototype.destroy = function () {\n    this.wireScrollEvent(true);\n  };\n\n  return Virtualization;\n}();\n\nexport { Virtualization };","map":null,"metadata":{},"sourceType":"module"}