{"ast":null,"code":"/**\r\n * DevExtreme (ui/selection/selection.strategy.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar dataQuery = require(\"../../data/query\");\n\nvar commonUtils = require(\"../../core/utils/common\");\n\nvar typeUtils = require(\"../../core/utils/type\");\n\nvar getKeyHash = commonUtils.getKeyHash;\n\nvar Class = require(\"../../core/class\");\n\nvar Deferred = require(\"../../core/utils/deferred\").Deferred;\n\nmodule.exports = Class.inherit({\n  ctor: function (options) {\n    this.options = options;\n\n    this._setOption(\"disabledItemKeys\", []);\n\n    this._clearItemKeys();\n  },\n  _clearItemKeys: function () {\n    this._setOption(\"addedItemKeys\", []);\n\n    this._setOption(\"removedItemKeys\", []);\n\n    this._setOption(\"removedItems\", []);\n\n    this._setOption(\"addedItems\", []);\n  },\n  validate: commonUtils.noop,\n  _setOption: function (name, value) {\n    this.options[name] = value;\n  },\n  onSelectionChanged: function onSelectionChanged() {\n    var addedItemKeys = this.options.addedItemKeys;\n    var removedItemKeys = this.options.removedItemKeys;\n    var addedItems = this.options.addedItems;\n    var removedItems = this.options.removedItems;\n    var selectedItems = this.options.selectedItems;\n    var selectedItemKeys = this.options.selectedItemKeys;\n    var onSelectionChanged = this.options.onSelectionChanged || commonUtils.noop;\n\n    this._clearItemKeys();\n\n    onSelectionChanged({\n      selectedItems: selectedItems,\n      selectedItemKeys: selectedItemKeys,\n      addedItemKeys: addedItemKeys,\n      removedItemKeys: removedItemKeys,\n      addedItems: addedItems,\n      removedItems: removedItems\n    });\n  },\n  equalKeys: function (key1, key2) {\n    if (this.options.equalByReference) {\n      if (typeUtils.isObject(key1) && typeUtils.isObject(key2)) {\n        return key1 === key2;\n      }\n    }\n\n    return commonUtils.equalByValue(key1, key2);\n  },\n  getSelectableItems: function (items) {\n    return items.filter(function (item) {\n      return !item.disabled;\n    });\n  },\n  _clearSelection: function (keys, preserve, isDeselect, isSelectAll) {\n    keys = keys || [];\n    keys = Array.isArray(keys) ? keys : [keys];\n    this.validate();\n    return this.selectedItemKeys(keys, preserve, isDeselect, isSelectAll);\n  },\n  _loadFilteredData: function (remoteFilter, localFilter, select, isSelectAll) {\n    var filterLength = encodeURI(JSON.stringify(remoteFilter)).length;\n    var needLoadAllData = this.options.maxFilterLengthInRequest && filterLength > this.options.maxFilterLengthInRequest;\n    var deferred = new Deferred();\n    var loadOptions = {\n      filter: needLoadAllData ? void 0 : remoteFilter,\n      select: needLoadAllData ? this.options.dataFields() : select || this.options.dataFields()\n    };\n\n    if (remoteFilter && 0 === remoteFilter.length) {\n      deferred.resolve([]);\n    } else {\n      this.options.load(loadOptions).done(function (items) {\n        var filteredItems = typeUtils.isPlainObject(items) ? items.data : items;\n\n        if (localFilter && !isSelectAll) {\n          filteredItems = filteredItems.filter(localFilter);\n        } else {\n          if (needLoadAllData) {\n            filteredItems = dataQuery(filteredItems).filter(remoteFilter).toArray();\n          }\n        }\n\n        deferred.resolve(filteredItems);\n      }).fail(deferred.reject.bind(deferred));\n    }\n\n    return deferred;\n  },\n  updateSelectedItemKeyHash: function (keys) {\n    for (var i = 0; i < keys.length; i++) {\n      var keyHash = getKeyHash(keys[i]);\n\n      if (!typeUtils.isObject(keyHash)) {\n        this.options.keyHashIndices[keyHash] = this.options.keyHashIndices[keyHash] || [];\n        var keyIndices = this.options.keyHashIndices[keyHash];\n        keyIndices.push(i);\n      }\n    }\n  },\n  _isAnyItemSelected: function (items) {\n    for (var i = 0; i < items.length; i++) {\n      if (this.options.isItemSelected(items[i])) {\n        return;\n      }\n    }\n\n    return false;\n  },\n  _getFullSelectAllState: function () {\n    var items = this.options.plainItems();\n    var dataFilter = this.options.filter();\n    var selectedItems = this.options.selectedItems;\n\n    if (dataFilter) {\n      selectedItems = dataQuery(selectedItems).filter(dataFilter).toArray();\n    }\n\n    var selectedItemsLength = selectedItems.length;\n\n    if (!selectedItemsLength) {\n      return this._isAnyItemSelected(items);\n    }\n\n    if (selectedItemsLength >= this.options.totalCount() - this.options.disabledItemKeys.length) {\n      return true;\n    }\n\n    return;\n  },\n  _getVisibleSelectAllState: function () {\n    var items = this.getSelectableItems(this.options.plainItems());\n    var hasSelectedItems = false;\n    var hasUnselectedItems = false;\n\n    for (var i = 0; i < items.length; i++) {\n      var item = items[i];\n      var itemData = this.options.getItemData(item);\n      var key = this.options.keyOf(itemData);\n\n      if (this.options.isSelectableItem(item)) {\n        if (this.isItemKeySelected(key)) {\n          hasSelectedItems = true;\n        } else {\n          hasUnselectedItems = true;\n        }\n      }\n    }\n\n    if (hasSelectedItems) {\n      return !hasUnselectedItems ? true : void 0;\n    } else {\n      return false;\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"script"}