{"ast":null,"code":"/**\n * AriaService\n * @hidden\n */\nvar AriaService =\n/** @class */\nfunction () {\n  function AriaService() {}\n\n  AriaService.prototype.setOptions = function (target, options) {\n    var props = Object.keys(options);\n\n    for (var i = 0; i < props.length; i++) {\n      setStateAndProperties(target, config[props[i]], options[props[i]]);\n    }\n  };\n\n  AriaService.prototype.setExpand = function (target, expand) {\n    setStateAndProperties(target, config.expand, expand);\n  };\n\n  AriaService.prototype.setSort = function (target, direction) {\n    setStateAndProperties(target, config.sort, direction, typeof direction === 'boolean');\n  };\n\n  AriaService.prototype.setBusy = function (target, isBusy) {\n    setStateAndProperties(target, config.busy, isBusy);\n    setStateAndProperties(target, config.invalid, null, true);\n  };\n\n  AriaService.prototype.setGrabbed = function (target, isGrabbed, remove) {\n    setStateAndProperties(target, config.grabbed, isGrabbed, remove);\n  };\n\n  AriaService.prototype.setDropTarget = function (target, isTarget) {\n    setStateAndProperties(target, config.dropeffect, 'copy', !isTarget);\n  };\n\n  return AriaService;\n}();\n\nexport { AriaService };\n/**\n * @hidden\n */\n\nfunction setStateAndProperties(target, attribute, value, remove) {\n  if (remove && target) {\n    target.removeAttribute(attribute);\n    return;\n  }\n\n  if (target) {\n    target.setAttribute(attribute, value);\n  }\n}\n\nvar config = {\n  expand: 'aria-expanded',\n  role: 'role',\n  selected: 'aria-selected',\n  multiselectable: 'aria-multiselectable',\n  sort: 'aria-sort',\n  busy: 'aria-busy',\n  invalid: 'aria-invalid',\n  grabbed: 'aria-grabbed',\n  dropeffect: 'aria-dropeffect',\n  haspopup: 'aria-haspopup',\n  level: 'aria-level',\n  colcount: 'aria-colcount'\n};","map":null,"metadata":{},"sourceType":"module"}