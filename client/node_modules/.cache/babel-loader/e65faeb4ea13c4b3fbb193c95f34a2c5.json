{"ast":null,"code":"import { EventHandler, detach, formatUnit, Browser, closest, isBlazor, extend } from '@syncfusion/ej2-base';\nimport { Column } from '../models/column';\nimport { ColumnWidthService } from '../services/width-controller';\nimport * as events from '../base/constant';\nimport { getScrollBarWidth, parentsUntil } from '../base/util';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nexport var resizeClassList = {\n  root: 'e-rhandler',\n  suppress: 'e-rsuppress',\n  icon: 'e-ricon',\n  helper: 'e-rhelper',\n  header: 'th.e-headercell',\n  cursor: 'e-rcursor'\n};\n/**\n * `Resize` module is used to handle Resize to fit for columns.\n * @hidden\n * @private\n */\n\nvar Resize =\n/** @class */\nfunction () {\n  /**\n   * Constructor for the Grid resize module\n   * @hidden\n   */\n  function Resize(parent) {\n    this.tapped = false;\n    this.isDblClk = true;\n    this.parent = parent;\n\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.widthService = new ColumnWidthService(parent);\n    this.addEventListener();\n  }\n  /**\n   * Resize by field names.\n   * @param  {string|string[]} fName - Defines the field name.\n   * @return {void}\n   */\n\n\n  Resize.prototype.autoFitColumns = function (fName) {\n    var columnName = fName === undefined || fName === null || fName.length <= 0 ? this.parent.getColumns().map(function (x) {\n      return x.field;\n    }) : typeof fName === 'string' ? [fName] : fName;\n    this.findColumn(columnName);\n  };\n\n  Resize.prototype.autoFit = function () {\n    var newarray = this.parent.getColumns().filter(function (c) {\n      return c.autoFit === true;\n    }).map(function (c) {\n      return c.field || c.headerText;\n    });\n\n    if (newarray.length > 0) {\n      this.autoFitColumns(newarray);\n    }\n  };\n  /* tslint:disable-next-line:max-func-body-length */\n\n\n  Resize.prototype.resizeColumn = function (fName, index, id) {\n    var gObj = this.parent;\n    var tWidth = 0;\n    var headerTable;\n    var contentTable;\n    var footerTable;\n    var headerDivTag = 'e-gridheader';\n    var contentDivTag = 'e-gridcontent';\n    var footerDivTag = 'e-gridfooter';\n    var indentWidth = 0;\n    var uid = id ? id : this.parent.getUidByColumnField(fName);\n    var columnIndex = this.parent.getNormalizedColumnIndex(uid);\n    var headerTextClone;\n    var contentTextClone;\n    var footerTextClone;\n    var columnIndexByField = this.parent.getColumnIndexByField(fName);\n    var frzCols = gObj.getFrozenColumns();\n\n    if (!isNullOrUndefined(gObj.getFooterContent())) {\n      footerTable = gObj.getFooterContentTable();\n    }\n\n    if (frzCols) {\n      if (index < frzCols) {\n        headerTable = gObj.getHeaderTable();\n        contentTable = gObj.getContentTable();\n        headerTextClone = headerTable.querySelector('[e-mappinguid=\"' + uid + '\"]').parentElement.cloneNode(true);\n        contentTextClone = contentTable.querySelectorAll(\"td:nth-child(\" + (columnIndex + 1) + \")\");\n\n        if (footerTable) {\n          footerTextClone = footerTable.querySelectorAll(\"td:nth-child(\" + (columnIndex + 1) + \")\");\n        }\n      } else {\n        headerTable = gObj.getHeaderContent().querySelector('.e-movableheader').children[0];\n        contentTable = gObj.getContent().querySelector('.e-movablecontent').children[0];\n        headerTextClone = headerTable.querySelector('[e-mappinguid=\"' + uid + '\"]').parentElement.cloneNode(true);\n        contentTextClone = contentTable.querySelectorAll(\"td:nth-child(\" + (columnIndex - frzCols + 1) + \")\");\n\n        if (footerTable) {\n          footerTable = gObj.getFooterContent().querySelector('.e-movablefootercontent').children[0];\n          footerTextClone = footerTable.querySelectorAll(\"td:nth-child(\" + (columnIndex - frzCols + 1) + \")\");\n        }\n      }\n    } else {\n      headerTable = gObj.getHeaderTable();\n      contentTable = gObj.getContentTable();\n      headerTextClone = headerTable.querySelector('[e-mappinguid=\"' + uid + '\"]').parentElement.cloneNode(true);\n      contentTextClone = contentTable.querySelectorAll(\"td:nth-child(\" + (columnIndex + 1) + \"):not(.e-groupcaption)\");\n\n      if (footerTable) {\n        footerTextClone = footerTable.querySelectorAll(\"td:nth-child(\" + (columnIndex + 1) + \"):not(.e-groupcaption)\");\n      }\n    }\n\n    var indentWidthClone = headerTable.querySelector('tr').querySelectorAll('.e-grouptopleftcell');\n\n    if (indentWidthClone.length > 0) {\n      for (var i = 0; i < indentWidthClone.length; i++) {\n        indentWidth += indentWidthClone[i].offsetWidth;\n      }\n    }\n\n    var detailsElement = contentTable.querySelector('.e-detailrowcollapse') || contentTable.querySelector('.e-detailrowexpand');\n\n    if ((this.parent.detailTemplate || this.parent.childGrid) && detailsElement) {\n      indentWidth += detailsElement.offsetWidth;\n    }\n\n    var headerText = [headerTextClone];\n    var contentText = [];\n    var footerText = [];\n\n    if (footerTable) {\n      for (var i = 0; i < footerTextClone.length; i++) {\n        footerText[i] = footerTextClone[i].cloneNode(true);\n      }\n    }\n\n    for (var i = 0; i < contentTextClone.length; i++) {\n      contentText[i] = contentTextClone[i].cloneNode(true);\n    }\n\n    var wHeader = this.createTable(headerTable, headerText, headerDivTag);\n    var wContent = this.createTable(contentTable, contentText, contentDivTag);\n    var wFooter = null;\n\n    if (footerText.length) {\n      wFooter = this.createTable(footerTable, footerText, footerDivTag);\n    }\n\n    var columnbyindex = gObj.getColumns()[columnIndexByField];\n    var result;\n    var width = columnbyindex.width = formatUnit(Math.max(wHeader, wContent, wFooter));\n    var colMaxWidth = columnbyindex.maxWidth && parseFloat(columnbyindex.maxWidth.toString());\n\n    if (parseInt(width, 10) > colMaxWidth) {\n      columnbyindex.width = colMaxWidth;\n    }\n\n    this.widthService.setColumnWidth(gObj.getColumns()[columnIndexByField]);\n    result = gObj.getColumns().some(function (x) {\n      return x.width === null || x.width === undefined || x.width.length <= 0;\n    });\n\n    if (result === false) {\n      var element = gObj.getColumns();\n\n      for (var i = 0; i < element.length; i++) {\n        if (element[i].visible) {\n          tWidth = tWidth + parseFloat(element[i].width);\n        }\n      }\n    }\n\n    var calcTableWidth = tWidth + indentWidth;\n\n    if (tWidth > 0 && !gObj.getFrozenColumns()) {\n      if (this.parent.detailTemplate || this.parent.childGrid) {\n        this.widthService.setColumnWidth(new Column({\n          width: '30px'\n        }));\n      }\n\n      headerTable.style.width = formatUnit(calcTableWidth);\n      contentTable.style.width = formatUnit(calcTableWidth);\n\n      if (!isNullOrUndefined(footerTable)) {\n        footerTable.style.width = formatUnit(calcTableWidth);\n      }\n    }\n\n    var tableWidth = headerTable.offsetWidth;\n    var contentwidth = gObj.getContent().scrollWidth;\n\n    if (contentwidth > tableWidth) {\n      headerTable.classList.add('e-tableborder');\n      contentTable.classList.add('e-tableborder');\n    } else {\n      headerTable.classList.remove('e-tableborder');\n      contentTable.classList.remove('e-tableborder');\n    }\n\n    if (!isNullOrUndefined(footerTable)) {\n      footerTable.classList.add('e-tableborder');\n    }\n  };\n  /**\n   * To destroy the resize\n   * @return {void}\n   * @hidden\n   */\n\n\n  Resize.prototype.destroy = function () {\n    var gridElement = this.parent.element;\n\n    if (!gridElement || !gridElement.querySelector('.e-gridheader') && !gridElement.querySelector('.e-gridcontent')) {\n      return;\n    }\n\n    this.widthService = null;\n    this.unwireEvents();\n    this.removeEventListener();\n  };\n  /**\n   * For internal use only - Get the module name.\n   * @private\n   */\n\n\n  Resize.prototype.getModuleName = function () {\n    return 'resize';\n  };\n\n  Resize.prototype.findColumn = function (fName) {\n    for (var i = 0; i < fName.length; i++) {\n      var fieldName = fName[i];\n      var columnIndex = this.parent.getColumnIndexByField(fieldName);\n      var column = this.parent.getColumns()[columnIndex];\n\n      if (columnIndex > -1 && !isNullOrUndefined(column) && column.visible === true) {\n        this.resizeColumn(fieldName, columnIndex);\n      }\n    }\n  };\n  /**\n   * To create table for autofit\n   * @hidden\n   */\n\n\n  Resize.prototype.createTable = function (table, text, tag) {\n    var myTableDiv = this.parent.createElement('div');\n    myTableDiv.className = this.parent.element.className;\n    myTableDiv.style.cssText = 'display: inline-block;visibility:hidden;position:absolute';\n    var mySubDiv = this.parent.createElement('div');\n    mySubDiv.className = tag;\n    var myTable = this.parent.createElement('table');\n    myTable.className = table.className;\n    myTable.classList.add('e-resizetable');\n    myTable.style.cssText = 'table-layout: auto;width: auto';\n    var myTr = this.parent.createElement('tr');\n\n    for (var i = 0; i < text.length; i++) {\n      var tr = myTr.cloneNode();\n      tr.className = table.querySelector('tr').className;\n      tr.appendChild(text[i]);\n      myTable.appendChild(tr);\n    }\n\n    mySubDiv.appendChild(myTable);\n    myTableDiv.appendChild(mySubDiv);\n    document.body.appendChild(myTableDiv);\n    var offsetWidthValue = myTable.getBoundingClientRect().width;\n    document.body.removeChild(myTableDiv);\n    return Math.ceil(offsetWidthValue);\n  };\n  /**\n   * @hidden\n   */\n\n\n  Resize.prototype.addEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.on(events.headerRefreshed, this.refreshHeight, this);\n    this.parent.on(events.initialEnd, this.wireEvents, this);\n    this.parent.on(events.contentReady, this.autoFit, this);\n  };\n  /**\n   * @hidden\n   */\n\n\n  Resize.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(events.headerRefreshed, this.refreshHeight);\n    this.parent.off(events.initialEnd, this.wireEvents);\n  };\n  /**\n   * @hidden\n   */\n\n\n  Resize.prototype.render = function () {\n    this.unwireEvents();\n    this.wireEvents();\n    this.setHandlerHeight();\n  };\n\n  Resize.prototype.refreshHeight = function () {\n    var element = this.getResizeHandlers();\n\n    for (var i = 0; i < element.length; i++) {\n      if (element[i].parentElement.offsetHeight > 0) {\n        element[i].style.height = element[i].parentElement.offsetHeight + 'px';\n      }\n    }\n\n    this.setHandlerHeight();\n  };\n\n  Resize.prototype.wireEvents = function () {\n    EventHandler.add(this.parent.getHeaderContent(), Browser.touchStartEvent, this.resizeStart, this);\n    EventHandler.add(this.parent.getHeaderContent(), events.dblclick, this.callAutoFit, this);\n  };\n\n  Resize.prototype.unwireEvents = function () {\n    EventHandler.remove(this.parent.getHeaderContent(), Browser.touchStartEvent, this.resizeStart);\n    EventHandler.remove(this.parent.getHeaderContent(), events.dblclick, this.callAutoFit);\n  };\n\n  Resize.prototype.getResizeHandlers = function () {\n    return this.parent.getFrozenColumns() ? [].slice.call(this.parent.getHeaderContent().querySelectorAll('.' + resizeClassList.root)) : [].slice.call(this.parent.getHeaderTable().querySelectorAll('.' + resizeClassList.root));\n  };\n\n  Resize.prototype.setHandlerHeight = function () {\n    var element = [].slice.call(this.parent.getHeaderTable().querySelectorAll('.' + resizeClassList.suppress));\n\n    for (var i = 0; i < element.length; i++) {\n      element[i].style.height = element[i].parentElement.offsetHeight + 'px';\n    }\n  };\n\n  Resize.prototype.callAutoFit = function (e) {\n    if (e.target.classList.contains('e-rhandler')) {\n      var col = this.getTargetColumn(e);\n\n      if (col.columns) {\n        return;\n      }\n\n      this.resizeColumn(col.field, this.parent.getNormalizedColumnIndex(col.uid), col.uid);\n      var header = closest(e.target, resizeClassList.header);\n      header.classList.add('e-resized');\n    }\n  };\n\n  Resize.prototype.resizeStart = function (e) {\n    var _this = this;\n\n    if (e.target.classList.contains('e-rhandler')) {\n      if (!this.helper) {\n        if (this.getScrollBarWidth() === 0) {\n          for (var _i = 0, _a = this.refreshColumnWidth(); _i < _a.length; _i++) {\n            var col = _a[_i];\n            this.widthService.setColumnWidth(col);\n          }\n\n          this.widthService.setWidthToTable();\n        }\n\n        this.refreshStackedColumnWidth();\n        this.element = e.target;\n\n        if (this.parent.getVisibleFrozenColumns()) {\n          var mtbody = this.parent.getContent().querySelector('.e-movablecontent').querySelector('tbody');\n          var ftbody = this.parent.getContent().querySelector('.e-frozencontent').querySelector('tbody');\n          var mtr = mtbody.querySelectorAll('tr');\n          var ftr = ftbody.querySelectorAll('tr');\n\n          for (var i = 0; i < mtr.length; i++) {\n            if (this.parent.rowHeight) {\n              mtr[i].style.height = this.parent.rowHeight + 'px';\n              ftr[i].style.height = this.parent.rowHeight + 'px';\n            } else {\n              mtr[i].style.removeProperty('height');\n              ftr[i].style.removeProperty('height');\n            }\n          }\n        }\n\n        this.parentElementWidth = this.parent.element.getBoundingClientRect().width;\n        this.appendHelper();\n        this.column = this.getTargetColumn(e);\n        this.pageX = this.getPointX(e);\n\n        if (this.parent.enableRtl) {\n          this.minMove = parseFloat(this.column.width.toString()) - (this.column.minWidth ? parseFloat(this.column.minWidth.toString()) : 0);\n        } else {\n          this.minMove = (this.column.minWidth ? parseFloat(this.column.minWidth.toString()) : 0) - parseFloat(isNullOrUndefined(this.column.width) ? '' : this.column.width.toString());\n        }\n\n        this.minMove += this.pageX;\n      }\n\n      if (Browser.isDevice && !this.helper.classList.contains(resizeClassList.icon)) {\n        this.helper.classList.add(resizeClassList.icon);\n        EventHandler.add(document, Browser.touchStartEvent, this.removeHelper, this);\n        EventHandler.add(this.helper, Browser.touchStartEvent, this.resizeStart, this);\n      } else {\n        var args = void 0;\n\n        if (!isBlazor() || this.parent.isJsComponent) {\n          args = {\n            e: e,\n            column: this.column\n          };\n        } else {\n          var clonedColumn = extend({}, this.column);\n          args = {\n            column: clonedColumn\n          };\n        }\n\n        this.parent.trigger(events.resizeStart, args, function (args) {\n          if (args.cancel || _this.parent.isEdit) {\n            _this.cancelResizeAction();\n\n            return;\n          }\n\n          EventHandler.add(document, Browser.touchEndEvent, _this.resizeEnd, _this);\n          EventHandler.add(_this.parent.element, Browser.touchMoveEvent, _this.resizing, _this);\n\n          _this.updateCursor('add');\n        });\n      }\n    }\n  };\n\n  Resize.prototype.cancelResizeAction = function (removeEvents) {\n    if (removeEvents) {\n      EventHandler.remove(this.parent.element, Browser.touchMoveEvent, this.resizing);\n      EventHandler.remove(document, Browser.touchEndEvent, this.resizeEnd);\n      this.updateCursor('remove');\n    }\n\n    if (Browser.isDevice) {\n      EventHandler.remove(document, Browser.touchStartEvent, this.removeHelper);\n      EventHandler.remove(this.helper, Browser.touchStartEvent, this.resizeStart);\n    }\n\n    detach(this.helper);\n    this.refresh();\n  };\n\n  Resize.prototype.getWidth = function (width, minWidth, maxWidth) {\n    if (minWidth && width < minWidth) {\n      return minWidth;\n    } else if (maxWidth && width > maxWidth) {\n      return maxWidth;\n    } else {\n      return width;\n    }\n  };\n\n  Resize.prototype.updateResizeEleHeight = function () {\n    var elements = [].slice.call(this.parent.getHeaderContent().querySelectorAll('.e-rhandler'));\n\n    for (var i = 0; i < elements.length; i++) {\n      elements[i].style.height = this.element.parentElement.offsetHeight + 'px';\n    }\n  };\n\n  Resize.prototype.getColData = function (column, mousemove) {\n    return {\n      width: parseFloat(isNullOrUndefined(this.widthService.getWidth(column)) || this.widthService.getWidth(column) === 'auto' ? '0' : this.widthService.getWidth(column).toString()) + mousemove,\n      minWidth: column.minWidth ? parseFloat(column.minWidth.toString()) : null,\n      maxWidth: column.maxWidth ? parseFloat(column.maxWidth.toString()) : null\n    };\n  };\n\n  Resize.prototype.resizing = function (e) {\n    if (isNullOrUndefined(this.column)) {\n      return;\n    }\n\n    var offsetWidth = 0;\n\n    if (isNullOrUndefined(this.column)) {\n      offsetWidth = parentsUntil(this.element, 'th').offsetWidth;\n    }\n\n    if (this.parent.allowTextWrap) {\n      this.updateResizeEleHeight();\n      this.setHelperHeight();\n    }\n\n    var pageX = this.getPointX(e);\n    var mousemove = this.parent.enableRtl ? -(pageX - this.pageX) : pageX - this.pageX;\n    var colData = this.getColData(this.column, mousemove);\n\n    if (!colData.width) {\n      colData.width = closest(this.element, 'th').offsetWidth;\n    }\n\n    var width = this.getWidth(colData.width, colData.minWidth, colData.maxWidth);\n    this.parent.log('resize_min_max', {\n      column: this.column,\n      width: width\n    });\n\n    if (!this.parent.enableRtl && this.minMove >= pageX || this.parent.enableRtl && this.minMove <= pageX) {\n      width = this.column.minWidth ? parseFloat(this.column.minWidth.toString()) : 10;\n      this.pageX = pageX = this.minMove;\n    }\n\n    if (width !== parseFloat(isNullOrUndefined(this.column.width) || this.column.width === 'auto' ? offsetWidth.toString() : this.column.width.toString())) {\n      this.pageX = pageX;\n      this.column.width = formatUnit(width);\n      var args = {\n        e: e,\n        column: this.column\n      };\n      this.parent.trigger(events.onResize, args);\n\n      if (args.cancel) {\n        this.cancelResizeAction(true);\n        return;\n      }\n\n      var columns = [this.column];\n      var finalColumns = [this.column];\n\n      if (this.column.columns) {\n        columns = this.getSubColumns(this.column, []);\n        columns = this.calulateColumnsWidth(columns, false, mousemove);\n        finalColumns = this.calulateColumnsWidth(columns, true, mousemove);\n      }\n\n      for (var _i = 0, finalColumns_1 = finalColumns; _i < finalColumns_1.length; _i++) {\n        var col = finalColumns_1[_i];\n        this.widthService.setColumnWidth(col, null, 'resize');\n      }\n\n      this.updateHelper();\n    }\n\n    this.isDblClk = false;\n  };\n\n  Resize.prototype.calulateColumnsWidth = function (columns, isUpdate, mousemove) {\n    var finalColumns = [];\n\n    for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {\n      var col = columns_1[_i];\n      var totalWidth = 0;\n\n      for (var i = 0; i < columns.length; i++) {\n        totalWidth += parseFloat(columns[i].width.toString());\n      }\n\n      var colData = this.getColData(col, parseFloat(col.width) * mousemove / totalWidth);\n      var colWidth = this.getWidth(colData.width, colData.minWidth, colData.maxWidth);\n\n      if (colWidth !== parseFloat(col.width.toString())) {\n        if (isUpdate) {\n          col.width = formatUnit(colWidth < 1 ? 1 : colWidth);\n        }\n\n        finalColumns.push(col);\n      }\n    }\n\n    return finalColumns;\n  };\n\n  Resize.prototype.getSubColumns = function (column, subColumns) {\n    for (var _i = 0, _a = column.columns; _i < _a.length; _i++) {\n      var col = _a[_i];\n\n      if (col.visible !== false && col.allowResizing) {\n        if (col.columns) {\n          this.getSubColumns(col, subColumns);\n        } else {\n          subColumns.push(col);\n        }\n      }\n    }\n\n    return subColumns;\n  };\n\n  Resize.prototype.resizeEnd = function (e) {\n    if (!this.helper || this.parent.isDestroyed) {\n      return;\n    }\n\n    EventHandler.remove(this.parent.element, Browser.touchMoveEvent, this.resizing);\n    EventHandler.remove(document, Browser.touchEndEvent, this.resizeEnd);\n    this.updateCursor('remove');\n    detach(this.helper);\n    var args;\n\n    if (!isBlazor() || this.parent.isJsComponent) {\n      args = {\n        e: e,\n        column: this.column\n      };\n    } else {\n      var clonedColumn = extend({}, this.column);\n      args = {\n        column: clonedColumn\n      };\n    }\n\n    var content = this.parent.getContent().querySelector('.e-content');\n    var cTable = content.querySelector('.e-movablecontent') ? content.querySelector('.e-movablecontent') : content;\n\n    if (cTable.scrollHeight > cTable.clientHeight) {\n      this.parent.scrollModule.setPadding();\n      cTable.style.overflowY = 'scroll';\n    }\n\n    this.parent.trigger(events.resizeStop, args);\n    closest(this.element, '.e-headercell').classList.add('e-resized');\n\n    if (parentsUntil(this.element, 'e-frozenheader')) {\n      this.isFrozenColResized = true;\n    } else {\n      this.isFrozenColResized = false;\n    }\n\n    if (this.parent.getFrozenColumns()) {\n      this.parent.notify(events.freezeRender, {\n        case: 'textwrap'\n      });\n    }\n\n    if (this.parent.allowTextWrap) {\n      this.updateResizeEleHeight();\n      this.parent.notify(events.textWrapRefresh, {\n        case: 'textwrap'\n      });\n    }\n\n    this.refresh();\n    this.doubleTapEvent(e);\n    this.isDblClk = true;\n  };\n\n  Resize.prototype.getPointX = function (e) {\n    if (e.touches && e.touches.length) {\n      return e.touches[0].pageX;\n    } else {\n      return e.pageX;\n    }\n  };\n\n  Resize.prototype.refreshColumnWidth = function () {\n    var columns = this.parent.getColumns();\n\n    for (var _i = 0, _a = [].slice.apply(this.parent.getHeaderTable().querySelectorAll('th.e-headercell')); _i < _a.length; _i++) {\n      var ele = _a[_i];\n\n      for (var _b = 0, columns_2 = columns; _b < columns_2.length; _b++) {\n        var column = columns_2[_b];\n\n        if (ele.querySelector('[e-mappinguid]') && ele.querySelector('[e-mappinguid]').getAttribute('e-mappinguid') === column.uid && column.visible) {\n          column.width = ele.getBoundingClientRect().width;\n          break;\n        }\n      }\n    }\n\n    return columns;\n  };\n\n  Resize.prototype.refreshStackedColumnWidth = function () {\n    for (var _i = 0, _a = this.parent.getStackedColumns(this.parent.columns); _i < _a.length; _i++) {\n      var stackedColumn = _a[_i];\n      stackedColumn.width = this.getStackedWidth(stackedColumn, 0);\n    }\n  };\n\n  Resize.prototype.getStackedWidth = function (column, width) {\n    for (var _i = 0, _a = column.columns; _i < _a.length; _i++) {\n      var col = _a[_i];\n\n      if (col.visible !== false) {\n        if (col.columns) {\n          this.getStackedWidth(col, width);\n        } else {\n          width += col.width;\n        }\n      }\n    }\n\n    return width;\n  };\n\n  Resize.prototype.getTargetColumn = function (e) {\n    var cell = closest(e.target, resizeClassList.header);\n    cell = cell.querySelector('.e-headercelldiv') || cell.querySelector('.e-stackedheadercelldiv');\n    var uid = cell.getAttribute('e-mappinguid');\n    return this.parent.getColumnByUid(uid);\n  };\n\n  Resize.prototype.updateCursor = function (action) {\n    var headerRows = [].slice.call(this.parent.getHeaderContent().querySelectorAll('th'));\n    headerRows.push(this.parent.element);\n\n    for (var _i = 0, headerRows_1 = headerRows; _i < headerRows_1.length; _i++) {\n      var row = headerRows_1[_i];\n      row.classList[action](resizeClassList.cursor);\n    }\n  };\n\n  Resize.prototype.refresh = function () {\n    this.column = null;\n    this.pageX = null;\n    this.element = null;\n    this.helper = null;\n  };\n\n  Resize.prototype.appendHelper = function () {\n    this.helper = this.parent.createElement('div', {\n      className: resizeClassList.helper\n    });\n    this.parent.element.appendChild(this.helper);\n    this.setHelperHeight();\n  };\n\n  Resize.prototype.setHelperHeight = function () {\n    var height = this.parent.getContent().offsetHeight - this.getScrollBarWidth();\n    var rect = closest(this.element, resizeClassList.header);\n    var tr = [].slice.call(this.parent.getHeaderContent().querySelectorAll('tr'));\n    var frzCols = this.parent.getFrozenColumns();\n\n    if (frzCols) {\n      if (rect.parentElement.children.length !== frzCols) {\n        tr.splice(0, tr.length / 2);\n      } else {\n        tr.splice(tr.length / 2, tr.length / 2);\n      }\n    }\n\n    for (var i = tr.indexOf(rect.parentElement); i < tr.length; i++) {\n      height += tr[i].offsetHeight;\n    }\n\n    var pos = this.calcPos(rect);\n    pos.left += this.parent.enableRtl ? 0 - 1 : rect.offsetWidth - 2;\n    this.helper.style.cssText = 'height: ' + height + 'px; top: ' + pos.top + 'px; left:' + Math.floor(pos.left) + 'px;';\n  };\n\n  Resize.prototype.getScrollBarWidth = function (height) {\n    var ele = this.parent.getFrozenColumns() ? this.parent.getContent().querySelector('.e-movablecontent') : this.parent.getContent().firstChild;\n    return ele.scrollHeight > ele.clientHeight && height || ele.scrollWidth > ele.clientWidth ? getScrollBarWidth() : 0;\n  };\n\n  Resize.prototype.removeHelper = function (e) {\n    var cls = e.target.classList;\n\n    if (!(cls.contains(resizeClassList.root) || cls.contains(resizeClassList.icon)) && this.helper) {\n      EventHandler.remove(document, Browser.touchStartEvent, this.removeHelper);\n      EventHandler.remove(this.helper, Browser.touchStartEvent, this.resizeStart);\n      detach(this.helper);\n      this.refresh();\n    }\n  };\n\n  Resize.prototype.updateHelper = function () {\n    var rect = closest(this.element, resizeClassList.header);\n    var left = Math.floor(this.calcPos(rect).left + (this.parent.enableRtl ? 0 - 1 : rect.offsetWidth - 2));\n    var borderWidth = 2; // to maintain the helper inside of grid element.\n\n    if (left > this.parentElementWidth) {\n      left = this.parentElementWidth - borderWidth;\n    }\n\n    if (this.parent.getFrozenColumns()) {\n      var table = closest(rect, '.e-table');\n      var fLeft = table.offsetLeft;\n\n      if (left < fLeft) {\n        left = fLeft;\n      }\n    }\n\n    this.helper.style.left = left + 'px';\n  };\n\n  Resize.prototype.calcPos = function (elem) {\n    var parentOffset = {\n      top: 0,\n      left: 0\n    };\n    var offset = elem.getBoundingClientRect();\n    var doc = elem.ownerDocument;\n    var offsetParent = parentsUntil(elem, 'e-grid') || doc.documentElement;\n\n    while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && offsetParent.style.position === 'static') {\n      offsetParent = offsetParent.parentNode;\n    }\n\n    if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {\n      parentOffset = offsetParent.getBoundingClientRect();\n    }\n\n    return {\n      top: offset.top - parentOffset.top,\n      left: offset.left - parentOffset.left\n    };\n  };\n\n  Resize.prototype.doubleTapEvent = function (e) {\n    if (this.getUserAgent() && this.isDblClk) {\n      if (!this.tapped) {\n        this.tapped = setTimeout(this.timeoutHandler(), 300);\n      } else {\n        clearTimeout(this.tapped);\n        this.callAutoFit(e);\n        this.tapped = null;\n      }\n    }\n  };\n\n  Resize.prototype.getUserAgent = function () {\n    var userAgent = Browser.userAgent.toLowerCase();\n    return /iphone|ipod|ipad/.test(userAgent);\n  };\n\n  Resize.prototype.timeoutHandler = function () {\n    this.tapped = null;\n  };\n\n  return Resize;\n}();\n\nexport { Resize };","map":null,"metadata":{},"sourceType":"module"}