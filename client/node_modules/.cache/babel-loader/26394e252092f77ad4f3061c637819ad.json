{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Component, EventHandler, addClass, append, Property, Event, L10n, compile } from '@syncfusion/ej2-base';\nimport { setStyleAttribute, extend, removeClass, prepend, isNullOrUndefined, detach, getValue } from '@syncfusion/ej2-base';\nimport { NotifyPropertyChanges, rippleEffect, ChildProperty, Complex } from '@syncfusion/ej2-base';\nimport { DataManager, Query, DataUtil } from '@syncfusion/ej2-data';\nimport { ListBase } from '@syncfusion/ej2-lists';\nimport { updateBlazorTemplate, resetBlazorTemplate, isBlazor, remove } from '@syncfusion/ej2-base';\n\nvar FieldSettings =\n/** @class */\nfunction (_super) {\n  __extends(FieldSettings, _super);\n\n  function FieldSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property()], FieldSettings.prototype, \"text\", void 0);\n\n  __decorate([Property()], FieldSettings.prototype, \"value\", void 0);\n\n  __decorate([Property()], FieldSettings.prototype, \"iconCss\", void 0);\n\n  __decorate([Property()], FieldSettings.prototype, \"groupBy\", void 0);\n\n  __decorate([Property()], FieldSettings.prototype, \"htmlAttributes\", void 0);\n\n  return FieldSettings;\n}(ChildProperty);\n\nexport { FieldSettings };\nexport var dropDownBaseClasses = {\n  root: 'e-dropdownbase',\n  rtl: 'e-rtl',\n  content: 'e-content',\n  selected: 'e-active',\n  hover: 'e-hover',\n  noData: 'e-nodata',\n  fixedHead: 'e-fixed-head',\n  focus: 'e-item-focus',\n  li: 'e-list-item',\n  group: 'e-list-group-item',\n  disabled: 'e-disabled',\n  grouping: 'e-dd-group'\n};\nvar ITEMTEMPLATE_PROPERTY = 'ItemTemplate';\nvar VALUETEMPLATE_PROPERTY = 'ValueTemplate';\nvar GROUPTEMPLATE_PROPERTY = 'GroupTemplate';\nvar HEADERTEMPLATE_PROPERTY = 'HeaderTemplate';\nvar FOOTERTEMPLATE_PROPERTY = 'FooterTemplate';\nvar NORECORDSTEMPLATE_PROPERTY = 'NoRecordsTemplate';\nvar ACTIONFAILURETEMPLATE_PROPERTY = 'ActionFailureTemplate';\n/**\n * DropDownBase component will generate the list items based on given data and act as base class to drop-down related components\n */\n\nvar DropDownBase =\n/** @class */\nfunction (_super) {\n  __extends(DropDownBase, _super);\n  /**\n   * * Constructor for DropDownBase class\n   */\n\n\n  function DropDownBase(options, element) {\n    return _super.call(this, options, element) || this;\n  }\n\n  ;\n\n  DropDownBase.prototype.getPropObject = function (prop, newProp, oldProp) {\n    var newProperty = new Object();\n    var oldProperty = new Object(); // tslint:disable-next-line:no-function-constructor-with-string-args\n\n    var propName = function (prop) {\n      return prop;\n    };\n\n    newProperty[propName(prop)] = newProp[propName(prop)];\n    oldProperty[propName(prop)] = oldProp[propName(prop)];\n    var data = new Object();\n    data.newProperty = newProperty;\n    data.oldProperty = oldProperty;\n    return data;\n  };\n\n  DropDownBase.prototype.getValueByText = function (text, ignoreCase, ignoreAccent) {\n    var value = null;\n\n    if (!isNullOrUndefined(this.listData)) {\n      if (ignoreCase) {\n        value = this.checkValueCase(text, true, ignoreAccent);\n      } else {\n        value = this.checkValueCase(text, false, ignoreAccent);\n      }\n    }\n\n    return value;\n  };\n\n  ;\n\n  DropDownBase.prototype.checkValueCase = function (text, ignoreCase, ignoreAccent, isTextByValue) {\n    var _this = this;\n\n    var value = null;\n\n    if (isTextByValue) {\n      value = text;\n    }\n\n    var dataSource = this.listData;\n    var fields = this.fields;\n    var type = this.typeOfData(dataSource).typeof;\n\n    if (type === 'string' || type === 'number' || type === 'boolean') {\n      for (var _i = 0, dataSource_1 = dataSource; _i < dataSource_1.length; _i++) {\n        var item = dataSource_1[_i];\n\n        if (!isNullOrUndefined(item)) {\n          if (ignoreAccent) {\n            value = this.checkingAccent(String(item), text, ignoreCase);\n          } else {\n            if (ignoreCase) {\n              if (this.checkIgnoreCase(String(item), text)) {\n                value = this.getItemValue(String(item), text, ignoreCase);\n              }\n            } else {\n              if (this.checkNonIgnoreCase(String(item), text)) {\n                value = this.getItemValue(String(item), text, ignoreCase, isTextByValue);\n              }\n            }\n          }\n        }\n      }\n    } else {\n      if (ignoreCase) {\n        dataSource.filter(function (item) {\n          var itemValue = getValue(fields.value, item);\n\n          if (!isNullOrUndefined(itemValue) && _this.checkIgnoreCase(getValue(fields.text, item).toString(), text)) {\n            value = getValue(fields.value, item);\n          }\n        });\n      } else {\n        if (isTextByValue) {\n          dataSource.filter(function (item) {\n            var itemValue = getValue(fields.value, item);\n\n            if (!isNullOrUndefined(itemValue) && !isNullOrUndefined(value) && itemValue.toString() === value.toString()) {\n              value = getValue(fields.text, item);\n            }\n          });\n        } else {\n          dataSource.filter(function (item) {\n            if (_this.checkNonIgnoreCase(getValue(fields.text, item), text)) {\n              value = getValue(fields.value, item);\n            }\n          });\n        }\n      }\n    }\n\n    return value;\n  };\n\n  DropDownBase.prototype.checkingAccent = function (item, text, ignoreCase) {\n    var dataItem = DataUtil.ignoreDiacritics(String(item));\n    var textItem = DataUtil.ignoreDiacritics(text.toString());\n    var value = null;\n\n    if (ignoreCase) {\n      if (this.checkIgnoreCase(dataItem, textItem)) {\n        value = this.getItemValue(String(item), text, ignoreCase);\n      }\n    } else {\n      if (this.checkNonIgnoreCase(String(item), text)) {\n        value = this.getItemValue(String(item), text, ignoreCase);\n      }\n    }\n\n    return value;\n  };\n\n  DropDownBase.prototype.checkIgnoreCase = function (item, text) {\n    return String(item).toLowerCase() === text.toString().toLowerCase() ? true : false;\n  };\n\n  DropDownBase.prototype.checkNonIgnoreCase = function (item, text) {\n    return String(item) === text.toString() ? true : false;\n  };\n\n  DropDownBase.prototype.getItemValue = function (dataItem, typedText, ignoreCase, isTextByValue) {\n    var value = null;\n    var dataSource = this.listData;\n    var type = this.typeOfData(dataSource).typeof;\n\n    if (isTextByValue) {\n      value = dataItem.toString();\n    } else {\n      if (ignoreCase) {\n        value = type === 'string' ? String(dataItem) : this.getFormattedValue(String(dataItem));\n      } else {\n        value = type === 'string' ? typedText : this.getFormattedValue(typedText);\n      }\n    }\n\n    return value;\n  };\n\n  DropDownBase.prototype.templateCompiler = function (baseTemplate) {\n    var checkTemplate = false;\n\n    if (baseTemplate) {\n      var exception = void 0;\n\n      try {\n        checkTemplate = document.querySelectorAll(baseTemplate).length ? true : false;\n      } catch (exception) {\n        checkTemplate = false;\n      }\n    }\n\n    return checkTemplate;\n  };\n\n  DropDownBase.prototype.l10nUpdate = function (actionFailure) {\n    var ele = this.getModuleName() === 'listbox' ? this.ulElement : this.list;\n\n    if (this.noRecordsTemplate !== 'No records found' || this.actionFailureTemplate !== 'Request failed') {\n      this.DropDownBaseresetBlazorTemplates(false, false, true, true);\n      var template = actionFailure ? this.actionFailureTemplate : this.noRecordsTemplate;\n      var compiledString = void 0;\n      var templateId = actionFailure ? this.actionFailureTemplateId : this.noRecordsTemplateId;\n      ele.innerHTML = '';\n      var tempaltecheck = this.templateCompiler(template);\n\n      if (tempaltecheck) {\n        compiledString = compile(document.querySelector(template).innerHTML.trim());\n      } else {\n        compiledString = compile(template);\n      }\n\n      for (var _i = 0, _a = compiledString({}, null, null, templateId, this.isStringTemplate); _i < _a.length; _i++) {\n        var item = _a[_i];\n        ele.appendChild(item);\n      }\n\n      this.DropDownBaseupdateBlazorTemplates(false, false, !actionFailure, actionFailure, false, false, false, false);\n    } else {\n      var l10nLocale = {\n        noRecordsTemplate: 'No records found',\n        actionFailureTemplate: 'Request failed'\n      };\n      var componentLocale = new L10n(this.getLocaleName(), {}, this.locale);\n\n      if (componentLocale.getConstant('actionFailureTemplate') !== '') {\n        this.l10n = componentLocale;\n      } else {\n        this.l10n = new L10n(this.getModuleName() === 'listbox' ? 'listbox' : 'dropdowns', l10nLocale, this.locale);\n      }\n\n      var content = actionFailure ? this.l10n.getConstant('actionFailureTemplate') : this.l10n.getConstant('noRecordsTemplate');\n\n      if (this.getModuleName() === 'listbox') {\n        var liElem = this.createElement('li');\n        liElem.textContent = content;\n        ele.appendChild(liElem);\n        liElem.classList.add('e-list-nrt');\n      } else {\n        ele.innerHTML = content;\n      }\n    }\n  };\n\n  DropDownBase.prototype.getLocaleName = function () {\n    return 'drop-down-base';\n  };\n\n  ;\n\n  DropDownBase.prototype.getTextByValue = function (value) {\n    var text;\n    text = this.checkValueCase(value, false, false, true);\n    return text;\n  };\n\n  DropDownBase.prototype.getFormattedValue = function (value) {\n    if (this.listData && this.listData.length) {\n      var item = this.typeOfData(this.listData);\n\n      if (isBlazor() && isNullOrUndefined(value) || value === 'null') {\n        return null;\n      }\n\n      if (typeof getValue(this.fields.value ? this.fields.value : 'value', item.item) === 'number' || item.typeof === 'number') {\n        return parseFloat(value);\n      }\n\n      if (typeof getValue(this.fields.value ? this.fields.value : 'value', item.item) === 'boolean' || item.typeof === 'boolean') {\n        return value === 'true';\n      }\n    }\n\n    return value;\n  };\n  /**\n   * Sets RTL to dropdownbase wrapper\n   */\n\n\n  DropDownBase.prototype.setEnableRtl = function () {\n    if (this.list) {\n      this.enableRtlElements.push(this.list);\n    }\n\n    this.enableRtl ? addClass(this.enableRtlElements, dropDownBaseClasses.rtl) : removeClass(this.enableRtlElements, dropDownBaseClasses.rtl);\n  };\n\n  ;\n  /**\n   * Initialize the Component.\n   */\n\n  DropDownBase.prototype.initialize = function () {\n    this.bindEvent = true;\n    this.actionFailureTemplateId = \"\" + this.element.id + ACTIONFAILURETEMPLATE_PROPERTY;\n\n    if (this.element.tagName === 'UL') {\n      var jsonElement = ListBase.createJsonFromElement(this.element);\n      this.setProperties({\n        fields: {\n          text: 'text',\n          value: 'text'\n        }\n      }, true);\n      this.resetList(jsonElement, this.fields);\n    } else if (this.element.tagName === 'SELECT') {\n      var dataSource = this.dataSource instanceof Array ? this.dataSource.length > 0 ? true : false : !isNullOrUndefined(this.dataSource) ? true : false;\n\n      if (!dataSource) {\n        this.renderItemsBySelect();\n      }\n    } else {\n      this.setListData(this.dataSource, this.fields, this.query);\n    }\n  };\n\n  ;\n\n  DropDownBase.prototype.DropDownBaseupdateBlazorTemplates = function (item, group, noRecord, action, value, header, footer, isEmpty) {\n    if (!this.isStringTemplate) {\n      if (this.itemTemplate && item) {\n        updateBlazorTemplate(this.itemTemplateId, ITEMTEMPLATE_PROPERTY, this, isEmpty);\n      }\n\n      if (this.groupTemplate && group) {\n        updateBlazorTemplate(this.groupTemplateId, GROUPTEMPLATE_PROPERTY, this, isEmpty);\n      }\n\n      if (this.noRecordsTemplate && noRecord) {\n        updateBlazorTemplate(this.noRecordsTemplateId, NORECORDSTEMPLATE_PROPERTY, this, isEmpty);\n      }\n\n      if (this.actionFailureTemplate && action) {\n        updateBlazorTemplate(this.actionFailureTemplateId, ACTIONFAILURETEMPLATE_PROPERTY, this, isEmpty);\n      }\n\n      if (value) {\n        updateBlazorTemplate(this.valueTemplateId, VALUETEMPLATE_PROPERTY, this, isEmpty);\n      }\n\n      if (header) {\n        updateBlazorTemplate(this.headerTemplateId, HEADERTEMPLATE_PROPERTY, this);\n      }\n\n      if (footer) {\n        updateBlazorTemplate(this.footerTemplateId, FOOTERTEMPLATE_PROPERTY, this);\n      }\n    }\n  };\n\n  DropDownBase.prototype.DropDownBaseresetBlazorTemplates = function (item, group, noRecord, action, value, header, footer) {\n    if (!this.isStringTemplate) {\n      if (this.itemTemplate && item) {\n        resetBlazorTemplate(this.itemTemplateId, ITEMTEMPLATE_PROPERTY);\n      }\n\n      if (this.groupTemplate && group) {\n        resetBlazorTemplate(this.groupTemplateId, GROUPTEMPLATE_PROPERTY);\n      }\n\n      if (this.noRecordsTemplate && noRecord) {\n        resetBlazorTemplate(this.noRecordsTemplateId, NORECORDSTEMPLATE_PROPERTY);\n      }\n\n      if (this.actionFailureTemplate && action) {\n        resetBlazorTemplate(this.actionFailureTemplateId, ACTIONFAILURETEMPLATE_PROPERTY);\n      }\n\n      if (value) {\n        resetBlazorTemplate(this.valueTemplateId, VALUETEMPLATE_PROPERTY);\n      }\n\n      if (header) {\n        resetBlazorTemplate(this.headerTemplateId, HEADERTEMPLATE_PROPERTY);\n      }\n\n      if (footer) {\n        resetBlazorTemplate(this.footerTemplateId, FOOTERTEMPLATE_PROPERTY);\n      }\n    }\n  };\n  /**\n   * Get the properties to be maintained in persisted state.\n   */\n\n\n  DropDownBase.prototype.getPersistData = function () {\n    return this.addOnPersist([]);\n  };\n\n  ;\n  /**\n   * Sets the enabled state to DropDownBase.\n   */\n\n  DropDownBase.prototype.setEnabled = function () {\n    this.element.setAttribute('aria-disabled', this.enabled ? 'false' : 'true');\n  };\n\n  ;\n  /**\n   * Sets the enabled state to DropDownBase.\n   */\n\n  DropDownBase.prototype.updateDataAttribute = function (value) {\n    var invalidAttr = ['class', 'style', 'id', 'type'];\n    var attr = {};\n\n    for (var a = 0; a < this.element.attributes.length; a++) {\n      if (invalidAttr.indexOf(this.element.attributes[a].name) === -1 && !(this.getModuleName() === 'dropdownlist' && this.element.attributes[a].name === 'readonly')) {\n        attr[this.element.attributes[a].name] = this.element.getAttribute(this.element.attributes[a].name);\n      }\n    }\n\n    extend(attr, value, attr);\n    this.setProperties({\n      htmlAttributes: attr\n    }, true);\n  };\n\n  DropDownBase.prototype.renderItemsBySelect = function () {\n    var element = this.element;\n    var fields = {\n      value: 'value',\n      text: 'text'\n    };\n    var jsonElement = [];\n    var group = element.querySelectorAll('select>optgroup');\n    var option = element.querySelectorAll('select>option');\n    this.getJSONfromOption(jsonElement, option, fields);\n\n    if (group.length) {\n      for (var i = 0; i < group.length; i++) {\n        var item = group[i];\n        var optionGroup = {};\n        optionGroup[fields.text] = item.label;\n        optionGroup.isHeader = true;\n        var child = item.querySelectorAll('option');\n        jsonElement.push(optionGroup);\n        this.getJSONfromOption(jsonElement, child, fields);\n      }\n\n      var items = element.querySelectorAll('select>option');\n    }\n\n    this.fields.text = fields.text;\n    this.fields.value = fields.value;\n    this.resetList(jsonElement, fields);\n  };\n\n  DropDownBase.prototype.getJSONfromOption = function (items, options, fields) {\n    for (var _i = 0, options_1 = options; _i < options_1.length; _i++) {\n      var option = options_1[_i];\n      var json = {};\n      json[fields.text] = option.innerText;\n      json[fields.value] = option.getAttribute(fields.value) ? option.getAttribute(fields.value) : option.innerText;\n      items.push(json);\n    }\n  };\n  /**\n   * Execute before render the list items\n   * @private\n   */\n\n\n  DropDownBase.prototype.preRender = function () {\n    // there is no event handler\n    this.scrollTimer = -1;\n    this.enableRtlElements = [];\n    this.isRequested = false;\n    this.isDataFetched = false;\n    this.itemTemplateId = \"\" + this.element.id + ITEMTEMPLATE_PROPERTY;\n    this.valueTemplateId = \"\" + this.element.id + VALUETEMPLATE_PROPERTY;\n    this.groupTemplateId = \"\" + this.element.id + GROUPTEMPLATE_PROPERTY;\n    this.headerTemplateId = \"\" + this.element.id + HEADERTEMPLATE_PROPERTY;\n    this.footerTemplateId = \"\" + this.element.id + FOOTERTEMPLATE_PROPERTY;\n    this.noRecordsTemplateId = \"\" + this.element.id + NORECORDSTEMPLATE_PROPERTY;\n  };\n  /**\n   * Creates the list items of DropDownBase component.\n   */\n\n\n  DropDownBase.prototype.setListData = function (dataSource, fields, query) {\n    var _this = this;\n\n    fields = fields ? fields : this.fields;\n    var ulElement;\n    this.isActive = true;\n    var eventArgs = {\n      cancel: false,\n      data: dataSource,\n      query: query\n    };\n    this.trigger('actionBegin', eventArgs, function (eventArgs) {\n      if (!eventArgs.cancel) {\n        _this.showSpinner();\n\n        if (dataSource instanceof DataManager) {\n          _this.isRequested = true;\n\n          if (_this.isDataFetched) {\n            _this.emptyDataRequest(fields);\n\n            return;\n          }\n\n          eventArgs.data.executeQuery(_this.getQuery(eventArgs.query)).then(function (e) {\n            _this.trigger('actionComplete', e, function (e) {\n              if (!e.cancel) {\n                var listItems = e.result;\n\n                if (listItems.length === 0) {\n                  _this.isDataFetched = true;\n                }\n\n                ulElement = _this.renderItems(listItems, fields);\n\n                _this.onActionComplete(ulElement, listItems, e);\n\n                if (_this.groupTemplate) {\n                  _this.renderGroupTemplate(ulElement);\n                }\n\n                _this.isRequested = false;\n\n                _this.bindChildItems(listItems, ulElement, fields, e);\n              }\n            });\n          }).catch(function (e) {\n            _this.isRequested = false;\n\n            _this.onActionFailure(e);\n\n            _this.hideSpinner();\n          });\n        } else {\n          var dataManager = new DataManager(eventArgs.data);\n\n          var listItems = _this.getQuery(eventArgs.query).executeLocal(dataManager);\n\n          var localDataArgs = {\n            cancel: false,\n            result: listItems\n          };\n\n          _this.trigger('actionComplete', localDataArgs, function (localDataArgs) {\n            if (!localDataArgs.cancel) {\n              ulElement = _this.renderItems(localDataArgs.result, fields);\n\n              _this.onActionComplete(ulElement, localDataArgs.result);\n\n              if (_this.groupTemplate) {\n                _this.renderGroupTemplate(ulElement);\n              }\n\n              _this.bindChildItems(localDataArgs.result, ulElement, fields);\n            }\n          });\n        }\n      }\n    });\n  };\n\n  DropDownBase.prototype.bindChildItems = function (listItems, ulElement, fields, e) {\n    var _this = this;\n\n    if (listItems.length >= 100 && this.getModuleName() === 'autocomplete') {\n      setTimeout(function () {\n        var childNode = _this.remainingItems(_this.sortedData, fields);\n\n        append(childNode, ulElement);\n\n        _this.DropDownBaseupdateBlazorTemplates(true, false, false, false);\n\n        _this.liCollections = _this.list.querySelectorAll('.' + dropDownBaseClasses.li);\n\n        _this.updateListValues();\n\n        _this.raiseDataBound(listItems, e);\n      }, 0);\n    } else {\n      this.raiseDataBound(listItems, e);\n    }\n  };\n\n  DropDownBase.prototype.updateListValues = function () {// Used this method in component side.\n  };\n\n  DropDownBase.prototype.findListElement = function (list, findNode, attribute, value) {\n    var liElement = null;\n\n    if (list) {\n      var listArr = [].slice.call(list.querySelectorAll(findNode));\n\n      for (var index = 0; index < listArr.length; index++) {\n        if (listArr[index].getAttribute(attribute) === value + '') {\n          liElement = listArr[index];\n          break;\n        }\n      }\n    }\n\n    return liElement;\n  };\n\n  DropDownBase.prototype.raiseDataBound = function (listItems, e) {\n    this.hideSpinner();\n    var dataBoundEventArgs = {\n      items: listItems,\n      e: e\n    };\n    this.trigger('dataBound', dataBoundEventArgs);\n  };\n\n  DropDownBase.prototype.remainingItems = function (dataSource, fields) {\n    var spliceData = new DataManager(dataSource).executeLocal(new Query().skip(100));\n\n    if (this.itemTemplate) {\n      var listElements = this.templateListItem(spliceData, fields);\n      return [].slice.call(listElements.childNodes);\n    }\n\n    var type = this.typeOfData(spliceData).typeof;\n\n    if (type === 'string' || type === 'number' || type === 'boolean') {\n      return ListBase.createListItemFromArray(this.createElement, spliceData, true, this.listOption(spliceData, fields));\n    }\n\n    return ListBase.createListItemFromJson(this.createElement, spliceData, this.listOption(spliceData, fields), 1, true);\n  };\n\n  DropDownBase.prototype.emptyDataRequest = function (fields) {\n    var listItems = [];\n    this.onActionComplete(this.renderItems(listItems, fields), listItems);\n    this.isRequested = false;\n    this.hideSpinner();\n  };\n\n  DropDownBase.prototype.showSpinner = function () {// Used this method in component side.\n  };\n\n  DropDownBase.prototype.hideSpinner = function () {// Used this method in component side.\n  };\n\n  DropDownBase.prototype.onActionFailure = function (e) {\n    this.liCollections = [];\n    this.trigger('actionFailure', e);\n    this.l10nUpdate(true);\n    addClass([this.list], dropDownBaseClasses.noData);\n  };\n\n  DropDownBase.prototype.onActionComplete = function (ulElement, list, e) {\n    this.listData = list;\n\n    if (isBlazor() && this.isServerRendered && this.getModuleName() === 'listbox') {\n      remove(this.list.querySelector('.e-list-parent'));\n      remove(this.list.querySelector('.e-hidden-select'));\n    } else {\n      this.list.innerHTML = '';\n    }\n\n    this.fixedHeaderElement = isNullOrUndefined(this.fixedHeaderElement) ? this.fixedHeaderElement : null;\n    this.list.appendChild(ulElement);\n    this.liCollections = this.list.querySelectorAll('.' + dropDownBaseClasses.li);\n    this.ulElement = this.list.querySelector('ul');\n    this.postRender(this.list, list, this.bindEvent);\n  };\n\n  DropDownBase.prototype.postRender = function (listElement, list, bindEvent) {\n    var focusItem = listElement.querySelector('.' + dropDownBaseClasses.li);\n    var selectedItem = listElement.querySelector('.' + dropDownBaseClasses.selected);\n\n    if (focusItem && !selectedItem) {\n      focusItem.classList.add(dropDownBaseClasses.focus);\n    }\n\n    if (list.length <= 0) {\n      this.l10nUpdate();\n      addClass([listElement], dropDownBaseClasses.noData);\n    } else {\n      listElement.classList.remove(dropDownBaseClasses.noData);\n    }\n  };\n  /**\n   * Get the query to do the data operation before list item generation.\n   */\n\n\n  DropDownBase.prototype.getQuery = function (query) {\n    return query ? query : this.query ? this.query : new Query();\n  };\n  /**\n   * To render the template content for group header element.\n   */\n\n\n  DropDownBase.prototype.renderGroupTemplate = function (listEle) {\n    if (this.fields.groupBy !== null && this.dataSource || this.element.querySelector('.' + dropDownBaseClasses.group)) {\n      var dataSource = this.dataSource;\n      var option = {\n        groupTemplateID: this.groupTemplateId,\n        isStringTemplate: this.isStringTemplate\n      };\n      var headerItems = listEle.querySelectorAll('.' + dropDownBaseClasses.group);\n      var groupcheck = this.templateCompiler(this.groupTemplate);\n\n      if (groupcheck) {\n        var groupValue = document.querySelector(this.groupTemplate).innerHTML.trim();\n        var tempHeaders = ListBase.renderGroupTemplate(groupValue, dataSource, this.fields.properties, headerItems, option);\n      } else {\n        var tempHeaders = ListBase.renderGroupTemplate(this.groupTemplate, dataSource, this.fields.properties, headerItems, option);\n      }\n\n      this.DropDownBaseupdateBlazorTemplates(false, true, false, false, false, false, false, false);\n    }\n  };\n  /**\n   * To create the ul li list items\n   */\n\n\n  DropDownBase.prototype.createListItems = function (dataSource, fields) {\n    if (dataSource && fields.groupBy || this.element.querySelector('optgroup')) {\n      if (fields.groupBy) {\n        if (this.sortOrder !== 'None') {\n          dataSource = this.getSortedDataSource(dataSource);\n        }\n\n        dataSource = ListBase.groupDataSource(dataSource, fields.properties, this.sortOrder);\n      }\n\n      addClass([this.list], dropDownBaseClasses.grouping);\n    } else {\n      dataSource = this.getSortedDataSource(dataSource);\n    }\n\n    var options = this.listOption(dataSource, fields);\n    var spliceData = dataSource.length > 100 ? new DataManager(dataSource).executeLocal(new Query().take(100)) : dataSource;\n    this.sortedData = dataSource;\n    return ListBase.createList(this.createElement, this.getModuleName() === 'autocomplete' ? spliceData : dataSource, options, true);\n  };\n\n  ;\n\n  DropDownBase.prototype.listOption = function (dataSource, fields) {\n    var iconCss = isNullOrUndefined(fields.iconCss) ? false : true;\n    var fieldValues = !isNullOrUndefined(fields.properties) ? fields.properties : fields;\n    var options = fields.text !== null || fields.value !== null ? {\n      fields: fieldValues,\n      showIcon: iconCss,\n      ariaAttributes: {\n        groupItemRole: 'presentation'\n      }\n    } : {\n      fields: {\n        value: 'text'\n      }\n    };\n    return extend({}, options, fields, true);\n  };\n\n  ;\n\n  DropDownBase.prototype.setFloatingHeader = function (e) {\n    if (isNullOrUndefined(this.fixedHeaderElement)) {\n      this.fixedHeaderElement = this.createElement('div', {\n        className: dropDownBaseClasses.fixedHead\n      });\n\n      if (!this.list.querySelector('li').classList.contains(dropDownBaseClasses.group)) {\n        this.fixedHeaderElement.style.display = 'none';\n      }\n\n      prepend([this.fixedHeaderElement], this.list);\n      this.setFixedHeader();\n    }\n\n    if (!isNullOrUndefined(this.fixedHeaderElement) && this.fixedHeaderElement.style.zIndex === '0') {\n      this.setFixedHeader();\n    }\n\n    this.scrollStop(e);\n  };\n\n  DropDownBase.prototype.scrollStop = function (e) {\n    var target = e.target;\n    var liHeight = parseInt(getComputedStyle(this.liCollections[0], null).getPropertyValue('height'), 10);\n    var topIndex = Math.round(target.scrollTop / liHeight);\n    var liCollections = this.list.querySelectorAll('li');\n\n    for (var i = topIndex; i > -1; i--) {\n      if (!isNullOrUndefined(liCollections[i]) && liCollections[i].classList.contains(dropDownBaseClasses.group)) {\n        var currentLi = liCollections[i];\n        this.fixedHeaderElement.innerHTML = currentLi.innerHTML;\n        this.fixedHeaderElement.style.top = e.target.scrollTop + 'px';\n        this.fixedHeaderElement.style.display = 'block';\n        break;\n      } else {\n        this.fixedHeaderElement.style.display = 'none';\n        this.fixedHeaderElement.style.top = 'none';\n      }\n    }\n  };\n  /**\n   * To render the list items\n   */\n\n\n  DropDownBase.prototype.renderItems = function (listData, fields) {\n    var ulElement;\n\n    if (this.itemTemplate && listData) {\n      var dataSource = listData;\n\n      if (dataSource && fields.groupBy) {\n        if (this.sortOrder !== 'None') {\n          dataSource = this.getSortedDataSource(dataSource);\n        }\n\n        dataSource = ListBase.groupDataSource(dataSource, fields.properties, this.sortOrder);\n      } else {\n        dataSource = this.getSortedDataSource(dataSource);\n      }\n\n      this.sortedData = dataSource;\n      var spliceData = dataSource.length > 100 ? new DataManager(dataSource).executeLocal(new Query().take(100)) : dataSource;\n      ulElement = this.templateListItem(this.getModuleName() === 'autocomplete' ? spliceData : dataSource, fields);\n      var isTempEmpty = this.getModuleName() === 'listbox' ? true : false;\n      this.DropDownBaseupdateBlazorTemplates(true, false, false, false, false, false, false, isTempEmpty);\n    } else {\n      ulElement = this.createListItems(listData, fields);\n    }\n\n    return ulElement;\n  };\n\n  ;\n\n  DropDownBase.prototype.templateListItem = function (dataSource, fields) {\n    this.DropDownBaseresetBlazorTemplates(true, false, false, false);\n    var option = this.listOption(dataSource, fields);\n    option.templateID = this.itemTemplateId;\n    option.isStringTemplate = this.isStringTemplate;\n    var itemcheck = this.templateCompiler(this.itemTemplate);\n\n    if (itemcheck) {\n      var itemValue = document.querySelector(this.itemTemplate).innerHTML.trim();\n      return ListBase.renderContentTemplate(this.createElement, itemValue, dataSource, fields.properties, option);\n    } else {\n      return ListBase.renderContentTemplate(this.createElement, this.itemTemplate, dataSource, fields.properties, option);\n    }\n  };\n\n  ;\n\n  DropDownBase.prototype.typeOfData = function (items) {\n    var item = {\n      typeof: null,\n      item: null\n    };\n\n    for (var i = 0; !isNullOrUndefined(items) && i < items.length; i++) {\n      if (!isNullOrUndefined(items[i])) {\n        var listDataType = typeof items[i] === 'string' || typeof items[i] === 'number' || typeof items[i] === 'boolean';\n        var isNullData = listDataType ? isNullOrUndefined(items[i]) : isNullOrUndefined(getValue(this.fields.value ? this.fields.value : 'value', items[i]));\n\n        if (!isNullData) {\n          return item = {\n            typeof: typeof items[i],\n            item: items[i]\n          };\n        }\n      }\n    }\n\n    return item;\n  };\n\n  DropDownBase.prototype.setFixedHeader = function () {\n    this.list.parentElement.style.display = 'block';\n    var borderWidth = 0;\n\n    if (this.list && this.list.parentElement) {\n      borderWidth = parseInt(document.defaultView.getComputedStyle(this.list.parentElement, null).getPropertyValue('border-width'), 10);\n    }\n\n    var liWidth = this.liCollections[0].offsetWidth - borderWidth;\n    this.fixedHeaderElement.style.width = liWidth.toString() + 'px';\n    setStyleAttribute(this.fixedHeaderElement, {\n      zIndex: 10\n    });\n    var firstLi = this.ulElement.querySelector('.' + dropDownBaseClasses.group);\n    this.fixedHeaderElement.innerHTML = firstLi.innerHTML;\n  };\n\n  DropDownBase.prototype.getSortedDataSource = function (dataSource) {\n    if (dataSource && this.sortOrder !== 'None') {\n      var textField = this.fields.text ? this.fields.text : 'text';\n      dataSource = ListBase.getDataSource(dataSource, ListBase.addSorting(this.sortOrder, textField));\n    }\n\n    return dataSource;\n  };\n  /**\n   * Return the index of item which matched with given value in data source\n   */\n\n\n  DropDownBase.prototype.getIndexByValue = function (value) {\n    var index;\n    var listItems = this.getItems();\n\n    for (var i = 0; i < listItems.length; i++) {\n      if (!isNullOrUndefined(value) && listItems[i].getAttribute('data-value') === value.toString()) {\n        index = i;\n        break;\n      }\n    }\n\n    return index;\n  };\n\n  ;\n  /**\n   * To dispatch the event manually\n   */\n\n  DropDownBase.prototype.dispatchEvent = function (element, type) {\n    var evt = document.createEvent('HTMLEvents');\n    evt.initEvent(type, false, true);\n    element.dispatchEvent(evt);\n  };\n  /**\n   * To set the current fields\n   */\n\n\n  DropDownBase.prototype.setFields = function () {\n    if (this.fields.value && !this.fields.text) {\n      this.fields.text = this.fields.value;\n    } else if (!this.fields.value && this.fields.text) {\n      this.fields.value = this.fields.text;\n    } else if (!this.fields.value && !this.fields.text) {\n      this.fields.value = this.fields.text = 'text';\n    }\n  };\n  /**\n   * reset the items list.\n   */\n\n\n  DropDownBase.prototype.resetList = function (dataSource, fields, query) {\n    if (this.list) {\n      if (this.element.tagName === 'SELECT' && this.element.options.length > 0 || this.element.tagName === 'UL' && this.element.childNodes.length > 0) {\n        var data = dataSource instanceof Array ? dataSource.length > 0 : !isNullOrUndefined(dataSource);\n\n        if (!data && this.selectData && this.selectData.length > 0) {\n          dataSource = this.selectData;\n        }\n      }\n\n      this.setListData(dataSource, fields, query);\n    }\n  };\n\n  DropDownBase.prototype.updateSelectElementData = function (isFiltering) {\n    if (isFiltering && isNullOrUndefined(this.selectData) && this.listData && this.listData.length > 0) {\n      this.selectData = this.listData;\n    }\n  };\n\n  DropDownBase.prototype.updateSelection = function () {// This is for after added the item, need to update the selected index values.\n  };\n\n  DropDownBase.prototype.renderList = function () {\n    // This is for render the list items.\n    this.render();\n  };\n\n  DropDownBase.prototype.updateDataSource = function (props) {\n    this.resetList(this.dataSource);\n  };\n\n  DropDownBase.prototype.setUpdateInitial = function (props, newProp) {\n    this.isDataFetched = false;\n    var updateData = {};\n\n    for (var j = 0; props.length > j; j++) {\n      if (newProp[props[j]] && props[j] === 'fields') {\n        this.setFields();\n      } else if (newProp[props[j]]) {\n        updateData[props[j]] = newProp[props[j]];\n      }\n    }\n\n    if (Object.keys(updateData).length > 0) {\n      if (Object.keys(updateData).indexOf('dataSource') === -1) {\n        updateData.dataSource = this.dataSource;\n      }\n\n      this.updateDataSource(updateData);\n    }\n  };\n  /**\n   * When property value changes happened, then onPropertyChanged method will execute the respective changes in this component.\n   * @private\n   */\n\n\n  DropDownBase.prototype.onPropertyChanged = function (newProp, oldProp) {\n    if (this.getModuleName() === 'dropdownbase') {\n      this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);\n    }\n\n    this.setUpdateInitial(['sortOrder', 'itemTemplate'], newProp);\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'query':\n        case 'sortOrder':\n        case 'dataSource':\n        case 'itemTemplate':\n          break;\n\n        case 'enableRtl':\n          this.setEnableRtl();\n          break;\n\n        case 'enabled':\n          this.setEnabled();\n          break;\n\n        case 'groupTemplate':\n          this.renderGroupTemplate(this.list);\n\n          if (this.ulElement && this.fixedHeaderElement) {\n            var firstLi = this.ulElement.querySelector('.' + dropDownBaseClasses.group);\n            this.fixedHeaderElement.innerHTML = firstLi.innerHTML;\n          }\n\n          break;\n\n        case 'locale':\n          if (this.list && !isNullOrUndefined(this.liCollections) && this.liCollections.length === 0) {\n            this.l10nUpdate();\n          }\n\n          break;\n\n        case 'zIndex':\n          this.setProperties({\n            zIndex: newProp.zIndex\n          }, true);\n          this.setZIndex();\n          break;\n      }\n    }\n  };\n\n  ;\n  /**\n   * Build and render the component\n   * @private\n   */\n\n  DropDownBase.prototype.render = function (isEmptyData) {\n    this.list = this.createElement('div', {\n      className: dropDownBaseClasses.content,\n      attrs: {\n        'tabindex': '0'\n      }\n    });\n    this.list.classList.add(dropDownBaseClasses.root);\n    this.setFields();\n    var rippleModel = {\n      duration: 300,\n      selector: '.' + dropDownBaseClasses.li\n    };\n    this.rippleFun = rippleEffect(this.list, rippleModel);\n    var group = this.element.querySelector('select>optgroup');\n\n    if ((this.fields.groupBy || !isNullOrUndefined(group)) && !this.isGroupChecking) {\n      EventHandler.add(this.list, 'scroll', this.setFloatingHeader, this);\n    }\n\n    if (this.getModuleName() === 'dropdownbase') {\n      if (this.element.getAttribute('tabindex')) {\n        this.list.setAttribute('tabindex', this.element.getAttribute('tabindex'));\n      }\n\n      removeClass([this.element], dropDownBaseClasses.root);\n      this.element.style.display = 'none';\n      var wrapperElement = this.createElement('div');\n      this.element.parentElement.insertBefore(wrapperElement, this.element);\n      wrapperElement.appendChild(this.element);\n      wrapperElement.appendChild(this.list);\n    }\n\n    this.setEnableRtl();\n    this.setEnabled();\n\n    if (!isEmptyData) {\n      this.initialize();\n    }\n  };\n\n  ;\n  /**\n   * Return the module name of this component.\n   * @private\n   */\n\n  DropDownBase.prototype.getModuleName = function () {\n    return 'dropdownbase';\n  };\n\n  ;\n  /**\n   * Gets all the list items bound on this component.\n   * @returns Element[].\n   */\n\n  DropDownBase.prototype.getItems = function () {\n    return this.ulElement.querySelectorAll('.' + dropDownBaseClasses.li);\n  };\n\n  ;\n  /**\n   * Adds a new item to the popup list. By default, new item appends to the list as the last item,\n   * but you can insert based on the index parameter.\n   * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.\n   * @param { number } itemIndex - Specifies the index to place the newly added item in the popup list.\n   * @return {void}.\n    */\n\n  DropDownBase.prototype.addItem = function (items, itemIndex) {\n    if (!this.list || this.list.textContent === this.noRecordsTemplate && this.getModuleName() !== 'listbox') {\n      this.renderList();\n    }\n\n    if (this.sortOrder !== 'None' && isNullOrUndefined(itemIndex)) {\n      var newList = [].slice.call(this.listData);\n      newList.push(items);\n      newList = this.getSortedDataSource(newList);\n\n      if (this.fields.groupBy) {\n        newList = ListBase.groupDataSource(newList, this.fields.properties, this.sortOrder);\n        itemIndex = newList.indexOf(items);\n      } else {\n        itemIndex = newList.indexOf(items);\n      }\n    }\n\n    this.DropDownBaseresetBlazorTemplates(true, false, false, false);\n    var itemsCount = this.getItems().length;\n    var selectedItemValue = this.list.querySelector('.' + dropDownBaseClasses.selected);\n    items = items instanceof Array ? items : [items];\n    var index;\n    index = isNullOrUndefined(itemIndex) || itemIndex < 0 || itemIndex > itemsCount - 1 ? itemsCount : itemIndex;\n    var fields = this.fields;\n\n    if (items && fields.groupBy) {\n      items = ListBase.groupDataSource(items, fields.properties);\n    }\n\n    var liCollections = [];\n\n    for (var i = 0; i < items.length; i++) {\n      var item = items[i];\n      var isHeader = item.isHeader;\n      var li = this.createElement('li', {\n        className: isHeader ? dropDownBaseClasses.group : dropDownBaseClasses.li,\n        id: 'option-add-' + i\n      });\n      var itemText = item instanceof Object ? getValue(fields.text, item) : item;\n\n      if (isHeader) {\n        li.innerText = itemText;\n      }\n\n      if (this.itemTemplate && !isHeader) {\n        var compiledString = compile(this.itemTemplate);\n        append(compiledString(item, null, null, this.itemTemplateId, this.isStringTemplate), li);\n        this.DropDownBaseupdateBlazorTemplates(true, false, false, false);\n      } else if (!isHeader) {\n        li.appendChild(document.createTextNode(itemText));\n      }\n\n      li.setAttribute('data-value', item instanceof Object ? getValue(fields.value, item) : item);\n      li.setAttribute('role', 'option');\n      this.notify('addItem', {\n        module: 'CheckBoxSelection',\n        item: li\n      });\n      liCollections.push(li);\n      this.listData.push(item);\n      this.updateActionCompleteData(li, item, index); //Listbox event\n\n      this.trigger('beforeItemRender', {\n        element: li,\n        item: item\n      });\n    }\n\n    if (itemsCount === 0 && isNullOrUndefined(this.list.querySelector('ul'))) {\n      this.list.innerHTML = '';\n      this.list.classList.remove(dropDownBaseClasses.noData);\n      this.list.appendChild(this.ulElement);\n      this.liCollections = liCollections;\n      append(liCollections, this.ulElement);\n      this.updateAddItemList(this.list, itemsCount);\n    } else {\n      if (this.getModuleName() === 'listbox' && itemsCount === 0) {\n        this.ulElement.innerHTML = '';\n      }\n\n      var attr = [];\n\n      for (var i = 0; i < items.length; i++) {\n        var listGroupItem = this.ulElement.querySelectorAll('.e-list-group-item');\n\n        for (var j = 0; j < listGroupItem.length; j++) {\n          attr[j] = listGroupItem[j].innerText;\n        }\n\n        if (attr.indexOf(liCollections[i].innerText) > -1 && fields.groupBy) {\n          for (var j = 0; j < listGroupItem.length; j++) {\n            if (attr[j] === liCollections[i].innerText) {\n              if (this.sortOrder === 'None') {\n                this.ulElement.insertBefore(liCollections[i + 1], listGroupItem[j + 1]);\n              } else {\n                this.ulElement.insertBefore(liCollections[i + 1], this.ulElement.childNodes[itemIndex]);\n              }\n\n              i = i + 1;\n              break;\n            }\n          }\n        } else {\n          if (this.liCollections[index]) {\n            this.liCollections[index].parentNode.insertBefore(liCollections[i], this.liCollections[index]);\n          } else {\n            this.ulElement.appendChild(liCollections[i]);\n          }\n        }\n\n        var tempLi = [].slice.call(this.liCollections);\n        tempLi.splice(index, 0, liCollections[i]);\n        this.liCollections = tempLi;\n        index += 1;\n\n        if (this.getModuleName() === 'multiselect') {\n          this.updateDataList();\n        }\n      }\n    }\n\n    if (selectedItemValue || itemIndex === 0) {\n      this.updateSelection();\n    }\n  };\n\n  DropDownBase.prototype.validationAttribute = function (target, hidden) {\n    var name = target.getAttribute('name') ? target.getAttribute('name') : target.getAttribute('id');\n    hidden.setAttribute('name', name);\n    target.removeAttribute('name');\n    var attributes = ['required', 'aria-required', 'form'];\n\n    for (var i = 0; i < attributes.length; i++) {\n      if (!target.getAttribute(attributes[i])) {\n        continue;\n      }\n\n      var attr = target.getAttribute(attributes[i]);\n      hidden.setAttribute(attributes[i], attr);\n      target.removeAttribute(attributes[i]);\n    }\n  };\n\n  DropDownBase.prototype.setZIndex = function () {// this is for component wise\n  };\n\n  DropDownBase.prototype.updateActionCompleteData = function (li, item, index) {// this is for ComboBox custom value\n  };\n\n  DropDownBase.prototype.updateAddItemList = function (list, itemCount) {// this is for multiselect add item\n  };\n\n  DropDownBase.prototype.updateDataList = function () {// this is for multiselect update list items\n  };\n  /**\n   * Gets the data Object that matches the given value.\n   * @param { string | number } value - Specifies the value of the list item.\n   * @returns Object.\n   * @blazorType object\n   */\n\n\n  DropDownBase.prototype.getDataByValue = function (value) {\n    if (!isNullOrUndefined(this.listData)) {\n      var type = this.typeOfData(this.listData).typeof;\n\n      if (type === 'string' || type === 'number' || type === 'boolean') {\n        for (var _i = 0, _a = this.listData; _i < _a.length; _i++) {\n          var item = _a[_i];\n\n          if (!isNullOrUndefined(item) && item === value) {\n            return item;\n          }\n        }\n      } else {\n        for (var _b = 0, _c = this.listData; _b < _c.length; _b++) {\n          var item = _c[_b];\n\n          if (!isNullOrUndefined(item) && getValue(this.fields.value ? this.fields.value : 'value', item) === value) {\n            return item;\n          }\n        }\n      }\n    }\n\n    return null;\n  };\n  /**\n   * Removes the component from the DOM and detaches all its related event handlers. It also removes the attributes and classes.\n   * @method destroy\n   * @return {void}.\n   */\n\n\n  DropDownBase.prototype.destroy = function () {\n    if (document.body.contains(this.list)) {\n      EventHandler.remove(this.list, 'scroll', this.setFloatingHeader);\n\n      if (!isNullOrUndefined(this.rippleFun)) {\n        this.rippleFun();\n      }\n\n      detach(this.list);\n    }\n\n    _super.prototype.destroy.call(this);\n  };\n\n  ;\n\n  __decorate([Complex({\n    text: null,\n    value: null,\n    iconCss: null,\n    groupBy: null\n  }, FieldSettings)], DropDownBase.prototype, \"fields\", void 0);\n\n  __decorate([Property(false)], DropDownBase.prototype, \"enablePersistence\", void 0);\n\n  __decorate([Property(null)], DropDownBase.prototype, \"itemTemplate\", void 0);\n\n  __decorate([Property(null)], DropDownBase.prototype, \"groupTemplate\", void 0);\n\n  __decorate([Property('No records found')], DropDownBase.prototype, \"noRecordsTemplate\", void 0);\n\n  __decorate([Property('Request failed')], DropDownBase.prototype, \"actionFailureTemplate\", void 0);\n\n  __decorate([Property('None')], DropDownBase.prototype, \"sortOrder\", void 0);\n\n  __decorate([Property(true)], DropDownBase.prototype, \"enabled\", void 0);\n\n  __decorate([Property([])], DropDownBase.prototype, \"dataSource\", void 0);\n\n  __decorate([Property(null)], DropDownBase.prototype, \"query\", void 0);\n\n  __decorate([Property('StartsWith')], DropDownBase.prototype, \"filterType\", void 0);\n\n  __decorate([Property(true)], DropDownBase.prototype, \"ignoreCase\", void 0);\n\n  __decorate([Property(1000)], DropDownBase.prototype, \"zIndex\", void 0);\n\n  __decorate([Property(false)], DropDownBase.prototype, \"ignoreAccent\", void 0);\n\n  __decorate([Property()], DropDownBase.prototype, \"locale\", void 0);\n\n  __decorate([Event()], DropDownBase.prototype, \"actionBegin\", void 0);\n\n  __decorate([Event()], DropDownBase.prototype, \"actionComplete\", void 0);\n\n  __decorate([Event()], DropDownBase.prototype, \"actionFailure\", void 0);\n\n  __decorate([Event()], DropDownBase.prototype, \"select\", void 0);\n\n  __decorate([Event()], DropDownBase.prototype, \"dataBound\", void 0);\n\n  __decorate([Event()], DropDownBase.prototype, \"created\", void 0);\n\n  __decorate([Event()], DropDownBase.prototype, \"destroyed\", void 0);\n\n  DropDownBase = __decorate([NotifyPropertyChanges], DropDownBase);\n  return DropDownBase;\n}(Component);\n\nexport { DropDownBase };","map":null,"metadata":{},"sourceType":"module"}