{"ast":null,"code":"import { extend, Internationalization } from '@syncfusion/ej2-base';\nimport { NumericTextBox } from '@syncfusion/ej2-inputs';\nimport { isEditable, getComplexFieldID, getObject } from '../base/util';\n/**\n * `NumericEditCell` is used to handle numeric cell type editing.\n * @hidden\n */\n\nvar NumericEditCell =\n/** @class */\nfunction () {\n  function NumericEditCell(parent) {\n    this.parent = parent;\n  }\n\n  NumericEditCell.prototype.keyEventHandler = function (args) {\n    if (args.keyCode === 13 || args.keyCode === 9) {\n      var evt = document.createEvent('HTMLEvents');\n      evt.initEvent('change', false, true);\n      /* tslint:disable-next-line:no-any */\n\n      this.dispatchEvent(evt);\n    }\n  };\n\n  NumericEditCell.prototype.create = function (args) {\n    var complexFieldName = getComplexFieldID(args.column.field);\n    this.instances = new Internationalization(this.parent.locale);\n    return this.parent.createElement('input', {\n      className: 'e-field',\n      attrs: {\n        id: this.parent.element.id + complexFieldName,\n        name: complexFieldName,\n        'e-mappinguid': args.column.uid\n      }\n    });\n  };\n\n  NumericEditCell.prototype.read = function (element) {\n    return this.obj.value;\n  };\n\n  NumericEditCell.prototype.write = function (args) {\n    var col = args.column;\n    var isInline = this.parent.editSettings.mode !== 'Dialog';\n    this.obj = new NumericTextBox(extend({\n      value: parseFloat(getObject(args.column.field, args.rowData)),\n      enableRtl: this.parent.enableRtl,\n      placeholder: isInline ? '' : args.column.headerText,\n      enabled: isEditable(args.column, args.requestType, args.element),\n      floatLabelType: this.parent.editSettings.mode !== 'Dialog' ? 'Never' : 'Always',\n      locale: this.parent.locale\n    }, col.edit.params));\n    args.element.setAttribute('name', getComplexFieldID(args.column.field));\n    this.obj.appendTo(args.element);\n    this.obj.element.addEventListener('keydown', this.keyEventHandler);\n  };\n\n  NumericEditCell.prototype.destroy = function () {\n    if (this.obj && !this.obj.isDestroyed) {\n      this.obj.element.removeEventListener('keydown', this.keyEventHandler);\n      this.obj.destroy();\n    }\n  };\n\n  return NumericEditCell;\n}();\n\nexport { NumericEditCell };","map":null,"metadata":{},"sourceType":"module"}