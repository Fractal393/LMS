{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.keyboard_navigation.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _dom_adapter = require(\"../../core/dom_adapter\");\n\nvar _dom_adapter2 = _interopRequireDefault(_dom_adapter);\n\nvar _events_engine = require(\"../../events/core/events_engine\");\n\nvar _events_engine2 = _interopRequireDefault(_events_engine);\n\nvar _uiGrid_core = require(\"./ui.grid_core.modules\");\n\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\n\nvar _uiGrid_core3 = require(\"./ui.grid_core.utils\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _array = require(\"../../core/utils/array\");\n\nvar _selectors = require(\"../widget/selectors\");\n\nvar _utils = require(\"../../events/utils\");\n\nvar eventUtils = _interopRequireWildcard(_utils);\n\nvar _pointer = require(\"../../events/pointer\");\n\nvar _pointer2 = _interopRequireDefault(_pointer);\n\nvar _click = require(\"../../events/click\");\n\nvar _click2 = _interopRequireDefault(_click);\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _accessibility = require(\"../shared/accessibility\");\n\nvar accessibility = _interopRequireWildcard(_accessibility);\n\nvar _browser = require(\"../../core/utils/browser\");\n\nvar _browser2 = _interopRequireDefault(_browser);\n\nvar _short = require(\"../../events/short\");\n\nvar _devices = require(\"../../core/devices\");\n\nvar _devices2 = _interopRequireDefault(_devices);\n\nfunction _getRequireWildcardCache() {\n  if (\"function\" !== typeof WeakMap) {\n    return null;\n  }\n\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (null === obj || \"object\" !== _typeof(obj) && \"function\" !== typeof obj) {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar ROWS_VIEW_CLASS = \"rowsview\";\nvar EDIT_FORM_CLASS = \"edit-form\";\nvar GROUP_FOOTER_CLASS = \"group-footer\";\nvar ROW_CLASS = \"dx-row\";\nvar DATA_ROW_CLASS = \"dx-data-row\";\nvar GROUP_ROW_CLASS = \"dx-group-row\";\nvar HEADER_ROW_CLASS = \"dx-header-row\";\nvar EDIT_FORM_ITEM_CLASS = \"edit-form-item\";\nvar MASTER_DETAIL_ROW_CLASS = \"dx-master-detail-row\";\nvar FREESPACE_ROW_CLASS = \"dx-freespace-row\";\nvar VIRTUAL_ROW_CLASS = \"dx-virtual-row\";\nvar MASTER_DETAIL_CELL_CLASS = \"dx-master-detail-cell\";\nvar EDITOR_CELL_CLASS = \"dx-editor-cell\";\nvar EDIT_ROW_CLASS = \"dx-edit-row\";\nvar DROPDOWN_EDITOR_OVERLAY_CLASS = \"dx-dropdowneditor-overlay\";\nvar COMMAND_EXPAND_CLASS = \"dx-command-expand\";\nvar COMMAND_SELECT_CLASS = \"dx-command-select\";\nvar COMMAND_CELL_SELECTOR = \"[class^=dx-command]\";\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nvar DATEBOX_WIDGET_NAME = \"dxDateBox\";\nvar FOCUS_STATE_CLASS = \"dx-state-focused\";\nvar WIDGET_CLASS = \"dx-widget\";\nvar FAST_EDITING_DELETE_KEY = \"delete\";\nvar INTERACTIVE_ELEMENTS_SELECTOR = \"input:not([type='hidden']), textarea, a, select, [tabindex]\";\nvar EDIT_MODE_ROW = \"row\";\nvar EDIT_MODE_FORM = \"form\";\nvar EDIT_MODE_BATCH = \"batch\";\nvar EDIT_MODE_CELL = \"cell\";\nvar FOCUS_TYPE_ROW = \"row\";\nvar FOCUS_TYPE_CELL = \"cell\";\nvar COLUMN_HEADERS_VIEW = \"columnHeadersView\";\n\nfunction isGroupRow($row) {\n  return $row && $row.hasClass(GROUP_ROW_CLASS);\n}\n\nfunction isDetailRow($row) {\n  return $row && $row.hasClass(MASTER_DETAIL_ROW_CLASS);\n}\n\nfunction isDataRow($row) {\n  return $row && !isGroupRow($row) && !isDetailRow($row);\n}\n\nfunction isNotFocusedRow($row) {\n  return !$row || $row.hasClass(FREESPACE_ROW_CLASS) || $row.hasClass(VIRTUAL_ROW_CLASS);\n}\n\nfunction isCellElement($element) {\n  return $element.length && \"TD\" === $element[0].tagName;\n}\n\nfunction isEditorCell(that, $cell) {\n  return !that._isRowEditMode() && $cell && !$cell.hasClass(COMMAND_SELECT_CLASS) && $cell.hasClass(EDITOR_CELL_CLASS);\n}\n\nfunction isElementDefined($element) {\n  return (0, _type.isDefined)($element) && $element.length > 0;\n}\n\nfunction isMobile() {\n  return \"desktop\" !== _devices2.default.current().deviceType;\n}\n\nfunction isCellInHeaderRow($cell) {\n  return !!$cell.parent(\".\".concat(HEADER_ROW_CLASS)).length;\n}\n\nvar KeyboardNavigationController = _uiGrid_core2.default.ViewController.inherit({\n  init: function () {\n    var that = this;\n\n    if (that.isKeyboardEnabled()) {\n      accessibility.subscribeVisibilityChange();\n      that._dataController = that.getController(\"data\");\n      that._selectionController = that.getController(\"selection\");\n      that._editingController = that.getController(\"editing\");\n      that._headerPanel = that.getView(\"headerPanel\");\n      that._columnsController = that.getController(\"columns\");\n      that._fastEditingStarted = false;\n      that._focusedCellPosition = {};\n      that._canceledCellPosition = null;\n      that.getController(\"editorFactory\").focused.add(function ($element) {\n        that.setupFocusedView();\n\n        if (that._isNeedScroll) {\n          if ($element.is(\":visible\") && that._focusedView && that._focusedView.getScrollable) {\n            that._focusedView._scrollToElement($element);\n\n            that._isNeedScroll = false;\n          }\n        }\n      });\n\n      that._initViewHandlers();\n\n      that._initDocumentHandlers();\n\n      that.createAction(\"onKeyDown\");\n    }\n  },\n  _initViewHandlers: function () {\n    var that = this;\n    var pointerEventAction = that.createAction(that._pointerEventHandler);\n    var rowsView = that.getView(\"rowsView\");\n    rowsView.renderCompleted.add(function (e) {\n      var $rowsView = rowsView.element();\n      var isFullUpdate = !e || \"refresh\" === e.changeType;\n      var isFocusedViewCorrect = that._focusedView && that._focusedView.name === rowsView.name;\n      var needUpdateFocus = false;\n      var isAppend = e && (\"append\" === e.changeType || \"prepend\" === e.changeType);\n      var clickSelector = \".\".concat(ROW_CLASS, \" > td, .\").concat(ROW_CLASS);\n      var $focusedElement = (0, _renderer2.default)(\":focus\");\n      var isFocusedElementCorrect = !$focusedElement.length || $focusedElement.closest($rowsView).length || _browser2.default.msie && $focusedElement.is(\"body\");\n      var pointerEventName = !isMobile() ? _pointer2.default.down : _click2.default.name;\n\n      _events_engine2.default.off($rowsView, eventUtils.addNamespace(pointerEventName, \"dxDataGridKeyboardNavigation\"), pointerEventAction);\n\n      _events_engine2.default.on($rowsView, eventUtils.addNamespace(pointerEventName, \"dxDataGridKeyboardNavigation\"), clickSelector, pointerEventAction);\n\n      that._initKeyDownHandler($rowsView, function (e) {\n        return that._keyDownHandler(e);\n      });\n\n      that._setRowsViewAttributes($rowsView);\n\n      if (isFocusedViewCorrect && isFocusedElementCorrect) {\n        needUpdateFocus = that._isNeedFocus ? !isAppend : that._isHiddenFocus && isFullUpdate;\n        needUpdateFocus && that._updateFocus(true);\n      }\n    });\n  },\n  _initDocumentHandlers: function () {\n    var that = this;\n\n    var document = _dom_adapter2.default.getDocument();\n\n    that._documentClickHandler = that.createAction(function (e) {\n      var $target = (0, _renderer2.default)(e.event.target);\n      var isCurrentRowsViewClick = that._isEventInCurrentGrid(e.event) && $target.closest(\".\".concat(that.addWidgetPrefix(ROWS_VIEW_CLASS))).length;\n      var isEditorOverlay = $target.closest(\".\".concat(DROPDOWN_EDITOR_OVERLAY_CLASS)).length;\n\n      if (!isCurrentRowsViewClick && !isEditorOverlay) {\n        that._resetFocusedCell();\n      }\n    });\n\n    _events_engine2.default.on(document, eventUtils.addNamespace(_pointer2.default.down, \"dxDataGridKeyboardNavigation\"), that._documentClickHandler);\n  },\n  _setRowsViewAttributes: function ($rowsView) {\n    var isGridEmpty = !this._dataController.getVisibleRows().length;\n\n    if (isGridEmpty) {\n      this._applyTabIndexToElement($rowsView);\n    }\n  },\n  _initKeyDownHandler: function (element, handler) {\n    _short.keyboard.off(this._keyDownListener);\n\n    this._keyDownListener = _short.keyboard.on(element, null, handler);\n  },\n  dispose: function () {\n    this.callBase();\n    this._focusedView = null;\n\n    _short.keyboard.off(this._keyDownListener);\n\n    _events_engine2.default.off(_dom_adapter2.default.getDocument(), eventUtils.addNamespace(_pointer2.default.down, \"dxDataGridKeyboardNavigation\"), this._documentClickHandler);\n\n    accessibility.unsubscribeVisibilityChange();\n  },\n  optionChanged: function (args) {\n    var that = this;\n\n    switch (args.name) {\n      case \"keyboardNavigation\":\n      case \"useLegacyKeyboardNavigation\":\n        args.handled = true;\n        break;\n\n      default:\n        that.callBase(args);\n    }\n  },\n  isRowFocusType: function () {\n    return this.focusType === FOCUS_TYPE_ROW;\n  },\n  isCellFocusType: function () {\n    return this.focusType === FOCUS_TYPE_CELL;\n  },\n  setRowFocusType: function () {\n    if (this.option(\"focusedRowEnabled\")) {\n      this.focusType = FOCUS_TYPE_ROW;\n    }\n  },\n  setCellFocusType: function () {\n    this.focusType = FOCUS_TYPE_CELL;\n  },\n  _keyDownHandler: function (e) {\n    var isEditing = this._editingController.isEditing();\n\n    var needStopPropagation = true;\n    var originalEvent = e.originalEvent;\n\n    var isHandled = this._processOnKeyDown(e);\n\n    if (originalEvent.isDefaultPrevented()) {\n      return;\n    }\n\n    this._isNeedFocus = true;\n    this._isNeedScroll = true;\n\n    this._updateFocusedCellPositionByTarget(originalEvent.target);\n\n    if (!isHandled) {\n      switch (e.keyName) {\n        case \"leftArrow\":\n        case \"rightArrow\":\n          this._leftRightKeysHandler(e, isEditing);\n\n          break;\n\n        case \"upArrow\":\n        case \"downArrow\":\n          if (e.ctrl) {\n            accessibility.selectView(\"rowsView\", this, originalEvent);\n          } else {\n            this._upDownKeysHandler(e, isEditing);\n          }\n\n          break;\n\n        case \"pageUp\":\n        case \"pageDown\":\n          this._pageUpDownKeyHandler(e);\n\n          break;\n\n        case \"space\":\n          this._spaceKeyHandler(e, isEditing);\n\n          break;\n\n        case \"A\":\n          if (e.ctrl) {\n            this._ctrlAKeyHandler(e, isEditing);\n          } else {\n            this._beginFastEditing(e.originalEvent);\n          }\n\n          break;\n\n        case \"tab\":\n          this._tabKeyHandler(e, isEditing);\n\n          break;\n\n        case \"enter\":\n          this._enterKeyHandler(e, isEditing);\n\n          break;\n\n        case \"escape\":\n          this._escapeKeyHandler(e, isEditing);\n\n          break;\n\n        case \"F\":\n          if (e.ctrl) {\n            this._ctrlFKeyHandler(e);\n          } else {\n            this._beginFastEditing(e.originalEvent);\n          }\n\n          break;\n\n        case \"F2\":\n          this._f2KeyHandler();\n\n          break;\n\n        case \"del\":\n        case \"backspace\":\n          if (this._isFastEditingAllowed() && !this._isFastEditingStarted()) {\n            this._beginFastEditing(originalEvent, true);\n          }\n\n          break;\n\n        default:\n          if (!this._beginFastEditing(originalEvent)) {\n            this._isNeedFocus = false;\n            this._isNeedScroll = false;\n            needStopPropagation = false;\n          }\n\n      }\n\n      if (needStopPropagation) {\n        originalEvent.stopPropagation();\n      }\n    }\n  },\n  _processOnKeyDown: function (eventArgs) {\n    var originalEvent = eventArgs.originalEvent;\n    var args = {\n      handled: false,\n      event: originalEvent\n    };\n    this.executeAction(\"onKeyDown\", args);\n    eventArgs.ctrl = originalEvent.ctrlKey;\n    eventArgs.alt = originalEvent.altKey;\n    eventArgs.shift = originalEvent.shiftKey;\n    return !!args.handled;\n  },\n  _closeEditCell: function () {\n    var _this = this;\n\n    setTimeout(function () {\n      _this._editingController.closeEditCell();\n    });\n  },\n  _leftRightKeysHandler: function (eventArgs, isEditing) {\n    var rowIndex = this.getVisibleRowIndex();\n    var $event = eventArgs.originalEvent;\n\n    var $row = this._focusedView && this._focusedView.getRow(rowIndex);\n\n    var directionCode = this._getDirectionCodeByKey(eventArgs.keyName);\n\n    var isEditingNavigationMode = this._isFastEditingStarted();\n\n    var allowNavigate = (!isEditing || isEditingNavigationMode) && isDataRow($row);\n\n    if (allowNavigate) {\n      this.setCellFocusType();\n      isEditingNavigationMode && this._closeEditCell();\n\n      var $cell = this._getNextCell(directionCode);\n\n      if (isElementDefined($cell)) {\n        this._arrowKeysHandlerFocusCell($event, $cell);\n      }\n\n      $event && $event.preventDefault();\n    }\n  },\n  _upDownKeysHandler: function (eventArgs, isEditing) {\n    var rowIndex = this.getVisibleRowIndex();\n\n    var $row = this._focusedView && this._focusedView.getRow(rowIndex);\n\n    var $event = eventArgs.originalEvent;\n    var isUpArrow = \"upArrow\" === eventArgs.keyName;\n\n    var dataSource = this._dataController.dataSource();\n\n    var isEditingNavigationMode = this._isFastEditingStarted();\n\n    var allowNavigate = (!isEditing || isEditingNavigationMode) && $row && !isDetailRow($row);\n\n    if (allowNavigate) {\n      isEditingNavigationMode && this._closeEditCell();\n\n      if (!this._navigateNextCell($event, eventArgs.keyName)) {\n        if (this._isVirtualScrolling() && isUpArrow && dataSource && !dataSource.isLoading()) {\n          var rowHeight = $row.outerHeight();\n          rowIndex = this._focusedCellPosition.rowIndex - 1;\n\n          this._scrollBy(-rowHeight, rowIndex, $event);\n        }\n      }\n\n      $event && $event.preventDefault();\n    }\n  },\n  _pageUpDownKeyHandler: function (eventArgs) {\n    var pageIndex = this._dataController.pageIndex();\n\n    var pageCount = this._dataController.pageCount();\n\n    var pagingEnabled = this.option(\"paging.enabled\");\n    var isPageUp = \"pageUp\" === eventArgs.keyName;\n    var pageStep = isPageUp ? -1 : 1;\n    var scrollable = this.getView(\"rowsView\").getScrollable();\n\n    if (pagingEnabled && !this._isVirtualScrolling()) {\n      if ((isPageUp ? pageIndex > 0 : pageIndex < pageCount - 1) && !this._isVirtualScrolling()) {\n        this._dataController.pageIndex(pageIndex + pageStep);\n\n        eventArgs.originalEvent.preventDefault();\n      }\n    } else {\n      if (scrollable && scrollable._container().height() < scrollable.$content().height()) {\n        this._scrollBy(scrollable._container().height() * pageStep);\n\n        eventArgs.originalEvent.preventDefault();\n      }\n    }\n  },\n  _spaceKeyHandler: function (eventArgs, isEditing) {\n    var rowIndex = this.getVisibleRowIndex();\n    var $target = (0, _renderer2.default)(eventArgs.originalEvent && eventArgs.originalEvent.target);\n\n    if (this.option(\"selection\") && \"none\" !== this.option(\"selection\").mode && !isEditing) {\n      var isFocusedRowElement = \"row\" === this._getElementType($target) && this.isRowFocusType() && isDataRow($target);\n      var isFocusedSelectionCell = $target.hasClass(COMMAND_SELECT_CLASS);\n\n      if (isFocusedSelectionCell && \"onClick\" === this.option(\"selection.showCheckBoxesMode\")) {\n        this._selectionController.startSelectionWithCheckboxes();\n      }\n\n      if (isFocusedRowElement || $target.parent().hasClass(DATA_ROW_CLASS) || $target.hasClass(this.addWidgetPrefix(ROWS_VIEW_CLASS))) {\n        this._selectionController.changeItemSelection(rowIndex, {\n          shift: eventArgs.shift,\n          control: eventArgs.ctrl\n        });\n\n        eventArgs.originalEvent.preventDefault();\n      }\n    } else {\n      this._beginFastEditing(eventArgs.originalEvent);\n    }\n  },\n  _ctrlAKeyHandler: function (eventArgs, isEditing) {\n    if (!isEditing && eventArgs.ctrl && !eventArgs.alt && \"multiple\" === this.option(\"selection.mode\") && this.option(\"selection.allowSelectAll\")) {\n      this._selectionController.selectAll();\n\n      eventArgs.originalEvent.preventDefault();\n    }\n  },\n  _tabKeyHandler: function (eventArgs, isEditing) {\n    var editingOptions = this.option(\"editing\");\n    var direction = eventArgs.shift ? \"previous\" : \"next\";\n\n    var isOriginalHandlerRequired = !eventArgs.shift && this._isLastValidCell(this._focusedCellPosition) || eventArgs.shift && this._isFirstValidCell(this._focusedCellPosition);\n\n    var eventTarget = eventArgs.originalEvent.target;\n\n    var focusedViewElement = this._focusedView && this._focusedView.element();\n\n    if (this._handleTabKeyOnMasterDetailCell(eventTarget, direction)) {\n      return;\n    }\n\n    (0, _renderer2.default)(focusedViewElement).addClass(FOCUS_STATE_CLASS);\n\n    if (editingOptions && eventTarget && !isOriginalHandlerRequired) {\n      if ((0, _renderer2.default)(eventTarget).hasClass(this.addWidgetPrefix(ROWS_VIEW_CLASS))) {\n        this._resetFocusedCell();\n      }\n\n      if (isEditing) {\n        if (!this._editingCellTabHandler(eventArgs, direction)) {\n          return;\n        }\n      } else {\n        if (this._targetCellTabHandler(eventArgs, direction)) {\n          isOriginalHandlerRequired = true;\n        }\n      }\n    }\n\n    if (isOriginalHandlerRequired) {\n      this.getController(\"editorFactory\").loseFocus();\n\n      if (this._editingController.isEditing() && !this._isRowEditMode()) {\n        this._resetFocusedCell();\n\n        this._closeEditCell();\n      }\n    } else {\n      eventArgs.originalEvent.preventDefault();\n    }\n  },\n  _editingCellTabHandler: function (eventArgs, direction) {\n    var eventTarget = eventArgs.originalEvent.target;\n\n    var $cell = this._getCellElementFromTarget(eventTarget);\n\n    var isEditingAllowed;\n    var $event = eventArgs.originalEvent;\n\n    var elementType = this._getElementType(eventTarget);\n\n    if ($cell.is(COMMAND_CELL_SELECTOR)) {\n      return !this._targetCellTabHandler(eventArgs, direction);\n    }\n\n    this._updateFocusedCellPosition($cell);\n\n    var nextCellInfo = this._getNextCellByTabKey($event, direction, elementType);\n\n    $cell = nextCellInfo.$cell;\n\n    if (!$cell || this._handleTabKeyOnMasterDetailCell($cell, direction)) {\n      return false;\n    }\n\n    var column = this._columnsController.getVisibleColumns()[this.getView(\"rowsView\").getCellIndex($cell)];\n\n    var row = this._dataController.items()[this._getRowIndex($cell && $cell.parent())];\n\n    if (column.allowEditing) {\n      var _isDataRow = !row || \"data\" === row.rowType;\n\n      isEditingAllowed = this._editingController.allowUpdating({\n        row: row\n      }) ? _isDataRow : row && row.isNewRow;\n    }\n\n    if (!isEditingAllowed) {\n      this._closeEditCell();\n    }\n\n    if (this._focusCell($cell, !nextCellInfo.isHighlighted)) {\n      if (!this._isRowEditMode() && isEditingAllowed) {\n        this._editingController.editCell(this.getVisibleRowIndex(), this._focusedCellPosition.columnIndex);\n      } else {\n        this._focusInteractiveElement($cell, eventArgs.shift);\n      }\n    }\n\n    return true;\n  },\n  _targetCellTabHandler: function (eventArgs, direction) {\n    var $event = eventArgs.originalEvent;\n    var eventTarget = $event.target;\n\n    var $cell = this._getCellElementFromTarget(eventTarget);\n\n    var $lastInteractiveElement = this._getInteractiveElement($cell, !eventArgs.shift);\n\n    var isOriginalHandlerRequired = false;\n    var elementType;\n\n    if (!isEditorCell(this, $cell) && $lastInteractiveElement.length && eventTarget !== $lastInteractiveElement.get(0)) {\n      isOriginalHandlerRequired = true;\n    } else {\n      if (void 0 === this._focusedCellPosition.rowIndex && (0, _renderer2.default)(eventTarget).hasClass(ROW_CLASS)) {\n        this._updateFocusedCellPosition($cell);\n      }\n\n      elementType = this._getElementType(eventTarget);\n\n      if (this.isRowFocusType()) {\n        this.setCellFocusType();\n\n        if (\"row\" === elementType && isDataRow((0, _renderer2.default)(eventTarget))) {\n          eventTarget = this.getFirstValidCellInRow((0, _renderer2.default)(eventTarget));\n          elementType = this._getElementType(eventTarget);\n        }\n      }\n\n      var nextCellInfo = this._getNextCellByTabKey($event, direction, elementType);\n\n      $cell = nextCellInfo.$cell;\n\n      if (!$cell) {\n        return false;\n      }\n\n      $cell = this._checkNewLineTransition($event, $cell);\n\n      if (!$cell) {\n        return false;\n      }\n\n      this._focusCell($cell, !nextCellInfo.isHighlighted);\n\n      if (!isEditorCell(this, $cell)) {\n        this._focusInteractiveElement($cell, eventArgs.shift);\n      }\n    }\n\n    return isOriginalHandlerRequired;\n  },\n  _getNextCellByTabKey: function ($event, direction, elementType) {\n    var $cell = this._getNextCell(direction, elementType);\n\n    var args = $cell && this._fireFocusedCellChanging($event, $cell, true);\n\n    if (!args || args.cancel) {\n      return {};\n    }\n\n    if (args.$newCellElement) {\n      $cell = args.$newCellElement;\n    }\n\n    return {\n      $cell: $cell,\n      isHighlighted: args.isHighlighted\n    };\n  },\n  _checkNewLineTransition: function ($event, $cell) {\n    var rowIndex = this.getVisibleRowIndex();\n    var $row = $cell.parent();\n\n    if (rowIndex !== this._getRowIndex($row)) {\n      var cellPosition = this._getCellPosition($cell);\n\n      var args = this._fireFocusedRowChanging($event, $row);\n\n      if (args.cancel) {\n        return;\n      }\n\n      if (args.rowIndexChanged) {\n        this.setFocusedColumnIndex(cellPosition.columnIndex);\n        $cell = this._getFocusedCell();\n      }\n    }\n\n    return $cell;\n  },\n  _enterKeyHandler: function (eventArgs, isEditing) {\n    var $cell = this._getFocusedCell();\n\n    var rowIndex = this.getVisibleRowIndex();\n\n    var $row = this._focusedView && this._focusedView.getRow(rowIndex);\n\n    if (this.option(\"grouping.allowCollapsing\") && isGroupRow($row) || this.option(\"masterDetail.enabled\") && $cell && $cell.hasClass(COMMAND_EXPAND_CLASS)) {\n      var key = this._dataController.getKeyByRowIndex(rowIndex);\n\n      var item = this._dataController.items()[rowIndex];\n\n      if (void 0 !== key && item && item.data && !item.data.isContinuation) {\n        this._dataController.changeRowExpand(key);\n      }\n    } else {\n      this._processEnterKeyForDataCell(eventArgs, isEditing);\n    }\n  },\n  _processEnterKeyForDataCell: function (eventArgs, isEditing) {\n    var direction = this._getEnterKeyDirection(eventArgs);\n\n    var allowEditingOnEnterKey = this._allowEditingOnEnterKey();\n\n    if (isEditing || !allowEditingOnEnterKey && direction) {\n      this._handleEnterKeyEditingCell(eventArgs.originalEvent);\n\n      if (\"next\" === direction || \"previous\" === direction) {\n        this._targetCellTabHandler(eventArgs, direction);\n      } else {\n        if (\"upArrow\" === direction || \"downArrow\" === direction) {\n          this._navigateNextCell(eventArgs.originalEvent, direction);\n        }\n      }\n    } else {\n      if (allowEditingOnEnterKey) {\n        this._startEditing(eventArgs);\n      }\n    }\n  },\n  _getEnterKeyDirection: function (eventArgs) {\n    var enterKeyDirection = this.option(\"keyboardNavigation.enterKeyDirection\");\n    var isShift = eventArgs.shift;\n\n    if (\"column\" === enterKeyDirection) {\n      return isShift ? \"upArrow\" : \"downArrow\";\n    }\n\n    if (\"row\" === enterKeyDirection) {\n      return isShift ? \"previous\" : \"next\";\n    }\n  },\n  _handleEnterKeyEditingCell: function (event) {\n    var target = event.target;\n\n    var $cell = this._getCellElementFromTarget(target);\n\n    var isRowEditMode = this._isRowEditMode();\n\n    this._updateFocusedCellPosition($cell);\n\n    if (isRowEditMode) {\n      this._focusEditFormCell($cell);\n\n      setTimeout(this._editingController.saveEditData.bind(this._editingController));\n    } else {\n      _events_engine2.default.trigger((0, _renderer2.default)(target), \"change\");\n\n      this._closeEditCell();\n\n      event.preventDefault();\n    }\n  },\n  _escapeKeyHandler: function (eventArgs, isEditing) {\n    var $cell = this._getCellElementFromTarget(eventArgs.originalEvent.target);\n\n    if (isEditing) {\n      this._updateFocusedCellPosition($cell);\n\n      if (!this._isRowEditMode()) {\n        if (\"cell\" === this._editingController.getEditMode()) {\n          this._editingController.cancelEditData();\n        } else {\n          this._closeEditCell();\n        }\n      } else {\n        this._focusEditFormCell($cell);\n\n        this._editingController.cancelEditData();\n      }\n\n      eventArgs.originalEvent.preventDefault();\n    }\n  },\n  _ctrlFKeyHandler: function (eventArgs) {\n    if (this.option(\"searchPanel.visible\")) {\n      var searchTextEditor = this._headerPanel.getSearchTextEditor();\n\n      if (searchTextEditor) {\n        searchTextEditor.focus();\n        eventArgs.originalEvent.preventDefault();\n      }\n    }\n  },\n  _f2KeyHandler: function () {\n    var isEditing = this._editingController.isEditing();\n\n    var rowIndex = this.getVisibleRowIndex();\n\n    var $row = this._focusedView && this._focusedView.getRow(rowIndex);\n\n    if (!isEditing && isDataRow($row)) {\n      this._startEditing();\n    }\n  },\n  _navigateNextCell: function ($event, keyCode) {\n    var $cell = this._getNextCell(keyCode);\n\n    if ($cell && this._isCellValid($cell)) {\n      return this._arrowKeysHandlerFocusCell($event, $cell, true);\n    }\n\n    return false;\n  },\n  _arrowKeysHandlerFocusCell: function ($event, $cell, upDown) {\n    var args = this._fireFocusChangingEvents($event, $cell, upDown, true);\n\n    $cell = args.$newCellElement;\n\n    if (!args.cancel && this._isCellValid($cell)) {\n      this._focus($cell, !args.isHighlighted);\n\n      return true;\n    }\n\n    return false;\n  },\n  _beginFastEditing: function (originalEvent, isDeleting) {\n    if (!this._isFastEditingAllowed() || originalEvent.altKey || originalEvent.ctrlKey || this._editingController.isEditing()) {\n      return false;\n    }\n\n    if (isDeleting) {\n      this._startEditing(originalEvent, FAST_EDITING_DELETE_KEY);\n    } else {\n      var key = originalEvent.key;\n      var keyCode = originalEvent.keyCode || originalEvent.which;\n      var fastEditingKey = key || keyCode && String.fromCharCode(keyCode);\n\n      if (fastEditingKey && (1 === fastEditingKey.length || fastEditingKey === FAST_EDITING_DELETE_KEY)) {\n        this._startEditing(originalEvent, fastEditingKey);\n      }\n    }\n\n    return true;\n  },\n  _pointerEventHandler: function (e) {\n    var event = e.event || e;\n    var $target = (0, _renderer2.default)(event.currentTarget);\n    var rowsView = this.getView(\"rowsView\");\n    var focusedViewElement = rowsView && rowsView.element();\n    var $parent = $target.parent();\n    var isEditingRow = $parent.hasClass(EDIT_ROW_CLASS);\n    var isInteractiveElement = (0, _renderer2.default)(event.target).is(INTERACTIVE_ELEMENTS_SELECTOR);\n\n    if (this._isEventInCurrentGrid(event) && this._isCellValid($target, !isInteractiveElement)) {\n      $target = this._isInsideEditForm($target) ? (0, _renderer2.default)(event.target) : $target;\n\n      this._focusView();\n\n      (0, _renderer2.default)(focusedViewElement).removeClass(FOCUS_STATE_CLASS);\n\n      if ($parent.hasClass(FREESPACE_ROW_CLASS)) {\n        this._updateFocusedCellPosition($target);\n\n        this._applyTabIndexToElement(this._focusedView.element());\n\n        this._focusedView.focus();\n      } else {\n        if (!this._isMasterDetailCell($target) && !isEditingRow) {\n          this._clickTargetCellHandler(event, $target);\n        } else {\n          this._updateFocusedCellPosition($target);\n        }\n      }\n    } else {\n      if ($target.is(\"td\")) {\n        this._resetFocusedCell();\n      }\n    }\n  },\n  _clickTargetCellHandler: function (event, $cell) {\n    var columnIndex = this.getView(\"rowsView\").getCellIndex($cell);\n\n    var column = this._columnsController.getVisibleColumns()[columnIndex];\n\n    var isCellEditMode = this._isCellEditMode();\n\n    this.setCellFocusType();\n\n    var args = this._fireFocusChangingEvents(event, $cell, true);\n\n    $cell = args.$newCellElement;\n\n    if (!args.cancel) {\n      if (args.resetFocusedRow) {\n        this.getController(\"focus\")._resetFocusedRow();\n\n        return;\n      }\n\n      if (args.rowIndexChanged) {\n        $cell = this._getFocusedCell();\n      }\n\n      if (!args.isHighlighted && !isCellEditMode) {\n        this.setRowFocusType();\n      }\n\n      this._updateFocusedCellPosition($cell);\n\n      if (this._allowRowUpdating() && isCellEditMode && column && column.allowEditing) {\n        this._isNeedFocus = false;\n        this._isHiddenFocus = false;\n      } else {\n        var $target = event && (0, _renderer2.default)(event.target).closest(INTERACTIVE_ELEMENTS_SELECTOR + \", td\");\n        var isInteractiveTarget = $target && $target.not($cell).is(INTERACTIVE_ELEMENTS_SELECTOR);\n        var isEditor = !column.command && $cell.hasClass(EDITOR_CELL_CLASS);\n        var isDisabled = !isEditor && (!args.isHighlighted || isInteractiveTarget);\n\n        this._focus($cell, isDisabled, isInteractiveTarget);\n      }\n    } else {\n      this.setRowFocusType();\n      this.setFocusedRowIndex(args.prevRowIndex);\n      $cell = this._getFocusedCell();\n\n      if (this._editingController.isEditing() && isCellEditMode) {\n        this._closeEditCell();\n      }\n    }\n  },\n  _allowRowUpdating: function () {\n    var rowIndex = this.getVisibleRowIndex();\n\n    var row = this._dataController.items()[rowIndex];\n\n    return this._editingController.allowUpdating({\n      row: row\n    }, \"click\");\n  },\n  focus: function (element) {\n    var activeElementSelector;\n    var focusedRowEnabled = this.option(\"focusedRowEnabled\");\n    var isHighlighted = isCellElement((0, _renderer2.default)(element));\n\n    if (!element) {\n      activeElementSelector = \".dx-datagrid-rowsview .dx-row[tabindex]\";\n\n      if (!focusedRowEnabled) {\n        activeElementSelector += \", .dx-datagrid-rowsview .dx-row > td[tabindex]\";\n      }\n\n      element = this.component.$element().find(activeElementSelector).first();\n    }\n\n    element && this._focusElement((0, _renderer2.default)(element), isHighlighted);\n  },\n  getFocusedView: function () {\n    return this._focusedView;\n  },\n  setupFocusedView: function () {\n    if (this.isKeyboardEnabled() && !(0, _type.isDefined)(this._focusedView)) {\n      this._focusView();\n    }\n  },\n  _focusElement: function ($element, isHighlighted) {\n    var rowsViewElement = (0, _renderer2.default)(this._getRowsViewElement());\n    var $focusedView = $element.closest(rowsViewElement);\n    var isRowFocusType = this.isRowFocusType();\n    var args = {};\n\n    if (!$focusedView.length || isCellElement($element) && !this._isCellValid($element)) {\n      return;\n    }\n\n    this._focusView();\n\n    this._isNeedFocus = true;\n    this._isNeedScroll = true;\n\n    if (isCellElement($element) || isGroupRow($element)) {\n      this.setCellFocusType();\n      args = this._fireFocusChangingEvents(null, $element, false, isHighlighted);\n      $element = args.$newCellElement;\n\n      if (isRowFocusType && !args.isHighlighted) {\n        this.setRowFocusType();\n      }\n    }\n\n    this._focus($element, !args.isHighlighted);\n\n    this._focusInteractiveElement($element);\n  },\n  _getFocusedViewByElement: function ($element) {\n    var view = this.getFocusedView();\n    var $view = view && (0, _renderer2.default)(view.element());\n    return $element && 0 !== $element.closest($view).length;\n  },\n  _focusView: function () {\n    this._focusedView = this.getView(\"rowsView\");\n  },\n  _focusInteractiveElement: function ($cell, isLast) {\n    if (!$cell) {\n      return;\n    }\n\n    var $focusedElement = this._getInteractiveElement($cell, isLast);\n\n    (0, _uiGrid_core3.focusAndSelectElement)(this, $focusedElement);\n  },\n  _focus: function ($cell, disableFocus, isInteractiveElement) {\n    var $row = $cell && !$cell.hasClass(ROW_CLASS) ? $cell.closest(\".\".concat(ROW_CLASS)) : $cell;\n\n    if ($row && isNotFocusedRow($row)) {\n      return;\n    }\n\n    var focusedView = this._focusedView;\n    var $focusViewElement = focusedView && focusedView.element();\n    var $focusElement;\n    this._isHiddenFocus = disableFocus;\n\n    if (isGroupRow($row) || this.isRowFocusType()) {\n      $focusElement = $row;\n\n      if (focusedView) {\n        this.setFocusedRowIndex(this._getRowIndex($row));\n      }\n    } else {\n      if (isCellElement($cell)) {\n        $focusElement = $cell;\n\n        this._updateFocusedCellPosition($cell);\n      }\n    }\n\n    if ($focusElement) {\n      if ($focusViewElement) {\n        $focusViewElement.find(\".dx-row[tabIndex], .dx-row > td[tabindex]\").not($focusElement).removeClass(CELL_FOCUS_DISABLED_CLASS).removeAttr(\"tabIndex\");\n      }\n\n      _events_engine2.default.one($focusElement, \"blur\", function (e) {\n        if (e.relatedTarget) {\n          $focusElement.removeClass(CELL_FOCUS_DISABLED_CLASS);\n        }\n      });\n\n      if (!isInteractiveElement) {\n        this._applyTabIndexToElement($focusElement);\n\n        _events_engine2.default.trigger($focusElement, \"focus\");\n      }\n\n      if (disableFocus) {\n        $focusElement.addClass(CELL_FOCUS_DISABLED_CLASS);\n      } else {\n        this.getController(\"editorFactory\").focus($focusElement);\n      }\n    }\n  },\n  _updateFocus: function (isRenderView) {\n    var that = this;\n    setTimeout(function () {\n      var $cell = that._getFocusedCell();\n\n      var isEditing = that.getController(\"editing\").isEditing();\n\n      if ($cell && !(that._isMasterDetailCell($cell) && !that._isRowEditMode())) {\n        if (that._hasSkipRow($cell.parent())) {\n          var direction = that._focusedCellPosition && that._focusedCellPosition.rowIndex > 0 ? \"upArrow\" : \"downArrow\";\n          $cell = that._getNextCell(direction);\n        }\n\n        if (isElementDefined($cell)) {\n          if (isRenderView && !isEditing && that._checkCellOverlapped($cell)) {\n            return;\n          }\n\n          if ($cell.is(\"td\") || $cell.hasClass(that.addWidgetPrefix(EDIT_FORM_ITEM_CLASS))) {\n            var isCommandCell = $cell.is(COMMAND_CELL_SELECTOR);\n\n            if ((isRenderView || !isCommandCell) && that.getController(\"editorFactory\").focus()) {\n              that._focus($cell);\n            } else {\n              if (that._isCellEditMode()) {\n                that._focus($cell, that._isHiddenFocus);\n              } else {\n                if (that._isHiddenFocus) {\n                  that._focus($cell, true);\n                }\n              }\n            }\n\n            if (isEditing) {\n              that._focusInteractiveElement.bind(that)($cell);\n            }\n          } else {\n            _events_engine2.default.trigger($cell, \"focus\");\n          }\n        }\n      }\n    });\n  },\n  _checkCellOverlapped: function ($cell) {\n    var cellOffset = $cell.offset();\n    var hasScrollable = this.component.getScrollable && this.component.getScrollable();\n    var isOverlapped = false;\n\n    if (hasScrollable) {\n      if (cellOffset.left < 0) {\n        isOverlapped = $cell.width() + cellOffset.left <= 0;\n      } else {\n        if (cellOffset.top < 0) {\n          isOverlapped = $cell.height() + cellOffset.top <= 0;\n        }\n      }\n    }\n\n    return isOverlapped;\n  },\n  _getFocusedCell: function () {\n    return (0, _renderer2.default)(this._getCell(this._focusedCellPosition));\n  },\n  _updateFocusedCellPositionByTarget: function (target) {\n    var _this$_focusedCellPos;\n\n    var elementType = this._getElementType(target);\n\n    if (\"row\" === elementType && (0, _type.isDefined)(null === (_this$_focusedCellPos = this._focusedCellPosition) || void 0 === _this$_focusedCellPos ? void 0 : _this$_focusedCellPos.columnIndex)) {\n      var $row = (0, _renderer2.default)(target);\n      this._focusedView && isGroupRow($row) && this.setFocusedRowIndex(this._getRowIndex($row));\n    } else {\n      this._updateFocusedCellPosition(this._getCellElementFromTarget(target));\n    }\n  },\n  _updateFocusedCellPosition: function ($cell, direction) {\n    var position = this._getCellPosition($cell, direction);\n\n    if (position) {\n      if (!$cell.length || position.rowIndex >= 0 && position.columnIndex >= 0) {\n        this.setFocusedCellPosition(position.rowIndex, position.columnIndex);\n      }\n    }\n\n    return position;\n  },\n  _getCellPosition: function ($cell, direction) {\n    var that = this;\n    var columnIndex;\n    var $row = isElementDefined($cell) && $cell.closest(\"tr\");\n    var rowsView = this.getView(\"rowsView\");\n\n    if (isElementDefined($row)) {\n      var rowIndex = that._getRowIndex($row);\n\n      columnIndex = rowsView.getCellIndex($cell, rowIndex);\n\n      if (direction) {\n        columnIndex = \"previous\" === direction ? columnIndex - 1 : columnIndex + 1;\n        columnIndex = that._applyColumnIndexBoundaries(columnIndex);\n      }\n\n      return {\n        rowIndex: rowIndex,\n        columnIndex: columnIndex\n      };\n    }\n  },\n  _focusCell: function ($cell, isDisabled) {\n    if (this._isCellValid($cell)) {\n      this._focus($cell, isDisabled);\n\n      return true;\n    }\n  },\n  _focusEditFormCell: function ($cell) {\n    if ($cell.hasClass(MASTER_DETAIL_CELL_CLASS)) {\n      this.getController(\"editorFactory\").focus($cell, true);\n    }\n  },\n  _resetFocusedCell: function () {\n    var that = this;\n\n    var $cell = that._getFocusedCell();\n\n    $cell && $cell.removeAttr(\"tabIndex\");\n    that._focusedView && that._focusedView.renderFocusState && that._focusedView.renderFocusState();\n    that._isNeedFocus = false;\n    that._isNeedScroll = false;\n    that._focusedCellPosition = {};\n  },\n  restoreFocusableElement: function (rowIndex, $event) {\n    var that = this;\n    var args;\n    var $rowElement;\n    var isUpArrow = (0, _type.isDefined)(rowIndex);\n    var rowsView = that.getView(\"rowsView\");\n    var $rowsViewElement = rowsView.element();\n    var columnIndex = that._focusedCellPosition.columnIndex;\n\n    var rowIndexOffset = that._dataController.getRowIndexOffset();\n\n    rowIndex = isUpArrow ? rowIndex : rowsView.getTopVisibleItemIndex() + rowIndexOffset;\n\n    if (!isUpArrow) {\n      that.getController(\"editorFactory\").loseFocus();\n\n      that._applyTabIndexToElement($rowsViewElement);\n\n      _events_engine2.default.trigger($rowsViewElement, \"focus\");\n    } else {\n      $rowElement = rowsView.getRow(rowIndex - rowIndexOffset);\n      args = that._fireFocusedRowChanging($event, $rowElement);\n\n      if (!args.cancel && args.rowIndexChanged) {\n        rowIndex = args.newRowIndex;\n      }\n    }\n\n    if (!isUpArrow || !args.cancel) {\n      that.setFocusedCellPosition(rowIndex, columnIndex);\n    }\n\n    isUpArrow && that._updateFocus();\n  },\n  _getNewPositionByCode: function (cellPosition, elementType, code) {\n    var columnIndex = cellPosition.columnIndex;\n    var rowIndex = cellPosition.rowIndex;\n    var visibleColumnsCount;\n\n    if (void 0 === cellPosition.rowIndex && \"next\" === code) {\n      return {\n        columnIndex: 0,\n        rowIndex: 0\n      };\n    }\n\n    switch (code) {\n      case \"nextInRow\":\n      case \"next\":\n        visibleColumnsCount = this._getVisibleColumnCount();\n\n        if (columnIndex < visibleColumnsCount - 1 && !this._isLastValidCell({\n          columnIndex: columnIndex,\n          rowIndex: rowIndex\n        }) && \"row\" !== elementType) {\n          columnIndex++;\n        } else {\n          if (!this._isLastRow(rowIndex) && \"next\" === code) {\n            columnIndex = 0;\n            rowIndex++;\n          }\n        }\n\n        break;\n\n      case \"previousInRow\":\n      case \"previous\":\n        if (columnIndex > 0 && !this._isFirstValidCell({\n          columnIndex: columnIndex,\n          rowIndex: rowIndex\n        }) && \"row\" !== elementType) {\n          columnIndex--;\n        } else {\n          if (rowIndex > 0 && \"previous\" === code) {\n            rowIndex--;\n            visibleColumnsCount = this._getVisibleColumnCount();\n            columnIndex = visibleColumnsCount - 1;\n          }\n        }\n\n        break;\n\n      case \"upArrow\":\n        rowIndex = rowIndex > 0 ? rowIndex - 1 : rowIndex;\n        break;\n\n      case \"downArrow\":\n        rowIndex = !this._isLastRow(rowIndex) ? rowIndex + 1 : rowIndex;\n    }\n\n    return {\n      columnIndex: columnIndex,\n      rowIndex: rowIndex\n    };\n  },\n  setFocusedCellPosition: function (rowIndex, columnIndex) {\n    this.setFocusedRowIndex(rowIndex);\n    this.setFocusedColumnIndex(columnIndex);\n  },\n  setFocusedRowIndex: function (rowIndex) {\n    if (!this._focusedCellPosition) {\n      this._focusedCellPosition = {};\n    }\n\n    this._focusedCellPosition.rowIndex = rowIndex;\n  },\n  setFocusedColumnIndex: function (columnIndex) {\n    if (!this._focusedCellPosition) {\n      this._focusedCellPosition = {};\n    }\n\n    this._focusedCellPosition.columnIndex = columnIndex;\n  },\n  getVisibleRowIndex: function () {\n    if (this._focusedCellPosition) {\n      if (!this._focusedCellPosition.rowIndex) {\n        return this._focusedCellPosition.rowIndex;\n      }\n\n      return this._focusedCellPosition.rowIndex - this._dataController.getRowIndexOffset();\n    }\n\n    return null;\n  },\n  getVisibleColumnIndex: function () {\n    if (this._focusedCellPosition) {\n      return (0, _type.isDefined)(this._focusedCellPosition.columnIndex) ? this._focusedCellPosition.columnIndex : -1;\n    }\n\n    return -1;\n  },\n  getFocusedColumnIndex: function () {\n    return this._focusedCellPosition ? this._focusedCellPosition.columnIndex : null;\n  },\n  _applyColumnIndexBoundaries: function (columnIndex) {\n    var visibleColumnsCount = this._getVisibleColumnCount();\n\n    if (columnIndex < 0) {\n      columnIndex = 0;\n    } else {\n      if (columnIndex >= visibleColumnsCount) {\n        columnIndex = visibleColumnsCount - 1;\n      }\n    }\n\n    return columnIndex;\n  },\n  _isCellByPositionValid: function (cellPosition) {\n    var $cell = (0, _renderer2.default)(this._getCell(cellPosition));\n    return this._isCellValid($cell);\n  },\n  _isLastRow: function (rowIndex) {\n    if (this._isVirtualScrolling()) {\n      return rowIndex >= this._dataController.totalItemsCount() - 1;\n    }\n\n    return rowIndex === this.getController(\"data\").items().length - 1;\n  },\n  _isFirstValidCell: function (cellPosition) {\n    var isFirstValidCell = false;\n\n    if (0 === cellPosition.rowIndex && cellPosition.columnIndex >= 0) {\n      isFirstValidCell = isFirstValidCell || !this._haveValidCellBeforePosition(cellPosition);\n    }\n\n    return isFirstValidCell;\n  },\n  _haveValidCellBeforePosition: function (cellPosition) {\n    var columnIndex = cellPosition.columnIndex;\n    var hasValidCells = false;\n\n    while (columnIndex > 0 && !hasValidCells) {\n      var checkingPosition = {\n        columnIndex: --columnIndex,\n        rowIndex: cellPosition.rowIndex\n      };\n      hasValidCells = this._isCellByPositionValid(checkingPosition);\n    }\n\n    return hasValidCells;\n  },\n  _isLastValidCell: function (cellPosition) {\n    var nextColumnIndex = cellPosition.columnIndex >= 0 ? cellPosition.columnIndex + 1 : 0;\n    var rowIndex = cellPosition.rowIndex;\n    var checkingPosition = {\n      columnIndex: nextColumnIndex,\n      rowIndex: rowIndex\n    };\n    var visibleRows = this.getController(\"data\").getVisibleRows();\n    var row = visibleRows && visibleRows[rowIndex];\n\n    var isLastRow = this._isLastRow(rowIndex);\n\n    if (!isLastRow) {\n      return false;\n    }\n\n    if (row && \"group\" === row.rowType && cellPosition.columnIndex > 0) {\n      return true;\n    }\n\n    if (cellPosition.columnIndex === this._getVisibleColumnCount() - 1) {\n      return true;\n    }\n\n    if (this._isCellByPositionValid(checkingPosition)) {\n      return false;\n    }\n\n    return this._isLastValidCell(checkingPosition);\n  },\n  _isCellValid: function ($cell, isClick) {\n    if (isElementDefined($cell) && this._columnsController) {\n      var rowsView = this.getView(\"rowsView\");\n      var $row = $cell.parent();\n\n      var visibleColumns = this._columnsController.getVisibleColumns();\n\n      var columnIndex = rowsView.getCellIndex($cell);\n      var column = visibleColumns[columnIndex];\n\n      var visibleColumnCount = this._getVisibleColumnCount();\n\n      var editingController = this._editingController;\n      var isMasterDetailRow = isDetailRow($row);\n      var isShowWhenGrouped = column && column.showWhenGrouped;\n      var isDataCell = column && !$cell.hasClass(COMMAND_EXPAND_CLASS) && isDataRow($row);\n\n      var isValidGroupSpaceColumn = function () {\n        return !isMasterDetailRow && column && (!(0, _type.isDefined)(column.groupIndex) || isShowWhenGrouped && isDataCell) || parseInt($cell.attr(\"colspan\")) > 1;\n      };\n\n      if (this._isMasterDetailCell($cell)) {\n        return true;\n      }\n\n      if (visibleColumnCount > columnIndex && isValidGroupSpaceColumn()) {\n        var rowItems = this._dataController.items();\n\n        var visibleRowIndex = rowsView.getRowIndex($row);\n        var row = rowItems[visibleRowIndex];\n        var isCellEditing = editingController && this._isCellEditMode() && editingController.isEditing();\n        var isRowEditingInCurrentRow = editingController && editingController.isEditRow(visibleRowIndex);\n        var isEditing = isRowEditingInCurrentRow || isCellEditing;\n\n        if (column.command) {\n          if (this._isLegacyNavigation()) {\n            return !isEditing && \"expand\" === column.command;\n          }\n\n          if (isCellEditing) {\n            return !column.command;\n          }\n\n          if (isRowEditingInCurrentRow) {\n            return \"select\" !== column.command;\n          }\n\n          return !isEditing;\n        }\n\n        if (isCellEditing && row && \"data\" !== row.rowType) {\n          return false;\n        }\n\n        return !isEditing || column.allowEditing || isClick;\n      }\n    }\n  },\n  getFirstValidCellInRow: function ($row, columnIndex) {\n    var that = this;\n    var $cells = $row.find(\"> td\");\n    var $cell;\n    var $result;\n    columnIndex = columnIndex || 0;\n\n    for (var i = columnIndex; i < $cells.length; ++i) {\n      $cell = $cells.eq(i);\n\n      if (that._isCellValid($cell)) {\n        $result = $cell;\n        break;\n      }\n    }\n\n    return $result;\n  },\n  _getNextCell: function (keyCode, elementType, cellPosition) {\n    var focusedCellPosition = cellPosition || this._focusedCellPosition;\n    var isRowFocusType = this.isRowFocusType();\n    var includeCommandCells = isRowFocusType || (0, _array.inArray)(keyCode, [\"next\", \"previous\"]) > -1;\n    var isLastCellOnDirection = \"previous\" === keyCode ? this._isFirstValidCell(focusedCellPosition) : this._isLastValidCell(focusedCellPosition);\n    var $cell;\n    var $row;\n\n    if (this._focusedView && focusedCellPosition) {\n      var newFocusedCellPosition = this._getNewPositionByCode(focusedCellPosition, elementType, keyCode);\n\n      $cell = (0, _renderer2.default)(this._getCell(newFocusedCellPosition));\n\n      if (isElementDefined($cell) && !this._isCellValid($cell) && this._isCellInRow(newFocusedCellPosition, includeCommandCells) && !isLastCellOnDirection) {\n        if (isRowFocusType) {\n          $cell = this.getFirstValidCellInRow($cell.parent(), newFocusedCellPosition.columnIndex);\n        } else {\n          $cell = this._getNextCell(keyCode, \"cell\", newFocusedCellPosition);\n        }\n      }\n\n      $row = isElementDefined($cell) && $cell.parent();\n\n      if (this._hasSkipRow($row)) {\n        var rowIndex = this._getRowIndex($row);\n\n        if (!this._isLastRow(rowIndex)) {\n          $cell = this._getNextCell(keyCode, \"row\", {\n            columnIndex: focusedCellPosition.columnIndex,\n            rowIndex: rowIndex\n          });\n        } else {\n          return null;\n        }\n      }\n\n      return isElementDefined($cell) ? $cell : null;\n    }\n\n    return null;\n  },\n  _startEditing: function (eventArgs, fastEditingKey) {\n    var focusedCellPosition = this._focusedCellPosition;\n    var rowIndex = this.getVisibleRowIndex();\n\n    var row = this._dataController.items()[rowIndex];\n\n    var column = this._columnsController.getVisibleColumns()[focusedCellPosition.columnIndex];\n\n    if (this._isAllowEditing(row, column)) {\n      if (this._isRowEditMode()) {\n        this._editingController.editRow(rowIndex);\n      } else {\n        if (focusedCellPosition) {\n          this._startEditingCell(eventArgs, fastEditingKey);\n        }\n      }\n    }\n  },\n  _isAllowEditing: function (row, column) {\n    return this.getController(\"editing\").allowUpdating({\n      row: row\n    }) && column && column.allowEditing;\n  },\n  _startEditingCell: function (eventArgs, fastEditingKey) {\n    var that = this;\n    var rowIndex = this.getVisibleRowIndex();\n    var colIndex = this._focusedCellPosition.columnIndex;\n    this._fastEditingStarted = (0, _type.isDefined)(fastEditingKey);\n\n    var deferred = this._editingController.editCell(rowIndex, colIndex);\n\n    if (this._isFastEditingStarted()) {\n      if (true === deferred) {\n        that._editingCellHandler(eventArgs, fastEditingKey);\n      } else {\n        if (deferred && deferred.done) {\n          var editorValue = fastEditingKey !== FAST_EDITING_DELETE_KEY ? fastEditingKey : \"\";\n          deferred.done(function () {\n            return that._editingCellHandler(eventArgs, editorValue);\n          });\n        }\n      }\n    }\n  },\n  _editingCellHandler: function (eventArgs, editorValue) {\n    var $input = this._getFocusedCell().find(\".dx-texteditor-input\").eq(0);\n\n    var keyDownEvent = eventUtils.createEvent(eventArgs, {\n      type: \"keydown\",\n      target: $input.get(0)\n    });\n    var keyPressEvent = eventUtils.createEvent(eventArgs, {\n      type: \"keypress\",\n      target: $input.get(0)\n    });\n    var inputEvent = eventUtils.createEvent(eventArgs, {\n      type: \"input\",\n      target: $input.get(0)\n    });\n\n    _events_engine2.default.trigger($input, keyDownEvent);\n\n    if (!keyDownEvent.isDefaultPrevented()) {\n      _events_engine2.default.trigger($input, keyPressEvent);\n\n      if (!keyPressEvent.isDefaultPrevented()) {\n        var timeout = _browser2.default.mozilla ? 25 : 0;\n        setTimeout(function () {\n          $input.val(editorValue);\n          var $widgetContainer = $input.closest(\".\".concat(WIDGET_CLASS));\n\n          _events_engine2.default.off($widgetContainer, \"focusout\");\n\n          _events_engine2.default.one($widgetContainer, \"focusout\", function () {\n            _events_engine2.default.trigger($input, \"change\");\n          });\n\n          _events_engine2.default.trigger($input, inputEvent);\n        }, timeout);\n      }\n    }\n  },\n  _fireFocusChangingEvents: function ($event, $cell, fireRowEvent, isHighlighted) {\n    var args = {};\n    var cellPosition = this._getCellPosition($cell) || {};\n\n    if (this.isCellFocusType()) {\n      args = this._fireFocusedCellChanging($event, $cell, isHighlighted);\n\n      if (!args.cancel) {\n        cellPosition.columnIndex = args.newColumnIndex;\n        cellPosition.rowIndex = args.newRowIndex;\n        isHighlighted = args.isHighlighted;\n        $cell = (0, _renderer2.default)(this._getCell(cellPosition));\n      }\n    }\n\n    if (!args.cancel && fireRowEvent && $cell) {\n      args = this._fireFocusedRowChanging($event, $cell.parent());\n\n      if (!args.cancel) {\n        cellPosition.rowIndex = args.newRowIndex;\n        args.isHighlighted = isHighlighted;\n      }\n    }\n\n    args.$newCellElement = (0, _renderer2.default)(this._getCell(cellPosition));\n\n    if (!args.$newCellElement.length) {\n      args.$newCellElement = $cell;\n    }\n\n    return args;\n  },\n  _fireFocusedCellChanging: function ($event, $cellElement, isHighlighted) {\n    var that = this;\n    var prevCellIndex = that.option(\"focusedColumnIndex\");\n    var prevRowIndex = that.option(\"focusedRowIndex\");\n\n    var cellPosition = that._getCellPosition($cellElement);\n\n    var columnIndex = cellPosition ? cellPosition.columnIndex : -1;\n    var rowIndex = cellPosition ? cellPosition.rowIndex : -1;\n    var args = {\n      cellElement: $cellElement,\n      prevColumnIndex: prevCellIndex,\n      prevRowIndex: prevRowIndex,\n      newColumnIndex: columnIndex,\n      newRowIndex: rowIndex,\n      rows: that.getController(\"data\").getVisibleRows(),\n      columns: that.getController(\"columns\").getVisibleColumns(),\n      event: $event,\n      isHighlighted: isHighlighted || false,\n      cancel: false\n    };\n    this._canceledCellPosition = null;\n    that.executeAction(\"onFocusedCellChanging\", args);\n\n    if (args.newColumnIndex !== columnIndex || args.newRowIndex !== rowIndex) {\n      args.$newCellElement = (0, _renderer2.default)(this._getCell({\n        columnIndex: args.newColumnIndex,\n        rowIndex: args.newRowIndex\n      }));\n    }\n\n    if (args.cancel) {\n      this._canceledCellPosition = {\n        rowIndex: rowIndex,\n        columnIndex: columnIndex\n      };\n    }\n\n    return args;\n  },\n  _fireFocusedCellChanged: function ($cellElement, prevCellIndex, prevRowIndex) {\n    var that = this;\n    var dataController = that.getController(\"data\");\n    var columnIndex = that.getView(\"rowsView\").getCellIndex($cellElement);\n\n    var rowIndex = this._getRowIndex($cellElement && $cellElement.parent());\n\n    var localRowIndex = Math.min(rowIndex - dataController.getRowIndexOffset(), dataController.items().length - 1);\n    var isEditingCell = that.getController(\"editing\").isEditCell(localRowIndex, columnIndex);\n    var row = dataController.items()[localRowIndex];\n\n    if (!isEditingCell && (prevCellIndex !== columnIndex || prevRowIndex !== rowIndex)) {\n      dataController = that.getController(\"data\");\n      that.executeAction(\"onFocusedCellChanged\", {\n        cellElement: $cellElement,\n        columnIndex: columnIndex,\n        rowIndex: rowIndex,\n        row: row,\n        column: that.getController(\"columns\").getVisibleColumns()[columnIndex]\n      });\n    }\n  },\n  _fireFocusedRowChanging: function (eventArgs, $newFocusedRow) {\n    var newRowIndex = this._getRowIndex($newFocusedRow);\n\n    var dataController = this.getController(\"data\");\n    var prevFocusedRowIndex = this.option(\"focusedRowIndex\");\n    var loadingOperationTypes = dataController.loadingOperationTypes();\n    var args = {\n      rowElement: $newFocusedRow,\n      prevRowIndex: prevFocusedRowIndex,\n      newRowIndex: newRowIndex,\n      event: eventArgs,\n      rows: this.getController(\"data\").getVisibleRows(),\n      cancel: false\n    };\n\n    if (!dataController || dataController.isLoading() && (loadingOperationTypes.reload || loadingOperationTypes.paging)) {\n      args.cancel = true;\n      return args;\n    }\n\n    if (this.option(\"focusedRowEnabled\")) {\n      this.executeAction(\"onFocusedRowChanging\", args);\n\n      if (!args.cancel && args.newRowIndex !== newRowIndex) {\n        args.resetFocusedRow = args.newRowIndex < 0;\n\n        if (!args.resetFocusedRow) {\n          this.setFocusedRowIndex(args.newRowIndex);\n        }\n\n        args.rowIndexChanged = true;\n      }\n    }\n\n    return args;\n  },\n  _fireFocusedRowChanged: function ($rowElement) {\n    var row;\n    var focusedRowKey = this.option(\"focusedRowKey\");\n    var focusController = this.getController(\"focus\");\n    var focusedRowIndex = null === focusController || void 0 === focusController ? void 0 : focusController.getFocusedRowIndexByKey(focusedRowKey);\n\n    if (this.option(\"focusedRowEnabled\")) {\n      if (focusedRowIndex >= 0) {\n        var dataController = this.getController(\"data\");\n        row = focusedRowIndex >= 0 && dataController.getVisibleRows()[focusedRowIndex - dataController.getRowIndexOffset()];\n      }\n\n      this.executeAction(\"onFocusedRowChanged\", {\n        rowElement: $rowElement,\n        rowIndex: focusedRowIndex,\n        row: row\n      });\n    }\n  },\n  _isEventInCurrentGrid: function (event) {\n    return (0, _uiGrid_core3.isElementInCurrentGrid)(this, (0, _renderer2.default)(event.target));\n  },\n  _isRowEditMode: function () {\n    var editMode = this.getController(\"editing\").getEditMode();\n    return editMode === EDIT_MODE_ROW || editMode === EDIT_MODE_FORM;\n  },\n  _isCellEditMode: function () {\n    var editMode = this.getController(\"editing\").getEditMode();\n    return editMode === EDIT_MODE_CELL || editMode === EDIT_MODE_BATCH;\n  },\n  _isFastEditingAllowed: function () {\n    return this._isCellEditMode() && this.option(\"keyboardNavigation.editOnKeyPress\");\n  },\n  _getInteractiveElement: function ($cell, isLast) {\n    var $focusedElement = $cell.find(INTERACTIVE_ELEMENTS_SELECTOR).filter(\":visible\");\n    return isLast ? $focusedElement.last() : $focusedElement.first();\n  },\n  _applyTabIndexToElement: function ($element) {\n    var tabIndex = this.option(\"tabIndex\") || 0;\n    $element.attr(\"tabindex\", (0, _type.isDefined)(tabIndex) ? tabIndex : 0);\n  },\n  _getCell: function (cellPosition) {\n    if (this._focusedView && this._dataController && cellPosition) {\n      return this._focusedView.getCell({\n        rowIndex: cellPosition.rowIndex - this._dataController.getRowIndexOffset(),\n        columnIndex: cellPosition.columnIndex\n      });\n    }\n  },\n  _getRowIndex: function ($row) {\n    var rowsView = this.getView(\"rowsView\");\n    var rowIndex = rowsView.getRowIndex($row);\n\n    if (rowIndex >= 0) {\n      rowIndex += this.getController(\"data\").getRowIndexOffset();\n    }\n\n    return rowIndex;\n  },\n  _hasSkipRow: function ($row) {\n    var row = $row && $row.get(0);\n    return row && (\"none\" === row.style.display || $row.hasClass(this.addWidgetPrefix(GROUP_FOOTER_CLASS)) || isDetailRow($row) && !$row.hasClass(this.addWidgetPrefix(EDIT_FORM_CLASS)));\n  },\n  _allowEditingOnEnterKey: function () {\n    return \"startEdit\" === this.option(\"keyboardNavigation.enterKeyAction\");\n  },\n  _isLegacyNavigation: function () {\n    return this.option(\"useLegacyKeyboardNavigation\");\n  },\n  _getDirectionCodeByKey: function (key) {\n    var directionCode;\n\n    if (this.option(\"rtlEnabled\")) {\n      directionCode = \"leftArrow\" === key ? \"nextInRow\" : \"previousInRow\";\n    } else {\n      directionCode = \"leftArrow\" === key ? \"previousInRow\" : \"nextInRow\";\n    }\n\n    return directionCode;\n  },\n  _isVirtualScrolling: function () {\n    var scrollingMode = this.option(\"scrolling.mode\");\n    return \"virtual\" === scrollingMode || \"infinite\" === scrollingMode;\n  },\n  _scrollBy: function (top, rowIndex, $event) {\n    var that = this;\n    var scrollable = this.getView(\"rowsView\").getScrollable();\n\n    if (that._focusedCellPosition) {\n      var scrollHandler = function scrollHandler() {\n        scrollable.off(\"scroll\", scrollHandler);\n        setTimeout(that.restoreFocusableElement.bind(that, rowIndex, $event));\n      };\n\n      scrollable.on(\"scroll\", scrollHandler);\n    }\n\n    scrollable.scrollBy({\n      left: 0,\n      top: top\n    });\n  },\n  _isInsideEditForm: function (element) {\n    return (0, _renderer2.default)(element).closest(\".\" + this.addWidgetPrefix(EDIT_FORM_CLASS)).length > 0;\n  },\n  _isMasterDetailCell: function (element) {\n    var $masterDetailCell = (0, _renderer2.default)(element).closest(\".\" + MASTER_DETAIL_CELL_CLASS);\n    var $masterDetailGrid = $masterDetailCell.closest(\".\" + this.getWidgetContainerClass()).parent();\n    return $masterDetailCell.length && $masterDetailGrid.is(this.component.$element());\n  },\n  _processNextCellInMasterDetail: function ($nextCell) {\n    if (!this._isInsideEditForm($nextCell) && $nextCell) {\n      this._applyTabIndexToElement($nextCell);\n    }\n  },\n  _handleTabKeyOnMasterDetailCell: function (target, direction) {\n    if (this._isMasterDetailCell(target)) {\n      this._updateFocusedCellPosition((0, _renderer2.default)(target), direction);\n\n      var $nextCell = this._getNextCell(direction, \"row\");\n\n      this._processNextCellInMasterDetail($nextCell);\n\n      return true;\n    }\n\n    return false;\n  },\n  _getElementType: function (target) {\n    return (0, _renderer2.default)(target).is(\"tr\") ? \"row\" : \"cell\";\n  },\n  _isFastEditingStarted: function () {\n    return this._isFastEditingAllowed() && this._fastEditingStarted;\n  },\n  _getVisibleColumnCount: function () {\n    return this.getController(\"columns\").getVisibleColumns().length;\n  },\n  _isCellInRow: function (cellPosition, includeCommandCells) {\n    var columnIndex = cellPosition.columnIndex;\n\n    var visibleColumnsCount = this._getVisibleColumnCount();\n\n    return includeCommandCells ? columnIndex >= 0 && columnIndex <= visibleColumnsCount - 1 : columnIndex > 0 && columnIndex < visibleColumnsCount - 1;\n  },\n  _getCellElementFromTarget: function (target) {\n    var elementType = this._getElementType(target);\n\n    var $targetElement = (0, _renderer2.default)(target);\n    var $cell;\n\n    if (\"cell\" === elementType) {\n      $cell = $targetElement.closest(\".\".concat(ROW_CLASS, \" > td\"));\n    } else {\n      $cell = $targetElement.children().not(\".\" + COMMAND_EXPAND_CLASS).first();\n    }\n\n    return $cell;\n  },\n  _getRowsViewElement: function () {\n    var rowsView = this.getView(\"rowsView\");\n    return rowsView && rowsView.element();\n  },\n  isKeyboardEnabled: function () {\n    return this.option(\"keyboardNavigation.enabled\");\n  },\n  _processCanceledEditCellPosition: function (rowIndex, columnIndex) {\n    if (this._canceledCellPosition) {\n      var isCanceled = this._canceledCellPosition.rowIndex === rowIndex && this._canceledCellPosition.columnIndex === columnIndex;\n      this._canceledCellPosition = null;\n      return isCanceled;\n    }\n  }\n});\n\nmodule.exports = {\n  defaultOptions: function () {\n    return {\n      useLegacyKeyboardNavigation: false,\n      keyboardNavigation: {\n        enabled: true,\n        enterKeyAction: \"startEdit\",\n        enterKeyDirection: \"none\",\n        editOnKeyPress: false\n      }\n    };\n  },\n  controllers: {\n    keyboardNavigation: KeyboardNavigationController\n  },\n  extenders: {\n    views: {\n      rowsView: {\n        _rowClick: function (e) {\n          var editRowIndex = this.getController(\"editing\").getEditRowIndex();\n          var keyboardController = this.getController(\"keyboardNavigation\");\n\n          if (editRowIndex === e.rowIndex) {\n            keyboardController.setCellFocusType();\n          }\n\n          var needTriggerPointerEventHandler = isMobile() && this.option(\"focusedRowEnabled\");\n\n          if (needTriggerPointerEventHandler) {\n            this._triggerPointerDownEventHandler(e);\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        _triggerPointerDownEventHandler: function (e) {\n          var originalEvent = e.event.originalEvent;\n\n          if (originalEvent) {\n            var keyboardController = this.getController(\"keyboardNavigation\");\n            var $cell = (0, _renderer2.default)(originalEvent.target);\n            var columnIndex = this.getCellIndex($cell);\n            var column = this.getController(\"columns\").getVisibleColumns()[columnIndex];\n            var row = this.getController(\"data\").items()[e.rowIndex];\n\n            if (keyboardController._isAllowEditing(row, column)) {\n              var eventArgs = eventUtils.createEvent(originalEvent, {\n                currentTarget: originalEvent.target\n              });\n\n              keyboardController._pointerEventHandler(eventArgs);\n            }\n          }\n        },\n        renderFocusState: function () {\n          var dataController = this._dataController;\n          var rowIndex = this.option(\"focusedRowIndex\") || 0;\n          var $rowsView = this.element();\n\n          if ($rowsView && !(0, _selectors.focused)($rowsView)) {\n            $rowsView.attr(\"tabIndex\", null);\n          }\n\n          if (rowIndex < 0 || rowIndex >= dataController.getVisibleRows().length) {\n            rowIndex = 0;\n          }\n\n          var cellElements = this.getCellElements(rowIndex);\n\n          if (this.getController(\"keyboardNavigation\").isKeyboardEnabled() && cellElements) {\n            this.updateFocusElementTabIndex(cellElements);\n          }\n        },\n        updateFocusElementTabIndex: function (cellElements) {\n          var keyboardController = this.getController(\"keyboardNavigation\");\n          var $row = cellElements.eq(0).parent();\n          var columnIndex = this.option(\"focusedColumnIndex\");\n\n          if (!columnIndex || columnIndex < 0) {\n            columnIndex = 0;\n          }\n\n          if (isGroupRow($row)) {\n            keyboardController._applyTabIndexToElement($row);\n          } else {\n            this._updateFocusedCellTabIndex(cellElements, columnIndex);\n          }\n        },\n        _updateFocusedCellTabIndex: function (cellElements, columnIndex) {\n          var $cell;\n          var keyboardController = this.getController(\"keyboardNavigation\");\n          var oldFocusedView = keyboardController._focusedView;\n          var cellElementsLength = cellElements ? cellElements.length : -1;\n          keyboardController._focusedView = this;\n\n          if (cellElementsLength > 0) {\n            if (cellElementsLength <= columnIndex) {\n              columnIndex = cellElementsLength - 1;\n            }\n\n            for (var i = columnIndex; i < cellElementsLength; ++i) {\n              $cell = (0, _renderer2.default)(cellElements[i]);\n\n              if (!keyboardController._isMasterDetailCell($cell)) {\n                if (keyboardController._isCellValid($cell) && isCellElement($cell)) {\n                  keyboardController._applyTabIndexToElement($cell);\n\n                  keyboardController.setCellFocusType();\n                  break;\n                }\n              }\n            }\n          }\n\n          keyboardController._focusedView = oldFocusedView;\n        },\n        renderDelayedTemplates: function (change) {\n          this.callBase.apply(this, arguments);\n\n          if (!change || !change.repaintChangesOnly) {\n            this.renderFocusState();\n          }\n        },\n        _renderCore: function (change) {\n          this.callBase(change);\n\n          if (!change || !change.repaintChangesOnly) {\n            this.renderFocusState();\n          }\n        },\n        _editCellPrepared: function ($cell) {\n          var editorInstance = this._getEditorInstance($cell);\n\n          var keyboardController = this.getController(\"keyboardNavigation\");\n\n          var isEditingNavigationMode = keyboardController && keyboardController._isFastEditingStarted();\n\n          if (editorInstance && isEditingNavigationMode) {\n            this._handleEditingNavigationMode(editorInstance);\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        _handleEditingNavigationMode: function (editorInstance) {\n          [\"downArrow\", \"upArrow\"].forEach(function (keyName) {\n            var originalKeyHandler = editorInstance._supportedKeys()[keyName];\n\n            editorInstance.registerKeyHandler(keyName, function (e) {\n              var isDropDownOpened = \"true\" === editorInstance._input().attr(\"aria-expanded\");\n\n              if (isDropDownOpened) {\n                return originalKeyHandler && originalKeyHandler.call(editorInstance, e);\n              }\n            });\n          });\n          editorInstance.registerKeyHandler(\"leftArrow\", _common.noop);\n          editorInstance.registerKeyHandler(\"rightArrow\", _common.noop);\n          var isDateBoxWithMask = editorInstance.NAME === DATEBOX_WIDGET_NAME && editorInstance.option(\"useMaskBehavior\");\n\n          if (isDateBoxWithMask) {\n            editorInstance.registerKeyHandler(\"enter\", _common.noop);\n          }\n        },\n        _getEditorInstance: function ($cell) {\n          var $editor = $cell.find(\".dx-texteditor\").eq(0);\n          return (0, _uiGrid_core3.getWidgetInstance)($editor);\n        }\n      }\n    },\n    controllers: {\n      editing: {\n        editCell: function (rowIndex, columnIndex) {\n          var keyboardController = this.getController(\"keyboardNavigation\");\n\n          if (keyboardController._processCanceledEditCellPosition(rowIndex, columnIndex)) {\n            return false;\n          }\n\n          var isCellEditing = this.callBase(rowIndex, columnIndex);\n\n          if (isCellEditing) {\n            keyboardController.setupFocusedView();\n          }\n\n          return isCellEditing;\n        },\n        editRow: function (rowIndex) {\n          var keyboardController = this.getController(\"keyboardNavigation\");\n          var columnIndex = this.option(\"focusedColumnIndex\");\n\n          var column = this._columnsController.getVisibleColumns()[columnIndex];\n\n          if (column && column.type || this.option(\"editing.mode\") === EDIT_MODE_FORM) {\n            keyboardController._resetFocusedCell();\n          }\n\n          this.callBase(rowIndex);\n        },\n        addRow: function (parentKey) {\n          this.getController(\"keyboardNavigation\").setupFocusedView();\n          return this.callBase.apply(this, arguments);\n        },\n        getFocusedCellInRow: function (rowIndex) {\n          var keyboardNavigationController = this.getController(\"keyboardNavigation\");\n          var $cell = this.callBase(rowIndex);\n\n          if (keyboardNavigationController.isKeyboardEnabled() && keyboardNavigationController._focusedCellPosition.rowIndex === rowIndex) {\n            var $focusedCell = keyboardNavigationController._getFocusedCell();\n\n            if (isElementDefined($focusedCell) && !$focusedCell.hasClass(\"dx-command-edit\")) {\n              $cell = $focusedCell;\n            }\n          }\n\n          return $cell;\n        },\n        _processCanceledEditingCell: function () {\n          var _this2 = this;\n\n          this.closeEditCell().done(function () {\n            var keyboardNavigation = _this2.getController(\"keyboardNavigation\");\n\n            keyboardNavigation._updateFocus();\n          });\n        },\n        init: function () {\n          this.callBase();\n          this._keyboardNavigationController = this.getController(\"keyboardNavigation\");\n        },\n        closeEditCell: function () {\n          var keyboardNavigation = this.getController(\"keyboardNavigation\");\n          keyboardNavigation._fastEditingStarted = false;\n          var result = this.callBase.apply(this, arguments);\n\n          keyboardNavigation._updateFocus();\n\n          return result;\n        },\n        _delayedInputFocus: function () {\n          this._keyboardNavigationController._isNeedScroll = true;\n          this.callBase.apply(this, arguments);\n        },\n        _isEditingStart: function () {\n          var keyboardNavigation = this.getController(\"keyboardNavigation\");\n          var cancel = this.callBase.apply(this, arguments);\n\n          if (cancel && !keyboardNavigation._isNeedFocus) {\n            var $cell = keyboardNavigation._getFocusedCell();\n\n            keyboardNavigation._focus($cell, true);\n          }\n\n          return cancel;\n        }\n      },\n      data: {\n        _correctRowIndices: function (getRowIndexCorrection) {\n          var that = this;\n          var keyboardNavigationController = that.getController(\"keyboardNavigation\");\n          var editorFactory = that.getController(\"editorFactory\");\n          var focusedCellPosition = keyboardNavigationController._focusedCellPosition;\n          that.callBase.apply(that, arguments);\n\n          if (focusedCellPosition && focusedCellPosition.rowIndex >= 0) {\n            var focusedRowIndexCorrection = getRowIndexCorrection(focusedCellPosition.rowIndex);\n\n            if (focusedRowIndexCorrection) {\n              focusedCellPosition.rowIndex += focusedRowIndexCorrection;\n              editorFactory.refocus();\n            }\n          }\n        }\n      },\n      adaptiveColumns: {\n        _showHiddenCellsInView: function (_ref) {\n          var viewName = _ref.viewName,\n              $cells = _ref.$cells,\n              isCommandColumn = _ref.isCommandColumn;\n          this.callBase.apply(this, arguments);\n          viewName === COLUMN_HEADERS_VIEW && !isCommandColumn && $cells.each(function (_, cellElement) {\n            var $cell = (0, _renderer2.default)(cellElement);\n            isCellInHeaderRow($cell) && $cell.attr(\"tabindex\", 0);\n          });\n        },\n        _hideVisibleCellInView: function (_ref2) {\n          var viewName = _ref2.viewName,\n              $cell = _ref2.$cell,\n              isCommandColumn = _ref2.isCommandColumn;\n          this.callBase.apply(this, arguments);\n\n          if (viewName === COLUMN_HEADERS_VIEW && !isCommandColumn && isCellInHeaderRow($cell)) {\n            $cell.removeAttr(\"tabindex\");\n          }\n        }\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}