{"ast":null,"code":"/**\r\n * DevExtreme (ui/data_grid/ui.data_grid.summary.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _data = require(\"../../core/utils/data\");\n\nvar _ui = require(\"../widget/ui.errors\");\n\nvar _ui2 = _interopRequireDefault(_ui);\n\nvar _uiData_grid = require(\"./ui.data_grid.core\");\n\nvar _uiData_grid2 = _interopRequireDefault(_uiData_grid);\n\nvar _message = require(\"../../localization/message\");\n\nvar _message2 = _interopRequireDefault(_message);\n\nvar _uiData_grid3 = require(\"./ui.data_grid.data_source_adapter\");\n\nvar _uiData_grid4 = _interopRequireDefault(_uiData_grid3);\n\nvar _uiGrid_core = require(\"../grid_core/ui.grid_core.columns_view\");\n\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\n\nvar _aggregate_calculator = require(\"./aggregate_calculator\");\n\nvar _aggregate_calculator2 = _interopRequireDefault(_aggregate_calculator);\n\nvar _query = require(\"../../data/query\");\n\nvar _query2 = _interopRequireDefault(_query);\n\nvar _store_helper = require(\"../../data/store_helper\");\n\nvar _utils = require(\"../../data/utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar DATAGRID_TOTAL_FOOTER_CLASS = \"dx-datagrid-total-footer\";\nvar DATAGRID_SUMMARY_ITEM_CLASS = \"dx-datagrid-summary-item\";\nvar DATAGRID_TEXT_CONTENT_CLASS = \"dx-datagrid-text-content\";\nvar DATAGRID_GROUP_FOOTER_CLASS = \"dx-datagrid-group-footer\";\nvar DATAGRID_GROUP_TEXT_CONTENT_CLASS = \"dx-datagrid-group-text-content\";\nvar DATAGRID_NOWRAP_CLASS = \"dx-datagrid-nowrap\";\nvar DATAGRID_GROUP_FOOTER_ROW_TYPE = \"groupFooter\";\n\nvar renderSummaryCell = function (cell, options) {\n  var $cell = (0, _renderer2.default)(cell);\n  var column = options.column;\n  var summaryItems = options.summaryItems;\n  var $summaryItems = [];\n\n  if (!column.command && summaryItems) {\n    for (var i = 0; i < summaryItems.length; i++) {\n      var summaryItem = summaryItems[i];\n      $summaryItems.push((0, _renderer2.default)(\"<div>\").css(\"textAlign\", summaryItem.alignment || column.alignment).addClass(DATAGRID_SUMMARY_ITEM_CLASS).addClass(DATAGRID_TEXT_CONTENT_CLASS).addClass(summaryItem.cssClass).toggleClass(DATAGRID_GROUP_TEXT_CONTENT_CLASS, \"group\" === options.rowType).text(_uiData_grid2.default.getSummaryText(summaryItem, options.summaryTexts)));\n    }\n\n    $cell.append($summaryItems);\n  }\n};\n\nvar getSummaryCellOptions = function (that, options) {\n  var summaryTexts = that.option(\"summary.texts\") || {};\n  return {\n    totalItem: options.row,\n    summaryItems: options.row.summaryCells[options.columnIndex],\n    summaryTexts: summaryTexts\n  };\n};\n\nvar getGroupAggregates = function (data) {\n  return data.summary || data.aggregates || [];\n};\n\nvar recalculateWhileEditing = function (that) {\n  return that.option(\"summary.recalculateWhileEditing\");\n};\n\nexports.FooterView = _uiGrid_core2.default.ColumnsView.inherit(function () {\n  return {\n    _getRows: function () {\n      return this._dataController.footerItems();\n    },\n    _getCellOptions: function (options) {\n      return (0, _extend.extend)(this.callBase(options), getSummaryCellOptions(this, options));\n    },\n    _renderCellContent: function ($cell, options) {\n      renderSummaryCell($cell, options);\n      this.callBase($cell, options);\n    },\n    _renderCore: function (change) {\n      var totalItem = this._dataController.footerItems()[0];\n\n      if (!change || !change.columnIndices) {\n        this.element().empty().addClass(DATAGRID_TOTAL_FOOTER_CLASS).toggleClass(DATAGRID_NOWRAP_CLASS, !this.option(\"wordWrapEnabled\"));\n      }\n\n      if (totalItem && totalItem.summaryCells && totalItem.summaryCells.length) {\n        this._updateContent(this._renderTable({\n          change: change\n        }), change);\n      }\n    },\n    _updateContent: function ($newTable, change) {\n      if (change && \"update\" === change.changeType && change.columnIndices) {\n        var $row = this._getTableElement().find(\".dx-row\");\n\n        var $newRow = $newTable.find(\".dx-row\");\n\n        this._updateCells($row, $newRow, change.columnIndices[0]);\n      } else {\n        return this.callBase.apply(this, arguments);\n      }\n    },\n    _rowClick: function (e) {\n      var item = this._dataController.footerItems()[e.rowIndex] || {};\n      this.executeAction(\"onRowClick\", (0, _extend.extend)({}, e, item));\n    },\n    _columnOptionChanged: function (e) {\n      var optionNames = e.optionNames;\n\n      if (e.changeTypes.grouping) {\n        return;\n      }\n\n      if (optionNames.width || optionNames.visibleWidth) {\n        this.callBase(e);\n      }\n    },\n    _handleDataChanged: function (e) {\n      var changeType = e.changeType;\n\n      if (\"update\" === e.changeType && e.repaintChangesOnly) {\n        if (!e.totalColumnIndices) {\n          this.render();\n        } else {\n          if (e.totalColumnIndices.length) {\n            this.render(null, {\n              changeType: \"update\",\n              columnIndices: [e.totalColumnIndices]\n            });\n          }\n        }\n      } else {\n        if (\"refresh\" === changeType || \"append\" === changeType || \"prepend\" === changeType) {\n          this.render();\n        }\n      }\n    },\n    getHeight: function () {\n      return this.getElementHeight();\n    },\n    isVisible: function () {\n      return !!this._dataController.footerItems().length;\n    }\n  };\n}());\n\nvar SummaryDataSourceAdapterExtender = function () {\n  function forEachGroup(groups, groupCount, callback, path) {\n    path = path || [];\n\n    for (var i = 0; i < groups.length; i++) {\n      path.push(groups[i].key);\n\n      if (1 === groupCount) {\n        callback(path, groups[i].items);\n      } else {\n        forEachGroup(groups[i].items, groupCount - 1, callback, path);\n      }\n\n      path.pop();\n    }\n  }\n\n  return {\n    init: function () {\n      this.callBase.apply(this, arguments);\n      this._totalAggregates = [];\n      this._summaryGetter = _common.noop;\n    },\n    summaryGetter: function (_summaryGetter) {\n      if (!arguments.length) {\n        return this._summaryGetter;\n      }\n\n      if ((0, _type.isFunction)(_summaryGetter)) {\n        this._summaryGetter = _summaryGetter;\n      }\n    },\n    summary: function (_summary) {\n      if (!arguments.length) {\n        return this._summaryGetter();\n      }\n\n      this._summaryGetter = function () {\n        return _summary;\n      };\n    },\n    totalAggregates: function () {\n      return this._totalAggregates;\n    },\n    isLastLevelGroupItemsPagingLocal: function () {\n      var summary = this.summary();\n      var sortByGroupsInfo = summary && summary.sortByGroups();\n      return sortByGroupsInfo && sortByGroupsInfo.length;\n    },\n    sortLastLevelGroupItems: function (items, groups, paths) {\n      var groupedItems = (0, _store_helper.multiLevelGroup)((0, _query2.default)(items), groups).toArray();\n      var result = [];\n      paths.forEach(function (path) {\n        forEachGroup(groupedItems, groups.length, function (itemsPath, items) {\n          if (path.toString() === itemsPath.toString()) {\n            result = result.concat(items);\n          }\n        });\n      });\n      return result;\n    }\n  };\n}();\n\nvar SummaryDataSourceAdapterClientExtender = function () {\n  var applyAddedData = function applyAddedData(data, insertedData, groupLevel) {\n    if (groupLevel) {\n      return applyAddedData(data, insertedData.map(function (item) {\n        return {\n          items: [item]\n        };\n      }, groupLevel - 1));\n    }\n\n    return data.concat(insertedData);\n  };\n\n  var applyRemovedData = function applyRemovedData(data, removedData, groupLevel) {\n    if (groupLevel) {\n      return data.map(function (data) {\n        var updatedData = {};\n        var updatedItems = applyRemovedData(data.items || [], removedData, groupLevel - 1);\n        Object.defineProperty(updatedData, \"aggregates\", {\n          get: function () {\n            return data.aggregates;\n          },\n          set: function (value) {\n            data.aggregates = value;\n          }\n        });\n        return (0, _extend.extend)(updatedData, data, {\n          items: updatedItems\n        });\n      });\n    }\n\n    return data.filter(function (data) {\n      return removedData.indexOf(data) < 0;\n    });\n  };\n\n  var calculateAggregates = function (that, summary, data, groupLevel) {\n    var calculator;\n\n    if (recalculateWhileEditing(that)) {\n      var editingController = that.getController(\"editing\");\n\n      if (editingController) {\n        var insertedData = editingController.getInsertedData();\n\n        if (insertedData.length) {\n          data = applyAddedData(data, insertedData, groupLevel);\n        }\n\n        var removedData = editingController.getRemovedData();\n\n        if (removedData.length) {\n          data = applyRemovedData(data, removedData, groupLevel);\n        }\n      }\n    }\n\n    if (summary) {\n      calculator = new _aggregate_calculator2.default({\n        totalAggregates: summary.totalAggregates,\n        groupAggregates: summary.groupAggregates,\n        data: data,\n        groupLevel: groupLevel\n      });\n      calculator.calculate();\n    }\n\n    return calculator ? calculator.totalAggregates() : [];\n  };\n\n  var sortGroupsBySummaryCore = function sortGroupsBySummaryCore(items, groups, sortByGroups) {\n    if (!items || !groups.length) {\n      return items;\n    }\n\n    var group = groups[0];\n    var sorts = sortByGroups[0];\n    var query;\n\n    if (group && sorts && sorts.length) {\n      query = (0, _query2.default)(items);\n      (0, _iterator.each)(sorts, function (index) {\n        if (0 === index) {\n          query = query.sortBy(this.selector, this.desc);\n        } else {\n          query = query.thenBy(this.selector, this.desc);\n        }\n      });\n      query.enumerate().done(function (sortedItems) {\n        items = sortedItems;\n      });\n    }\n\n    groups = groups.slice(1);\n    sortByGroups = sortByGroups.slice(1);\n\n    if (groups.length && sortByGroups.length) {\n      (0, _iterator.each)(items, function () {\n        this.items = sortGroupsBySummaryCore(this.items, groups, sortByGroups);\n      });\n    }\n\n    return items;\n  };\n\n  var sortGroupsBySummary = function (data, group, summary) {\n    var sortByGroups = summary && summary.sortByGroups && summary.sortByGroups();\n\n    if (sortByGroups && sortByGroups.length) {\n      return sortGroupsBySummaryCore(data, group, sortByGroups);\n    }\n\n    return data;\n  };\n\n  return {\n    _customizeRemoteOperations: function (options) {\n      var summary = this.summary();\n\n      if (summary) {\n        if (options.remoteOperations.summary) {\n          if (!options.isCustomLoading || options.storeLoadOptions.isLoadingAll) {\n            if (options.storeLoadOptions.group) {\n              if (options.remoteOperations.grouping) {\n                options.storeLoadOptions.groupSummary = summary.groupAggregates;\n              } else {\n                if (summary.groupAggregates.length) {\n                  options.remoteOperations.paging = false;\n                }\n              }\n            }\n\n            options.storeLoadOptions.totalSummary = summary.totalAggregates;\n          }\n        } else {\n          if (summary.totalAggregates.length || summary.groupAggregates.length && options.storeLoadOptions.group) {\n            options.remoteOperations.paging = false;\n          }\n        }\n      }\n\n      this.callBase.apply(this, arguments);\n      var cachedExtra = options.cachedPagesData.extra;\n\n      if (cachedExtra && cachedExtra.summary && !options.isCustomLoading) {\n        options.storeLoadOptions.totalSummary = void 0;\n      }\n    },\n    _handleDataLoadedCore: function (options) {\n      var that = this;\n      var groups = (0, _utils.normalizeSortingInfo)(options.storeLoadOptions.group || options.loadOptions.group || []);\n      var remoteOperations = options.remoteOperations || {};\n      var summary = that.summaryGetter()(remoteOperations);\n      var totalAggregates;\n\n      if (!options.isCustomLoading || options.storeLoadOptions.isLoadingAll) {\n        if (remoteOperations.summary) {\n          if (!remoteOperations.paging && groups.length && summary) {\n            if (!remoteOperations.grouping) {\n              calculateAggregates(that, {\n                groupAggregates: summary.groupAggregates\n              }, options.data, groups.length);\n            }\n\n            options.data = sortGroupsBySummary(options.data, groups, summary);\n          }\n        } else {\n          if (!remoteOperations.paging) {\n            totalAggregates = calculateAggregates(that, summary, options.data, groups.length);\n            options.data = sortGroupsBySummary(options.data, groups, summary);\n            options.extra = (0, _type.isPlainObject)(options.extra) ? options.extra : {};\n            options.extra.summary = totalAggregates;\n          }\n        }\n      }\n\n      if (!options.isCustomLoading) {\n        that._totalAggregates = options.extra && options.extra.summary || that._totalAggregates;\n      }\n\n      that.callBase(options);\n    }\n  };\n}();\n\n_uiData_grid4.default.extend(SummaryDataSourceAdapterExtender);\n\n_uiData_grid4.default.extend(SummaryDataSourceAdapterClientExtender);\n\nexports.renderSummaryCell = renderSummaryCell;\n\n_uiData_grid2.default.registerModule(\"summary\", {\n  defaultOptions: function () {\n    return {\n      summary: {\n        groupItems: void 0,\n        totalItems: void 0,\n        calculateCustomSummary: void 0,\n        skipEmptyValues: true,\n        recalculateWhileEditing: false,\n        texts: {\n          sum: _message2.default.getFormatter(\"dxDataGrid-summarySum\"),\n          sumOtherColumn: _message2.default.getFormatter(\"dxDataGrid-summarySumOtherColumn\"),\n          min: _message2.default.getFormatter(\"dxDataGrid-summaryMin\"),\n          minOtherColumn: _message2.default.getFormatter(\"dxDataGrid-summaryMinOtherColumn\"),\n          max: _message2.default.getFormatter(\"dxDataGrid-summaryMax\"),\n          maxOtherColumn: _message2.default.getFormatter(\"dxDataGrid-summaryMaxOtherColumn\"),\n          avg: _message2.default.getFormatter(\"dxDataGrid-summaryAvg\"),\n          avgOtherColumn: _message2.default.getFormatter(\"dxDataGrid-summaryAvgOtherColumn\"),\n          count: _message2.default.getFormatter(\"dxDataGrid-summaryCount\")\n        }\n      },\n      sortByGroupSummaryInfo: void 0\n    };\n  },\n  views: {\n    footerView: exports.FooterView\n  },\n  extenders: {\n    controllers: {\n      data: function () {\n        return {\n          _isDataColumn: function (column) {\n            return column && (!(0, _type.isDefined)(column.groupIndex) || column.showWhenGrouped);\n          },\n          _isGroupFooterVisible: function () {\n            var groupItems = this.option(\"summary.groupItems\") || [];\n\n            for (var i = 0; i < groupItems.length; i++) {\n              var groupItem = groupItems[i];\n\n              var column = this._columnsController.columnOption(groupItem.showInColumn || groupItem.column);\n\n              if (groupItem.showInGroupFooter && this._isDataColumn(column)) {\n                return true;\n              }\n            }\n\n            return false;\n          },\n          _processGroupItems: function (items, groupCount, options) {\n            var data = options && options.data;\n            var result = this.callBase.apply(this, arguments);\n\n            if (options) {\n              if (void 0 === options.isGroupFooterVisible) {\n                options.isGroupFooterVisible = this._isGroupFooterVisible();\n              }\n\n              if (data && data.items && options.isGroupFooterVisible && (options.collectContinuationItems || !data.isContinuationOnNextPage)) {\n                result.push({\n                  rowType: DATAGRID_GROUP_FOOTER_ROW_TYPE,\n                  key: options.path.slice(),\n                  data: data,\n                  groupIndex: options.path.length - 1,\n                  values: []\n                });\n              }\n            }\n\n            return result;\n          },\n          _processGroupItem: function (groupItem, options) {\n            var that = this;\n\n            if (!options.summaryGroupItems) {\n              options.summaryGroupItems = that.option(\"summary.groupItems\") || [];\n            }\n\n            if (\"group\" === groupItem.rowType) {\n              var groupColumnIndex = -1;\n              var afterGroupColumnIndex = -1;\n              (0, _iterator.each)(options.visibleColumns, function (visibleIndex) {\n                var prevColumn = options.visibleColumns[visibleIndex - 1];\n\n                if (groupItem.groupIndex === this.groupIndex) {\n                  groupColumnIndex = this.index;\n                }\n\n                if (visibleIndex > 0 && \"expand\" === prevColumn.command && \"expand\" !== this.command) {\n                  afterGroupColumnIndex = this.index;\n                }\n              });\n              groupItem.summaryCells = this._calculateSummaryCells(options.summaryGroupItems, getGroupAggregates(groupItem.data), options.visibleColumns, function (summaryItem, column) {\n                if (summaryItem.showInGroupFooter) {\n                  return -1;\n                }\n\n                if (summaryItem.alignByColumn && column && !(0, _type.isDefined)(column.groupIndex) && column.index !== afterGroupColumnIndex) {\n                  return column.index;\n                } else {\n                  return groupColumnIndex;\n                }\n              });\n            }\n\n            if (groupItem.rowType === DATAGRID_GROUP_FOOTER_ROW_TYPE) {\n              groupItem.summaryCells = this._calculateSummaryCells(options.summaryGroupItems, getGroupAggregates(groupItem.data), options.visibleColumns, function (summaryItem, column) {\n                return summaryItem.showInGroupFooter && that._isDataColumn(column) ? column.index : -1;\n              });\n            }\n\n            return groupItem;\n          },\n          _calculateSummaryCells: function (summaryItems, aggregates, visibleColumns, calculateTargetColumnIndex) {\n            var that = this;\n            var summaryCells = [];\n            var summaryCellsByColumns = {};\n            (0, _iterator.each)(summaryItems, function (summaryIndex, summaryItem) {\n              var column = that._columnsController.columnOption(summaryItem.column);\n\n              var showInColumn = summaryItem.showInColumn && that._columnsController.columnOption(summaryItem.showInColumn) || column;\n              var columnIndex = calculateTargetColumnIndex(summaryItem, showInColumn);\n\n              if (columnIndex >= 0) {\n                if (!summaryCellsByColumns[columnIndex]) {\n                  summaryCellsByColumns[columnIndex] = [];\n                }\n\n                var aggregate = aggregates[summaryIndex];\n\n                if (aggregate === aggregate) {\n                  var valueFormat;\n\n                  if ((0, _type.isDefined)(summaryItem.valueFormat)) {\n                    valueFormat = summaryItem.valueFormat;\n                  } else {\n                    if (\"count\" !== summaryItem.summaryType) {\n                      valueFormat = _uiData_grid2.default.getFormatByDataType(column && column.dataType);\n                    }\n                  }\n\n                  summaryCellsByColumns[columnIndex].push((0, _extend.extend)({}, summaryItem, {\n                    value: (0, _type.isString)(aggregate) && column && column.deserializeValue ? column.deserializeValue(aggregate) : aggregate,\n                    valueFormat: valueFormat,\n                    columnCaption: column && column.index !== columnIndex ? column.caption : void 0\n                  }));\n                }\n              }\n            });\n\n            if (!(0, _type.isEmptyObject)(summaryCellsByColumns)) {\n              (0, _iterator.each)(visibleColumns, function () {\n                summaryCells.push(summaryCellsByColumns[this.index] || []);\n              });\n            }\n\n            return summaryCells;\n          },\n          _getSummaryCells: function (summaryTotalItems, totalAggregates) {\n            var that = this;\n            var columnsController = that._columnsController;\n            return that._calculateSummaryCells(summaryTotalItems, totalAggregates, columnsController.getVisibleColumns(), function (summaryItem, column) {\n              return that._isDataColumn(column) ? column.index : -1;\n            });\n          },\n          _updateItemsCore: function (change) {\n            var that = this;\n            var summaryCells;\n            var dataSource = that._dataSource;\n            var footerItems = that._footerItems;\n            var oldSummaryCells = footerItems && footerItems[0] && footerItems[0].summaryCells;\n            var summaryTotalItems = that.option(\"summary.totalItems\");\n            that._footerItems = [];\n\n            if (dataSource && summaryTotalItems && summaryTotalItems.length) {\n              var totalAggregates = dataSource.totalAggregates();\n              summaryCells = that._getSummaryCells(summaryTotalItems, totalAggregates);\n\n              if (change && change.repaintChangesOnly && oldSummaryCells) {\n                change.totalColumnIndices = summaryCells.map(function (summaryCell, index) {\n                  if (JSON.stringify(summaryCell) !== JSON.stringify(oldSummaryCells[index])) {\n                    return index;\n                  }\n\n                  return -1;\n                }).filter(function (index) {\n                  return index >= 0;\n                });\n              }\n\n              if (summaryCells.length) {\n                that._footerItems.push({\n                  rowType: \"totalFooter\",\n                  summaryCells: summaryCells\n                });\n              }\n            }\n\n            that.callBase(change);\n          },\n          _prepareUnsavedDataSelector: function (selector) {\n            var that = this;\n\n            if (recalculateWhileEditing(that)) {\n              var editingController = that.getController(\"editing\");\n\n              if (editingController) {\n                return function (data) {\n                  data = editingController.getUpdatedData(data);\n                  return selector(data);\n                };\n              }\n            }\n\n            return selector;\n          },\n          _prepareAggregateSelector: function (selector, aggregator) {\n            selector = this._prepareUnsavedDataSelector(selector);\n\n            if (\"avg\" === aggregator || \"sum\" === aggregator) {\n              return function (data) {\n                var value = selector(data);\n                return (0, _type.isDefined)(value) ? Number(value) : value;\n              };\n            }\n\n            return selector;\n          },\n          _getAggregates: function (summaryItems, remoteOperations) {\n            var that = this;\n            var columnsController = that.getController(\"columns\");\n            var calculateCustomSummary = that.option(\"summary.calculateCustomSummary\");\n            var commonSkipEmptyValues = that.option(\"summary.skipEmptyValues\");\n            return (0, _iterator.map)(summaryItems || [], function (summaryItem) {\n              var column = columnsController.columnOption(summaryItem.column);\n              var calculateCellValue = column && column.calculateCellValue ? column.calculateCellValue.bind(column) : (0, _data.compileGetter)(column ? column.dataField : summaryItem.column);\n              var aggregator = summaryItem.summaryType || \"count\";\n              var selector = summaryItem.column;\n              var skipEmptyValues = (0, _type.isDefined)(summaryItem.skipEmptyValues) ? summaryItem.skipEmptyValues : commonSkipEmptyValues;\n\n              if (remoteOperations) {\n                return {\n                  selector: summaryItem.column,\n                  summaryType: aggregator\n                };\n              } else {\n                selector = that._prepareAggregateSelector(calculateCellValue, aggregator);\n\n                if (\"custom\" === aggregator) {\n                  if (!calculateCustomSummary) {\n                    _ui2.default.log(\"E1026\");\n\n                    calculateCustomSummary = function () {};\n                  }\n\n                  var options = {\n                    component: that.component,\n                    name: summaryItem.name\n                  };\n                  calculateCustomSummary(options);\n                  options.summaryProcess = \"calculate\";\n                  aggregator = {\n                    seed: function (groupIndex) {\n                      options.summaryProcess = \"start\";\n                      options.totalValue = void 0;\n                      options.groupIndex = groupIndex;\n                      delete options.value;\n                      calculateCustomSummary(options);\n                      return options.totalValue;\n                    },\n                    step: function (totalValue, value) {\n                      options.summaryProcess = \"calculate\";\n                      options.totalValue = totalValue;\n                      options.value = value;\n                      calculateCustomSummary(options);\n                      return options.totalValue;\n                    },\n                    finalize: function (totalValue) {\n                      options.summaryProcess = \"finalize\";\n                      options.totalValue = totalValue;\n                      delete options.value;\n                      calculateCustomSummary(options);\n                      return options.totalValue;\n                    }\n                  };\n                }\n\n                return {\n                  selector: selector,\n                  aggregator: aggregator,\n                  skipEmptyValues: skipEmptyValues\n                };\n              }\n            });\n          },\n          _addSortInfo: function (sortByGroups, groupColumn, selector, sortOrder) {\n            if (groupColumn) {\n              var groupIndex = groupColumn.groupIndex;\n              sortOrder = sortOrder || groupColumn.sortOrder;\n\n              if ((0, _type.isDefined)(groupIndex)) {\n                sortByGroups[groupIndex] = sortByGroups[groupIndex] || [];\n                sortByGroups[groupIndex].push({\n                  selector: selector,\n                  desc: \"desc\" === sortOrder\n                });\n              }\n            }\n          },\n          _findSummaryItem: function (summaryItems, name) {\n            var summaryItemIndex = -1;\n\n            var getFullName = function (summaryItem) {\n              var summaryType = summaryItem.summaryType;\n              var column = summaryItem.column;\n              return summaryType && column && summaryType + \"_\" + column;\n            };\n\n            if ((0, _type.isDefined)(name)) {\n              (0, _iterator.each)(summaryItems || [], function (index) {\n                if (this.name === name || index === name || this.summaryType === name || this.column === name || getFullName(this) === name) {\n                  summaryItemIndex = index;\n                  return false;\n                }\n              });\n            }\n\n            return summaryItemIndex;\n          },\n          _getSummarySortByGroups: function (sortByGroupSummaryInfo, groupSummaryItems) {\n            var that = this;\n            var columnsController = that._columnsController;\n            var groupColumns = columnsController.getGroupColumns();\n            var sortByGroups = [];\n\n            if (!groupSummaryItems || !groupSummaryItems.length) {\n              return;\n            }\n\n            (0, _iterator.each)(sortByGroupSummaryInfo || [], function () {\n              var sortOrder = this.sortOrder;\n              var groupColumn = this.groupColumn;\n\n              var summaryItemIndex = that._findSummaryItem(groupSummaryItems, this.summaryItem);\n\n              if (summaryItemIndex < 0) {\n                return;\n              }\n\n              var selector = function (data) {\n                return getGroupAggregates(data)[summaryItemIndex];\n              };\n\n              if ((0, _type.isDefined)(groupColumn)) {\n                groupColumn = columnsController.columnOption(groupColumn);\n\n                that._addSortInfo(sortByGroups, groupColumn, selector, sortOrder);\n              } else {\n                (0, _iterator.each)(groupColumns, function (groupIndex, groupColumn) {\n                  that._addSortInfo(sortByGroups, groupColumn, selector, sortOrder);\n                });\n              }\n            });\n            return sortByGroups;\n          },\n          _createDataSourceAdapterCore: function (dataSource, remoteOperations) {\n            var that = this;\n            var dataSourceAdapter = this.callBase(dataSource, remoteOperations);\n            dataSourceAdapter.summaryGetter(function (currentRemoteOperations) {\n              return that._getSummaryOptions(currentRemoteOperations || remoteOperations);\n            });\n            return dataSourceAdapter;\n          },\n          _getSummaryOptions: function (remoteOperations) {\n            var that = this;\n            var groupSummaryItems = that.option(\"summary.groupItems\");\n            var totalSummaryItems = that.option(\"summary.totalItems\");\n            var sortByGroupSummaryInfo = that.option(\"sortByGroupSummaryInfo\");\n\n            var groupAggregates = that._getAggregates(groupSummaryItems, remoteOperations && remoteOperations.grouping && remoteOperations.summary);\n\n            var totalAggregates = that._getAggregates(totalSummaryItems, remoteOperations && remoteOperations.summary);\n\n            var sortByGroups = function () {\n              return that._getSummarySortByGroups(sortByGroupSummaryInfo, groupSummaryItems);\n            };\n\n            if (groupAggregates.length || totalAggregates.length) {\n              return {\n                groupAggregates: groupAggregates,\n                totalAggregates: totalAggregates,\n                sortByGroups: sortByGroups\n              };\n            }\n          },\n          publicMethods: function () {\n            var methods = this.callBase();\n            methods.push(\"getTotalSummaryValue\");\n            return methods;\n          },\n          getTotalSummaryValue: function (summaryItemName) {\n            var summaryItemIndex = this._findSummaryItem(this.option(\"summary.totalItems\"), summaryItemName);\n\n            var aggregates = this._dataSource.totalAggregates();\n\n            if (aggregates.length && summaryItemIndex > -1) {\n              return aggregates[summaryItemIndex];\n            }\n          },\n          optionChanged: function (args) {\n            if (\"summary\" === args.name || \"sortByGroupSummaryInfo\" === args.name) {\n              args.name = \"dataSource\";\n            }\n\n            this.callBase(args);\n          },\n          init: function () {\n            this._footerItems = [];\n            this.callBase();\n          },\n          footerItems: function () {\n            return this._footerItems;\n          }\n        };\n      }(),\n      editing: function () {\n        return {\n          _refreshSummary: function () {\n            if (recalculateWhileEditing(this) && !this.isSaving()) {\n              this._dataController.refresh({\n                load: true,\n                changesOnly: true\n              });\n            }\n          },\n          _addEditData: function (params) {\n            var result = this.callBase.apply(this, arguments);\n\n            if (params.type) {\n              this._refreshSummary();\n            }\n\n            return result;\n          },\n          _removeEditDataItem: function () {\n            var result = this.callBase.apply(this, arguments);\n\n            this._refreshSummary();\n\n            return result;\n          },\n          cancelEditData: function () {\n            var result = this.callBase.apply(this, arguments);\n\n            this._refreshSummary();\n\n            return result;\n          }\n        };\n      }()\n    },\n    views: {\n      rowsView: function () {\n        return {\n          _createRow: function (row) {\n            var $row = this.callBase(row);\n            row && $row.addClass(row.rowType === DATAGRID_GROUP_FOOTER_ROW_TYPE ? DATAGRID_GROUP_FOOTER_CLASS : \"\");\n            return $row;\n          },\n          _renderCells: function ($row, options) {\n            this.callBase.apply(this, arguments);\n\n            if (\"group\" === options.row.rowType && options.row.summaryCells && options.row.summaryCells.length) {\n              this._renderGroupSummaryCells($row, options);\n            }\n          },\n          _hasAlignByColumnSummaryItems: function (columnIndex, options) {\n            return !(0, _type.isDefined)(options.columns[columnIndex].groupIndex) && options.row.summaryCells[columnIndex].length;\n          },\n          _getAlignByColumnCellCount: function (groupCellColSpan, options) {\n            var alignByColumnCellCount = 0;\n\n            for (var i = 1; i < groupCellColSpan; i++) {\n              var columnIndex = options.row.summaryCells.length - i;\n              alignByColumnCellCount = this._hasAlignByColumnSummaryItems(columnIndex, options) ? i : alignByColumnCellCount;\n            }\n\n            return alignByColumnCellCount;\n          },\n          _renderGroupSummaryCells: function ($row, options) {\n            var $groupCell = $row.children().last();\n            var groupCellColSpan = Number($groupCell.attr(\"colSpan\")) || 1;\n\n            var alignByColumnCellCount = this._getAlignByColumnCellCount(groupCellColSpan, options);\n\n            this._renderGroupSummaryCellsCore($groupCell, options, groupCellColSpan, alignByColumnCellCount);\n          },\n          _renderGroupSummaryCellsCore: function ($groupCell, options, groupCellColSpan, alignByColumnCellCount) {\n            if (alignByColumnCellCount > 0) {\n              $groupCell.attr(\"colSpan\", groupCellColSpan - alignByColumnCellCount);\n\n              for (var i = 0; i < alignByColumnCellCount; i++) {\n                var columnIndex = options.columns.length - alignByColumnCellCount + i;\n\n                this._renderCell($groupCell.parent(), (0, _extend.extend)({\n                  column: options.columns[columnIndex],\n                  columnIndex: this._getSummaryCellIndex(columnIndex, options.columns)\n                }, options));\n              }\n            }\n          },\n          _getSummaryCellIndex: function (columnIndex) {\n            return columnIndex;\n          },\n          _getCellTemplate: function (options) {\n            if (!options.column.command && !(0, _type.isDefined)(options.column.groupIndex) && options.summaryItems && options.summaryItems.length) {\n              return renderSummaryCell;\n            } else {\n              return this.callBase(options);\n            }\n          },\n          _getCellOptions: function (options) {\n            var that = this;\n            var parameters = that.callBase(options);\n\n            if (options.row.summaryCells) {\n              return (0, _extend.extend)(parameters, getSummaryCellOptions(that, options));\n            } else {\n              return parameters;\n            }\n          }\n        };\n      }()\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"script"}