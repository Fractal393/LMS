{"ast":null,"code":"/**\r\n * DevExtreme (ui/editor/editor.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _element_data = require(\"../../core/element_data\");\n\nvar _element_data2 = _interopRequireDefault(_element_data);\n\nvar _callbacks = require(\"../../core/utils/callbacks\");\n\nvar _callbacks2 = _interopRequireDefault(_callbacks);\n\nvar _window = require(\"../../core/utils/window\");\n\nvar _window2 = _interopRequireDefault(_window);\n\nvar _utils = require(\"../../events/utils\");\n\nvar _position = require(\"../../core/utils/position\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _guid = require(\"../../core/guid\");\n\nvar _guid2 = _interopRequireDefault(_guid);\n\nvar _ui = require(\"../widget/ui.widget\");\n\nvar _ui2 = _interopRequireDefault(_ui);\n\nvar _overlay = require(\"../overlay\");\n\nvar _overlay2 = _interopRequireDefault(_overlay);\n\nvar _validation_engine = require(\"../validation_engine\");\n\nvar _validation_engine2 = _interopRequireDefault(_validation_engine);\n\nvar _events_engine = require(\"../../events/core/events_engine\");\n\nvar _events_engine2 = _interopRequireDefault(_events_engine);\n\nvar _string = require(\"../../core/utils/string\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar READONLY_STATE_CLASS = \"dx-state-readonly\";\nvar INVALID_CLASS = \"dx-invalid\";\nvar INVALID_MESSAGE = \"dx-invalid-message\";\nvar INVALID_MESSAGE_CONTENT = \"dx-invalid-message-content\";\nvar INVALID_MESSAGE_AUTO = \"dx-invalid-message-auto\";\nvar INVALID_MESSAGE_ALWAYS = \"dx-invalid-message-always\";\nvar DX_INVALID_BADGE_CLASS = \"dx-show-invalid-badge\";\nvar VALIDATION_TARGET = \"dx-validation-target\";\nvar VALIDATION_MESSAGE_MIN_WIDTH = 100;\nvar VALIDATION_STATUS_VALID = \"valid\";\nvar VALIDATION_STATUS_INVALID = \"invalid\";\nvar READONLY_NAMESPACE = \"editorReadOnly\";\n\nvar getValidationErrorMessage = function (validationErrors) {\n  var validationErrorMessage = \"\";\n\n  if (validationErrors) {\n    validationErrors.forEach(function (err) {\n      if (err.message) {\n        validationErrorMessage += (validationErrorMessage ? \"<br />\" : \"\") + (0, _string.encodeHtml)(err.message);\n      }\n    });\n  }\n\n  return validationErrorMessage;\n};\n\nvar Editor = _ui2.default.inherit({\n  ctor: function () {\n    this.showValidationMessageTimeout = null;\n    this.validationRequest = (0, _callbacks2.default)();\n    this.callBase.apply(this, arguments);\n  },\n  _createElement: function (element) {\n    this.callBase(element);\n    var $element = this.$element();\n\n    if ($element) {\n      _element_data2.default.data($element[0], VALIDATION_TARGET, this);\n    }\n  },\n  _initOptions: function (options) {\n    this.callBase.apply(this, arguments);\n    this.option(_validation_engine2.default.initValidationOptions(options));\n  },\n  _init: function () {\n    this.callBase();\n\n    this._options.cache(\"validationTooltipOptions\", this.option(\"validationTooltipOptions\"));\n\n    var $element = this.$element();\n    $element.addClass(DX_INVALID_BADGE_CLASS);\n  },\n  _getDefaultOptions: function () {\n    return (0, _extend.extend)(this.callBase(), {\n      value: null,\n      name: \"\",\n      onValueChanged: null,\n      readOnly: false,\n      isValid: true,\n      validationError: null,\n      validationErrors: null,\n      validationStatus: VALIDATION_STATUS_VALID,\n      validationMessageMode: \"auto\",\n      validationBoundary: void 0,\n      validationMessageOffset: {\n        h: 0,\n        v: 0\n      },\n      validationTooltipOptions: {}\n    });\n  },\n  _attachKeyboardEvents: function () {\n    if (!this.option(\"readOnly\")) {\n      this.callBase();\n    }\n  },\n  _setOptionsByReference: function () {\n    this.callBase();\n    (0, _extend.extend)(this._optionsByReference, {\n      validationError: true\n    });\n  },\n  _createValueChangeAction: function () {\n    this._valueChangeAction = this._createActionByOption(\"onValueChanged\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n  },\n  _suppressValueChangeAction: function () {\n    this._valueChangeActionSuppressed = true;\n  },\n  _resumeValueChangeAction: function () {\n    this._valueChangeActionSuppressed = false;\n  },\n  _initMarkup: function () {\n    this._toggleReadOnlyState();\n\n    this._setSubmitElementName(this.option(\"name\"));\n\n    this.callBase();\n\n    this._renderValidationState();\n  },\n  _raiseValueChangeAction: function (value, previousValue) {\n    if (!this._valueChangeAction) {\n      this._createValueChangeAction();\n    }\n\n    this._valueChangeAction(this._valueChangeArgs(value, previousValue));\n  },\n  _valueChangeArgs: function (value, previousValue) {\n    return {\n      value: value,\n      previousValue: previousValue,\n      event: this._valueChangeEventInstance\n    };\n  },\n  _saveValueChangeEvent: function (e) {\n    this._valueChangeEventInstance = e;\n  },\n  _focusInHandler: function (e) {\n    var _this = this;\n\n    var isValidationMessageShownOnFocus = \"auto\" === this.option(\"validationMessageMode\");\n\n    if (this._canValueBeChangedByClick() && isValidationMessageShownOnFocus) {\n      this._$validationMessage && this._$validationMessage.removeClass(INVALID_MESSAGE_AUTO);\n      clearTimeout(this.showValidationMessageTimeout);\n      this.showValidationMessageTimeout = setTimeout(function () {\n        return _this._$validationMessage && _this._$validationMessage.addClass(INVALID_MESSAGE_AUTO);\n      }, 150);\n    }\n\n    return this.callBase(e);\n  },\n  _canValueBeChangedByClick: function () {\n    return false;\n  },\n  _renderValidationState: function () {\n    var isValid = this.option(\"isValid\") && this.option(\"validationStatus\") !== VALIDATION_STATUS_INVALID;\n    var validationMessageMode = this.option(\"validationMessageMode\");\n    var $element = this.$element();\n    var validationErrors = this.option(\"validationErrors\");\n\n    if (!validationErrors && this.option(\"validationError\")) {\n      validationErrors = [this.option(\"validationError\")];\n    }\n\n    $element.toggleClass(INVALID_CLASS, !isValid);\n    this.setAria(VALIDATION_STATUS_INVALID, !isValid || void 0);\n\n    if (!_window2.default.hasWindow()) {\n      return;\n    }\n\n    if (this._$validationMessage) {\n      this._$validationMessage.remove();\n\n      this.setAria(\"describedby\", null);\n      this._$validationMessage = null;\n    }\n\n    var validationErrorMessage = getValidationErrorMessage(validationErrors);\n\n    if (!isValid && validationErrorMessage) {\n      this._$validationMessage = (0, _renderer2.default)(\"<div>\").addClass(INVALID_MESSAGE).html(validationErrorMessage).appendTo($element);\n\n      var validationTarget = this._getValidationMessageTarget();\n\n      this._validationMessage = this._createComponent(this._$validationMessage, _overlay2.default, (0, _extend.extend)({\n        integrationOptions: {},\n        templatesRenderAsynchronously: false,\n        target: validationTarget,\n        shading: false,\n        width: \"auto\",\n        height: \"auto\",\n        container: $element,\n        position: this._getValidationMessagePosition(\"below\"),\n        closeOnOutsideClick: false,\n        closeOnTargetScroll: false,\n        animation: null,\n        visible: true,\n        propagateOutsideClick: true,\n        _checkParentVisibility: false\n      }, this._options.cache(\"validationTooltipOptions\")));\n\n      this._$validationMessage.toggleClass(INVALID_MESSAGE_AUTO, \"auto\" === validationMessageMode).toggleClass(INVALID_MESSAGE_ALWAYS, \"always\" === validationMessageMode);\n\n      var messageId = \"dx-\" + new _guid2.default();\n\n      this._validationMessage.$content().addClass(INVALID_MESSAGE_CONTENT).attr(\"id\", messageId);\n\n      this.setAria(\"describedby\", messageId);\n\n      this._setValidationMessageMaxWidth();\n\n      this._bindInnerWidgetOptions(this._validationMessage, \"validationTooltipOptions\");\n    }\n  },\n  _setValidationMessageMaxWidth: function () {\n    if (!this._validationMessage) {\n      return;\n    }\n\n    if (0 === this._getValidationMessageTarget().outerWidth()) {\n      this._validationMessage.option(\"maxWidth\", \"100%\");\n\n      return;\n    }\n\n    var validationMessageMaxWidth = Math.max(VALIDATION_MESSAGE_MIN_WIDTH, this._getValidationMessageTarget().outerWidth());\n\n    this._validationMessage.option(\"maxWidth\", validationMessageMaxWidth);\n  },\n  _getValidationMessageTarget: function () {\n    return this.$element();\n  },\n  _getValidationMessagePosition: function (positionRequest) {\n    var rtlEnabled = this.option(\"rtlEnabled\");\n    var messagePositionSide = (0, _position.getDefaultAlignment)(rtlEnabled);\n    var messageOriginalOffset = this.option(\"validationMessageOffset\");\n    var messageOffset = {\n      h: messageOriginalOffset.h,\n      v: messageOriginalOffset.v\n    };\n    var verticalPositions = \"below\" === positionRequest ? [\" top\", \" bottom\"] : [\" bottom\", \" top\"];\n\n    if (rtlEnabled) {\n      messageOffset.h = -messageOffset.h;\n    }\n\n    if (\"below\" !== positionRequest) {\n      messageOffset.v = -messageOffset.v;\n    }\n\n    return {\n      offset: messageOffset,\n      boundary: this.option(\"validationBoundary\"),\n      my: messagePositionSide + verticalPositions[0],\n      at: messagePositionSide + verticalPositions[1],\n      collision: \"none flip\"\n    };\n  },\n  _toggleReadOnlyState: function () {\n    var readOnly = this.option(\"readOnly\");\n\n    this._toggleBackspaceHandler(readOnly);\n\n    this.$element().toggleClass(READONLY_STATE_CLASS, !!readOnly);\n    this.setAria(\"readonly\", readOnly || void 0);\n  },\n  _toggleBackspaceHandler: function (isReadOnly) {\n    var $eventTarget = this._keyboardEventBindingTarget();\n\n    var eventName = (0, _utils.addNamespace)(\"keydown\", READONLY_NAMESPACE);\n\n    _events_engine2.default.off($eventTarget, eventName);\n\n    if (isReadOnly) {\n      _events_engine2.default.on($eventTarget, eventName, function (e) {\n        if (\"backspace\" === (0, _utils.normalizeKeyName)(e)) {\n          e.preventDefault();\n        }\n      });\n    }\n  },\n  _dispose: function () {\n    var element = this.$element()[0];\n\n    _element_data2.default.data(element, VALIDATION_TARGET, null);\n\n    clearTimeout(this.showValidationMessageTimeout);\n    this.callBase();\n  },\n  _setSubmitElementName: function (name) {\n    var $submitElement = this._getSubmitElement();\n\n    if (!$submitElement) {\n      return;\n    }\n\n    if (name.length > 0) {\n      $submitElement.attr(\"name\", name);\n    } else {\n      $submitElement.removeAttr(\"name\");\n    }\n  },\n  _getSubmitElement: function () {\n    return null;\n  },\n  _optionChanged: function (args) {\n    switch (args.name) {\n      case \"onValueChanged\":\n        this._createValueChangeAction();\n\n        break;\n\n      case \"isValid\":\n      case \"validationError\":\n        this.option(_validation_engine2.default.synchronizeValidationOptions(args, this.option()));\n        break;\n\n      case \"validationErrors\":\n      case \"validationStatus\":\n        this.option(_validation_engine2.default.synchronizeValidationOptions(args, this.option()));\n\n        this._renderValidationState();\n\n        break;\n\n      case \"validationBoundary\":\n      case \"validationMessageMode\":\n        this._renderValidationState();\n\n        break;\n\n      case \"validationTooltipOptions\":\n        this._innerWidgetOptionChanged(this._validationMessage, args);\n\n        break;\n\n      case \"readOnly\":\n        this._toggleReadOnlyState();\n\n        this._refreshFocusState();\n\n        break;\n\n      case \"value\":\n        if (args.value != args.previousValue) {\n          this.validationRequest.fire({\n            value: args.value,\n            editor: this\n          });\n        }\n\n        if (!this._valueChangeActionSuppressed) {\n          this._raiseValueChangeAction(args.value, args.previousValue);\n\n          this._saveValueChangeEvent(void 0);\n        }\n\n        break;\n\n      case \"width\":\n        this.callBase(args);\n\n        this._setValidationMessageMaxWidth();\n\n        break;\n\n      case \"name\":\n        this._setSubmitElementName(args.value);\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  reset: function () {\n    var defaultOptions = this._getDefaultOptions();\n\n    this.option(\"value\", defaultOptions.value);\n  }\n});\n\nmodule.exports = Editor;","map":null,"metadata":{},"sourceType":"script"}