{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * PdfTextElement.ts class for EJ2-PDF\n */\n\n\nimport { PdfLayoutElement } from './../figures/layout-element';\nimport { PdfBrush } from './../brushes/pdf-brush';\nimport { PdfFont } from './../fonts/pdf-font';\nimport { PdfStandardFont } from './../fonts/pdf-standard-font';\nimport { PdfPen } from './../pdf-pen';\nimport { PdfLayoutParams } from './../figures/base/element-layouter';\nimport { TextLayouter } from './base/text-layouter';\nimport { PdfSolidBrush } from './../brushes/pdf-solid-brush';\nimport { PdfColor } from './../pdf-color';\nimport { RectangleF, SizeF, PointF } from './../../drawing/pdf-drawing';\nimport { PdfLayoutFormat } from './base/element-layouter';\nimport { PdfStringLayouter } from './../fonts/string-layouter';\nimport { PdfTextAlignment } from './../enum';\n/**\n * `PdfTextElement` class represents the text area with the ability to span several pages\n * and inherited from the 'PdfLayoutElement' class.\n * @private\n */\n\nvar PdfTextElement =\n/** @class */\nfunction (_super) {\n  __extends(PdfTextElement, _super);\n\n  function PdfTextElement(arg1, arg2, arg3, arg4, arg5) {\n    var _this = _super.call(this) || this; // Fields\n\n    /**\n     * `Text` data.\n     * @private\n     */\n\n\n    _this.content = '';\n    /**\n     * `Value` of text data.\n     * @private\n     */\n\n    _this.elementValue = '';\n    /**\n     * indicate whether the drawText with PointF overload is called or not.\n     * @default false\n     * @private\n     */\n\n    _this.hasPointOverload = false;\n    /**\n     * indicate whether the PdfGridCell value is `PdfTextElement`\n     * @default false\n     * @private\n     */\n\n    _this.isPdfTextElement = false;\n\n    if (typeof arg1 === 'undefined') {//\n    } else if (typeof arg1 === 'string' && typeof arg2 === 'undefined') {\n      _this.content = arg1;\n      _this.elementValue = arg1;\n    } else if (typeof arg1 === 'string' && arg2 instanceof PdfFont && typeof arg3 === 'undefined') {\n      _this.content = arg1;\n      _this.elementValue = arg1;\n      _this.pdfFont = arg2;\n    } else if (typeof arg1 === 'string' && arg2 instanceof PdfFont && arg3 instanceof PdfPen && typeof arg4 === 'undefined') {\n      _this.content = arg1;\n      _this.elementValue = arg1;\n      _this.pdfFont = arg2;\n      _this.pdfPen = arg3;\n    } else if (typeof arg1 === 'string' && arg2 instanceof PdfFont && arg3 instanceof PdfBrush && typeof arg4 === 'undefined') {\n      _this.content = arg1;\n      _this.elementValue = arg1;\n      _this.pdfFont = arg2;\n      _this.pdfBrush = arg3;\n    } else {\n      _this.content = arg1;\n      _this.elementValue = arg1;\n      _this.pdfFont = arg2;\n      _this.pdfPen = arg3;\n      _this.pdfBrush = arg4;\n      _this.format = arg5;\n    }\n\n    return _this;\n  }\n\n  Object.defineProperty(PdfTextElement.prototype, \"text\", {\n    // Properties\n\n    /**\n     * Gets or sets a value indicating the `text` that should be printed.\n     * ```typescript\n     * // create a new PDF document.\n     * let document : PdfDocument = new PdfDocument();\n     * // add a page to the document.\n     * let page1 : PdfPage = document.pages.add();\n     * // create the font\n     * let font : PdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 12);\n     * // create the Text Web Link\n     * let textLink : PdfTextWebLink = new PdfTextWebLink();\n     * // set the hyperlink\n     * textLink.url = 'http://www.google.com';\n     * //\n     * // set the link text\n     * textLink.text = 'Google';\n     * //\n     * // set the font\n     * textLink.font = font;\n     * // draw the hyperlink in PDF page\n     * textLink.draw(page1, new PointF(10, 40));\n     * // save the document.\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this.content;\n    },\n    set: function (value) {\n      this.elementValue = value;\n      this.content = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTextElement.prototype, \"value\", {\n    //get value\n\n    /**\n     * Gets or sets a `value` indicating the text that should be printed.\n     * @private\n     */\n    get: function () {\n      return this.elementValue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTextElement.prototype, \"pen\", {\n    //get pen\n\n    /**\n     * Gets or sets a `PdfPen` that determines the color, width, and style of the text\n     * @private\n     */\n    get: function () {\n      return this.pdfPen;\n    },\n    //Set pen value\n    set: function (value) {\n      this.pdfPen = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTextElement.prototype, \"brush\", {\n    //get brush\n\n    /**\n     * Gets or sets the `PdfBrush` that will be used to draw the text with color and texture.\n     * @private\n     */\n    get: function () {\n      return this.pdfBrush;\n    },\n    //Set brush value\n    set: function (value) {\n      this.pdfBrush = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTextElement.prototype, \"font\", {\n    //get font\n\n    /**\n     * Gets or sets a `PdfFont` that defines the text format.\n     * ```typescript\n     * // create a new PDF document.\n     * let document : PdfDocument = new PdfDocument();\n     * // add a page to the document.\n     * let page1 : PdfPage = document.pages.add();\n     * // create the font\n     * let font : PdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 12);\n     * // create the Text Web Link\n     * let textLink : PdfTextWebLink = new PdfTextWebLink();\n     * // set the hyperlink\n     * textLink.url = 'http://www.google.com';\n     * // set the link text\n     * textLink.text = 'Google';\n     * //\n     * // set the font\n     * textLink.font = font;\n     * //\n     * // draw the hyperlink in PDF page\n     * textLink.draw(page1, new PointF(10, 40));\n     * // save the document.\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this.pdfFont;\n    },\n    set: function (value) {\n      this.pdfFont = value;\n\n      if (this.pdfFont instanceof PdfStandardFont && this.content != null) {\n        this.elementValue = PdfStandardFont.convert(this.content);\n      } else {\n        this.elementValue = this.content;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTextElement.prototype, \"stringFormat\", {\n    /**\n     * Gets or sets the `PdfStringFormat` that will be used to set the string format\n     * @private\n     */\n    get: function () {\n      return this.format;\n    },\n    set: function (value) {\n      this.format = value;\n    },\n    enumerable: true,\n    configurable: true\n  }); // Implementation\n\n  /**\n   * Gets a `brush` for drawing.\n   * @private\n   */\n\n  PdfTextElement.prototype.getBrush = function () {\n    return this.pdfBrush == null || typeof this.pdfBrush === 'undefined' ? new PdfSolidBrush(new PdfColor(0, 0, 0)) : this.pdfBrush;\n  }; // /**\n  //  * `Draws` an element on the Graphics.\n  //  * @private\n  //  */\n  // public drawInternal(graphics : PdfGraphics) : void {\n  //     graphics.drawString(this.elementValue, this.pdfFont, this.pdfPen, this.getBrush(), 0, 0, this.stringFormat);\n  // }\n\n  /**\n   * `Layouts` the element.\n   * @private\n   */\n\n\n  PdfTextElement.prototype.layout = function (param) {\n    var layouter = new TextLayouter(this);\n    var result = layouter.layout(param);\n    return result;\n  };\n\n  PdfTextElement.prototype.drawText = function (arg2, arg3, arg4, arg5) {\n    if (arg3 instanceof PointF && typeof arg3.width === 'undefined' && typeof arg4 === 'undefined') {\n      this.hasPointOverload = true;\n      return this.drawText(arg2, arg3.x, arg3.y);\n    } else if (typeof arg3 === 'number' && typeof arg4 === 'number' && typeof arg5 === 'undefined') {\n      this.hasPointOverload = true;\n      return this.drawText(arg2, arg3, arg4, null);\n    } else if (arg3 instanceof RectangleF && typeof arg3.width !== 'undefined' && typeof arg4 === 'undefined') {\n      return this.drawText(arg2, arg3, null);\n    } else if (arg3 instanceof PointF && typeof arg3.width === 'undefined' && arg4 instanceof PdfLayoutFormat) {\n      this.hasPointOverload = true;\n      return this.drawText(arg2, arg3.x, arg3.y, arg4);\n    } else if (typeof arg3 === 'number' && typeof arg4 === 'number' && (arg5 instanceof PdfLayoutFormat || arg5 == null)) {\n      this.hasPointOverload = true;\n      var width = arg2.graphics.clientSize.width - arg3;\n      var layoutRectangle = new RectangleF(arg3, arg4, width, 0);\n      return this.drawText(arg2, layoutRectangle, arg5);\n    } else if (arg3 instanceof RectangleF && typeof arg3.width !== 'undefined' && typeof arg4 === 'boolean') {\n      return this.drawText(arg2, arg3, null);\n    } else {\n      var layout = new PdfStringLayouter();\n\n      if (this.hasPointOverload) {\n        var stringLayoutResult = layout.layout(this.value, this.font, this.stringFormat, new SizeF(arg2.graphics.clientSize.width - arg3.x, 0), true, arg2.graphics.clientSize);\n        var layoutResult = void 0;\n        var param = new PdfLayoutParams();\n        var temparg3 = arg3;\n        var temparg4 = arg4;\n        param.page = arg2;\n        var previousPage = arg2;\n        param.bounds = temparg3;\n        param.format = temparg4 != null ? temparg4 : new PdfLayoutFormat();\n\n        if (stringLayoutResult.lines.length > 1) {\n          this.text = stringLayoutResult.layoutLines[0].text;\n\n          if (param.bounds.y <= param.page.graphics.clientSize.height) {\n            var previousPosition = new PointF(param.bounds.x, param.bounds.y);\n            layoutResult = this.layout(param);\n            var bounds = new RectangleF(0, layoutResult.bounds.y + stringLayoutResult.lineHeight, arg2.graphics.clientSize.width, stringLayoutResult.lineHeight);\n            var isPaginate = false;\n\n            for (var i = 1; i < stringLayoutResult.lines.length; i++) {\n              param.page = layoutResult.page;\n              param.bounds = new RectangleF(new PointF(bounds.x, bounds.y), new SizeF(bounds.width, bounds.height));\n              this.text = stringLayoutResult.layoutLines[i].text;\n\n              if (bounds.y + stringLayoutResult.lineHeight > layoutResult.page.graphics.clientSize.height) {\n                isPaginate = true;\n                param.page = param.page.graphics.getNextPage();\n\n                if (previousPosition.y > layoutResult.page.graphics.clientSize.height - layoutResult.bounds.height) {\n                  bounds = new RectangleF(0, layoutResult.bounds.height, layoutResult.page.graphics.clientSize.width, stringLayoutResult.lineHeight);\n                } else {\n                  bounds = new RectangleF(0, 0, layoutResult.page.graphics.clientSize.width, stringLayoutResult.lineHeight);\n                }\n\n                param.bounds = bounds;\n              }\n\n              layoutResult = this.layout(param);\n\n              if (i !== stringLayoutResult.lines.length - 1) {\n                bounds = new RectangleF(0, layoutResult.bounds.y + stringLayoutResult.lineHeight, layoutResult.page.graphics.clientSize.width, stringLayoutResult.lineHeight);\n              } else {\n                var lineWidth = this.font.measureString(this.text, this.format).width;\n                layoutResult = this.calculateResultBounds(layoutResult, lineWidth, layoutResult.page.graphics.clientSize.width, 0);\n              }\n            }\n          }\n\n          return layoutResult;\n        } else {\n          var lineSize = this.font.measureString(this.text, this.format);\n\n          if (param.bounds.y <= param.page.graphics.clientSize.height) {\n            layoutResult = this.layout(param);\n            layoutResult = this.calculateResultBounds(layoutResult, lineSize.width, layoutResult.page.graphics.clientSize.width, 0);\n          }\n\n          return layoutResult;\n        }\n      } else {\n        var layoutResult = layout.layout(this.value, this.font, this.stringFormat, new SizeF(arg3.width, 0), false, arg2.graphics.clientSize);\n        var result = void 0;\n        var param = new PdfLayoutParams();\n        var temparg3 = arg3;\n        var temparg4 = arg4;\n        param.page = arg2;\n        param.bounds = temparg3;\n        param.format = temparg4 != null ? temparg4 : new PdfLayoutFormat();\n\n        if (layoutResult.lines.length > 1) {\n          this.text = layoutResult.layoutLines[0].text;\n\n          if (param.bounds.y <= param.page.graphics.clientSize.height) {\n            var previousPosition = new PointF(param.bounds.x, param.bounds.y);\n            result = this.layout(param);\n            var bounds = new RectangleF(temparg3.x, result.bounds.y + layoutResult.lineHeight, temparg3.width, layoutResult.lineHeight);\n            var isPaginate = false;\n\n            for (var i = 1; i < layoutResult.lines.length; i++) {\n              param.page = result.page;\n              param.bounds = new RectangleF(bounds.x, bounds.y, bounds.width, bounds.height);\n              this.text = layoutResult.layoutLines[i].text;\n\n              if (bounds.y + layoutResult.lineHeight > result.page.graphics.clientSize.height) {\n                isPaginate = true;\n                param.page = param.page.graphics.getNextPage();\n\n                if (previousPosition.y > result.page.graphics.clientSize.height - result.bounds.height) {\n                  bounds = new RectangleF(temparg3.x, layoutResult.lineHeight, temparg3.width, layoutResult.lineHeight);\n                } else {\n                  bounds = new RectangleF(temparg3.x, 0, temparg3.width, layoutResult.lineHeight);\n                }\n\n                param.bounds = bounds;\n              }\n\n              result = this.layout(param);\n\n              if (i !== layoutResult.lines.length - 1) {\n                bounds = new RectangleF(temparg3.x, result.bounds.y + layoutResult.lineHeight, temparg3.width, layoutResult.lineHeight);\n              } else {\n                var lineWidth = this.font.measureString(this.text, this.format).width;\n                result = this.calculateResultBounds(result, lineWidth, temparg3.width, temparg3.x);\n              }\n            }\n          }\n\n          return result;\n        } else {\n          var lineSize = this.font.measureString(this.text, this.format);\n\n          if (param.bounds.y <= param.page.graphics.clientSize.height) {\n            result = this.layout(param);\n            result = this.calculateResultBounds(result, lineSize.width, temparg3.width, temparg3.x);\n          }\n\n          return result;\n        }\n      }\n    }\n  };\n\n  PdfTextElement.prototype.calculateResultBounds = function (result, lineWidth, maximumWidth, startPosition) {\n    var shift = 0;\n\n    if (this.stringFormat != null && typeof this.stringFormat !== 'undefined' && this.stringFormat.alignment === PdfTextAlignment.Center) {\n      result.bounds.x = startPosition + (maximumWidth - lineWidth) / 2;\n      result.bounds.width = lineWidth;\n    } else if (this.stringFormat != null && typeof this.stringFormat !== 'undefined' && this.stringFormat.alignment === PdfTextAlignment.Right) {\n      result.bounds.x = startPosition + (maximumWidth - lineWidth);\n      result.bounds.width = lineWidth;\n    } else if (this.stringFormat != null && typeof this.stringFormat !== 'undefined' && this.stringFormat.alignment === PdfTextAlignment.Justify) {\n      result.bounds.x = startPosition;\n      result.bounds.width = maximumWidth;\n    } else {\n      result.bounds.width = startPosition;\n      result.bounds.width = lineWidth;\n    }\n\n    return result;\n  };\n\n  return PdfTextElement;\n}(PdfLayoutElement);\n\nexport { PdfTextElement };","map":null,"metadata":{},"sourceType":"module"}