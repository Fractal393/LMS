{"ast":null,"code":"/**\r\n * DevExtreme (ui/drop_down_button.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _ui = require(\"./widget/ui.widget\");\n\nvar _ui2 = _interopRequireDefault(_ui);\n\nvar _function_template = require(\"../core/templates/function_template\");\n\nvar _component_registrator = require(\"../core/component_registrator\");\n\nvar _component_registrator2 = _interopRequireDefault(_component_registrator);\n\nvar _button_group = require(\"./button_group\");\n\nvar _button_group2 = _interopRequireDefault(_button_group);\n\nvar _popup = require(\"./popup\");\n\nvar _popup2 = _interopRequireDefault(_popup);\n\nvar _list = require(\"./list\");\n\nvar _list2 = _interopRequireDefault(_list);\n\nvar _data = require(\"../core/utils/data\");\n\nvar _window = require(\"../core/utils/window\");\n\nvar _window2 = _interopRequireDefault(_window);\n\nvar _dom = require(\"../core/utils/dom\");\n\nvar _dom2 = _interopRequireDefault(_dom);\n\nvar _icon = require(\"../core/utils/icon\");\n\nvar _data_helper = require(\"../data_helper\");\n\nvar _data_helper2 = _interopRequireDefault(_data_helper);\n\nvar _data_source = require(\"../data/data_source/data_source\");\n\nvar _array_store = require(\"../data/array_store\");\n\nvar _array_store2 = _interopRequireDefault(_array_store);\n\nvar _deferred = require(\"../core/utils/deferred\");\n\nvar _extend = require(\"../core/utils/extend\");\n\nvar _type = require(\"../core/utils/type\");\n\nvar _common = require(\"../core/utils/common\");\n\nvar _guid = require(\"../core/guid\");\n\nvar _guid2 = _interopRequireDefault(_guid);\n\nvar _message = require(\"../localization/message\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar DROP_DOWN_BUTTON_CLASS = \"dx-dropdownbutton\";\nvar DROP_DOWN_BUTTON_CONTENT = \"dx-dropdownbutton-content\";\nvar DROP_DOWN_BUTTON_ACTION_CLASS = \"dx-dropdownbutton-action\";\nvar DROP_DOWN_BUTTON_TOGGLE_CLASS = \"dx-dropdownbutton-toggle\";\nvar DROP_DOWN_BUTTON_HAS_ARROW_CLASS = \"dx-dropdownbutton-has-arrow\";\nvar DROP_DOWN_BUTTON_POPUP_WRAPPER_CLASS = \"dx-dropdownbutton-popup-wrapper\";\nvar DX_BUTTON_TEXT_CLASS = \"dx-button-text\";\nvar DX_ICON_RIGHT_CLASS = \"dx-icon-right\";\n\nvar DropDownButton = _ui2.default.inherit({\n  _getDefaultOptions: function () {\n    return (0, _extend.extend)(this.callBase(), {\n      itemTemplate: \"item\",\n      keyExpr: \"this\",\n      displayExpr: \"this\",\n      selectedItem: null,\n      selectedItemKey: null,\n      stylingMode: \"outlined\",\n      deferRendering: true,\n      noDataText: (0, _message.format)(\"dxCollectionWidget-noDataText\"),\n      useSelectMode: false,\n      splitButton: false,\n      showArrowIcon: true,\n      text: \"\",\n      icon: void 0,\n      onButtonClick: null,\n      onSelectionChanged: null,\n      onItemClick: null,\n      opened: false,\n      items: null,\n      dataSource: null,\n      focusStateEnabled: true,\n      hoverStateEnabled: true,\n      dropDownOptions: {},\n      dropDownContentTemplate: \"content\",\n      wrapItemText: false,\n      grouped: false,\n      groupTemplate: \"group\",\n      buttonGroupOptions: {}\n    });\n  },\n  _setOptionsByReference: function () {\n    this.callBase();\n    (0, _extend.extend)(this._optionsByReference, {\n      selectedItem: true\n    });\n  },\n  _init: function () {\n    this.callBase();\n\n    this._createItemClickAction();\n\n    this._createActionClickAction();\n\n    this._createSelectionChangedAction();\n\n    this._initDataSource();\n\n    this._compileKeyGetter();\n\n    this._compileDisplayGetter();\n\n    this._itemsToDataSource();\n\n    this._options.cache(\"buttonGroupOptions\", this.option(\"buttonGroupOptions\"));\n\n    this._options.cache(\"dropDownOptions\", this.option(\"dropDownOptions\"));\n  },\n  _initTemplates: function () {\n    var _this = this;\n\n    this._templateManager.addDefaultTemplates({\n      content: new _function_template.FunctionTemplate(function (options) {\n        var $popupContent = (0, _renderer2.default)(options.container);\n        var $listContainer = (0, _renderer2.default)(\"<div>\").appendTo($popupContent);\n        _this._list = _this._createComponent($listContainer, _list2.default, _this._listOptions());\n\n        _this._list.registerKeyHandler(\"escape\", _this._escHandler.bind(_this));\n\n        _this._list.registerKeyHandler(\"tab\", _this._escHandler.bind(_this));\n\n        _this._list.registerKeyHandler(\"leftArrow\", _this._escHandler.bind(_this));\n\n        _this._list.registerKeyHandler(\"rightArrow\", _this._escHandler.bind(_this));\n      })\n    });\n\n    this.callBase();\n  },\n  _itemsToDataSource: function () {\n    if (!this._dataSource) {\n      this._dataSource = new _data_source.DataSource({\n        store: new _array_store2.default(this.option(\"items\")),\n        pageSize: 0\n      });\n    }\n  },\n  _getKey: function () {\n    var _this$_dataSource;\n\n    var keyExpr = this.option(\"keyExpr\");\n    var storeKey = null === (_this$_dataSource = this._dataSource) || void 0 === _this$_dataSource ? void 0 : _this$_dataSource.key();\n    return (0, _type.isDefined)(storeKey) && (!(0, _type.isDefined)(keyExpr) || \"this\" === keyExpr) ? storeKey : keyExpr;\n  },\n  _compileKeyGetter: function () {\n    this._keyGetter = (0, _data.compileGetter)(this._getKey());\n  },\n  _compileDisplayGetter: function () {\n    this._displayGetter = (0, _data.compileGetter)(this.option(\"displayExpr\"));\n  },\n  _initMarkup: function () {\n    this.callBase();\n    this.$element().addClass(DROP_DOWN_BUTTON_CLASS);\n\n    this._renderButtonGroup();\n\n    this._updateArrowClass();\n\n    this._loadSelectedItem().done(this._updateActionButton.bind(this));\n  },\n  _render: function () {\n    if (!this.option(\"deferRendering\") || this.option(\"opened\")) {\n      this._renderPopup();\n    }\n\n    this.callBase();\n  },\n  _renderContentImpl: function () {\n    if (this._popup) {\n      this._renderPopupContent();\n    }\n\n    return this.callBase();\n  },\n  _loadSelectedItem: function () {\n    var d = new _deferred.Deferred();\n\n    if (this._list) {\n      var cachedResult = this.option(\"useSelectMode\") ? this._list.option(\"selectedItem\") : this._lastSelectedItemData;\n      return d.resolve(cachedResult);\n    }\n\n    this._lastSelectedItemData = void 0;\n    var selectedItemKey = this.option(\"selectedItemKey\");\n\n    this._loadSingle(this._getKey(), selectedItemKey).done(d.resolve).fail(function () {\n      d.resolve(null);\n    });\n\n    return d.promise();\n  },\n  _createActionClickAction: function () {\n    this._actionClickAction = this._createActionByOption(\"onButtonClick\");\n  },\n  _createSelectionChangedAction: function () {\n    this._selectionChangedAction = this._createActionByOption(\"onSelectionChanged\");\n  },\n  _createItemClickAction: function () {\n    this._itemClickAction = this._createActionByOption(\"onItemClick\");\n  },\n  _fireSelectionChangedAction: function (_ref) {\n    var previousValue = _ref.previousValue,\n        value = _ref.value;\n\n    this._selectionChangedAction({\n      item: value,\n      previousItem: previousValue\n    });\n  },\n  _fireItemClickAction: function (_ref2) {\n    var event = _ref2.event,\n        itemElement = _ref2.itemElement,\n        itemData = _ref2.itemData;\n    return this._itemClickAction({\n      event: event,\n      itemElement: itemElement,\n      itemData: this._actionItem || itemData\n    });\n  },\n  _actionButtonConfig: function () {\n    return {\n      text: this.option(\"text\"),\n      icon: this.option(\"icon\"),\n      elementAttr: {\n        \"class\": DROP_DOWN_BUTTON_ACTION_CLASS\n      }\n    };\n  },\n  _getButtonGroupItems: function () {\n    var items = [];\n    items.push(this._actionButtonConfig());\n\n    if (this.option(\"splitButton\")) {\n      items.push({\n        icon: \"spindown\",\n        elementAttr: {\n          \"class\": DROP_DOWN_BUTTON_TOGGLE_CLASS\n        }\n      });\n    }\n\n    return items;\n  },\n  _buttonGroupItemClick: function (_ref3) {\n    var event = _ref3.event,\n        itemData = _ref3.itemData;\n    var isActionButton = itemData.elementAttr.class === DROP_DOWN_BUTTON_ACTION_CLASS;\n    var isToggleButton = itemData.elementAttr.class === DROP_DOWN_BUTTON_TOGGLE_CLASS;\n\n    if (isToggleButton) {\n      this.toggle();\n    } else {\n      if (isActionButton) {\n        this._actionClickAction({\n          event: event,\n          selectedItem: this.option(\"selectedItem\")\n        });\n\n        if (!this.option(\"splitButton\")) {\n          this.toggle();\n        }\n      }\n    }\n  },\n  _buttonGroupOptions: function () {\n    var _this2 = this;\n\n    return (0, _extend.extend)({\n      items: this._getButtonGroupItems(),\n      focusStateEnabled: this.option(\"focusStateEnabled\"),\n      hoverStateEnabled: this.option(\"hoverStateEnabled\"),\n      onItemClick: this._buttonGroupItemClick.bind(this),\n      width: \"100%\",\n      height: \"100%\",\n      stylingMode: this.option(\"stylingMode\"),\n      selectionMode: \"none\",\n      buttonTemplate: function (_ref4, buttonContent) {\n        var text = _ref4.text,\n            icon = _ref4.icon;\n\n        if (_this2.option(\"splitButton\") || !_this2.option(\"showArrowIcon\")) {\n          return \"content\";\n        }\n\n        var $firstIcon = (0, _icon.getImageContainer)(icon);\n        var $textContainer = text ? (0, _renderer2.default)(\"<span>\").text(text).addClass(DX_BUTTON_TEXT_CLASS) : void 0;\n        var $secondIcon = (0, _icon.getImageContainer)(\"spindown\").addClass(DX_ICON_RIGHT_CLASS);\n        (0, _renderer2.default)(buttonContent).append($firstIcon, $textContainer, $secondIcon);\n      }\n    }, this._options.cache(\"buttonGroupOptions\"));\n  },\n  _renderPopupContent: function () {\n    var $content = this._popup.$content();\n\n    var template = this._getTemplateByOption(\"dropDownContentTemplate\");\n\n    $content.empty();\n    this._popupContentId = \"dx-\" + new _guid2.default();\n    this.setAria(\"id\", this._popupContentId, $content);\n    return template.render({\n      container: _dom2.default.getPublicElement($content),\n      model: this.option(\"items\") || this._dataSource\n    });\n  },\n  _popupOptions: function () {\n    var _this3 = this;\n\n    var horizontalAlignment = this.option(\"rtlEnabled\") ? \"right\" : \"left\";\n    return (0, _extend.extend)({\n      dragEnabled: false,\n      focusStateEnabled: false,\n      deferRendering: this.option(\"deferRendering\"),\n      minWidth: function () {\n        if (!_window2.default.hasWindow()) {\n          return;\n        }\n\n        return _this3.$element().outerWidth();\n      },\n      closeOnOutsideClick: function (e) {\n        var $element = _this3.$element();\n\n        var $buttonClicked = (0, _renderer2.default)(e.target).closest(\".\".concat(DROP_DOWN_BUTTON_CLASS));\n        return !$buttonClicked.is($element);\n      },\n      showTitle: false,\n      animation: {\n        show: {\n          type: \"fade\",\n          duration: 0,\n          from: 0,\n          to: 1\n        },\n        hide: {\n          type: \"fade\",\n          duration: 400,\n          from: 1,\n          to: 0\n        }\n      },\n      width: \"auto\",\n      height: \"auto\",\n      shading: false,\n      position: {\n        of: this.$element(),\n        collision: \"flipfit\",\n        my: \"top \" + horizontalAlignment,\n        at: \"bottom \" + horizontalAlignment\n      }\n    }, this._options.cache(\"dropDownOptions\"), {\n      visible: this.option(\"opened\")\n    });\n  },\n  _listOptions: function () {\n    var _this4 = this;\n\n    var selectedItemKey = this.option(\"selectedItemKey\");\n    var useSelectMode = this.option(\"useSelectMode\");\n    return {\n      selectionMode: useSelectMode ? \"single\" : \"none\",\n      wrapItemText: this.option(\"wrapItemText\"),\n      focusStateEnabled: this.option(\"focusStateEnabled\"),\n      hoverStateEnabled: this.option(\"hoverStateEnabled\"),\n      showItemDataTitle: true,\n      onContentReady: function () {\n        return _this4._fireContentReadyAction();\n      },\n      selectedItemKeys: selectedItemKey && useSelectMode ? [selectedItemKey] : [],\n      grouped: this.option(\"grouped\"),\n      groupTemplate: this.option(\"groupTemplate\"),\n      keyExpr: this._getKey(),\n      noDataText: this.option(\"noDataText\"),\n      displayExpr: this.option(\"displayExpr\"),\n      itemTemplate: this.option(\"itemTemplate\"),\n      items: this.option(\"items\"),\n      dataSource: this._dataSource,\n      onItemClick: function (e) {\n        if (!_this4.option(\"useSelectMode\")) {\n          _this4._lastSelectedItemData = e.itemData;\n        }\n\n        _this4.option(\"selectedItemKey\", _this4._keyGetter(e.itemData));\n\n        var actionResult = _this4._fireItemClickAction(e);\n\n        if (false !== actionResult) {\n          _this4.toggle(false);\n\n          _this4._buttonGroup.focus();\n        }\n      }\n    };\n  },\n  _upDownKeyHandler: function () {\n    if (this._popup && this._popup.option(\"visible\") && this._list) {\n      this._list.focus();\n    } else {\n      this.open();\n    }\n  },\n  _escHandler: function () {\n    this.close();\n\n    this._buttonGroup.focus();\n  },\n  _renderPopup: function () {\n    var $popup = (0, _renderer2.default)(\"<div>\");\n    this.$element().append($popup);\n    this._popup = this._createComponent($popup, _popup2.default, this._popupOptions());\n\n    this._popup.$content().addClass(DROP_DOWN_BUTTON_CONTENT);\n\n    this._popup._wrapper().addClass(DROP_DOWN_BUTTON_POPUP_WRAPPER_CLASS);\n\n    this._popup.on(\"hiding\", this._popupHidingHandler.bind(this));\n\n    this._popup.on(\"showing\", this._popupShowingHandler.bind(this));\n\n    this._bindInnerWidgetOptions(this._popup, \"dropDownOptions\");\n  },\n  _popupHidingHandler: function () {\n    this.option(\"opened\", false);\n    this.setAria({\n      expanded: false,\n      owns: void 0\n    });\n  },\n  _popupShowingHandler: function () {\n    this.option(\"opened\", true);\n    this.setAria({\n      expanded: true,\n      owns: this._popupContentId\n    });\n  },\n  _renderButtonGroup: function () {\n    var $buttonGroup = this._buttonGroup && this._buttonGroup.$element() || (0, _renderer2.default)(\"<div>\");\n\n    if (!this._buttonGroup) {\n      this.$element().append($buttonGroup);\n    }\n\n    this._buttonGroup = this._createComponent($buttonGroup, _button_group2.default, this._buttonGroupOptions());\n\n    this._buttonGroup.registerKeyHandler(\"downArrow\", this._upDownKeyHandler.bind(this));\n\n    this._buttonGroup.registerKeyHandler(\"tab\", this.close.bind(this));\n\n    this._buttonGroup.registerKeyHandler(\"upArrow\", this._upDownKeyHandler.bind(this));\n\n    this._buttonGroup.registerKeyHandler(\"escape\", this._escHandler.bind(this));\n\n    this._bindInnerWidgetOptions(this._buttonGroup, \"buttonGroupOptions\");\n  },\n  _updateArrowClass: function () {\n    var hasArrow = this.option(\"splitButton\") || this.option(\"showArrowIcon\");\n    this.$element().toggleClass(DROP_DOWN_BUTTON_HAS_ARROW_CLASS, hasArrow);\n  },\n  toggle: function (visible) {\n    if (!this._popup) {\n      this._renderPopup();\n\n      this._renderContent();\n    }\n\n    return this._popup.toggle(visible);\n  },\n  open: function () {\n    return this.toggle(true);\n  },\n  close: function () {\n    return this.toggle(false);\n  },\n  _setListOption: function (name, value) {\n    this._list && this._list.option(name, value);\n  },\n  _getDisplayValue: function (item) {\n    var isPrimitiveItem = !(0, _type.isPlainObject)(item);\n    var displayValue = isPrimitiveItem ? item : this._displayGetter(item);\n    return !(0, _type.isPlainObject)(displayValue) ? String((0, _common.ensureDefined)(displayValue, \"\")) : \"\";\n  },\n  _updateActionButton: function (selectedItem) {\n    if (this.option(\"useSelectMode\")) {\n      this.option({\n        text: this._getDisplayValue(selectedItem),\n        icon: (0, _type.isPlainObject)(selectedItem) ? selectedItem.icon : void 0\n      });\n    }\n\n    this._setOptionWithoutOptionChange(\"selectedItem\", selectedItem);\n\n    this._setOptionWithoutOptionChange(\"selectedItemKey\", this._keyGetter(selectedItem));\n  },\n  _clean: function () {\n    this._list && this._list.$element().remove();\n    this._popup && this._popup.$element().remove();\n  },\n  _selectedItemKeyChanged: function (value) {\n    var _this5 = this;\n\n    this._setListOption(\"selectedItemKeys\", this.option(\"useSelectMode\") && (0, _type.isDefined)(value) ? [value] : []);\n\n    var previousItem = this.option(\"selectedItem\");\n\n    this._loadSelectedItem().done(function (selectedItem) {\n      _this5._updateActionButton(selectedItem);\n\n      if (_this5._displayGetter(previousItem) !== _this5._displayGetter(selectedItem)) {\n        _this5._fireSelectionChangedAction({\n          previousValue: previousItem,\n          value: selectedItem\n        });\n      }\n    });\n  },\n  _actionButtonOptionChanged: function (_ref5) {\n    var name = _ref5.name,\n        value = _ref5.value;\n    var newConfig = {};\n    newConfig[name] = value;\n\n    this._buttonGroup.option(\"items[0]\", (0, _extend.extend)({}, this._actionButtonConfig(), newConfig));\n\n    this._popup && this._popup.repaint();\n  },\n  _selectModeChanged: function (value) {\n    if (value) {\n      this._setListOption(\"selectionMode\", \"single\");\n\n      var selectedItemKey = this.option(\"selectedItemKey\");\n\n      this._setListOption(\"selectedItemKeys\", selectedItemKey ? [selectedItemKey] : []);\n    } else {\n      this._setListOption(\"selectionMode\", \"none\");\n\n      this.option({\n        selectedItemKey: void 0,\n        selectedItem: void 0\n      });\n    }\n  },\n  _updateItemCollection: function (optionName) {\n    this._setWidgetOption(\"_list\", [optionName]);\n\n    this._setListOption(\"selectedItemKeys\", []);\n\n    this._loadSelectedItem().done(this._updateActionButton.bind(this));\n  },\n  _optionChanged: function (args) {\n    var name = args.name,\n        value = args.value;\n\n    switch (name) {\n      case \"useSelectMode\":\n        this._selectModeChanged(value);\n\n        break;\n\n      case \"splitButton\":\n        this._updateArrowClass();\n\n        this._renderButtonGroup();\n\n        break;\n\n      case \"displayExpr\":\n        this._compileDisplayGetter();\n\n        this._setListOption(name, value);\n\n        this._updateActionButton(this.option(\"selectedItem\"));\n\n        break;\n\n      case \"keyExpr\":\n        this._compileKeyGetter();\n\n        this._setListOption(name, value);\n\n        break;\n\n      case \"buttonGroupOptions\":\n        this._innerWidgetOptionChanged(this._buttonGroup, args);\n\n        break;\n\n      case \"dropDownOptions\":\n        if (\"dropDownOptions.visible\" === args.fullName) {\n          break;\n        }\n\n        if (void 0 !== args.value.visible) {\n          delete args.value.visible;\n        }\n\n        this._innerWidgetOptionChanged(this._popup, args);\n\n        break;\n\n      case \"opened\":\n        this.toggle(value);\n        break;\n\n      case \"focusStateEnabled\":\n      case \"hoverStateEnabled\":\n        this._setListOption(name, value);\n\n        this._buttonGroup.option(name, value);\n\n        this.callBase(args);\n        break;\n\n      case \"items\":\n        this._dataSource = null;\n\n        this._itemsToDataSource();\n\n        this._updateItemCollection(name);\n\n        break;\n\n      case \"dataSource\":\n        this._initDataSource();\n\n        this._updateItemCollection(name);\n\n        break;\n\n      case \"icon\":\n      case \"text\":\n        this._actionButtonOptionChanged(args);\n\n        break;\n\n      case \"showArrowIcon\":\n        this._updateArrowClass();\n\n        this._buttonGroup.repaint();\n\n        this._popup && this._popup.repaint();\n        break;\n\n      case \"width\":\n      case \"height\":\n        this.callBase(args);\n        this._popup && this._popup.repaint();\n        break;\n\n      case \"stylingMode\":\n        this._buttonGroup.option(name, value);\n\n        break;\n\n      case \"itemTemplate\":\n      case \"grouped\":\n      case \"noDataText\":\n      case \"groupTemplate\":\n      case \"wrapItemText\":\n        this._setListOption(name, value);\n\n        break;\n\n      case \"dropDownContentTemplate\":\n        this._renderContent();\n\n        break;\n\n      case \"selectedItemKey\":\n        this._selectedItemKeyChanged(value);\n\n        break;\n\n      case \"selectedItem\":\n        break;\n\n      case \"onItemClick\":\n        this._createItemClickAction();\n\n        break;\n\n      case \"onButtonClick\":\n        this._createActionClickAction();\n\n        break;\n\n      case \"onSelectionChanged\":\n        this._createSelectionChangedAction();\n\n        break;\n\n      case \"deferRendering\":\n        this.toggle(this.option(\"opened\"));\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n}).include(_data_helper2.default);\n\n(0, _component_registrator2.default)(\"dxDropDownButton\", DropDownButton);\nmodule.exports = DropDownButton;\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}