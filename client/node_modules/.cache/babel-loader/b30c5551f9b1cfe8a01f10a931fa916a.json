{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Row } from '../models/row';\nimport { Column } from '../models/column';\nimport { isNullOrUndefined, isBlazor } from '@syncfusion/ej2-base';\nimport { calculateAggregate, getUid } from '../base/util';\nimport { CellType } from '../base/enum';\nimport { Cell } from '../models/cell';\n/**\n * Summary row model generator\n * @hidden\n */\n\nvar SummaryModelGenerator =\n/** @class */\nfunction () {\n  /**\n   * Constructor for Summary row model generator\n   */\n  function SummaryModelGenerator(parent) {\n    this.parent = parent;\n  }\n\n  SummaryModelGenerator.prototype.getData = function () {\n    var _this = this;\n\n    var rows = [];\n    var row = this.parent.aggregates.slice();\n\n    for (var i = 0; i < row.length; i++) {\n      var columns = row[i].columns.filter(function (column) {\n        return !(column.footerTemplate || column.groupFooterTemplate || column.groupCaptionTemplate) || _this.columnSelector(column);\n      });\n\n      if (columns.length) {\n        rows.push({\n          columns: columns\n        });\n      }\n    }\n\n    return rows;\n  };\n\n  SummaryModelGenerator.prototype.columnSelector = function (column) {\n    return column.footerTemplate !== undefined;\n  };\n\n  SummaryModelGenerator.prototype.getColumns = function (start, end) {\n    var columns = [];\n\n    if (this.parent.allowGrouping) {\n      for (var i = 0; i < this.parent.groupSettings.columns.length; i++) {\n        columns.push(new Column({}));\n      }\n    }\n\n    if (this.parent.detailTemplate || !isNullOrUndefined(this.parent.childGrid) || this.parent.isRowDragable()) {\n      columns.push(new Column({}));\n    }\n\n    columns.push.apply(columns, this.parent.getColumns());\n    return isNullOrUndefined(start) ? columns : columns.slice(start, end);\n  };\n\n  SummaryModelGenerator.prototype.generateRows = function (input, args, start, end, columns) {\n    if (input.length === 0) {\n      if (args === undefined || !args.count) {\n        return [];\n      }\n    }\n\n    var data = this.buildSummaryData(input, args);\n    var rows = [];\n    var row = this.getData();\n\n    for (var i = 0; i < row.length; i++) {\n      rows.push(this.getGeneratedRow(row[i], data[i], args ? args.level : undefined, start, end, args ? args.parentUid : undefined, columns));\n    }\n\n    return rows;\n  };\n\n  SummaryModelGenerator.prototype.getGeneratedRow = function (summaryRow, data, raw, start, end, parentUid, columns) {\n    var tmp = [];\n    var indents = this.getIndentByLevel(raw);\n    var isDetailGridAlone = !isNullOrUndefined(this.parent.childGrid);\n    var indentLength = this.parent.getIndentCount();\n\n    if (this.parent.isRowDragable()) {\n      indents = ['e-indentcelltop'];\n    }\n\n    var values = columns ? columns : this.getColumns(start, end);\n\n    for (var i = 0; i < values.length; i++) {\n      tmp.push(this.getGeneratedCell(values[i], summaryRow, i >= indentLength ? this.getCellType() : i < this.parent.groupSettings.columns.length ? CellType.Indent : CellType.DetailFooterIntent, indents[i], isDetailGridAlone));\n    }\n\n    var row = new Row({\n      data: data,\n      attributes: {\n        class: 'e-summaryrow'\n      }\n    });\n    row.cells = tmp;\n\n    if (isBlazor() && this.parent.isServerRendered && !isNullOrUndefined(parentUid)) {\n      row.uid = this.parent.getRowUid('grid-row');\n    } else {\n      row.uid = getUid('grid-row');\n    }\n\n    row.parentUid = parentUid;\n    row.visible = tmp.some(function (cell) {\n      return cell.isDataCell && cell.visible;\n    });\n    return row;\n  };\n\n  SummaryModelGenerator.prototype.getGeneratedCell = function (column, summaryRow, cellType, indent, isDetailGridAlone) {\n    //Get the summary column by display\n    var sColumn = summaryRow.columns.filter(function (scolumn) {\n      return scolumn.columnName === column.field;\n    })[0];\n    var attrs = {\n      'style': {\n        'textAlign': column.textAlign\n      },\n      'e-mappinguid': column.uid,\n      index: column.index\n    };\n\n    if (indent) {\n      attrs.class = indent;\n    }\n\n    if (isNullOrUndefined(indent) && isDetailGridAlone) {\n      attrs.class = 'e-detailindentcelltop';\n    }\n\n    var opt = {\n      'visible': column.visible,\n      'isDataCell': !isNullOrUndefined(sColumn),\n      'isTemplate': sColumn && !isNullOrUndefined(sColumn.footerTemplate || sColumn.groupFooterTemplate || sColumn.groupCaptionTemplate),\n      'column': sColumn || {},\n      'attributes': attrs,\n      'cellType': cellType\n    };\n    opt.column.headerText = column.headerText;\n    return new Cell(opt);\n  };\n\n  SummaryModelGenerator.prototype.buildSummaryData = function (data, args) {\n    var dummy = [];\n    var summaryRows = this.getData();\n    var single = {};\n    var key = '';\n\n    for (var i = 0; i < summaryRows.length; i++) {\n      single = {};\n      var column = summaryRows[i].columns;\n\n      for (var j = 0; j < column.length; j++) {\n        single = this.setTemplate(column[j], args && args.aggregates ? args : data, single);\n      }\n\n      dummy.push(single);\n    }\n\n    return dummy;\n  };\n\n  SummaryModelGenerator.prototype.getIndentByLevel = function (data) {\n    return this.parent.groupSettings.columns.map(function () {\n      return 'e-indentcelltop';\n    });\n  };\n\n  SummaryModelGenerator.prototype.setTemplate = function (column, data, single) {\n    var types = column.type;\n    var helper = {};\n\n    var formatFn = column.getFormatter() || function () {\n      return function (a) {\n        return a;\n      };\n    }();\n\n    var group = data;\n\n    if (!(types instanceof Array)) {\n      types = [column.type];\n    }\n\n    for (var i = 0; i < types.length; i++) {\n      var key = column.field + ' - ' + types[i].toLowerCase();\n      var disp = column.columnName;\n      var val = types[i] !== 'Custom' && group.aggregates && key in group.aggregates ? group.aggregates[key] : calculateAggregate(types[i], group.aggregates ? group : data, column, this.parent);\n      single[disp] = single[disp] || {};\n      single[disp][key] = val;\n      single[disp][types[i]] = !isNullOrUndefined(val) ? formatFn(val) : ' ';\n\n      if (group.field) {\n        single[disp].field = group.field;\n        single[disp].key = group.key;\n      }\n    }\n\n    helper.format = column.getFormatter();\n    column.setTemplate(helper);\n    return single;\n  };\n\n  SummaryModelGenerator.prototype.getCellType = function () {\n    return CellType.Summary;\n  };\n\n  return SummaryModelGenerator;\n}();\n\nexport { SummaryModelGenerator };\n\nvar GroupSummaryModelGenerator =\n/** @class */\nfunction (_super) {\n  __extends(GroupSummaryModelGenerator, _super);\n\n  function GroupSummaryModelGenerator() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  GroupSummaryModelGenerator.prototype.columnSelector = function (column) {\n    return column.groupFooterTemplate !== undefined;\n  };\n\n  GroupSummaryModelGenerator.prototype.getIndentByLevel = function (level) {\n    if (level === void 0) {\n      level = this.parent.groupSettings.columns.length;\n    }\n\n    return this.parent.groupSettings.columns.map(function (v, indx) {\n      return indx <= level - 1 ? '' : 'e-indentcelltop';\n    });\n  };\n\n  GroupSummaryModelGenerator.prototype.getCellType = function () {\n    return CellType.GroupSummary;\n  };\n\n  return GroupSummaryModelGenerator;\n}(SummaryModelGenerator);\n\nexport { GroupSummaryModelGenerator };\n\nvar CaptionSummaryModelGenerator =\n/** @class */\nfunction (_super) {\n  __extends(CaptionSummaryModelGenerator, _super);\n\n  function CaptionSummaryModelGenerator() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  CaptionSummaryModelGenerator.prototype.columnSelector = function (column) {\n    return column.groupCaptionTemplate !== undefined;\n  };\n\n  CaptionSummaryModelGenerator.prototype.getData = function () {\n    var initVal = {\n      columns: []\n    };\n    return [_super.prototype.getData.call(this).reduce(function (prev, cur) {\n      prev.columns = prev.columns.concat(cur.columns);\n      return prev;\n    }, initVal)];\n  };\n\n  CaptionSummaryModelGenerator.prototype.isEmpty = function () {\n    return (this.getData()[0].columns || []).length === 0;\n  };\n\n  CaptionSummaryModelGenerator.prototype.getCellType = function () {\n    return CellType.CaptionSummary;\n  };\n\n  return CaptionSummaryModelGenerator;\n}(SummaryModelGenerator);\n\nexport { CaptionSummaryModelGenerator };","map":null,"metadata":{},"sourceType":"module"}