{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { PdfColorSpace } from './../enum';\nimport { PdfColor } from './../pdf-color';\nimport { PdfBrush } from './pdf-brush';\nimport { PdfDictionary } from '../../primitives/pdf-dictionary';\nimport { DictionaryProperties } from './../../input-output/pdf-dictionary-properties';\nimport { PdfBoolean } from './../../primitives/pdf-boolean';\nimport { PdfArray } from './../../primitives/pdf-array';\nimport { PdfName } from '../../primitives/pdf-name';\nimport { PdfNumber } from '../../primitives/pdf-number';\nimport { PdfReferenceHolder } from '../../primitives/pdf-reference';\n/**\n * `PdfGradientBrush` class provides objects used to fill the interiors of graphical shapes such as rectangles,\n * ellipses, pies, polygons, and paths.\n * @private\n */\n\nvar PdfGradientBrush =\n/** @class */\nfunction (_super) {\n  __extends(PdfGradientBrush, _super); //Constructor\n\n  /**\n   * Initializes a new instance of the `PdfGradientBrush` class.\n   * @public\n   */\n\n  /* tslint:disable-next-line:max-line-length */\n\n\n  function PdfGradientBrush(shading) {\n    var _this = _super.call(this) || this; // Fields\n\n    /**\n     * Local variable to store the background color.\n     * @private\n     */\n\n\n    _this.mbackground = new PdfColor(255, 255, 255);\n    /**\n     * Local variable to store the stroking color.\n     * @private\n     */\n\n    _this.mbStroking = false;\n    /**\n     * Local variable to store the function.\n     * @private\n     */\n\n    _this.mfunction = null;\n    /**\n     * Local variable to store the DictionaryProperties.\n     * @private\n     */\n\n    _this.dictionaryProperties = new DictionaryProperties();\n    _this.mpatternDictionary = new PdfDictionary();\n\n    _this.mpatternDictionary.items.setValue(_this.dictionaryProperties.type, new PdfName(_this.dictionaryProperties.pattern));\n\n    _this.mpatternDictionary.items.setValue(_this.dictionaryProperties.patternType, new PdfNumber(2));\n\n    _this.shading = shading;\n    _this.colorSpace = PdfColorSpace.Rgb;\n    return _this;\n  }\n\n  Object.defineProperty(PdfGradientBrush.prototype, \"background\", {\n    //Properties\n\n    /**\n     * Gets or sets the background color of the brush.\n     * @public\n     */\n    get: function () {\n      return this.mbackground;\n    },\n    set: function (value) {\n      this.mbackground = value;\n      var sh = this.shading;\n\n      if (value.isEmpty) {\n        sh.remove(this.dictionaryProperties.background);\n      } else {\n        sh.items.setValue(this.dictionaryProperties.background, value.toArray(this.colorSpace));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGradientBrush.prototype, \"antiAlias\", {\n    /**\n     * Gets or sets a value indicating whether use anti aliasing algorithm.\n     * @public\n     */\n    get: function () {\n      var sh = this.shading;\n      var aa = sh.items.getValue(this.dictionaryProperties.antiAlias);\n      return aa.value;\n    },\n    set: function (value) {\n      var sh = this.shading;\n      var aa = sh.items.getValue(this.dictionaryProperties.antiAlias);\n\n      if (aa == null && typeof aa === 'undefined') {\n        aa = new PdfBoolean(value);\n        sh.items.setValue(this.dictionaryProperties.antiAlias, aa);\n      } else {\n        aa.value = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGradientBrush.prototype, \"function\", {\n    /**\n     * Gets or sets the function of the brush.\n     * @protected\n     */\n    get: function () {\n      return this.mfunction;\n    },\n    set: function (value) {\n      this.mfunction = value;\n\n      if (value != null && typeof value !== 'undefined') {\n        this.shading.items.setValue(this.dictionaryProperties.function, new PdfReferenceHolder(this.mfunction));\n      } else {\n        this.shading.remove(this.dictionaryProperties.function);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGradientBrush.prototype, \"bBox\", {\n    /**\n     * Gets or sets the boundary box of the brush.\n     * @protected\n     */\n    get: function () {\n      var sh = this.shading;\n      var box = sh.items.getValue(this.dictionaryProperties.bBox);\n      return box;\n    },\n    set: function (value) {\n      var sh = this.shading;\n\n      if (value == null && typeof value === 'undefined') {\n        sh.remove(this.dictionaryProperties.bBox);\n      } else {\n        sh.items.setValue(this.dictionaryProperties.bBox, value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGradientBrush.prototype, \"colorSpace\", {\n    /**\n     * Gets or sets the color space of the brush.\n     * @public\n     */\n    get: function () {\n      return this.mcolorSpace;\n    },\n    set: function (value) {\n      var colorSpace = this.shading.items.getValue(this.dictionaryProperties.colorSpace);\n\n      if (value !== this.mcolorSpace || colorSpace == null) {\n        this.mcolorSpace = value;\n        var csValue = this.colorSpaceToDeviceName(value);\n        this.shading.items.setValue(this.dictionaryProperties.colorSpace, new PdfName(csValue));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGradientBrush.prototype, \"stroking\", {\n    /**\n     * Gets or sets a value indicating whether this PdfGradientBrush is stroking.\n     * @public\n     */\n    get: function () {\n      return this.mbStroking;\n    },\n    set: function (value) {\n      this.mbStroking = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGradientBrush.prototype, \"patternDictionary\", {\n    /**\n     * Gets the pattern dictionary.\n     * @protected\n     */\n    get: function () {\n      if (this.mpatternDictionary == null) {\n        this.mpatternDictionary = new PdfDictionary();\n      }\n\n      return this.mpatternDictionary;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGradientBrush.prototype, \"shading\", {\n    /**\n     * Gets or sets the shading dictionary.\n     * @protected\n     */\n    get: function () {\n      return this.mshading;\n    },\n    set: function (value) {\n      if (value == null) {\n        throw new Error('ArgumentNullException : Shading');\n      }\n\n      if (value !== this.mshading) {\n        this.mshading = value;\n        this.patternDictionary.items.setValue(this.dictionaryProperties.shading, new PdfReferenceHolder(this.mshading));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGradientBrush.prototype, \"matrix\", {\n    /**\n     * Gets or sets the transformation matrix.\n     * @public\n     */\n    get: function () {\n      return this.mmatrix;\n    },\n    set: function (value) {\n      if (value == null) {\n        throw new Error('ArgumentNullException : Matrix');\n      }\n\n      if (value !== this.mmatrix) {\n        this.mmatrix = value.clone();\n        var m = new PdfArray(this.mmatrix.matrix.elements);\n        this.mpatternDictionary.items.setValue(this.dictionaryProperties.matrix, m);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  }); //Overrides\n\n  /**\n   * Monitors the changes of the brush and modify PDF state respectfully.\n   * @param brush The brush.\n   * @param streamWriter The stream writer.\n   * @param getResources The get resources delegate.\n   * @param saveChanges if set to true the changes should be saved anyway.\n   * @param currentColorSpace The current color space.\n   */\n\n  /* tslint:disable-next-line:max-line-length */\n\n  PdfGradientBrush.prototype.monitorChanges = function (brush, streamWriter, getResources, saveChanges, currentColorSpace) {\n    var diff = false;\n\n    if (brush instanceof PdfGradientBrush) {\n      if (this.colorSpace !== currentColorSpace) {\n        this.colorSpace = currentColorSpace;\n        this.resetFunction();\n      } //  Set the /Pattern colour space.\n\n\n      streamWriter.setColorSpace('Pattern', this.mbStroking); //  Set the pattern for non-stroking operations.\n\n      var resources = getResources.getResources();\n      var name_1 = resources.getName(this);\n      streamWriter.setColourWithPattern(null, name_1, this.mbStroking);\n      diff = true;\n    }\n\n    return diff;\n  };\n  /**\n   * Resets the changes, which were made by the brush.\n   * In other words resets the state to the initial one.\n   * @param streamWriter The stream writer.\n   */\n\n\n  PdfGradientBrush.prototype.resetChanges = function (streamWriter) {//  Unable reset.\n  }; //Implementation\n\n  /**\n   * Converts colorspace enum to a PDF name.\n   * @param colorSpace The color space enum value.\n   */\n\n\n  PdfGradientBrush.prototype.colorSpaceToDeviceName = function (colorSpace) {\n    var result;\n\n    switch (colorSpace) {\n      case PdfColorSpace.Rgb:\n        result = 'DeviceRGB';\n        break;\n    }\n\n    return result;\n  };\n  /**\n   * Resets the pattern dictionary.\n   * @param dictionary A new pattern dictionary.\n   */\n\n\n  PdfGradientBrush.prototype.resetPatternDictionary = function (dictionary) {\n    this.mpatternDictionary = dictionary;\n  };\n  /**\n   * Clones the anti aliasing value.\n   * @param brush The brush.\n   */\n\n\n  PdfGradientBrush.prototype.cloneAntiAliasingValue = function (brush) {\n    if (brush == null) {\n      throw new Error('ArgumentNullException : brush');\n    }\n\n    var sh = this.shading;\n    var aa = sh.items.getValue(this.dictionaryProperties.antiAlias);\n\n    if (aa != null) {\n      brush.shading.items.setValue(this.dictionaryProperties.antiAlias, new PdfBoolean(aa.value));\n    }\n  };\n  /**\n   * Clones the background value.\n   * @param brush The brush.\n   */\n\n\n  PdfGradientBrush.prototype.cloneBackgroundValue = function (brush) {\n    var background = this.background;\n\n    if (!background.isEmpty) {\n      brush.background = background;\n    }\n  };\n\n  Object.defineProperty(PdfGradientBrush.prototype, \"element\", {\n    /* tslint:enable */\n    // IPdfWrapper Members\n\n    /**\n     * Gets the `element`.\n     * @private\n     */\n    get: function () {\n      return this.patternDictionary;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfGradientBrush;\n}(PdfBrush);\n\nexport { PdfGradientBrush };","map":null,"metadata":{},"sourceType":"module"}