{"ast":null,"code":"/**\r\n * DevExtreme (core/utils/template_manager.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.acquireTemplate = exports.acquireIntegrationTemplate = exports.defaultCreateElement = exports.templateKey = exports.validateTemplateSource = exports.getNormalizedTemplateArgs = exports.addOneRenderedCall = exports.findTemplateByDevice = void 0;\n\nvar _renderer = require(\"../renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _type = require(\"./type\");\n\nvar _common = require(\"./common\");\n\nvar _extend = require(\"./extend\");\n\nvar _child_default_template = require(\"../templates/child_default_template\");\n\nvar _template_base = require(\"../templates/template_base\");\n\nvar _empty_template = require(\"../templates/empty_template\");\n\nvar _dom = require(\"./dom\");\n\nvar _devices = require(\"../devices\");\n\nvar _devices2 = _interopRequireDefault(_devices);\n\nvar _template = require(\"../templates/template\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar findTemplateByDevice = exports.findTemplateByDevice = function (templates) {\n  var suitableTemplate = (0, _common.findBestMatches)(_devices2.default.current(), templates, function (template) {\n    return (0, _dom.getElementOptions)(template).dxTemplate;\n  })[0];\n  templates.forEach(function (template) {\n    if (template !== suitableTemplate) {\n      (0, _renderer2.default)(template).remove();\n    }\n  });\n  return suitableTemplate;\n};\n\nvar addOneRenderedCall = exports.addOneRenderedCall = function (template) {\n  var _render = template.render.bind(template);\n\n  return (0, _extend.extend)({}, template, {\n    render: function (options) {\n      var templateResult = _render(options);\n\n      options && options.onRendered && options.onRendered();\n      return templateResult;\n    }\n  });\n};\n\nvar getNormalizedTemplateArgs = exports.getNormalizedTemplateArgs = function (options) {\n  var args = [];\n\n  if (\"model\" in options) {\n    args.push(options.model);\n  }\n\n  if (\"index\" in options) {\n    args.push(options.index);\n  }\n\n  args.push(options.container);\n  return args;\n};\n\nvar validateTemplateSource = exports.validateTemplateSource = function (templateSource) {\n  return \"string\" === typeof templateSource ? (0, _dom.normalizeTemplateElement)(templateSource) : templateSource;\n};\n\nvar templateKey = exports.templateKey = function (templateSource) {\n  return (0, _type.isRenderer)(templateSource) && templateSource[0] || templateSource;\n};\n\nvar defaultCreateElement = exports.defaultCreateElement = function (element) {\n  return new _template.Template(element);\n};\n\nvar acquireIntegrationTemplate = exports.acquireIntegrationTemplate = function (templateSource, templates, isAsyncTemplate, skipTemplates) {\n  var integrationTemplate = null;\n\n  if (!skipTemplates || skipTemplates.indexOf(templateSource) === -1) {\n    integrationTemplate = templates[templateSource];\n\n    if (integrationTemplate && !(integrationTemplate instanceof _template_base.TemplateBase) && !isAsyncTemplate) {\n      integrationTemplate = addOneRenderedCall(integrationTemplate);\n    }\n  }\n\n  return integrationTemplate;\n};\n\nvar acquireTemplate = exports.acquireTemplate = function (templateSource, createTemplate, templates, isAsyncTemplate, skipTemplates, defaultTemplates) {\n  if (null == templateSource) {\n    return new _empty_template.EmptyTemplate();\n  }\n\n  if (templateSource instanceof _child_default_template.ChildDefaultTemplate) {\n    return defaultTemplates[templateSource.name];\n  }\n\n  if (templateSource instanceof _template_base.TemplateBase) {\n    return templateSource;\n  }\n\n  if ((0, _type.isFunction)(templateSource.render) && !(0, _type.isRenderer)(templateSource)) {\n    return addOneRenderedCall(templateSource);\n  }\n\n  if (templateSource.nodeType || (0, _type.isRenderer)(templateSource)) {\n    return createTemplate((0, _renderer2.default)(templateSource));\n  }\n\n  return acquireIntegrationTemplate(templateSource, templates, isAsyncTemplate, skipTemplates) || defaultTemplates[templateSource] || createTemplate(templateSource);\n};","map":null,"metadata":{},"sourceType":"script"}