{"ast":null,"code":"import { isNullOrUndefined, getValue, remove, isBlazor } from '@syncfusion/ej2-base';\nimport { Browser, updateBlazorTemplate } from '@syncfusion/ej2-base';\nimport { Dialog } from '@syncfusion/ej2-popups';\nimport { FlMenuOptrUI } from './filter-menu-operator';\nimport { StringFilterUI } from './string-filter-ui';\nimport { NumberFilterUI } from './number-filter-ui';\nimport { BooleanFilterUI } from './boolean-filter-ui';\nimport { DateFilterUI } from './date-filter-ui';\nimport { getFilterMenuPostion, parentsUntil, appendChildren } from '../base/util';\nimport * as events from '../base/constant';\n/**\n * `filter menu` render boolean column.\n * @hidden\n */\n\nvar FilterMenuRenderer =\n/** @class */\nfunction () {\n  function FilterMenuRenderer(parent, filterSettings, serviceLocator, customFltrOperators, fltrObj) {\n    this.isDialogOpen = false;\n    this.colTypes = {\n      'string': StringFilterUI,\n      'number': NumberFilterUI,\n      'date': DateFilterUI,\n      'boolean': BooleanFilterUI,\n      'datetime': DateFilterUI\n    };\n    this.parent = parent;\n    this.filterSettings = filterSettings;\n    this.serviceLocator = serviceLocator;\n    this.customFilterOperators = customFltrOperators;\n    this.filterObj = fltrObj;\n    this.flMuiObj = new FlMenuOptrUI(this.parent, this.customFilterOperators, this.serviceLocator);\n    this.l10n = this.serviceLocator.getService('localization');\n  }\n\n  FilterMenuRenderer.prototype.openDialog = function (args) {\n    this.col = this.parent.getColumnByField(args.field);\n\n    if (isNullOrUndefined(this.col.filter) || isNullOrUndefined(this.col.filter.type) || this.col.filter.type === 'Menu') {\n      ///\n      this.renderDlgContent(args.target, this.col);\n    }\n  };\n\n  FilterMenuRenderer.prototype.closeDialog = function () {\n    if (!this.dlgObj) {\n      return;\n    }\n\n    if (isBlazor()) {\n      var columns = this.parent.getColumns();\n\n      for (var i = 0; i < columns.length; i++) {\n        if (columns[i].filterTemplate) {\n          var tempID = this.parent.element.id + columns[i].uid + 'filterTemplate';\n          updateBlazorTemplate(tempID, 'FilterTemplate', columns[i]);\n        }\n      }\n    }\n\n    var elem = document.getElementById(this.dlgObj.element.id);\n\n    if (this.dlgObj && !this.dlgObj.isDestroyed && elem) {\n      this.parent.notify(events.filterMenuClose, {\n        field: this.col.field\n      });\n      this.isDialogOpen = false;\n      this.dlgObj.destroy();\n      remove(elem);\n    }\n  };\n\n  FilterMenuRenderer.prototype.renderDlgContent = function (target, column) {\n    var args = {\n      requestType: events.filterBeforeOpen,\n      columnName: column.field,\n      columnType: column.type\n    };\n\n    if (!isBlazor() || this.parent.isJsComponent) {\n      var filterModel = 'filterModel';\n      args[filterModel] = this;\n    }\n\n    this.parent.trigger(events.actionBegin, args);\n    var mainDiv = this.parent.createElement('div', {\n      className: 'e-flmenu-maindiv',\n      id: column.uid + '-flmenu'\n    });\n    this.dlgDiv = this.parent.createElement('div', {\n      className: 'e-flmenu',\n      id: column.uid + '-flmdlg'\n    });\n    this.dlgDiv.setAttribute('aria-label', this.l10n.getConstant('FilterMenuDialogARIA'));\n    this.parent.element.appendChild(this.dlgDiv);\n    this.dlgObj = new Dialog({\n      showCloseIcon: false,\n      closeOnEscape: false,\n      locale: this.parent.locale,\n      visible: false,\n      enableRtl: this.parent.enableRtl,\n      created: this.dialogCreated.bind(this, target, column),\n      position: this.parent.element.classList.contains('e-device') ? {\n        X: 'center',\n        Y: 'center'\n      } : {\n        X: '',\n        Y: ''\n      },\n      target: this.parent.element.classList.contains('e-device') ? document.body : this.parent.element,\n      buttons: [{\n        click: this.filterBtnClick.bind(this, column),\n        buttonModel: {\n          content: this.l10n.getConstant('FilterButton'),\n          isPrimary: true,\n          cssClass: 'e-flmenu-okbtn'\n        }\n      }, {\n        click: this.clearBtnClick.bind(this, column),\n        buttonModel: {\n          content: this.l10n.getConstant('ClearButton'),\n          cssClass: 'e-flmenu-cancelbtn'\n        }\n      }],\n      content: mainDiv,\n      width: !isNullOrUndefined(parentsUntil(target, 'e-bigger')) || this.parent.element.classList.contains('e-device') ? 260 : 250,\n      animationSettings: {\n        effect: 'None'\n      },\n      cssClass: 'e-filter-popup'\n    });\n    var isStringTemplate = 'isStringTemplate';\n    this.dlgObj[isStringTemplate] = true;\n    this.dlgObj.appendTo(this.dlgDiv);\n  };\n\n  FilterMenuRenderer.prototype.dialogCreated = function (target, column) {\n    if (!Browser.isDevice) {\n      getFilterMenuPostion(target, this.dlgObj, this.parent);\n    }\n\n    this.renderFilterUI(target, column);\n    this.parent.notify(events.filterDialogCreated, {});\n    this.dlgObj.element.style.maxHeight = '350px';\n    this.dlgObj.show();\n\n    if (!column.filterTemplate) {\n      this.writeMethod(column, this.dlgObj.element.querySelector('#' + column.uid + '-flmenu'));\n    }\n\n    var args = {\n      requestType: events.filterAfterOpen,\n      columnName: column.field,\n      columnType: column.type\n    };\n\n    if (!isBlazor() || this.parent.isJsComponent) {\n      var filterModel = 'filterModel';\n      args[filterModel] = this;\n    }\n\n    this.isDialogOpen = true;\n    this.parent.trigger(events.actionComplete, args);\n  };\n\n  FilterMenuRenderer.prototype.renderFilterUI = function (target, col) {\n    var dlgConetntEle = this.dlgObj.element.querySelector('.e-flmenu-maindiv');\n    this.parent.log('column_type_missing', {\n      column: col\n    });\n    this.renderOperatorUI(dlgConetntEle, target, col);\n    this.renderFlValueUI(dlgConetntEle, target, col);\n  };\n\n  FilterMenuRenderer.prototype.renderOperatorUI = function (dlgConetntEle, target, column) {\n    this.flMuiObj.renderOperatorUI(dlgConetntEle, target, column, this.dlgObj);\n  };\n\n  FilterMenuRenderer.prototype.renderFlValueUI = function (dlgConetntEle, target, column) {\n    var valueDiv = this.parent.createElement('div', {\n      className: 'e-flmenu-valuediv'\n    });\n    var fObj = this.filterObj;\n    dlgConetntEle.appendChild(valueDiv);\n    var args = {\n      target: valueDiv,\n      column: column,\n      getOptrInstance: this.flMuiObj,\n      dialogObj: this.dlgObj\n    };\n    var instanceofFilterUI = new this.colTypes[column.type](this.parent, this.serviceLocator, this.parent.filterSettings);\n\n    if (column.filterTemplate) {\n      var fltrData = {};\n      var valueInString = 'value';\n      fltrData[column.field] = fltrData[valueInString] = fObj.values[column.field];\n\n      if (column.foreignKeyValue) {\n        fltrData[column.foreignKeyValue] = fObj.values[column.field];\n        fltrData[column.field] = undefined;\n      }\n\n      var col = 'column';\n      fltrData[col] = column;\n      var tempID = this.parent.element.id + column.uid + 'filterTemplate';\n      var compElement = column.getFilterTemplate()(fltrData, this.parent, 'filterTemplate', tempID);\n      updateBlazorTemplate(tempID, 'FilterTemplate', column);\n      appendChildren(valueDiv, compElement);\n    } else {\n      if (!isNullOrUndefined(column.filter) && !isNullOrUndefined(column.filter.ui) && !isNullOrUndefined(column.filter.ui.create)) {\n        var temp = column.filter.ui.create;\n\n        if (typeof temp === 'string') {\n          temp = getValue(temp, window);\n        }\n\n        temp({\n          column: column,\n          target: valueDiv,\n          getOptrInstance: this.flMuiObj,\n          dialogObj: this.dlgObj\n        });\n      } else {\n        instanceofFilterUI.create({\n          column: column,\n          target: valueDiv,\n          getOptrInstance: this.flMuiObj,\n          localizeText: this.l10n,\n          dialogObj: this.dlgObj\n        });\n      }\n    }\n  };\n\n  FilterMenuRenderer.prototype.writeMethod = function (col, dlgContentEle) {\n    var flValue;\n    var target = dlgContentEle.querySelector('.e-flmenu-valinput');\n    var instanceofFilterUI = new this.colTypes[col.type](this.parent, this.serviceLocator, this.parent.filterSettings);\n    var columns = this.filterSettings.columns;\n\n    for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {\n      var column = columns_1[_i];\n\n      if (col.uid === column.uid) {\n        flValue = column.value;\n      }\n    }\n\n    if (!isNullOrUndefined(col.filter) && !isNullOrUndefined(col.filter.ui) && !isNullOrUndefined(col.filter.ui.write)) {\n      var temp = col.filter.ui.write;\n\n      if (typeof temp === 'string') {\n        temp = getValue(temp, window);\n      }\n\n      temp({\n        column: col,\n        target: target,\n        parent: this.parent,\n        filteredValue: flValue\n      });\n    } else {\n      instanceofFilterUI.write({\n        column: col,\n        target: target,\n        parent: this.parent,\n        filteredValue: flValue\n      });\n    }\n  };\n\n  FilterMenuRenderer.prototype.filterBtnClick = function (col) {\n    var flValue;\n    var flOptrValue;\n    var targ = this.dlgObj.element.querySelector('.e-flmenu-valuediv input');\n    flOptrValue = this.flMuiObj.getFlOperator();\n    var instanceofFilterUI = new this.colTypes[col.type](this.parent, this.serviceLocator, this.parent.filterSettings);\n\n    if (col.filterTemplate) {\n      var element = this.dlgDiv.querySelector('.e-flmenu-valuediv');\n      var fltrValue = void 0;\n\n      if (element.children[0].value) {\n        fltrValue = element.children[0].value;\n      } else {\n        if (!isBlazor() && !isNullOrUndefined(element.children[0].ej2_instances)) {\n          fltrValue = element.children[0].ej2_instances[0].value;\n        } else {\n          var eControl = element.querySelector('.e-control');\n          fltrValue = col.type === 'boolean' ? eControl.checked : !isNullOrUndefined(eControl.ej2_instances) ? eControl.ej2_instances[0].value : eControl.value;\n        }\n      }\n\n      this.filterObj.filterByColumn(col.field, flOptrValue, fltrValue);\n    } else {\n      if (!isNullOrUndefined(col.filter) && !isNullOrUndefined(col.filter.ui) && !isNullOrUndefined(col.filter.ui.read)) {\n        var temp = col.filter.ui.read;\n\n        if (typeof temp === 'string') {\n          temp = getValue(temp, window);\n        }\n\n        flValue = temp({\n          element: targ,\n          column: col,\n          operator: flOptrValue,\n          fltrObj: this.filterObj\n        });\n      } else {\n        instanceofFilterUI.read(targ, col, flOptrValue, this.filterObj);\n      }\n    }\n\n    var iconClass = this.parent.showColumnMenu ? '.e-columnmenu' : '.e-icon-filter';\n    var column = this.parent.element.querySelector('[e-mappinguid=\"' + col.uid + '\"]').parentElement;\n    var flIcon = column.querySelector(iconClass);\n\n    if (flIcon) {\n      flIcon.classList.add('e-filtered');\n    }\n\n    this.closeDialog();\n  };\n\n  FilterMenuRenderer.prototype.clearBtnClick = function (column) {\n    this.filterObj.removeFilteredColsByField(column.field);\n\n    if (isBlazor() && !this.parent.isJsComponent) {\n      this.parent.setProperties({\n        filterSettings: {\n          columns: this.filterSettings.columns\n        }\n      }, true);\n    }\n\n    this.closeDialog();\n    var iconClass = this.parent.showColumnMenu ? '.e-columnmenu' : '.e-icon-filter';\n    var col = this.parent.element.querySelector('[e-mappinguid=\"' + column.uid + '\"]').parentElement;\n    var flIcon = col.querySelector(iconClass);\n\n    if (flIcon) {\n      flIcon.classList.remove('e-filtered');\n    }\n  };\n\n  FilterMenuRenderer.prototype.destroy = function () {\n    this.closeDialog();\n  };\n  /**\n   * @hidden\n   */\n\n\n  FilterMenuRenderer.prototype.getFilterUIInfo = function () {\n    return {\n      field: this.col.field,\n      operator: this.flMuiObj.getFlOperator()\n    };\n  };\n\n  return FilterMenuRenderer;\n}();\n\nexport { FilterMenuRenderer };","map":null,"metadata":{},"sourceType":"module"}