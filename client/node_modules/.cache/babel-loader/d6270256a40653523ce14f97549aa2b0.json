{"ast":null,"code":"/**\r\n * DevExtreme (ui/toast.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../core/renderer\");\n\nvar window = require(\"../core/utils/window\").getWindow();\n\nvar domAdapter = require(\"../core/dom_adapter\");\n\nvar eventsEngine = require(\"../events/core/events_engine\");\n\nvar ready = require(\"../core/utils/ready_callbacks\").add;\n\nvar commonUtils = require(\"../core/utils/common\");\n\nvar typeUtils = require(\"../core/utils/type\");\n\nvar extend = require(\"../core/utils/extend\").extend;\n\nvar inArray = require(\"../core/utils/array\").inArray;\n\nvar pointerEvents = require(\"../events/pointer\");\n\nvar registerComponent = require(\"../core/component_registrator\");\n\nvar Overlay = require(\"./overlay\");\n\nvar themes = require(\"./themes\");\n\nvar TOAST_CLASS = \"dx-toast\";\nvar TOAST_CLASS_PREFIX = TOAST_CLASS + \"-\";\nvar TOAST_WRAPPER_CLASS = TOAST_CLASS_PREFIX + \"wrapper\";\nvar TOAST_CONTENT_CLASS = TOAST_CLASS_PREFIX + \"content\";\nvar TOAST_MESSAGE_CLASS = TOAST_CLASS_PREFIX + \"message\";\nvar TOAST_ICON_CLASS = TOAST_CLASS_PREFIX + \"icon\";\nvar WIDGET_NAME = \"dxToast\";\nvar toastTypes = [\"info\", \"warning\", \"error\", \"success\"];\nvar TOAST_STACK = [];\nvar FIRST_Z_INDEX_OFFSET = 8e3;\nvar visibleToastInstance = null;\nvar POSITION_ALIASES = {\n  top: {\n    my: \"top\",\n    at: \"top\",\n    of: null,\n    offset: \"0 0\"\n  },\n  bottom: {\n    my: \"bottom\",\n    at: \"bottom\",\n    of: null,\n    offset: \"0 -20\"\n  },\n  center: {\n    my: \"center\",\n    at: \"center\",\n    of: null,\n    offset: \"0 0\"\n  },\n  right: {\n    my: \"center right\",\n    at: \"center right\",\n    of: null,\n    offset: \"0 0\"\n  },\n  left: {\n    my: \"center left\",\n    at: \"center left\",\n    of: null,\n    offset: \"0 0\"\n  }\n};\nready(function () {\n  eventsEngine.subscribeGlobal(domAdapter.getDocument(), pointerEvents.down, function (e) {\n    for (var i = TOAST_STACK.length - 1; i >= 0; i--) {\n      if (!TOAST_STACK[i]._proxiedDocumentDownHandler(e)) {\n        return;\n      }\n    }\n  });\n});\nvar Toast = Overlay.inherit({\n  _getDefaultOptions: function () {\n    return extend(this.callBase(), {\n      message: \"\",\n      type: \"info\",\n      displayTime: 2e3,\n      position: \"bottom center\",\n      animation: {\n        show: {\n          type: \"fade\",\n          duration: 400,\n          from: 0,\n          to: 1\n        },\n        hide: {\n          type: \"fade\",\n          duration: 400,\n          to: 0\n        }\n      },\n      shading: false,\n      height: \"auto\",\n      hideTopOverlayHandler: null,\n      closeOnSwipe: true,\n      closeOnClick: false,\n      resizeEnabled: false\n    });\n  },\n  _defaultOptionsRules: function () {\n    return this.callBase().concat([{\n      device: {\n        platform: \"android\"\n      },\n      options: {\n        closeOnOutsideClick: true,\n        width: \"auto\",\n        position: {\n          at: \"bottom left\",\n          my: \"bottom left\",\n          offset: \"20 -20\"\n        },\n        animation: {\n          show: {\n            type: \"slide\",\n            duration: 200,\n            from: {\n              position: {\n                my: \"top\",\n                at: \"bottom\",\n                of: window\n              }\n            }\n          },\n          hide: {\n            type: \"slide\",\n            duration: 200,\n            to: {\n              position: {\n                my: \"top\",\n                at: \"bottom\",\n                of: window\n              }\n            }\n          }\n        }\n      }\n    }, {\n      device: function (_device) {\n        var isPhone = \"phone\" === _device.deviceType;\n        var isAndroid = \"android\" === _device.platform;\n        return isPhone && isAndroid;\n      },\n      options: {\n        width: function () {\n          return $(window).width();\n        },\n        position: {\n          at: \"bottom center\",\n          my: \"bottom center\",\n          offset: \"0 0\"\n        }\n      }\n    }, {\n      device: function () {\n        return themes.isMaterial();\n      },\n      options: {\n        minWidth: 344,\n        maxWidth: 568,\n        displayTime: 4e3\n      }\n    }]);\n  },\n  _init: function () {\n    this.callBase();\n\n    this._posStringToObject();\n  },\n  _renderContentImpl: function () {\n    if (this.option(\"message\")) {\n      this._message = $(\"<div>\").addClass(TOAST_MESSAGE_CLASS).text(this.option(\"message\")).appendTo(this.$content());\n    }\n\n    this.setAria(\"role\", \"alert\", this._message);\n\n    if (inArray(this.option(\"type\").toLowerCase(), toastTypes) > -1) {\n      this.$content().prepend($(\"<div>\").addClass(TOAST_ICON_CLASS));\n    }\n\n    this.callBase();\n  },\n  _render: function () {\n    this.callBase();\n    this.$element().addClass(TOAST_CLASS);\n\n    this._wrapper().addClass(TOAST_WRAPPER_CLASS);\n\n    this._$content.addClass(TOAST_CLASS_PREFIX + String(this.option(\"type\")).toLowerCase());\n\n    this.$content().addClass(TOAST_CONTENT_CLASS);\n\n    this._toggleCloseEvents(\"Swipe\");\n\n    this._toggleCloseEvents(\"Click\");\n  },\n  _renderScrollTerminator: commonUtils.noop,\n  _toggleCloseEvents: function (event) {\n    var dxEvent = \"dx\" + event.toLowerCase();\n    eventsEngine.off(this._$content, dxEvent);\n    this.option(\"closeOn\" + event) && eventsEngine.on(this._$content, dxEvent, this.hide.bind(this));\n  },\n  _posStringToObject: function () {\n    if (!typeUtils.isString(this.option(\"position\"))) {\n      return;\n    }\n\n    var verticalPosition = this.option(\"position\").split(\" \")[0];\n    var horizontalPosition = this.option(\"position\").split(\" \")[1];\n    this.option(\"position\", extend({}, POSITION_ALIASES[verticalPosition]));\n\n    switch (horizontalPosition) {\n      case \"center\":\n      case \"left\":\n      case \"right\":\n        this.option(\"position\").at += \" \" + horizontalPosition;\n        this.option(\"position\").my += \" \" + horizontalPosition;\n    }\n  },\n  _show: function () {\n    if (visibleToastInstance && visibleToastInstance !== this) {\n      clearTimeout(visibleToastInstance._hideTimeout);\n      visibleToastInstance.hide();\n    }\n\n    visibleToastInstance = this;\n    return this.callBase.apply(this, arguments).done(function () {\n      clearTimeout(this._hideTimeout);\n      this._hideTimeout = setTimeout(this.hide.bind(this), this.option(\"displayTime\"));\n    }.bind(this));\n  },\n  _hide: function () {\n    visibleToastInstance = null;\n    return this.callBase.apply(this, arguments);\n  },\n  _overlayStack: function () {\n    return TOAST_STACK;\n  },\n  _zIndexInitValue: function () {\n    return this.callBase() + FIRST_Z_INDEX_OFFSET;\n  },\n  _dispose: function () {\n    clearTimeout(this._hideTimeout);\n    visibleToastInstance = null;\n    this.callBase();\n  },\n  _optionChanged: function (args) {\n    switch (args.name) {\n      case \"type\":\n        this._$content.removeClass(TOAST_CLASS_PREFIX + args.previousValue);\n\n        this._$content.addClass(TOAST_CLASS_PREFIX + String(args.value).toLowerCase());\n\n        break;\n\n      case \"message\":\n        if (this._message) {\n          this._message.text(args.value);\n        }\n\n        break;\n\n      case \"closeOnSwipe\":\n        this._toggleCloseEvents(\"Swipe\");\n\n        break;\n\n      case \"closeOnClick\":\n        this._toggleCloseEvents(\"Click\");\n\n        break;\n\n      case \"displayTime\":\n      case \"position\":\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n});\nregisterComponent(WIDGET_NAME, Toast);\nmodule.exports = Toast;\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}