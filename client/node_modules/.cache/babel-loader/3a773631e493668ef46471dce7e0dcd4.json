{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Base } from './base';\nimport { Browser } from './browser';\nimport { isVisible } from './dom';\nimport { Property, Complex, NotifyPropertyChanges, Event } from './notify-property-change';\nimport { EventHandler } from './event-handler';\nimport { ChildProperty } from './child-property';\nimport { select, closest, setStyleAttribute, addClass, createElement } from './dom';\nimport { extend, isUndefined, isNullOrUndefined, compareElementParent, isBlazor } from './util';\nvar defaultPosition = {\n  left: 0,\n  top: 0,\n  bottom: 0,\n  right: 0\n};\nvar positionProp = ['offsetLeft', 'offsetTop'];\nvar axisMapper = ['x', 'y'];\nvar axisValueMapper = ['left', 'top'];\nvar isDraggedObject = {\n  isDragged: false\n};\n/**\n * Specifies the position coordinates\n */\n\nvar Position =\n/** @class */\nfunction (_super) {\n  __extends(Position, _super);\n\n  function Position() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property(0)], Position.prototype, \"left\", void 0);\n\n  __decorate([Property(0)], Position.prototype, \"top\", void 0);\n\n  return Position;\n}(ChildProperty);\n\nexport { Position };\n/**\n * Draggable Module provides support to enable draggable functionality in Dom Elements.\n * ```html\n * <div id='drag'>Draggable</div>\n * <script>\n * var ele = document.getElementById('drag');\n * var drag:Draggable = new Draggable(ele,{\n *     clone:false,\n *     drag: function(e) {\n *      //drag handler code.\n *      },\n *     handle:'.class'\n * });\n * </script>\n * ```\n */\n\nvar Draggable =\n/** @class */\nfunction (_super) {\n  __extends(Draggable, _super);\n\n  function Draggable(element, options) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.dragLimit = Draggable_1.getDefaultPosition();\n    _this.borderWidth = Draggable_1.getDefaultPosition();\n    _this.padding = Draggable_1.getDefaultPosition();\n    _this.diffX = 0;\n    _this.prevLeft = 0;\n    _this.prevTop = 0;\n    _this.dragProcessStarted = false;\n    /* tslint:disable no-any */\n\n    _this.tapHoldTimer = 0;\n    _this.externalInitialize = false;\n    _this.diffY = 0;\n    _this.parentScrollX = 0;\n    _this.parentScrollY = 0;\n    _this.droppables = {};\n\n    _this.bind();\n\n    return _this;\n  }\n\n  Draggable_1 = Draggable;\n\n  Draggable.prototype.bind = function () {\n    this.toggleEvents();\n\n    if (Browser.isIE) {\n      addClass([this.element], 'e-block-touch');\n    }\n\n    this.droppables[this.scope] = {};\n  };\n\n  Draggable.getDefaultPosition = function () {\n    return extend({}, defaultPosition);\n  };\n\n  Draggable.prototype.toggleEvents = function (isUnWire) {\n    var ele;\n\n    if (!isUndefined(this.handle)) {\n      ele = select(this.handle, this.element);\n    }\n\n    var handler = this.enableTapHold && Browser.isDevice && Browser.isTouch ? this.mobileInitialize : this.initialize;\n\n    if (isUnWire) {\n      EventHandler.remove(ele || this.element, Browser.touchStartEvent, handler);\n    } else {\n      EventHandler.add(ele || this.element, Browser.touchStartEvent, handler, this);\n    }\n  };\n  /* istanbul ignore next */\n\n\n  Draggable.prototype.mobileInitialize = function (evt) {\n    var _this = this;\n\n    var target = evt.currentTarget;\n    this.tapHoldTimer = setTimeout(function () {\n      _this.externalInitialize = true;\n\n      _this.removeTapholdTimer();\n\n      _this.initialize(evt, target);\n    }, this.tapHoldThreshold);\n    EventHandler.add(document, Browser.touchMoveEvent, this.removeTapholdTimer, this);\n    EventHandler.add(document, Browser.touchEndEvent, this.removeTapholdTimer, this);\n  };\n  /* istanbul ignore next */\n\n\n  Draggable.prototype.removeTapholdTimer = function () {\n    clearTimeout(this.tapHoldTimer);\n    EventHandler.remove(document, Browser.touchMoveEvent, this.removeTapholdTimer);\n    EventHandler.remove(document, Browser.touchEndEvent, this.removeTapholdTimer);\n  };\n  /* istanbul ignore next */\n\n\n  Draggable.prototype.getScrollableParent = function (element, axis) {\n    var scroll = {\n      'vertical': 'scrollHeight',\n      'horizontal': 'scrollWidth'\n    };\n    var client = {\n      'vertical': 'clientHeight',\n      'horizontal': 'clientWidth'\n    };\n\n    if (isNullOrUndefined(element)) {\n      return null;\n    }\n\n    if (element[scroll[axis]] > element[client[axis]]) {\n      if (axis === 'vertical' ? element.scrollTop > 0 : element.scrollLeft > 0) {\n        if (axis === 'vertical') {\n          this.parentScrollY = this.parentScrollY + (this.parentScrollY === 0 ? element.scrollTop : element.scrollTop - this.parentScrollY);\n        } else {\n          this.parentScrollX = this.parentScrollX + (this.parentScrollX === 0 ? element.scrollLeft : element.scrollLeft - this.parentScrollX);\n        }\n\n        if (!isNullOrUndefined(element)) {\n          return this.getScrollableParent(element.parentNode, axis);\n        } else {\n          return element;\n        }\n      } else {\n        return this.getScrollableParent(element.parentNode, axis);\n      }\n    } else {\n      return this.getScrollableParent(element.parentNode, axis);\n    }\n  };\n\n  Draggable.prototype.getScrollableValues = function () {\n    this.parentScrollX = 0;\n    this.parentScrollY = 0;\n    var isModalDialog = this.element.classList.contains('e-dialog') && this.element.classList.contains('e-dlg-modal');\n    var verticalScrollParent = this.getScrollableParent(this.element.parentNode, 'vertical');\n    var horizontalScrollParent = this.getScrollableParent(this.element.parentNode, 'horizontal');\n  };\n\n  Draggable.prototype.initialize = function (evt, curTarget) {\n    this.currentStateTarget = evt.target;\n\n    if (this.isDragStarted()) {\n      return;\n    } else {\n      this.isDragStarted(true);\n      this.externalInitialize = false;\n    }\n\n    this.target = evt.currentTarget || curTarget;\n    this.dragProcessStarted = false;\n\n    if (this.abort) {\n      /* tslint:disable no-any */\n      var abortSelectors = this.abort;\n\n      if (typeof abortSelectors === 'string') {\n        abortSelectors = [abortSelectors];\n      }\n\n      for (var i = 0; i < abortSelectors.length; i++) {\n        if (!isNullOrUndefined(closest(evt.target, abortSelectors[i]))) {\n          /* istanbul ignore next */\n          if (this.isDragStarted()) {\n            this.isDragStarted(true);\n          }\n\n          return;\n        }\n      }\n    }\n\n    if (this.preventDefault && !isUndefined(evt.changedTouches)) {\n      evt.preventDefault();\n    }\n\n    this.element.setAttribute('aria-grabbed', 'true');\n    var intCoord = this.getCoordinates(evt);\n    this.initialPosition = {\n      x: intCoord.pageX,\n      y: intCoord.pageY\n    };\n\n    if (!this.clone) {\n      var pos = this.element.getBoundingClientRect();\n      this.getScrollableValues();\n\n      if (evt.clientX === evt.pageX) {\n        this.parentScrollX = 0;\n      }\n\n      if (evt.clientY === evt.pageY) {\n        this.parentScrollY = 0;\n      }\n\n      this.relativeXPosition = intCoord.pageX - (pos.left + this.parentScrollX);\n      this.relativeYPosition = intCoord.pageY - (pos.top + this.parentScrollY);\n    }\n\n    if (this.externalInitialize) {\n      this.intDragStart(evt);\n    } else {\n      EventHandler.add(document, Browser.touchMoveEvent, this.intDragStart, this);\n      EventHandler.add(document, Browser.touchEndEvent, this.intDestroy, this);\n    }\n\n    this.toggleEvents(true);\n    document.body.classList.add('e-prevent-select');\n    this.externalInitialize = false;\n    EventHandler.trigger(document.documentElement, Browser.touchStartEvent, evt);\n  };\n\n  Draggable.prototype.intDragStart = function (evt) {\n    this.removeTapholdTimer();\n    var isChangeTouch = !isUndefined(evt.changedTouches);\n\n    if (isChangeTouch && evt.changedTouches.length !== 1) {\n      return;\n    }\n\n    if (isChangeTouch) {\n      evt.preventDefault();\n    }\n\n    var intCordinate = this.getCoordinates(evt);\n    var pos;\n    var styleProp = getComputedStyle(this.element);\n    this.margin = {\n      left: parseInt(styleProp.marginLeft, 10),\n      top: parseInt(styleProp.marginTop, 10),\n      right: parseInt(styleProp.marginRight, 10),\n      bottom: parseInt(styleProp.marginBottom, 10)\n    };\n    var element = this.element;\n\n    if (this.clone && this.dragTarget) {\n      var intClosest = closest(evt.target, this.dragTarget);\n\n      if (!isNullOrUndefined(intClosest)) {\n        element = intClosest;\n      }\n    }\n\n    this.offset = this.calculateParentPosition(element);\n    this.position = this.getMousePosition(evt, this.isDragScroll);\n    var x = this.initialPosition.x - intCordinate.pageX;\n    var y = this.initialPosition.y - intCordinate.pageY;\n    var distance = Math.sqrt(x * x + y * y);\n\n    if (distance >= this.distance || this.externalInitialize) {\n      var ele = this.getHelperElement(evt);\n\n      if (!ele || isNullOrUndefined(ele)) {\n        return;\n      }\n\n      var dragTargetElement = this.helperElement = ele;\n      this.parentClientRect = this.calculateParentPosition(dragTargetElement.offsetParent);\n\n      if (this.dragStart) {\n        var curTarget = this.getProperTargetElement(evt);\n        var args = {\n          event: evt,\n          element: element,\n          target: curTarget,\n          bindEvents: isBlazor() ? this.bindDragEvents.bind(this) : null,\n          dragElement: dragTargetElement\n        };\n        this.trigger('dragStart', args);\n      }\n\n      if (this.dragArea) {\n        this.setDragArea();\n      } else {\n        this.dragLimit = {\n          left: 0,\n          right: 0,\n          bottom: 0,\n          top: 0\n        };\n        this.borderWidth = {\n          top: 0,\n          left: 0\n        };\n      }\n\n      pos = {\n        left: this.position.left - this.parentClientRect.left,\n        top: this.position.top - this.parentClientRect.top\n      };\n\n      if (this.clone && !this.enableTailMode) {\n        this.diffX = this.position.left - this.offset.left;\n        this.diffY = this.position.top - this.offset.top;\n      }\n\n      this.getScrollableValues();\n      var posValue = this.getProcessedPositionValue({\n        top: pos.top - this.diffY + 'px',\n        left: pos.left - this.diffX + 'px'\n      });\n      this.dragElePosition = {\n        top: pos.top,\n        left: pos.left\n      };\n      setStyleAttribute(dragTargetElement, this.getDragPosition({\n        position: 'absolute',\n        left: posValue.left,\n        top: posValue.top\n      }));\n      EventHandler.remove(document, Browser.touchMoveEvent, this.intDragStart);\n      EventHandler.remove(document, Browser.touchEndEvent, this.intDestroy);\n\n      if (!isBlazor()) {\n        this.bindDragEvents(dragTargetElement);\n      }\n    }\n  };\n\n  Draggable.prototype.bindDragEvents = function (dragTargetElement) {\n    if (isVisible(dragTargetElement)) {\n      EventHandler.add(document, Browser.touchMoveEvent, this.intDrag, this);\n      EventHandler.add(document, Browser.touchEndEvent, this.intDragStop, this);\n      this.setGlobalDroppables(false, this.element, dragTargetElement);\n    } else {\n      this.toggleEvents();\n      document.body.classList.remove('e-prevent-select');\n    }\n  };\n\n  Draggable.prototype.elementInViewport = function (el) {\n    this.top = el.offsetTop;\n    this.left = el.offsetLeft;\n    this.width = el.offsetWidth;\n    this.height = el.offsetHeight;\n\n    while (el.offsetParent) {\n      el = el.offsetParent;\n      this.top += el.offsetTop;\n      this.left += el.offsetLeft;\n    }\n\n    return this.top >= window.pageYOffset && this.left >= window.pageXOffset && this.top + this.height <= window.pageYOffset + window.innerHeight && this.left + this.width <= window.pageXOffset + window.innerWidth;\n  };\n\n  Draggable.prototype.getProcessedPositionValue = function (value) {\n    if (this.queryPositionInfo) {\n      return this.queryPositionInfo(value);\n    }\n\n    return value;\n  };\n\n  Draggable.prototype.calculateParentPosition = function (ele) {\n    if (isNullOrUndefined(ele)) {\n      return {\n        left: 0,\n        top: 0\n      };\n    }\n\n    var rect = ele.getBoundingClientRect();\n    var style = getComputedStyle(ele);\n    return {\n      left: rect.left + window.pageXOffset - parseInt(style.marginLeft, 10),\n      top: rect.top + window.pageYOffset - parseInt(style.marginTop, 10)\n    };\n  }; // tslint:disable-next-line:max-func-body-length\n\n\n  Draggable.prototype.intDrag = function (evt) {\n    if (!isUndefined(evt.changedTouches) && evt.changedTouches.length !== 1) {\n      return;\n    }\n\n    var left;\n    var top;\n    this.position = this.getMousePosition(evt, this.isDragScroll);\n    var docHeight = this.getDocumentWidthHeight('Height');\n\n    if (docHeight < this.position.top) {\n      this.position.top = docHeight;\n    }\n\n    var docWidth = this.getDocumentWidthHeight('Width');\n\n    if (docWidth < this.position.left) {\n      this.position.left = docWidth;\n    }\n\n    if (this.drag) {\n      var curTarget = this.getProperTargetElement(evt);\n      this.trigger('drag', {\n        event: evt,\n        element: this.element,\n        target: curTarget\n      });\n    }\n\n    var eleObj = this.checkTargetElement(evt);\n\n    if (eleObj.target && eleObj.instance) {\n      /* tslint:disable no-any */\n      var flag = true;\n\n      if (this.hoverObject) {\n        if (this.hoverObject.instance !== eleObj.instance) {\n          this.triggerOutFunction(evt, eleObj);\n        } else {\n          flag = false;\n        }\n      }\n\n      if (flag) {\n        eleObj.instance.dragData[this.scope] = this.droppables[this.scope];\n        eleObj.instance.intOver(evt, eleObj.target);\n        this.hoverObject = eleObj;\n      }\n    } else if (this.hoverObject) {\n      this.triggerOutFunction(evt, eleObj);\n    }\n\n    var helperElement = this.droppables[this.scope].helper;\n    this.parentClientRect = this.calculateParentPosition(this.helperElement.offsetParent);\n    var tLeft = this.parentClientRect.left;\n    var tTop = this.parentClientRect.top;\n    var intCoord = this.getCoordinates(evt);\n    var pagex = intCoord.pageX;\n    var pagey = intCoord.pageY;\n    var dLeft = this.position.left - this.diffX;\n    var dTop = this.position.top - this.diffY;\n\n    if (this.dragArea) {\n      var styles = getComputedStyle(helperElement);\n\n      if (this.pageX !== pagex || this.skipDistanceCheck) {\n        var helperWidth = helperElement.offsetWidth + (parseFloat(styles.marginLeft) + parseFloat(styles.marginRight));\n\n        if (this.dragLimit.left > dLeft && dLeft > 0) {\n          left = this.dragLimit.left;\n        } else if (this.dragLimit.right + window.pageXOffset < dLeft + helperWidth && dLeft > 0) {\n          left = dLeft - (dLeft - this.dragLimit.right) + window.pageXOffset - helperWidth;\n        } else {\n          left = dLeft < 0 ? this.dragLimit.left : dLeft;\n        }\n      }\n\n      if (this.pageY !== pagey || this.skipDistanceCheck) {\n        var helperHeight = helperElement.offsetHeight + (parseFloat(styles.marginTop) + parseFloat(styles.marginBottom));\n\n        if (this.dragLimit.top > dTop && dTop > 0) {\n          top = this.dragLimit.top;\n        } else if (this.dragLimit.bottom + window.pageYOffset < dTop + helperHeight && dTop > 0) {\n          top = dTop - (dTop - this.dragLimit.bottom) + window.pageYOffset - helperHeight;\n        } else {\n          top = dTop < 0 ? this.dragLimit.top : dTop;\n        }\n      }\n    } else {\n      left = dLeft;\n      top = dTop;\n    }\n\n    var iTop = tTop + this.borderWidth.top;\n    var iLeft = tLeft + this.borderWidth.left;\n\n    if (this.dragProcessStarted) {\n      if (isNullOrUndefined(top)) {\n        top = this.prevTop;\n      }\n\n      if (isNullOrUndefined(left)) {\n        left = this.prevLeft;\n      }\n    }\n\n    var draEleTop;\n    var draEleLeft;\n\n    if (this.dragArea) {\n      draEleTop = top - iTop < 0 ? this.dragLimit.top : top - iTop;\n      draEleLeft = left - iLeft < 0 ? this.dragElePosition.left : left - iLeft;\n    } else {\n      draEleTop = top - iTop;\n      draEleLeft = left - iLeft;\n    }\n\n    var dragValue = this.getProcessedPositionValue({\n      top: draEleTop + 'px',\n      left: draEleLeft + 'px'\n    });\n    setStyleAttribute(helperElement, this.getDragPosition(dragValue));\n\n    if (!this.elementInViewport(helperElement) && this.enableAutoScroll) {\n      this.helperElement.scrollIntoView();\n    }\n\n    this.dragProcessStarted = true;\n    this.prevLeft = left;\n    this.prevTop = top;\n    this.position.left = left;\n    this.position.top = top;\n    this.pageX = pagex;\n    this.pageY = pagey;\n  };\n\n  Draggable.prototype.triggerOutFunction = function (evt, eleObj) {\n    this.hoverObject.instance.intOut(evt, eleObj.target);\n    this.hoverObject.instance.dragData[this.scope] = null;\n    this.hoverObject = null;\n  };\n\n  Draggable.prototype.getDragPosition = function (dragValue) {\n    var temp = extend({}, dragValue);\n\n    if (this.axis) {\n      if (this.axis === 'x') {\n        delete temp.top;\n      } else if (this.axis === 'y') {\n        delete temp.left;\n      }\n    }\n\n    return temp;\n  };\n\n  Draggable.prototype.getDocumentWidthHeight = function (str) {\n    var docBody = document.body;\n    var docEle = document.documentElement;\n    var returnValue = Math.max(docBody['scroll' + str], docEle['scroll' + str], docBody['offset' + str], docEle['offset' + str], docEle['client' + str]);\n    return returnValue;\n  };\n\n  Draggable.prototype.intDragStop = function (evt) {\n    this.dragProcessStarted = false;\n\n    if (!isUndefined(evt.changedTouches) && evt.changedTouches.length !== 1) {\n      return;\n    }\n\n    var type = ['touchend', 'pointerup', 'mouseup'];\n\n    if (type.indexOf(evt.type) !== -1) {\n      if (this.dragStop) {\n        var curTarget = this.getProperTargetElement(evt);\n        this.trigger('dragStop', {\n          event: evt,\n          element: this.element,\n          target: curTarget,\n          helper: this.helperElement\n        });\n      }\n\n      this.intDestroy(evt);\n    } else {\n      this.element.setAttribute('aria-grabbed', 'false');\n    }\n\n    var eleObj = this.checkTargetElement(evt);\n\n    if (eleObj.target && eleObj.instance) {\n      eleObj.instance.dragStopCalled = true;\n      eleObj.instance.dragData[this.scope] = this.droppables[this.scope];\n      eleObj.instance.intDrop(evt, eleObj.target);\n    }\n\n    this.setGlobalDroppables(true);\n    document.body.classList.remove('e-prevent-select');\n  };\n  /**\n   * @private\n   */\n\n\n  Draggable.prototype.intDestroy = function (evt) {\n    this.dragProcessStarted = false;\n    this.toggleEvents();\n    document.body.classList.remove('e-prevent-select');\n    this.element.setAttribute('aria-grabbed', 'false');\n    EventHandler.remove(document, Browser.touchMoveEvent, this.intDragStart);\n    EventHandler.remove(document, Browser.touchEndEvent, this.intDragStop);\n    EventHandler.remove(document, Browser.touchEndEvent, this.intDestroy);\n    EventHandler.remove(document, Browser.touchMoveEvent, this.intDrag);\n\n    if (this.isDragStarted()) {\n      this.isDragStarted(true);\n    }\n  }; // triggers when property changed\n\n\n  Draggable.prototype.onPropertyChanged = function (newProp, oldProp) {//No Code to handle\n  };\n\n  Draggable.prototype.getModuleName = function () {\n    return 'draggable';\n  };\n\n  Draggable.prototype.isDragStarted = function (change) {\n    if (change) {\n      isDraggedObject.isDragged = !isDraggedObject.isDragged;\n    }\n\n    return isDraggedObject.isDragged;\n  };\n\n  Draggable.prototype.setDragArea = function () {\n    var eleWidthBound;\n    var eleHeightBound;\n    var top = 0;\n    var left = 0;\n    var ele;\n    var type = typeof this.dragArea;\n\n    if (type === 'string') {\n      ele = select(this.dragArea);\n    } else {\n      ele = this.dragArea;\n    }\n\n    if (ele) {\n      var elementArea = ele.getBoundingClientRect();\n      eleWidthBound = ele.scrollWidth ? ele.scrollWidth : elementArea.right - elementArea.left;\n      eleHeightBound = ele.scrollHeight ? ele.scrollHeight : elementArea.bottom - elementArea.top;\n      var keys = ['Top', 'Left', 'Bottom', 'Right'];\n      var styles = getComputedStyle(ele);\n\n      for (var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        var tborder = styles['border' + key + 'Width'];\n        var tpadding = styles['padding' + key];\n        var lowerKey = key.toLowerCase();\n        this.borderWidth[lowerKey] = isNaN(parseFloat(tborder)) ? 0 : parseFloat(tborder);\n        this.padding[lowerKey] = isNaN(parseFloat(tpadding)) ? 0 : parseFloat(tpadding);\n      }\n\n      top = elementArea.top;\n      left = elementArea.left;\n      this.dragLimit.left = left + this.borderWidth.left + this.padding.left;\n      this.dragLimit.top = ele.offsetTop + this.borderWidth.top + this.padding.top;\n      this.dragLimit.right = left + eleWidthBound - (this.borderWidth.right + this.padding.right);\n      this.dragLimit.bottom = top + eleHeightBound - (this.borderWidth.bottom + this.padding.bottom);\n    }\n  };\n\n  Draggable.prototype.getProperTargetElement = function (evt) {\n    var intCoord = this.getCoordinates(evt);\n    var ele;\n    var prevStyle = this.helperElement.style.pointerEvents || '';\n\n    if (compareElementParent(evt.target, this.helperElement) || evt.type.indexOf('touch') !== -1) {\n      this.helperElement.style.pointerEvents = 'none';\n      ele = document.elementFromPoint(intCoord.clientX, intCoord.clientY);\n      this.helperElement.style.pointerEvents = prevStyle;\n    } else {\n      ele = evt.target;\n    }\n\n    return ele;\n  };\n\n  Draggable.prototype.getMousePosition = function (evt, isdragscroll) {\n    /* tslint:disable no-any */\n    var dragEle = evt.srcElement !== undefined ? evt.srcElement : evt.target;\n    var intCoord = this.getCoordinates(evt);\n    var pageX;\n    var pageY;\n    var isOffsetParent = isNullOrUndefined(dragEle.offsetParent);\n    /* istanbul ignore next */\n\n    if (isdragscroll) {\n      pageX = this.clone ? intCoord.pageX : intCoord.pageX + (isOffsetParent ? 0 : dragEle.offsetParent.scrollLeft) - this.relativeXPosition;\n      pageY = this.clone ? intCoord.pageY : intCoord.pageY + (isOffsetParent ? 0 : dragEle.offsetParent.scrollTop) - this.relativeYPosition;\n    } else {\n      pageX = this.clone ? intCoord.pageX : intCoord.pageX + window.pageXOffset - this.relativeXPosition;\n      pageY = this.clone ? intCoord.pageY : intCoord.pageY + window.pageYOffset - this.relativeYPosition;\n    }\n\n    return {\n      left: pageX - (this.margin.left + this.cursorAt.left),\n      top: pageY - (this.margin.top + this.cursorAt.top)\n    };\n  };\n\n  Draggable.prototype.getCoordinates = function (evt) {\n    if (evt.type.indexOf('touch') > -1) {\n      return evt.changedTouches[0];\n    }\n\n    return evt;\n  };\n\n  Draggable.prototype.getHelperElement = function (evt) {\n    var element;\n\n    if (this.clone) {\n      if (this.helper) {\n        element = this.helper({\n          sender: evt,\n          element: this.target\n        });\n      } else {\n        element = createElement('div', {\n          className: 'e-drag-helper e-block-touch',\n          innerHTML: 'Draggable'\n        });\n        document.body.appendChild(element);\n      }\n    } else {\n      element = this.element;\n    }\n\n    return element;\n  };\n\n  Draggable.prototype.setGlobalDroppables = function (reset, drag, helper) {\n    this.droppables[this.scope] = reset ? null : {\n      draggable: drag,\n      helper: helper,\n      draggedElement: this.element\n    };\n  };\n\n  Draggable.prototype.checkTargetElement = function (evt) {\n    var target = this.getProperTargetElement(evt);\n    var dropIns = this.getDropInstance(target);\n\n    if (!dropIns && target && !isNullOrUndefined(target.parentNode)) {\n      var parent_1 = closest(target.parentNode, '.e-droppable') || target.parentElement;\n\n      if (parent_1) {\n        dropIns = this.getDropInstance(parent_1);\n      }\n    }\n\n    return {\n      target: target,\n      instance: dropIns\n    };\n  };\n\n  Draggable.prototype.getDropInstance = function (ele) {\n    var name = 'getModuleName';\n    var drop;\n    var eleInst = ele && ele.ej2_instances;\n\n    if (eleInst) {\n      for (var _i = 0, eleInst_1 = eleInst; _i < eleInst_1.length; _i++) {\n        var inst = eleInst_1[_i];\n\n        if (inst[name]() === 'droppable') {\n          drop = inst;\n          break;\n        }\n      }\n    }\n\n    return drop;\n  };\n\n  Draggable.prototype.destroy = function () {\n    this.toggleEvents(true);\n\n    _super.prototype.destroy.call(this);\n  };\n\n  var Draggable_1;\n\n  __decorate([Complex({}, Position)], Draggable.prototype, \"cursorAt\", void 0);\n\n  __decorate([Property(true)], Draggable.prototype, \"clone\", void 0);\n\n  __decorate([Property()], Draggable.prototype, \"dragArea\", void 0);\n\n  __decorate([Property()], Draggable.prototype, \"isDragScroll\", void 0);\n\n  __decorate([Event()], Draggable.prototype, \"drag\", void 0);\n\n  __decorate([Event()], Draggable.prototype, \"dragStart\", void 0);\n\n  __decorate([Event()], Draggable.prototype, \"dragStop\", void 0);\n\n  __decorate([Property(1)], Draggable.prototype, \"distance\", void 0);\n\n  __decorate([Property()], Draggable.prototype, \"handle\", void 0);\n\n  __decorate([Property()], Draggable.prototype, \"abort\", void 0);\n\n  __decorate([Property()], Draggable.prototype, \"helper\", void 0);\n\n  __decorate([Property('default')], Draggable.prototype, \"scope\", void 0);\n\n  __decorate([Property('')], Draggable.prototype, \"dragTarget\", void 0);\n\n  __decorate([Property()], Draggable.prototype, \"axis\", void 0);\n\n  __decorate([Property()], Draggable.prototype, \"queryPositionInfo\", void 0);\n\n  __decorate([Property(false)], Draggable.prototype, \"enableTailMode\", void 0);\n\n  __decorate([Property(false)], Draggable.prototype, \"skipDistanceCheck\", void 0);\n\n  __decorate([Property(true)], Draggable.prototype, \"preventDefault\", void 0);\n\n  __decorate([Property(false)], Draggable.prototype, \"enableAutoScroll\", void 0);\n\n  __decorate([Property(false)], Draggable.prototype, \"enableTapHold\", void 0);\n\n  __decorate([Property(750)], Draggable.prototype, \"tapHoldThreshold\", void 0);\n\n  Draggable = Draggable_1 = __decorate([NotifyPropertyChanges], Draggable);\n  return Draggable;\n}(Base);\n\nexport { Draggable };","map":null,"metadata":{},"sourceType":"module"}