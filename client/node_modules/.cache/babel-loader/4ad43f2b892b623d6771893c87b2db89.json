{"ast":null,"code":"/**\r\n * DevExtreme (ui/validation_engine.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _class = require(\"../core/class\");\n\nvar _class2 = _interopRequireDefault(_class);\n\nvar _extend = require(\"../core/utils/extend\");\n\nvar _array = require(\"../core/utils/array\");\n\nvar _iterator = require(\"../core/utils/iterator\");\n\nvar _events_strategy = require(\"../core/events_strategy\");\n\nvar _errors = require(\"../core/errors\");\n\nvar _errors2 = _interopRequireDefault(_errors);\n\nvar _common = require(\"../core/utils/common\");\n\nvar _type = require(\"../core/utils/type\");\n\nvar _type2 = _interopRequireDefault(_type);\n\nvar _number = require(\"../localization/number\");\n\nvar _number2 = _interopRequireDefault(_number);\n\nvar _message = require(\"../localization/message\");\n\nvar _message2 = _interopRequireDefault(_message);\n\nvar _promise = require(\"../core/polyfills/promise\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _deferred = require(\"../core/utils/deferred\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (\"function\" !== typeof superClass && null !== superClass) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (superClass) {\n    _setPrototypeOf(subClass, superClass);\n  }\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function (o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var result,\n        Super = _getPrototypeOf(Derived);\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (\"object\" === _typeof(call) || \"function\" === typeof call)) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (void 0 === self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (\"undefined\" === typeof Reflect || !Reflect.construct) {\n    return false;\n  }\n\n  if (Reflect.construct.sham) {\n    return false;\n  }\n\n  if (\"function\" === typeof Proxy) {\n    return true;\n  }\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function (o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nvar STATUS = {\n  valid: \"valid\",\n  invalid: \"invalid\",\n  pending: \"pending\"\n};\n\nvar BaseRuleValidator = function () {\n  function BaseRuleValidator() {\n    _classCallCheck(this, BaseRuleValidator);\n\n    this.NAME = \"base\";\n  }\n\n  _createClass(BaseRuleValidator, [{\n    key: \"defaultMessage\",\n    value: function (value) {\n      return _message2.default.getFormatter(\"validation-\".concat(this.NAME))(value);\n    }\n  }, {\n    key: \"defaultFormattedMessage\",\n    value: function (value) {\n      return _message2.default.getFormatter(\"validation-\".concat(this.NAME, \"-formatted\"))(value);\n    }\n  }, {\n    key: \"_isValueEmpty\",\n    value: function (value) {\n      return !rulesValidators.required.validate(value, {});\n    }\n  }, {\n    key: \"validate\",\n    value: function (value, rule) {\n      var _this = this;\n\n      var valueArray = Array.isArray(value) ? value : [value];\n      var result = true;\n\n      if (valueArray.length) {\n        valueArray.every(function (itemValue) {\n          result = _this._validate(itemValue, rule);\n          return result;\n        });\n      } else {\n        result = this._validate(null, rule);\n      }\n\n      return result;\n    }\n  }]);\n\n  return BaseRuleValidator;\n}();\n\nvar RequiredRuleValidator = function (_BaseRuleValidator) {\n  _inherits(RequiredRuleValidator, _BaseRuleValidator);\n\n  var _super = _createSuper(RequiredRuleValidator);\n\n  function RequiredRuleValidator() {\n    var _this2;\n\n    _classCallCheck(this, RequiredRuleValidator);\n\n    _this2 = _super.call(this);\n    _this2.NAME = \"required\";\n    return _this2;\n  }\n\n  _createClass(RequiredRuleValidator, [{\n    key: \"_validate\",\n    value: function (value, rule) {\n      if (!_type2.default.isDefined(value)) {\n        return false;\n      }\n\n      if (false === value) {\n        return false;\n      }\n\n      value = String(value);\n\n      if (rule.trim || !_type2.default.isDefined(rule.trim)) {\n        value = value.trim();\n      }\n\n      return \"\" !== value;\n    }\n  }]);\n\n  return RequiredRuleValidator;\n}(BaseRuleValidator);\n\nvar NumericRuleValidator = function (_BaseRuleValidator2) {\n  _inherits(NumericRuleValidator, _BaseRuleValidator2);\n\n  var _super2 = _createSuper(NumericRuleValidator);\n\n  function NumericRuleValidator() {\n    var _this3;\n\n    _classCallCheck(this, NumericRuleValidator);\n\n    _this3 = _super2.call(this);\n    _this3.NAME = \"numeric\";\n    return _this3;\n  }\n\n  _createClass(NumericRuleValidator, [{\n    key: \"_validate\",\n    value: function (value, rule) {\n      if (false !== rule.ignoreEmptyValue && this._isValueEmpty(value)) {\n        return true;\n      }\n\n      if (rule.useCultureSettings && _type2.default.isString(value)) {\n        return !isNaN(_number2.default.parse(value));\n      } else {\n        return _type2.default.isNumeric(value);\n      }\n    }\n  }]);\n\n  return NumericRuleValidator;\n}(BaseRuleValidator);\n\nvar RangeRuleValidator = function (_BaseRuleValidator3) {\n  _inherits(RangeRuleValidator, _BaseRuleValidator3);\n\n  var _super3 = _createSuper(RangeRuleValidator);\n\n  function RangeRuleValidator() {\n    var _this4;\n\n    _classCallCheck(this, RangeRuleValidator);\n\n    _this4 = _super3.call(this);\n    _this4.NAME = \"range\";\n    return _this4;\n  }\n\n  _createClass(RangeRuleValidator, [{\n    key: \"_validate\",\n    value: function (value, rule) {\n      if (false !== rule.ignoreEmptyValue && this._isValueEmpty(value)) {\n        return true;\n      }\n\n      var validNumber = rulesValidators.numeric.validate(value, rule);\n      var validValue = _type2.default.isDefined(value) && \"\" !== value;\n      var number = validNumber ? parseFloat(value) : validValue && value.valueOf();\n      var min = rule.min;\n      var max = rule.max;\n\n      if (!(validNumber || _type2.default.isDate(value)) && !validValue) {\n        return false;\n      }\n\n      if (_type2.default.isDefined(min)) {\n        if (_type2.default.isDefined(max)) {\n          return number >= min && number <= max;\n        }\n\n        return number >= min;\n      } else {\n        if (_type2.default.isDefined(max)) {\n          return number <= max;\n        } else {\n          throw _errors2.default.Error(\"E0101\");\n        }\n      }\n    }\n  }]);\n\n  return RangeRuleValidator;\n}(BaseRuleValidator);\n\nvar StringLengthRuleValidator = function (_BaseRuleValidator4) {\n  _inherits(StringLengthRuleValidator, _BaseRuleValidator4);\n\n  var _super4 = _createSuper(StringLengthRuleValidator);\n\n  function StringLengthRuleValidator() {\n    var _this5;\n\n    _classCallCheck(this, StringLengthRuleValidator);\n\n    _this5 = _super4.call(this);\n    _this5.NAME = \"stringLength\";\n    return _this5;\n  }\n\n  _createClass(StringLengthRuleValidator, [{\n    key: \"_validate\",\n    value: function (value, rule) {\n      value = _type2.default.isDefined(value) ? String(value) : \"\";\n\n      if (rule.trim || !_type2.default.isDefined(rule.trim)) {\n        value = value.trim();\n      }\n\n      if (rule.ignoreEmptyValue && this._isValueEmpty(value)) {\n        return true;\n      }\n\n      return rulesValidators.range.validate(value.length, (0, _extend.extend)({}, rule));\n    }\n  }]);\n\n  return StringLengthRuleValidator;\n}(BaseRuleValidator);\n\nvar CustomRuleValidator = function (_BaseRuleValidator5) {\n  _inherits(CustomRuleValidator, _BaseRuleValidator5);\n\n  var _super5 = _createSuper(CustomRuleValidator);\n\n  function CustomRuleValidator() {\n    var _this6;\n\n    _classCallCheck(this, CustomRuleValidator);\n\n    _this6 = _super5.call(this);\n    _this6.NAME = \"custom\";\n    return _this6;\n  }\n\n  _createClass(CustomRuleValidator, [{\n    key: \"validate\",\n    value: function (value, rule) {\n      if (rule.ignoreEmptyValue && this._isValueEmpty(value)) {\n        return true;\n      }\n\n      var validator = rule.validator;\n      var dataGetter = validator && _type2.default.isFunction(validator.option) && validator.option(\"dataGetter\");\n      var extraParams = _type2.default.isFunction(dataGetter) && dataGetter();\n      var params = {\n        value: value,\n        validator: validator,\n        rule: rule\n      };\n\n      if (extraParams) {\n        (0, _extend.extend)(params, extraParams);\n      }\n\n      return rule.validationCallback(params);\n    }\n  }]);\n\n  return CustomRuleValidator;\n}(BaseRuleValidator);\n\nvar AsyncRuleValidator = function (_CustomRuleValidator) {\n  _inherits(AsyncRuleValidator, _CustomRuleValidator);\n\n  var _super6 = _createSuper(AsyncRuleValidator);\n\n  function AsyncRuleValidator() {\n    var _this7;\n\n    _classCallCheck(this, AsyncRuleValidator);\n\n    _this7 = _super6.call(this);\n    _this7.NAME = \"async\";\n    return _this7;\n  }\n\n  _createClass(AsyncRuleValidator, [{\n    key: \"validate\",\n    value: function (value, rule) {\n      if (!_type2.default.isDefined(rule.reevaluate)) {\n        (0, _extend.extend)(rule, {\n          reevaluate: true\n        });\n      }\n\n      if (rule.ignoreEmptyValue && this._isValueEmpty(value)) {\n        return true;\n      }\n\n      var validator = rule.validator;\n      var dataGetter = validator && _type2.default.isFunction(validator.option) && validator.option(\"dataGetter\");\n      var extraParams = _type2.default.isFunction(dataGetter) && dataGetter();\n      var params = {\n        value: value,\n        validator: validator,\n        rule: rule\n      };\n\n      if (extraParams) {\n        (0, _extend.extend)(params, extraParams);\n      }\n\n      var callbackResult = rule.validationCallback(params);\n\n      if (!_type2.default.isPromise(callbackResult)) {\n        throw _errors2.default.Error(\"E0103\");\n      }\n\n      return this._getWrappedPromise((0, _deferred.fromPromise)(callbackResult).promise());\n    }\n  }, {\n    key: \"_getWrappedPromise\",\n    value: function (promise) {\n      var deferred = new _deferred.Deferred();\n      promise.then(function (res) {\n        deferred.resolve(res);\n      }, function (err) {\n        var res = {\n          isValid: false\n        };\n\n        if (_type2.default.isDefined(err)) {\n          if (_type2.default.isString(err)) {\n            res.message = err;\n          } else {\n            if (_type2.default.isObject(err) && _type2.default.isDefined(err.message) && _type2.default.isString(err.message)) {\n              res.message = err.message;\n            }\n          }\n        }\n\n        deferred.resolve(res);\n      });\n      return deferred.promise();\n    }\n  }]);\n\n  return AsyncRuleValidator;\n}(CustomRuleValidator);\n\nvar CompareRuleValidator = function (_BaseRuleValidator6) {\n  _inherits(CompareRuleValidator, _BaseRuleValidator6);\n\n  var _super7 = _createSuper(CompareRuleValidator);\n\n  function CompareRuleValidator() {\n    var _this8;\n\n    _classCallCheck(this, CompareRuleValidator);\n\n    _this8 = _super7.call(this);\n    _this8.NAME = \"compare\";\n    return _this8;\n  }\n\n  _createClass(CompareRuleValidator, [{\n    key: \"_validate\",\n    value: function (value, rule) {\n      if (!rule.comparisonTarget) {\n        throw _errors2.default.Error(\"E0102\");\n      }\n\n      if (rule.ignoreEmptyValue && this._isValueEmpty(value)) {\n        return true;\n      }\n\n      (0, _extend.extend)(rule, {\n        reevaluate: true\n      });\n      var otherValue = rule.comparisonTarget();\n      var type = rule.comparisonType || \"==\";\n\n      switch (type) {\n        case \"==\":\n          return value == otherValue;\n\n        case \"!=\":\n          return value != otherValue;\n\n        case \"===\":\n          return value === otherValue;\n\n        case \"!==\":\n          return value !== otherValue;\n\n        case \">\":\n          return value > otherValue;\n\n        case \">=\":\n          return value >= otherValue;\n\n        case \"<\":\n          return value < otherValue;\n\n        case \"<=\":\n          return value <= otherValue;\n      }\n    }\n  }]);\n\n  return CompareRuleValidator;\n}(BaseRuleValidator);\n\nvar PatternRuleValidator = function (_BaseRuleValidator7) {\n  _inherits(PatternRuleValidator, _BaseRuleValidator7);\n\n  var _super8 = _createSuper(PatternRuleValidator);\n\n  function PatternRuleValidator() {\n    var _this9;\n\n    _classCallCheck(this, PatternRuleValidator);\n\n    _this9 = _super8.call(this);\n    _this9.NAME = \"pattern\";\n    return _this9;\n  }\n\n  _createClass(PatternRuleValidator, [{\n    key: \"_validate\",\n    value: function (value, rule) {\n      if (false !== rule.ignoreEmptyValue && this._isValueEmpty(value)) {\n        return true;\n      }\n\n      var pattern = rule.pattern;\n\n      if (_type2.default.isString(pattern)) {\n        pattern = new RegExp(pattern);\n      }\n\n      return pattern.test(value);\n    }\n  }]);\n\n  return PatternRuleValidator;\n}(BaseRuleValidator);\n\nvar EmailRuleValidator = function (_BaseRuleValidator8) {\n  _inherits(EmailRuleValidator, _BaseRuleValidator8);\n\n  var _super9 = _createSuper(EmailRuleValidator);\n\n  function EmailRuleValidator() {\n    var _this10;\n\n    _classCallCheck(this, EmailRuleValidator);\n\n    _this10 = _super9.call(this);\n    _this10.NAME = \"email\";\n    return _this10;\n  }\n\n  _createClass(EmailRuleValidator, [{\n    key: \"_validate\",\n    value: function (value, rule) {\n      if (false !== rule.ignoreEmptyValue && this._isValueEmpty(value)) {\n        return true;\n      }\n\n      return rulesValidators.pattern.validate(value, (0, _extend.extend)({}, rule, {\n        pattern: /^[\\d\\w._-]+@([\\d\\w._-]+\\.)+[\\w]+$/i\n      }));\n    }\n  }]);\n\n  return EmailRuleValidator;\n}(BaseRuleValidator);\n\nvar rulesValidators = {\n  required: new RequiredRuleValidator(),\n  numeric: new NumericRuleValidator(),\n  range: new RangeRuleValidator(),\n  stringLength: new StringLengthRuleValidator(),\n  custom: new CustomRuleValidator(),\n  async: new AsyncRuleValidator(),\n  compare: new CompareRuleValidator(),\n  pattern: new PatternRuleValidator(),\n  email: new EmailRuleValidator()\n};\n\nvar GroupConfig = _class2.default.inherit({\n  ctor: function (group) {\n    this.group = group;\n    this.validators = [];\n    this._pendingValidators = [];\n    this._onValidatorStatusChanged = this._onValidatorStatusChanged.bind(this);\n\n    this._resetValidationInfo();\n\n    this._eventsStrategy = new _events_strategy.EventsStrategy(this);\n  },\n  validate: function () {\n    var _this11 = this;\n\n    var result = {\n      isValid: true,\n      brokenRules: [],\n      validators: [],\n      status: STATUS.valid,\n      complete: null\n    };\n\n    this._unsubscribeFromAllChangeEvents();\n\n    this._pendingValidators = [];\n\n    this._resetValidationInfo();\n\n    (0, _iterator.each)(this.validators, function (_, validator) {\n      var validatorResult = validator.validate();\n      result.isValid = result.isValid && validatorResult.isValid;\n\n      if (validatorResult.brokenRules) {\n        result.brokenRules = result.brokenRules.concat(validatorResult.brokenRules);\n      }\n\n      result.validators.push(validator);\n\n      if (validatorResult.status === STATUS.pending) {\n        _this11._addPendingValidator(validator);\n      }\n\n      _this11._subscribeToChangeEvents(validator);\n    });\n\n    if (this._pendingValidators.length) {\n      result.status = STATUS.pending;\n    } else {\n      result.status = result.isValid ? STATUS.valid : STATUS.invalid;\n\n      this._unsubscribeFromAllChangeEvents();\n\n      this._raiseValidatedEvent(result);\n    }\n\n    this._updateValidationInfo(result);\n\n    return (0, _extend.extend)({}, this._validationInfo.result);\n  },\n  _subscribeToChangeEvents: function (validator) {\n    validator.on(\"validating\", this._onValidatorStatusChanged);\n    validator.on(\"validated\", this._onValidatorStatusChanged);\n  },\n  _unsubscribeFromChangeEvents: function (validator) {\n    validator.off(\"validating\", this._onValidatorStatusChanged);\n    validator.off(\"validated\", this._onValidatorStatusChanged);\n  },\n  _unsubscribeFromAllChangeEvents: function () {\n    var _this12 = this;\n\n    (0, _iterator.each)(this.validators, function (_, validator) {\n      _this12._unsubscribeFromChangeEvents(validator);\n    });\n  },\n  _updateValidationInfo: function (result) {\n    this._validationInfo.result = result;\n\n    if (result.status !== STATUS.pending) {\n      return;\n    }\n\n    if (!this._validationInfo.deferred) {\n      this._validationInfo.deferred = new _deferred.Deferred();\n      this._validationInfo.result.complete = this._validationInfo.deferred.promise();\n    }\n  },\n  _addPendingValidator: function (validator) {\n    var foundValidator = (0, _common.grep)(this._pendingValidators, function (val) {\n      return val === validator;\n    })[0];\n\n    if (!foundValidator) {\n      this._pendingValidators.push(validator);\n    }\n  },\n  _removePendingValidator: function (validator) {\n    var index = (0, _array.inArray)(validator, this._pendingValidators);\n\n    if (index >= 0) {\n      this._pendingValidators.splice(index, 1);\n    }\n  },\n  _orderBrokenRules: function (brokenRules) {\n    var orderedRules = [];\n    (0, _iterator.each)(this.validators, function (_, validator) {\n      var foundRules = (0, _common.grep)(brokenRules, function (rule) {\n        return rule.validator === validator;\n      });\n\n      if (foundRules.length) {\n        orderedRules = orderedRules.concat(foundRules);\n      }\n    });\n    return orderedRules;\n  },\n  _updateBrokenRules: function (result) {\n    if (!this._validationInfo.result) {\n      return;\n    }\n\n    var brokenRules = this._validationInfo.result.brokenRules;\n    var rules = (0, _common.grep)(brokenRules, function (rule) {\n      return rule.validator !== result.validator;\n    });\n\n    if (result.brokenRules) {\n      brokenRules = rules.concat(result.brokenRules);\n    }\n\n    this._validationInfo.result.brokenRules = this._orderBrokenRules(brokenRules);\n  },\n  _onValidatorStatusChanged: function (result) {\n    if (result.status === STATUS.pending) {\n      this._addPendingValidator(result.validator);\n\n      return;\n    }\n\n    this._resolveIfComplete(result);\n  },\n  _resolveIfComplete: function (result) {\n    this._removePendingValidator(result.validator);\n\n    this._updateBrokenRules(result);\n\n    if (!this._pendingValidators.length) {\n      this._unsubscribeFromAllChangeEvents();\n\n      if (!this._validationInfo.result) {\n        return;\n      }\n\n      this._validationInfo.result.status = 0 === this._validationInfo.result.brokenRules.length ? STATUS.valid : STATUS.invalid;\n      this._validationInfo.result.isValid = this._validationInfo.result.status === STATUS.valid;\n      var res = (0, _extend.extend)({}, this._validationInfo.result, {\n        complete: null\n      });\n      var deferred = this._validationInfo.deferred;\n\n      this._resetValidationInfo();\n\n      this._raiseValidatedEvent(res);\n\n      deferred && setTimeout(function () {\n        deferred.resolve(res);\n      });\n    }\n  },\n  _raiseValidatedEvent: function (result) {\n    this._eventsStrategy.fireEvent(\"validated\", [result]);\n  },\n  _resetValidationInfo: function () {\n    this._validationInfo = {\n      result: null,\n      deferred: null\n    };\n  },\n  _synchronizeValidationInfo: function () {\n    if (this._validationInfo.result) {\n      this._validationInfo.result.validators = this.validators;\n    }\n  },\n  removeRegisteredValidator: function (validator) {\n    var index = (0, _array.inArray)(validator, this.validators);\n\n    if (index > -1) {\n      this.validators.splice(index, 1);\n\n      this._synchronizeValidationInfo();\n\n      this._resolveIfComplete({\n        validator: validator\n      });\n    }\n  },\n  registerValidator: function (validator) {\n    if ((0, _array.inArray)(validator, this.validators) < 0) {\n      this.validators.push(validator);\n\n      this._synchronizeValidationInfo();\n    }\n  },\n  reset: function () {\n    (0, _iterator.each)(this.validators, function (_, validator) {\n      validator.reset();\n    });\n    this._pendingValidators = [];\n\n    this._resetValidationInfo();\n  },\n  on: function (eventName, eventHandler) {\n    this._eventsStrategy.on(eventName, eventHandler);\n\n    return this;\n  },\n  off: function (eventName, eventHandler) {\n    this._eventsStrategy.off(eventName, eventHandler);\n\n    return this;\n  }\n});\n\nvar ValidationEngine = {\n  groups: [],\n  getGroupConfig: function (group) {\n    var result = (0, _common.grep)(this.groups, function (config) {\n      return config.group === group;\n    });\n\n    if (result.length) {\n      return result[0];\n    }\n  },\n  findGroup: function ($element, model) {\n    var $dxGroup = $element.parents(\".dx-validationgroup\").first();\n\n    if ($dxGroup.length) {\n      return $dxGroup.dxValidationGroup(\"instance\");\n    }\n\n    return model;\n  },\n  initGroups: function () {\n    this.groups = [];\n    this.addGroup();\n  },\n  addGroup: function (group) {\n    var config = this.getGroupConfig(group);\n\n    if (!config) {\n      config = new GroupConfig(group);\n      this.groups.push(config);\n    }\n\n    return config;\n  },\n  removeGroup: function (group) {\n    var config = this.getGroupConfig(group);\n    var index = (0, _array.inArray)(config, this.groups);\n\n    if (index > -1) {\n      this.groups.splice(index, 1);\n    }\n\n    return config;\n  },\n  _setDefaultMessage: function (info) {\n    var rule = info.rule,\n        validator = info.validator,\n        name = info.name;\n\n    if (!_type2.default.isDefined(rule.message)) {\n      if (validator.defaultFormattedMessage && _type2.default.isDefined(name)) {\n        rule.message = validator.defaultFormattedMessage(name);\n      } else {\n        rule.message = validator.defaultMessage();\n      }\n    }\n  },\n  _addBrokenRule: function (info) {\n    var result = info.result,\n        rule = info.rule;\n\n    if (!result.brokenRule) {\n      result.brokenRule = rule;\n    }\n\n    if (!result.brokenRules) {\n      result.brokenRules = [];\n    }\n\n    result.brokenRules.push(rule);\n  },\n  validate: function (value, rules, name) {\n    var _this13 = this;\n\n    var result = {\n      name: name,\n      value: value,\n      brokenRule: null,\n      brokenRules: null,\n      isValid: true,\n      validationRules: rules,\n      pendingRules: null,\n      status: STATUS.valid,\n      complete: null\n    };\n    var asyncRuleItems = [];\n    (0, _iterator.each)(rules || [], function (_, rule) {\n      var ruleValidator = rulesValidators[rule.type];\n      var ruleValidationResult;\n\n      if (ruleValidator) {\n        if (_type2.default.isDefined(rule.isValid) && rule.value === value && !rule.reevaluate) {\n          if (!rule.isValid) {\n            result.isValid = false;\n\n            _this13._addBrokenRule({\n              result: result,\n              rule: rule\n            });\n\n            return false;\n          }\n\n          return true;\n        }\n\n        rule.value = value;\n\n        if (\"async\" === rule.type) {\n          asyncRuleItems.push({\n            rule: rule,\n            ruleValidator: ruleValidator\n          });\n          return true;\n        }\n\n        ruleValidationResult = ruleValidator.validate(value, rule);\n        rule.isValid = ruleValidationResult;\n\n        if (!ruleValidationResult) {\n          result.isValid = false;\n\n          _this13._setDefaultMessage({\n            rule: rule,\n            validator: ruleValidator,\n            name: name\n          });\n\n          _this13._addBrokenRule({\n            result: result,\n            rule: rule\n          });\n        }\n\n        if (!rule.isValid) {\n          return false;\n        }\n      } else {\n        throw _errors2.default.Error(\"E0100\");\n      }\n    });\n\n    if (result.isValid && !result.brokenRules && asyncRuleItems.length) {\n      result = this._validateAsyncRules({\n        value: value,\n        items: asyncRuleItems,\n        result: result,\n        name: name\n      });\n    }\n\n    result.status = result.pendingRules ? STATUS.pending : result.isValid ? STATUS.valid : STATUS.invalid;\n    return result;\n  },\n  _validateAsyncRules: function (_ref) {\n    var _this14 = this;\n\n    var result = _ref.result,\n        value = _ref.value,\n        items = _ref.items,\n        name = _ref.name;\n    var asyncResults = [];\n    (0, _iterator.each)(items, function (_, item) {\n      var validateResult = item.ruleValidator.validate(value, item.rule);\n\n      if (!_type2.default.isPromise(validateResult)) {\n        _this14._updateRuleConfig({\n          rule: item.rule,\n          ruleResult: _this14._getPatchedRuleResult(validateResult),\n          validator: item.ruleValidator,\n          name: name\n        });\n      } else {\n        if (!result.pendingRules) {\n          result.pendingRules = [];\n        }\n\n        result.pendingRules.push(item.rule);\n        var asyncResult = validateResult.then(function (res) {\n          var ruleResult = _this14._getPatchedRuleResult(res);\n\n          _this14._updateRuleConfig({\n            rule: item.rule,\n            ruleResult: ruleResult,\n            validator: item.ruleValidator,\n            name: name\n          });\n\n          return ruleResult;\n        });\n        asyncResults.push(asyncResult);\n      }\n    });\n\n    if (asyncResults.length) {\n      result.complete = _promise2.default.all(asyncResults).then(function (values) {\n        return _this14._getAsyncRulesResult({\n          result: result,\n          values: values\n        });\n      });\n    }\n\n    return result;\n  },\n  _updateRuleConfig: function (_ref2) {\n    var rule = _ref2.rule,\n        ruleResult = _ref2.ruleResult,\n        validator = _ref2.validator,\n        name = _ref2.name;\n    rule.isValid = ruleResult.isValid;\n\n    if (!ruleResult.isValid) {\n      if (_type2.default.isDefined(ruleResult.message) && _type2.default.isString(ruleResult.message) && ruleResult.message.length) {\n        rule.message = ruleResult.message;\n      } else {\n        this._setDefaultMessage({\n          rule: rule,\n          validator: validator,\n          name: name\n        });\n      }\n    }\n  },\n  _getPatchedRuleResult: function (ruleResult) {\n    var result;\n    var isValid = true;\n\n    if (_type2.default.isObject(ruleResult)) {\n      result = (0, _extend.extend)({}, ruleResult);\n\n      if (!_type2.default.isDefined(result.isValid)) {\n        result.isValid = isValid;\n      }\n    } else {\n      result = {\n        isValid: _type2.default.isBoolean(ruleResult) ? ruleResult : isValid\n      };\n    }\n\n    return result;\n  },\n  _getAsyncRulesResult: function (_ref3) {\n    var _this15 = this;\n\n    var values = _ref3.values,\n        result = _ref3.result;\n    (0, _iterator.each)(values, function (index, val) {\n      if (false === val.isValid) {\n        result.isValid = val.isValid;\n        var rule = result.pendingRules[index];\n\n        _this15._addBrokenRule({\n          result: result,\n          rule: rule\n        });\n      }\n    });\n    result.pendingRules = null;\n    result.complete = null;\n    result.status = result.isValid ? STATUS.valid : STATUS.invalid;\n    return result;\n  },\n  registerValidatorInGroup: function (group, validator) {\n    var groupConfig = ValidationEngine.addGroup(group);\n    groupConfig.registerValidator.call(groupConfig, validator);\n  },\n  _shouldRemoveGroup: function (group, validatorsInGroup) {\n    var isDefaultGroup = void 0 === group;\n    var isValidationGroupInstance = group && \"dxValidationGroup\" === group.NAME;\n    return !isDefaultGroup && !isValidationGroupInstance && !validatorsInGroup.length;\n  },\n  removeRegisteredValidator: function (group, validator) {\n    var config = ValidationEngine.getGroupConfig(group);\n\n    if (config) {\n      config.removeRegisteredValidator.call(config, validator);\n      var validatorsInGroup = config.validators;\n\n      if (this._shouldRemoveGroup(group, validatorsInGroup)) {\n        this.removeGroup(group);\n      }\n    }\n  },\n  initValidationOptions: function (options) {\n    var _this16 = this;\n\n    var initedOptions = {};\n\n    if (options) {\n      var syncOptions = [\"isValid\", \"validationStatus\", \"validationError\", \"validationErrors\"];\n      syncOptions.forEach(function (prop) {\n        if (prop in options) {\n          (0, _extend.extend)(initedOptions, _this16.synchronizeValidationOptions({\n            name: prop,\n            value: options[prop]\n          }, options));\n        }\n      });\n    }\n\n    return initedOptions;\n  },\n  synchronizeValidationOptions: function (_ref4, options) {\n    var name = _ref4.name,\n        value = _ref4.value;\n\n    switch (name) {\n      case \"validationStatus\":\n        var isValid = value === STATUS.valid || value === STATUS.pending;\n        return options.isValid !== isValid ? {\n          isValid: isValid\n        } : {};\n\n      case \"isValid\":\n        var validationStatus = options.validationStatus;\n        var newStatus = validationStatus;\n\n        if (value && validationStatus === STATUS.invalid) {\n          newStatus = STATUS.valid;\n        } else {\n          if (!value && validationStatus !== STATUS.invalid) {\n            newStatus = STATUS.invalid;\n          }\n        }\n\n        return newStatus !== validationStatus ? {\n          validationStatus: newStatus\n        } : {};\n\n      case \"validationErrors\":\n        var validationError = !value || !value.length ? null : value[0];\n        return options.validationError !== validationError ? {\n          validationError: validationError\n        } : {};\n\n      case \"validationError\":\n        var validationErrors = options.validationErrors;\n\n        if (!value && validationErrors) {\n          return {\n            validationErrors: null\n          };\n        } else {\n          if (value && !validationErrors) {\n            return {\n              validationErrors: [value]\n            };\n          } else {\n            if (value && validationErrors && value !== validationErrors[0]) {\n              validationErrors[0] = value;\n              return {\n                validationErrors: validationErrors.slice()\n              };\n            }\n          }\n        }\n\n    }\n\n    return {};\n  },\n  validateGroup: function (group) {\n    var groupConfig = ValidationEngine.getGroupConfig(group);\n\n    if (!groupConfig) {\n      throw _errors2.default.Error(\"E0110\");\n    }\n\n    return groupConfig.validate();\n  },\n  resetGroup: function (group) {\n    var groupConfig = ValidationEngine.getGroupConfig(group);\n\n    if (!groupConfig) {\n      throw _errors2.default.Error(\"E0110\");\n    }\n\n    return groupConfig.reset();\n  }\n};\nValidationEngine.initGroups();\nmodule.exports = ValidationEngine;\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}