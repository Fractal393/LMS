{"ast":null,"code":"import { extend, isNullOrUndefined, isBlazor } from '@syncfusion/ej2-base';\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\nimport { Query, DataManager, DataUtil, Predicate } from '@syncfusion/ej2-data';\nimport { isEditable, getComplexFieldID, getObject } from '../base/util';\nimport { parentsUntil } from '../base/util';\n/**\n * `DropDownEditCell` is used to handle dropdown cell type editing.\n * @hidden\n */\n\nvar DropDownEditCell =\n/** @class */\nfunction () {\n  function DropDownEditCell(parent) {\n    //constructor\n    this.parent = parent;\n    this.flag = false;\n  }\n\n  DropDownEditCell.prototype.create = function (args) {\n    //create\n    var complexFieldName = getComplexFieldID(args.column.field);\n    return this.parent.createElement('input', {\n      className: 'e-field',\n      attrs: {\n        id: this.parent.element.id + complexFieldName,\n        name: complexFieldName,\n        type: 'text',\n        'e-mappinguid': args.column.uid\n      }\n    });\n  };\n\n  DropDownEditCell.prototype.write = function (args) {\n    this.column = args.column;\n    var isInline = this.parent.editSettings.mode !== 'Dialog';\n    var pred = new Predicate(args.column.field, 'notequal', null, true, false);\n    this.obj = new DropDownList(extend({\n      dataSource: this.parent.dataSource instanceof DataManager ? this.parent.dataSource : new DataManager(this.parent.dataSource),\n      query: new Query().where(pred).select(args.column.field),\n      enabled: isEditable(args.column, args.requestType, args.element),\n      fields: {\n        value: args.column.field\n      },\n      value: getObject(args.column.field, args.rowData),\n      enableRtl: this.parent.enableRtl,\n      actionComplete: this.ddActionComplete.bind(this),\n      created: this.dropdownCreated.bind(this),\n      placeholder: isInline ? '' : args.column.headerText,\n      popupHeight: '200px',\n      floatLabelType: isInline ? 'Never' : 'Always',\n      open: this.dropDownOpen.bind(this),\n      sortOrder: 'Ascending'\n    }, args.column.edit.params));\n    this.obj.query.params = this.parent.query.params;\n\n    if (isBlazor()) {\n      this.obj.locale = this.parent.locale;\n    }\n\n    this.obj.appendTo(args.element);\n    /* tslint:disable-next-line:no-any */\n\n    args.element.setAttribute('name', getComplexFieldID(args.column.field));\n  };\n\n  DropDownEditCell.prototype.read = function (element) {\n    return element.ej2_instances[0].value;\n  };\n\n  DropDownEditCell.prototype.dropdownCreated = function (e) {\n    this.flag = true;\n  };\n\n  DropDownEditCell.prototype.ddActionComplete = function (e) {\n    e.result = DataUtil.distinct(e.result, this.obj.fields.value, true);\n\n    if (this.flag && this.column.dataSource) {\n      if ('result' in this.column.dataSource) {\n        this.column.dataSource.result = e.result;\n      } else if (this.column.dataSource instanceof DataManager) {\n        this.column.dataSource.dataSource.json = e.result;\n      }\n    }\n\n    this.flag = false;\n  };\n\n  DropDownEditCell.prototype.dropDownOpen = function (args) {\n    var dlgElement = parentsUntil(this.obj.element, 'e-dialog');\n\n    if (this.parent.editSettings.mode === 'Dialog' && !isNullOrUndefined(dlgElement)) {\n      var dlgObj = document.querySelector('#' + dlgElement.id).ej2_instances[0];\n      args.popup.element.style.zIndex = (dlgObj.zIndex + 1).toString();\n    }\n  };\n\n  DropDownEditCell.prototype.destroy = function () {\n    if (this.obj) {\n      this.obj.destroy();\n    }\n  };\n\n  return DropDownEditCell;\n}();\n\nexport { DropDownEditCell };","map":null,"metadata":{},"sourceType":"module"}