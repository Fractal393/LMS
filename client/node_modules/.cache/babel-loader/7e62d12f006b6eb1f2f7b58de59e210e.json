{"ast":null,"code":"import { isNullOrUndefined, extend } from '@syncfusion/ej2-base';\nimport { setStyleAttribute, closest as getClosest, remove, isBlazor } from '@syncfusion/ej2-base';\nimport { classList } from '@syncfusion/ej2-base';\nimport { CellType } from '../base/enum';\nimport { RowRenderer } from './row-renderer';\nimport { Cell } from '../models/cell';\nimport { Row } from '../models/row';\nimport * as events from '../base/constant';\nimport { Draggable, Droppable } from '@syncfusion/ej2-base';\nimport { parentsUntil, wrap, measureColumnDepth, appendChildren } from '../base/util';\n/**\n * Content module is used to render grid content\n * @hidden\n */\n\nvar HeaderRender =\n/** @class */\nfunction () {\n  /**\n   * Constructor for header renderer module\n   */\n  function HeaderRender(parent, serviceLocator) {\n    var _this = this;\n\n    this.frzIdx = 0;\n    this.notfrzIdx = 0;\n    this.isFirstCol = false;\n\n    this.helper = function (e) {\n      var gObj = _this.parent;\n      var target = _this.draggable.currentStateTarget;\n      var parentEle = parentsUntil(target, 'e-headercell');\n\n      if (!(gObj.allowReordering || gObj.allowGrouping) || !isNullOrUndefined(parentEle) && parentEle.querySelectorAll('.e-checkselectall').length > 0) {\n        return false;\n      }\n\n      var visualElement = _this.parent.createElement('div', {\n        className: 'e-cloneproperties e-dragclone e-headerclone'\n      });\n\n      var element = target.classList.contains('e-headercell') ? target : parentEle;\n\n      if (!element || !gObj.allowReordering && element.classList.contains('e-stackedheadercell')) {\n        return false;\n      }\n\n      var height = element.offsetHeight;\n      var headercelldiv = element.querySelector('.e-headercelldiv') || element.querySelector('.e-stackedheadercelldiv');\n      var col;\n\n      if (headercelldiv) {\n        if (element.querySelector('.e-stackedheadercelldiv')) {\n          col = gObj.getStackedHeaderColumnByHeaderText(headercelldiv.innerText.trim(), gObj.columns);\n        } else {\n          col = gObj.getColumnByUid(headercelldiv.getAttribute('e-mappinguid'));\n        }\n\n        _this.column = col;\n\n        if (_this.column.lockColumn) {\n          return false;\n        }\n\n        visualElement.setAttribute('e-mappinguid', _this.column.uid);\n      }\n\n      if (col && !isNullOrUndefined(col.headerTemplate)) {\n        if (!isNullOrUndefined(col.headerTemplate)) {\n          var result = void 0;\n          var colIndex = gObj.getColumnIndexByField(col.field);\n          result = col.getHeaderTemplate()(extend({\n            'index': colIndex\n          }, col), gObj, 'headerTemplate');\n          appendChildren(visualElement, result);\n        } else {\n          visualElement.innerHTML = col.headerTemplate;\n        }\n      } else {\n        visualElement.innerHTML = headercelldiv ? col.headerText : element.firstElementChild.innerHTML;\n      }\n\n      visualElement.style.width = element.offsetWidth + 'px';\n      visualElement.style.height = element.offsetHeight + 'px';\n      visualElement.style.lineHeight = (height - 6).toString() + 'px';\n      gObj.element.appendChild(visualElement);\n      return visualElement;\n    };\n\n    this.dragStart = function (e) {\n      var gObj = _this.parent;\n      gObj.element.querySelector('.e-gridpopup').style.display = 'none';\n      gObj.notify(events.columnDragStart, {\n        target: _this.draggable.currentStateTarget,\n        column: _this.column,\n        event: e.event\n      });\n\n      if (isBlazor()) {\n        e.bindEvents(e.dragElement);\n      }\n    };\n\n    this.drag = function (e) {\n      var gObj = _this.parent;\n      var target = e.target;\n\n      if (target) {\n        var closest = getClosest(target, '.e-grid');\n\n        var cloneElement = _this.parent.element.querySelector('.e-cloneproperties');\n\n        if (!closest || closest.getAttribute('id') !== gObj.element.getAttribute('id')) {\n          classList(cloneElement, ['e-notallowedcur'], ['e-defaultcur']);\n\n          if (gObj.allowReordering) {\n            gObj.element.querySelector('.e-reorderuparrow').style.display = 'none';\n            gObj.element.querySelector('.e-reorderdownarrow').style.display = 'none';\n          }\n\n          if (!gObj.groupSettings.allowReordering) {\n            return;\n          }\n        }\n\n        gObj.notify(events.columnDrag, {\n          target: e.target,\n          column: _this.column,\n          event: e.event\n        });\n      }\n    };\n\n    this.dragStop = function (e) {\n      var gObj = _this.parent;\n      var cancel;\n      gObj.element.querySelector('.e-gridpopup').style.display = 'none';\n\n      if (!parentsUntil(e.target, 'e-headercell') && !parentsUntil(e.target, 'e-groupdroparea') || !gObj.allowReordering && parentsUntil(e.target, 'e-headercell') || !e.helper.getAttribute('e-mappinguid') && parentsUntil(e.target, 'e-groupdroparea')) {\n        remove(e.helper);\n        cancel = true;\n      }\n\n      gObj.notify(events.columnDragStop, {\n        target: e.target,\n        event: e.event,\n        column: _this.column,\n        cancel: cancel\n      });\n    };\n\n    this.drop = function (e) {\n      var gObj = _this.parent;\n      var uid = e.droppedElement.getAttribute('e-mappinguid');\n      var closest = getClosest(e.target, '.e-grid');\n      remove(e.droppedElement);\n\n      if (closest && closest.getAttribute('id') !== gObj.element.getAttribute('id') || !(gObj.allowReordering || gObj.allowGrouping)) {\n        return;\n      }\n\n      gObj.notify(events.headerDrop, {\n        target: e.target,\n        uid: uid,\n        droppedElement: e.droppedElement\n      });\n    };\n\n    this.parent = parent;\n    this.serviceLocator = serviceLocator;\n    this.ariaService = this.serviceLocator.getService('ariaService');\n    this.widthService = this.serviceLocator.getService('widthService');\n\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    if (!this.parent.enableColumnVirtualization) {\n      this.parent.on(events.columnVisibilityChanged, this.setVisible, this);\n    }\n\n    this.parent.on(events.columnPositionChanged, this.colPosRefresh, this);\n  }\n  /**\n   * The function is used to render grid header div\n   */\n\n\n  HeaderRender.prototype.renderPanel = function () {\n    var div = this.parent.element.querySelector('.e-gridheader');\n    var isRendered = div != null;\n    div = isRendered ? div : this.parent.createElement('div', {\n      className: 'e-gridheader'\n    });\n    var innerDiv = isRendered ? div.querySelector('.e-headercontent') : this.parent.createElement('div', {\n      className: 'e-headercontent'\n    });\n    this.toggleStackClass(div);\n    div.appendChild(innerDiv);\n    this.setPanel(div);\n\n    if (!isRendered) {\n      this.parent.element.appendChild(div);\n    }\n  };\n  /**\n   * The function is used to render grid header table\n   */\n\n\n  HeaderRender.prototype.renderTable = function () {\n    var headerDiv = this.getPanel();\n    headerDiv.appendChild(this.createHeaderTable());\n    this.setTable(headerDiv.querySelector('.e-table'));\n\n    if (!this.parent.getFrozenColumns()) {\n      this.initializeHeaderDrag();\n      this.initializeHeaderDrop();\n    }\n\n    this.parent.notify(events.headerRefreshed, {\n      rows: this.rows,\n      args: {\n        isFrozen: this.parent.getFrozenColumns() !== 0\n      }\n    });\n  };\n  /**\n   * Get the header content div element of grid\n   * @return {Element}\n   */\n\n\n  HeaderRender.prototype.getPanel = function () {\n    return this.headerPanel;\n  };\n  /**\n   * Set the header content div element of grid\n   * @param  {Element} panel\n   */\n\n\n  HeaderRender.prototype.setPanel = function (panel) {\n    this.headerPanel = panel;\n  };\n  /**\n   * Get the header table element of grid\n   * @return {Element}\n   */\n\n\n  HeaderRender.prototype.getTable = function () {\n    return this.headerTable;\n  };\n  /**\n   * Set the header table element of grid\n   * @param  {Element} table\n   */\n\n\n  HeaderRender.prototype.setTable = function (table) {\n    this.headerTable = table;\n  };\n  /**\n   * Get the header colgroup element\n   * @returns {Element}\n   */\n\n\n  HeaderRender.prototype.getColGroup = function () {\n    return this.colgroup;\n  };\n  /**\n   * Set the header colgroup element\n   * @param {Element} colgroup\n   * @returns {Element}\n   */\n\n\n  HeaderRender.prototype.setColGroup = function (colGroup) {\n    return this.colgroup = colGroup;\n  };\n  /**\n   * Get the header row element collection.\n   * @return {Element[]}\n   */\n\n\n  HeaderRender.prototype.getRows = function () {\n    var table = this.getTable();\n    return table.tHead.rows;\n  };\n  /**\n   * The function is used to create header table elements\n   * @return {Element}\n   * @hidden\n   */\n\n\n  HeaderRender.prototype.createHeaderTable = function () {\n    var skipDom = isBlazor() && this.parent.frozenRows !== 0;\n    var table = this.createTable();\n    var innerDiv = this.getPanel().querySelector('.e-headercontent');\n\n    if (!skipDom) {\n      innerDiv.appendChild(table);\n    }\n\n    return innerDiv;\n  };\n  /**\n   * @hidden\n   */\n\n\n  HeaderRender.prototype.createTable = function (tableEle) {\n    if (tableEle === void 0) {\n      tableEle = null;\n    }\n\n    var skipDom = isBlazor() && this.parent.frozenRows !== 0;\n    var gObj = this.parent;\n\n    if (!(isBlazor() && !gObj.isJsComponent) && this.getTable() && !gObj.getFrozenColumns()) {\n      remove(this.getTable());\n    }\n\n    var columns = gObj.getColumns();\n    var innerDiv = this.getPanel().querySelector('.e-headercontent');\n    var table = skipDom ? tableEle || innerDiv.querySelector('.e-table') : this.parent.createElement('table', {\n      className: 'e-table',\n      attrs: {\n        cellspacing: '0.25px',\n        role: 'grid'\n      }\n    });\n    var findHeaderRow = this.createHeaderContent();\n    var thead = findHeaderRow.thead;\n    var tbody = this.parent.createElement('tbody', {\n      className: this.parent.frozenRows ? '' : 'e-hide'\n    });\n    this.caption = this.parent.createElement('caption', {\n      innerHTML: this.parent.element.id + '_header_table',\n      className: 'e-hide'\n    });\n    var colGroup = this.parent.createElement('colgroup');\n    var rowBody = this.parent.createElement('tr');\n    var bodyCell;\n    var rows = this.rows = findHeaderRow.rows;\n    var rowRenderer = new RowRenderer(this.serviceLocator, CellType.Header, this.parent);\n\n    for (var i = 0, len = rows.length; i < len; i++) {\n      for (var j = 0, len_1 = rows[i].cells.length; j < len_1; j++) {\n        var cell = rows[i].cells[j];\n        bodyCell = this.parent.createElement('td');\n        rowBody.appendChild(bodyCell);\n      }\n    }\n\n    if (gObj.allowFiltering || gObj.allowSorting || gObj.allowGrouping) {\n      table.classList.add('e-sortfilter');\n    }\n\n    this.updateColGroup(colGroup);\n\n    if (!skipDom) {\n      tbody.appendChild(rowBody);\n    }\n\n    table.appendChild(this.setColGroup(colGroup));\n    table.appendChild(thead);\n\n    if (!skipDom) {\n      table.appendChild(tbody);\n    }\n\n    table.appendChild(this.caption);\n    this.ariaService.setOptions(table, {\n      colcount: gObj.getColumns().length.toString()\n    });\n    return table;\n  };\n\n  HeaderRender.prototype.createHeaderContent = function () {\n    var gObj = this.parent;\n    var columns = gObj.getColumns();\n    var thead = this.parent.createElement('thead');\n    var colHeader = this.parent.createElement('tr', {\n      className: 'e-columnheader'\n    });\n    var rowRenderer = new RowRenderer(this.serviceLocator, CellType.Header, gObj);\n    rowRenderer.element = colHeader;\n    var rows = [];\n    var headerRow;\n    this.colDepth = measureColumnDepth(gObj.columns);\n\n    for (var i = 0, len = this.colDepth; i < len; i++) {\n      rows[i] = this.generateRow(i);\n      rows[i].cells = [];\n    }\n\n    rows = this.ensureColumns(rows);\n    rows = this.getHeaderCells(rows);\n\n    for (var i = 0, len = this.colDepth; i < len; i++) {\n      headerRow = rowRenderer.render(rows[i], columns);\n\n      if (this.parent.rowHeight && headerRow.querySelector('.e-headercell')) {\n        headerRow.style.height = this.parent.rowHeight + 'px';\n      }\n\n      thead.appendChild(headerRow);\n    }\n\n    var findHeaderRow = {\n      thead: thead,\n      rows: rows\n    };\n    return findHeaderRow;\n  };\n\n  HeaderRender.prototype.updateColGroup = function (colGroup) {\n    var cols = this.parent.getColumns();\n    var col;\n    var indexes = this.parent.getColumnIndexesInView();\n\n    if (this.parent.enableColumnVirtualization && this.parent.getFrozenColumns() && this.parent.contentModule.isXaxis()) {\n      cols = extend([], this.parent.getColumns());\n      cols.splice(0, this.parent.getFrozenColumns());\n    }\n\n    colGroup.id = this.parent.element.id + 'colGroup';\n\n    if (this.parent.allowGrouping) {\n      for (var i = 0, len = this.parent.groupSettings.columns.length; i < len; i++) {\n        if (this.parent.enableColumnVirtualization && indexes.indexOf(i) === -1) {\n          continue;\n        }\n\n        col = this.parent.createElement('col', {\n          className: 'e-group-intent'\n        });\n        colGroup.appendChild(col);\n      }\n    }\n\n    if (this.parent.detailTemplate || this.parent.childGrid) {\n      col = this.parent.createElement('col', {\n        className: 'e-detail-intent'\n      });\n      colGroup.appendChild(col);\n    }\n\n    if (this.parent.isRowDragable()) {\n      col = this.parent.createElement('col', {\n        className: 'e-drag-intent'\n      });\n      colGroup.appendChild(col);\n    }\n\n    for (var i = 0, len = cols.length; i < len; i++) {\n      col = this.parent.createElement('col');\n\n      if (cols[i].visible === false) {\n        setStyleAttribute(col, {\n          'display': 'none'\n        });\n      }\n\n      colGroup.appendChild(col);\n    }\n\n    return colGroup;\n  };\n\n  HeaderRender.prototype.ensureColumns = function (rows) {\n    //TODO: generate dummy column for group, detail, stacked row here; ensureColumns here\n    var gObj = this.parent;\n    var indexes = this.parent.getColumnIndexesInView();\n\n    for (var i = 0, len = rows.length; i < len; i++) {\n      if (gObj.allowGrouping) {\n        for (var c = 0, len_2 = gObj.groupSettings.columns.length; c < len_2; c++) {\n          if (this.parent.enableColumnVirtualization && indexes.indexOf(c) === -1) {\n            continue;\n          }\n\n          rows[i].cells.push(this.generateCell({}, CellType.HeaderIndent));\n        }\n      }\n\n      if (gObj.detailTemplate || gObj.childGrid) {\n        var args = {};\n        this.parent.notify(events.detailIndentCellInfo, args);\n        rows[i].cells.push(this.generateCell(args, CellType.DetailHeader));\n      }\n\n      if (gObj.isRowDragable()) {\n        rows[i].cells.push(this.generateCell({}, CellType.RowDragHIcon));\n      }\n    }\n\n    return rows;\n  };\n\n  HeaderRender.prototype.getHeaderCells = function (rows) {\n    var column;\n    var thead = this.parent.getHeaderTable() && this.parent.getHeaderTable().querySelector('thead');\n    var cols = this.parent.enableColumnVirtualization ? this.parent.getColumns(this.parent.enablePersistence) : this.parent.columns;\n    this.frzIdx = 0;\n    this.notfrzIdx = 0;\n\n    if (this.parent.lockcolPositionCount) {\n      for (var i = 0; i < cols.length; i++) {\n        this.lockColsRendered = false;\n        rows = this.appendCells(cols[i], rows, 0, i === 0, false, i === cols.length - 1, thead);\n      }\n    }\n\n    for (var i = 0, len = cols.length; i < len; i++) {\n      this.notfrzIdx = 0;\n      this.lockColsRendered = true;\n      rows = this.appendCells(cols[i], rows, 0, i === 0, false, i === len - 1, thead);\n    }\n\n    return rows;\n  };\n\n  HeaderRender.prototype.appendCells = function (cols, rows, index, isFirstObj, isFirstCol, isLastCol, isMovable) {\n    var lastCol = isLastCol ? 'e-lastcell' : '';\n    var frzCols = this.parent.getFrozenColumns();\n    var left;\n\n    if (this.parent.enableColumnVirtualization && frzCols) {\n      left = this.parent.getContent().querySelector('.e-movablecontent').scrollLeft;\n    }\n\n    if (!cols.columns) {\n      if (left && left > 0 && this.parent.contentModule.isXaxis() && this.parent.inViewIndexes[0] !== 0 && this.frzIdx > this.parent.getFrozenColumns()) {\n        rows[index].cells.push(this.generateCell(cols, CellType.Header, this.colDepth - index, (isFirstObj ? '' : isFirstCol ? 'e-firstcell' : '') + lastCol, index, this.parent.getColumnIndexByUid(cols.uid)));\n      } else {\n        if (!frzCols && (!this.parent.lockcolPositionCount || cols.lockColumn && !this.lockColsRendered || !cols.lockColumn && this.lockColsRendered) || frzCols && (!isMovable && (this.frzIdx + this.notfrzIdx < this.parent.frozenColumns || cols.isFrozen) && (!this.parent.lockcolPositionCount || cols.lockColumn && !this.lockColsRendered || !cols.lockColumn && this.lockColsRendered) || isMovable && this.frzIdx + this.notfrzIdx >= this.parent.frozenColumns && !cols.isFrozen && (!this.parent.lockcolPositionCount || cols.lockColumn && !this.lockColsRendered || !cols.lockColumn && this.lockColsRendered))) {\n          rows[index].cells.push(this.generateCell(cols, CellType.Header, this.colDepth - index, (isFirstObj ? '' : isFirstCol ? 'e-firstcell' : '') + lastCol, index, this.parent.getColumnIndexByUid(cols.uid)));\n        }\n      }\n\n      if (this.parent.lockcolPositionCount) {\n        if (this.frzIdx + this.notfrzIdx < this.parent.frozenColumns && (cols.lockColumn && !this.lockColsRendered || !cols.lockColumn && this.lockColsRendered)) {\n          this.frzIdx++;\n        } else {\n          this.notfrzIdx++;\n        }\n      } else {\n        this.frzIdx++;\n      }\n    } else {\n      this.isFirstCol = false;\n      var colSpan = this.getCellCnt(cols, 0);\n\n      if (colSpan) {\n        var frzObj = this.refreshFrozenHdr(cols.columns, {\n          isPartial: false,\n          isComp: true,\n          cnt: 0\n        });\n        var stackedLockColsCount = this.getStackedLockColsCount(cols, 0);\n\n        if (!frzCols && (!this.parent.lockcolPositionCount || !this.lockColsRendered && stackedLockColsCount || this.lockColsRendered && colSpan - stackedLockColsCount) || frzCols && (!isMovable && this.checkFrozenStackHeader(cols.columns, isMovable) && (this.parent.frozenColumns - this.frzIdx > 0 || frzObj.isPartial) || isMovable && (colSpan + this.frzIdx > this.parent.frozenColumns && !frzObj.isComp || this.checkFrozenStackHeader(cols.columns, isMovable)))) {\n          rows[index].cells.push(new Cell({\n            cellType: CellType.StackedHeader,\n            column: cols,\n            colSpan: this.getColSpan(colSpan, isMovable, frzObj.cnt, stackedLockColsCount)\n          }));\n        }\n      }\n\n      if (this.parent.lockcolPositionCount && !this.lockColsRendered) {\n        for (var i = 0; i < cols.columns.length; i++) {\n          rows = this.appendCells(cols.columns[i], rows, index + 1, isFirstObj, i === 0, i === cols.columns.length - 1 && isLastCol, isMovable);\n        }\n      }\n\n      if (this.lockColsRendered) {\n        for (var i = 0, len = cols.columns.length; i < len; i++) {\n          var isFirstCol_1 = this.isFirstCol = cols.columns[i].visible && !this.isFirstCol;\n          var isLastCol_1 = i === len - 1 && !isFirstCol_1;\n          rows = this.appendCells(cols.columns[i], rows, index + 1, isFirstObj, isFirstCol_1, isLastCol_1 && isLastCol_1, isMovable);\n        }\n      }\n    }\n\n    return rows;\n  };\n\n  HeaderRender.prototype.checkFrozenStackHeader = function (cols, isMovable) {\n    var isTrue = false;\n\n    for (var i = 0; i < cols.length; i++) {\n      var col = cols[i];\n      var colIndex = this.parent.getNormalizedColumnIndex(col.uid);\n\n      if (!col.columns) {\n        if (isMovable && colIndex >= this.parent.getFrozenColumns() && col.visible) {\n          isTrue = true;\n          break;\n        }\n\n        if (!isMovable && colIndex < this.parent.getFrozenColumns() && col.visible) {\n          isTrue = true;\n          break;\n        }\n      }\n    }\n\n    return isTrue;\n  };\n\n  HeaderRender.prototype.getStackedLockColsCount = function (col, lockColsCount) {\n    if (col.columns) {\n      for (var i = 0; i < col.columns.length; i++) {\n        lockColsCount = this.getStackedLockColsCount(col.columns[i], lockColsCount);\n      }\n    } else if (col.lockColumn) {\n      lockColsCount++;\n    }\n\n    return lockColsCount;\n  };\n\n  HeaderRender.prototype.refreshFrozenHdr = function (cols, frzObj) {\n    for (var i = 0; i < cols.length; i++) {\n      if (cols[i].columns) {\n        frzObj = this.refreshFrozenHdr(cols[i].columns, frzObj);\n      } else {\n        if (cols[i].isFrozen) {\n          frzObj.isPartial = true;\n          frzObj.cnt++;\n        }\n\n        frzObj.isComp = frzObj.isComp && (cols[i].isFrozen || this.parent.getColumnIndexByField(cols[i].field) < this.parent.frozenColumns);\n      }\n    }\n\n    return frzObj;\n  };\n\n  HeaderRender.prototype.getColSpan = function (colSpan, isMovable, frozenCnt, stackedLockColsCount) {\n    var frzCol = this.parent.frozenColumns;\n\n    if (this.parent.getFrozenColumns() && this.frzIdx + colSpan > frzCol) {\n      if (isMovable) {\n        colSpan = colSpan - (frzCol > this.frzIdx ? frzCol - this.frzIdx : 0) - frozenCnt;\n      } else {\n        colSpan = colSpan - (colSpan - (frzCol > this.frzIdx ? frzCol + frozenCnt - this.frzIdx : frozenCnt));\n      }\n    } else if (this.parent.lockcolPositionCount) {\n      colSpan = !this.lockColsRendered ? stackedLockColsCount : colSpan - stackedLockColsCount;\n    }\n\n    return colSpan;\n  };\n\n  HeaderRender.prototype.generateRow = function (index) {\n    return new Row({});\n  };\n\n  HeaderRender.prototype.generateCell = function (column, cellType, rowSpan, className, rowIndex, colIndex) {\n    var opt = {\n      'visible': column.visible,\n      'isDataCell': false,\n      'isTemplate': !isNullOrUndefined(column.headerTemplate),\n      'rowID': '',\n      'column': column,\n      'cellType': cellType,\n      'rowSpan': rowSpan,\n      'className': className,\n      'index': rowIndex,\n      'colIndex': colIndex\n    };\n\n    if (!opt.rowSpan || opt.rowSpan < 2) {\n      delete opt.rowSpan;\n    }\n\n    return new Cell(opt);\n  };\n  /**\n   * Function to hide header table column based on visible property\n   * @param  {Column[]} columns?\n   */\n\n\n  HeaderRender.prototype.setVisible = function (columns) {\n    var gObj = this.parent;\n    var rows = [].slice.call(this.getRows()); //NodeList -> Array        \n\n    var displayVal;\n    var idx;\n    var className;\n    var element;\n    var frzCols = gObj.getFrozenColumns();\n\n    for (var c = 0, clen = columns.length; c < clen; c++) {\n      var column = columns[c];\n      idx = gObj.getNormalizedColumnIndex(column.uid);\n      displayVal = column.visible ? '' : 'none';\n\n      if (frzCols) {\n        if (idx < frzCols) {\n          if (isBlazor() && gObj.isServerRendered) {\n            setStyleAttribute(this.getTable().querySelector('colgroup').children[idx], {\n              'display': displayVal\n            });\n            setStyleAttribute(this.getTable().querySelectorAll('th')[idx], {\n              'display': displayVal\n            });\n          } else {\n            setStyleAttribute(this.getColGroup().children[idx], {\n              'display': displayVal\n            });\n          }\n        } else {\n          var mTblColGrp = gObj.getHeaderContent().querySelector('.e-movableheader').querySelector('colgroup');\n          var mTbl = gObj.getHeaderContent().querySelector('.e-movableheader').querySelector('table');\n          setStyleAttribute(mTblColGrp.children[idx - frzCols], {\n            'display': displayVal\n          });\n\n          if (isBlazor() && gObj.isServerRendered) {\n            setStyleAttribute(mTbl.querySelectorAll('th')[idx - frzCols], {\n              'display': displayVal\n            });\n          }\n        }\n      } else {\n        setStyleAttribute(this.getColGroup().children[idx], {\n          'display': displayVal\n        });\n      }\n    }\n\n    this.refreshUI();\n  };\n\n  HeaderRender.prototype.colPosRefresh = function () {\n    if (isBlazor() && this.parent.isServerRendered && this.parent.frozenRows && this.parent.getFrozenColumns()) {\n      this.freezeReorder = true;\n    }\n\n    this.refreshUI();\n  };\n  /**\n   * Refresh the header of the Grid.\n   * @returns {void}\n   */\n\n\n  HeaderRender.prototype.refreshUI = function () {\n    var frzCols = this.parent.getFrozenColumns();\n    var isVFTable = this.parent.enableColumnVirtualization && frzCols !== 0;\n    var setFrozenTable = isBlazor() && this.parent.isServerRendered && this.parent.frozenRows !== 0 && frzCols !== 0;\n    var headerDiv = this.getPanel();\n    this.toggleStackClass(headerDiv);\n    var table = this.freezeReorder ? this.headerPanel.querySelector('.e-movableheader').querySelector('.e-table') : this.getTable();\n\n    if (isVFTable) {\n      table = this.parent.contentModule.getVirtualFreezeHeader();\n    }\n\n    if (setFrozenTable && !isVFTable) {\n      table = this.freezeReorder ? this.headerPanel.querySelector('.e-movableheader').querySelector('.e-table') : this.headerPanel.querySelector('.e-frozenheader').querySelector('.e-table');\n    }\n\n    if (table) {\n      if (isBlazor() && this.parent.isServerRendered) {\n        table.removeChild(table.querySelector('colgroup'));\n        table.removeChild(table.querySelector('thead'));\n      } else {\n        remove(table);\n        table.removeChild(table.firstChild);\n        table.removeChild(table.childNodes[0]);\n      }\n\n      var colGroup = this.parent.createElement('colgroup');\n      var findHeaderRow = this.createHeaderContent();\n      this.rows = findHeaderRow.rows;\n      table.insertBefore(findHeaderRow.thead, table.firstChild);\n      this.updateColGroup(colGroup);\n      table.insertBefore(this.setColGroup(colGroup), table.firstChild);\n\n      if (!isVFTable && !setFrozenTable) {\n        this.setTable(table);\n      }\n\n      if (!(isBlazor() && this.parent.isServerRendered)) {\n        this.appendContent(table);\n      }\n\n      this.parent.notify(events.colGroupRefresh, {});\n      this.widthService.setWidthToColumns();\n      this.parent.updateDefaultCursor();\n\n      if (!frzCols || this.parent.enableColumnVirtualization && frzCols) {\n        this.initializeHeaderDrag();\n      }\n\n      var rows = [].slice.call(headerDiv.querySelectorAll('tr.e-columnheader'));\n\n      for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {\n        var row = rows_1[_i];\n        var gCells = [].slice.call(row.querySelectorAll('.e-grouptopleftcell'));\n\n        if (gCells.length) {\n          gCells[gCells.length - 1].classList.add('e-lastgrouptopleftcell');\n        }\n      }\n\n      if (!frzCols) {\n        this.parent.notify(events.headerRefreshed, {\n          rows: this.rows,\n          args: {\n            isFrozen: this.parent.getFrozenColumns() !== 0\n          }\n        });\n      }\n\n      if (this.parent.enableColumnVirtualization && parentsUntil(table, 'e-movableheader')) {\n        this.parent.notify(events.headerRefreshed, {\n          rows: this.rows,\n          args: {\n            isFrozen: false,\n            isXaxis: true\n          }\n        });\n      }\n\n      if (this.parent.allowTextWrap && this.parent.textWrapSettings.wrapMode === 'Header') {\n        wrap(rows, true);\n      }\n    }\n  };\n\n  HeaderRender.prototype.toggleStackClass = function (div) {\n    var column = this.parent.columns;\n    var stackedHdr = column.some(function (column) {\n      return !isNullOrUndefined(column.columns);\n    });\n\n    if (stackedHdr) {\n      div.classList.add('e-stackedheader');\n    } else {\n      div.classList.remove('e-stackedheader');\n    }\n  };\n\n  HeaderRender.prototype.appendContent = function (table) {\n    this.getPanel().querySelector('.e-headercontent').appendChild(table);\n  };\n\n  HeaderRender.prototype.getCellCnt = function (col, cnt) {\n    if (col.columns) {\n      for (var i = 0, len = col.columns.length; i < len; i++) {\n        cnt = this.getCellCnt(col.columns[i], cnt);\n      }\n    } else {\n      if (col.visible) {\n        cnt++;\n      }\n    }\n\n    return cnt;\n  };\n\n  HeaderRender.prototype.initializeHeaderDrag = function () {\n    var gObj = this.parent;\n\n    if (!(this.parent.allowReordering || this.parent.allowGrouping && this.parent.groupSettings.showDropArea)) {\n      return;\n    }\n\n    this.draggable = new Draggable(gObj.getHeaderContent(), {\n      dragTarget: '.e-headercell',\n      distance: 5,\n      helper: this.helper,\n      dragStart: this.dragStart,\n      drag: this.drag,\n      dragStop: this.dragStop,\n      abort: '.e-rhandler'\n    });\n  };\n\n  HeaderRender.prototype.initializeHeaderDrop = function () {\n    var gObj = this.parent;\n    var drop = new Droppable(gObj.getHeaderContent(), {\n      accept: '.e-dragclone',\n      drop: this.drop\n    });\n  };\n\n  return HeaderRender;\n}();\n\nexport { HeaderRender };","map":null,"metadata":{},"sourceType":"module"}