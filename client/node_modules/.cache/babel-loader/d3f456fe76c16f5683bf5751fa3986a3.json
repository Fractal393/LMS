{"ast":null,"code":"/**\n * ElementLayouter.ts class for EJ2-PDF\n */\nimport { RectangleF } from './../../../drawing/pdf-drawing';\n/**\n * Base class for `elements lay outing`.\n * @private\n */\n\nvar ElementLayouter =\n/** @class */\nfunction () {\n  // Constructor\n\n  /**\n   * Initializes a new instance of the `ElementLayouter` class.\n   * @private\n   */\n  function ElementLayouter(element) {\n    this.layoutElement = element;\n  }\n\n  Object.defineProperty(ElementLayouter.prototype, \"elements\", {\n    // Properties\n\n    /**\n     * Gets the `element`.\n     * @private\n     */\n    get: function () {\n      return this.layoutElement;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Gets the `element`.\n   * @private\n   */\n\n  ElementLayouter.prototype.getElement = function () {\n    return this.layoutElement;\n  }; // Implementation\n\n  /**\n   * `Layouts` the element.\n   * @private\n   */\n\n\n  ElementLayouter.prototype.layout = function (param) {\n    return this.layoutInternal(param);\n  };\n\n  ElementLayouter.prototype.Layouter = function (param) {\n    return this.layoutInternal(param);\n  };\n  /**\n   * Returns the `next page`.\n   * @private\n   */\n\n\n  ElementLayouter.prototype.getNextPage = function (currentPage) {\n    var section = currentPage.section;\n    var nextPage = section.add();\n    return nextPage;\n  };\n\n  ElementLayouter.prototype.getPaginateBounds = function (param) {\n    if (param == null) {\n      throw new Error('ArgumentNullException : param');\n    }\n\n    var result = param.format.usePaginateBounds ? param.format.paginateBounds : new RectangleF(param.bounds.x, 0, param.bounds.width, param.bounds.height);\n    return result;\n  };\n\n  return ElementLayouter;\n}();\n\nexport { ElementLayouter };\n\nvar PdfLayoutFormat =\n/** @class */\nfunction () {\n  function PdfLayoutFormat(baseFormat) {\n    if (typeof baseFormat === 'undefined') {//\n    } else {\n      this.break = baseFormat.break;\n      this.layout = baseFormat.layout;\n      this.paginateBounds = baseFormat.paginateBounds;\n      this.boundsSet = baseFormat.usePaginateBounds;\n    }\n  }\n\n  Object.defineProperty(PdfLayoutFormat.prototype, \"layout\", {\n    // Properties\n\n    /**\n     * Gets or sets `layout` type of the element.\n     * @private\n     */\n    get: function () {\n      // if (typeof this.layoutType === 'undefined' || this.layoutType == null) {\n      //      this.layoutType = PdfLayoutType.Paginate;\n      // }\n      return this.layoutType;\n    },\n    set: function (value) {\n      this.layoutType = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfLayoutFormat.prototype, \"break\", {\n    /**\n     * Gets or sets `break` type of the element.\n     * @private\n     */\n    get: function () {\n      // if (typeof this.breakType === 'undefined' || this.boundsSet == null) {\n      //      this.breakType = PdfLayoutBreakType.FitPage;\n      // }\n      return this.breakType;\n    },\n    set: function (value) {\n      this.breakType = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfLayoutFormat.prototype, \"paginateBounds\", {\n    /**\n     * Gets or sets the `bounds` on the next page.\n     * @private\n     */\n    get: function () {\n      if (typeof this.layoutPaginateBounds === 'undefined' && this.layoutPaginateBounds == null) {\n        this.layoutPaginateBounds = new RectangleF(0, 0, 0, 0);\n      }\n\n      return this.layoutPaginateBounds;\n    },\n    set: function (value) {\n      this.layoutPaginateBounds = value;\n      this.boundsSet = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfLayoutFormat.prototype, \"usePaginateBounds\", {\n    /**\n     * Gets a value indicating whether [`use paginate bounds`].\n     * @private\n     */\n    get: function () {\n      // if (typeof this.boundsSet === 'undefined' || this.boundsSet == null) {\n      //      this.boundsSet = false;\n      // }\n      return this.boundsSet;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfLayoutFormat;\n}();\n\nexport { PdfLayoutFormat };\n\nvar PdfLayoutParams =\n/** @class */\nfunction () {\n  function PdfLayoutParams() {}\n\n  Object.defineProperty(PdfLayoutParams.prototype, \"page\", {\n    // Properties\n\n    /**\n     * Gets or sets the layout `page` for the element.\n     * @private\n     */\n    get: function () {\n      return this.pdfPage;\n    },\n    set: function (value) {\n      this.pdfPage = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfLayoutParams.prototype, \"bounds\", {\n    /**\n     * Gets or sets layout `bounds` for the element.\n     * @private\n     */\n    get: function () {\n      return new RectangleF(this.layoutBounds.x, this.layoutBounds.y, this.layoutBounds.width, this.layoutBounds.height);\n    },\n    set: function (value) {\n      this.layoutBounds = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfLayoutParams.prototype, \"format\", {\n    /**\n     * Gets or sets `layout settings` for the element.\n     * @private\n     */\n    get: function () {\n      return this.layoutFormat;\n    },\n    set: function (value) {\n      this.layoutFormat = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfLayoutParams;\n}();\n\nexport { PdfLayoutParams };\n\nvar PdfLayoutResult =\n/** @class */\nfunction () {\n  // Constructors\n\n  /**\n   * Initializes the new instance of `PdfLayoutResult` class.\n   * @private\n   */\n  function PdfLayoutResult(page, bounds) {\n    this.pdfPage = page;\n    this.layoutBounds = bounds;\n  }\n\n  Object.defineProperty(PdfLayoutResult.prototype, \"page\", {\n    // Properties\n\n    /**\n     * Gets the last `page` where the element was drawn.\n     * @private\n     */\n    get: function () {\n      return this.pdfPage;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfLayoutResult.prototype, \"bounds\", {\n    /**\n     * Gets the `bounds` of the element on the last page where it was drawn.\n     * @private\n     */\n    get: function () {\n      return this.layoutBounds;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfLayoutResult;\n}();\n\nexport { PdfLayoutResult };","map":null,"metadata":{},"sourceType":"module"}