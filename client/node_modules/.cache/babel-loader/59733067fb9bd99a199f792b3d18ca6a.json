{"ast":null,"code":"/**\r\n * DevExtreme (ui/calendar/ui.calendar.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _guid = require(\"../../core/guid\");\n\nvar _guid2 = _interopRequireDefault(_guid);\n\nvar _component_registrator = require(\"../../core/component_registrator\");\n\nvar _component_registrator2 = _interopRequireDefault(_component_registrator);\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _type2 = _interopRequireDefault(_type);\n\nvar _math = require(\"../../core/utils/math\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _button = require(\"../button\");\n\nvar _button2 = _interopRequireDefault(_button);\n\nvar _editor = require(\"../editor/editor\");\n\nvar _editor2 = _interopRequireDefault(_editor);\n\nvar _swipeable = require(\"../../events/gesture/swipeable\");\n\nvar _swipeable2 = _interopRequireDefault(_swipeable);\n\nvar _uiCalendar = require(\"./ui.calendar.navigator\");\n\nvar _uiCalendar2 = _interopRequireDefault(_uiCalendar);\n\nvar _uiCalendar3 = require(\"./ui.calendar.views\");\n\nvar _uiCalendar4 = _interopRequireDefault(_uiCalendar3);\n\nvar _translator = require(\"../../animation/translator\");\n\nvar _translator2 = _interopRequireDefault(_translator);\n\nvar _browser = require(\"../../core/utils/browser\");\n\nvar _browser2 = _interopRequireDefault(_browser);\n\nvar _date = require(\"../../core/utils/date\");\n\nvar _date2 = _interopRequireDefault(_date);\n\nvar _date_serialization = require(\"../../core/utils/date_serialization\");\n\nvar _date_serialization2 = _interopRequireDefault(_date_serialization);\n\nvar _devices = require(\"../../core/devices\");\n\nvar _devices2 = _interopRequireDefault(_devices);\n\nvar _fx = require(\"../../animation/fx\");\n\nvar _fx2 = _interopRequireDefault(_fx);\n\nvar _window = require(\"../../core/utils/window\");\n\nvar _window2 = _interopRequireDefault(_window);\n\nvar _message = require(\"../../localization/message\");\n\nvar _message2 = _interopRequireDefault(_message);\n\nvar _function_template = require(\"../../core/templates/function_template\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar CALENDAR_CLASS = \"dx-calendar\";\nvar CALENDAR_BODY_CLASS = \"dx-calendar-body\";\nvar CALENDAR_CELL_CLASS = \"dx-calendar-cell\";\nvar CALENDAR_FOOTER_CLASS = \"dx-calendar-footer\";\nvar CALENDAR_TODAY_BUTTON_CLASS = \"dx-calendar-today-button\";\nvar CALENDAR_HAS_FOOTER_CLASS = \"dx-calendar-with-footer\";\nvar CALENDAR_VIEWS_WRAPPER_CLASS = \"dx-calendar-views-wrapper\";\nvar CALENDAR_VIEW_CLASS = \"dx-calendar-view\";\nvar FOCUSED_STATE_CLASS = \"dx-state-focused\";\nvar ANIMATION_DURATION_SHOW_VIEW = 250;\nvar POP_ANIMATION_FROM = .6;\nvar POP_ANIMATION_TO = 1;\nvar CALENDAR_INPUT_STANDARD_PATTERN = \"yyyy-MM-dd\";\nvar CALENDAR_DATE_VALUE_KEY = \"dxDateValueKey\";\nvar LEVEL_COMPARE_MAP = {\n  month: 3,\n  year: 2,\n  decade: 1,\n  century: 0\n};\nvar ZOOM_LEVEL = {\n  MONTH: \"month\",\n  YEAR: \"year\",\n  DECADE: \"decade\",\n  CENTURY: \"century\"\n};\n\nvar Calendar = _editor2.default.inherit({\n  _activeStateUnit: \".\" + CALENDAR_CELL_CLASS,\n  _getDefaultOptions: function () {\n    return (0, _extend.extend)(this.callBase(), {\n      hoverStateEnabled: true,\n      activeStateEnabled: true,\n      currentDate: new Date(),\n      value: null,\n      dateSerializationFormat: void 0,\n      min: new Date(1e3, 0),\n      max: new Date(3e3, 0),\n      firstDayOfWeek: void 0,\n      zoomLevel: ZOOM_LEVEL.MONTH,\n      maxZoomLevel: ZOOM_LEVEL.MONTH,\n      minZoomLevel: ZOOM_LEVEL.CENTURY,\n      showTodayButton: false,\n      cellTemplate: \"cell\",\n      disabledDates: null,\n      onCellClick: null,\n      onContouredChanged: null,\n      hasFocus: function (element) {\n        return element.hasClass(FOCUSED_STATE_CLASS);\n      }\n    });\n  },\n  _defaultOptionsRules: function () {\n    return this.callBase().concat([{\n      device: function () {\n        return \"desktop\" === _devices2.default.real().deviceType && !_devices2.default.isSimulator();\n      },\n      options: {\n        focusStateEnabled: true\n      }\n    }]);\n  },\n  _supportedKeys: function () {\n    return (0, _extend.extend)(this.callBase(), {\n      rightArrow: function (e) {\n        e.preventDefault();\n\n        if (e.ctrlKey) {\n          this._waitRenderView(1);\n        } else {\n          this._moveCurrentDateByOffset(1 * this._getRtlCorrection());\n        }\n      },\n      leftArrow: function (e) {\n        e.preventDefault();\n\n        if (e.ctrlKey) {\n          this._waitRenderView(-1);\n        } else {\n          this._moveCurrentDateByOffset(-1 * this._getRtlCorrection());\n        }\n      },\n      upArrow: function (e) {\n        e.preventDefault();\n\n        if (e.ctrlKey) {\n          this._navigateUp();\n        } else {\n          if (_fx2.default.isAnimating(this._view.$element())) {\n            return;\n          }\n\n          this._moveCurrentDateByOffset(-1 * this._view.option(\"colCount\"));\n        }\n      },\n      downArrow: function (e) {\n        e.preventDefault();\n\n        if (e.ctrlKey) {\n          this._navigateDown();\n        } else {\n          if (_fx2.default.isAnimating(this._view.$element())) {\n            return;\n          }\n\n          this._moveCurrentDateByOffset(1 * this._view.option(\"colCount\"));\n        }\n      },\n      home: function (e) {\n        e.preventDefault();\n        var zoomLevel = this.option(\"zoomLevel\");\n        var currentDate = this.option(\"currentDate\");\n\n        var min = this._dateOption(\"min\");\n\n        if (this._view.isDateDisabled(currentDate)) {\n          return;\n        }\n\n        var date = _date2.default.sameView(zoomLevel, currentDate, min) ? min : _date2.default.getViewFirstCellDate(zoomLevel, currentDate);\n\n        this._moveToClosestAvailableDate(date);\n      },\n      end: function (e) {\n        e.preventDefault();\n        var zoomLevel = this.option(\"zoomLevel\");\n        var currentDate = this.option(\"currentDate\");\n\n        var max = this._dateOption(\"max\");\n\n        if (this._view.isDateDisabled(currentDate)) {\n          return;\n        }\n\n        var date = _date2.default.sameView(zoomLevel, currentDate, max) ? max : _date2.default.getViewLastCellDate(zoomLevel, currentDate);\n\n        this._moveToClosestAvailableDate(date);\n      },\n      pageUp: function (e) {\n        e.preventDefault();\n\n        this._waitRenderView(-1 * this._getRtlCorrection());\n      },\n      pageDown: function (e) {\n        e.preventDefault();\n\n        this._waitRenderView(1 * this._getRtlCorrection());\n      },\n      tab: _common.noop,\n      enter: function (e) {\n        if (!this._isMaxZoomLevel()) {\n          this._navigateDown();\n        } else {\n          if (!this._view.isDateDisabled(this.option(\"currentDate\"))) {\n            var value = this._updateTimeComponent(this.option(\"currentDate\"));\n\n            this._dateValue(value, e);\n          }\n        }\n      }\n    });\n  },\n  _getSerializationFormat: function (optionName) {\n    var value = this.option(optionName || \"value\");\n\n    if (this.option(\"dateSerializationFormat\")) {\n      return this.option(\"dateSerializationFormat\");\n    }\n\n    if (_type2.default.isNumeric(value)) {\n      return \"number\";\n    }\n\n    if (!_type2.default.isString(value)) {\n      return;\n    }\n\n    return _date_serialization2.default.getDateSerializationFormat(value);\n  },\n  _convertToDate: function (value, optionName) {\n    return _date_serialization2.default.deserializeDate(value);\n  },\n  _dateValue: function (value, dxEvent) {\n    if (dxEvent) {\n      this._saveValueChangeEvent(dxEvent);\n    }\n\n    this._dateOption(\"value\", value);\n  },\n  _dateOption: function (optionName, optionValue) {\n    if (1 === arguments.length) {\n      return this._convertToDate(this.option(optionName), optionName);\n    }\n\n    var serializationFormat = this._getSerializationFormat(optionName);\n\n    this.option(optionName, _date_serialization2.default.serializeDate(optionValue, serializationFormat));\n  },\n  _shiftDate: function (zoomLevel, date, offset, reverse) {\n    switch (zoomLevel) {\n      case ZOOM_LEVEL.MONTH:\n        date.setDate(date.getDate() + offset * reverse);\n        break;\n\n      case ZOOM_LEVEL.YEAR:\n        date.setMonth(date.getMonth() + offset * reverse);\n        break;\n\n      case ZOOM_LEVEL.DECADE:\n        date.setFullYear(date.getFullYear() + offset * reverse);\n        break;\n\n      case ZOOM_LEVEL.CENTURY:\n        date.setFullYear(date.getFullYear() + 10 * offset * reverse);\n    }\n  },\n  _moveCurrentDateByOffset: function (offset) {\n    var baseDate = this.option(\"currentDate\");\n    var currentDate = new Date(baseDate);\n    var zoomLevel = this.option(\"zoomLevel\");\n\n    this._shiftDate(zoomLevel, currentDate, offset, 1);\n\n    var maxDate = this._getMaxDate();\n\n    var minDate = this._getMinDate();\n\n    var isDateForwardInNeighborView = this._areDatesInNeighborView(zoomLevel, currentDate, baseDate);\n\n    var isDateForwardInRange = (0, _math.inRange)(currentDate, minDate, maxDate) && isDateForwardInNeighborView;\n    var dateForward = new Date(currentDate);\n\n    while (isDateForwardInRange) {\n      if (isDateForwardInRange && !this._view.isDateDisabled(dateForward)) {\n        currentDate = dateForward;\n        break;\n      }\n\n      this._shiftDate(zoomLevel, dateForward, offset, 1);\n\n      isDateForwardInNeighborView = this._areDatesInNeighborView(zoomLevel, dateForward, baseDate);\n      isDateForwardInRange = (0, _math.inRange)(dateForward, minDate, maxDate) && isDateForwardInNeighborView;\n    }\n\n    if (this._view.isDateDisabled(baseDate) || this._view.isDateDisabled(currentDate)) {\n      this._waitRenderView(offset > 0 ? 1 : -1);\n    } else {\n      this.option(\"currentDate\", currentDate);\n    }\n  },\n  _areDatesInSameView: function (zoomLevel, date1, date2) {\n    switch (zoomLevel) {\n      case ZOOM_LEVEL.MONTH:\n        return date1.getMonth() === date2.getMonth();\n\n      case ZOOM_LEVEL.YEAR:\n        return date1.getYear() === date2.getYear();\n\n      case ZOOM_LEVEL.DECADE:\n        return parseInt(date1.getYear() / 10) === parseInt(date2.getYear() / 10);\n\n      case ZOOM_LEVEL.CENTURY:\n        return parseInt(date1.getYear() / 100) === parseInt(date2.getYear() / 100);\n    }\n  },\n  _areDatesInNeighborView: function (zoomLevel, date1, date2) {\n    var monthMinDistance = function (a, b) {\n      var abs = Math.abs(a - b);\n      return Math.min(abs, 12 - abs);\n    };\n\n    switch (zoomLevel) {\n      case ZOOM_LEVEL.MONTH:\n        return monthMinDistance(date1.getMonth(), date2.getMonth()) <= 1;\n\n      case ZOOM_LEVEL.YEAR:\n        return Math.abs(date1.getYear() - date2.getYear()) <= 1;\n\n      case ZOOM_LEVEL.DECADE:\n        return Math.abs(date1.getYear() - date2.getYear()) <= 10;\n\n      case ZOOM_LEVEL.CENTURY:\n        return Math.abs(date1.getYear() - date2.getYear()) <= 100;\n    }\n  },\n  _moveToClosestAvailableDate: function () {\n    var baseDate = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.option(\"currentDate\");\n    var currentDate = new Date(baseDate);\n    var zoomLevel = this.option(\"zoomLevel\");\n    var isCurrentDateAvailable = !this._isDateNotAvailable(currentDate);\n    var isDateForwardAvailable = isCurrentDateAvailable;\n    var isDateBackwardAvailable = isCurrentDateAvailable;\n    var isDateForwardInStartView;\n    var isDateBackwardInStartView;\n    var dateForward = new Date(currentDate);\n    var dateBackward = new Date(currentDate);\n\n    do {\n      if (isDateForwardAvailable) {\n        currentDate = dateForward;\n        break;\n      }\n\n      if (isDateBackwardAvailable) {\n        currentDate = dateBackward;\n        break;\n      }\n\n      this._shiftDate(zoomLevel, dateForward, 1, 1);\n\n      this._shiftDate(zoomLevel, dateBackward, 1, -1);\n\n      isDateForwardInStartView = this._areDatesInSameView(zoomLevel, dateForward, baseDate);\n      isDateBackwardInStartView = this._areDatesInSameView(zoomLevel, dateBackward, baseDate);\n      isDateForwardAvailable = isDateForwardInStartView && !this._isDateNotAvailable(dateForward);\n      isDateBackwardAvailable = isDateBackwardInStartView && !this._isDateNotAvailable(dateBackward);\n    } while (isDateForwardInStartView || isDateBackwardInStartView);\n\n    this.option(\"currentDate\", currentDate);\n  },\n  _isDateNotAvailable: function (date) {\n    var maxDate = this._getMaxDate();\n\n    var minDate = this._getMinDate();\n\n    return !(0, _math.inRange)(date, minDate, maxDate) || this._view.isDateDisabled(date);\n  },\n  _init: function () {\n    this.callBase();\n\n    this._correctZoomLevel();\n\n    this._initCurrentDate();\n\n    this._initActions();\n  },\n  _correctZoomLevel: function () {\n    var minZoomLevel = this.option(\"minZoomLevel\");\n    var maxZoomLevel = this.option(\"maxZoomLevel\");\n    var zoomLevel = this.option(\"zoomLevel\");\n\n    if (LEVEL_COMPARE_MAP[maxZoomLevel] < LEVEL_COMPARE_MAP[minZoomLevel]) {\n      return;\n    }\n\n    if (LEVEL_COMPARE_MAP[zoomLevel] > LEVEL_COMPARE_MAP[maxZoomLevel]) {\n      this.option(\"zoomLevel\", maxZoomLevel);\n    } else {\n      if (LEVEL_COMPARE_MAP[zoomLevel] < LEVEL_COMPARE_MAP[minZoomLevel]) {\n        this.option(\"zoomLevel\", minZoomLevel);\n      }\n    }\n  },\n  _initCurrentDate: function () {\n    var currentDate = this._getNormalizedDate(this._dateOption(\"value\")) || this._getNormalizedDate(this.option(\"currentDate\"));\n\n    this.option(\"currentDate\", currentDate);\n  },\n  _getNormalizedDate: function (date) {\n    date = _date2.default.normalizeDate(date, this._getMinDate(), this._getMaxDate());\n    return _type2.default.isDefined(date) ? new Date(date) : date;\n  },\n  _initActions: function () {\n    this._cellClickAction = this._createActionByOption(\"onCellClick\");\n    this._onContouredChanged = this._createActionByOption(\"onContouredChanged\");\n  },\n  _initTemplates: function () {\n    this._templateManager.addDefaultTemplates({\n      cell: new _function_template.FunctionTemplate(function (options) {\n        var data = options.model;\n        (0, _renderer2.default)(options.container).append((0, _renderer2.default)(\"<span>\").text(data && data.text || String(data)));\n      })\n    });\n\n    this.callBase();\n  },\n  _updateCurrentDate: function (date) {\n    if (_fx2.default.isAnimating(this._$viewsWrapper)) {\n      _fx2.default.stop(this._$viewsWrapper, true);\n    }\n\n    var min = this._getMinDate();\n\n    var max = this._getMaxDate();\n\n    if (min > max) {\n      this.option(\"currentDate\", new Date());\n      return;\n    }\n\n    var normalizedDate = this._getNormalizedDate(date);\n\n    if (date.getTime() !== normalizedDate.getTime()) {\n      this.option(\"currentDate\", new Date(normalizedDate));\n      return;\n    }\n\n    var offset = this._getViewsOffset(this._view.option(\"date\"), normalizedDate);\n\n    if (0 !== offset && !this._isMaxZoomLevel() && this._isOtherViewCellClicked) {\n      offset = 0;\n    }\n\n    if (this._view && 0 !== offset && !this._suppressNavigation) {\n      this._navigate(offset, normalizedDate);\n    } else {\n      this._renderNavigator();\n\n      this._setViewContoured(normalizedDate);\n\n      this._updateAriaId(normalizedDate);\n    }\n  },\n  _setViewContoured: function (date) {\n    if (this.option(\"hasFocus\")(this._focusTarget())) {\n      this._view.option(\"contouredDate\", date);\n    }\n  },\n  _getMinDate: function () {\n    if (this.min) {\n      return this.min;\n    }\n\n    this.min = this._dateOption(\"min\") || new Date(1e3, 0);\n    return this.min;\n  },\n  _getMaxDate: function () {\n    if (this.max) {\n      return this.max;\n    }\n\n    this.max = this._dateOption(\"max\") || new Date(3e3, 0);\n    return this.max;\n  },\n  _getViewsOffset: function (startDate, endDate) {\n    var zoomLevel = this.option(\"zoomLevel\");\n\n    if (zoomLevel === ZOOM_LEVEL.MONTH) {\n      return this._getMonthsOffset(startDate, endDate);\n    }\n\n    var zoomCorrection;\n\n    switch (zoomLevel) {\n      case ZOOM_LEVEL.CENTURY:\n        zoomCorrection = 100;\n        break;\n\n      case ZOOM_LEVEL.DECADE:\n        zoomCorrection = 10;\n        break;\n\n      default:\n        zoomCorrection = 1;\n    }\n\n    return parseInt(endDate.getFullYear() / zoomCorrection) - parseInt(startDate.getFullYear() / zoomCorrection);\n  },\n  _getMonthsOffset: function (startDate, endDate) {\n    var yearOffset = endDate.getFullYear() - startDate.getFullYear();\n    var monthOffset = endDate.getMonth() - startDate.getMonth();\n    return 12 * yearOffset + monthOffset;\n  },\n  _waitRenderView: function (offset) {\n    var _this = this;\n\n    if (this._alreadyViewRender) {\n      return;\n    }\n\n    this._alreadyViewRender = true;\n\n    var date = this._getDateByOffset(offset * this._getRtlCorrection());\n\n    this._moveToClosestAvailableDate(date);\n\n    this._waitRenderViewTimeout = setTimeout(function () {\n      _this._alreadyViewRender = false;\n    });\n  },\n  _getRtlCorrection: function () {\n    return this.option(\"rtlEnabled\") ? -1 : 1;\n  },\n  _getDateByOffset: function (offset, date) {\n    date = new Date(date || this.option(\"currentDate\"));\n    var currentDay = date.getDate();\n    var difference = _date2.default.getDifferenceInMonth(this.option(\"zoomLevel\")) * offset;\n    date.setDate(1);\n    date.setMonth(date.getMonth() + difference);\n\n    var lastDay = _date2.default.getLastMonthDate(date).getDate();\n\n    date.setDate(currentDay > lastDay ? lastDay : currentDay);\n    return date;\n  },\n  _focusTarget: function () {\n    return this.$element();\n  },\n  _initMarkup: function () {\n    this._renderSubmitElement();\n\n    this.callBase();\n    var $element = this.$element();\n    $element.addClass(CALENDAR_CLASS);\n\n    this._renderBody();\n\n    $element.append(this.$body);\n\n    this._renderViews();\n\n    this._renderNavigator();\n\n    $element.append(this._navigator.$element());\n\n    this._renderSwipeable();\n\n    this._renderFooter();\n\n    this._updateAriaSelected();\n\n    this._updateAriaId();\n\n    this._moveToClosestAvailableDate();\n  },\n  _render: function () {\n    this.callBase();\n\n    this._setViewContoured(this.option(\"currentDate\"));\n  },\n  _renderBody: function () {\n    if (!this._$viewsWrapper) {\n      this.$body = (0, _renderer2.default)(\"<div>\").addClass(CALENDAR_BODY_CLASS);\n      this._$viewsWrapper = (0, _renderer2.default)(\"<div>\").addClass(CALENDAR_VIEWS_WRAPPER_CLASS);\n      this.$body.append(this._$viewsWrapper);\n    }\n  },\n  _getKeyboardListeners: function () {\n    return this.callBase().concat([this._view]);\n  },\n  _renderViews: function () {\n    this.$element().addClass(CALENDAR_VIEW_CLASS + \"-\" + this.option(\"zoomLevel\"));\n    var currentDate = this.option(\"currentDate\");\n    this._view = this._renderSpecificView(currentDate);\n\n    if (_window2.default.hasWindow()) {\n      var beforeDate = this._getDateByOffset(-1, currentDate);\n\n      this._beforeView = this._isViewAvailable(beforeDate) ? this._renderSpecificView(beforeDate) : null;\n\n      var afterDate = this._getDateByOffset(1, currentDate);\n\n      afterDate.setDate(1);\n      this._afterView = this._isViewAvailable(afterDate) ? this._renderSpecificView(afterDate) : null;\n    }\n\n    this._translateViews();\n  },\n  _renderSpecificView: function (date) {\n    var specificView = _uiCalendar4.default[this.option(\"zoomLevel\")];\n\n    var $view = (0, _renderer2.default)(\"<div>\").appendTo(this._$viewsWrapper);\n\n    var config = this._viewConfig(date);\n\n    return new specificView($view, config);\n  },\n  _viewConfig: function (date) {\n    var disabledDates = this.option(\"disabledDates\");\n    disabledDates = _type2.default.isFunction(disabledDates) ? this._injectComponent(disabledDates.bind(this)) : disabledDates;\n    return {\n      date: date,\n      min: this._getMinDate(),\n      max: this._getMaxDate(),\n      firstDayOfWeek: this.option(\"firstDayOfWeek\"),\n      value: this._dateOption(\"value\"),\n      rtlEnabled: this.option(\"rtlEnabled\"),\n      disabled: this.option(\"disabled\"),\n      tabIndex: void 0,\n      focusStateEnabled: this.option(\"focusStateEnabled\"),\n      hoverStateEnabled: this.option(\"hoverStateEnabled\"),\n      disabledDates: disabledDates,\n      onCellClick: this._cellClickHandler.bind(this),\n      cellTemplate: this._getTemplateByOption(\"cellTemplate\"),\n      allowValueSelection: this._isMaxZoomLevel()\n    };\n  },\n  _injectComponent: function (func) {\n    var that = this;\n    return function (params) {\n      (0, _extend.extend)(params, {\n        component: that\n      });\n      return func(params);\n    };\n  },\n  _isViewAvailable: function (date) {\n    var zoomLevel = this.option(\"zoomLevel\");\n\n    var min = _date2.default.getViewMinBoundaryDate(zoomLevel, this._getMinDate());\n\n    var max = _date2.default.getViewMaxBoundaryDate(zoomLevel, this._getMaxDate());\n\n    return _date2.default.dateInRange(date, min, max);\n  },\n  _translateViews: function () {\n    _translator2.default.move(this._view.$element(), {\n      left: 0,\n      top: 0\n    });\n\n    this._beforeView && _translator2.default.move(this._beforeView.$element(), {\n      left: this._getViewPosition(-1),\n      top: 0\n    });\n    this._afterView && _translator2.default.move(this._afterView.$element(), {\n      left: this._getViewPosition(1),\n      top: 0\n    });\n  },\n  _getViewPosition: function (coefficient) {\n    var rtlCorrection = this.option(\"rtlEnabled\") && !_browser2.default.msie ? -1 : 1;\n    return 100 * coefficient * rtlCorrection + \"%\";\n  },\n  _cellClickHandler: function (e) {\n    var zoomLevel = this.option(\"zoomLevel\");\n\n    var nextView = _date2.default.getViewDown(zoomLevel);\n\n    var isMaxZoomLevel = this._isMaxZoomLevel();\n\n    if (nextView && !isMaxZoomLevel) {\n      this._navigateDown(e.event.currentTarget);\n    } else {\n      var newValue = this._updateTimeComponent(e.value);\n\n      this._dateValue(newValue, e.event);\n\n      this._cellClickAction(e);\n    }\n  },\n  _updateTimeComponent: function (date) {\n    var result = new Date(date);\n\n    var currentValue = this._dateOption(\"value\");\n\n    if (currentValue) {\n      result.setHours(currentValue.getHours());\n      result.setMinutes(currentValue.getMinutes());\n      result.setSeconds(currentValue.getSeconds());\n      result.setMilliseconds(currentValue.getMilliseconds());\n    }\n\n    return result;\n  },\n  _isMaxZoomLevel: function () {\n    return this.option(\"zoomLevel\") === this.option(\"maxZoomLevel\");\n  },\n  _navigateDown: function (cell) {\n    var zoomLevel = this.option(\"zoomLevel\");\n\n    if (this._isMaxZoomLevel()) {\n      return;\n    }\n\n    var nextView = _date2.default.getViewDown(zoomLevel);\n\n    if (!nextView) {\n      return;\n    }\n\n    var newCurrentDate = this._view.option(\"contouredDate\") || this._view.option(\"date\");\n\n    if (cell) {\n      newCurrentDate = (0, _renderer2.default)(cell).data(CALENDAR_DATE_VALUE_KEY);\n    }\n\n    this._isOtherViewCellClicked = true;\n    this.option(\"currentDate\", newCurrentDate);\n    this.option(\"zoomLevel\", nextView);\n    this._isOtherViewCellClicked = false;\n\n    this._renderNavigator();\n\n    this._animateShowView();\n\n    this._moveToClosestAvailableDate();\n\n    this._setViewContoured(this._getNormalizedDate(this.option(\"currentDate\")));\n  },\n  _renderNavigator: function () {\n    if (!this._navigator) {\n      this._navigator = new _uiCalendar2.default((0, _renderer2.default)(\"<div>\"), this._navigatorConfig());\n    }\n\n    this._navigator.option(\"text\", this._view.getNavigatorCaption());\n\n    this._updateButtonsVisibility();\n  },\n  _navigatorConfig: function () {\n    return {\n      text: this._view.getNavigatorCaption(),\n      onClick: this._navigatorClickHandler.bind(this),\n      onCaptionClick: this._navigateUp.bind(this),\n      rtlEnabled: this.option(\"rtlEnabled\")\n    };\n  },\n  _navigatorClickHandler: function (e) {\n    var currentDate = this._getDateByOffset(e.direction, this.option(\"currentDate\"));\n\n    this._moveToClosestAvailableDate(currentDate);\n\n    this._updateNavigatorCaption(-e.direction * this._getRtlCorrection());\n  },\n  _navigateUp: function () {\n    var zoomLevel = this.option(\"zoomLevel\");\n\n    var nextView = _date2.default.getViewUp(zoomLevel);\n\n    if (!nextView || this._isMinZoomLevel(zoomLevel)) {\n      return;\n    }\n\n    this.option(\"zoomLevel\", nextView);\n\n    this._renderNavigator();\n\n    this._animateShowView();\n\n    this._moveToClosestAvailableDate();\n\n    this._setViewContoured(this._getNormalizedDate(this.option(\"currentDate\")));\n  },\n  _isMinZoomLevel: function (zoomLevel) {\n    var min = this._getMinDate();\n\n    var max = this._getMaxDate();\n\n    return _date2.default.sameView(zoomLevel, min, max) || this.option(\"minZoomLevel\") === zoomLevel;\n  },\n  _updateButtonsVisibility: function () {\n    this._navigator.toggleButton(\"next\", !_type2.default.isDefined(this._getRequiredView(\"next\")));\n\n    this._navigator.toggleButton(\"prev\", !_type2.default.isDefined(this._getRequiredView(\"prev\")));\n  },\n  _renderSwipeable: function () {\n    if (!this._swipeable) {\n      this._swipeable = this._createComponent(this.$element(), _swipeable2.default, {\n        onStart: this._swipeStartHandler.bind(this),\n        onUpdated: this._swipeUpdateHandler.bind(this),\n        onEnd: this._swipeEndHandler.bind(this),\n        itemSizeFunc: this._viewWidth.bind(this)\n      });\n    }\n  },\n  _swipeStartHandler: function (e) {\n    _fx2.default.stop(this._$viewsWrapper, true);\n\n    e.event.maxLeftOffset = this._getRequiredView(\"next\") ? 1 : 0;\n    e.event.maxRightOffset = this._getRequiredView(\"prev\") ? 1 : 0;\n  },\n  _getRequiredView: function (name) {\n    var view;\n    var isRtl = this.option(\"rtlEnabled\");\n\n    if (\"next\" === name) {\n      view = isRtl ? this._beforeView : this._afterView;\n    } else {\n      if (\"prev\" === name) {\n        view = isRtl ? this._afterView : this._beforeView;\n      }\n    }\n\n    return view;\n  },\n  _swipeUpdateHandler: function (e) {\n    var offset = e.event.offset;\n\n    _translator2.default.move(this._$viewsWrapper, {\n      left: offset * this._viewWidth(),\n      top: 0\n    });\n\n    this._updateNavigatorCaption(offset);\n  },\n  _swipeEndHandler: function (e) {\n    var targetOffset = e.event.targetOffset;\n    var moveOffset = !targetOffset ? 0 : targetOffset / Math.abs(targetOffset);\n\n    if (0 === moveOffset) {\n      this._animateWrapper(0, ANIMATION_DURATION_SHOW_VIEW);\n\n      return;\n    }\n\n    var date = this._getDateByOffset(-moveOffset * this._getRtlCorrection());\n\n    if (this._isDateInInvalidRange(date)) {\n      if (moveOffset >= 0) {\n        date = new Date(this._getMinDate());\n      } else {\n        date = new Date(this._getMaxDate());\n      }\n    }\n\n    this.option(\"currentDate\", date);\n  },\n  _viewWidth: function () {\n    if (!this._viewWidthValue) {\n      this._viewWidthValue = this.$element().width();\n    }\n\n    return this._viewWidthValue;\n  },\n  _updateNavigatorCaption: function (offset) {\n    offset *= this._getRtlCorrection();\n    var view = this._view;\n\n    if (offset > .5 && this._beforeView) {\n      view = this._beforeView;\n    } else {\n      if (offset < -.5 && this._afterView) {\n        view = this._afterView;\n      }\n    }\n\n    this._navigator.option(\"text\", view.getNavigatorCaption());\n  },\n  _isDateInInvalidRange: function (date) {\n    if (this._view.isBoundary(date)) {\n      return;\n    }\n\n    var min = this._getMinDate();\n\n    var max = this._getMaxDate();\n\n    var normalizedDate = _date2.default.normalizeDate(date, min, max);\n\n    return normalizedDate === min || normalizedDate === max;\n  },\n  _renderFooter: function () {\n    var showTodayButton = this.option(\"showTodayButton\");\n\n    if (showTodayButton) {\n      var $todayButton = this._createComponent((0, _renderer2.default)(\"<a>\"), _button2.default, {\n        focusStateEnabled: false,\n        text: _message2.default.format(\"dxCalendar-todayButtonText\"),\n        onClick: function () {\n          this._toTodayView();\n        }.bind(this),\n        integrationOptions: {}\n      }).$element().addClass(CALENDAR_TODAY_BUTTON_CLASS);\n\n      this._$footer = (0, _renderer2.default)(\"<div>\").addClass(CALENDAR_FOOTER_CLASS).append($todayButton);\n      this.$element().append(this._$footer);\n    }\n\n    this.$element().toggleClass(CALENDAR_HAS_FOOTER_CLASS, showTodayButton);\n  },\n  _renderSubmitElement: function () {\n    this._$submitElement = (0, _renderer2.default)(\"<input>\").attr(\"type\", \"hidden\").appendTo(this.$element());\n\n    this._setSubmitValue(this.option(\"value\"));\n  },\n  _setSubmitValue: function (value) {\n    var dateValue = this._convertToDate(value);\n\n    this._getSubmitElement().val(_date_serialization2.default.serializeDate(dateValue, CALENDAR_INPUT_STANDARD_PATTERN));\n  },\n  _getSubmitElement: function () {\n    return this._$submitElement;\n  },\n  _animateShowView: function () {\n    _fx2.default.stop(this._view.$element(), true);\n\n    return this._popAnimationView(this._view, POP_ANIMATION_FROM, POP_ANIMATION_TO, ANIMATION_DURATION_SHOW_VIEW).promise();\n  },\n  _popAnimationView: function (view, from, to, duration) {\n    return _fx2.default.animate(view.$element(), {\n      type: \"pop\",\n      from: {\n        scale: from,\n        opacity: from\n      },\n      to: {\n        scale: to,\n        opacity: to\n      },\n      duration: duration\n    });\n  },\n  _navigate: function (offset, value) {\n    if (0 !== offset && 1 !== Math.abs(offset) && this._isViewAvailable(value)) {\n      var newView = this._renderSpecificView(value);\n\n      if (offset > 0) {\n        this._afterView && this._afterView.$element().remove();\n        this._afterView = newView;\n      } else {\n        this._beforeView && this._beforeView.$element().remove();\n        this._beforeView = newView;\n      }\n\n      this._translateViews();\n    }\n\n    var rtlCorrection = this._getRtlCorrection();\n\n    var offsetSign = offset > 0 ? 1 : offset < 0 ? -1 : 0;\n\n    var endPosition = -rtlCorrection * offsetSign * this._viewWidth();\n\n    var viewsWrapperPosition = this._$viewsWrapper.position().left;\n\n    if (viewsWrapperPosition !== endPosition) {\n      if (this._preventViewChangeAnimation) {\n        this._wrapperAnimationEndHandler(offset, value);\n      } else {\n        this._animateWrapper(endPosition, ANIMATION_DURATION_SHOW_VIEW).done(this._wrapperAnimationEndHandler.bind(this, offset, value));\n      }\n    }\n  },\n  _animateWrapper: function (to, duration) {\n    return _fx2.default.animate(this._$viewsWrapper, {\n      type: \"slide\",\n      from: {\n        left: this._$viewsWrapper.position().left\n      },\n      to: {\n        left: to\n      },\n      duration: duration\n    });\n  },\n  _toTodayView: function () {\n    var today = new Date();\n\n    if (this._isMaxZoomLevel()) {\n      this._dateOption(\"value\", today);\n\n      return;\n    }\n\n    this._preventViewChangeAnimation = true;\n    this.option(\"zoomLevel\", this.option(\"maxZoomLevel\"));\n\n    this._dateOption(\"value\", today);\n\n    this._animateShowView();\n\n    this._preventViewChangeAnimation = false;\n  },\n  _wrapperAnimationEndHandler: function (offset, newDate) {\n    this._rearrangeViews(offset);\n\n    this._translateViews();\n\n    this._resetLocation();\n\n    this._renderNavigator();\n\n    this._setViewContoured(newDate);\n\n    this._updateAriaId(newDate);\n  },\n  _rearrangeViews: function (offset) {\n    if (0 === offset) {\n      return;\n    }\n\n    var viewOffset;\n    var viewToCreateKey;\n    var viewToRemoveKey;\n\n    if (offset < 0) {\n      viewOffset = 1;\n      viewToCreateKey = \"_beforeView\";\n      viewToRemoveKey = \"_afterView\";\n    } else {\n      viewOffset = -1;\n      viewToCreateKey = \"_afterView\";\n      viewToRemoveKey = \"_beforeView\";\n    }\n\n    if (!this[viewToCreateKey]) {\n      return;\n    }\n\n    var destinationDate = this[viewToCreateKey].option(\"date\");\n\n    if (this[viewToRemoveKey]) {\n      this[viewToRemoveKey].$element().remove();\n    }\n\n    if (offset === viewOffset) {\n      this[viewToRemoveKey] = this._view;\n    } else {\n      this[viewToRemoveKey] = this._renderSpecificView(this._getDateByOffset(viewOffset, destinationDate));\n\n      this._view.$element().remove();\n    }\n\n    this._view = this[viewToCreateKey];\n\n    var dateByOffset = this._getDateByOffset(-viewOffset, destinationDate);\n\n    this[viewToCreateKey] = this._isViewAvailable(dateByOffset) ? this._renderSpecificView(dateByOffset) : null;\n  },\n  _resetLocation: function () {\n    _translator2.default.move(this._$viewsWrapper, {\n      left: 0,\n      top: 0\n    });\n  },\n  _clean: function () {\n    this.callBase();\n\n    this._clearViewWidthCache();\n\n    delete this._$viewsWrapper;\n    delete this._navigator;\n    delete this._$footer;\n  },\n  _clearViewWidthCache: function () {\n    delete this._viewWidthValue;\n  },\n  _disposeViews: function () {\n    this._view.$element().remove();\n\n    this._beforeView && this._beforeView.$element().remove();\n    this._afterView && this._afterView.$element().remove();\n    delete this._view;\n    delete this._beforeView;\n    delete this._afterView;\n  },\n  _dispose: function () {\n    clearTimeout(this._waitRenderViewTimeout);\n    this.callBase();\n  },\n  _refreshViews: function () {\n    this._disposeViews();\n\n    this._renderViews();\n  },\n  _visibilityChanged: function () {\n    this._translateViews();\n  },\n  _focusInHandler: function () {\n    this.callBase.apply(this, arguments);\n\n    this._view.option(\"contouredDate\", this.option(\"currentDate\"));\n  },\n  _focusOutHandler: function () {\n    this.callBase.apply(this, arguments);\n\n    this._view.option(\"contouredDate\", null);\n  },\n  _updateViewsValue: function (value) {\n    var newValue = value ? new Date(value) : null;\n\n    this._view.option(\"value\", newValue);\n\n    this._beforeView && this._beforeView.option(\"value\", newValue);\n    this._afterView && this._afterView.option(\"value\", newValue);\n  },\n  _updateAriaSelected: function (value, previousValue) {\n    value = value || this._dateOption(\"value\");\n\n    var $prevSelectedCell = this._view._getCellByDate(previousValue);\n\n    var $selectedCell = this._view._getCellByDate(value);\n\n    this.setAria(\"selected\", void 0, $prevSelectedCell);\n    this.setAria(\"selected\", true, $selectedCell);\n\n    if (value && this.option(\"currentDate\").getTime() === value.getTime()) {\n      this._updateAriaId(value);\n    }\n  },\n  _updateAriaId: function (value) {\n    value = value || this.option(\"currentDate\");\n    var ariaId = \"dx-\" + new _guid2.default();\n\n    var $newCell = this._view._getCellByDate(value);\n\n    this.setAria(\"id\", ariaId, $newCell);\n    this.setAria(\"activedescendant\", ariaId);\n\n    this._onContouredChanged(ariaId);\n  },\n  _suppressingNavigation: function (callback, args) {\n    this._suppressNavigation = true;\n    callback.apply(this, args);\n    delete this._suppressNavigation;\n  },\n  _optionChanged: function (args) {\n    var value = args.value;\n    var previousValue = args.previousValue;\n\n    switch (args.name) {\n      case \"width\":\n        this.callBase(args);\n\n        this._clearViewWidthCache();\n\n        break;\n\n      case \"min\":\n      case \"max\":\n        this.min = void 0;\n        this.max = void 0;\n\n        this._suppressingNavigation(this._updateCurrentDate, [this.option(\"currentDate\")]);\n\n        this._refreshViews();\n\n        this._renderNavigator();\n\n        break;\n\n      case \"firstDayOfWeek\":\n        this._refreshViews();\n\n        this._updateButtonsVisibility();\n\n        break;\n\n      case \"currentDate\":\n        this.setAria(\"id\", void 0, this._view._getCellByDate(previousValue));\n\n        this._updateCurrentDate(value);\n\n        break;\n\n      case \"zoomLevel\":\n        this.$element().removeClass(CALENDAR_VIEW_CLASS + \"-\" + previousValue);\n\n        this._correctZoomLevel();\n\n        this._refreshViews();\n\n        this._renderNavigator();\n\n        this._updateAriaId();\n\n        break;\n\n      case \"minZoomLevel\":\n      case \"maxZoomLevel\":\n        this._correctZoomLevel();\n\n        this._updateButtonsVisibility();\n\n        break;\n\n      case \"value\":\n        value = this._convertToDate(value);\n        previousValue = this._convertToDate(previousValue);\n\n        this._updateAriaSelected(value, previousValue);\n\n        this.option(\"currentDate\", _type2.default.isDefined(value) ? new Date(value) : new Date());\n\n        this._updateViewsValue(value);\n\n        this._setSubmitValue(value);\n\n        this.callBase(args);\n        break;\n\n      case \"disabled\":\n        this._view.option(\"disabled\", value);\n\n        this.callBase(args);\n        break;\n\n      case \"onCellClick\":\n        this._view.option(\"onCellClick\", value);\n\n        break;\n\n      case \"onContouredChanged\":\n        this._onContouredChanged = this._createActionByOption(\"onContouredChanged\");\n        break;\n\n      case \"disabledDates\":\n      case \"dateSerializationFormat\":\n      case \"cellTemplate\":\n      case \"showTodayButton\":\n        this._invalidate();\n\n        break;\n\n      case \"hasFocus\":\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n});\n\n(0, _component_registrator2.default)(\"dxCalendar\", Calendar);\nmodule.exports = Calendar;","map":null,"metadata":{},"sourceType":"script"}