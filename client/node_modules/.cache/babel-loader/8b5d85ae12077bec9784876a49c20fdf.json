{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.utils.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nvar _filtering = require(\"../shared/filtering\");\n\nvar _string = require(\"../../core/utils/string\");\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _position = require(\"../../core/utils/position\");\n\nvar _data = require(\"../../core/utils/data\");\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _load_panel = require(\"../load_panel\");\n\nvar _load_panel2 = _interopRequireDefault(_load_panel);\n\nvar _utils = require(\"../../data/utils\");\n\nvar _format_helper = require(\"../../format_helper\");\n\nvar _format_helper2 = _interopRequireDefault(_format_helper);\n\nvar _object = require(\"../../core/utils/object\");\n\nvar _window = require(\"../../core/utils/window\");\n\nvar _events_engine = require(\"../../events/core/events_engine\");\n\nvar _events_engine2 = _interopRequireDefault(_events_engine);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar DATAGRID_SELECTION_DISABLED_CLASS = \"dx-selection-disabled\";\nvar DATAGRID_GROUP_OPENED_CLASS = \"dx-datagrid-group-opened\";\nvar DATAGRID_GROUP_CLOSED_CLASS = \"dx-datagrid-group-closed\";\nvar DATAGRID_EXPAND_CLASS = \"dx-datagrid-expand\";\nvar NO_DATA_CLASS = \"nodata\";\nvar DATE_INTERVAL_SELECTORS = {\n  year: function (value) {\n    return value && value.getFullYear();\n  },\n  month: function (value) {\n    return value && value.getMonth() + 1;\n  },\n  day: function (value) {\n    return value && value.getDate();\n  },\n  quarter: function (value) {\n    return value && Math.floor(value.getMonth() / 3) + 1;\n  },\n  hour: function (value) {\n    return value && value.getHours();\n  },\n  minute: function (value) {\n    return value && value.getMinutes();\n  },\n  second: function (value) {\n    return value && value.getSeconds();\n  }\n};\n\nmodule.exports = function () {\n  var getIntervalSelector = function () {\n    var data = arguments[1];\n    var value = this.calculateCellValue(data);\n\n    if (!(0, _type.isDefined)(value)) {\n      return null;\n    } else {\n      if (isDateType(this.dataType)) {\n        var nameIntervalSelector = arguments[0];\n        return DATE_INTERVAL_SELECTORS[nameIntervalSelector](value);\n      } else {\n        if (\"number\" === this.dataType) {\n          var groupInterval = arguments[0];\n          return Math.floor(Number(value) / groupInterval) * groupInterval;\n        }\n      }\n    }\n  };\n\n  var equalSelectors = function (selector1, selector2) {\n    if ((0, _type.isFunction)(selector1) && (0, _type.isFunction)(selector2)) {\n      if (selector1.originalCallback && selector2.originalCallback) {\n        return selector1.originalCallback === selector2.originalCallback && selector1.columnIndex === selector2.columnIndex;\n      }\n    }\n\n    return selector1 === selector2;\n  };\n\n  function isDateType(dataType) {\n    return \"date\" === dataType || \"datetime\" === dataType;\n  }\n\n  var setEmptyText = function ($container) {\n    $container.get(0).textContent = \"\\xa0\";\n  };\n\n  var getWidgetInstance = function ($element) {\n    var editorData = $element.data && $element.data();\n    var dxComponents = editorData && editorData.dxComponents;\n    var widgetName = dxComponents && dxComponents[0];\n    return widgetName && editorData[widgetName];\n  };\n\n  return {\n    renderNoDataText: function ($element) {\n      var that = this;\n      $element = $element || this.element();\n\n      if (!$element) {\n        return;\n      }\n\n      var noDataClass = that.addWidgetPrefix(NO_DATA_CLASS);\n      var noDataElement = $element.find(\".\" + noDataClass).last();\n\n      var isVisible = this._dataController.isEmpty();\n\n      var isLoading = this._dataController.isLoading();\n\n      if (!noDataElement.length) {\n        noDataElement = (0, _renderer2.default)(\"<span>\").addClass(noDataClass).appendTo($element);\n      }\n\n      if (isVisible && !isLoading) {\n        noDataElement.removeClass(\"dx-hidden\").text(that._getNoDataText());\n      } else {\n        noDataElement.addClass(\"dx-hidden\");\n      }\n    },\n    renderLoadPanel: function ($element, $container, isLocalStore) {\n      var that = this;\n      var loadPanelOptions;\n      that._loadPanel && that._loadPanel.$element().remove();\n      loadPanelOptions = that.option(\"loadPanel\");\n\n      if (loadPanelOptions && (\"auto\" === loadPanelOptions.enabled ? !isLocalStore : loadPanelOptions.enabled)) {\n        loadPanelOptions = (0, _extend.extend)({\n          shading: false,\n          message: loadPanelOptions.text,\n          position: function () {\n            var $window = (0, _renderer2.default)((0, _window.getWindow)());\n\n            if ($element.height() > $window.height()) {\n              return {\n                of: $window,\n                boundary: $element,\n                collision: \"fit\"\n              };\n            }\n\n            return {\n              of: $element\n            };\n          },\n          container: $container\n        }, loadPanelOptions);\n        that._loadPanel = that._createComponent((0, _renderer2.default)(\"<div>\").appendTo($container), _load_panel2.default, loadPanelOptions);\n      } else {\n        that._loadPanel = null;\n      }\n    },\n    getIndexByKey: function (key, items, keyName) {\n      var index = -1;\n\n      if (void 0 !== key && Array.isArray(items)) {\n        keyName = arguments.length <= 2 ? \"key\" : keyName;\n\n        for (var i = 0; i < items.length; i++) {\n          var item = (0, _type.isDefined)(keyName) ? items[i][keyName] : items[i];\n\n          if ((0, _common.equalByValue)(key, item)) {\n            index = i;\n            break;\n          }\n        }\n      }\n\n      return index;\n    },\n    combineFilters: function (filters, operation) {\n      var resultFilter = [];\n      operation = operation || \"and\";\n\n      for (var i = 0; i < filters.length; i++) {\n        if (!filters[i]) {\n          continue;\n        }\n\n        if (resultFilter.length) {\n          resultFilter.push(operation);\n        }\n\n        resultFilter.push(filters[i]);\n      }\n\n      if (1 === resultFilter.length) {\n        resultFilter = resultFilter[0];\n      }\n\n      if (resultFilter.length) {\n        return resultFilter;\n      }\n    },\n    checkChanges: function (changes, changeNames) {\n      var changesWithChangeNamesCount = 0;\n\n      for (var i = 0; i < changeNames.length; i++) {\n        if (changes[changeNames[i]]) {\n          changesWithChangeNamesCount++;\n        }\n      }\n\n      return changes.length && changes.length === changesWithChangeNamesCount;\n    },\n    equalFilterParameters: function (filter1, filter2) {\n      if (Array.isArray(filter1) && Array.isArray(filter2)) {\n        if (filter1.length !== filter2.length) {\n          return false;\n        } else {\n          for (var i = 0; i < filter1.length; i++) {\n            if (!module.exports.equalFilterParameters(filter1[i], filter2[i])) {\n              return false;\n            }\n          }\n        }\n\n        return true;\n      } else {\n        if ((0, _type.isFunction)(filter1) && filter1.columnIndex >= 0 && (0, _type.isFunction)(filter2) && filter2.columnIndex >= 0) {\n          return filter1.columnIndex === filter2.columnIndex && (0, _data.toComparable)(filter1.filterValue) === (0, _data.toComparable)(filter2.filterValue);\n        } else {\n          return (0, _data.toComparable)(filter1) == (0, _data.toComparable)(filter2);\n        }\n      }\n    },\n    proxyMethod: function (instance, methodName, defaultResult) {\n      if (!instance[methodName]) {\n        instance[methodName] = function () {\n          var dataSource = this._dataSource;\n          return dataSource ? dataSource[methodName].apply(dataSource, arguments) : defaultResult;\n        };\n      }\n    },\n    formatValue: function (value, options) {\n      var valueText = _format_helper2.default.format(value, options.format) || value && value.toString() || \"\";\n      var formatObject = {\n        value: value,\n        valueText: options.getDisplayFormat ? options.getDisplayFormat(valueText) : valueText,\n        target: options.target || \"row\",\n        groupInterval: options.groupInterval\n      };\n      return options.customizeText ? options.customizeText.call(options, formatObject) : formatObject.valueText;\n    },\n    getFormatOptionsByColumn: function (column, target) {\n      return {\n        format: column.format,\n        getDisplayFormat: column.getDisplayFormat,\n        customizeText: column.customizeText,\n        target: target,\n        trueText: column.trueText,\n        falseText: column.falseText\n      };\n    },\n    getDisplayValue: function (column, value, data, rowType) {\n      if (column.displayValueMap && void 0 !== column.displayValueMap[value]) {\n        return column.displayValueMap[value];\n      } else {\n        if (column.calculateDisplayValue && data && \"group\" !== rowType) {\n          return column.calculateDisplayValue(data);\n        } else {\n          if (column.lookup && !(\"group\" === rowType && (column.calculateGroupValue || column.calculateDisplayValue))) {\n            return column.lookup.calculateCellValue(value);\n          }\n        }\n      }\n\n      return value;\n    },\n    getGroupRowSummaryText: function (summaryItems, summaryTexts) {\n      var result = \"(\";\n\n      for (var i = 0; i < summaryItems.length; i++) {\n        var summaryItem = summaryItems[i];\n        result += (i > 0 ? \", \" : \"\") + module.exports.getSummaryText(summaryItem, summaryTexts);\n      }\n\n      return result += \")\";\n    },\n    getSummaryText: function (summaryItem, summaryTexts) {\n      var displayFormat = summaryItem.displayFormat || summaryItem.columnCaption && summaryTexts[summaryItem.summaryType + \"OtherColumn\"] || summaryTexts[summaryItem.summaryType];\n      return this.formatValue(summaryItem.value, {\n        format: summaryItem.valueFormat,\n        getDisplayFormat: function (valueText) {\n          return displayFormat ? (0, _string.format)(displayFormat, valueText, summaryItem.columnCaption) : valueText;\n        },\n        customizeText: summaryItem.customizeText\n      });\n    },\n    normalizeSortingInfo: function (sort) {\n      sort = sort || [];\n      var result = (0, _utils.normalizeSortingInfo)(sort);\n\n      for (var i = 0; i < sort.length; i++) {\n        if (sort && sort[i] && void 0 !== sort[i].isExpanded) {\n          result[i].isExpanded = sort[i].isExpanded;\n        }\n\n        if (sort && sort[i] && void 0 !== sort[i].groupInterval) {\n          result[i].groupInterval = sort[i].groupInterval;\n        }\n      }\n\n      return result;\n    },\n    getFormatByDataType: function (dataType) {\n      switch (dataType) {\n        case \"date\":\n          return \"shortDate\";\n\n        case \"datetime\":\n          return \"shortDateShortTime\";\n      }\n    },\n    getHeaderFilterGroupParameters: function (column, remoteGrouping) {\n      var result = [];\n      var dataField = column.dataField || column.name;\n      var groupInterval = (0, _filtering.getGroupInterval)(column);\n\n      if (groupInterval) {\n        (0, _iterator.each)(groupInterval, function (index, interval) {\n          result.push(remoteGrouping ? {\n            selector: dataField,\n            groupInterval: interval,\n            isExpanded: index < groupInterval.length - 1\n          } : getIntervalSelector.bind(column, interval));\n        });\n        return result;\n      }\n\n      if (remoteGrouping) {\n        result = [{\n          selector: dataField,\n          isExpanded: false\n        }];\n      } else {\n        result = function result(data) {\n          var result = column.calculateCellValue(data);\n\n          if (void 0 === result || \"\" === result) {\n            result = null;\n          }\n\n          return result;\n        };\n\n        if (column.sortingMethod) {\n          result = [{\n            selector: result,\n            compare: column.sortingMethod.bind(column)\n          }];\n        }\n      }\n\n      return result;\n    },\n    equalSortParameters: function (sortParameters1, sortParameters2, ignoreIsExpanded) {\n      sortParameters1 = module.exports.normalizeSortingInfo(sortParameters1);\n      sortParameters2 = module.exports.normalizeSortingInfo(sortParameters2);\n\n      if (Array.isArray(sortParameters1) && Array.isArray(sortParameters2)) {\n        if (sortParameters1.length !== sortParameters2.length) {\n          return false;\n        } else {\n          for (var i = 0; i < sortParameters1.length; i++) {\n            if (!equalSelectors(sortParameters1[i].selector, sortParameters2[i].selector) || sortParameters1[i].desc !== sortParameters2[i].desc || sortParameters1[i].groupInterval !== sortParameters2[i].groupInterval || !ignoreIsExpanded && Boolean(sortParameters1[i].isExpanded) !== Boolean(sortParameters2[i].isExpanded)) {\n              return false;\n            }\n          }\n        }\n\n        return true;\n      } else {\n        return (!sortParameters1 || !sortParameters1.length) === (!sortParameters2 || !sortParameters2.length);\n      }\n    },\n    getPointsByColumns: function (items, pointCreated, isVertical, startColumnIndex) {\n      var cellsLength = items.length;\n      var notCreatePoint = false;\n      var item;\n      var offset;\n      var columnIndex = startColumnIndex || 0;\n      var result = [];\n      var rtlEnabled;\n\n      for (var i = 0; i <= cellsLength; i++) {\n        if (i < cellsLength) {\n          item = items.eq(i);\n          offset = item.offset();\n          rtlEnabled = \"rtl\" === item.css(\"direction\");\n        }\n\n        var point = {\n          index: columnIndex,\n          x: offset ? offset.left + (!isVertical && rtlEnabled ^ i === cellsLength ? (0, _position.getBoundingRect)(item[0]).width : 0) : 0,\n          y: offset ? offset.top + (isVertical && i === cellsLength ? (0, _position.getBoundingRect)(item[0]).height : 0) : 0,\n          columnIndex: columnIndex\n        };\n\n        if (!isVertical && i > 0) {\n          var prevItemOffset = items.eq(i - 1).offset();\n\n          if (prevItemOffset.top < point.y) {\n            point.y = prevItemOffset.top;\n          }\n        }\n\n        if (pointCreated) {\n          notCreatePoint = pointCreated(point);\n        }\n\n        if (!notCreatePoint) {\n          result.push(point);\n        }\n\n        columnIndex++;\n      }\n\n      return result;\n    },\n    createObjectWithChanges: function (target, changes) {\n      var result = target ? Object.create(Object.getPrototypeOf(target)) : {};\n      var targetWithoutPrototype = (0, _extend.extendFromObject)({}, target);\n      (0, _object.deepExtendArraySafe)(result, targetWithoutPrototype, true, true);\n      return (0, _object.deepExtendArraySafe)(result, changes, true, true);\n    },\n    getExpandCellTemplate: function () {\n      return {\n        allowRenderToDetachedContainer: true,\n        render: function (container, options) {\n          var $container = (0, _renderer2.default)(container);\n\n          if ((0, _type.isDefined)(options.value) && !(options.data && options.data.isContinuation) && !options.row.isNewRow) {\n            var rowsView = options.component.getView(\"rowsView\");\n            $container.addClass(DATAGRID_EXPAND_CLASS).addClass(DATAGRID_SELECTION_DISABLED_CLASS);\n            (0, _renderer2.default)(\"<div>\").addClass(options.value ? DATAGRID_GROUP_OPENED_CLASS : DATAGRID_GROUP_CLOSED_CLASS).appendTo($container);\n            rowsView.setAria(\"label\", options.value ? rowsView.localize(\"dxDataGrid-ariaCollapse\") : rowsView.localize(\"dxDataGrid-ariaExpand\"), $container);\n          } else {\n            setEmptyText($container);\n          }\n        }\n      };\n    },\n    setEmptyText: setEmptyText,\n    isDateType: isDateType,\n    getSelectionRange: function (focusedElement) {\n      try {\n        if (focusedElement) {\n          return {\n            selectionStart: focusedElement.selectionStart,\n            selectionEnd: focusedElement.selectionEnd\n          };\n        }\n      } catch (e) {}\n\n      return {};\n    },\n    setSelectionRange: function (focusedElement, selectionRange) {\n      try {\n        if (focusedElement && focusedElement.setSelectionRange) {\n          focusedElement.setSelectionRange(selectionRange.selectionStart, selectionRange.selectionEnd);\n        }\n      } catch (e) {}\n    },\n    focusAndSelectElement: function (component, $element) {\n      _events_engine2.default.trigger($element, \"focus\");\n\n      var isSelectTextOnEditingStart = component.option(\"editing.selectTextOnEditStart\");\n      var keyboardController = component.getController(\"keyboardNavigation\");\n\n      var isEditingNavigationMode = keyboardController && keyboardController._isFastEditingStarted();\n\n      if (isSelectTextOnEditingStart && !isEditingNavigationMode && $element.is(\".dx-texteditor-input\")) {\n        var editor = getWidgetInstance($element.closest(\".dx-texteditor\"));\n        (0, _deferred.when)(editor && editor._loadItemDeferred).done(function () {\n          $element.get(0).select();\n        });\n      }\n    },\n    getWidgetInstance: getWidgetInstance,\n    getLastResizableColumnIndex: function (columns, resultWidths) {\n      var hasResizableColumns = columns.some(function (column) {\n        return column && !column.command && !column.fixed && false !== column.allowResizing;\n      });\n      var lastColumnIndex;\n\n      for (lastColumnIndex = columns.length - 1; columns[lastColumnIndex]; lastColumnIndex--) {\n        var column = columns[lastColumnIndex];\n        var width = resultWidths && resultWidths[lastColumnIndex];\n        var allowResizing = !hasResizableColumns || false !== column.allowResizing;\n\n        if (!column.command && !column.fixed && \"adaptiveHidden\" !== width && allowResizing) {\n          break;\n        }\n      }\n\n      return lastColumnIndex;\n    },\n    isElementInCurrentGrid: function (controller, $element) {\n      if ($element && $element.length) {\n        var $grid = $element.closest(\".\" + controller.getWidgetContainerClass()).parent();\n        return $grid.is(controller.component.$element());\n      }\n\n      return false;\n    }\n  };\n}();","map":null,"metadata":{},"sourceType":"script"}