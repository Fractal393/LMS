{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { Browser, EventHandler, createElement, isBlazor } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined, isUndefined, addClass, removeClass } from '@syncfusion/ej2-base';\nimport { remove, closest } from '@syncfusion/ej2-base';\nimport { Query } from '@syncfusion/ej2-data';\nimport { setCssInGridPopUp, getPosition, isGroupAdaptive, parentsUntil, addRemoveActiveClasses, removeAddCboxClasses } from '../base/util';\nimport * as events from '../base/constant';\nimport { RenderType } from '../base/enum';\nimport { iterateExtend } from '../base/util';\n/**\n * The `Selection` module is used to handle cell and row selection.\n */\n\nvar Selection =\n/** @class */\nfunction () {\n  /**\n   * Constructor for the Grid selection module\n   * @hidden\n   */\n  function Selection(parent, selectionSettings, locator) {\n    //Internal letiables       \n\n    /**\n     * @hidden\n     */\n    this.selectedRowIndexes = [];\n    /**\n     * @hidden\n     */\n\n    this.selectedRowCellIndexes = [];\n    /**\n     * @hidden\n     */\n\n    this.selectedRecords = [];\n    /**\n     * @hidden\n     */\n\n    this.preventFocus = false;\n    this.checkBoxState = false;\n    this.isMultiShiftRequest = false;\n    this.isMultiCtrlRequest = false;\n    this.enableSelectMultiTouch = false;\n    this.clearRowCheck = false;\n    this.selectRowCheck = false;\n    this.selectedRowState = {};\n    this.totalRecordsCount = 0;\n    this.chkAllCollec = [];\n    this.isCheckedOnAdd = false;\n    this.persistSelectedData = [];\n    this.isCancelDeSelect = false;\n    this.isPreventCellSelect = false;\n    this.disableUI = false;\n    this.isPersisted = false;\n    this.cmdKeyPressed = false;\n    this.cellselected = false;\n    this.isMultiSelection = false;\n    this.isAddRowsToSelection = false;\n    this.initialRowSelection = false;\n    /**\n     * @hidden\n     */\n\n    this.autoFillRLselection = true;\n    this.parent = parent;\n    this.selectionSettings = selectionSettings;\n    this.factory = locator.getService('rendererFactory');\n    this.focus = locator.getService('focus');\n    this.addEventListener();\n    this.wireEvents();\n  }\n\n  Selection.prototype.initializeSelection = function () {\n    this.parent.log('selection_key_missing');\n    this.render();\n  };\n  /**\n   * The function used to trigger onActionBegin\n   * @return {void}\n   * @hidden\n   */\n\n\n  Selection.prototype.onActionBegin = function (args, type) {\n    this.parent.trigger(type, this.fDataUpdate(args));\n  };\n\n  Selection.prototype.fDataUpdate = function (args) {\n    if (!this.isMultiSelection && (!isNullOrUndefined(args.cellIndex) || !isNullOrUndefined(args.rowIndex))) {\n      var rowObj = this.getRowObj(isNullOrUndefined(args.rowIndex) ? isNullOrUndefined(args.cellIndex) ? this.currentIndex : args.cellIndex.rowIndex : args.rowIndex);\n      args.foreignKeyData = rowObj.foreignKeyData;\n    }\n\n    return args;\n  };\n  /**\n   * The function used to trigger onActionComplete\n   * @return {void}\n   * @hidden\n   */\n\n\n  Selection.prototype.onActionComplete = function (args, type) {\n    this.parent.trigger(type, this.fDataUpdate(args));\n    this.isMultiSelection = false;\n  };\n  /**\n   * For internal use only - Get the module name.\n   * @private\n   */\n\n\n  Selection.prototype.getModuleName = function () {\n    return 'selection';\n  };\n  /**\n   * To destroy the selection\n   * @return {void}\n   * @hidden\n   */\n\n\n  Selection.prototype.destroy = function () {\n    var gridElement = this.parent.element;\n\n    if (!gridElement || !gridElement.querySelector('.e-gridheader') && !gridElement.querySelector('.e-gridcontent')) {\n      return;\n    }\n\n    this.hidePopUp();\n    this.clearSelection();\n    this.removeEventListener();\n    this.unWireEvents();\n    EventHandler.remove(this.parent.getContent(), 'mousedown', this.mouseDownHandler);\n    EventHandler.remove(this.parent.getHeaderContent(), 'mousedown', this.mouseDownHandler);\n  };\n\n  Selection.prototype.isEditing = function () {\n    return (this.parent.editSettings.mode === 'Normal' || this.parent.editSettings.mode === 'Batch' && this.parent.editModule && this.parent.editModule.formObj && !this.parent.editModule.formObj.validate()) && this.parent.isEdit && !this.parent.isPersistSelection;\n  };\n\n  Selection.prototype.getSelectedMovableRow = function (index) {\n    var gObj = this.parent;\n\n    if (gObj.getFrozenColumns() && this.parent.getContent().querySelector('.e-movablecontent')) {\n      return gObj.getMovableRowByIndex(index);\n    }\n\n    return null;\n  };\n\n  Selection.prototype.getCurrentBatchRecordChanges = function () {\n    var gObj = this.parent;\n    var added = 'addedRecords';\n    var deleted = 'deletedRecords';\n\n    if (gObj.editSettings.mode === 'Batch' && gObj.editModule) {\n      var currentRecords = iterateExtend(this.parent.getCurrentViewRecords());\n      currentRecords = gObj.editSettings.newRowPosition === 'Bottom' ? currentRecords.concat(this.parent.editModule.getBatchChanges()[added]) : this.parent.editModule.getBatchChanges()[added].concat(currentRecords);\n      var deletedRecords = this.parent.editModule.getBatchChanges()[deleted];\n      var primaryKey = this.parent.getPrimaryKeyFieldNames()[0];\n\n      for (var i = 0; i < deletedRecords.length; i++) {\n        for (var j = 0; j < currentRecords.length; j++) {\n          if (deletedRecords[i][primaryKey] === currentRecords[j][primaryKey]) {\n            currentRecords.splice(j, 1);\n            break;\n          }\n        }\n      }\n\n      return currentRecords;\n    } else {\n      return gObj.getCurrentViewRecords();\n    }\n  };\n  /**\n   * Selects a row by the given index.\n   * @param  {number} index - Defines the row index.\n   * @param  {boolean} isToggle - If set to true, then it toggles the selection.\n   * @return {void}\n   */\n\n\n  Selection.prototype.selectRow = function (index, isToggle) {\n    if (this.selectedRowIndexes.length && this.selectionSettings.enableSimpleMultiRowSelection) {\n      this.addRowsToSelection([index]);\n      return;\n    }\n\n    var gObj = this.parent;\n    var selectedRow = gObj.getRowByIndex(index);\n    var selectedMovableRow = this.getSelectedMovableRow(index);\n    var selectData;\n    var isRemoved = false;\n\n    if (gObj.enableVirtualization && index > -1) {\n      this.parent.notify(events.selectVirtualRow, {\n        selectedIndex: index\n      });\n      var frozenData = gObj.getFrozenColumns() ? gObj.contentModule.getRowObjectByIndex(index) : null;\n\n      if (selectedRow && (gObj.getRowObjectFromUID(selectedRow.getAttribute('data-uid')) || frozenData)) {\n        selectData = frozenData ? frozenData : gObj.getRowObjectFromUID(selectedRow.getAttribute('data-uid')).data;\n      } else {\n        var prevSelectedData = this.parent.getSelectedRecords();\n\n        if (prevSelectedData.length > 0) {\n          this.clearRowSelection();\n        }\n\n        return;\n      }\n    } else {\n      selectData = this.getCurrentBatchRecordChanges()[index];\n    }\n\n    if (!this.isRowType() || !selectedRow || this.isEditing()) {\n      // if (this.isEditing()) {\n      //     gObj.selectedRowIndex = index;\n      // }\n      return;\n    }\n\n    var isRowSelected = selectedRow.hasAttribute('aria-selected');\n    this.activeTarget();\n    isToggle = !isToggle ? isToggle : !this.selectedRowIndexes.length ? false : this.selectedRowIndexes.length === 1 ? index === this.selectedRowIndexes[0] : false;\n    var args;\n    var can = 'cancel';\n\n    if (!isToggle) {\n      var isHybrid = 'isHybrid';\n\n      if (!isBlazor() || this.parent.isJsComponent || this.parent[isHybrid]) {\n        args = {\n          data: selectData,\n          rowIndex: index,\n          isCtrlPressed: this.isMultiCtrlRequest,\n          isShiftPressed: this.isMultiShiftRequest,\n          row: selectedRow,\n          previousRow: gObj.getRowByIndex(this.prevRowIndex),\n          previousRowIndex: this.prevRowIndex,\n          target: this.actualTarget,\n          cancel: false,\n          isInteracted: this.isInteracted,\n          isHeaderCheckboxClicked: this.isHeaderCheckboxClicked\n        };\n        args = this.addMovableArgs(args, selectedMovableRow);\n      } else {\n        args = {\n          data: selectData,\n          rowIndex: index,\n          isCtrlPressed: this.isMultiCtrlRequest,\n          isShiftPressed: this.isMultiShiftRequest,\n          previousRowIndex: this.prevRowIndex,\n          cancel: false,\n          isInteracted: this.isInteracted,\n          isHeaderCheckboxClicked: this.isHeaderCheckboxClicked\n        };\n      }\n\n      this.parent.trigger(events.rowSelecting, this.fDataUpdate(args), this.rowSelectingCallBack(args, isToggle, index, selectData, isRemoved, isRowSelected, can));\n    } else {\n      this.rowSelectingCallBack(args, isToggle, index, selectData, isRemoved, isRowSelected, can)(args);\n    }\n  };\n\n  Selection.prototype.rowSelectingCallBack = function (args, isToggle, index, selectData, isRemoved, isRowSelected, can) {\n    var _this = this;\n\n    return function (args) {\n      if (!isNullOrUndefined(args) && args[can] === true) {\n        _this.disableInteracted();\n\n        return;\n      }\n\n      _this.index = index;\n      _this.toggle = isToggle;\n      _this.data = selectData;\n      _this.removed = isRemoved;\n\n      if (isRowSelected && _this.selectionSettings.persistSelection && !(_this.selectionSettings.checkboxMode === 'ResetOnRowClick')) {\n        _this.clearSelectedRow(index);\n\n        isRemoved = true;\n        _this.removed = isRemoved;\n\n        _this.selectRowCallBack();\n      } else if (!isRowSelected && _this.selectionSettings.persistSelection && _this.selectionSettings.checkboxMode !== 'ResetOnRowClick') {\n        _this.selectRowCallBack();\n      }\n\n      if (_this.selectionSettings.checkboxMode === 'ResetOnRowClick') {\n        _this.clearSelection();\n      }\n\n      if (!_this.selectionSettings.persistSelection || _this.selectionSettings.checkboxMode === 'ResetOnRowClick') {\n        _this.selectRowCheck = true;\n\n        _this.clearRow();\n      }\n    };\n  };\n\n  Selection.prototype.selectRowCallBack = function () {\n    var gObj = this.parent;\n    var args;\n    var index = this.index;\n    var isToggle = this.toggle;\n    var selectData = this.data;\n    var isRemoved = this.removed;\n    var selectedRow = gObj.getRowByIndex(index);\n    var selectedMovableRow = this.getSelectedMovableRow(index);\n\n    if (!isToggle && !isRemoved) {\n      if (this.selectedRowIndexes.indexOf(index) <= -1) {\n        this.updateRowSelection(selectedRow, index);\n\n        if (gObj.getFrozenColumns()) {\n          this.updateRowSelection(selectedMovableRow, index);\n        }\n      }\n\n      this.selectRowIndex(index);\n    }\n\n    if (!isToggle) {\n      var isHybrid = 'isHybrid';\n\n      if (!isBlazor() || this.parent.isJsComponent || this.parent[isHybrid]) {\n        args = {\n          data: selectData,\n          rowIndex: index,\n          row: selectedRow,\n          previousRow: gObj.getRowByIndex(this.prevRowIndex),\n          previousRowIndex: this.prevRowIndex,\n          target: this.actualTarget,\n          isInteracted: this.isInteracted,\n          isHeaderCheckBoxClicked: this.isHeaderCheckboxClicked\n        };\n        args = this.addMovableArgs(args, selectedMovableRow);\n      } else {\n        args = {\n          data: selectData,\n          rowIndex: index,\n          row: selectedRow,\n          previousRow: gObj.getRowByIndex(this.prevRowIndex),\n          previousRowIndex: this.prevRowIndex,\n          isInteracted: this.isInteracted,\n          isHeaderCheckBoxClicked: this.isHeaderCheckboxClicked\n        };\n      }\n\n      this.onActionComplete(args, events.rowSelected);\n    }\n\n    if (isBlazor() && this.parent.isServerRendered && this.parent.enableVirtualization) {\n      var interopAdaptor = 'interopAdaptor';\n      var invokeMethodAsync = 'invokeMethodAsync';\n      this.parent[interopAdaptor][invokeMethodAsync]('MaintainSelection', true, 'normal', [index]);\n    }\n\n    this.isInteracted = false;\n    this.updateRowProps(index);\n  };\n\n  Selection.prototype.addMovableArgs = function (targetObj, mRow) {\n    if (this.parent.getFrozenColumns()) {\n      var mObj = {\n        mRow: mRow,\n        previousMovRow: this.parent.getMovableRows()[this.prevRowIndex]\n      };\n      targetObj = __assign({}, targetObj, mObj);\n    }\n\n    return targetObj;\n  };\n  /**\n   * Selects a range of rows from start and end row indexes.\n   * @param  {number} startIndex - Specifies the start row index.\n   * @param  {number} endIndex - Specifies the end row index.\n   * @return {void}\n   */\n\n\n  Selection.prototype.selectRowsByRange = function (startIndex, endIndex) {\n    this.selectRows(this.getCollectionFromIndexes(startIndex, endIndex));\n    this.selectRowIndex(endIndex);\n  };\n  /**\n   * Selects a collection of rows by index.\n   * @param  {number[]} rowIndexes - Specifies an array of row indexes.\n   * @return {void}\n   */\n\n\n  Selection.prototype.selectRows = function (rowIndexes) {\n    var _this = this;\n\n    var gObj = this.parent;\n    var rowIndex = !this.isSingleSel() ? rowIndexes[0] : rowIndexes[rowIndexes.length - 1];\n    this.isMultiSelection = true;\n    var selectedRows = [];\n    var foreignKeyData = [];\n    var selectedMovableRow = this.getSelectedMovableRow(rowIndex);\n    var frzCols = gObj.getFrozenColumns();\n    var can = 'cancel';\n    var selectedData = [];\n\n    if (!this.isRowType() || this.isEditing()) {\n      return;\n    }\n\n    for (var i = 0, len = rowIndexes.length; i < len; i++) {\n      var currentRow = this.parent.getDataRows()[rowIndexes[i]];\n      var rowObj = this.getRowObj(currentRow);\n\n      if (rowObj) {\n        selectedData.push(rowObj.data);\n        selectedRows.push(currentRow);\n        foreignKeyData.push(rowObj.foreignKeyData);\n      }\n    }\n\n    var isHybrid = 'isHybrid';\n    this.activeTarget();\n    var args;\n\n    if (!isBlazor() || this.parent.isJsComponent || this.parent[isHybrid]) {\n      args = {\n        cancel: false,\n        rowIndexes: rowIndexes,\n        row: selectedRows,\n        rowIndex: rowIndex,\n        target: this.actualTarget,\n        prevRow: gObj.getRows()[this.prevRowIndex],\n        previousRowIndex: this.prevRowIndex,\n        isInteracted: this.isInteracted,\n        isCtrlPressed: this.isMultiCtrlRequest,\n        isShiftPressed: this.isMultiShiftRequest,\n        data: selectedData,\n        isHeaderCheckboxClicked: this.isHeaderCheckboxClicked,\n        foreignKeyData: foreignKeyData\n      };\n      args = this.addMovableArgs(args, selectedMovableRow);\n    } else {\n      args = {\n        cancel: false,\n        rowIndexes: rowIndexes,\n        rowIndex: rowIndex,\n        previousRowIndex: this.prevRowIndex,\n        isCtrlPressed: this.isMultiCtrlRequest,\n        isShiftPressed: this.isMultiShiftRequest,\n        data: selectedData,\n        isHeaderCheckboxClicked: this.isHeaderCheckboxClicked,\n        foreignKeyData: foreignKeyData\n      };\n    }\n\n    this.parent.trigger(events.rowSelecting, this.fDataUpdate(args), function (args) {\n      if (!isNullOrUndefined(args) && args[can] === true) {\n        _this.disableInteracted();\n\n        return;\n      }\n\n      _this.clearRow();\n\n      _this.selectRowIndex(rowIndexes.slice(-1)[0]);\n\n      if (!_this.isSingleSel()) {\n        for (var _i = 0, rowIndexes_1 = rowIndexes; _i < rowIndexes_1.length; _i++) {\n          var rowIdx = rowIndexes_1[_i];\n\n          _this.updateRowSelection(gObj.getRowByIndex(rowIdx), rowIdx);\n\n          if (frzCols) {\n            _this.updateRowSelection(gObj.getMovableRowByIndex(rowIdx), rowIdx);\n          }\n\n          _this.updateRowProps(rowIndex);\n        }\n      } else {\n        _this.updateRowSelection(gObj.getRowByIndex(rowIndex), rowIndex);\n\n        if (frzCols) {\n          _this.updateRowSelection(gObj.getMovableRowByIndex(rowIndex), rowIndex);\n        }\n\n        _this.updateRowProps(rowIndex);\n      }\n\n      var isHybrid = 'isHybrid';\n\n      if (!isBlazor() || _this.parent.isJsComponent || _this.parent[isHybrid]) {\n        args = {\n          rowIndexes: rowIndexes,\n          row: selectedRows,\n          rowIndex: rowIndex,\n          target: _this.actualTarget,\n          prevRow: gObj.getRows()[_this.prevRowIndex],\n          previousRowIndex: _this.prevRowIndex,\n          data: isBlazor() ? selectedData : _this.getSelectedRecords(),\n          isInteracted: _this.isInteracted,\n          isHeaderCheckboxClicked: _this.isHeaderCheckboxClicked,\n          foreignKeyData: foreignKeyData\n        };\n        args = _this.addMovableArgs(args, selectedMovableRow);\n      } else {\n        args = {\n          rowIndexes: rowIndexes,\n          rowIndex: rowIndex,\n          previousRowIndex: _this.prevRowIndex,\n          row: selectedRows,\n          prevRow: gObj.getRows()[_this.prevRowIndex],\n          data: isBlazor() ? selectedData : _this.getSelectedRecords(),\n          isInteracted: _this.isInteracted,\n          isHeaderCheckboxClicked: _this.isHeaderCheckboxClicked,\n          foreignKeyData: foreignKeyData\n        };\n      }\n\n      if (_this.isRowSelected) {\n        _this.onActionComplete(args, events.rowSelected);\n      }\n    });\n  };\n  /**\n   * Select rows with existing row selection by passing row indexes.\n   * @param  {number} startIndex - Specifies the row indexes.\n   * @return {void}\n   * @hidden\n   */\n\n\n  Selection.prototype.addRowsToSelection = function (rowIndexes) {\n    var _this = this;\n\n    var gObj = this.parent;\n    var can = 'cancel';\n    var target = this.target;\n    this.isMultiSelection = true;\n    var indexes = gObj.getSelectedRowIndexes().concat(rowIndexes);\n    var selectedRow = !this.isSingleSel() ? gObj.getRowByIndex(rowIndexes[0]) : gObj.getRowByIndex(rowIndexes[rowIndexes.length - 1]);\n    var selectedMovableRow = !this.isSingleSel() ? this.getSelectedMovableRow(rowIndexes[0]) : this.getSelectedMovableRow(rowIndexes[rowIndexes.length - 1]);\n    var frzCols = gObj.getFrozenColumns();\n\n    if (!this.isRowType() || this.isEditing()) {\n      return;\n    }\n\n    var args;\n    var checkboxColumn = this.parent.getColumns().filter(function (col) {\n      return col.type === 'checkbox';\n    });\n\n    var _loop_1 = function (rowIndex) {\n      var rowObj = this_1.getRowObj(rowIndex);\n      var isUnSelected = this_1.selectedRowIndexes.indexOf(rowIndex) > -1;\n      this_1.selectRowIndex(rowIndex);\n\n      if (isUnSelected && ((checkboxColumn.length ? true : this_1.selectionSettings.enableToggle) || this_1.isMultiCtrlRequest)) {\n        this_1.isAddRowsToSelection = true;\n        this_1.rowDeselect(events.rowDeselecting, [rowIndex], [rowObj.data], [selectedRow], [rowObj.foreignKeyData], target);\n\n        if (this_1.isCancelDeSelect) {\n          return {\n            value: void 0\n          };\n        }\n\n        this_1.selectedRowIndexes.splice(this_1.selectedRowIndexes.indexOf(rowIndex), 1);\n        this_1.selectedRecords.splice(this_1.selectedRecords.indexOf(selectedRow), 1);\n        selectedRow.removeAttribute('aria-selected');\n        this_1.addRemoveClassesForRow(selectedRow, false, null, 'e-selectionbackground', 'e-active');\n\n        if (selectedMovableRow) {\n          this_1.selectedRecords.splice(this_1.selectedRecords.indexOf(selectedMovableRow), 1);\n          selectedMovableRow.removeAttribute('aria-selected');\n          this_1.addRemoveClassesForRow(selectedMovableRow, false, null, 'e-selectionbackground', 'e-active');\n        }\n\n        this_1.rowDeselect(events.rowDeselected, [rowIndex], [rowObj.data], [selectedRow], [rowObj.foreignKeyData], target, [selectedMovableRow]);\n        this_1.isInteracted = false;\n        this_1.isMultiSelection = false;\n        this_1.isAddRowsToSelection = false;\n      } else {\n        var isHybrid = 'isHybrid';\n        this_1.activeTarget();\n\n        if (!isBlazor() || this_1.parent.isJsComponent || this_1.parent[isHybrid]) {\n          args = {\n            cancel: false,\n            data: rowObj.data,\n            rowIndex: rowIndex,\n            row: selectedRow,\n            target: this_1.actualTarget,\n            prevRow: gObj.getRows()[this_1.prevRowIndex],\n            previousRowIndex: this_1.prevRowIndex,\n            isCtrlPressed: this_1.isMultiCtrlRequest,\n            isShiftPressed: this_1.isMultiShiftRequest,\n            foreignKeyData: rowObj.foreignKeyData,\n            isInteracted: this_1.isInteracted,\n            isHeaderCheckboxClicked: this_1.isHeaderCheckboxClicked,\n            rowIndexes: indexes\n          };\n          args = this_1.addMovableArgs(args, selectedMovableRow);\n        } else {\n          args = {\n            cancel: false,\n            data: rowObj.data,\n            rowIndex: rowIndex,\n            previousRowIndex: this_1.prevRowIndex,\n            isCtrlPressed: this_1.isMultiCtrlRequest,\n            isShiftPressed: this_1.isMultiShiftRequest,\n            foreignKeyData: rowObj.foreignKeyData,\n            isInteracted: this_1.isInteracted,\n            isHeaderCheckboxClicked: this_1.isHeaderCheckboxClicked,\n            rowIndexes: indexes\n          };\n        }\n\n        this_1.parent.trigger(events.rowSelecting, this_1.fDataUpdate(args), function (args) {\n          if (!isNullOrUndefined(args) && args[can] === true) {\n            _this.disableInteracted();\n\n            return;\n          }\n\n          if (_this.isSingleSel()) {\n            _this.clearRow();\n          }\n\n          _this.updateRowSelection(selectedRow, rowIndex);\n\n          if (frzCols) {\n            _this.updateRowSelection(selectedMovableRow, rowIndex);\n          }\n        });\n      }\n\n      if (!isUnSelected) {\n        var isHybrid = 'isHybrid';\n\n        if (!isBlazor() || this_1.parent.isJsComponent || this_1.parent[isHybrid]) {\n          args = {\n            data: rowObj.data,\n            rowIndex: rowIndex,\n            row: selectedRow,\n            target: this_1.actualTarget,\n            prevRow: gObj.getRows()[this_1.prevRowIndex],\n            previousRowIndex: this_1.prevRowIndex,\n            foreignKeyData: rowObj.foreignKeyData,\n            isInteracted: this_1.isInteracted,\n            isHeaderCheckboxClicked: this_1.isHeaderCheckboxClicked,\n            rowIndexes: indexes\n          };\n          args = this_1.addMovableArgs(args, selectedMovableRow);\n        } else {\n          args = {\n            data: rowObj.data,\n            rowIndex: rowIndex,\n            previousRowIndex: this_1.prevRowIndex,\n            row: selectedRow,\n            prevRow: gObj.getRows()[this_1.prevRowIndex],\n            foreignKeyData: rowObj.foreignKeyData,\n            isInteracted: this_1.isInteracted,\n            isHeaderCheckboxClicked: this_1.isHeaderCheckboxClicked,\n            rowIndexes: indexes\n          };\n        }\n\n        this_1.onActionComplete(args, events.rowSelected);\n      }\n\n      this_1.isInteracted = false;\n      this_1.updateRowProps(rowIndex);\n\n      if (this_1.isSingleSel()) {\n        return \"break\";\n      }\n    };\n\n    var this_1 = this;\n\n    for (var _i = 0, rowIndexes_2 = rowIndexes; _i < rowIndexes_2.length; _i++) {\n      var rowIndex = rowIndexes_2[_i];\n\n      var state_1 = _loop_1(rowIndex);\n\n      if (typeof state_1 === \"object\") return state_1.value;\n      if (state_1 === \"break\") break;\n    }\n  };\n\n  Selection.prototype.getCollectionFromIndexes = function (startIndex, endIndex) {\n    var indexes = [];\n\n    var _a = startIndex <= endIndex ? {\n      i: startIndex,\n      max: endIndex\n    } : {\n      i: endIndex,\n      max: startIndex\n    },\n        i = _a.i,\n        max = _a.max;\n\n    for (; i <= max; i++) {\n      indexes.push(i);\n    }\n\n    if (startIndex > endIndex) {\n      indexes.reverse();\n    }\n\n    return indexes;\n  };\n\n  Selection.prototype.clearRow = function () {\n    this.clearRowCheck = true;\n    this.clearRowSelection();\n  };\n\n  Selection.prototype.clearRowCallBack = function () {\n    if (this.isCancelDeSelect && this.parent.checkAllRows !== 'Check') {\n      return;\n    }\n\n    this.selectedRowIndexes = [];\n    this.selectedRecords = [];\n    this.selectRowIndex(-1);\n\n    if (this.isSingleSel() && this.parent.isPersistSelection) {\n      this.selectedRowState = {};\n    }\n  };\n\n  Selection.prototype.clearSelectedRow = function (index) {\n    if (this.target) {\n      var selectedEle = this.target.parentElement;\n\n      if (!this.disableUI) {\n        selectedEle.removeAttribute('aria-selected');\n        this.addRemoveClassesForRow(selectedEle, false, true, 'e-selectionbackground', 'e-active');\n      }\n\n      this.updatePersistCollection(selectedEle, false);\n      this.updateCheckBoxes(selectedEle);\n      this.selectedRowIndexes.splice(this.selectedRowIndexes.indexOf(index), 1);\n      this.selectedRecords.splice(this.selectedRecords.indexOf(this.parent.getRowByIndex(index)), 1);\n    }\n  };\n\n  Selection.prototype.updateRowProps = function (startIndex) {\n    this.prevRowIndex = startIndex;\n    this.isRowSelected = this.selectedRowIndexes.length && true;\n  };\n\n  Selection.prototype.updatePersistCollection = function (selectedRow, chkState) {\n    var _this = this;\n\n    if (this.parent.isPersistSelection && !isNullOrUndefined(selectedRow)) {\n      var rowObj = this.getRowObj(selectedRow);\n      var pKey_1 = rowObj.data ? rowObj.data[this.primaryKey] : null;\n\n      if (pKey_1 === null) {\n        return;\n      }\n\n      rowObj.isSelected = chkState;\n\n      if (chkState) {\n        this.selectedRowState[pKey_1] = chkState;\n\n        if (!this.persistSelectedData.some(function (data) {\n          return data[_this.primaryKey] === pKey_1;\n        })) {\n          this.persistSelectedData.push(rowObj.data);\n        }\n      } else {\n        this.updatePersistDelete(pKey_1);\n      }\n    }\n  };\n\n  Selection.prototype.updatePersistDelete = function (pKey) {\n    var _this = this;\n\n    delete this.selectedRowState[pKey];\n    var index;\n    var isPresent = this.persistSelectedData.some(function (data, i) {\n      index = i;\n      return data[_this.primaryKey] === pKey;\n    });\n\n    if (isPresent) {\n      this.persistSelectedData.splice(index, 1);\n    }\n  };\n\n  Selection.prototype.updateCheckBoxes = function (row, chkState, rowIndex) {\n    if (!isNullOrUndefined(row)) {\n      var chkBox = row.querySelector('.e-checkselect');\n\n      if (!isNullOrUndefined(chkBox)) {\n        removeAddCboxClasses(chkBox.nextElementSibling, chkState);\n\n        if (isNullOrUndefined(this.checkedTarget) || !isNullOrUndefined(this.checkedTarget) && !this.checkedTarget.classList.contains('e-checkselectall')) {\n          this.setCheckAllState(rowIndex);\n        }\n      }\n    }\n  };\n\n  Selection.prototype.updateRowSelection = function (selectedRow, startIndex) {\n    if (!selectedRow) {\n      return;\n    }\n\n    this.selectedRowIndexes.push(startIndex);\n    var len = this.selectedRowIndexes.length;\n\n    if (this.parent.getFrozenColumns() && len > 1) {\n      if (this.selectedRowIndexes[len - 2] === this.selectedRowIndexes[len - 1]) {\n        this.selectedRowIndexes.pop();\n      }\n    }\n\n    this.selectedRecords.push(selectedRow);\n    selectedRow.setAttribute('aria-selected', 'true');\n    this.updatePersistCollection(selectedRow, true);\n    this.updateCheckBoxes(selectedRow, true);\n    this.addRemoveClassesForRow(selectedRow, true, null, 'e-selectionbackground', 'e-active');\n\n    if (!this.preventFocus) {\n      var target = this.focus.getPrevIndexes().cellIndex ? selectedRow.cells[this.focus.getPrevIndexes().cellIndex] : selectedRow.querySelector('.e-selectionbackground:not(.e-hide):not(.e-detailrowcollapse):not(.e-detailrowexpand)');\n\n      if (this.parent.contextMenuModule && this.mouseButton === 2) {\n        target = this.parent.contextMenuModule.cell;\n      }\n\n      if (!target) {\n        return;\n      }\n\n      this.focus.onClick({\n        target: target\n      }, true);\n    }\n  };\n  /**\n   * Deselects the currently selected rows and cells.\n   * @return {void}\n   */\n\n\n  Selection.prototype.clearSelection = function () {\n    if (!this.parent.isPersistSelection || this.parent.isPersistSelection && !this.parent.isEdit || !isNullOrUndefined(this.checkedTarget) && this.checkedTarget.classList.contains('e-checkselectall')) {\n      var span = this.parent.element.querySelector('.e-gridpopup').querySelector('span');\n\n      if (span.classList.contains('e-rowselect')) {\n        span.classList.remove('e-spanclicked');\n      }\n\n      if (this.parent.isPersistSelection) {\n        this.persistSelectedData = [];\n        this.selectedRowState = {};\n      }\n\n      this.clearRowSelection();\n      this.clearCellSelection();\n      this.prevRowIndex = undefined;\n      this.enableSelectMultiTouch = false;\n      this.isInteracted = false;\n    }\n  };\n  /**\n   * Deselects the currently selected rows.\n   * @return {void}\n   */\n\n\n  Selection.prototype.clearRowSelection = function () {\n    var _this = this;\n\n    if (this.isRowSelected) {\n      var gObj = this.parent;\n      var rows_1 = this.parent.getDataRows();\n      var data_1 = [];\n      var row_1 = [];\n      var mRow_1 = [];\n      var rowIndex_1 = [];\n      var frzCols = gObj.getFrozenColumns();\n      var foreignKeyData_1 = [];\n      var target_1 = this.target;\n      var currentViewData = this.parent.getCurrentViewRecords();\n\n      for (var i = 0, len = this.selectedRowIndexes.length; i < len; i++) {\n        var currentRow = this.parent.editSettings.mode === 'Batch' ? this.parent.getRows()[this.selectedRowIndexes[i]] : this.parent.getDataRows()[this.selectedRowIndexes[i]];\n        var rowObj = this.getRowObj(currentRow);\n\n        if (rowObj) {\n          data_1.push(rowObj.data);\n          row_1.push(currentRow);\n          rowIndex_1.push(this.selectedRowIndexes[i]);\n          foreignKeyData_1.push(rowObj.foreignKeyData);\n        }\n\n        if (frzCols) {\n          mRow_1.push(gObj.getMovableRows()[this.selectedRowIndexes[i]]);\n        }\n      }\n\n      if (this.selectionSettings.persistSelection && this.selectionSettings.checkboxMode !== 'ResetOnRowClick') {\n        this.isInteracted = this.checkSelectAllClicked ? true : false;\n      }\n\n      this.rowDeselect(events.rowDeselecting, rowIndex_1, data_1, row_1, foreignKeyData_1, target_1, mRow_1, function () {\n        if (_this.isCancelDeSelect && (_this.isInteracted || _this.checkSelectAllClicked)) {\n          if (_this.parent.isPersistSelection) {\n            if (_this.getCheckAllStatus(_this.parent.element.querySelector('.e-checkselectall')) === 'Intermediate') {\n              for (var i = 0; i < _this.selectedRecords.length; i++) {\n                _this.updatePersistCollection(_this.selectedRecords[i], true);\n              }\n            } else {\n              _this.parent.checkAllRows = 'Check';\n\n              _this.updatePersistSelectedData(true);\n            }\n          }\n\n          if (_this.clearRowCheck) {\n            _this.clearRowCallBack();\n\n            _this.clearRowCheck = false;\n\n            if (_this.selectRowCheck) {\n              _this.selectRowCallBack();\n\n              _this.selectRowCheck = false;\n            }\n          }\n\n          return;\n        }\n\n        var element = [].slice.call(rows_1.filter(function (record) {\n          return record.hasAttribute('aria-selected');\n        }));\n\n        for (var j = 0; j < element.length; j++) {\n          if (!_this.disableUI || isBlazor()) {\n            element[j].removeAttribute('aria-selected');\n\n            _this.addRemoveClassesForRow(element[j], false, true, 'e-selectionbackground', 'e-active');\n          } // tslint:disable-next-line:align\n\n\n          _this.updatePersistCollection(element[j], false);\n\n          _this.updateCheckBoxes(element[j]);\n        }\n\n        if (isBlazor() && _this.parent.isServerRendered && _this.parent.enableVirtualization) {\n          _this.getRenderer().setSelection(null, false, true);\n        }\n\n        for (var i = 0, len = _this.selectedRowIndexes.length; i < len; i++) {\n          var movableRow = _this.getSelectedMovableRow(_this.selectedRowIndexes[i]);\n\n          if (movableRow) {\n            if (!_this.disableUI || isBlazor()) {\n              movableRow.removeAttribute('aria-selected');\n\n              _this.addRemoveClassesForRow(movableRow, false, true, 'e-selectionbackground', 'e-active');\n            }\n\n            _this.updatePersistCollection(movableRow, false);\n          }\n        }\n\n        _this.selectedRowIndexes = [];\n        _this.selectedRecords = [];\n        _this.isRowSelected = false;\n\n        _this.selectRowIndex(-1);\n\n        _this.rowDeselect(events.rowDeselected, rowIndex_1, data_1, row_1, foreignKeyData_1, target_1, mRow_1);\n\n        if (_this.clearRowCheck) {\n          _this.clearRowCallBack();\n\n          _this.clearRowCheck = false;\n\n          if (_this.selectRowCheck) {\n            _this.selectRowCallBack();\n\n            _this.selectRowCheck = false;\n          }\n        }\n      });\n    } else {\n      if (this.clearRowCheck) {\n        this.clearRowCallBack();\n        this.clearRowCheck = false;\n\n        if (this.selectRowCheck) {\n          this.selectRowCallBack();\n          this.selectRowCheck = false;\n        }\n      }\n    }\n  };\n\n  Selection.prototype.rowDeselect = function (type, rowIndex, data, row, foreignKeyData, target, mRow, rowDeselectCallBack) {\n    var _this = this;\n\n    if (this.selectionSettings.persistSelection && this.isInteracted || !this.selectionSettings.persistSelection) {\n      var cancl_1 = 'cancel';\n      var rowDeselectObj = {\n        rowIndex: rowIndex[0],\n        data: this.selectionSettings.persistSelection && this.parent.checkAllRows === 'Uncheck' && this.selectionSettings.checkboxMode !== 'ResetOnRowClick' ? this.persistSelectedData : data,\n        foreignKeyData: foreignKeyData,\n        cancel: false,\n        isInteracted: this.isInteracted,\n        isHeaderCheckboxClicked: this.isHeaderCheckboxClicked\n      };\n\n      if (type === 'rowDeselected') {\n        delete rowDeselectObj.cancel;\n      }\n\n      var isHybrid = 'isHybrid';\n\n      if (!isBlazor() || this.parent.isJsComponent || this.parent[isHybrid]) {\n        var rowInString = 'row';\n        var target_2 = 'target';\n        var rowidx = 'rowIndex';\n        var rowidxex = 'rowIndexes';\n        var data_2 = 'data';\n        var foreignKey = 'foreignKeyData';\n        rowDeselectObj[rowInString] = row;\n        rowDeselectObj[target_2] = this.actualTarget;\n        var isHeaderCheckBxClick = this.actualTarget && !isNullOrUndefined(closest(this.actualTarget, 'thead'));\n\n        if (isHeaderCheckBxClick || rowIndex.length > 1) {\n          rowDeselectObj[rowidx] = rowIndex[0];\n          rowDeselectObj[rowidxex] = rowIndex;\n        } else if (rowIndex.length === 1) {\n          rowDeselectObj[data_2] = rowDeselectObj[data_2][0];\n          rowDeselectObj[rowInString] = rowDeselectObj[rowInString][0];\n          rowDeselectObj[foreignKey] = rowDeselectObj[foreignKey][0];\n\n          if (this.isAddRowsToSelection) {\n            rowDeselectObj[rowidxex] = rowIndex;\n          }\n        }\n      } else {\n        var rowIndex_2 = 'rowIndex';\n        var data_3 = 'data';\n        rowDeselectObj[rowIndex_2] = rowDeselectObj[rowIndex_2][rowDeselectObj[rowIndex_2].length - 1];\n        rowDeselectObj[data_3] = rowDeselectObj[data_3][rowDeselectObj[data_3].length - 1];\n      }\n\n      this.parent.trigger(type, (!isBlazor() || this.parent.isJsComponent) && this.parent.getFrozenColumns() !== 0 ? __assign({}, rowDeselectObj, {\n        mRow: mRow\n      }) : rowDeselectObj, function (args) {\n        _this.isCancelDeSelect = args[cancl_1];\n\n        if (!_this.isCancelDeSelect || !_this.isInteracted && !_this.checkSelectAllClicked) {\n          _this.updatePersistCollection(row[0], false);\n\n          _this.updateCheckBoxes(row[0], undefined, rowIndex[0]);\n        }\n\n        if (rowDeselectCallBack !== undefined) {\n          rowDeselectCallBack();\n        }\n      });\n    } else if (this.selectionSettings.persistSelection && !this.isInteracted) {\n      if (rowDeselectCallBack !== undefined) {\n        rowDeselectCallBack();\n      }\n    }\n  };\n\n  Selection.prototype.getRowObj = function (row) {\n    if (row === void 0) {\n      row = this.currentIndex;\n    }\n\n    if (isNullOrUndefined(row)) {\n      return {};\n    }\n\n    if (typeof row === 'number') {\n      row = this.parent.getRowByIndex(row);\n    }\n\n    if (row) {\n      return this.parent.getRowObjectFromUID(row.getAttribute('data-uid')) || {};\n    }\n\n    return {};\n  };\n\n  Selection.prototype.getSelectedMovableCell = function (cellIndex) {\n    var gObj = this.parent;\n    var frzCols = gObj.getFrozenColumns();\n\n    if (frzCols) {\n      if (cellIndex.cellIndex >= frzCols) {\n        return gObj.getMovableCellFromIndex(cellIndex.rowIndex, this.getColIndex(cellIndex.rowIndex, cellIndex.cellIndex));\n      }\n\n      return null;\n    }\n\n    return null;\n  };\n  /**\n   * Selects a cell by the given index.\n   * @param  {IIndex} cellIndex - Defines the row and column indexes.\n   * @param  {boolean} isToggle - If set to true, then it toggles the selection.\n   * @return {void}\n   */\n\n\n  Selection.prototype.selectCell = function (cellIndex, isToggle) {\n    if (!this.isCellType()) {\n      return;\n    }\n\n    var gObj = this.parent;\n    var selectedCell = this.getSelectedMovableCell(cellIndex);\n    var args;\n\n    if (!selectedCell) {\n      selectedCell = gObj.getCellFromIndex(cellIndex.rowIndex, this.getColIndex(cellIndex.rowIndex, cellIndex.cellIndex));\n    }\n\n    var selectedTable;\n    var cIdx;\n    this.currentIndex = cellIndex.rowIndex;\n    var selectedData = this.getCurrentBatchRecordChanges()[this.currentIndex];\n\n    if (!this.isCellType() || !selectedCell || this.isEditing()) {\n      return;\n    }\n\n    var isCellSelected = selectedCell.classList.contains('e-cellselectionbackground');\n    isToggle = !isToggle ? isToggle : !isUndefined(this.prevCIdxs) && cellIndex.rowIndex === this.prevCIdxs.rowIndex && cellIndex.cellIndex === this.prevCIdxs.cellIndex && isCellSelected;\n\n    if (!isToggle) {\n      args = {\n        data: selectedData,\n        cellIndex: cellIndex,\n        isCtrlPressed: this.isMultiCtrlRequest,\n        isShiftPressed: this.isMultiShiftRequest,\n        previousRowCell: this.prevECIdxs ? this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : undefined,\n        cancel: false\n      };\n\n      if (!isBlazor() || this.parent.isJsComponent) {\n        var currentCell = 'currentCell';\n        args[currentCell] = selectedCell;\n        var previousRowCellIndex = 'previousRowCellIndex';\n        args[previousRowCellIndex] = this.prevECIdxs;\n      }\n\n      this.parent.trigger(events.cellSelecting, this.fDataUpdate(args), this.successCallBack(args, isToggle, cellIndex, selectedCell, selectedData));\n      this.cellselected = true;\n    } else {\n      this.successCallBack(args, isToggle, cellIndex, selectedCell, selectedData)(args);\n    }\n  };\n\n  Selection.prototype.successCallBack = function (cellSelectingArgs, isToggle, cellIndex, selectedCell, selectedData) {\n    var _this = this;\n\n    return function (cellSelectingArgs) {\n      var cncl = 'cancel';\n      var currentCell = 'currentCell';\n\n      if (!isNullOrUndefined(cellSelectingArgs) && cellSelectingArgs[cncl] === true) {\n        return;\n      }\n\n      if (!isToggle) {\n        cellSelectingArgs[currentCell] = cellSelectingArgs[currentCell] ? cellSelectingArgs[currentCell] : selectedCell;\n      }\n\n      _this.clearCell();\n\n      if (!isToggle) {\n        _this.updateCellSelection(selectedCell, cellIndex.rowIndex, cellIndex.cellIndex);\n      }\n\n      if (!isToggle) {\n        var args = void 0;\n        var isHybrid = 'isHybrid';\n\n        if (!isBlazor() || _this.parent.isJsComponent || _this.parent[isHybrid]) {\n          args = {\n            data: selectedData,\n            cellIndex: cellIndex,\n            currentCell: selectedCell,\n            selectedRowCellIndex: _this.selectedRowCellIndexes,\n            previousRowCell: _this.prevECIdxs ? _this.getCellIndex(_this.prevECIdxs.rowIndex, _this.prevECIdxs.cellIndex) : undefined\n          };\n          var previousRowCellIndex = 'previousRowCellIndex';\n          args[previousRowCellIndex] = _this.prevECIdxs;\n        } else {\n          args = {\n            data: selectedData,\n            cellIndex: cellIndex,\n            selectedRowCellIndex: _this.selectedRowCellIndexes\n          };\n        }\n\n        _this.updateCellProps(cellIndex, cellIndex);\n\n        _this.onActionComplete(args, events.cellSelected);\n      }\n    };\n  };\n\n  Selection.prototype.getCellIndex = function (rIdx, cIdx) {\n    return this.parent.getFrozenColumns() ? cIdx >= this.parent.getFrozenColumns() ? this.parent.getMovableCellFromIndex(rIdx, cIdx) : this.parent.getCellFromIndex(rIdx, cIdx) : this.parent.getCellFromIndex(rIdx, cIdx);\n  };\n  /**\n   * Selects a range of cells from start and end indexes.\n   * @param  {IIndex} startIndex - Specifies the row and column's start index.\n   * @param  {IIndex} endIndex - Specifies the row and column's end index.\n   * @return {void}\n   */\n\n\n  Selection.prototype.selectCellsByRange = function (startIndex, endIndex) {\n    var _this = this;\n\n    if (!this.isCellType()) {\n      return;\n    }\n\n    var gObj = this.parent;\n    var selectedCell = this.getSelectedMovableCell(startIndex);\n    var frzCols = gObj.getFrozenColumns();\n\n    if (!selectedCell) {\n      selectedCell = gObj.getCellFromIndex(startIndex.rowIndex, startIndex.cellIndex);\n    }\n\n    var min;\n    var max;\n    var stIndex = startIndex;\n    var edIndex = endIndex = endIndex ? endIndex : startIndex;\n    var cellIndexes;\n    this.currentIndex = startIndex.rowIndex;\n    var cncl = 'cancel';\n    var selectedData = this.getCurrentBatchRecordChanges()[this.currentIndex];\n\n    if (this.isSingleSel() || !this.isCellType() || this.isEditing()) {\n      return;\n    }\n\n    var args = {\n      data: selectedData,\n      cellIndex: startIndex,\n      currentCell: selectedCell,\n      isCtrlPressed: this.isMultiCtrlRequest,\n      isShiftPressed: this.isMultiShiftRequest,\n      previousRowCell: this.prevECIdxs ? this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : undefined\n    };\n\n    if (!isBlazor()) {\n      var previousRowCellIndex = 'previousRowCellIndex';\n      args[previousRowCellIndex] = this.prevECIdxs;\n    }\n\n    this.parent.trigger(events.cellSelecting, this.fDataUpdate(args), function (cellSelectingArgs) {\n      if (!isNullOrUndefined(cellSelectingArgs) && cellSelectingArgs[cncl] === true) {\n        return;\n      }\n\n      _this.clearCell();\n\n      if (startIndex.rowIndex > endIndex.rowIndex) {\n        var temp = startIndex;\n        startIndex = endIndex;\n        endIndex = temp;\n      }\n\n      for (var i = startIndex.rowIndex; i <= endIndex.rowIndex; i++) {\n        if (_this.selectionSettings.cellSelectionMode.indexOf('Box') < 0) {\n          min = i === startIndex.rowIndex ? startIndex.cellIndex : 0;\n          max = i === endIndex.rowIndex ? endIndex.cellIndex : _this.getLastColIndex(i);\n        } else {\n          min = startIndex.cellIndex;\n          max = endIndex.cellIndex;\n        }\n\n        cellIndexes = [];\n\n        for (var j = min < max ? min : max, len = min > max ? min : max; j <= len; j++) {\n          if (frzCols) {\n            if (j < frzCols) {\n              selectedCell = gObj.getCellFromIndex(i, j);\n            } else {\n              selectedCell = gObj.getMovableCellFromIndex(i, j);\n            }\n          } else {\n            selectedCell = gObj.getCellFromIndex(i, j);\n          }\n\n          if (!selectedCell) {\n            continue;\n          }\n\n          cellIndexes.push(j);\n\n          _this.updateCellSelection(selectedCell);\n\n          _this.addAttribute(selectedCell);\n        }\n\n        _this.selectedRowCellIndexes.push({\n          rowIndex: i,\n          cellIndexes: cellIndexes\n        });\n      }\n\n      var cellSelectedArgs;\n      var isHybrid = 'isHybrid';\n\n      if (!isBlazor() || _this.parent.isJsComponent || _this.parent[isHybrid]) {\n        cellSelectedArgs = {\n          data: selectedData,\n          cellIndex: edIndex,\n          currentCell: gObj.getCellFromIndex(edIndex.rowIndex, edIndex.cellIndex),\n          selectedRowCellIndex: _this.selectedRowCellIndexes,\n          previousRowCell: _this.prevECIdxs ? _this.getCellIndex(_this.prevECIdxs.rowIndex, _this.prevECIdxs.cellIndex) : undefined\n        };\n        var previousRowCellIndex = 'previousRowCellIndex';\n        cellSelectedArgs[previousRowCellIndex] = _this.prevECIdxs;\n      } else {\n        cellSelectedArgs = {\n          data: selectedData,\n          cellIndex: edIndex,\n          selectedRowCellIndex: _this.selectedRowCellIndexes\n        };\n      }\n\n      if (!_this.isDragged) {\n        _this.onActionComplete(cellSelectedArgs, events.cellSelected);\n\n        _this.cellselected = true;\n      }\n\n      _this.updateCellProps(stIndex, edIndex);\n    });\n  };\n  /**\n   * Selects a collection of cells by row and column indexes.\n   * @param  {ISelectedCell[]} rowCellIndexes - Specifies the row and column indexes.\n   * @return {void}\n   */\n\n\n  Selection.prototype.selectCells = function (rowCellIndexes) {\n    if (!this.isCellType()) {\n      return;\n    }\n\n    var gObj = this.parent;\n    var selectedCell = this.getSelectedMovableCell(rowCellIndexes[0]);\n    var frzCols = gObj.getFrozenColumns();\n\n    if (!selectedCell) {\n      selectedCell = gObj.getCellFromIndex(rowCellIndexes[0].rowIndex, rowCellIndexes[0].cellIndexes[0]);\n    }\n\n    this.currentIndex = rowCellIndexes[0].rowIndex;\n    var selectedData = this.getCurrentBatchRecordChanges()[this.currentIndex];\n\n    if (this.isSingleSel() || !this.isCellType() || this.isEditing()) {\n      return;\n    }\n\n    var cellSelectArgs;\n    var isHybrid = 'isHybrid';\n\n    if (!isBlazor() || this.parent.isJsComponent || this.parent[isHybrid]) {\n      cellSelectArgs = {\n        data: selectedData,\n        cellIndex: rowCellIndexes[0].cellIndexes[0],\n        currentCell: selectedCell,\n        isCtrlPressed: this.isMultiCtrlRequest,\n        isShiftPressed: this.isMultiShiftRequest,\n        previousRowCell: this.prevECIdxs ? this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : undefined\n      };\n      var previousRowCellIndex = 'previousRowCellIndex';\n      cellSelectArgs[previousRowCellIndex] = this.prevECIdxs;\n    } else {\n      cellSelectArgs = {\n        data: selectedData,\n        cellIndex: rowCellIndexes[0].cellIndexes[0],\n        isCtrlPressed: this.isMultiCtrlRequest,\n        isShiftPressed: this.isMultiShiftRequest\n      };\n    }\n\n    this.onActionBegin(cellSelectArgs, events.cellSelecting);\n\n    for (var i = 0, len = rowCellIndexes.length; i < len; i++) {\n      for (var j = 0, cellLen = rowCellIndexes[i].cellIndexes.length; j < cellLen; j++) {\n        if (frzCols) {\n          if (rowCellIndexes[i].cellIndexes[j] < frzCols) {\n            selectedCell = gObj.getCellFromIndex(rowCellIndexes[i].rowIndex, rowCellIndexes[i].cellIndexes[j]);\n          } else {\n            selectedCell = gObj.getMovableCellFromIndex(rowCellIndexes[i].rowIndex, rowCellIndexes[i].cellIndexes[j]);\n          }\n        } else {\n          selectedCell = gObj.getCellFromIndex(rowCellIndexes[i].rowIndex, rowCellIndexes[i].cellIndexes[j]);\n        }\n\n        if (!selectedCell) {\n          continue;\n        }\n\n        this.updateCellSelection(selectedCell);\n        this.addAttribute(selectedCell);\n        this.addRowCellIndex({\n          rowIndex: rowCellIndexes[i].rowIndex,\n          cellIndex: rowCellIndexes[i].cellIndexes[j]\n        });\n      }\n    }\n\n    this.updateCellProps({\n      rowIndex: rowCellIndexes[0].rowIndex,\n      cellIndex: rowCellIndexes[0].cellIndexes[0]\n    }, {\n      rowIndex: rowCellIndexes[0].rowIndex,\n      cellIndex: rowCellIndexes[0].cellIndexes[0]\n    });\n    var cellSelectedArgs;\n\n    if (!isBlazor() || this.parent.isJsComponent || this.parent[isHybrid]) {\n      cellSelectedArgs = {\n        data: selectedData,\n        cellIndex: rowCellIndexes[0].cellIndexes[0],\n        currentCell: selectedCell,\n        selectedRowCellIndex: this.selectedRowCellIndexes,\n        previousRowCell: this.prevECIdxs ? this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : undefined\n      };\n      var previousRowCellIndex = 'previousRowCellIndex';\n      cellSelectedArgs[previousRowCellIndex] = this.prevECIdxs;\n    } else {\n      cellSelectedArgs = {\n        data: selectedData,\n        cellIndex: rowCellIndexes[0].cellIndexes[0],\n        selectedRowCellIndex: this.selectedRowCellIndexes\n      };\n    }\n\n    this.onActionComplete(cellSelectedArgs, events.cellSelected);\n  };\n  /**\n   * Select cells with existing cell selection by passing row and column index.\n   * @param  {IIndex} startIndex - Defines the collection of row and column index.\n   * @return {void}\n   * @hidden\n   */\n\n\n  Selection.prototype.addCellsToSelection = function (cellIndexes) {\n    if (!this.isCellType()) {\n      return;\n    }\n\n    var gObj = this.parent;\n    var selectedTable;\n    var cIdx;\n    var selectedCell;\n    var frzCols = gObj.getFrozenColumns();\n    var index;\n    this.currentIndex = cellIndexes[0].rowIndex;\n    var cncl = 'cancel';\n    var selectedData = this.getCurrentBatchRecordChanges()[this.currentIndex];\n    var isHybrid = 'isHybrid';\n\n    if (this.isSingleSel() || !this.isCellType() || this.isEditing()) {\n      return;\n    }\n\n    this.hideAutoFill();\n    var rowObj;\n\n    if (frzCols && cellIndexes[0].cellIndex >= frzCols) {\n      rowObj = gObj.getMovableRowsObject()[cellIndexes[0].rowIndex];\n    } else {\n      rowObj = this.getRowObj(cellIndexes[0].rowIndex);\n    }\n\n    var foreignKeyData = [];\n\n    for (var _i = 0, cellIndexes_1 = cellIndexes; _i < cellIndexes_1.length; _i++) {\n      var cellIndex = cellIndexes_1[_i];\n\n      for (var i = 0, len = this.selectedRowCellIndexes.length; i < len; i++) {\n        if (this.selectedRowCellIndexes[i].rowIndex === cellIndex.rowIndex) {\n          index = i;\n          break;\n        }\n      }\n\n      selectedCell = this.getSelectedMovableCell(cellIndex);\n\n      if (!selectedCell) {\n        selectedCell = gObj.getCellFromIndex(cellIndex.rowIndex, this.getColIndex(cellIndex.rowIndex, cellIndex.cellIndex));\n      }\n\n      foreignKeyData.push(rowObj.cells[frzCols && cellIndexes[0].cellIndex >= frzCols ? cellIndex.cellIndex - frzCols : cellIndex.cellIndex].foreignKeyData);\n      var args = void 0;\n\n      if (!isBlazor() || this.parent.isJsComponent || this.parent[isHybrid]) {\n        args = {\n          cancel: false,\n          data: selectedData,\n          cellIndex: cellIndexes[0],\n          isShiftPressed: this.isMultiShiftRequest,\n          currentCell: selectedCell,\n          isCtrlPressed: this.isMultiCtrlRequest,\n          previousRowCell: this.prevECIdxs ? gObj.getCellFromIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : undefined\n        };\n        var previousRowCellIndex = 'previousRowCellIndex';\n        args[previousRowCellIndex] = this.prevECIdxs;\n      } else {\n        args = {\n          cancel: false,\n          data: selectedData,\n          cellIndex: cellIndexes[0],\n          isShiftPressed: this.isMultiShiftRequest,\n          isCtrlPressed: this.isMultiCtrlRequest\n        };\n      }\n\n      var isUnSelected = index > -1;\n\n      if (isUnSelected) {\n        var selectedCellIdx = this.selectedRowCellIndexes[index].cellIndexes;\n\n        if (selectedCellIdx.indexOf(cellIndex.cellIndex) > -1) {\n          this.cellDeselect(events.cellDeselecting, [{\n            rowIndex: cellIndex.rowIndex,\n            cellIndexes: [cellIndex.cellIndex]\n          }], selectedData, [selectedCell], foreignKeyData);\n          selectedCellIdx.splice(selectedCellIdx.indexOf(cellIndex.cellIndex), 1);\n\n          if (selectedCellIdx.length === 0) {\n            this.selectedRowCellIndexes.splice(index, 1);\n          }\n\n          selectedCell.classList.remove('e-cellselectionbackground');\n          selectedCell.removeAttribute('aria-selected');\n          this.cellDeselect(events.cellDeselected, [{\n            rowIndex: cellIndex.rowIndex,\n            cellIndexes: [cellIndex.cellIndex]\n          }], selectedData, [selectedCell], foreignKeyData);\n        } else {\n          isUnSelected = false;\n          this.onActionBegin(args, events.cellSelecting);\n          this.addRowCellIndex({\n            rowIndex: cellIndex.rowIndex,\n            cellIndex: cellIndex.cellIndex\n          });\n          this.updateCellSelection(selectedCell);\n          this.addAttribute(selectedCell);\n        }\n      } else {\n        this.onActionBegin(args, events.cellSelecting);\n\n        if (!isNullOrUndefined(args) && args[cncl] === true) {\n          return;\n        }\n\n        this.updateCellSelection(selectedCell, cellIndex.rowIndex, cellIndex.cellIndex);\n      }\n\n      if (!isUnSelected) {\n        var cellSelectedArgs = void 0;\n\n        if (!isBlazor() || this.parent.isJsComponent || this.parent[isHybrid]) {\n          cellSelectedArgs = {\n            data: selectedData,\n            cellIndex: cellIndexes[0],\n            currentCell: selectedCell,\n            previousRowCell: this.prevECIdxs ? this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : undefined,\n            selectedRowCellIndex: this.selectedRowCellIndexes\n          };\n          var previousRowCellIndex = 'previousRowCellIndex';\n          cellSelectedArgs[previousRowCellIndex] = this.prevECIdxs;\n        } else {\n          cellSelectedArgs = {\n            data: selectedData,\n            cellIndex: cellIndexes[0],\n            selectedRowCellIndex: this.selectedRowCellIndexes\n          };\n        }\n\n        this.onActionComplete(cellSelectedArgs, events.cellSelected);\n        this.cellselected = true;\n      }\n\n      this.updateCellProps(cellIndex, cellIndex);\n    }\n  };\n\n  Selection.prototype.getColIndex = function (rowIndex, index) {\n    var cells;\n    var frzCols = this.parent.getFrozenColumns();\n\n    if (frzCols) {\n      if (index >= frzCols) {\n        cells = this.parent.getMovableDataRows()[rowIndex] && this.parent.getMovableDataRows()[rowIndex].querySelectorAll('td.e-rowcell');\n      }\n    }\n\n    if (!cells) {\n      cells = this.parent.getDataRows()[rowIndex] && this.parent.getDataRows()[rowIndex].querySelectorAll('td.e-rowcell');\n    }\n\n    if (cells) {\n      for (var m = 0; m < cells.length; m++) {\n        var colIndex = parseInt(cells[m].getAttribute('aria-colindex'), 10);\n\n        if (colIndex === index) {\n          if (frzCols) {\n            if (index >= frzCols) {\n              m += frzCols;\n            }\n          }\n\n          return m;\n        }\n      }\n    }\n\n    return -1;\n  };\n\n  Selection.prototype.getLastColIndex = function (rowIndex) {\n    var cells = this.parent.getFrozenColumns() ? this.parent.getMovableDataRows()[rowIndex].querySelectorAll('td.e-rowcell') : this.parent.getDataRows()[rowIndex].querySelectorAll('td.e-rowcell');\n    return parseInt(cells[cells.length - 1].getAttribute('aria-colindex'), 10);\n  };\n\n  Selection.prototype.clearCell = function () {\n    this.clearCellSelection();\n  };\n\n  Selection.prototype.cellDeselect = function (type, cellIndexes, data, cells, foreignKeyData) {\n    var cancl = 'cancel';\n\n    if (cells[0] && cells[0].classList.contains('e-gridchkbox')) {\n      this.updateCheckBoxes(closest(cells[0], 'tr'));\n    }\n\n    var args = {\n      cells: cells,\n      data: data,\n      cellIndexes: cellIndexes,\n      foreignKeyData: foreignKeyData,\n      cancel: false\n    };\n    this.parent.trigger(type, args);\n    this.isPreventCellSelect = args[cancl];\n  };\n\n  Selection.prototype.updateCellSelection = function (selectedCell, rowIndex, cellIndex) {\n    if (!isNullOrUndefined(rowIndex)) {\n      this.addRowCellIndex({\n        rowIndex: rowIndex,\n        cellIndex: cellIndex\n      });\n    }\n\n    selectedCell.classList.add('e-cellselectionbackground');\n\n    if (selectedCell.classList.contains('e-gridchkbox')) {\n      this.updateCheckBoxes(closest(selectedCell, 'tr'), true);\n    }\n\n    this.addAttribute(selectedCell);\n  };\n\n  Selection.prototype.addAttribute = function (cell) {\n    this.target = cell;\n\n    if (!isNullOrUndefined(cell)) {\n      cell.setAttribute('aria-selected', 'true');\n\n      if (!this.preventFocus) {\n        this.focus.onClick({\n          target: cell\n        }, true);\n      }\n    }\n  };\n\n  Selection.prototype.updateCellProps = function (startIndex, endIndex) {\n    this.prevCIdxs = startIndex;\n    this.prevECIdxs = endIndex;\n    this.isCellSelected = this.selectedRowCellIndexes.length && true;\n  };\n\n  Selection.prototype.addRowCellIndex = function (rowCellIndex) {\n    var isRowAvail;\n    var index;\n\n    for (var i = 0, len = this.selectedRowCellIndexes.length; i < len; i++) {\n      if (this.selectedRowCellIndexes[i].rowIndex === rowCellIndex.rowIndex) {\n        isRowAvail = true;\n        index = i;\n        break;\n      }\n    }\n\n    if (isRowAvail) {\n      if (this.selectedRowCellIndexes[index].cellIndexes.indexOf(rowCellIndex.cellIndex) < 0) {\n        this.selectedRowCellIndexes[index].cellIndexes.push(rowCellIndex.cellIndex);\n      }\n    } else {\n      this.selectedRowCellIndexes.push({\n        rowIndex: rowCellIndex.rowIndex,\n        cellIndexes: [rowCellIndex.cellIndex]\n      });\n    }\n  };\n  /**\n   * Deselects the currently selected cells.\n   * @return {void}\n   */\n\n\n  Selection.prototype.clearCellSelection = function () {\n    if (this.isCellSelected) {\n      var gObj = this.parent;\n      var selectedCells = this.getSelectedCellsElement();\n      var rowCell = this.selectedRowCellIndexes;\n      var data = [];\n      var cells = [];\n      var foreignKeyData = [];\n      var currentViewData = this.getCurrentBatchRecordChanges();\n      var selectedTable = void 0;\n      var frzCols = gObj.getFrozenColumns();\n      this.hideAutoFill();\n\n      for (var i = 0, len = rowCell.length; i < len; i++) {\n        data.push(currentViewData[rowCell[i].rowIndex]);\n        var rowObj = this.getRowObj(rowCell[i].rowIndex);\n\n        for (var j = 0, cLen = rowCell[i].cellIndexes.length; j < cLen; j++) {\n          if (frzCols) {\n            if (rowCell[i].cellIndexes[j] < frzCols) {\n              cells.push(gObj.getCellFromIndex(rowCell[i].rowIndex, rowCell[i].cellIndexes[j]));\n            } else {\n              cells.push(gObj.getMovableCellFromIndex(rowCell[i].rowIndex, rowCell[i].cellIndexes[j]));\n            }\n          } else {\n            if (rowObj.cells) {\n              foreignKeyData.push(rowObj.cells[rowCell[i].cellIndexes[j]].foreignKeyData);\n            }\n\n            cells.push(gObj.getCellFromIndex(rowCell[i].rowIndex, rowCell[i].cellIndexes[j]));\n          }\n        }\n      }\n\n      this.cellDeselect(events.cellDeselecting, rowCell, data, cells, foreignKeyData);\n\n      if (this.isPreventCellSelect === true) {\n        return;\n      }\n\n      for (var i = 0, len = selectedCells.length; i < len; i++) {\n        selectedCells[i].classList.remove('e-cellselectionbackground');\n        selectedCells[i].removeAttribute('aria-selected');\n      }\n\n      if (this.bdrElement) {\n        this.showHideBorders('none');\n      }\n\n      this.selectedRowCellIndexes = [];\n      this.isCellSelected = false;\n\n      if (!this.isDragged && this.cellselected) {\n        this.cellDeselect(events.cellDeselected, rowCell, data, cells, foreignKeyData);\n      }\n    }\n  };\n\n  Selection.prototype.getSelectedCellsElement = function () {\n    var gObj = this.parent;\n    var rows = gObj.getDataRows();\n    var mRows;\n\n    if (gObj.getFrozenColumns()) {\n      mRows = gObj.getMovableDataRows();\n      rows = gObj.addMovableRows(rows, mRows);\n    }\n\n    var cells = [];\n\n    for (var i = 0, len = rows.length; i < len; i++) {\n      cells = cells.concat([].slice.call(rows[i].querySelectorAll('.e-cellselectionbackground')));\n    }\n\n    return cells;\n  };\n\n  Selection.prototype.mouseMoveHandler = function (e) {\n    e.preventDefault();\n    var gBRect = this.parent.element.getBoundingClientRect();\n    var x1 = this.x;\n    var y1 = this.y;\n    var position = getPosition(e);\n    var x2 = position.x - gBRect.left;\n    var y2 = position.y - gBRect.top;\n    var tmp;\n    var target = closest(e.target, 'tr');\n    this.isDragged = true;\n\n    if (!this.isCellDrag) {\n      if (!target) {\n        target = closest(document.elementFromPoint(this.parent.element.offsetLeft + 2, e.clientY), 'tr');\n      }\n\n      if (x1 > x2) {\n        tmp = x2;\n        x2 = x1;\n        x1 = tmp;\n      }\n\n      if (y1 > y2) {\n        tmp = y2;\n        y2 = y1;\n        y1 = tmp;\n      }\n\n      this.element.style.left = x1 + 'px';\n      this.element.style.top = y1 + 'px';\n      this.element.style.width = x2 - x1 + 'px';\n      this.element.style.height = y2 - y1 + 'px';\n    }\n\n    if (target && !e.ctrlKey && !e.shiftKey) {\n      var rowIndex = parseInt(target.getAttribute('aria-rowindex'), 10);\n\n      if (!this.isCellDrag) {\n        this.hideAutoFill();\n        this.selectRowsByRange(this.startDIndex, rowIndex);\n      } else {\n        var td = parentsUntil(e.target, 'e-rowcell');\n\n        if (td) {\n          this.startAFCell = this.startCell;\n          this.endAFCell = parentsUntil(e.target, 'e-rowcell');\n          this.selectLikeExcel(e, rowIndex, parseInt(td.getAttribute('aria-colindex'), 10));\n        }\n      }\n    }\n  };\n\n  Selection.prototype.selectLikeExcel = function (e, rowIndex, cellIndex) {\n    if (!this.isAutoFillSel) {\n      this.clearCellSelection();\n      this.selectCellsByRange({\n        rowIndex: this.startDIndex,\n        cellIndex: this.startDCellIndex\n      }, {\n        rowIndex: rowIndex,\n        cellIndex: cellIndex\n      });\n      this.drawBorders();\n    } else {\n      //Autofill\n      this.showAFBorders();\n      this.selectLikeAutoFill(e);\n    }\n  };\n\n  Selection.prototype.drawBorders = function () {\n    if (this.selectionSettings.cellSelectionMode === 'BoxWithBorder' && this.selectedRowCellIndexes.length && !this.parent.isEdit) {\n      this.parent.element.classList.add('e-enabledboxbdr');\n\n      if (!this.bdrElement) {\n        this.createBorders();\n      }\n\n      this.positionBorders();\n    } else {\n      this.showHideBorders('none');\n    }\n  };\n\n  Selection.prototype.isLastCell = function (cell) {\n    var cells = [].slice.call(cell.parentElement.querySelectorAll('.e-rowcell:not(.e-hide)'));\n    return cells[cells.length - 1] === cell;\n  };\n\n  Selection.prototype.isLastRow = function (cell) {\n    var rows = [].slice.call(closest(cell, 'tbody').querySelectorAll('.e-row:not(.e-hiddenrow)'));\n    return cell.parentElement === rows[rows.length - 1];\n  };\n\n  Selection.prototype.isFirstRow = function (cell) {\n    var rows = [].slice.call(closest(cell, 'tbody').querySelectorAll('.e-row:not(.e-hiddenrow)'));\n    return cell.parentElement === rows[0];\n  };\n\n  Selection.prototype.isFirstCell = function (cell) {\n    var cells = [].slice.call(cell.parentElement.querySelectorAll('.e-rowcell:not(.e-hide)'));\n    return cells[0] === cell;\n  };\n\n  Selection.prototype.setBorders = function (parentEle, border, bdrStr) {\n    var cells = [].slice.call(parentEle.querySelectorAll('.e-cellselectionbackground')).filter(function (ele) {\n      return ele.style.display === '';\n    });\n\n    if (cells.length) {\n      var start = cells[0];\n      var end = cells[cells.length - 1];\n      var stOff = start.getBoundingClientRect();\n      var endOff = end.getBoundingClientRect();\n      var parentOff = start.offsetParent.getBoundingClientRect();\n      var rowHeight = this.isLastRow(end) && (bdrStr === '1' || bdrStr === '2') ? 2 : 0;\n      var topOffSet = this.parent.frozenRows && (bdrStr === '1' || bdrStr === '2') && this.isFirstRow(start) ? 1.5 : 0;\n      var leftOffset = this.parent.getFrozenColumns() && (bdrStr === '2' || bdrStr === '4') && this.isFirstCell(start) ? 1 : 0;\n\n      if (this.parent.enableRtl) {\n        border.style.right = parentOff.right - stOff.right - leftOffset + 'px';\n        border.style.width = stOff.right - endOff.left + leftOffset + 1 + 'px';\n      } else {\n        border.style.left = stOff.left - parentOff.left - leftOffset + 'px';\n        border.style.width = endOff.right - stOff.left + leftOffset + 1 + 'px';\n      }\n\n      border.style.top = stOff.top - parentOff.top - topOffSet + 'px';\n      border.style.height = endOff.top - stOff.top > 0 ? endOff.top - parentOff.top + endOff.height + 1 - (stOff.top - parentOff.top) - rowHeight + topOffSet + 'px' : endOff.height + topOffSet - rowHeight + 1 + 'px';\n      this.selectDirection += bdrStr;\n    } else {\n      border.style.display = 'none';\n    }\n  };\n\n  Selection.prototype.positionBorders = function () {\n    this.updateStartEndCells();\n\n    if (!this.startCell || !this.bdrElement || !this.selectedRowCellIndexes.length) {\n      return;\n    }\n\n    this.selectDirection = '';\n    this.showHideBorders('');\n    this.setBorders(this.parent.getContentTable(), this.bdrElement, '1');\n\n    if (this.parent.getFrozenColumns()) {\n      this.setBorders(this.parent.contentModule.getMovableContent(), this.mcBdrElement, '2');\n    }\n\n    if (this.parent.frozenRows) {\n      this.setBorders(this.parent.getHeaderTable(), this.fhBdrElement, '3');\n\n      if (this.parent.getFrozenColumns()) {\n        this.setBorders(this.parent.headerModule.getMovableHeader(), this.mhBdrElement, '4');\n      }\n    }\n\n    this.applyBorders(this.selectDirection);\n  };\n\n  Selection.prototype.applyBorders = function (str) {\n    var rtl = this.parent.enableRtl;\n\n    switch (str.length) {\n      case 4:\n        {\n          this.bdrElement.style.borderWidth = rtl ? '0 2px 2px 0' : '0 0 2px 2px';\n          this.mcBdrElement.style.borderWidth = rtl ? '0 0 2px 2px' : '0 2px 2px 0';\n          this.fhBdrElement.style.borderWidth = rtl ? '2px 2px 0 0' : '2px 0 0 2px';\n          this.mhBdrElement.style.borderWidth = rtl ? '2px 0 0 2px' : '2px 2px 0 0';\n        }\n        break;\n\n      case 2:\n        {\n          this.bdrElement.style.borderWidth = str.includes('2') ? rtl ? '2px 2px 2px 0' : '2px 0 2px 2px' : '0 2px 2px 2px';\n\n          if (this.parent.getFrozenColumns()) {\n            this.mcBdrElement.style.borderWidth = str.includes('1') ? rtl ? '2px 0 2px 2px' : '2px 2px 2px 0' : '0 2px 2px 2px';\n          }\n\n          if (this.parent.frozenRows) {\n            this.fhBdrElement.style.borderWidth = str.includes('1') ? '2px 2px 0 2px' : rtl ? '2px 2px 2px 0' : '2px 0 2px 2px';\n\n            if (this.parent.getFrozenColumns()) {\n              this.mhBdrElement.style.borderWidth = str.includes('2') ? '2px 2px 0 2px' : rtl ? '2px 0 2px 2px' : '2px 2px 2px 0';\n            }\n          }\n        }\n        break;\n\n      default:\n        this.bdrElement.style.borderWidth = '2px';\n\n        if (this.parent.getFrozenColumns()) {\n          this.mcBdrElement.style.borderWidth = '2px';\n        }\n\n        if (this.parent.frozenRows) {\n          this.fhBdrElement.style.borderWidth = '2px';\n\n          if (this.parent.getFrozenColumns()) {\n            this.mhBdrElement.style.borderWidth = '2px';\n          }\n        }\n\n        break;\n    }\n  };\n\n  Selection.prototype.createBorders = function () {\n    if (!this.bdrElement) {\n      this.bdrElement = this.parent.getContentTable().parentElement.appendChild(createElement('div', {\n        className: 'e-xlsel',\n        id: this.parent.element.id + '_bdr',\n        styles: 'width: 2px; border-width: 0;'\n      }));\n\n      if (this.parent.getFrozenColumns()) {\n        this.mcBdrElement = this.parent.contentModule.getMovableContent().appendChild(createElement('div', {\n          className: 'e-xlsel',\n          id: this.parent.element.id + '_mcbdr',\n          styles: 'height: 2px; border-width: 0;'\n        }));\n      }\n\n      if (this.parent.frozenRows) {\n        this.fhBdrElement = this.parent.getHeaderTable().parentElement.appendChild(createElement('div', {\n          className: 'e-xlsel',\n          id: this.parent.element.id + '_fhbdr',\n          styles: 'height: 2px;'\n        }));\n      }\n\n      if (this.parent.frozenRows && this.parent.getFrozenColumns()) {\n        this.mhBdrElement = this.parent.headerModule.getMovableHeader().appendChild(createElement('div', {\n          className: 'e-xlsel',\n          id: this.parent.element.id + '_mhbdr',\n          styles: 'height: 2px;'\n        }));\n      }\n    }\n  };\n\n  Selection.prototype.showHideBorders = function (display) {\n    if (this.bdrElement) {\n      this.bdrElement.style.display = display;\n\n      if (this.parent.getFrozenColumns()) {\n        this.mcBdrElement.style.display = display;\n      }\n\n      if (this.parent.frozenRows) {\n        this.fhBdrElement.style.display = display;\n      }\n\n      if (this.parent.frozenRows && this.parent.getFrozenColumns()) {\n        this.mhBdrElement.style.display = display;\n      }\n    }\n  };\n\n  Selection.prototype.drawAFBorders = function () {\n    if (!this.bdrAFBottom) {\n      this.createAFBorders();\n    }\n\n    this.positionAFBorders();\n  };\n\n  Selection.prototype.positionAFBorders = function () {\n    if (!this.startCell || !this.bdrAFLeft) {\n      return;\n    }\n\n    var stOff = this.startAFCell.getBoundingClientRect();\n    var endOff = this.endAFCell.getBoundingClientRect();\n    var top = endOff.top - stOff.top > 0 ? 1 : 0;\n    var firstCellTop = endOff.top - stOff.top >= 0 && (parentsUntil(this.startAFCell, 'e-movablecontent') || parentsUntil(this.startAFCell, 'e-frozencontent')) && this.isFirstRow(this.startAFCell) ? 1.5 : 0;\n    var firstCellLeft = (parentsUntil(this.startAFCell, 'e-movablecontent') || parentsUntil(this.startAFCell, 'e-movableheader')) && this.isFirstCell(this.startAFCell) ? 1 : 0;\n    var rowHeight = this.isLastRow(this.endAFCell) && (parentsUntil(this.endAFCell, 'e-movablecontent') || parentsUntil(this.endAFCell, 'e-frozencontent')) ? 2 : 0;\n    var parentOff = this.startAFCell.offsetParent.getBoundingClientRect();\n    var parentRect = this.parent.element.getBoundingClientRect();\n    var sTop = this.startAFCell.offsetParent.parentElement.scrollTop;\n    var sLeft = this.startAFCell.offsetParent.parentElement.scrollLeft;\n    var scrollTop = sTop - this.startAFCell.offsetTop;\n    var scrollLeft = sLeft - this.startAFCell.offsetLeft;\n    scrollTop = scrollTop > 0 ? Math.floor(scrollTop) - 1 : 0;\n    scrollLeft = scrollLeft > 0 ? scrollLeft : 0;\n    var left = stOff.left - parentRect.left;\n\n    if (!this.parent.enableRtl) {\n      this.bdrAFLeft.style.left = left - firstCellLeft + scrollLeft - 1 + 'px';\n      this.bdrAFRight.style.left = endOff.left - parentRect.left - 2 + endOff.width + 'px';\n      this.bdrAFTop.style.left = left + scrollLeft - 0.5 + 'px';\n      this.bdrAFTop.style.width = parseInt(this.bdrAFRight.style.left, 10) - parseInt(this.bdrAFLeft.style.left, 10) - firstCellLeft + 1 + 'px';\n    } else {\n      var scrolloffSet = parentsUntil(this.startAFCell, 'e-movablecontent') || parentsUntil(this.startAFCell, 'e-movableheader') ? stOff.right - this.startAFCell.offsetParent.parentElement.getBoundingClientRect().width - parentRect.left : 0;\n      this.bdrAFLeft.style.right = parentRect.right - endOff.right - 2 + endOff.width + 'px';\n      this.bdrAFRight.style.right = parentRect.right - stOff.right - firstCellLeft + scrolloffSet - 1 + 'px';\n      this.bdrAFTop.style.left = endOff.left - parentRect.left - 0.5 + 'px';\n      this.bdrAFTop.style.width = parseInt(this.bdrAFLeft.style.right, 10) - parseInt(this.bdrAFRight.style.right, 10) - firstCellLeft + 1 + 'px';\n    }\n\n    this.bdrAFLeft.style.top = stOff.top - parentRect.top - firstCellTop + scrollTop + 'px';\n    this.bdrAFLeft.style.height = endOff.top - stOff.top > 0 ? endOff.top - parentOff.top + endOff.height + 1 - (stOff.top - parentOff.top) + firstCellTop - rowHeight - scrollTop + 'px' : endOff.height + firstCellTop - rowHeight - scrollTop + 'px';\n    this.bdrAFRight.style.top = this.bdrAFLeft.style.top;\n    this.bdrAFRight.style.height = parseInt(this.bdrAFLeft.style.height, 10) + 'px';\n    this.bdrAFTop.style.top = this.bdrAFRight.style.top;\n    this.bdrAFBottom.style.left = this.bdrAFTop.style.left;\n    this.bdrAFBottom.style.top = parseFloat(this.bdrAFLeft.style.top) + parseFloat(this.bdrAFLeft.style.height) - top - 1 + 'px';\n    this.bdrAFBottom.style.width = this.bdrAFTop.style.width;\n  };\n\n  Selection.prototype.createAFBorders = function () {\n    if (!this.bdrAFLeft) {\n      this.bdrAFLeft = this.parent.element.appendChild(createElement('div', {\n        className: 'e-xlselaf',\n        id: this.parent.element.id + '_bdrafleft',\n        styles: 'width: 2px;'\n      }));\n      this.bdrAFRight = this.parent.element.appendChild(createElement('div', {\n        className: 'e-xlselaf',\n        id: this.parent.element.id + '_bdrafright',\n        styles: 'width: 2px;'\n      }));\n      this.bdrAFBottom = this.parent.element.appendChild(createElement('div', {\n        className: 'e-xlselaf',\n        id: this.parent.element.id + '_bdrafbottom',\n        styles: 'height: 2px;'\n      }));\n      this.bdrAFTop = this.parent.element.appendChild(createElement('div', {\n        className: 'e-xlselaf',\n        id: this.parent.element.id + '_bdraftop',\n        styles: 'height: 2px;'\n      }));\n    }\n  };\n\n  Selection.prototype.showAFBorders = function () {\n    if (this.bdrAFLeft) {\n      this.bdrAFLeft.style.display = '';\n      this.bdrAFRight.style.display = '';\n      this.bdrAFBottom.style.display = '';\n      this.bdrAFTop.style.display = '';\n    }\n  };\n\n  Selection.prototype.hideAFBorders = function () {\n    if (this.bdrAFLeft) {\n      this.bdrAFLeft.style.display = 'none';\n      this.bdrAFRight.style.display = 'none';\n      this.bdrAFBottom.style.display = 'none';\n      this.bdrAFTop.style.display = 'none';\n    }\n  };\n\n  Selection.prototype.updateValue = function (rIdx, cIdx, cell) {\n    var args = this.createBeforeAutoFill(rIdx, cIdx, cell);\n\n    if (!args.cancel) {\n      var col = this.parent.getColumnByIndex(cIdx);\n\n      if (this.parent.editModule && cell) {\n        if (col.type === 'number') {\n          this.parent.editModule.updateCell(rIdx, col.field, parseInt(args.value, 10));\n        } else {\n          this.parent.editModule.updateCell(rIdx, col.field, args.value);\n        }\n      }\n    }\n  };\n\n  Selection.prototype.createBeforeAutoFill = function (rowIndex, colIndex, cell) {\n    var col = this.parent.getColumnByIndex(colIndex);\n    var args = {\n      column: col,\n      value: cell.innerText\n    };\n    this.parent.trigger(events.beforeAutoFill, args);\n    return args;\n  };\n\n  Selection.prototype.getAutoFillCells = function (rowIndex, startCellIdx) {\n    var cells = [].slice.call(this.parent.getDataRows()[rowIndex].querySelectorAll('.e-cellselectionbackground'));\n\n    if (this.parent.getFrozenColumns()) {\n      cells = cells.concat([].slice.call(this.parent.getMovableDataRows()[rowIndex].querySelectorAll('.e-cellselectionbackground')));\n    }\n\n    return cells;\n  };\n  /* tslint:disable-next-line:max-func-body-length */\n\n\n  Selection.prototype.selectLikeAutoFill = function (e, isApply) {\n    var startrowIdx = parseInt(parentsUntil(this.startAFCell, 'e-row').getAttribute('aria-rowindex'), 10);\n    var startCellIdx = parseInt(this.startAFCell.getAttribute('aria-colindex'), 10);\n    var endrowIdx = parseInt(parentsUntil(this.endAFCell, 'e-row').getAttribute('aria-rowindex'), 10);\n    var endCellIdx = parseInt(this.endAFCell.getAttribute('aria-colindex'), 10);\n    var rowLen = this.selectedRowCellIndexes.length - 1;\n    var colLen = this.selectedRowCellIndexes[0].cellIndexes.length - 1;\n    var col;\n\n    switch (true) {\n      //direction         \n      case !isApply && this.endAFCell.classList.contains('e-cellselectionbackground') && !!parentsUntil(e.target, 'e-rowcell'):\n        this.startAFCell = this.parent.getCellFromIndex(startrowIdx, startCellIdx);\n        this.endAFCell = this.parent.getCellFromIndex(startrowIdx + rowLen, startCellIdx + colLen);\n        this.drawAFBorders();\n        break;\n\n      case this.autoFillRLselection && startCellIdx + colLen < endCellIdx && //right\n      endCellIdx - startCellIdx - colLen + 1 > endrowIdx - startrowIdx - rowLen // right bottom\n      && endCellIdx - startCellIdx - colLen + 1 > startrowIdx - endrowIdx:\n        //right top\n        this.endAFCell = this.parent.getCellFromIndex(startrowIdx + rowLen, endCellIdx);\n        endrowIdx = parseInt(parentsUntil(this.endAFCell, 'e-row').getAttribute('aria-rowindex'), 10);\n        endCellIdx = parseInt(this.endAFCell.getAttribute('aria-colindex'), 10);\n\n        if (!isApply) {\n          this.drawAFBorders();\n        } else {\n          var cellIdx = parseInt(this.endCell.getAttribute('aria-colindex'), 10);\n\n          for (var i = startrowIdx; i <= endrowIdx; i++) {\n            var cells = this.getAutoFillCells(i, startCellIdx);\n            var c = 0;\n\n            for (var j = cellIdx + 1; j <= endCellIdx; j++) {\n              if (c > colLen) {\n                c = 0;\n              }\n\n              this.updateValue(i, j, cells[c]);\n              c++;\n            }\n          }\n\n          this.selectCellsByRange({\n            rowIndex: startrowIdx,\n            cellIndex: this.startCellIndex\n          }, {\n            rowIndex: endrowIdx,\n            cellIndex: endCellIdx\n          });\n        }\n\n        break;\n\n      case this.autoFillRLselection && startCellIdx > endCellIdx && // left\n      startCellIdx - endCellIdx + 1 > endrowIdx - startrowIdx - rowLen && //left top\n      startCellIdx - endCellIdx + 1 > startrowIdx - endrowIdx:\n        // left bottom\n        this.startAFCell = this.parent.getCellFromIndex(startrowIdx, endCellIdx);\n        this.endAFCell = this.endCell;\n\n        if (!isApply) {\n          this.drawAFBorders();\n        } else {\n          for (var i = startrowIdx; i <= startrowIdx + rowLen; i++) {\n            var cells = this.getAutoFillCells(i, startCellIdx);\n            cells.reverse();\n            var c = 0;\n\n            for (var j = this.startCellIndex - 1; j >= endCellIdx; j--) {\n              if (c > colLen) {\n                c = 0;\n              }\n\n              this.updateValue(i, j, cells[c]);\n              c++;\n            }\n          }\n\n          this.selectCellsByRange({\n            rowIndex: startrowIdx,\n            cellIndex: endCellIdx\n          }, {\n            rowIndex: startrowIdx + rowLen,\n            cellIndex: this.startCellIndex + colLen\n          });\n        }\n\n        break;\n\n      case startrowIdx > endrowIdx:\n        //up\n        this.startAFCell = this.parent.getCellFromIndex(endrowIdx, startCellIdx);\n        this.endAFCell = this.endCell;\n\n        if (!isApply) {\n          this.drawAFBorders();\n        } else {\n          var trIdx = parseInt(this.endCell.parentElement.getAttribute('aria-rowindex'), 10);\n          var r = trIdx;\n\n          for (var i = startrowIdx - 1; i >= endrowIdx; i--) {\n            if (r === this.startIndex - 1) {\n              r = trIdx;\n            }\n\n            var cells = this.getAutoFillCells(r, startCellIdx);\n            var c = 0;\n            r--;\n\n            for (var j = this.startCellIndex; j <= this.startCellIndex + colLen; j++) {\n              this.updateValue(i, j, cells[c]);\n              c++;\n            }\n          }\n\n          this.selectCellsByRange({\n            rowIndex: endrowIdx,\n            cellIndex: startCellIdx + colLen\n          }, {\n            rowIndex: startrowIdx + rowLen,\n            cellIndex: startCellIdx\n          });\n        }\n\n        break;\n\n      default:\n        //down\n        this.endAFCell = this.parent.getCellFromIndex(endrowIdx, startCellIdx + colLen);\n\n        if (!isApply) {\n          this.drawAFBorders();\n        } else {\n          var trIdx = parseInt(this.endCell.parentElement.getAttribute('aria-rowindex'), 10);\n          var r = this.startIndex;\n\n          for (var i = trIdx + 1; i <= endrowIdx; i++) {\n            if (r === trIdx + 1) {\n              r = this.startIndex;\n            }\n\n            var cells = this.getAutoFillCells(r, startCellIdx);\n            r++;\n            var c = 0;\n\n            for (var m = this.startCellIndex; m <= this.startCellIndex + colLen; m++) {\n              this.updateValue(i, m, cells[c]);\n              c++;\n            }\n          }\n\n          this.selectCellsByRange({\n            rowIndex: trIdx - rowLen,\n            cellIndex: startCellIdx\n          }, {\n            rowIndex: endrowIdx,\n            cellIndex: startCellIdx + colLen\n          });\n        }\n\n        break;\n    }\n  };\n\n  Selection.prototype.mouseUpHandler = function (e) {\n    document.body.classList.remove('e-disableuserselect');\n\n    if (this.element) {\n      remove(this.element);\n    }\n\n    if (this.isDragged && this.selectedRowCellIndexes.length === 1 && this.selectedRowCellIndexes[0].cellIndexes.length === 1) {\n      this.mUPTarget = parentsUntil(e.target, 'e-rowcell');\n    } else {\n      this.mUPTarget = null;\n    }\n\n    if (this.isDragged && !this.isAutoFillSel && this.selectionSettings.mode === 'Cell') {\n      var target = e.target;\n      var rowIndex = parseInt(target.parentElement.getAttribute('aria-rowindex'), 10);\n      var cellIndex = parseInt(target.getAttribute('aria-colindex'), 10);\n      this.isDragged = false;\n      this.clearCellSelection();\n      this.selectCellsByRange({\n        rowIndex: this.startDIndex,\n        cellIndex: this.startDCellIndex\n      }, {\n        rowIndex: rowIndex,\n        cellIndex: cellIndex\n      });\n    }\n\n    this.isDragged = false;\n    this.updateAutoFillPosition();\n\n    if (this.isAutoFillSel) {\n      var lastCell = parentsUntil(e.target, 'e-rowcell');\n      this.endAFCell = lastCell ? lastCell : this.endCell === this.endAFCell ? this.startAFCell : this.endAFCell;\n      this.startAFCell = this.startCell;\n      this.updateStartCellsIndex();\n      this.selectLikeAutoFill(e, true);\n      this.updateAutoFillPosition();\n      this.hideAFBorders();\n      this.positionBorders();\n      this.isAutoFillSel = false;\n    }\n\n    EventHandler.remove(this.parent.getContent(), 'mousemove', this.mouseMoveHandler);\n\n    if (this.parent.frozenRows) {\n      EventHandler.remove(this.parent.getHeaderContent(), 'mousemove', this.mouseMoveHandler);\n    }\n\n    EventHandler.remove(document.body, 'mouseup', this.mouseUpHandler);\n  };\n\n  Selection.prototype.hideAutoFill = function () {\n    if (this.autofill) {\n      this.autofill.style.display = 'none';\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  Selection.prototype.updateAutoFillPosition = function () {\n    if (this.parent.enableAutoFill && !this.parent.isEdit && this.selectionSettings.cellSelectionMode.indexOf('Box') > -1 && !this.isRowType() && !this.isSingleSel() && this.selectedRowCellIndexes.length) {\n      var frzCols = this.parent.getFrozenColumns();\n      var index = parseInt(this.target.getAttribute('aria-colindex'), 10);\n      var rindex = parseInt(this.target.getAttribute('index'), 10);\n      var rowIndex = this.selectedRowCellIndexes[this.selectedRowCellIndexes.length - 1].rowIndex;\n      var cells = this.getAutoFillCells(rowIndex, index).filter(function (ele) {\n        return ele.style.display === '';\n      });\n      var isFrozenCol = void 0;\n      var isFrozenRow = void 0;\n\n      if (frzCols && index >= frzCols) {\n        isFrozenCol = true;\n      }\n\n      if (rindex < this.parent.frozenRows) {\n        isFrozenRow = true;\n      }\n\n      if (!parentsUntil(this.target, 'e-table').querySelector('#' + this.parent.element.id + '_autofill')) {\n        if (this.parent.element.querySelector('#' + this.parent.element.id + '_autofill')) {\n          this.parent.element.querySelector('#' + this.parent.element.id + '_autofill').remove();\n        }\n\n        this.autofill = createElement('div', {\n          className: 'e-autofill',\n          id: this.parent.element.id + '_autofill'\n        });\n        this.autofill.style.display = 'none';\n        !isFrozenRow ? !isFrozenCol ? this.parent.getContentTable().parentElement.appendChild(this.autofill) : this.parent.contentModule.getMovableContent().appendChild(this.autofill) : !isFrozenCol ? this.parent.getHeaderTable().parentElement.appendChild(this.autofill) : this.parent.headerModule.getMovableHeader().appendChild(this.autofill);\n      }\n\n      var cell = cells[cells.length - 1];\n\n      if (cell && cell.offsetParent) {\n        var clientRect = cell.getBoundingClientRect();\n        var parentOff = cell.offsetParent.getBoundingClientRect();\n        var colWidth = this.isLastCell(cell) ? 4 : 0;\n        var rowHeight = this.isLastRow(cell) ? 3 : 0;\n\n        if (!this.parent.enableRtl) {\n          this.autofill.style.left = clientRect.left - parentOff.left + clientRect.width - 4 - colWidth + 'px';\n        } else {\n          this.autofill.style.right = parentOff.right - clientRect.right + clientRect.width - 4 - colWidth + 'px';\n        }\n\n        this.autofill.style.top = clientRect.top - parentOff.top + clientRect.height - 5 - rowHeight + 'px';\n      }\n\n      this.autofill.style.display = '';\n    } else {\n      this.hideAutoFill();\n    }\n  };\n\n  Selection.prototype.mouseDownHandler = function (e) {\n    this.mouseButton = e.button;\n    var target = e.target;\n    var gObj = this.parent;\n    var isDrag;\n    var gridElement = parentsUntil(target, 'e-grid');\n\n    if (gridElement && gridElement.id !== gObj.element.id || parentsUntil(target, 'e-headercontent') && !this.parent.frozenRows || parentsUntil(target, 'e-editedbatchcell') || parentsUntil(target, 'e-editedrow')) {\n      return;\n    }\n\n    if (e.shiftKey || e.ctrlKey) {\n      e.preventDefault();\n    }\n\n    if (parentsUntil(target, 'e-rowcell') && !e.shiftKey && !e.ctrlKey) {\n      if (gObj.selectionSettings.cellSelectionMode.indexOf('Box') > -1 && !this.isRowType() && !this.isSingleSel()) {\n        this.isCellDrag = true;\n        isDrag = true;\n      } else if (gObj.allowRowDragAndDrop && !gObj.isEdit) {\n        if (!this.isRowType() || this.isSingleSel() || closest(target, 'td').classList.contains('e-selectionbackground')) {\n          this.isDragged = false;\n          return;\n        }\n\n        isDrag = true;\n        this.element = this.parent.createElement('div', {\n          className: 'e-griddragarea'\n        });\n        gObj.getContent().appendChild(this.element);\n      }\n\n      if (isDrag) {\n        this.enableDrag(e, true);\n      }\n    }\n\n    this.updateStartEndCells();\n\n    if (target.classList.contains('e-autofill') || target.classList.contains('e-xlsel')) {\n      this.isCellDrag = true;\n      this.isAutoFillSel = true;\n      this.enableDrag(e);\n    }\n  };\n\n  Selection.prototype.updateStartEndCells = function () {\n    var cells = [].slice.call(this.parent.element.querySelectorAll('.e-cellselectionbackground'));\n    this.startCell = cells[0];\n    this.endCell = cells[cells.length - 1];\n\n    if (this.startCell) {\n      this.startIndex = parseInt(this.startCell.parentElement.getAttribute('aria-rowindex'), 10);\n      this.startCellIndex = parseInt(parentsUntil(this.startCell, 'e-rowcell').getAttribute('aria-colindex'), 10);\n    }\n  };\n\n  Selection.prototype.updateStartCellsIndex = function () {\n    if (this.startCell) {\n      this.startIndex = parseInt(this.startCell.parentElement.getAttribute('aria-rowindex'), 10);\n      this.startCellIndex = parseInt(parentsUntil(this.startCell, 'e-rowcell').getAttribute('aria-colindex'), 10);\n    }\n  };\n\n  Selection.prototype.enableDrag = function (e, isUpdate) {\n    var gObj = this.parent;\n\n    if (isUpdate) {\n      var tr = closest(e.target, 'tr');\n      this.startDIndex = parseInt(tr.getAttribute('aria-rowindex'), 10);\n      this.startDCellIndex = parseInt(parentsUntil(e.target, 'e-rowcell').getAttribute('aria-colindex'), 10);\n    }\n\n    document.body.classList.add('e-disableuserselect');\n    var gBRect = gObj.element.getBoundingClientRect();\n    var postion = getPosition(e);\n    this.x = postion.x - gBRect.left;\n    this.y = postion.y - gBRect.top;\n    EventHandler.add(gObj.getContent(), 'mousemove', this.mouseMoveHandler, this);\n\n    if (this.parent.frozenRows) {\n      EventHandler.add(gObj.getHeaderContent(), 'mousemove', this.mouseMoveHandler, this);\n    }\n\n    EventHandler.add(document.body, 'mouseup', this.mouseUpHandler, this);\n  };\n\n  Selection.prototype.clearSelAfterRefresh = function (e) {\n    var isInfiniteScroll = this.parent.enableInfiniteScrolling && e.requestType === 'infiniteScroll';\n\n    if (e.requestType !== 'virtualscroll' && !this.parent.isPersistSelection && !isInfiniteScroll) {\n      this.clearSelection();\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  Selection.prototype.addEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.on(events.uiUpdate, this.enableAfterRender, this);\n    this.parent.on(events.initialEnd, this.initializeSelection, this);\n    this.parent.on(events.rowSelectionComplete, this.onActionComplete, this);\n    this.parent.on(events.cellSelectionComplete, this.onActionComplete, this);\n    this.parent.on(events.inBoundModelChanged, this.onPropertyChanged, this);\n    this.parent.on(events.cellFocused, this.onCellFocused, this);\n    this.parent.on(events.beforeFragAppend, this.clearSelAfterRefresh, this);\n    this.parent.on(events.columnPositionChanged, this.columnPositionChanged, this);\n    this.parent.on(events.contentReady, this.initialEnd, this);\n    this.actionBeginFunction = this.actionBegin.bind(this);\n    this.actionCompleteFunction = this.actionComplete.bind(this);\n    this.parent.addEventListener(events.actionBegin, this.actionBeginFunction);\n    this.parent.addEventListener(events.actionComplete, this.actionCompleteFunction);\n    this.parent.on(events.rowsRemoved, this.rowsRemoved, this);\n    this.parent.on(events.headerRefreshed, this.refreshHeader, this);\n    this.addEventListener_checkbox();\n  };\n  /**\n   * @hidden\n   */\n\n\n  Selection.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(events.uiUpdate, this.enableAfterRender);\n    this.parent.off(events.initialEnd, this.initializeSelection);\n    this.parent.off(events.rowSelectionComplete, this.onActionComplete);\n    this.parent.off(events.cellSelectionComplete, this.onActionComplete);\n    this.parent.off(events.inBoundModelChanged, this.onPropertyChanged);\n    this.parent.off(events.cellFocused, this.onCellFocused);\n    this.parent.off(events.beforeFragAppend, this.clearSelAfterRefresh);\n    this.parent.off(events.columnPositionChanged, this.columnPositionChanged);\n    this.parent.removeEventListener(events.actionBegin, this.actionBeginFunction);\n    this.parent.removeEventListener(events.actionComplete, this.actionCompleteFunction);\n    this.parent.off(events.rowsRemoved, this.rowsRemoved);\n    this.parent.off(events.headerRefreshed, this.refreshHeader);\n    this.removeEventListener_checkbox();\n  };\n\n  Selection.prototype.wireEvents = function () {\n    this.isMacOS = navigator.userAgent.indexOf('Mac OS') !== -1;\n\n    if (this.isMacOS) {\n      EventHandler.add(this.parent.element, 'keydown', this.keyDownHandler, this);\n      EventHandler.add(this.parent.element, 'keyup', this.keyUpHandler, this);\n    }\n  };\n\n  Selection.prototype.unWireEvents = function () {\n    if (this.isMacOS) {\n      EventHandler.remove(this.parent.element, 'keydown', this.keyDownHandler);\n      EventHandler.remove(this.parent.element, 'keyup', this.keyUpHandler);\n    }\n  };\n\n  Selection.prototype.columnPositionChanged = function () {\n    if (!this.parent.isPersistSelection) {\n      this.clearSelection();\n    }\n  };\n\n  Selection.prototype.refreshHeader = function () {\n    this.setCheckAllState();\n  };\n\n  Selection.prototype.rowsRemoved = function (e) {\n    for (var i = 0; i < e.records.length; i++) {\n      delete this.selectedRowState[e.records[i][this.primaryKey]];\n      --this.totalRecordsCount;\n    }\n\n    this.setCheckAllState();\n  };\n\n  ;\n\n  Selection.prototype.beforeFragAppend = function (e) {\n    if (e.requestType !== 'virtualscroll' && !this.parent.isPersistSelection) {\n      this.clearSelection();\n    }\n  };\n\n  ;\n\n  Selection.prototype.getCheckAllBox = function () {\n    return this.parent.getHeaderContent().querySelector('.e-checkselectall');\n  };\n\n  Selection.prototype.enableAfterRender = function (e) {\n    if (e.module === this.getModuleName() && e.enable) {\n      this.render();\n      this.initPerisistSelection();\n    }\n  };\n\n  Selection.prototype.render = function (e) {\n    EventHandler.add(this.parent.getContent(), 'mousedown', this.mouseDownHandler, this);\n    EventHandler.add(this.parent.getHeaderContent(), 'mousedown', this.mouseDownHandler, this);\n  };\n\n  Selection.prototype.onPropertyChanged = function (e) {\n    if (e.module !== this.getModuleName()) {\n      return;\n    }\n\n    var gObj = this.parent;\n\n    if (!isNullOrUndefined(e.properties.type) && this.selectionSettings.type === 'Single') {\n      if (this.selectedRowCellIndexes.length > 1) {\n        this.clearCellSelection();\n        this.prevCIdxs = undefined;\n      }\n\n      if (this.selectedRowIndexes.length > 1) {\n        this.clearRowSelection();\n        this.prevRowIndex = undefined;\n      }\n\n      this.enableSelectMultiTouch = false;\n      this.hidePopUp();\n    }\n\n    if (!isNullOrUndefined(e.properties.mode) || !isNullOrUndefined(e.properties.cellSelectionMode)) {\n      this.clearSelection();\n      this.prevRowIndex = undefined;\n      this.prevCIdxs = undefined;\n    }\n\n    this.isPersisted = true;\n    this.checkBoxSelectionChanged();\n    this.isPersisted = false;\n    this.initPerisistSelection();\n    var checkboxColumn = this.parent.getColumns().filter(function (col) {\n      return col.type === 'checkbox';\n    });\n\n    if (checkboxColumn.length) {\n      gObj.isCheckBoxSelection = !(this.selectionSettings.checkboxMode === 'ResetOnRowClick');\n    }\n\n    this.drawBorders();\n  };\n\n  Selection.prototype.hidePopUp = function () {\n    if (this.parent.element.querySelector('.e-gridpopup').querySelectorAll('.e-rowselect').length) {\n      this.parent.element.querySelector('.e-gridpopup').style.display = 'none';\n    }\n  };\n\n  Selection.prototype.initialEnd = function () {\n    this.parent.off(events.contentReady, this.initialEnd);\n    this.selectRow(this.parent.selectedRowIndex);\n  };\n\n  Selection.prototype.checkBoxSelectionChanged = function () {\n    this.parent.off(events.contentReady, this.checkBoxSelectionChanged);\n    var gobj = this.parent;\n    var checkboxColumn = gobj.getColumns().filter(function (col) {\n      return col.type === 'checkbox';\n    });\n\n    if (checkboxColumn.length > 0) {\n      gobj.isCheckBoxSelection = true;\n      this.chkField = checkboxColumn[0].field;\n      this.totalRecordsCount = this.parent.pageSettings.totalRecordsCount;\n\n      if (isNullOrUndefined(this.totalRecordsCount)) {\n        this.totalRecordsCount = this.getCurrentBatchRecordChanges().length;\n      }\n\n      if (this.isSingleSel()) {\n        gobj.selectionSettings.type = 'Multiple';\n        gobj.dataBind();\n      } else {\n        this.initPerisistSelection();\n      }\n    }\n\n    if (!gobj.isCheckBoxSelection && !this.isPersisted) {\n      this.chkField = null;\n      this.initPerisistSelection();\n    }\n  };\n\n  Selection.prototype.initPerisistSelection = function () {\n    var gobj = this.parent;\n\n    if (this.parent.selectionSettings.persistSelection && this.parent.getPrimaryKeyFieldNames().length > 0) {\n      gobj.isPersistSelection = true;\n      this.ensureCheckboxFieldSelection();\n    } else if (this.parent.getPrimaryKeyFieldNames().length > 0) {\n      gobj.isPersistSelection = false;\n      this.ensureCheckboxFieldSelection();\n    } else {\n      gobj.isPersistSelection = false;\n      this.selectedRowState = {};\n    }\n  };\n\n  Selection.prototype.ensureCheckboxFieldSelection = function () {\n    var gobj = this.parent;\n    this.primaryKey = this.parent.getPrimaryKeyFieldNames()[0];\n\n    if (!gobj.enableVirtualization && this.chkField && (gobj.isPersistSelection && Object.keys(this.selectedRowState).length === 0 || !gobj.isPersistSelection)) {\n      var data = this.parent.getDataModule();\n      var query = new Query().where(this.chkField, 'equal', true);\n\n      if (!query.params) {\n        query.params = this.parent.query.params;\n      }\n\n      var dataManager = data.getData({}, query);\n      var proxy_1 = this;\n      this.parent.showSpinner();\n      dataManager.then(function (e) {\n        proxy_1.dataSuccess(e.result);\n        proxy_1.refreshPersistSelection();\n        proxy_1.parent.hideSpinner();\n      });\n    }\n  };\n\n  Selection.prototype.dataSuccess = function (res) {\n    for (var i = 0; i < res.length; i++) {\n      if (isNullOrUndefined(this.selectedRowState[res[i][this.primaryKey]]) && res[i][this.chkField]) {\n        this.selectedRowState[res[i][this.primaryKey]] = res[i][this.chkField];\n      }\n    }\n\n    this.persistSelectedData = res;\n  };\n\n  Selection.prototype.setRowSelection = function (state) {\n    if (!this.parent.getDataModule().isRemote() && !isBlazor()) {\n      if (state) {\n        if (this.parent.groupSettings.columns.length) {\n          for (var _i = 0, _a = this.getData().records; _i < _a.length; _i++) {\n            var data = _a[_i];\n            this.selectedRowState[data[this.primaryKey]] = true;\n          }\n        } else {\n          for (var _b = 0, _c = this.getData(); _b < _c.length; _b++) {\n            var data = _c[_b];\n            this.selectedRowState[data[this.primaryKey]] = true;\n          }\n        }\n      } else {\n        this.selectedRowState = {};\n      } // (this.getData()).forEach(function (data) {\n      //     this.selectedRowState[data[this.primaryKey]] = true;\n      // })\n\n    }\n  };\n\n  Selection.prototype.getData = function () {\n    return this.parent.getDataModule().dataManager.executeLocal(this.parent.getDataModule().generateQuery(true));\n  };\n\n  Selection.prototype.refreshPersistSelection = function () {\n    var rows = this.parent.getRows();\n\n    if (rows !== null && rows.length > 0 && (this.parent.isPersistSelection || this.chkField)) {\n      var indexes = [];\n\n      for (var j = 0; j < rows.length; j++) {\n        var rowObj = this.getRowObj(rows[j]);\n        var pKey = rowObj ? rowObj.data ? rowObj.data[this.primaryKey] : null : null;\n\n        if (pKey === null) {\n          return;\n        }\n\n        var checkState = void 0;\n        var chkBox = rows[j].querySelector('.e-checkselect');\n\n        if (this.selectedRowState[pKey] || this.parent.checkAllRows === 'Check' && this.chkAllCollec.indexOf(pKey) < 0 || this.parent.checkAllRows === 'Uncheck' && this.chkAllCollec.indexOf(pKey) > 0 || this.parent.checkAllRows === 'Intermediate' && !isNullOrUndefined(this.chkField) && rowObj.data[this.chkField]) {\n          indexes.push(parseInt(rows[j].getAttribute('aria-rowindex'), 10));\n          checkState = true;\n        } else {\n          checkState = false;\n\n          if (this.checkedTarget !== chkBox && this.parent.isCheckBoxSelection) {\n            removeAddCboxClasses(chkBox.nextElementSibling, checkState);\n          }\n        }\n\n        this.updatePersistCollection(rows[j], checkState);\n      }\n\n      this.isSingleSel() && indexes.length > 0 ? this.selectRow(indexes[0], true) : this.selectRows(indexes);\n    }\n\n    if (this.parent.isCheckBoxSelection && this.getCurrentBatchRecordChanges().length > 0) {\n      this.setCheckAllState();\n    }\n  };\n\n  Selection.prototype.actionBegin = function (e) {\n    if (e.requestType === 'save' && this.parent.isPersistSelection) {\n      var editChkBox = this.parent.element.querySelector('.e-edit-checkselect');\n\n      if (!isNullOrUndefined(editChkBox)) {\n        var row = closest(editChkBox, '.e-editedrow');\n\n        if (row) {\n          if (this.parent.editSettings.mode === 'Dialog') {\n            row = this.parent.element.querySelector('.e-dlgeditrow');\n          }\n\n          var rowObj = this.getRowObj(row);\n\n          if (!rowObj) {\n            return;\n          }\n\n          this.selectedRowState[rowObj.data[this.primaryKey]] = rowObj.isSelected = editChkBox.checked;\n        } else {\n          this.isCheckedOnAdd = editChkBox.checked;\n        }\n      }\n    }\n  };\n\n  Selection.prototype.actionComplete = function (e) {\n    if (e.requestType === 'save' && this.parent.isPersistSelection) {\n      if (e.action === 'add' && this.isCheckedOnAdd) {\n        var rowObj = this.parent.getRowObjectFromUID(this.parent.getRows()[e.selectedRow].getAttribute('data-uid'));\n        this.selectedRowState[rowObj.data[this.primaryKey]] = rowObj.isSelected = this.isCheckedOnAdd;\n      }\n\n      this.refreshPersistSelection();\n    }\n\n    if (e.requestType === 'delete' && this.parent.isPersistSelection) {\n      var records = [];\n\n      if (!isBlazor()) {\n        records = e.data;\n      } else {\n        records = this.getSelectedRecords();\n      }\n\n      var data = records.slice();\n\n      for (var i = 0; i < data.length; i++) {\n        if (!isNullOrUndefined(data[i][this.primaryKey])) {\n          this.updatePersistDelete(data[i][this.primaryKey]);\n        }\n      }\n\n      this.setCheckAllState();\n      this.totalRecordsCount = this.parent.pageSettings.totalRecordsCount;\n    }\n\n    if (e.requestType === 'paging') {\n      this.prevRowIndex = undefined;\n      this.prevCIdxs = undefined;\n      this.prevECIdxs = undefined;\n    }\n  };\n\n  Selection.prototype.onDataBound = function () {\n    if (!this.parent.enableVirtualization && this.parent.isPersistSelection) {\n      this.refreshPersistSelection();\n    }\n\n    if (this.parent.enableVirtualization) {\n      this.setCheckAllState();\n    }\n\n    if (this.parent.isCheckBoxSelection && !this.initialRowSelection) {\n      var totalRecords = this.parent.getRowsObject();\n      var indexes = [];\n\n      for (var i = 0; i < totalRecords.length; i++) {\n        if (totalRecords[i].isSelected) {\n          indexes.push(i);\n        }\n      }\n\n      if (indexes.length) {\n        this.selectRows(indexes);\n      }\n\n      this.initialRowSelection = true;\n    }\n  };\n\n  Selection.prototype.updatePersistSelectedData = function (checkState) {\n    if (this.parent.isPersistSelection) {\n      var rows = this.parent.getRows();\n\n      for (var i = 0; i < rows.length; i++) {\n        this.updatePersistCollection(rows[i], checkState);\n      }\n\n      if (this.parent.checkAllRows === 'Uncheck') {\n        this.setRowSelection(false);\n        this.persistSelectedData = this.parent.getDataModule().isRemote() ? this.persistSelectedData : [];\n      } else if (this.parent.checkAllRows === 'Check') {\n        this.setRowSelection(true);\n        this.persistSelectedData = !this.parent.getDataModule().isRemote() && !isBlazor() ? this.parent.groupSettings.columns.length ? this.getData().records.slice() : this.getData().slice() : this.persistSelectedData;\n      }\n    }\n  };\n\n  Selection.prototype.checkSelectAllAction = function (checkState) {\n    var cRenderer = this.getRenderer();\n    var editForm = this.parent.element.querySelector('.e-gridform');\n    this.checkedTarget = this.getCheckAllBox();\n\n    if (checkState && this.getCurrentBatchRecordChanges().length) {\n      this.parent.checkAllRows = 'Check';\n      this.updatePersistSelectedData(checkState);\n\n      if (isBlazor() && this.parent.enableVirtualization && !isNullOrUndefined(this.parent.contentModule.currentInfo.endIndex)) {\n        this.selectRowsByRange(this.parent.contentModule.currentInfo.startIndex, this.parent.contentModule.currentInfo.endIndex);\n      } else {\n        this.selectRowsByRange(cRenderer.getVirtualRowIndex(0), cRenderer.getVirtualRowIndex(this.getCurrentBatchRecordChanges().length - 1));\n      }\n    } else {\n      this.parent.checkAllRows = 'Uncheck';\n      this.updatePersistSelectedData(checkState);\n      this.clearSelection();\n    }\n\n    this.chkAllCollec = [];\n\n    if (!isNullOrUndefined(editForm)) {\n      var editChkBox = editForm.querySelector('.e-edit-checkselect');\n\n      if (!isNullOrUndefined(editChkBox)) {\n        removeAddCboxClasses(editChkBox.nextElementSibling, checkState);\n      }\n    }\n  };\n\n  Selection.prototype.checkSelectAll = function (checkBox) {\n    var _this = this;\n\n    var stateStr = this.getCheckAllStatus(checkBox);\n    var state = stateStr === 'Check';\n    this.isHeaderCheckboxClicked = true;\n\n    if (stateStr === 'Intermediate') {\n      state = this.getCurrentBatchRecordChanges().some(function (data) {\n        return data[_this.primaryKey] in _this.selectedRowState;\n      });\n    }\n\n    if (this.parent.isPersistSelection && this.parent.allowPaging) {\n      this.totalRecordsCount = this.parent.pageSettings.totalRecordsCount;\n    }\n\n    this.checkSelectAllAction(!state);\n\n    if (isBlazor() && this.parent.isServerRendered && this.parent.enableVirtualization) {\n      var interopAdaptor = 'interopAdaptor';\n      var invokeMethodAsync = 'invokeMethodAsync';\n      this.parent[interopAdaptor][invokeMethodAsync]('MaintainSelection', !state, 'checkbox', null);\n      this.checkBoxState = !state;\n\n      if (!state) {\n        var values = 'values';\n        var vgenerator = 'vgenerator';\n        var rowCache = this.parent.contentModule[vgenerator].rowCache;\n        Object[values](rowCache).forEach(function (x) {\n          return x.isSelected = true;\n        });\n\n        for (var i = 0; i < Object.keys(rowCache).length; i++) {\n          if (this.parent.selectionModule.selectedRowIndexes.indexOf(Number(Object.keys(rowCache)[i])) === -1) {\n            this.parent.selectionModule.selectedRowIndexes.push(Number(Object.keys(rowCache)[i]));\n          }\n        }\n      }\n    }\n\n    this.target = null;\n\n    if (this.getCurrentBatchRecordChanges().length > 0) {\n      this.setCheckAllState();\n    }\n\n    this.triggerChkChangeEvent(checkBox, !state);\n  };\n\n  Selection.prototype.getCheckAllStatus = function (ele) {\n    var classes = ele ? ele.nextElementSibling.classList : this.getCheckAllBox().nextElementSibling.classList;\n    var status;\n\n    if (classes.contains('e-check')) {\n      status = 'Check';\n    } else if (classes.contains('e-uncheck')) {\n      status = 'Uncheck';\n    } else if (classes.contains('e-stop')) {\n      status = 'Intermediate';\n    } else {\n      status = 'None';\n    }\n\n    return status;\n  };\n\n  Selection.prototype.checkSelect = function (checkBox) {\n    var target = closest(this.checkedTarget, '.e-rowcell');\n    var checkObj = checkBox;\n    var gObj = this.parent;\n    this.isMultiCtrlRequest = true;\n    var rIndex = 0;\n    this.isHeaderCheckboxClicked = false;\n\n    if (isGroupAdaptive(gObj)) {\n      var uid = target.parentElement.getAttribute('data-uid');\n      rIndex = gObj.getRows().map(function (m) {\n        return m.getAttribute('data-uid');\n      }).indexOf(uid);\n    } else {\n      rIndex = parseInt(target.parentElement.getAttribute('aria-rowindex'), 10);\n    }\n\n    if (this.parent.isPersistSelection && this.parent.element.querySelectorAll('.e-addedrow').length > 0 && this.parent.editSettings.newRowPosition === 'Top') {\n      ++rIndex;\n    }\n\n    this.rowCellSelectionHandler(rIndex, parseInt(target.getAttribute('aria-colindex'), 10));\n    this.moveIntoUncheckCollection(closest(target, '.e-row'));\n    this.setCheckAllState();\n    this.isMultiCtrlRequest = false;\n    this.triggerChkChangeEvent(checkBox, checkBox.nextElementSibling.classList.contains('e-check'));\n  };\n\n  Selection.prototype.moveIntoUncheckCollection = function (row) {\n    if (this.parent.checkAllRows === 'Check' || this.parent.checkAllRows === 'Uncheck') {\n      var rowObj = this.getRowObj(row);\n      var pKey = rowObj && rowObj.data ? rowObj.data[this.primaryKey] : null;\n\n      if (!pKey) {\n        return;\n      }\n\n      if (this.chkAllCollec.indexOf(pKey) < 0) {\n        this.chkAllCollec.push(pKey);\n      } else {\n        this.chkAllCollec.splice(this.chkAllCollec.indexOf(pKey), 1);\n      }\n    }\n  };\n\n  Selection.prototype.triggerChkChangeEvent = function (checkBox, checkState) {\n    this.parent.trigger(events.checkBoxChange, {\n      checked: checkState,\n      selectedRowIndexes: this.parent.getSelectedRowIndexes(),\n      target: checkBox\n    });\n\n    if (!this.parent.isEdit) {\n      this.checkedTarget = null;\n    }\n  };\n\n  Selection.prototype.updateSelectedRowIndex = function (index) {\n    if (this.parent.isCheckBoxSelection && (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling) && !this.parent.getDataModule().isRemote() && !(isBlazor() && this.parent.isServerRendered)) {\n      if (this.parent.checkAllRows === 'Check') {\n        this.selectedRowIndexes = [];\n        var dataLength = this.getData().length;\n\n        for (var data = 0; data < dataLength; data++) {\n          this.selectedRowIndexes.push(data);\n        }\n      } else if (this.parent.checkAllRows === 'Uncheck') {\n        this.selectedRowIndexes = [];\n      } else {\n        if (index && this.parent.getRowByIndex(index).getAttribute('aria-selected') === 'false') {\n          var selectedVal = this.selectedRowIndexes.indexOf(index);\n          this.selectedRowIndexes.splice(selectedVal, 1);\n        }\n      }\n    }\n  };\n\n  ;\n\n  Selection.prototype.setCheckAllState = function (index, isInteraction) {\n    if (this.parent.isCheckBoxSelection || this.parent.selectionSettings.checkboxMode === 'ResetOnRowClick') {\n      var checkToSelectAll = void 0;\n      var isServerRenderedVirtualization = isBlazor() && this.parent.isServerRendered && this.parent.enableVirtualization;\n\n      if (isServerRenderedVirtualization) {\n        var values = 'values';\n        var vgenerator = 'vgenerator';\n        checkToSelectAll = !Object[values](this.parent.contentModule[vgenerator].rowCache).filter(function (x) {\n          return x.isSelected === undefined || x.isSelected === false;\n        }).length && Object[values](this.parent.contentModule[vgenerator].rowCache).filter(function (x) {\n          return x.isSelected;\n        }).length === this.selectedRowIndexes.length;\n      }\n\n      var checkedLen = Object.keys(this.selectedRowState).length;\n\n      if (!this.parent.isPersistSelection && !isServerRenderedVirtualization) {\n        checkedLen = this.selectedRowIndexes.length;\n        this.totalRecordsCount = this.getCurrentBatchRecordChanges().length;\n      }\n\n      if (this.getCheckAllBox()) {\n        var spanEle = this.getCheckAllBox().nextElementSibling;\n        removeClass([spanEle], ['e-check', 'e-stop', 'e-uncheck']);\n\n        if (checkToSelectAll || checkedLen === this.totalRecordsCount && this.totalRecordsCount || (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling) && !this.parent.allowPaging && !this.parent.getDataModule().isRemote() && !(isBlazor() && this.parent.isServerRendered) && checkedLen === this.getData().length) {\n          addClass([spanEle], ['e-check']);\n\n          if (isInteraction) {\n            this.getRenderer().setSelection(null, true, true);\n          }\n\n          this.parent.checkAllRows = 'Check';\n        } else if (isServerRenderedVirtualization && !this.selectedRowIndexes.length || checkedLen === 0 && !isServerRenderedVirtualization || this.getCurrentBatchRecordChanges().length === 0) {\n          addClass([spanEle], ['e-uncheck']);\n\n          if (isInteraction) {\n            this.getRenderer().setSelection(null, false, true);\n          }\n\n          this.parent.checkAllRows = 'Uncheck';\n\n          if (checkedLen === 0 && this.getCurrentBatchRecordChanges().length === 0) {\n            addClass([spanEle.parentElement], ['e-checkbox-disabled']);\n          } else {\n            removeClass([spanEle.parentElement], ['e-checkbox-disabled']);\n          }\n        } else {\n          addClass([spanEle], ['e-stop']);\n          this.parent.checkAllRows = 'Intermediate';\n        }\n\n        if ((this.parent.enableVirtualization || this.parent.enableInfiniteScrolling) && !this.parent.allowPaging && !this.parent.getDataModule().isRemote()) {\n          this.updateSelectedRowIndex(index);\n        }\n      }\n    }\n  };\n\n  Selection.prototype.keyDownHandler = function (e) {\n    // Below are keyCode for command key in MAC OS. Safari/Chrome(91-Left command, 93-Right Command), Opera(17), FireFox(224)\n    if ((Browser.info.name === 'chrome' || Browser.info.name === 'safari') && (e.keyCode === 91 || e.keyCode === 93) || Browser.info.name === 'opera' && e.keyCode === 17 || Browser.info.name === 'mozilla' && e.keyCode === 224) {\n      this.cmdKeyPressed = true;\n    }\n  };\n\n  Selection.prototype.keyUpHandler = function (e) {\n    if ((Browser.info.name === 'chrome' || Browser.info.name === 'safari') && (e.keyCode === 91 || e.keyCode === 93) || Browser.info.name === 'opera' && e.keyCode === 17 || Browser.info.name === 'mozilla' && e.keyCode === 224) {\n      this.cmdKeyPressed = false;\n    }\n  };\n\n  Selection.prototype.clickHandler = function (e) {\n    var target = e.target;\n    this.actualTarget = target;\n\n    if (parentsUntil(target, 'e-row') || parentsUntil(target, 'e-headerchkcelldiv')) {\n      this.isInteracted = true;\n    }\n\n    this.isMultiCtrlRequest = e.ctrlKey || this.enableSelectMultiTouch || this.isMacOS && this.cmdKeyPressed;\n    this.isMultiShiftRequest = e.shiftKey;\n    this.popUpClickHandler(e);\n    var chkSelect = false;\n    this.preventFocus = true;\n    var checkBox;\n    var checkWrap = parentsUntil(target, 'e-checkbox-wrapper');\n    this.checkSelectAllClicked = checkWrap && checkWrap.querySelectorAll('.e-checkselectall') ? true : false;\n\n    if (checkWrap && checkWrap.querySelectorAll('.e-checkselect,.e-checkselectall').length > 0) {\n      checkBox = checkWrap.querySelector('input[type=\"checkbox\"]');\n      chkSelect = true;\n    }\n\n    this.drawBorders();\n    this.updateAutoFillPosition();\n    target = parentsUntil(target, 'e-rowcell');\n\n    if (target && target.parentElement.classList.contains('e-row') && !this.parent.selectionSettings.checkboxOnly || chkSelect) {\n      if (this.parent.isCheckBoxSelection) {\n        this.isMultiCtrlRequest = true;\n      }\n\n      this.target = target;\n\n      if (!isNullOrUndefined(checkBox)) {\n        this.checkedTarget = checkBox;\n\n        if (checkBox.classList.contains('e-checkselectall')) {\n          this.checkSelectAll(checkBox);\n        } else {\n          this.checkSelect(checkBox);\n        }\n      } else {\n        var gObj = this.parent;\n        var rIndex = 0;\n\n        if (isGroupAdaptive(gObj)) {\n          var uid = target.parentElement.getAttribute('data-uid');\n          rIndex = gObj.getRows().map(function (m) {\n            return m.getAttribute('data-uid');\n          }).indexOf(uid);\n        } else {\n          rIndex = parseInt(target.parentElement.getAttribute('aria-rowindex'), 10);\n        }\n\n        if (this.parent.isPersistSelection && this.parent.element.querySelectorAll('.e-addedrow').length > 0) {\n          ++rIndex;\n        }\n\n        if (!this.mUPTarget || !this.mUPTarget.isEqualNode(target)) {\n          this.rowCellSelectionHandler(rIndex, parseInt(target.getAttribute('aria-colindex'), 10));\n        }\n\n        this.parent.hoverFrozenRows(e);\n\n        if (this.parent.isCheckBoxSelection) {\n          this.moveIntoUncheckCollection(closest(target, '.e-row'));\n          this.setCheckAllState();\n        }\n      }\n\n      if (!this.parent.isCheckBoxSelection && Browser.isDevice && !this.isSingleSel()) {\n        this.showPopup(e);\n      }\n    }\n\n    this.isMultiCtrlRequest = false;\n    this.isMultiShiftRequest = false;\n\n    if (isNullOrUndefined(closest(e.target, '.e-unboundcell'))) {\n      this.preventFocus = false;\n    }\n  };\n\n  Selection.prototype.popUpClickHandler = function (e) {\n    var target = e.target;\n\n    if (closest(target, '.e-headercell') || e.target.classList.contains('e-rowcell') || closest(target, '.e-gridpopup')) {\n      if (target.classList.contains('e-rowselect')) {\n        if (!target.classList.contains('e-spanclicked')) {\n          target.classList.add('e-spanclicked');\n          this.enableSelectMultiTouch = true;\n        } else {\n          target.classList.remove('e-spanclicked');\n          this.enableSelectMultiTouch = false;\n          this.parent.element.querySelector('.e-gridpopup').style.display = 'none';\n        }\n      }\n    } else {\n      this.parent.element.querySelector('.e-gridpopup').style.display = 'none';\n    }\n  };\n\n  Selection.prototype.showPopup = function (e) {\n    if (!this.selectionSettings.enableSimpleMultiRowSelection) {\n      setCssInGridPopUp(this.parent.element.querySelector('.e-gridpopup'), e, 'e-rowselect e-icons e-icon-rowselect' + (!this.isSingleSel() && (this.selectedRecords.length > (this.parent.getFrozenColumns() ? 2 : 1) || this.selectedRowCellIndexes.length > 1) ? ' e-spanclicked' : ''));\n    }\n  };\n\n  Selection.prototype.rowCellSelectionHandler = function (rowIndex, cellIndex) {\n    var gObj = this.parent;\n\n    if (!this.isMultiCtrlRequest && !this.isMultiShiftRequest || this.isSingleSel()) {\n      if (!this.isDragged) {\n        this.selectRow(rowIndex, this.selectionSettings.enableToggle);\n      }\n\n      this.selectCell({\n        rowIndex: rowIndex,\n        cellIndex: cellIndex\n      }, this.selectionSettings.enableToggle);\n\n      if (this.selectedRowCellIndexes.length) {\n        this.updateAutoFillPosition();\n      }\n\n      this.drawBorders();\n    } else if (this.isMultiShiftRequest) {\n      if (this.parent.isCheckBoxSelection || !this.parent.isCheckBoxSelection && !closest(this.target, '.e-rowcell').classList.contains('e-gridchkbox')) {\n        this.selectRowsByRange(isUndefined(this.prevRowIndex) ? rowIndex : this.prevRowIndex, rowIndex);\n      } else {\n        this.addRowsToSelection([rowIndex]);\n      }\n\n      this.selectCellsByRange(isUndefined(this.prevCIdxs) ? {\n        rowIndex: rowIndex,\n        cellIndex: cellIndex\n      } : this.prevCIdxs, {\n        rowIndex: rowIndex,\n        cellIndex: cellIndex\n      });\n      this.updateAutoFillPosition();\n      this.drawBorders();\n    } else {\n      this.addRowsToSelection([rowIndex]);\n\n      if (isBlazor() && this.parent.enableVirtualization && this.parent.isServerRendered) {\n        var rowIndexes = this.parent.getSelectedRowIndexes();\n        var interopAdaptor = 'interopAdaptor';\n        var invokeMethodAsync = 'invokeMethodAsync';\n        this.parent[interopAdaptor][invokeMethodAsync]('MaintainSelection', true, 'normal', rowIndexes);\n      }\n\n      this.addCellsToSelection([{\n        rowIndex: rowIndex,\n        cellIndex: cellIndex\n      }]);\n      this.showHideBorders('none');\n    }\n\n    this.isDragged = false;\n  };\n\n  Selection.prototype.onCellFocused = function (e) {\n    if (this.parent.frozenRows && e.container.isHeader && e.byKey) {\n      if (e.keyArgs.action === 'upArrow') {\n        if (this.parent.allowFiltering) {\n          e.isJump = e.element.tagName === 'INPUT' ? true : false;\n        } else {\n          e.isJump = e.element.tagName === 'TH' ? true : false;\n        }\n      } else {\n        if (e.keyArgs.action === 'downArrow') {\n          var rIdx = Number(e.element.parentElement.getAttribute('aria-rowindex'));\n          e.isJump = rIdx === 0 ? true : false;\n        } else {\n          if (e.keyArgs.action === 'ctrlHome') {\n            e.isJump = true;\n          }\n        }\n      }\n    }\n\n    var clear = this.parent.getFrozenColumns() ? (e.container.isHeader && e.element.tagName !== 'TD' && e.isJump || (e.container.isContent || e.element.tagName === 'TD') && !(e.container.isSelectable || e.element.tagName === 'TD')) && !(e.byKey && e.keyArgs.action === 'space') : (e.container.isHeader && e.isJump || e.container.isContent && !e.container.isSelectable) && !(e.byKey && e.keyArgs.action === 'space');\n    var headerAction = e.container.isHeader && e.element.tagName !== 'TD' && !closest(e.element, '.e-rowcell') && !(e.byKey && e.keyArgs.action === 'space');\n\n    if (!e.byKey || clear) {\n      if (clear && !this.parent.isCheckBoxSelection) {\n        this.clearSelection();\n      }\n\n      return;\n    }\n\n    var _a = e.container.isContent ? e.container.indexes : e.indexes,\n        rowIndex = _a[0],\n        cellIndex = _a[1];\n\n    var prev = this.focus.getPrevIndexes();\n\n    if (this.parent.frozenRows) {\n      if (e.container.isHeader && (e.element.tagName === 'TD' || closest(e.element, '.e-rowcell'))) {\n        var thLen = this.parent.getHeaderTable().querySelector('thead').childElementCount;\n        rowIndex -= thLen;\n        prev.rowIndex = !isNullOrUndefined(prev.rowIndex) ? prev.rowIndex - thLen : null;\n      } else {\n        rowIndex += this.parent.frozenRows;\n        prev.rowIndex = prev.rowIndex === 0 || !isNullOrUndefined(prev.rowIndex) ? prev.rowIndex + this.parent.frozenRows : null;\n      }\n    }\n\n    if (this.parent.getFrozenColumns()) {\n      var cIdx = Number(e.element.getAttribute('aria-colindex'));\n      var selectedIndexes = this.parent.getSelectedRowCellIndexes();\n\n      if (selectedIndexes.length && prev.cellIndex === 0) {\n        prev.cellIndex = selectedIndexes[selectedIndexes.length - 1].cellIndexes[0];\n      }\n\n      prev.cellIndex = !isNullOrUndefined(prev.cellIndex) ? prev.cellIndex === cellIndex ? cIdx : cIdx - 1 : null;\n      cellIndex = cIdx;\n    }\n\n    if (headerAction || ['ctrlPlusA', 'escape'].indexOf(e.keyArgs.action) === -1 && e.keyArgs.action !== 'space' && rowIndex === prev.rowIndex && cellIndex === prev.cellIndex) {\n      return;\n    }\n\n    this.preventFocus = true;\n\n    switch (e.keyArgs.action) {\n      case 'downArrow':\n      case 'upArrow':\n      case 'enter':\n      case 'shiftEnter':\n        this.target = e.element;\n        this.applyDownUpKey(rowIndex, cellIndex);\n        break;\n\n      case 'rightArrow':\n      case 'leftArrow':\n        this.applyRightLeftKey(rowIndex, cellIndex);\n        break;\n\n      case 'shiftDown':\n      case 'shiftUp':\n        this.shiftDownKey(rowIndex, cellIndex);\n        break;\n\n      case 'shiftLeft':\n      case 'shiftRight':\n        this.applyShiftLeftRightKey(rowIndex, cellIndex);\n        break;\n\n      case 'home':\n      case 'end':\n        cellIndex = e.keyArgs.action === 'end' ? this.getLastColIndex(rowIndex) : 0;\n        this.applyHomeEndKey(rowIndex, cellIndex);\n        break;\n\n      case 'ctrlHome':\n      case 'ctrlEnd':\n        this.applyCtrlHomeEndKey(rowIndex, cellIndex);\n        break;\n\n      case 'escape':\n        this.clearSelection();\n        break;\n\n      case 'ctrlPlusA':\n        this.ctrlPlusA();\n        break;\n\n      case 'space':\n        this.applySpaceSelection(e.element);\n        break;\n\n      case 'tab':\n        if (this.parent.editSettings.allowNextRowEdit) {\n          this.selectRow(rowIndex);\n        }\n\n        break;\n    }\n\n    this.preventFocus = false;\n    this.positionBorders();\n    this.updateAutoFillPosition();\n  };\n  /**\n   * Apply ctrl + A key selection\n   * @return {void}\n   * @hidden\n   */\n\n\n  Selection.prototype.ctrlPlusA = function () {\n    if (this.isRowType() && !this.isSingleSel()) {\n      this.selectRowsByRange(0, this.getCurrentBatchRecordChanges().length - 1);\n    }\n\n    if (this.isCellType() && !this.isSingleSel()) {\n      this.selectCellsByRange({\n        rowIndex: 0,\n        cellIndex: 0\n      }, {\n        rowIndex: this.parent.getRows().length - 1,\n        cellIndex: this.parent.getColumns().length - 1\n      });\n    }\n  };\n\n  Selection.prototype.applySpaceSelection = function (target) {\n    if (target.classList.contains('e-checkselectall')) {\n      this.checkedTarget = target;\n      this.checkSelectAll(this.checkedTarget);\n    } else {\n      if (target.classList.contains('e-checkselect')) {\n        this.checkedTarget = target;\n        this.checkSelect(this.checkedTarget);\n      }\n    }\n  };\n\n  Selection.prototype.applyDownUpKey = function (rowIndex, cellIndex) {\n    var gObj = this.parent;\n\n    if (this.parent.isCheckBoxSelection && this.parent.checkAllRows === 'Check' && !this.selectionSettings.persistSelection) {\n      this.checkSelectAllAction(false);\n      this.checkedTarget = null;\n    }\n\n    if (this.isRowType()) {\n      if (this.parent.frozenRows) {\n        this.selectRow(rowIndex, true);\n        this.applyUpDown(gObj.selectedRowIndex);\n      } else {\n        this.selectRow(rowIndex, true);\n        this.applyUpDown(gObj.selectedRowIndex);\n      }\n    }\n\n    if (this.isCellType()) {\n      this.selectCell({\n        rowIndex: rowIndex,\n        cellIndex: cellIndex\n      }, true);\n    }\n  };\n\n  Selection.prototype.applyUpDown = function (rowIndex) {\n    if (rowIndex < 0) {\n      return;\n    }\n\n    if (!this.target) {\n      this.target = this.parent.getRows()[0].children[this.parent.groupSettings.columns.length || 0];\n    }\n\n    var cIndex = parseInt(this.target.getAttribute('aria-colindex'), 10);\n    var frzCols = this.parent.getFrozenColumns();\n\n    if (frzCols) {\n      if (cIndex >= frzCols) {\n        this.target = this.contentRenderer.getMovableRowByIndex(rowIndex).querySelectorAll('.e-rowcell')[cIndex - frzCols];\n      } else {\n        this.target = this.contentRenderer.getRowByIndex(rowIndex).querySelectorAll('.e-rowcell')[cIndex];\n      }\n    } else {\n      this.target = this.contentRenderer.getRowByIndex(rowIndex).querySelectorAll('.e-rowcell')[cIndex];\n    }\n\n    this.addAttribute(this.target);\n  };\n\n  Selection.prototype.applyRightLeftKey = function (rowIndex, cellIndex) {\n    var gObj = this.parent;\n\n    if (this.isCellType()) {\n      this.selectCell({\n        rowIndex: rowIndex,\n        cellIndex: cellIndex\n      }, true);\n      this.addAttribute(this.target);\n    }\n  };\n\n  Selection.prototype.applyHomeEndKey = function (rowIndex, cellIndex) {\n    if (this.isCellType()) {\n      this.selectCell({\n        rowIndex: rowIndex,\n        cellIndex: cellIndex\n      }, true);\n    } else {\n      this.addAttribute(this.parent.getCellFromIndex(rowIndex, cellIndex));\n    }\n  };\n  /**\n   * Apply shift+down key selection\n   * @return {void}\n   * @hidden\n   */\n\n\n  Selection.prototype.shiftDownKey = function (rowIndex, cellIndex) {\n    var gObj = this.parent;\n    this.isMultiShiftRequest = true;\n\n    if (this.isRowType() && !this.isSingleSel()) {\n      if (!isUndefined(this.prevRowIndex)) {\n        this.selectRowsByRange(this.prevRowIndex, rowIndex);\n        this.applyUpDown(rowIndex);\n      } else {\n        this.selectRow(0, true);\n      }\n    }\n\n    if (this.isCellType() && !this.isSingleSel()) {\n      this.selectCellsByRange(this.prevCIdxs || {\n        rowIndex: 0,\n        cellIndex: 0\n      }, {\n        rowIndex: rowIndex,\n        cellIndex: cellIndex\n      });\n    }\n\n    this.isMultiShiftRequest = false;\n  };\n\n  Selection.prototype.applyShiftLeftRightKey = function (rowIndex, cellIndex) {\n    var gObj = this.parent;\n    this.isMultiShiftRequest = true;\n    this.selectCellsByRange(this.prevCIdxs, {\n      rowIndex: rowIndex,\n      cellIndex: cellIndex\n    });\n    this.isMultiShiftRequest = false;\n  };\n\n  Selection.prototype.applyCtrlHomeEndKey = function (rowIndex, cellIndex) {\n    if (this.isRowType()) {\n      this.selectRow(rowIndex, true);\n      this.addAttribute(this.parent.getCellFromIndex(rowIndex, cellIndex));\n    }\n\n    if (this.isCellType()) {\n      this.selectCell({\n        rowIndex: rowIndex,\n        cellIndex: cellIndex\n      }, true);\n    }\n  };\n\n  Selection.prototype.addRemoveClassesForRow = function (row, isAdd, clearAll) {\n    var args = [];\n\n    for (var _i = 3; _i < arguments.length; _i++) {\n      args[_i - 3] = arguments[_i];\n    }\n\n    if (row) {\n      var cells = [].slice.call(row.querySelectorAll('.e-rowcell'));\n      var detailIndentCell = row.querySelector('.e-detailrowcollapse') || row.querySelector('.e-detailrowexpand');\n      var dragdropIndentCell = row.querySelector('.e-rowdragdrop');\n\n      if (detailIndentCell) {\n        cells.push(detailIndentCell);\n      }\n\n      if (dragdropIndentCell) {\n        cells.push(dragdropIndentCell);\n      }\n\n      addRemoveActiveClasses.apply(void 0, [cells, isAdd].concat(args));\n    }\n\n    this.getRenderer().setSelection(row ? row.getAttribute('data-uid') : null, isAdd, clearAll);\n  };\n\n  Selection.prototype.isRowType = function () {\n    return this.selectionSettings.mode === 'Row' || this.selectionSettings.mode === 'Both';\n  };\n\n  Selection.prototype.isCellType = function () {\n    return this.selectionSettings.mode === 'Cell' || this.selectionSettings.mode === 'Both';\n  };\n\n  Selection.prototype.isSingleSel = function () {\n    return this.selectionSettings.type === 'Single';\n  };\n\n  Selection.prototype.getRenderer = function () {\n    if (isNullOrUndefined(this.contentRenderer)) {\n      this.contentRenderer = this.factory.getRenderer(RenderType.Content);\n    }\n\n    return this.contentRenderer;\n  };\n  /**\n   * Gets the collection of selected records.\n   * @return {Object[]}\n   */\n\n\n  Selection.prototype.getSelectedRecords = function () {\n    var selectedData = [];\n\n    if (!this.selectionSettings.persistSelection) {\n      selectedData = this.parent.getRowsObject().filter(function (row) {\n        return row.isSelected;\n      }).map(function (m) {\n        return m.data;\n      });\n    } else {\n      selectedData = this.persistSelectedData;\n    }\n\n    return selectedData;\n  };\n\n  Selection.prototype.addEventListener_checkbox = function () {\n    var _this = this;\n\n    this.parent.on(events.dataReady, this.dataReady, this);\n    this.onDataBoundFunction = this.onDataBound.bind(this);\n    this.parent.addEventListener(events.dataBound, this.onDataBoundFunction);\n    this.parent.on(events.contentReady, this.checkBoxSelectionChanged, this);\n    this.parent.on(events.onEmpty, this.setCheckAllForEmptyGrid, this);\n    this.actionCompleteFunc = this.actionCompleteHandler.bind(this);\n    this.parent.addEventListener(events.actionComplete, this.actionCompleteFunc);\n    this.parent.on(events.click, this.clickHandler, this);\n\n    this.resizeEndFn = function () {\n      _this.updateAutoFillPosition();\n\n      _this.drawBorders();\n    };\n\n    this.resizeEndFn.bind(this);\n    this.parent.addEventListener(events.resizeStop, this.resizeEndFn);\n  };\n\n  Selection.prototype.removeEventListener_checkbox = function () {\n    this.parent.off(events.dataReady, this.dataReady);\n    this.parent.removeEventListener(events.dataBound, this.onDataBoundFunction);\n    this.parent.removeEventListener(events.actionComplete, this.actionCompleteFunc);\n    this.parent.off(events.onEmpty, this.setCheckAllForEmptyGrid);\n    this.parent.off(events.click, this.clickHandler);\n  };\n\n  Selection.prototype.setCheckAllForEmptyGrid = function () {\n    var checkAllBox = this.getCheckAllBox();\n\n    if (checkAllBox) {\n      this.parent.isCheckBoxSelection = true;\n      var spanEle = checkAllBox.nextElementSibling;\n      removeClass([spanEle], ['e-check', 'e-stop', 'e-uncheck']);\n    }\n  };\n\n  Selection.prototype.dataReady = function (e) {\n    this.isHeaderCheckboxClicked = false;\n    var isInfinitecroll = this.parent.enableInfiniteScrolling && e.requestType === 'infiniteScroll';\n\n    if (e.requestType !== 'virtualscroll' && !this.parent.isPersistSelection && !isInfinitecroll) {\n      this.disableUI = true;\n      this.clearSelection();\n      this.setCheckAllState();\n      this.disableUI = false;\n    }\n  };\n\n  Selection.prototype.actionCompleteHandler = function (e) {\n    if (e.requestType === 'save' && this.parent.isPersistSelection) {\n      this.refreshPersistSelection();\n    }\n  };\n\n  Selection.prototype.selectRowIndex = function (index) {\n    this.parent.isSelectedRowIndexUpdating = true;\n    this.parent.selectedRowIndex = index;\n  };\n\n  Selection.prototype.disableInteracted = function () {\n    this.isInteracted = false;\n  };\n\n  Selection.prototype.activeTarget = function () {\n    this.actualTarget = this.isInteracted ? this.actualTarget : null;\n  };\n\n  return Selection;\n}();\n\nexport { Selection };","map":null,"metadata":{},"sourceType":"module"}