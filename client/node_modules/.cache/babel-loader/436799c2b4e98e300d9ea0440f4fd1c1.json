{"ast":null,"code":"/**\n * public Enum for `PdfFontStyle`.\n * @private\n */\nexport var PdfFontStyle;\n\n(function (PdfFontStyle) {\n  /**\n   * Specifies the type of `Regular`.\n   * @private\n   */\n  PdfFontStyle[PdfFontStyle[\"Regular\"] = 0] = \"Regular\";\n  /**\n   * Specifies the type of `Bold`.\n   * @private\n   */\n\n  PdfFontStyle[PdfFontStyle[\"Bold\"] = 1] = \"Bold\";\n  /**\n   * Specifies the type of `Italic`.\n   * @private\n   */\n\n  PdfFontStyle[PdfFontStyle[\"Italic\"] = 2] = \"Italic\";\n  /**\n   * Specifies the type of `Underline`.\n   * @private\n   */\n\n  PdfFontStyle[PdfFontStyle[\"Underline\"] = 4] = \"Underline\";\n  /**\n   * Specifies the type of `Strikeout`.\n   * @private\n   */\n\n  PdfFontStyle[PdfFontStyle[\"Strikeout\"] = 8] = \"Strikeout\";\n})(PdfFontStyle || (PdfFontStyle = {}));\n/**\n * Specifies the font family from the standard font.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a new page to the document\n * let page1 : PdfPage = document.pages.add();\n * // create new standard font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * // create black brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n * // draw the text\n * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n * // save the document\n * document.save('output.pdf');\n * ```\n */\n\n\nexport var PdfFontFamily;\n\n(function (PdfFontFamily) {\n  /**\n   * Specifies the `Helvetica` font.\n   */\n  PdfFontFamily[PdfFontFamily[\"Helvetica\"] = 0] = \"Helvetica\";\n  /**\n   * Specifies the `Courier` font.\n   */\n\n  PdfFontFamily[PdfFontFamily[\"Courier\"] = 1] = \"Courier\";\n  /**\n   * Specifies the `TimesRoman` font.\n   */\n\n  PdfFontFamily[PdfFontFamily[\"TimesRoman\"] = 2] = \"TimesRoman\";\n  /**\n   * Specifies the `Symbol` font.\n   */\n\n  PdfFontFamily[PdfFontFamily[\"Symbol\"] = 3] = \"Symbol\";\n  /**\n   * Specifies the `ZapfDingbats` font.\n   */\n\n  PdfFontFamily[PdfFontFamily[\"ZapfDingbats\"] = 4] = \"ZapfDingbats\";\n})(PdfFontFamily || (PdfFontFamily = {}));\n/**\n * public Enum for `PdfFontType`.\n * @private\n */\n\n\nexport var PdfFontType;\n\n(function (PdfFontType) {\n  /**\n   * Specifies the type of `Standard`.\n   * @private\n   */\n  PdfFontType[PdfFontType[\"Standard\"] = 0] = \"Standard\";\n  /**\n   * Specifies the type of `TrueType`.\n   * @private\n   */\n\n  PdfFontType[PdfFontType[\"TrueType\"] = 1] = \"TrueType\";\n  /**\n   * Specifies the type of `TrueTypeEmbedded`.\n   * @private\n   */\n\n  PdfFontType[PdfFontType[\"TrueTypeEmbedded\"] = 2] = \"TrueTypeEmbedded\";\n})(PdfFontType || (PdfFontType = {}));\n/**\n * public Enum for `PdfWordWrapType`.\n * @private\n */\n\n\nexport var PdfWordWrapType;\n\n(function (PdfWordWrapType) {\n  /**\n   * Specifies the type of `None`.\n   * @private\n   */\n  PdfWordWrapType[PdfWordWrapType[\"None\"] = 0] = \"None\";\n  /**\n   * Specifies the type of `Word`.\n   * @private\n   */\n\n  PdfWordWrapType[PdfWordWrapType[\"Word\"] = 1] = \"Word\";\n  /**\n   * Specifies the type of `WordOnly`.\n   * @private\n   */\n\n  PdfWordWrapType[PdfWordWrapType[\"WordOnly\"] = 2] = \"WordOnly\";\n  /**\n   * Specifies the type of `Character`.\n   * @private\n   */\n\n  PdfWordWrapType[PdfWordWrapType[\"Character\"] = 3] = \"Character\";\n})(PdfWordWrapType || (PdfWordWrapType = {}));\n/**\n * public Enum for `PdfSubSuperScript`.\n * @private\n */\n\n\nexport var PdfSubSuperScript;\n\n(function (PdfSubSuperScript) {\n  /**\n   * Specifies the type of `None`.\n   * @private\n   */\n  PdfSubSuperScript[PdfSubSuperScript[\"None\"] = 0] = \"None\";\n  /**\n   * Specifies the type of `SuperScript`.\n   * @private\n   */\n\n  PdfSubSuperScript[PdfSubSuperScript[\"SuperScript\"] = 1] = \"SuperScript\";\n  /**\n   * Specifies the type of `SubScript`.\n   * @private\n   */\n\n  PdfSubSuperScript[PdfSubSuperScript[\"SubScript\"] = 2] = \"SubScript\";\n})(PdfSubSuperScript || (PdfSubSuperScript = {}));\n/**\n * public Enum for `FontEncoding`.\n * @private\n */\n\n\nexport var FontEncoding;\n\n(function (FontEncoding) {\n  /**\n   * Specifies the type of `Unknown`.\n   * @private\n   */\n  FontEncoding[FontEncoding[\"Unknown\"] = 0] = \"Unknown\";\n  /**\n   * Specifies the type of `StandardEncoding`.\n   * @private\n   */\n\n  FontEncoding[FontEncoding[\"StandardEncoding\"] = 1] = \"StandardEncoding\";\n  /**\n   * Specifies the type of `MacRomanEncoding`.\n   * @private\n   */\n\n  FontEncoding[FontEncoding[\"MacRomanEncoding\"] = 2] = \"MacRomanEncoding\";\n  /**\n   * Specifies the type of `MacExpertEncoding`.\n   * @private\n   */\n\n  FontEncoding[FontEncoding[\"MacExpertEncoding\"] = 3] = \"MacExpertEncoding\";\n  /**\n   * Specifies the type of `WinAnsiEncoding`.\n   * @private\n   */\n\n  FontEncoding[FontEncoding[\"WinAnsiEncoding\"] = 4] = \"WinAnsiEncoding\";\n  /**\n   * Specifies the type of `PdfDocEncoding`.\n   * @private\n   */\n\n  FontEncoding[FontEncoding[\"PdfDocEncoding\"] = 5] = \"PdfDocEncoding\";\n  /**\n   * Specifies the type of `IdentityH`.\n   * @private\n   */\n\n  FontEncoding[FontEncoding[\"IdentityH\"] = 6] = \"IdentityH\";\n})(FontEncoding || (FontEncoding = {}));\n/**\n * public Enum for `TtfCmapFormat`.\n * @private\n */\n\n\nexport var TtfCmapFormat;\n\n(function (TtfCmapFormat) {\n  /**\n   * This is the Apple standard character to glyph index mapping table.\n   * @private\n   */\n  TtfCmapFormat[TtfCmapFormat[\"Apple\"] = 0] = \"Apple\";\n  /**\n   * This is the Microsoft standard character to glyph index mapping table.\n   * @private\n   */\n\n  TtfCmapFormat[TtfCmapFormat[\"Microsoft\"] = 4] = \"Microsoft\";\n  /**\n   * Format 6: Trimmed table mapping.\n   * @private\n   */\n\n  TtfCmapFormat[TtfCmapFormat[\"Trimmed\"] = 6] = \"Trimmed\";\n})(TtfCmapFormat || (TtfCmapFormat = {}));\n/**\n * Enumerator that implements CMAP encodings.\n * @private\n */\n\n\nexport var TtfCmapEncoding;\n\n(function (TtfCmapEncoding) {\n  /**\n   * Unknown encoding.\n   * @private\n   */\n  TtfCmapEncoding[TtfCmapEncoding[\"Unknown\"] = 0] = \"Unknown\";\n  /**\n   * When building a symbol font for Windows.\n   * @private\n   */\n\n  TtfCmapEncoding[TtfCmapEncoding[\"Symbol\"] = 1] = \"Symbol\";\n  /**\n   * When building a Unicode font for Windows.\n   * @private\n   */\n\n  TtfCmapEncoding[TtfCmapEncoding[\"Unicode\"] = 2] = \"Unicode\";\n  /**\n   * For font that will be used on a Macintosh.\n   * @private\n   */\n\n  TtfCmapEncoding[TtfCmapEncoding[\"Macintosh\"] = 3] = \"Macintosh\";\n})(TtfCmapEncoding || (TtfCmapEncoding = {}));\n/**\n * Ttf platform ID.\n * @private\n */\n\n\nexport var TtfPlatformID;\n\n(function (TtfPlatformID) {\n  /**\n   * Apple platform.\n   * @private\n   */\n  TtfPlatformID[TtfPlatformID[\"AppleUnicode\"] = 0] = \"AppleUnicode\";\n  /**\n   * Macintosh platform.\n   * @private\n   */\n\n  TtfPlatformID[TtfPlatformID[\"Macintosh\"] = 1] = \"Macintosh\";\n  /**\n   * Iso platform.\n   * @private\n   */\n\n  TtfPlatformID[TtfPlatformID[\"Iso\"] = 2] = \"Iso\";\n  /**\n   * Microsoft platform.\n   * @private\n   */\n\n  TtfPlatformID[TtfPlatformID[\"Microsoft\"] = 3] = \"Microsoft\";\n})(TtfPlatformID || (TtfPlatformID = {}));\n/**\n * Microsoft encoding ID.\n * @private\n */\n\n\nexport var TtfMicrosoftEncodingID;\n\n(function (TtfMicrosoftEncodingID) {\n  /**\n   * Undefined encoding.\n   * @private\n   */\n  TtfMicrosoftEncodingID[TtfMicrosoftEncodingID[\"Undefined\"] = 0] = \"Undefined\";\n  /**\n   * Unicode encoding.\n   * @private\n   */\n\n  TtfMicrosoftEncodingID[TtfMicrosoftEncodingID[\"Unicode\"] = 1] = \"Unicode\";\n})(TtfMicrosoftEncodingID || (TtfMicrosoftEncodingID = {}));\n/**\n * Macintosh encoding ID.\n * @private\n */\n\n\nexport var TtfMacintoshEncodingID;\n\n(function (TtfMacintoshEncodingID) {\n  /**\n   * Roman encoding.\n   * @private\n   */\n  TtfMacintoshEncodingID[TtfMacintoshEncodingID[\"Roman\"] = 0] = \"Roman\";\n  /**\n   * Japanese encoding.\n   * @private\n   */\n\n  TtfMacintoshEncodingID[TtfMacintoshEncodingID[\"Japanese\"] = 1] = \"Japanese\";\n  /**\n   * Chinese encoding.\n   * @private\n   */\n\n  TtfMacintoshEncodingID[TtfMacintoshEncodingID[\"Chinese\"] = 2] = \"Chinese\";\n})(TtfMacintoshEncodingID || (TtfMacintoshEncodingID = {}));\n/**\n * Enumerator that implements font descriptor flags.\n * @private\n */\n\n\nexport var FontDescriptorFlags;\n\n(function (FontDescriptorFlags) {\n  /**\n   * All glyphs have the same width (as opposed to proportional or variable-pitch fonts, which have different widths).\n   * @private\n   */\n  FontDescriptorFlags[FontDescriptorFlags[\"FixedPitch\"] = 1] = \"FixedPitch\";\n  /**\n   * Glyphs have serifs, which are short strokes drawn at an angle on the top and\n   * bottom of glyph stems (as opposed to sans serif fonts, which do not).\n   * @private\n   */\n\n  FontDescriptorFlags[FontDescriptorFlags[\"Serif\"] = 2] = \"Serif\";\n  /**\n   * Font contains glyphs outside the Adobe standard Latin character set. The\n   * flag and the nonsymbolic flag cannot both be set or both be clear.\n   * @private\n   */\n\n  FontDescriptorFlags[FontDescriptorFlags[\"Symbolic\"] = 4] = \"Symbolic\";\n  /**\n   * Glyphs resemble cursive handwriting.\n   * @private\n   */\n\n  FontDescriptorFlags[FontDescriptorFlags[\"Script\"] = 8] = \"Script\";\n  /**\n   * Font uses the Adobe standard Latin character set or a subset of it.\n   * @private\n   */\n\n  FontDescriptorFlags[FontDescriptorFlags[\"Nonsymbolic\"] = 32] = \"Nonsymbolic\";\n  /**\n   * Glyphs have dominant vertical strokes that are slanted.\n   * @private\n   */\n\n  FontDescriptorFlags[FontDescriptorFlags[\"Italic\"] = 64] = \"Italic\";\n  /**\n   * Bold font.\n   * @private\n   */\n\n  FontDescriptorFlags[FontDescriptorFlags[\"ForceBold\"] = 262144] = \"ForceBold\";\n})(FontDescriptorFlags || (FontDescriptorFlags = {}));\n/**\n * true type font composite glyph flags.\n * @private\n */\n\n\nexport var TtfCompositeGlyphFlags;\n\n(function (TtfCompositeGlyphFlags) {\n  /**\n   * The Arg1And2AreWords.\n   * @private\n   */\n  TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"Arg1And2AreWords\"] = 1] = \"Arg1And2AreWords\";\n  /**\n   * The ArgsAreXyValues.\n   * @private\n   */\n\n  TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"ArgsAreXyValues\"] = 2] = \"ArgsAreXyValues\";\n  /**\n   * The RoundXyToGrid.\n   * @private\n   */\n\n  TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"RoundXyToGrid\"] = 4] = \"RoundXyToGrid\";\n  /**\n   * The WeHaveScale.\n   * @private\n   */\n\n  TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"WeHaveScale\"] = 8] = \"WeHaveScale\";\n  /**\n   * The Reserved.\n   * @private\n   */\n\n  TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"Reserved\"] = 16] = \"Reserved\";\n  /**\n   * The MoreComponents.\n   * @private\n   */\n\n  TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"MoreComponents\"] = 32] = \"MoreComponents\";\n  /**\n   * The WeHaveAnXyScale.\n   * @private\n   */\n\n  TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"WeHaveAnXyScale\"] = 64] = \"WeHaveAnXyScale\";\n  /**\n   * The WeHaveTwoByTwo\n   */\n\n  TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"WeHaveTwoByTwo\"] = 128] = \"WeHaveTwoByTwo\";\n  /**\n   * The WeHaveInstructions.\n   */\n\n  TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"WeHaveInstructions\"] = 256] = \"WeHaveInstructions\";\n  /**\n   * The UseMyMetrics.\n   */\n\n  TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"UseMyMetrics\"] = 512] = \"UseMyMetrics\";\n})(TtfCompositeGlyphFlags || (TtfCompositeGlyphFlags = {}));","map":null,"metadata":{},"sourceType":"module"}