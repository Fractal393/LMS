{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Component, L10n, Browser, isBlazor } from '@syncfusion/ej2-base';\nimport { createElement, compile as templateCompiler } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Property, Event, NotifyPropertyChanges } from '@syncfusion/ej2-base';\nimport { NumericContainer } from './numeric-container';\nimport { PagerMessage } from './pager-message';\nimport { appendChildren } from '../grid/base/util';\n/**\n * Represents the `Pager` component.\n * ```html\n * <div id=\"pager\"/>\n * ```\n * ```typescript\n * <script>\n *   var pagerObj = new Pager({ totalRecordsCount: 50, pageSize:10 });\n *   pagerObj.appendTo(\"#pager\");\n * </script>\n * ```\n */\n\nvar Pager =\n/** @class */\nfunction (_super) {\n  __extends(Pager, _super);\n  /**\n   * Constructor for creating the component.\n   * @hidden\n   */\n\n\n  function Pager(options, element) {\n    return _super.call(this, options, element) || this;\n  }\n  /**\n   * To provide the array of modules needed for component rendering\n   * @hidden\n   */\n\n\n  Pager.prototype.requiredModules = function () {\n    var modules = [];\n\n    if (this.enableExternalMessage) {\n      modules.push({\n        member: 'externalMessage',\n        args: [this]\n      });\n    }\n\n    if (this.checkpagesizes()) {\n      modules.push({\n        member: 'pagerdropdown',\n        args: [this]\n      });\n    }\n\n    return modules;\n  };\n  /**\n   * Initialize the event handler\n   * @hidden\n   */\n\n\n  Pager.prototype.preRender = function () {\n    //preRender\n    this.defaultConstants = {\n      currentPageInfo: '{0} of {1} pages',\n      totalItemsInfo: '({0} items)',\n      totalItemInfo: '({0} item)',\n      firstPageTooltip: 'Go to first page',\n      lastPageTooltip: 'Go to last page',\n      nextPageTooltip: 'Go to next page',\n      previousPageTooltip: 'Go to previous page',\n      nextPagerTooltip: 'Go to next pager',\n      previousPagerTooltip: 'Go to previous pager',\n      pagerDropDown: 'Items per page',\n      pagerAllDropDown: 'Items',\n      CurrentPageInfo: '{0} of {1} pages',\n      TotalItemsInfo: '({0} items)',\n      FirstPageTooltip: 'Go to first page',\n      LastPageTooltip: 'Go to last page',\n      NextPageTooltip: 'Go to next page',\n      PreviousPageTooltip: 'Go to previous page',\n      NextPagerTooltip: 'Go to next pager',\n      PreviousPagerTooltip: 'Go to previous pager',\n      PagerDropDown: 'Items per page',\n      PagerAllDropDown: 'Items',\n      All: 'All'\n    };\n    this.containerModule = new NumericContainer(this);\n    this.pagerMessageModule = new PagerMessage(this);\n  };\n  /**\n   * To Initialize the component rendering\n   */\n\n\n  Pager.prototype.render = function () {\n    if (this.template) {\n      this.pagerTemplate();\n    } else {\n      this.initLocalization();\n      this.updateRTL();\n      this.totalRecordsCount = this.totalRecordsCount || 0;\n      this.renderFirstPrevDivForDevice();\n      this.containerModule.render();\n\n      if (this.enablePagerMessage) {\n        this.pagerMessageModule.render();\n      }\n\n      this.renderNextLastDivForDevice();\n\n      if (this.checkpagesizes() && this.pagerdropdownModule) {\n        this.pagerdropdownModule.render();\n      }\n\n      this.addAriaLabel();\n\n      if (this.enableExternalMessage && this.externalMessageModule) {\n        this.externalMessageModule.render();\n      }\n\n      this.refresh();\n      this.trigger('created', {\n        'currentPage': this.currentPage,\n        'totalRecordsCount': this.totalRecordsCount\n      });\n    }\n  };\n  /**\n   * Get the properties to be maintained in the persisted state.\n   * @hidden\n   */\n\n\n  Pager.prototype.getPersistData = function () {\n    var keyEntity = ['currentPage', 'pageSize'];\n    return this.addOnPersist(keyEntity);\n  };\n  /**\n   * To destroy the Pager component.\n   * @method destroy\n   * @return {void}\n   */\n\n\n  Pager.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    this.containerModule.destroy();\n    this.pagerMessageModule.destroy();\n    this.element.innerHTML = '';\n  };\n  /**\n   * For internal use only - Get the module name.\n   * @private\n   */\n\n\n  Pager.prototype.getModuleName = function () {\n    return 'pager';\n  };\n  /**\n   * Called internally if any of the property value changed.\n   * @hidden\n   */\n\n\n  Pager.prototype.onPropertyChanged = function (newProp, oldProp) {\n    if (this.isDestroyed) {\n      return;\n    }\n\n    if (newProp.pageCount !== oldProp.pageCount) {\n      this.containerModule.refreshNumericLinks();\n      this.containerModule.refresh();\n    }\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'currentPage':\n          if (this.checkGoToPage(newProp.currentPage, oldProp.currentPage)) {\n            this.currentPageChanged(newProp, oldProp);\n          }\n\n          break;\n\n        case 'pageSize':\n        case 'totalRecordsCount':\n        case 'customText':\n          if (this.checkpagesizes() && this.pagerdropdownModule) {\n            if (oldProp.pageSize !== newProp.pageSize) {\n              this.currentPage = 1;\n            }\n\n            this.pagerdropdownModule.setDropDownValue('value', this.pageSize);\n          }\n\n          if (newProp.pageSize !== oldProp.pageSize) {\n            this.pageSize = newProp.pageSize;\n            this.currentPageChanged(newProp, oldProp);\n          } else {\n            this.refresh();\n          }\n\n          break;\n\n        case 'pageSizes':\n          if (this.checkpagesizes() && this.pagerdropdownModule) {\n            this.pagerdropdownModule.destroy();\n            this.pagerdropdownModule.render();\n          }\n\n          this.refresh();\n          break;\n\n        case 'template':\n          this.templateFn = this.compile(this.template);\n          this.refresh();\n          break;\n\n        case 'locale':\n          this.initLocalization();\n          this.refresh();\n          break;\n\n        case 'enableExternalMessage':\n          if (this.enableExternalMessage && this.externalMessageModule) {\n            this.externalMessageModule.render();\n          }\n\n          break;\n\n        case 'externalMessage':\n          if (this.externalMessageModule) {\n            this.externalMessageModule.refresh();\n          }\n\n          break;\n\n        case 'enableRtl':\n          this.updateRTL();\n          break;\n\n        case 'enablePagerMessage':\n          if (this.enablePagerMessage) {\n            this.pagerMessageModule.showMessage();\n          } else {\n            this.pagerMessageModule.hideMessage();\n          }\n\n          break;\n      }\n    }\n  };\n  /**\n   * Gets the localized label by locale keyword.\n   * @param  {string} key\n   * @return {string}\n   */\n\n\n  Pager.prototype.getLocalizedLabel = function (key) {\n    return this.localeObj.getConstant(key);\n  };\n  /**\n   * Navigate to target page by given number.\n   * @param  {number} pageNo - Defines page number.\n   * @return {void}\n   */\n\n\n  Pager.prototype.goToPage = function (pageNo) {\n    if (this.checkGoToPage(pageNo)) {\n      this.currentPage = pageNo;\n      this.dataBind();\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  Pager.prototype.setPageSize = function (pageSize) {\n    this.pageSize = pageSize;\n    this.dataBind();\n  };\n\n  Pager.prototype.checkpagesizes = function () {\n    if (this.pageSizes === true || this.pageSizes.length) {\n      return true;\n    }\n\n    return false;\n  };\n\n  Pager.prototype.checkGoToPage = function (newPageNo, oldPageNo) {\n    if (newPageNo !== this.currentPage) {\n      this.previousPageNo = this.currentPage;\n    }\n\n    if (!isNullOrUndefined(oldPageNo)) {\n      this.previousPageNo = oldPageNo;\n    }\n\n    if (this.previousPageNo !== newPageNo && newPageNo >= 1 && newPageNo <= this.totalPages) {\n      return true;\n    }\n\n    return false;\n  };\n\n  Pager.prototype.currentPageChanged = function (newProp, oldProp) {\n    if (this.enableQueryString) {\n      this.updateQueryString(this.currentPage);\n    }\n\n    if (newProp.currentPage !== oldProp.currentPage || newProp.pageSize !== oldProp.pageSize) {\n      var args = {\n        currentPage: this.currentPage,\n        newProp: newProp,\n        oldProp: oldProp,\n        cancel: false\n      };\n      this.trigger('click', args);\n\n      if (!args.cancel) {\n        this.refresh();\n      }\n    }\n  };\n\n  Pager.prototype.pagerTemplate = function () {\n    var result;\n    this.element.classList.add('e-pagertemplate');\n    this.compile(this.template);\n    var data = {\n      currentPage: this.currentPage,\n      pageSize: this.pageSize,\n      pageCount: this.pageCount,\n      totalRecordsCount: this.totalRecordsCount,\n      totalPages: this.totalPages\n    };\n    var tempId = this.element.parentElement.id + '_template';\n    result = isBlazor() ? this.getPagerTemplate()(data, this, 'template', tempId, this.isStringTemplate) : this.getPagerTemplate()(data);\n    appendChildren(this.element, result);\n  };\n  /** @hidden */\n\n\n  Pager.prototype.updateTotalPages = function () {\n    this.totalPages = this.totalRecordsCount % this.pageSize === 0 ? this.totalRecordsCount / this.pageSize : parseInt((this.totalRecordsCount / this.pageSize).toString(), 10) + 1;\n  };\n  /** @hidden */\n\n\n  Pager.prototype.getPagerTemplate = function () {\n    return this.templateFn;\n  };\n\n  Pager.prototype.compile = function (template) {\n    if (template) {\n      var e = void 0;\n\n      try {\n        if (document.querySelectorAll(template).length) {\n          this.templateFn = templateCompiler(document.querySelector(template).innerHTML.trim());\n        }\n      } catch (e) {\n        this.templateFn = templateCompiler(template);\n      }\n    }\n\n    return undefined;\n  };\n  /**\n   * Refreshes page count, pager information and external message.\n   * @return {void}\n   */\n\n\n  Pager.prototype.refresh = function () {\n    if (this.template) {\n      this.element.innerHTML = '';\n      this.updateTotalPages();\n      this.pagerTemplate();\n    } else {\n      this.updateRTL();\n      this.containerModule.refresh();\n\n      if (this.enablePagerMessage) {\n        this.pagerMessageModule.refresh();\n      }\n\n      if (this.enableExternalMessage && this.externalMessageModule) {\n        this.externalMessageModule.refresh();\n      }\n    }\n  };\n\n  Pager.prototype.updateRTL = function () {\n    if (this.enableRtl) {\n      this.element.classList.add('e-rtl');\n    } else {\n      this.element.classList.remove('e-rtl');\n    }\n  };\n\n  Pager.prototype.initLocalization = function () {\n    this.localeObj = new L10n(this.getModuleName(), this.defaultConstants, this.locale);\n  };\n\n  Pager.prototype.updateQueryString = function (value) {\n    var updatedUrl = this.getUpdatedURL(window.location.href, 'page', value.toString());\n    window.history.pushState({\n      path: updatedUrl\n    }, '', updatedUrl);\n  };\n\n  Pager.prototype.getUpdatedURL = function (uri, key, value) {\n    var regx = new RegExp('([?|&])' + key + '=.*?(&|#|$)', 'i');\n\n    if (uri.match(regx)) {\n      return uri.replace(regx, '$1' + key + '=' + value + '$2');\n    } else {\n      var hash = '';\n\n      if (uri.indexOf('#') !== -1) {\n        hash = uri.replace(/.*#/, '#');\n        uri = uri.replace(/#.*/, '');\n      }\n\n      return uri + (uri.indexOf('?') !== -1 ? '&' : '?') + key + '=' + value + hash;\n    }\n  };\n\n  Pager.prototype.renderFirstPrevDivForDevice = function () {\n    this.element.appendChild(createElement('div', {\n      className: 'e-mfirst e-icons e-icon-first',\n      attrs: {\n        title: isBlazor() ? this.getLocalizedLabel('FirstPageTooltip') : this.getLocalizedLabel('firstPageTooltip'),\n        tabindex: '-1'\n      }\n    }));\n    this.element.appendChild(createElement('div', {\n      className: 'e-mprev e-icons e-icon-prev',\n      attrs: {\n        title: isBlazor() ? this.getLocalizedLabel('PreviousPageTooltip') : this.getLocalizedLabel('previousPageTooltip'),\n        tabindex: '-1'\n      }\n    }));\n  };\n\n  Pager.prototype.renderNextLastDivForDevice = function () {\n    this.element.appendChild(createElement('div', {\n      className: 'e-mnext e-icons e-icon-next',\n      attrs: {\n        title: isBlazor() ? this.getLocalizedLabel('NextPageTooltip') : this.getLocalizedLabel('nextPageTooltip'),\n        tabindex: '-1'\n      }\n    }));\n    this.element.appendChild(createElement('div', {\n      className: 'e-mlast e-icons e-icon-last',\n      attrs: {\n        title: isBlazor() ? this.getLocalizedLabel('LastPageTooltip') : this.getLocalizedLabel('lastPageTooltip'),\n        tabindex: '-1'\n      }\n    }));\n  };\n\n  Pager.prototype.addAriaLabel = function () {\n    var classList = ['.e-mfirst', '.e-mprev', '.e-mnext', '.e-mlast'];\n\n    if (!Browser.isDevice) {\n      for (var i = 0; i < classList.length; i++) {\n        var element = this.element.querySelector(classList[i]);\n        element.setAttribute('aria-label', element.getAttribute('title'));\n      }\n    }\n  };\n\n  __decorate([Property(false)], Pager.prototype, \"enableQueryString\", void 0);\n\n  __decorate([Property(false)], Pager.prototype, \"enableExternalMessage\", void 0);\n\n  __decorate([Property(true)], Pager.prototype, \"enablePagerMessage\", void 0);\n\n  __decorate([Property(12)], Pager.prototype, \"pageSize\", void 0);\n\n  __decorate([Property(10)], Pager.prototype, \"pageCount\", void 0);\n\n  __decorate([Property(1)], Pager.prototype, \"currentPage\", void 0);\n\n  __decorate([Property()], Pager.prototype, \"totalRecordsCount\", void 0);\n\n  __decorate([Property()], Pager.prototype, \"externalMessage\", void 0);\n\n  __decorate([Property(false)], Pager.prototype, \"pageSizes\", void 0);\n\n  __decorate([Property()], Pager.prototype, \"template\", void 0);\n\n  __decorate([Property('')], Pager.prototype, \"customText\", void 0);\n\n  __decorate([Event()], Pager.prototype, \"click\", void 0);\n\n  __decorate([Event()], Pager.prototype, \"dropDownChanged\", void 0);\n\n  __decorate([Event()], Pager.prototype, \"created\", void 0);\n\n  Pager = __decorate([NotifyPropertyChanges], Pager);\n  return Pager;\n}(Component);\n\nexport { Pager };","map":null,"metadata":{},"sourceType":"module"}