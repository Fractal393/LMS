{"ast":null,"code":"import { PdfStream } from './../primitives/pdf-stream';\nimport { PdfGraphics, GetResourceEventHandler } from './../graphics/pdf-graphics';\nimport { PdfPageLayerCollection } from './pdf-page-layer-collection';\nimport { DictionaryProperties } from './../input-output/pdf-dictionary-properties';\nimport { PdfColorSpace } from './../graphics/enum';\n/**\n * The `PdfPageLayer` used to create layers in PDF document.\n * @private\n */\n\nvar PdfPageLayer =\n/** @class */\nfunction () {\n  function PdfPageLayer(page, streamClipPageTemplates) {\n    // private bSaved : boolean;\n\n    /**\n     * Local Variable to store the `color space` of the document.\n     * @private\n     */\n    this.pdfColorSpace = PdfColorSpace.Rgb;\n    /**\n     * Local Variable to set `visibility`.\n     * @default true\n     * @private\n     */\n\n    this.isVisible = true;\n    /**\n     * Indicates if `Sublayer` is present.\n     * @default false\n     * @private\n     */\n\n    this.sublayer = false;\n    /**\n     * Local variable to store `length` of the graphics.\n     * @default 0\n     * @private\n     */\n\n    this.contentLength = 0;\n    /**\n     * Instance for `PdfDictionaryProperties` Class.\n     * @private\n     */\n\n    this.dictionaryProperties = new DictionaryProperties();\n\n    if (page === null) {\n      throw new Error('ArgumentNullException:page');\n    }\n\n    this.pdfPage = page;\n    this.clipPageTemplates = true;\n\n    if (typeof streamClipPageTemplates === 'undefined') {\n      this.content = new PdfStream();\n    } else if (streamClipPageTemplates instanceof PdfStream || streamClipPageTemplates === null) {\n      if (streamClipPageTemplates === null) {\n        throw new Error('ArgumentNullException:stream');\n      }\n\n      this.content = streamClipPageTemplates;\n    } else {\n      this.content = new PdfStream();\n      this.clipPageTemplates = streamClipPageTemplates;\n    }\n  }\n\n  Object.defineProperty(PdfPageLayer.prototype, \"colorSpace\", {\n    // Properties\n\n    /**\n     * Get or set the `color space`.\n     * @private\n     */\n    get: function () {\n      return this.pdfColorSpace;\n    },\n    set: function (value) {\n      this.pdfColorSpace = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPageLayer.prototype, \"page\", {\n    /**\n     * Gets parent `page` of the layer.\n     * @private\n     */\n    get: function () {\n      return this.pdfPage;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPageLayer.prototype, \"layerId\", {\n    /**\n     * Gets and Sets the `id of the layer`.\n     * @private\n     */\n    get: function () {\n      return this.layerid;\n    },\n    set: function (value) {\n      this.layerid = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPageLayer.prototype, \"name\", {\n    /**\n     * Gets or sets the `name` of the layer.\n     * @private\n     */\n    get: function () {\n      return this.layerName;\n    },\n    set: function (value) {\n      this.layerName = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPageLayer.prototype, \"visible\", {\n    /**\n     * Gets or sets the `visibility` of the layer.\n     * @private\n     */\n    get: function () {\n      return this.isVisible;\n    },\n    set: function (value) {\n      this.isVisible = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPageLayer.prototype, \"graphics\", {\n    /**\n     * Gets `Graphics` context of the layer, used to draw various graphical content on layer.\n     * @private\n     */\n    get: function () {\n      if (this.pdfGraphics == null) {\n        this.initializeGraphics(this.page);\n      }\n\n      return this.pdfGraphics;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPageLayer.prototype, \"layers\", {\n    /**\n     * Gets the collection of `PdfPageLayer`, this collection handle by the class 'PdfPageLayerCollection'.\n     * @private\n     */\n    get: function () {\n      if (this.layer == null) {\n        this.layer = new PdfPageLayerCollection(this.page);\n        this.layer.sublayer = true;\n        return this.layer;\n      } else {\n        return this.layer;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  }); // Implementation\n\n  /**\n   * `Adds` a new PDF Page layer.\n   * @private\n   */\n\n  PdfPageLayer.prototype.add = function () {\n    var layer = new PdfPageLayer(this.pdfPage);\n    layer.name = '';\n    return layer;\n  };\n  /**\n   * Returns a value indicating the `sign` of a single-precision floating-point number.\n   * @private\n   */\n\n\n  PdfPageLayer.prototype.sign = function (number) {\n    if (number === 0) {\n      return 0;\n    } else if (number > 0) {\n      return 1;\n    } else {\n      return -1;\n    }\n  };\n  /**\n   * `Initializes Graphics context` of the layer.\n   * @private\n   */\n\n\n  PdfPageLayer.prototype.initializeGraphics = function (page) {\n    var oPage = page;\n    var gr = new GetResourceEventHandler(this.page);\n    var cropBox = null;\n    this.pdfGraphics = new PdfGraphics(page.size, gr, this.content);\n    this.pdfGraphics.mediaBoxUpperRightBound = 0;\n\n    if (oPage != null) {\n      var sc = oPage.section.parent;\n\n      if (sc != null) {\n        this.pdfGraphics.colorSpace = sc.document.colorSpace;\n        this.colorSpace = sc.document.colorSpace;\n      }\n    } // Transform coordinates to the left/top and activate margins.\n\n\n    var isSame = this.sign(page.origin.y) === this.sign(page.origin.x); // if (page != null) {\n\n    if (page.origin.x >= 0 && page.origin.y >= 0 || !isSame) {\n      this.pdfGraphics.initializeCoordinates();\n    } else {// this.m_graphics.InitializeCoordinates(page);\n    }\n\n    var clipRect = oPage.section.getActualBounds(oPage, true);\n    var margins = oPage.section.pageSettings.margins;\n\n    if (this.clipPageTemplates) {\n      if (page.origin.x >= 0 && page.origin.y >= 0) {\n        this.pdfGraphics.clipTranslateMargins(clipRect);\n      }\n    } else {\n      this.graphics.clipTranslateMargins(clipRect.x, clipRect.y, margins.left, margins.top, margins.right, margins.bottom);\n    }\n\n    this.pdfGraphics.setLayer(this); // this.bSaved = false;\n  };\n\n  Object.defineProperty(PdfPageLayer.prototype, \"element\", {\n    // IPdfWrapper Members\n\n    /**\n     * Gets the wrapped `element`.\n     * @private\n     */\n    get: function () {\n      return this.content;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfPageLayer;\n}();\n\nexport { PdfPageLayer };","map":null,"metadata":{},"sourceType":"module"}