{"ast":null,"code":"import { createElement, attributes, addClass, removeClass, detach, classList } from '@syncfusion/ej2-base';\nimport { closest, formatUnit, isNullOrUndefined } from '@syncfusion/ej2-base';\nvar CLASSNAMES = {\n  RTL: 'e-rtl',\n  DISABLE: 'e-disabled',\n  INPUT: 'e-input',\n  TEXTAREA: 'e-multi-line-input',\n  INPUTGROUP: 'e-input-group',\n  FLOATINPUT: 'e-float-input',\n  FLOATLINE: 'e-float-line',\n  FLOATTEXT: 'e-float-text',\n  CLEARICON: 'e-clear-icon',\n  CLEARICONHIDE: 'e-clear-icon-hide',\n  LABELTOP: 'e-label-top',\n  LABELBOTTOM: 'e-label-bottom',\n  NOFLOATLABEL: 'e-no-float-label',\n  INPUTCUSTOMTAG: 'e-input-custom-tag',\n  FLOATCUSTOMTAG: 'e-float-custom-tag'\n};\n/**\n * Base for Input creation through util methods.\n */\n\nexport var Input;\n\n(function (Input) {\n  var privateInputObj = {\n    container: null,\n    buttons: [],\n    clearButton: null\n  };\n  var floatType;\n  /**\n   * Create a wrapper to input element with multiple span elements and set the basic properties to input based components.\n   * ```\n   * E.g : Input.createInput({ element: element, floatLabelType : \"Auto\", properties: { placeholder: 'Search' } });\n   * ```\n   * @param args\n   */\n\n  function createInput(args, internalCreateElement) {\n    var makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n    var inputObject = {\n      container: null,\n      buttons: [],\n      clearButton: null\n    };\n    floatType = args.floatLabelType;\n\n    if (isNullOrUndefined(args.floatLabelType) || args.floatLabelType === 'Never') {\n      inputObject.container = createInputContainer(args, CLASSNAMES.INPUTGROUP, CLASSNAMES.INPUTCUSTOMTAG, 'span', makeElement);\n      args.element.parentNode.insertBefore(inputObject.container, args.element);\n      addClass([args.element], CLASSNAMES.INPUT);\n      inputObject.container.appendChild(args.element);\n    } else {\n      createFloatingInput(args, inputObject, makeElement);\n    }\n\n    bindInitialEvent(args);\n\n    if (!isNullOrUndefined(args.properties) && !isNullOrUndefined(args.properties.showClearButton) && args.properties.showClearButton && args.element.tagName !== 'TEXTAREA') {\n      setClearButton(args.properties.showClearButton, args.element, inputObject, true, makeElement);\n      inputObject.clearButton.setAttribute('role', 'button');\n\n      if (inputObject.container.classList.contains(CLASSNAMES.FLOATINPUT)) {\n        addClass([inputObject.container], CLASSNAMES.INPUTGROUP);\n      }\n    }\n\n    if (!isNullOrUndefined(args.buttons) && args.element.tagName !== 'TEXTAREA') {\n      for (var i = 0; i < args.buttons.length; i++) {\n        inputObject.buttons.push(appendSpan(args.buttons[i], inputObject.container, makeElement));\n      }\n    }\n\n    if (!isNullOrUndefined(args.element) && args.element.tagName === 'TEXTAREA') {\n      addClass([inputObject.container], CLASSNAMES.TEXTAREA);\n    }\n\n    inputObject = setPropertyValue(args, inputObject);\n    privateInputObj = inputObject;\n    return inputObject;\n  }\n\n  Input.createInput = createInput;\n\n  function bindInitialEvent(args) {\n    checkInputValue(args.floatLabelType, args.element);\n    args.element.addEventListener('focus', function () {\n      var parent = getParentNode(this);\n\n      if (parent.classList.contains('e-input-group') || parent.classList.contains('e-outline') || parent.classList.contains('e-filled')) {\n        parent.classList.add('e-input-focus');\n      }\n    });\n    args.element.addEventListener('blur', function () {\n      var parent = getParentNode(this);\n\n      if (parent.classList.contains('e-input-group') || parent.classList.contains('e-outline') || parent.classList.contains('e-filled')) {\n        parent.classList.remove('e-input-focus');\n      }\n    });\n    args.element.addEventListener('input', function () {\n      checkInputValue(floatType, args.element);\n    });\n  }\n\n  Input.bindInitialEvent = bindInitialEvent;\n\n  function checkInputValue(floatLabelType, inputElement) {\n    var inputValue = inputElement.value;\n\n    if (inputValue !== '' && !isNullOrUndefined(inputValue)) {\n      inputElement.parentElement.classList.add('e-valid-input');\n    } else if (floatLabelType !== 'Always' && inputElement.parentElement) {\n      inputElement.parentElement.classList.remove('e-valid-input');\n    }\n  }\n\n  function _focusFn() {\n    var label = getParentNode(this).getElementsByClassName('e-float-text')[0];\n\n    if (!isNullOrUndefined(label)) {\n      addClass([label], CLASSNAMES.LABELTOP);\n\n      if (label.classList.contains(CLASSNAMES.LABELBOTTOM)) {\n        removeClass([label], CLASSNAMES.LABELBOTTOM);\n      }\n    }\n  }\n\n  function _blurFn() {\n    var parent = getParentNode(this);\n\n    if (parent.getElementsByTagName('textarea')[0] ? parent.getElementsByTagName('textarea')[0].value === '' : parent.getElementsByTagName('input')[0].value === '') {\n      var label = parent.getElementsByClassName('e-float-text')[0];\n\n      if (!isNullOrUndefined(label)) {\n        if (label.classList.contains(CLASSNAMES.LABELTOP)) {\n          removeClass([label], CLASSNAMES.LABELTOP);\n        }\n\n        addClass([label], CLASSNAMES.LABELBOTTOM);\n      }\n    }\n  }\n\n  function wireFloatingEvents(element) {\n    element.addEventListener('focus', _focusFn);\n    element.addEventListener('blur', _blurFn);\n  }\n\n  Input.wireFloatingEvents = wireFloatingEvents;\n\n  function unwireFloatingEvents(element) {\n    element.removeEventListener('focus', _focusFn);\n    element.removeEventListener('blur', _blurFn);\n  }\n\n  function createFloatingInput(args, inputObject, internalCreateElement) {\n    var makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n    var inputElement;\n    var floatLinelement;\n    var floatLabelElement;\n\n    if (args.floatLabelType === 'Auto') {\n      wireFloatingEvents(args.element);\n    }\n\n    if (isNullOrUndefined(inputObject.container)) {\n      inputObject.container = createInputContainer(args, CLASSNAMES.FLOATINPUT, CLASSNAMES.FLOATCUSTOMTAG, 'div', makeElement);\n      args.element.parentNode.insertBefore(inputObject.container, args.element);\n    } else {\n      if (!isNullOrUndefined(args.customTag)) {\n        inputObject.container.classList.add(CLASSNAMES.FLOATCUSTOMTAG);\n      }\n\n      inputObject.container.classList.add(CLASSNAMES.FLOATINPUT);\n    }\n\n    floatLinelement = makeElement('span', {\n      className: CLASSNAMES.FLOATLINE\n    });\n    floatLabelElement = makeElement('label', {\n      className: CLASSNAMES.FLOATTEXT\n    });\n\n    if (!isNullOrUndefined(args.element.id) && args.element.id !== '') {\n      floatLabelElement.id = 'label_' + args.element.id.replace(/ /g, '_');\n      attributes(args.element, {\n        'aria-labelledby': floatLabelElement.id\n      });\n    }\n\n    if (!isNullOrUndefined(args.element.placeholder) && args.element.placeholder !== '') {\n      floatLabelElement.innerText = encodePlaceHolder(args.element.placeholder);\n      args.element.removeAttribute('placeholder');\n    }\n\n    if (!isNullOrUndefined(args.properties) && !isNullOrUndefined(args.properties.placeholder) && args.properties.placeholder !== '') {\n      floatLabelElement.innerText = encodePlaceHolder(args.properties.placeholder);\n    }\n\n    if (!floatLabelElement.innerText) {\n      inputObject.container.classList.add(CLASSNAMES.NOFLOATLABEL);\n    }\n\n    if (inputObject.container.classList.contains('e-float-icon-left')) {\n      var inputWrap = inputObject.container.querySelector('.e-input-in-wrap');\n      inputWrap.appendChild(args.element);\n      inputWrap.appendChild(floatLinelement);\n      inputWrap.appendChild(floatLabelElement);\n    } else {\n      inputObject.container.appendChild(args.element);\n      inputObject.container.appendChild(floatLinelement);\n      inputObject.container.appendChild(floatLabelElement);\n    }\n\n    updateLabelState(args.element.value, floatLabelElement);\n\n    if (args.floatLabelType === 'Always') {\n      if (floatLabelElement.classList.contains(CLASSNAMES.LABELBOTTOM)) {\n        removeClass([floatLabelElement], CLASSNAMES.LABELBOTTOM);\n      }\n\n      addClass([floatLabelElement], CLASSNAMES.LABELTOP);\n    }\n\n    if (args.floatLabelType === 'Auto') {\n      args.element.addEventListener('input', function (event) {\n        updateLabelState(args.element.value, floatLabelElement);\n      });\n      args.element.addEventListener('blur', function (event) {\n        updateLabelState(args.element.value, floatLabelElement);\n      });\n    }\n\n    if (!isNullOrUndefined(args.element.getAttribute('id'))) {\n      floatLabelElement.setAttribute('for', args.element.getAttribute('id'));\n    }\n  }\n\n  function checkFloatLabelType(type, container) {\n    if (type === 'Always' && container.classList.contains('e-outline')) {\n      container.classList.add('e-valid-input');\n    }\n  }\n\n  function setPropertyValue(args, inputObject) {\n    if (!isNullOrUndefined(args.properties)) {\n      for (var _i = 0, _a = Object.keys(args.properties); _i < _a.length; _i++) {\n        var prop = _a[_i];\n\n        switch (prop) {\n          case 'cssClass':\n            setCssClass(args.properties.cssClass, [inputObject.container]);\n            checkFloatLabelType(args.floatLabelType, inputObject.container);\n            break;\n\n          case 'enabled':\n            setEnabled(args.properties.enabled, args.element, args.floatLabelType, inputObject.container);\n            break;\n\n          case 'enableRtl':\n            setEnableRtl(args.properties.enableRtl, [inputObject.container]);\n            break;\n\n          case 'placeholder':\n            setPlaceholder(args.properties.placeholder, args.element);\n            break;\n\n          case 'readonly':\n            setReadonly(args.properties.readonly, args.element);\n            break;\n        }\n      }\n    }\n\n    return inputObject;\n  }\n\n  function updateIconState(value, button) {\n    if (value) {\n      removeClass([button], CLASSNAMES.CLEARICONHIDE);\n    } else {\n      addClass([button], CLASSNAMES.CLEARICONHIDE);\n    }\n  }\n\n  function updateLabelState(value, label) {\n    if (value) {\n      addClass([label], CLASSNAMES.LABELTOP);\n\n      if (label.classList.contains(CLASSNAMES.LABELBOTTOM)) {\n        removeClass([label], CLASSNAMES.LABELBOTTOM);\n      }\n    } else {\n      if (label.classList.contains(CLASSNAMES.LABELTOP)) {\n        removeClass([label], CLASSNAMES.LABELTOP);\n      }\n\n      addClass([label], CLASSNAMES.LABELBOTTOM);\n    }\n  }\n\n  function getParentNode(element) {\n    var parentNode = isNullOrUndefined(element.parentNode) ? element : element.parentNode;\n\n    if (parentNode && parentNode.classList.contains('e-input-in-wrap')) {\n      parentNode = parentNode.parentNode;\n    }\n\n    return parentNode;\n  }\n  /**\n   * To create clear button.\n   */\n\n\n  function createClearButton(element, inputObject, initial, internalCreateElement) {\n    var makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n    var button = makeElement('span', {\n      className: CLASSNAMES.CLEARICON\n    });\n    var container = inputObject.container;\n\n    if (!isNullOrUndefined(initial)) {\n      container.appendChild(button);\n    } else {\n      var baseElement = inputObject.container.classList.contains(CLASSNAMES.FLOATINPUT) ? inputObject.container.querySelector('.' + CLASSNAMES.FLOATTEXT) : element;\n      baseElement.insertAdjacentElement('afterend', button);\n    }\n\n    if (!isNullOrUndefined(container) && container.classList.contains(CLASSNAMES.FLOATINPUT)) {\n      addClass([container], CLASSNAMES.INPUTGROUP);\n    }\n\n    addClass([button], CLASSNAMES.CLEARICONHIDE);\n    wireClearBtnEvents(element, button, container);\n    button.setAttribute('aria-label', 'close');\n    return button;\n  }\n\n  function wireClearBtnEvents(element, button, container) {\n    button.addEventListener('click', function (event) {\n      if (!(element.classList.contains(CLASSNAMES.DISABLE) || element.readOnly)) {\n        event.preventDefault();\n\n        if (element !== document.activeElement) {\n          element.focus();\n        }\n\n        element.value = '';\n        addClass([button], CLASSNAMES.CLEARICONHIDE);\n      }\n    });\n    element.addEventListener('input', function (event) {\n      updateIconState(element.value, button);\n    });\n    element.addEventListener('focus', function (event) {\n      updateIconState(element.value, button);\n    });\n    element.addEventListener('blur', function (event) {\n      setTimeout(function () {\n        addClass([button], CLASSNAMES.CLEARICONHIDE);\n      }, 200);\n    });\n  }\n\n  Input.wireClearBtnEvents = wireClearBtnEvents;\n\n  function validateLabel(element, floatLabelType) {\n    var parent = getParentNode(element);\n\n    if (parent.classList.contains(CLASSNAMES.FLOATINPUT) && floatLabelType === 'Auto') {\n      var label = getParentNode(element).getElementsByClassName('e-float-text')[0];\n      updateLabelState(element.value, label);\n    }\n  }\n  /**\n   * To create input box contianer.\n   */\n\n\n  function createInputContainer(args, className, tagClass, tag, internalCreateElement) {\n    var makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n    var container;\n\n    if (!isNullOrUndefined(args.customTag)) {\n      container = makeElement(args.customTag, {\n        className: className\n      });\n      container.classList.add(tagClass);\n    } else {\n      container = makeElement(tag, {\n        className: className\n      });\n    }\n\n    container.classList.add('e-control-wrapper');\n    return container;\n  }\n\n  function encodePlaceHolder(placeholder) {\n    var result = '';\n\n    if (!isNullOrUndefined(placeholder) && placeholder !== '') {\n      var spanEle = document.createElement('span');\n      spanEle.innerHTML = '<input  placeholder=\"' + placeholder + '\"/>';\n      var hiddenInput = spanEle.children[0];\n      result = hiddenInput.placeholder;\n    }\n\n    return result;\n  }\n  /**\n   * Sets the value to the input element.\n   * ```\n   * E.g : Input.setValue('content', element, \"Auto\", true );\n   * ```\n   * @param value - Specify the value of the input element.\n   * @param element - The element on which the specified value is updated.\n   * @param floatLabelType - Specify the float label type of the input element.\n   * @param clearButton - Boolean value to specify whether the clear icon is enabled / disabled on the input.\n   */\n\n\n  function setValue(value, element, floatLabelType, clearButton) {\n    element.value = value;\n\n    if (!isNullOrUndefined(floatLabelType) && floatLabelType === 'Auto') {\n      validateLabel(element, floatLabelType);\n    }\n\n    if (!isNullOrUndefined(clearButton) && clearButton) {\n      var parentElement = getParentNode(element);\n\n      if (!isNullOrUndefined(parentElement)) {\n        var button = parentElement.getElementsByClassName(CLASSNAMES.CLEARICON)[0];\n\n        if (element.value && parentElement.classList.contains('e-input-focus')) {\n          removeClass([button], CLASSNAMES.CLEARICONHIDE);\n        } else {\n          addClass([button], CLASSNAMES.CLEARICONHIDE);\n        }\n      }\n    }\n\n    checkInputValue(floatLabelType, element);\n  }\n\n  Input.setValue = setValue;\n  /**\n   * Sets the single or multiple cssClass to wrapper of input element.\n   * ```\n   * E.g : Input.setCssClass('e-custom-class', [element]);\n   * ```\n   * @param cssClass - Css class names which are needed to add.\n   * @param elements - The elements which are needed to add / remove classes.\n   * @param oldClass - Css class names which are needed to remove. If old classes are need to remove, can give this optional parameter.\n   */\n\n  function setCssClass(cssClass, elements, oldClass) {\n    if (!isNullOrUndefined(oldClass) && oldClass !== '') {\n      removeClass(elements, oldClass.split(' '));\n    }\n\n    if (!isNullOrUndefined(cssClass) && cssClass !== '') {\n      addClass(elements, cssClass.split(' '));\n    }\n  }\n\n  Input.setCssClass = setCssClass;\n  /**\n   * Set the width to the wrapper of input element.\n   * ```\n   * E.g : Input.setWidth('200px', container);\n   * ```\n   * @param width - Width value which is need to add.\n   * @param container - The element on which the width is need to add.\n   */\n\n  function setWidth(width, container) {\n    if (typeof width === 'number') {\n      container.style.width = formatUnit(width);\n    } else if (typeof width === 'string') {\n      container.style.width = width.match(/px|%|em/) ? width : formatUnit(width);\n    }\n  }\n\n  Input.setWidth = setWidth;\n  /**\n   * Set the placeholder attribute to the input element.\n   * ```\n   * E.g : Input.setPlaceholder('Search here', element);\n   * ```\n   * @param placeholder - Placeholder value which is need to add.\n   * @param element - The element on which the placeholder is need to add.\n   */\n\n  function setPlaceholder(placeholder, element) {\n    var parentElement;\n    placeholder = encodePlaceHolder(placeholder);\n    parentElement = getParentNode(element);\n\n    if (parentElement.classList.contains(CLASSNAMES.FLOATINPUT)) {\n      if (!isNullOrUndefined(placeholder) && placeholder !== '') {\n        parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = placeholder;\n        parentElement.classList.remove(CLASSNAMES.NOFLOATLABEL);\n        element.removeAttribute('placeholder');\n      } else {\n        parentElement.classList.add(CLASSNAMES.NOFLOATLABEL);\n        parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = '';\n      }\n    } else {\n      if (!isNullOrUndefined(placeholder) && placeholder !== '') {\n        attributes(element, {\n          'placeholder': placeholder,\n          'aria-placeholder': placeholder\n        });\n      } else {\n        element.removeAttribute('placeholder');\n        element.removeAttribute('aria-placeholder');\n      }\n    }\n  }\n\n  Input.setPlaceholder = setPlaceholder;\n  /**\n   * Set the read only attribute to the input element\n   * ```\n   * E.g : Input.setReadonly(true, element);\n   * ```\n   * @param isReadonly\n   * - Boolean value to specify whether to set read only. Setting \"True\" value enables read only.\n   * @param element\n   * - The element which is need to enable read only.\n   */\n\n  function setReadonly(isReadonly, element, floatLabelType) {\n    if (isReadonly) {\n      attributes(element, {\n        readonly: ''\n      });\n    } else {\n      element.removeAttribute('readonly');\n    }\n\n    if (!isNullOrUndefined(floatLabelType)) {\n      validateLabel(element, floatLabelType);\n    }\n  }\n\n  Input.setReadonly = setReadonly;\n  /**\n   * Displays the element direction from right to left when its enabled.\n   * ```\n   * E.g : Input.setEnableRtl(true, [inputObj.container]);\n   * ```\n   * @param isRtl\n   * - Boolean value to specify whether to set RTL. Setting \"True\" value enables the RTL mode.\n   * @param elements\n   * - The elements that are needed to enable/disable RTL.\n   */\n\n  function setEnableRtl(isRtl, elements) {\n    if (isRtl) {\n      addClass(elements, CLASSNAMES.RTL);\n    } else {\n      removeClass(elements, CLASSNAMES.RTL);\n    }\n  }\n\n  Input.setEnableRtl = setEnableRtl;\n  /**\n   * Enables or disables the given input element.\n   * ```\n   * E.g : Input.setEnabled(false, element);\n   * ```\n   * @param isEnable\n   * - Boolean value to specify whether to enable or disable.\n   * @param element\n   * - Element to be enabled or disabled.\n   */\n\n  function setEnabled(isEnable, element, floatLabelType, inputContainer) {\n    var disabledAttrs = {\n      'disabled': 'disabled',\n      'aria-disabled': 'true'\n    };\n    var considerWrapper = isNullOrUndefined(inputContainer) ? false : true;\n\n    if (isEnable) {\n      element.classList.remove(CLASSNAMES.DISABLE);\n      removeAttributes(disabledAttrs, element);\n\n      if (considerWrapper) {\n        removeClass([inputContainer], CLASSNAMES.DISABLE);\n      }\n    } else {\n      element.classList.add(CLASSNAMES.DISABLE);\n      addAttributes(disabledAttrs, element);\n\n      if (considerWrapper) {\n        addClass([inputContainer], CLASSNAMES.DISABLE);\n      }\n    }\n\n    if (!isNullOrUndefined(floatLabelType)) {\n      validateLabel(element, floatLabelType);\n    }\n  }\n\n  Input.setEnabled = setEnabled;\n\n  function setClearButton(isClear, element, inputObject, initial, internalCreateElement) {\n    var makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n\n    if (isClear) {\n      inputObject.clearButton = createClearButton(element, inputObject, initial, makeElement);\n    } else {\n      inputObject.clearButton.remove();\n      inputObject.clearButton = null;\n    }\n  }\n\n  Input.setClearButton = setClearButton;\n  /**\n   * Removing the multiple attributes from the given element such as \"disabled\",\"id\" , etc.\n   * ```\n   * E.g : Input.removeAttributes({ 'disabled': 'disabled', 'aria-disabled': 'true' }, element);\n   * ```\n   * @param attrs\n   *  - Array of attributes which are need to removed from the element.\n   * @param element\n   *  - Element on which the attributes are needed to be removed.\n   */\n\n  function removeAttributes(attrs, element) {\n    for (var _i = 0, _a = Object.keys(attrs); _i < _a.length; _i++) {\n      var key = _a[_i];\n      var parentElement = void 0;\n      parentElement = getParentNode(element);\n\n      if (key === 'disabled') {\n        element.classList.remove(CLASSNAMES.DISABLE);\n      }\n\n      if (key === 'disabled' && parentElement.classList.contains(CLASSNAMES.INPUTGROUP)) {\n        parentElement.classList.remove(CLASSNAMES.DISABLE);\n      }\n\n      if (key === 'placeholder' && parentElement.classList.contains(CLASSNAMES.FLOATINPUT)) {\n        parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = '';\n      } else {\n        element.removeAttribute(key);\n      }\n    }\n  }\n\n  Input.removeAttributes = removeAttributes;\n  /**\n   * Adding the multiple attributes to the given element such as \"disabled\",\"id\" , etc.\n   * ```\n   * E.g : Input.addAttributes({ 'id': 'inputpopup' }, element);\n   * ```\n   * @param attrs\n   * - Array of attributes which is added to element.\n   * @param element\n   * - Element on which the attributes are needed to be added.\n   */\n\n  function addAttributes(attrs, element) {\n    for (var _i = 0, _a = Object.keys(attrs); _i < _a.length; _i++) {\n      var key = _a[_i];\n      var parentElement = void 0;\n      parentElement = getParentNode(element);\n\n      if (key === 'disabled') {\n        element.classList.add(CLASSNAMES.DISABLE);\n      }\n\n      if (key === 'disabled' && parentElement.classList.contains(CLASSNAMES.INPUTGROUP)) {\n        parentElement.classList.add(CLASSNAMES.DISABLE);\n      }\n\n      if (key === 'placeholder' && parentElement.classList.contains(CLASSNAMES.FLOATINPUT)) {\n        parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = attrs[key];\n      } else {\n        element.setAttribute(key, attrs[key]);\n      }\n    }\n  }\n\n  Input.addAttributes = addAttributes;\n\n  function removeFloating(input) {\n    var container = input.container;\n\n    if (!isNullOrUndefined(container) && container.classList.contains(CLASSNAMES.FLOATINPUT)) {\n      var inputEle = container.querySelector('textarea') ? container.querySelector('textarea') : container.querySelector('input');\n      var placeholder = container.querySelector('.' + CLASSNAMES.FLOATTEXT).textContent;\n      var clearButton = container.querySelector('.e-clear-icon') !== null;\n      detach(container.querySelector('.' + CLASSNAMES.FLOATLINE));\n      detach(container.querySelector('.' + CLASSNAMES.FLOATTEXT));\n      classList(container, [CLASSNAMES.INPUTGROUP], [CLASSNAMES.FLOATINPUT]);\n      unwireFloatingEvents(inputEle);\n      attributes(inputEle, {\n        'placeholder': placeholder\n      });\n      inputEle.classList.add(CLASSNAMES.INPUT);\n\n      if (!clearButton && inputEle.tagName === 'INPUT') {\n        inputEle.removeAttribute('required');\n      }\n    }\n  }\n\n  Input.removeFloating = removeFloating;\n\n  function addFloating(input, type, placeholder, internalCreateElement) {\n    var makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n    var container = closest(input, '.' + CLASSNAMES.INPUTGROUP);\n    floatType = type;\n\n    if (type !== 'Never') {\n      var customTag = container.tagName;\n      customTag = customTag !== 'DIV' && customTag !== 'SPAN' ? customTag : null;\n      var args = {\n        element: input,\n        floatLabelType: type,\n        customTag: customTag,\n        properties: {\n          placeholder: placeholder\n        }\n      };\n      var iconEle = container.querySelector('.e-clear-icon');\n      var inputObj = {\n        container: container\n      };\n      input.classList.remove(CLASSNAMES.INPUT);\n      createFloatingInput(args, inputObj, makeElement);\n      var isPrependIcon = container.classList.contains('e-float-icon-left');\n\n      if (isNullOrUndefined(iconEle)) {\n        if (isPrependIcon) {\n          var inputWrap = container.querySelector('.e-input-in-wrap');\n          iconEle = inputWrap.querySelector('.e-input-group-icon');\n        } else {\n          iconEle = container.querySelector('.e-input-group-icon');\n        }\n      }\n\n      if (isNullOrUndefined(iconEle)) {\n        if (isPrependIcon) {\n          iconEle = container.querySelector('.e-input-group-icon');\n        }\n\n        if (isNullOrUndefined(iconEle)) {\n          container.classList.remove(CLASSNAMES.INPUTGROUP);\n        }\n      } else {\n        var floatLine = container.querySelector('.' + CLASSNAMES.FLOATLINE);\n        var floatText = container.querySelector('.' + CLASSNAMES.FLOATTEXT);\n        var wrapper = isPrependIcon ? container.querySelector('.e-input-in-wrap') : container;\n        wrapper.insertBefore(input, iconEle);\n        wrapper.insertBefore(floatLine, iconEle);\n        wrapper.insertBefore(floatText, iconEle);\n      }\n    }\n\n    checkFloatLabelType(type, input.parentElement);\n  }\n\n  Input.addFloating = addFloating;\n  /**\n   * Enable or Disable the ripple effect on the icons inside the Input. Ripple effect is only applicable for material theme.\n   * ```\n   * E.g : Input.setRipple(true, [inputObjects]);\n   * ```\n   * @param isRipple\n   * - Boolean value to specify whether to enable the ripple effect.\n   * @param inputObject\n   * - Specify the collection of input objects.\n   */\n\n  function setRipple(isRipple, inputObj) {\n    for (var i = 0; i < inputObj.length; i++) {\n      _internalRipple(isRipple, inputObj[i].container);\n    }\n  }\n\n  Input.setRipple = setRipple;\n\n  function _internalRipple(isRipple, container, button) {\n    var argsButton = [];\n    argsButton.push(button);\n    var buttons = isNullOrUndefined(button) ? container.querySelectorAll('.e-input-group-icon') : argsButton;\n\n    if (isRipple && buttons.length > 0) {\n      for (var index = 0; index < buttons.length; index++) {\n        buttons[index].addEventListener('mousedown', _onMouseDownRipple, false);\n        buttons[index].addEventListener('mouseup', _onMouseUpRipple, false);\n      }\n    } else if (buttons.length > 0) {\n      for (var index = 0; index < buttons.length; index++) {\n        buttons[index].removeEventListener('mousedown', _onMouseDownRipple, this);\n        buttons[index].removeEventListener('mouseup', _onMouseUpRipple, this);\n      }\n    }\n  }\n\n  function _onMouseRipple(container, button) {\n    if (!container.classList.contains('e-disabled') && !container.querySelector('input').readOnly) {\n      button.classList.add('e-input-btn-ripple');\n    }\n  }\n\n  function _onMouseDownRipple() {\n    var ele = this;\n    var parentEle = this.parentElement;\n\n    while (!parentEle.classList.contains('e-input-group')) {\n      parentEle = parentEle.parentElement;\n    }\n\n    _onMouseRipple(parentEle, ele);\n  }\n\n  function _onMouseUpRipple() {\n    var ele = this;\n    setTimeout(function () {\n      ele.classList.remove('e-input-btn-ripple');\n    }, 500);\n  }\n\n  function createIconEle(iconClass, makeElement) {\n    var button = makeElement('span', {\n      className: iconClass\n    });\n    button.classList.add('e-input-group-icon');\n    return button;\n  }\n  /**\n   * Creates a new span element with the given icons added and append it in container element.\n   * ```\n   * E.g : Input.addIcon('append', 'e-icon-spin', inputObj.container, inputElement);\n   * ```\n   * @param position - Specify the icon placement on the input.Possible values are append and prepend.\n   * @param iconClass - Icon classes which are need to add to the span element which is going to created.\n   * Span element acts as icon or button element for input.\n   * @param container - The container on which created span element is going to append.\n   * @param inputElement - The inputElement on which created span element is going to prepend.\n   */\n  // tslint:disable\n\n\n  function addIcon(position, icons, container, input, internalCreate) {\n    // tslint:enable\n    var result = typeof icons === 'string' ? icons.split(',') : icons;\n\n    if (position.toLowerCase() === 'append') {\n      for (var _i = 0, result_1 = result; _i < result_1.length; _i++) {\n        var icon = result_1[_i];\n        appendSpan(icon, container, internalCreate);\n      }\n    } else {\n      for (var _a = 0, result_2 = result; _a < result_2.length; _a++) {\n        var icon = result_2[_a];\n        prependSpan(icon, container, input, internalCreate);\n      }\n    }\n  }\n\n  Input.addIcon = addIcon;\n  /**\n   * Creates a new span element with the given icons added and prepend it in input element.\n   * ```\n   * E.g : Input.prependSpan('e-icon-spin', inputObj.container, inputElement);\n   * ```\n   * @param iconClass - Icon classes which are need to add to the span element which is going to created.\n   * Span element acts as icon or button element for input.\n   * @param container - The container on which created span element is going to append.\n   * @param inputElement - The inputElement on which created span element is going to prepend.\n   */\n  // tslint:disable\n\n  function prependSpan(iconClass, container, inputElement, internalCreateElement) {\n    // tslint:enable\n    var makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n    var button = createIconEle(iconClass, makeElement);\n    container.classList.add('e-float-icon-left');\n    var innerWrapper = container.querySelector('.e-input-in-wrap');\n\n    if (isNullOrUndefined(innerWrapper)) {\n      innerWrapper = makeElement('span', {\n        className: 'e-input-in-wrap'\n      });\n      inputElement.parentNode.insertBefore(innerWrapper, inputElement);\n      var result = container.querySelectorAll(inputElement.tagName + ' ~ *');\n      innerWrapper.appendChild(inputElement);\n\n      for (var i = 0; i < result.length; i++) {\n        innerWrapper.appendChild(result[i]);\n      }\n    }\n\n    innerWrapper.parentNode.insertBefore(button, innerWrapper);\n\n    if (!container.classList.contains(CLASSNAMES.INPUTGROUP)) {\n      container.classList.add(CLASSNAMES.INPUTGROUP);\n    }\n\n    _internalRipple(true, container, button);\n\n    return button;\n  }\n\n  Input.prependSpan = prependSpan;\n  /**\n   * Creates a new span element with the given icons added and append it in container element.\n   * ```\n   * E.g : Input.appendSpan('e-icon-spin', inputObj.container);\n   * ```\n   * @param iconClass - Icon classes which are need to add to the span element which is going to created.\n   * Span element acts as icon or button element for input.\n   * @param container - The container on which created span element is going to append.\n   */\n\n  function appendSpan(iconClass, container, internalCreateElement) {\n    var makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n    var button = createIconEle(iconClass, makeElement);\n\n    if (!container.classList.contains(CLASSNAMES.INPUTGROUP)) {\n      container.classList.add(CLASSNAMES.INPUTGROUP);\n    }\n\n    var wrap = container.classList.contains('e-float-icon-left') ? container.querySelector('.e-input-in-wrap') : container;\n    wrap.appendChild(button);\n\n    _internalRipple(true, container, button);\n\n    return button;\n  }\n\n  Input.appendSpan = appendSpan;\n})(Input || (Input = {}));","map":null,"metadata":{},"sourceType":"module"}