{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Property, NotifyPropertyChanges, Component, isBlazor, isRippleEnabled } from '@syncfusion/ej2-base';\nimport { addClass, Event, detach, removeClass } from '@syncfusion/ej2-base';\nimport { rippleEffect, EventHandler, Observer, SanitizeHtmlHelper } from '@syncfusion/ej2-base';\nimport { getTextNode } from '../common/common';\nexport var buttonObserver = new Observer();\nvar cssClassName = {\n  RTL: 'e-rtl',\n  BUTTON: 'e-btn',\n  PRIMARY: 'e-primary',\n  ICONBTN: 'e-icon-btn'\n};\n/**\n * The Button is a graphical user interface element that triggers an event on its click action. It can contain a text, an image, or both.\n * ```html\n * <button id=\"button\">Button</button>\n * ```\n * ```typescript\n * <script>\n * var btnObj = new Button();\n * btnObj.appendTo(\"#button\");\n * </script>\n * ```\n */\n\nvar Button =\n/** @class */\nfunction (_super) {\n  __extends(Button, _super);\n  /**\n   * Constructor for creating the widget\n   * @param  {ButtonModel} options?\n   * @param  {string|HTMLButtonElement} element?\n   */\n\n\n  function Button(options, element) {\n    return _super.call(this, options, element) || this;\n  }\n\n  Button.prototype.preRender = function () {// pre render code snippets\n  };\n  /**\n   * Initialize the control rendering\n   * @returns void\n   * @private\n   */\n\n\n  Button.prototype.render = function () {\n    if (isBlazor() && this.isServerRendered) {\n      if (!this.disabled) {\n        this.wireEvents();\n      }\n\n      buttonObserver.notify('component-rendered', {\n        id: this.element.id,\n        instance: this\n      });\n    } else {\n      this.initialize();\n    }\n\n    this.removeRippleEffect = rippleEffect(this.element, {\n      selector: '.' + cssClassName.BUTTON\n    });\n    this.renderComplete();\n  };\n\n  Button.prototype.initialize = function () {\n    if (this.cssClass) {\n      addClass([this.element], this.cssClass.split(' '));\n    }\n\n    if (this.isPrimary) {\n      this.element.classList.add(cssClassName.PRIMARY);\n    }\n\n    if (!isBlazor() || isBlazor() && this.getModuleName() !== 'progress-btn') {\n      if (this.content) {\n        var tempContent = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(this.content) : this.content;\n        this.element.innerHTML = tempContent;\n      }\n\n      this.setIconCss();\n    }\n\n    if (this.enableRtl) {\n      this.element.classList.add(cssClassName.RTL);\n    }\n\n    if (this.disabled) {\n      this.controlStatus(this.disabled);\n    } else {\n      this.wireEvents();\n    }\n  };\n\n  Button.prototype.controlStatus = function (disabled) {\n    this.element.disabled = disabled;\n  };\n\n  Button.prototype.setIconCss = function () {\n    if (this.iconCss) {\n      var span = this.createElement('span', {\n        className: 'e-btn-icon ' + this.iconCss\n      });\n\n      if (!this.element.textContent.trim()) {\n        this.element.classList.add(cssClassName.ICONBTN);\n      } else {\n        span.classList.add('e-icon-' + this.iconPosition.toLowerCase());\n\n        if (this.iconPosition === 'Top' || this.iconPosition === 'Bottom') {\n          this.element.classList.add('e-' + this.iconPosition.toLowerCase() + '-icon-btn');\n        }\n      }\n\n      var node = this.element.childNodes[0];\n\n      if (node && (this.iconPosition === 'Left' || this.iconPosition === 'Top')) {\n        this.element.insertBefore(span, node);\n      } else {\n        this.element.appendChild(span);\n      }\n    }\n  };\n\n  Button.prototype.wireEvents = function () {\n    if (this.isToggle) {\n      EventHandler.add(this.element, 'click', this.btnClickHandler, this);\n    }\n  };\n\n  Button.prototype.unWireEvents = function () {\n    if (this.isToggle) {\n      EventHandler.remove(this.element, 'click', this.btnClickHandler);\n    }\n  };\n\n  Button.prototype.btnClickHandler = function () {\n    if (this.element.classList.contains('e-active')) {\n      this.element.classList.remove('e-active');\n    } else {\n      this.element.classList.add('e-active');\n    }\n  };\n  /**\n   * Destroys the widget.\n   * @returns void\n   */\n\n\n  Button.prototype.destroy = function () {\n    if (!(isBlazor() && this.isServerRendered)) {\n      var span = void 0;\n      var classList = [cssClassName.PRIMARY, cssClassName.RTL, cssClassName.ICONBTN, 'e-success', 'e-info', 'e-danger', 'e-warning', 'e-flat', 'e-outline', 'e-small', 'e-bigger', 'e-active', 'e-round', 'e-top-icon-btn', 'e-bottom-icon-btn'];\n\n      if (this.cssClass) {\n        classList = classList.concat(this.cssClass.split(' '));\n      }\n\n      _super.prototype.destroy.call(this);\n\n      removeClass([this.element], classList);\n\n      if (!this.element.getAttribute('class')) {\n        this.element.removeAttribute('class');\n      }\n\n      if (this.disabled) {\n        this.element.removeAttribute('disabled');\n      }\n\n      if (this.content) {\n        this.element.innerHTML = this.element.innerHTML.replace(this.content, '');\n      }\n\n      span = this.element.querySelector('span.e-btn-icon');\n\n      if (span) {\n        detach(span);\n      }\n    }\n\n    this.unWireEvents();\n\n    if (isRippleEnabled) {\n      this.removeRippleEffect();\n    }\n  };\n  /**\n   * Get component name.\n   * @returns string\n   * @private\n   */\n\n\n  Button.prototype.getModuleName = function () {\n    return 'btn';\n  };\n  /**\n   * Get the properties to be maintained in the persisted state.\n   * @returns string\n   * @private\n   */\n\n\n  Button.prototype.getPersistData = function () {\n    return this.addOnPersist([]);\n  };\n  /**\n   * Dynamically injects the required modules to the component.\n   * @private\n   */\n\n\n  Button.Inject = function () {// Inject code snippets\n  };\n  /**\n   * Called internally if any of the property value changed.\n   * @param  {ButtonModel} newProp\n   * @param  {ButtonModel} oldProp\n   * @returns void\n   * @private\n   */\n\n\n  Button.prototype.onPropertyChanged = function (newProp, oldProp) {\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'isPrimary':\n          if (newProp.isPrimary) {\n            this.element.classList.add(cssClassName.PRIMARY);\n          } else {\n            this.element.classList.remove(cssClassName.PRIMARY);\n          }\n\n          break;\n\n        case 'disabled':\n          this.controlStatus(newProp.disabled);\n          break;\n\n        case 'iconCss':\n          var span = this.element.querySelector('span.e-btn-icon');\n\n          if (span) {\n            if (newProp.iconCss) {\n              span.className = 'e-btn-icon ' + newProp.iconCss;\n\n              if (this.element.textContent.trim()) {\n                if (this.iconPosition === 'Left') {\n                  span.classList.add('e-icon-left');\n                } else {\n                  span.classList.add('e-icon-right');\n                }\n              }\n            } else {\n              detach(span);\n            }\n          } else {\n            this.setIconCss();\n          }\n\n          break;\n\n        case 'iconPosition':\n          removeClass([this.element], ['e-top-icon-btn', 'e-bottom-icon-btn']);\n          span = this.element.querySelector('span.e-btn-icon');\n\n          if (span) {\n            detach(span);\n          }\n\n          this.setIconCss();\n          break;\n\n        case 'cssClass':\n          if (oldProp.cssClass) {\n            removeClass([this.element], oldProp.cssClass.split(' '));\n          }\n\n          if (newProp.cssClass) {\n            addClass([this.element], newProp.cssClass.split(' '));\n          }\n\n          break;\n\n        case 'enableRtl':\n          if (newProp.enableRtl) {\n            this.element.classList.add(cssClassName.RTL);\n          } else {\n            this.element.classList.remove(cssClassName.RTL);\n          }\n\n          break;\n\n        case 'content':\n          var node = getTextNode(this.element);\n\n          if (!node) {\n            this.element.classList.remove(cssClassName.ICONBTN);\n          }\n\n          if (!isBlazor() || isBlazor() && !this.isServerRendered && this.getModuleName() !== 'progress-btn') {\n            if (this.enableHtmlSanitizer) {\n              newProp.content = SanitizeHtmlHelper.sanitize(newProp.content);\n            }\n\n            this.element.innerHTML = newProp.content;\n            this.setIconCss();\n          }\n\n          break;\n\n        case 'isToggle':\n          if (newProp.isToggle) {\n            EventHandler.add(this.element, 'click', this.btnClickHandler, this);\n          } else {\n            EventHandler.remove(this.element, 'click', this.btnClickHandler);\n            removeClass([this.element], ['e-active']);\n          }\n\n          break;\n      }\n    }\n  };\n  /**\n   * Click the button element\n   * its native method\n   * @public\n   */\n\n\n  Button.prototype.click = function () {\n    this.element.click();\n  };\n  /**\n   * Sets the focus to Button\n   * its native method\n   * @public\n   */\n\n\n  Button.prototype.focusIn = function () {\n    this.element.focus();\n  };\n\n  __decorate([Property('Left')], Button.prototype, \"iconPosition\", void 0);\n\n  __decorate([Property('')], Button.prototype, \"iconCss\", void 0);\n\n  __decorate([Property(false)], Button.prototype, \"disabled\", void 0);\n\n  __decorate([Property(false)], Button.prototype, \"isPrimary\", void 0);\n\n  __decorate([Property('')], Button.prototype, \"cssClass\", void 0);\n\n  __decorate([Property('')], Button.prototype, \"content\", void 0);\n\n  __decorate([Property(false)], Button.prototype, \"isToggle\", void 0);\n\n  __decorate([Property()], Button.prototype, \"locale\", void 0);\n\n  __decorate([Property(false)], Button.prototype, \"enableHtmlSanitizer\", void 0);\n\n  __decorate([Event()], Button.prototype, \"created\", void 0);\n\n  Button = __decorate([NotifyPropertyChanges], Button);\n  return Button;\n}(Component);\n\nexport { Button };","map":null,"metadata":{},"sourceType":"module"}