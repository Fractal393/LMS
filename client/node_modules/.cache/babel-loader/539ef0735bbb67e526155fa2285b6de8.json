{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Component, Property, Event, EventHandler, L10n, compile, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { NotifyPropertyChanges, detach, append, Animation } from '@syncfusion/ej2-base';\nimport { addClass, removeClass, KeyboardEvents, setValue, getValue, ChildProperty } from '@syncfusion/ej2-base';\nimport { Collection, Complex, Browser, Ajax, getUniqueID, closest } from '@syncfusion/ej2-base';\nimport { createSpinner, showSpinner, hideSpinner } from '@syncfusion/ej2-popups';\nimport { updateBlazorTemplate, resetBlazorTemplate, isBlazor } from '@syncfusion/ej2-base';\nvar ROOT = 'e-uploader';\nvar CONTROL_WRAPPER = 'e-upload e-control-wrapper';\nvar INPUT_WRAPPER = 'e-file-select';\nvar DROP_AREA = 'e-file-drop';\nvar DROP_WRAPPER = 'e-file-select-wrap';\nvar LIST_PARENT = 'e-upload-files';\nvar FILE = 'e-upload-file-list';\nvar STATUS = 'e-file-status';\nvar ACTION_BUTTONS = 'e-upload-actions';\nvar UPLOAD_BUTTONS = 'e-file-upload-btn e-css e-btn e-flat e-primary';\nvar CLEAR_BUTTONS = 'e-file-clear-btn e-css e-btn e-flat';\nvar FILE_NAME = 'e-file-name';\nvar FILE_TYPE = 'e-file-type';\nvar FILE_SIZE = 'e-file-size';\nvar REMOVE_ICON = 'e-file-remove-btn';\nvar DELETE_ICON = 'e-file-delete-btn';\nvar SPINNER_PANE = 'e-spinner-pane';\nvar ABORT_ICON = 'e-file-abort-btn';\nvar RETRY_ICON = 'e-file-reload-btn';\nvar DRAG_HOVER = 'e-upload-drag-hover';\nvar PROGRESS_WRAPPER = 'e-upload-progress-wrap';\nvar PROGRESSBAR = 'e-upload-progress-bar';\nvar PROGRESSBAR_TEXT = 'e-progress-bar-text';\nvar UPLOAD_INPROGRESS = 'e-upload-progress';\nvar UPLOAD_SUCCESS = 'e-upload-success';\nvar UPLOAD_FAILED = 'e-upload-fails';\nvar TEXT_CONTAINER = 'e-file-container';\nvar VALIDATION_FAILS = 'e-validation-fails';\nvar RTL = 'e-rtl';\nvar DISABLED = 'e-disabled';\nvar RTL_CONTAINER = 'e-rtl-container';\nvar ICON_FOCUSED = 'e-clear-icon-focus';\nvar PROGRESS_INNER_WRAPPER = 'e-progress-inner-wrap';\nvar PAUSE_UPLOAD = 'e-file-pause-btn';\nvar RESUME_UPLOAD = 'e-file-play-btn';\nvar RESTRICT_RETRY = 'e-restrict-retry';\nvar wrapperAttr = ['title', 'style', 'class'];\nvar FORM_UPLOAD = 'e-form-upload';\nvar HIDDEN_INPUT = 'e-hidden-file-input';\nvar INVALID_FILE = 'e-file-invalid';\nvar INFORMATION = 'e-file-information';\n\nvar FilesProp =\n/** @class */\nfunction (_super) {\n  __extends(FilesProp, _super);\n\n  function FilesProp() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property('')], FilesProp.prototype, \"name\", void 0);\n\n  __decorate([Property(null)], FilesProp.prototype, \"size\", void 0);\n\n  __decorate([Property('')], FilesProp.prototype, \"type\", void 0);\n\n  return FilesProp;\n}(ChildProperty);\n\nexport { FilesProp };\n\nvar ButtonsProps =\n/** @class */\nfunction (_super) {\n  __extends(ButtonsProps, _super);\n\n  function ButtonsProps() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property('Browse...')], ButtonsProps.prototype, \"browse\", void 0);\n\n  __decorate([Property('Upload')], ButtonsProps.prototype, \"upload\", void 0);\n\n  __decorate([Property('Clear')], ButtonsProps.prototype, \"clear\", void 0);\n\n  return ButtonsProps;\n}(ChildProperty);\n\nexport { ButtonsProps };\n\nvar AsyncSettings =\n/** @class */\nfunction (_super) {\n  __extends(AsyncSettings, _super);\n\n  function AsyncSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property('')], AsyncSettings.prototype, \"saveUrl\", void 0);\n\n  __decorate([Property('')], AsyncSettings.prototype, \"removeUrl\", void 0);\n\n  __decorate([Property(0)], AsyncSettings.prototype, \"chunkSize\", void 0);\n\n  __decorate([Property(3)], AsyncSettings.prototype, \"retryCount\", void 0);\n\n  __decorate([Property(500)], AsyncSettings.prototype, \"retryAfterDelay\", void 0);\n\n  return AsyncSettings;\n}(ChildProperty);\n\nexport { AsyncSettings };\n/**\n * The uploader component allows to upload images, documents, and other files from local to server.\n * ```html\n * <input type='file' name='images[]' id='upload'/>\n * ```\n * ```typescript\n * <script>\n *   var uploadObj = new Uploader();\n *   uploadObj.appendTo('#upload');\n * </script>\n * ```\n */\n\nvar Uploader =\n/** @class */\nfunction (_super) {\n  __extends(Uploader, _super);\n  /**\n   * Triggers when change the Uploader value.\n   */\n\n\n  function Uploader(options, element) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.initialAttr = {\n      accept: null,\n      multiple: false,\n      disabled: false\n    };\n    _this.uploadedFilesData = [];\n    _this.base64String = [];\n    _this.isForm = false;\n    _this.allTypes = false;\n    _this.pausedData = [];\n    _this.uploadMetaData = [];\n    _this.tabIndex = '0';\n    _this.btnTabIndex = '0';\n    _this.disableKeyboardNavigation = false;\n    _this.count = -1;\n    _this.actionCompleteCount = 0;\n    _this.flag = true;\n    _this.selectedFiles = [];\n    _this.uploaderName = 'UploadFiles';\n    _this.fileStreams = [];\n    _this.newFileRef = 0;\n    _this.isFirstFileOnSelection = false;\n    /**\n     * Get the file item(li) which are shown in file list.\n     * @private\n     */\n\n    _this.fileList = [];\n    /**\n     * Get the data of files which are shown in file list.\n     * @private\n     */\n\n    _this.filesData = [];\n    _this.uploaderOptions = options;\n    return _this;\n  }\n  /**\n   * Calls internally if any of the property value is changed.\n   * @private\n   */\n\n\n  Uploader.prototype.onPropertyChanged = function (newProp, oldProp) {\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'allowedExtensions':\n          this.setExtensions(this.allowedExtensions);\n          this.clearAll();\n          break;\n\n        case 'enabled':\n          this.setControlStatus();\n          break;\n\n        case 'multiple':\n          this.setMultipleSelection();\n          break;\n\n        case 'enableRtl':\n          this.setRTL();\n          this.reRenderFileList();\n          break;\n\n        case 'buttons':\n          this.buttons.browse = isNullOrUndefined(this.buttons.browse) ? '' : this.buttons.browse;\n          this.buttons.clear = isNullOrUndefined(this.buttons.clear) ? '' : this.buttons.clear;\n          this.buttons.upload = isNullOrUndefined(this.buttons.upload) ? '' : this.buttons.upload;\n          this.renderButtonTemplates();\n          break;\n\n        case 'dropArea':\n          this.unBindDropEvents();\n          this.updateDropArea();\n          break;\n\n        case 'htmlAttributes':\n          this.updateHTMLAttrToElement();\n          this.updateHTMLAttrToWrapper();\n          this.checkHTMLAttributes(true);\n          break;\n\n        case 'files':\n          this.renderPreLoadFiles();\n          break;\n\n        case 'directoryUpload':\n          this.updateDirectoryAttributes();\n          break;\n\n        case 'template':\n          if (!this.isServerBlazor) {\n            this.clearAll();\n          }\n\n          break;\n\n        case 'minFileSize':\n        case 'maxFileSize':\n        case 'autoUpload':\n          this.clearAll();\n          break;\n\n        case 'sequentialUpload':\n          this.clearAll();\n          break;\n\n        case 'locale':\n          this.l10n.setLocale(this.locale);\n          this.setLocalizedTexts();\n          this.preLocaleObj = getValue('currentLocale', this.l10n);\n          break;\n\n        case 'cssClass':\n          this.setCSSClass(oldProp.cssClass);\n          break;\n      }\n    }\n  };\n\n  Uploader.prototype.setLocalizedTexts = function () {\n    if (isNullOrUndefined(this.template)) {\n      if (typeof this.buttons.browse === 'string') {\n        this.browseButton.innerText = this.buttons.browse === 'Browse...' ? this.localizedTexts('Browse') : this.buttons.browse;\n        this.browseButton.setAttribute('title', this.browseButton.innerText);\n\n        if (this.uploadWrapper && !isNullOrUndefined(this.uploadWrapper.querySelector('.' + DROP_AREA))) {\n          this.uploadWrapper.querySelector('.' + DROP_AREA).innerHTML = this.localizedTexts('dropFilesHint');\n        }\n      }\n\n      this.updateFileList();\n    }\n  };\n\n  Uploader.prototype.getKeyValue = function (val) {\n    var keyValue;\n\n    for (var _i = 0, _a = Object.keys(this.preLocaleObj); _i < _a.length; _i++) {\n      var key = _a[_i];\n\n      if (this.preLocaleObj[key] === val) {\n        keyValue = key;\n      }\n    }\n\n    return keyValue;\n  };\n\n  Uploader.prototype.updateFileList = function () {\n    var element;\n    /* istanbul ignore next */\n\n    if (this.fileList.length > 0 && !isNullOrUndefined(this.uploadWrapper.querySelector('.' + LIST_PARENT))) {\n      for (var i = 0; i < this.fileList.length; i++) {\n        element = this.fileList[i].querySelector('.e-file-status');\n        element.innerHTML = this.localizedTexts(this.getKeyValue(this.filesData[i].status));\n        this.filesData[i].status = this.localizedTexts(this.getKeyValue(this.filesData[i].status));\n\n        if (this.fileList[i].classList.contains(UPLOAD_SUCCESS)) {\n          this.fileList[i].querySelector('.e-icons').setAttribute('title', this.localizedTexts('delete'));\n        }\n\n        if (this.fileList[i].querySelector('.e-file-play-btn')) {\n          this.fileList[i].querySelector('.e-icons').setAttribute('title', this.localizedTexts('resume'));\n        }\n\n        if (this.fileList[i].querySelector('.e-file-remove-btn')) {\n          this.fileList[i].querySelector('.e-icons').setAttribute('title', this.localizedTexts('remove'));\n        }\n\n        if (this.fileList[i].querySelector('.e-file-reload-btn')) {\n          this.fileList[i].querySelector('.e-icons').setAttribute('title', this.localizedTexts('retry'));\n        }\n\n        if (!this.autoUpload) {\n          this.uploadButton.innerText = this.buttons.upload === 'Upload' ? this.localizedTexts('Upload') : this.buttons.upload;\n          this.uploadButton.setAttribute('title', this.localizedTexts('Upload'));\n          this.clearButton.innerText = this.buttons.clear === 'Clear' ? this.localizedTexts('Clear') : this.buttons.clear;\n          this.clearButton.setAttribute('title', this.localizedTexts('Clear'));\n        }\n      }\n    }\n  };\n\n  Uploader.prototype.reRenderFileList = function () {\n    if (this.listParent) {\n      detach(this.listParent);\n      this.listParent = null;\n      this.fileList = [];\n      this.createFileList(this.filesData);\n\n      if (this.actionButtons) {\n        this.removeActionButtons();\n        this.renderActionButtons();\n        this.checkActionButtonStatus();\n      }\n    }\n  };\n\n  Uploader.prototype.preRender = function () {\n    this.localeText = {\n      Browse: 'Browse...',\n      Clear: 'Clear',\n      Upload: 'Upload',\n      dropFilesHint: 'Or drop files here',\n      invalidMaxFileSize: 'File size is too large',\n      invalidMinFileSize: 'File size is too small',\n      invalidFileType: 'File type is not allowed',\n      uploadFailedMessage: 'File failed to upload',\n      uploadSuccessMessage: 'File uploaded successfully',\n      removedSuccessMessage: 'File removed successfully',\n      removedFailedMessage: 'Unable to remove file',\n      inProgress: 'Uploading',\n      readyToUploadMessage: 'Ready to upload',\n      abort: 'Abort',\n      remove: 'Remove',\n      cancel: 'Cancel',\n      delete: 'Delete file',\n      pauseUpload: 'File upload paused',\n      pause: 'Pause',\n      resume: 'Resume',\n      retry: 'Retry',\n      fileUploadCancel: 'File upload canceled',\n      invalidFileSelection: 'Invalid files selected',\n      totalFiles: 'Total files',\n      size: 'Size'\n    };\n    this.l10n = new L10n('uploader', this.localeText, this.locale);\n    this.preLocaleObj = getValue('currentLocale', this.l10n);\n    this.isServerBlazor = isBlazor() && this.isServerRendered ? true : false;\n    this.isBlazorTemplate = this.isServerBlazor && this.template !== '' && !isNullOrUndefined(this.template) ? true : false;\n    this.isBlazorSaveUrl = this.isServerRendered && (this.asyncSettings.saveUrl === '' || isNullOrUndefined(this.asyncSettings.saveUrl)) ? true : false;\n\n    if (this.isBlazorSaveUrl && this.sequentialUpload) {\n      this.sequentialUpload = false;\n    }\n\n    if (!this.isBlazorSaveUrl) {\n      this.formRendered();\n    }\n\n    if (!this.isServerBlazor) {\n      this.updateHTMLAttrToElement();\n      this.checkHTMLAttributes(false); // tslint:disable-next-line\n\n      var ejInstance = getValue('ej2_instances', this.element);\n      /* istanbul ignore next */\n\n      if (this.element.tagName === 'EJS-UPLOADER') {\n        var inputElement = this.createElement('input', {\n          attrs: {\n            type: 'file'\n          }\n        });\n        var index = 0;\n\n        for (index; index < this.element.attributes.length; index++) {\n          inputElement.setAttribute(this.element.attributes[index].nodeName, this.element.attributes[index].nodeValue);\n          inputElement.innerHTML = this.element.innerHTML;\n        }\n\n        if (!inputElement.hasAttribute('name')) {\n          inputElement.setAttribute('name', 'UploadFiles');\n        }\n\n        this.element.appendChild(inputElement);\n        this.element = inputElement;\n        setValue('ej2_instances', ejInstance, this.element);\n      }\n      /* istanbul ignore next */\n\n\n      if (ejInstance[0].isPureReactComponent) {\n        if (!isNullOrUndefined(ejInstance[0].props.name)) {\n          this.element.setAttribute('name', ejInstance[0].props.name);\n        } else if (!isNullOrUndefined(ejInstance[0].props.id) && isNullOrUndefined(ejInstance[0].props.name)) {\n          this.element.setAttribute('name', ejInstance[0].props.id);\n        } else {\n          this.element.setAttribute('name', 'UploadFiles');\n        }\n      }\n\n      if (isNullOrUndefined(this.element.getAttribute('name'))) {\n        this.element.setAttribute('name', this.element.getAttribute('id'));\n      }\n\n      if (!this.element.hasAttribute('type')) {\n        this.element.setAttribute('type', 'file');\n      }\n\n      this.updateDirectoryAttributes();\n    }\n\n    this.keyConfigs = {\n      enter: 'enter'\n    };\n\n    if (this.element.hasAttribute('tabindex')) {\n      this.tabIndex = this.element.getAttribute('tabindex');\n    }\n\n    this.browserName = Browser.info.name;\n    this.uploaderName = this.element.getAttribute('name');\n  };\n\n  Uploader.prototype.formRendered = function () {\n    var parentEle = closest(this.element, 'form');\n\n    if (!isNullOrUndefined(parentEle)) {\n      for (; parentEle && parentEle !== document.documentElement; parentEle = parentEle.parentElement) {\n        if (parentEle.tagName === 'FORM') {\n          this.isForm = true;\n          this.formElement = parentEle;\n          parentEle.setAttribute('enctype', 'multipart/form-data');\n          parentEle.setAttribute('encoding', 'multipart/form-data');\n        }\n      }\n    }\n  };\n\n  Uploader.prototype.getPersistData = function () {\n    return this.addOnPersist(['filesData']);\n  };\n  /**\n   * Return the module name of the component.\n   */\n\n\n  Uploader.prototype.getModuleName = function () {\n    return 'uploader';\n  };\n\n  Uploader.prototype.updateDirectoryAttributes = function () {\n    if (this.directoryUpload) {\n      this.element.setAttribute('directory', 'true');\n      this.element.setAttribute('webkitdirectory', 'true');\n    } else {\n      this.element.removeAttribute('directory');\n      this.element.removeAttribute('webkitdirectory');\n    }\n  };\n  /**\n   * To Initialize the control rendering\n   * @private\n   */\n\n\n  Uploader.prototype.render = function () {\n    if (!this.isServerBlazor) {\n      this.renderBrowseButton();\n      this.initializeUpload();\n      this.updateHTMLAttrToWrapper();\n      this.wireEvents();\n      this.setMultipleSelection();\n      this.setExtensions(this.allowedExtensions);\n      this.setRTL();\n      this.renderPreLoadFiles();\n      this.setControlStatus();\n      this.setCSSClass();\n    } else {\n      this.dropAreaWrapper = closest(this.element, '.' + DROP_WRAPPER);\n      this.uploadWrapper = closest(this.element, '.e-upload.e-control-wrapper');\n      this.browseButton = this.dropAreaWrapper.querySelector('button.e-upload-browse-btn');\n      this.setDropArea();\n      this.renderPreLoadFiles();\n      this.wireEvents();\n    }\n\n    this.renderComplete();\n  };\n\n  Uploader.prototype.renderBrowseButton = function () {\n    this.browseButton = this.createElement('button', {\n      className: 'e-css e-btn',\n      attrs: {\n        'type': 'button'\n      }\n    });\n    this.browseButton.setAttribute('tabindex', this.tabIndex);\n\n    if (typeof this.buttons.browse === 'string') {\n      this.browseButton.textContent = this.buttons.browse === 'Browse...' ? this.localizedTexts('Browse') : this.buttons.browse;\n      this.browseButton.setAttribute('title', this.browseButton.innerText);\n    } else {\n      this.browseButton.appendChild(this.buttons.browse);\n    }\n\n    this.element.setAttribute('aria-label', 'Uploader');\n  };\n\n  Uploader.prototype.renderActionButtons = function () {\n    this.element.setAttribute('tabindex', '-1');\n\n    if (!(this.isBlazorSaveUrl || this.isBlazorTemplate)) {\n      this.actionButtons = this.createElement('div', {\n        className: ACTION_BUTTONS\n      });\n      this.uploadButton = this.createElement('button', {\n        className: UPLOAD_BUTTONS,\n        attrs: {\n          'type': 'button',\n          'tabindex': this.btnTabIndex\n        }\n      });\n      this.clearButton = this.createElement('button', {\n        className: CLEAR_BUTTONS,\n        attrs: {\n          'type': 'button',\n          'tabindex': this.btnTabIndex\n        }\n      });\n      this.actionButtons.appendChild(this.clearButton);\n      this.actionButtons.appendChild(this.uploadButton);\n      this.renderButtonTemplates();\n      this.uploadWrapper.appendChild(this.actionButtons);\n      this.browseButton.blur();\n      this.uploadButton.focus();\n      this.wireActionButtonEvents();\n    }\n  };\n  /* istanbul ignore next */\n\n\n  Uploader.prototype.serverActionButtonsEventBind = function (element) {\n    if (element && !this.isForm) {\n      this.browseButton.blur();\n      this.actionButtons = element;\n      this.uploadButton = this.actionButtons.querySelector('.e-file-upload-btn');\n      this.clearButton = this.actionButtons.querySelector('.e-file-clear-btn');\n      this.uploadButton.focus();\n      this.unwireActionButtonEvents();\n      this.wireActionButtonEvents();\n      this.checkActionButtonStatus();\n    }\n  };\n  /* istanbul ignore next */\n\n\n  Uploader.prototype.serverUlElement = function (element) {\n    if (element) {\n      if (this.isBlazorSaveUrl || this.isBlazorTemplate) {\n        this.listParent = element;\n        this.fileList = [].slice.call(this.listParent.querySelectorAll('li'));\n        this.serverRemoveIconBindEvent();\n\n        if (!this.isForm) {\n          this.checkAutoUpload(this.filesData);\n        }\n      }\n    }\n  };\n\n  Uploader.prototype.wireActionButtonEvents = function () {\n    EventHandler.add(this.uploadButton, 'click', this.uploadButtonClick, this);\n    EventHandler.add(this.clearButton, 'click', this.clearButtonClick, this);\n  };\n\n  Uploader.prototype.unwireActionButtonEvents = function () {\n    EventHandler.remove(this.uploadButton, 'click', this.uploadButtonClick);\n    EventHandler.remove(this.clearButton, 'click', this.clearButtonClick);\n  };\n\n  Uploader.prototype.removeActionButtons = function () {\n    if (this.actionButtons) {\n      this.unwireActionButtonEvents();\n\n      if (!(this.isBlazorSaveUrl || this.isBlazorTemplate)) {\n        detach(this.actionButtons);\n      }\n\n      this.actionButtons = null;\n    }\n  };\n\n  Uploader.prototype.renderButtonTemplates = function () {\n    if (typeof this.buttons.browse === 'string') {\n      this.browseButton.textContent = this.buttons.browse === 'Browse...' ? this.localizedTexts('Browse') : this.buttons.browse;\n      this.browseButton.setAttribute('title', this.browseButton.textContent);\n    } else {\n      this.browseButton.innerHTML = '';\n      this.browseButton.appendChild(this.buttons.browse);\n    }\n\n    if (this.uploadButton) {\n      var uploadText = void 0;\n      uploadText = isNullOrUndefined(this.buttons.upload) ? 'Upload' : this.buttons.upload;\n      this.buttons.upload = uploadText;\n\n      if (typeof this.buttons.upload === 'string') {\n        this.uploadButton.textContent = this.buttons.upload === 'Upload' ? this.localizedTexts('Upload') : this.buttons.upload;\n        this.uploadButton.setAttribute('title', this.uploadButton.textContent);\n      } else {\n        this.uploadButton.innerHTML = '';\n        this.uploadButton.appendChild(this.buttons.upload);\n      }\n    }\n\n    if (this.clearButton) {\n      var clearText = void 0;\n      clearText = isNullOrUndefined(this.buttons.clear) ? 'Clear' : this.buttons.clear;\n      this.buttons.clear = clearText;\n\n      if (typeof this.buttons.clear === 'string') {\n        this.clearButton.textContent = this.buttons.clear === 'Clear' ? this.localizedTexts('Clear') : this.buttons.clear;\n        this.clearButton.setAttribute('title', this.clearButton.textContent);\n      } else {\n        this.clearButton.innerHTML = '';\n        this.clearButton.appendChild(this.buttons.clear);\n      }\n    }\n  };\n\n  Uploader.prototype.initializeUpload = function () {\n    this.element.setAttribute('tabindex', '-1');\n    var inputWrapper = this.createElement('span', {\n      className: INPUT_WRAPPER\n    });\n    this.element.parentElement.insertBefore(inputWrapper, this.element);\n    this.dropAreaWrapper = this.createElement('div', {\n      className: DROP_WRAPPER\n    });\n    this.element.parentElement.insertBefore(this.dropAreaWrapper, this.element);\n    inputWrapper.appendChild(this.element);\n    this.dropAreaWrapper.appendChild(this.browseButton);\n    this.dropAreaWrapper.appendChild(inputWrapper);\n    this.uploadWrapper = this.createElement('div', {\n      className: CONTROL_WRAPPER\n    });\n    this.dropAreaWrapper.parentElement.insertBefore(this.uploadWrapper, this.dropAreaWrapper);\n    this.uploadWrapper.appendChild(this.dropAreaWrapper);\n    this.setDropArea();\n  };\n\n  Uploader.prototype.renderPreLoadFiles = function () {\n    if (this.files.length) {\n      if (this.enablePersistence && this.filesData.length) {\n        this.createFileList(this.filesData);\n        return;\n      }\n\n      if (isNullOrUndefined(this.files[0].size)) {\n        return;\n      }\n\n      var files = [].slice.call(this.files);\n      var filesData = [];\n\n      if (!this.multiple) {\n        this.clearData();\n        files = [files[0]];\n      }\n\n      for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {\n        var data = files_1[_i];\n        var fileData = {\n          name: data.name + '.' + data.type.split('.')[data.type.split('.').length - 1],\n          rawFile: '',\n          size: data.size,\n          status: this.localizedTexts('uploadSuccessMessage'),\n          type: data.type,\n          validationMessages: {\n            minSize: '',\n            maxSize: ''\n          },\n          statusCode: '2'\n        };\n        filesData.push(fileData);\n        this.filesData.push(fileData);\n      }\n\n      this.createFileList(filesData);\n\n      if (!this.autoUpload && this.listParent && !this.actionButtons && (!this.isForm || this.allowUpload()) && this.showFileList) {\n        this.renderActionButtons();\n      }\n\n      this.checkActionButtonStatus();\n\n      if (this.sequentialUpload) {\n        this.count = this.filesData.length - 1;\n      }\n    }\n  };\n\n  Uploader.prototype.checkActionButtonStatus = function () {\n    if (this.actionButtons) {\n      var length_1 = this.uploadWrapper.querySelectorAll('.' + VALIDATION_FAILS).length + this.uploadWrapper.querySelectorAll('.e-upload-fails:not(.e-upload-progress)').length + this.uploadWrapper.querySelectorAll('span.' + UPLOAD_SUCCESS).length + this.uploadWrapper.querySelectorAll('span.' + UPLOAD_INPROGRESS).length;\n\n      if (length_1 > 0 && length_1 === this.uploadWrapper.querySelectorAll('li').length) {\n        this.uploadButton.setAttribute('disabled', 'disabled');\n      } else {\n        this.uploadButton.removeAttribute('disabled');\n      }\n    }\n  };\n\n  Uploader.prototype.setDropArea = function () {\n    var dropTextArea = this.dropAreaWrapper.querySelector('.e-file-drop');\n\n    if (this.dropArea) {\n      this.dropZoneElement = typeof this.dropArea !== 'string' ? this.dropArea : document.querySelector(this.dropArea);\n      var element = this.element;\n      var enableDropText = false;\n\n      while (element.parentNode) {\n        element = element.parentNode;\n\n        if (element === this.dropZoneElement) {\n          enableDropText = true;\n\n          if (!dropTextArea) {\n            this.createDropTextHint();\n          } else if (!this.isServerBlazor) {\n            dropTextArea.innerHTML = this.localizedTexts('dropFilesHint');\n          }\n        }\n      }\n\n      if (!enableDropText && dropTextArea) {\n        dropTextArea.remove();\n      }\n    } else if (!isNullOrUndefined(this.uploaderOptions) && this.uploaderOptions.dropArea === undefined) {\n      this.createDropTextHint();\n      this.dropZoneElement = this.uploadWrapper;\n      this.setProperties({\n        dropArea: this.uploadWrapper\n      }, true);\n    }\n\n    this.bindDropEvents();\n  };\n\n  Uploader.prototype.updateDropArea = function () {\n    if (this.dropArea) {\n      this.setDropArea();\n    } else {\n      this.dropZoneElement = null;\n      var dropTextArea = this.dropAreaWrapper.querySelector('.e-file-drop');\n\n      if (dropTextArea) {\n        dropTextArea.remove();\n      }\n    }\n  };\n\n  Uploader.prototype.createDropTextHint = function () {\n    if (!this.isServerBlazor) {\n      var fileDropArea = this.createElement('span', {\n        className: DROP_AREA\n      });\n      fileDropArea.innerHTML = this.localizedTexts('dropFilesHint');\n      this.dropAreaWrapper.appendChild(fileDropArea);\n    }\n  };\n\n  Uploader.prototype.updateHTMLAttrToElement = function () {\n    if (!isNullOrUndefined(this.htmlAttributes)) {\n      for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {\n        var pro = _a[_i];\n\n        if (wrapperAttr.indexOf(pro) < 0) {\n          this.element.setAttribute(pro, this.htmlAttributes[pro]);\n        }\n      }\n    }\n  };\n\n  Uploader.prototype.updateHTMLAttrToWrapper = function () {\n    if (!isNullOrUndefined(this.htmlAttributes)) {\n      for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {\n        var pro = _a[_i];\n\n        if (wrapperAttr.indexOf(pro) > -1) {\n          if (pro === 'class') {\n            var updatedClassValues = this.htmlAttributes[pro].replace(/\\s+/g, ' ').trim();\n\n            if (updatedClassValues !== '') {\n              addClass([this.uploadWrapper], updatedClassValues.split(' '));\n            }\n          } else if (pro === 'style') {\n            var uploadStyle = this.uploadWrapper.getAttribute(pro);\n            uploadStyle = !isNullOrUndefined(uploadStyle) ? uploadStyle + this.htmlAttributes[pro] : this.htmlAttributes[pro];\n            this.uploadWrapper.setAttribute(pro, uploadStyle);\n          } else {\n            this.uploadWrapper.setAttribute(pro, this.htmlAttributes[pro]);\n          }\n        }\n      }\n    }\n  };\n\n  Uploader.prototype.setMultipleSelection = function () {\n    if (this.multiple && !this.element.hasAttribute('multiple')) {\n      var newAttr = document.createAttribute('multiple');\n      newAttr.value = 'multiple';\n      this.element.setAttributeNode(newAttr);\n    } else if (!this.multiple) {\n      this.element.removeAttribute('multiple');\n    }\n  };\n\n  Uploader.prototype.checkAutoUpload = function (fileData) {\n    if (this.autoUpload) {\n      if (this.sequentialUpload) {\n        /* istanbul ignore next */\n        this.sequenceUpload(fileData);\n      } else {\n        this.upload(fileData);\n      }\n\n      this.removeActionButtons();\n    } else if (!this.actionButtons) {\n      this.renderActionButtons();\n    }\n\n    this.checkActionButtonStatus();\n  };\n\n  Uploader.prototype.sequenceUpload = function (fileData) {\n    if (this.filesData.length - fileData.length === 0 || this.filesData[this.filesData.length - fileData.length - 1].statusCode !== '1') {\n      ++this.count;\n      var isFileListCreated = this.showFileList ? false : true;\n\n      if (typeof this.filesData[this.count] === 'object') {\n        this.isFirstFileOnSelection = false;\n        this.upload(this.filesData[this.count], isFileListCreated);\n\n        if (this.filesData[this.count].statusCode === '0') {\n          this.sequenceUpload(fileData);\n        }\n      } else {\n        --this.count;\n      }\n    }\n  };\n\n  Uploader.prototype.setCSSClass = function (oldCSSClass) {\n    var updatedCssClassValue = this.cssClass;\n\n    if (!isNullOrUndefined(this.cssClass) && this.cssClass !== '') {\n      updatedCssClassValue = this.cssClass.replace(/\\s+/g, ' ').trim();\n    }\n\n    if (!isNullOrUndefined(this.cssClass) && updatedCssClassValue !== '') {\n      addClass([this.uploadWrapper], updatedCssClassValue.split(updatedCssClassValue.indexOf(',') > -1 ? ',' : ' '));\n    }\n\n    var updatedOldCssClass = oldCSSClass;\n\n    if (!isNullOrUndefined(oldCSSClass)) {\n      updatedOldCssClass = oldCSSClass.replace(/\\s+/g, ' ').trim();\n    }\n\n    if (!isNullOrUndefined(oldCSSClass) && updatedOldCssClass !== '') {\n      removeClass([this.uploadWrapper], updatedOldCssClass.split(' '));\n    }\n  };\n\n  Uploader.prototype.wireEvents = function () {\n    EventHandler.add(this.browseButton, 'click', this.browseButtonClick, this);\n    EventHandler.add(this.element, 'change', this.onSelectFiles, this);\n    EventHandler.add(document, 'click', this.removeFocus, this);\n    this.keyboardModule = new KeyboardEvents(this.uploadWrapper, {\n      keyAction: this.keyActionHandler.bind(this),\n      keyConfigs: this.keyConfigs,\n      eventName: 'keydown'\n    });\n\n    if (this.isForm) {\n      EventHandler.add(this.formElement, 'reset', this.resetForm, this);\n    }\n  };\n\n  Uploader.prototype.unWireEvents = function () {\n    EventHandler.remove(this.browseButton, 'click', this.browseButtonClick);\n    EventHandler.remove(this.element, 'change', this.onSelectFiles);\n    EventHandler.remove(document, 'click', this.removeFocus);\n\n    if (this.isForm) {\n      EventHandler.remove(this.formElement, 'reset', this.resetForm);\n    }\n\n    this.keyboardModule.destroy();\n  };\n\n  Uploader.prototype.resetForm = function () {\n    this.clearAll();\n  };\n\n  Uploader.prototype.keyActionHandler = function (e) {\n    var targetElement = e.target;\n\n    switch (e.action) {\n      case 'enter':\n        if (e.target === this.clearButton) {\n          this.clearButtonClick();\n        } else if (e.target === this.uploadButton) {\n          this.uploadButtonClick();\n        } else if (e.target === this.browseButton) {\n          this.browseButtonClick();\n        } else if (targetElement.classList.contains(PAUSE_UPLOAD)) {\n          var metaData = this.getCurrentMetaData(null, e);\n          metaData.file.statusCode = '4';\n          metaData.file.status = this.localizedTexts('pauseUpload');\n          this.abortUpload(metaData, false);\n        } else if (targetElement.classList.contains(RESUME_UPLOAD)) {\n          this.resumeUpload(this.getCurrentMetaData(null, e), e);\n        } else if (targetElement.classList.contains(RETRY_ICON)) {\n          var metaData = this.getCurrentMetaData(null, e);\n\n          if (!isNullOrUndefined(metaData)) {\n            metaData.file.statusCode = '1';\n            metaData.file.status = this.localizedTexts('readyToUploadMessage');\n            this.chunkUpload(metaData.file);\n          } else {\n            var target = e.target.parentElement;\n            var fileData = this.filesData[this.fileList.indexOf(target)];\n            this.retry(fileData);\n          }\n        } else {\n          this.removeFiles(e);\n\n          if (!targetElement.classList.contains(ABORT_ICON)) {\n            this.browseButton.focus();\n          }\n        }\n\n        e.preventDefault();\n        e.stopPropagation();\n        break;\n    }\n  };\n\n  Uploader.prototype.getCurrentMetaData = function (fileInfo, e) {\n    var fileData;\n    var targetMetaData;\n\n    if (isNullOrUndefined(fileInfo)) {\n      var target = e.target.parentElement;\n      fileData = this.filesData[this.fileList.indexOf(target)];\n    } else {\n      fileData = fileInfo;\n    }\n\n    for (var i = 0; i < this.uploadMetaData.length; i++) {\n      if (this.uploadMetaData[i].file.name === fileData.name) {\n        targetMetaData = this.uploadMetaData[i];\n      }\n    }\n\n    return targetMetaData;\n  };\n\n  Uploader.prototype.removeFocus = function () {\n    if (this.uploadWrapper && this.listParent && this.listParent.querySelector('.' + ICON_FOCUSED)) {\n      document.activeElement.blur();\n      this.listParent.querySelector('.' + ICON_FOCUSED).classList.remove(ICON_FOCUSED);\n    }\n  };\n\n  Uploader.prototype.browseButtonClick = function () {\n    this.element.click();\n  };\n\n  Uploader.prototype.uploadButtonClick = function () {\n    if (this.sequentialUpload) {\n      this.sequenceUpload(this.filesData);\n    } else {\n      this.upload(this.filesData);\n    }\n  };\n\n  Uploader.prototype.clearButtonClick = function () {\n    this.clearAll();\n    /* istanbul ignore next */\n\n    if (this.sequentialUpload) {\n      this.count = -1;\n    }\n\n    this.actionCompleteCount = 0;\n  };\n\n  Uploader.prototype.bindDropEvents = function () {\n    if (this.dropZoneElement) {\n      EventHandler.add(this.dropZoneElement, 'drop', this.dropElement, this);\n      EventHandler.add(this.dropZoneElement, 'dragover', this.dragHover, this);\n      EventHandler.add(this.dropZoneElement, 'dragleave', this.onDragLeave, this);\n      EventHandler.add(this.dropZoneElement, 'paste', this.onPasteFile, this);\n    }\n  };\n\n  Uploader.prototype.unBindDropEvents = function () {\n    if (this.dropZoneElement) {\n      EventHandler.remove(this.dropZoneElement, 'drop', this.dropElement);\n      EventHandler.remove(this.dropZoneElement, 'dragover', this.dragHover);\n      EventHandler.remove(this.dropZoneElement, 'dragleave', this.onDragLeave);\n    }\n  };\n\n  Uploader.prototype.onDragLeave = function (e) {\n    this.dropZoneElement.classList.remove(DRAG_HOVER);\n  };\n\n  Uploader.prototype.dragHover = function (e) {\n    if (!this.enabled) {\n      return;\n    }\n\n    this.dropZoneElement.classList.add(DRAG_HOVER);\n\n    if (this.dropEffect !== 'Default') {\n      e.dataTransfer.dropEffect = this.dropEffect.toLowerCase();\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n  };\n  /* istanbul ignore next */\n\n\n  Uploader.prototype.dropElement = function (e) {\n    this.dropZoneElement.classList.remove(DRAG_HOVER);\n    this.onSelectFiles(e);\n    e.preventDefault();\n    e.stopPropagation();\n  };\n  /* istanbul ignore next */\n\n\n  Uploader.prototype.onPasteFile = function (event) {\n    var item = event.clipboardData.items;\n\n    if (item.length !== 1) {\n      return;\n    }\n\n    var pasteFile = [].slice.call(item)[0];\n\n    if (pasteFile.kind === 'file' && pasteFile.type.match('^image/')) {\n      this.renderSelectedFiles(event, [pasteFile.getAsFile()], false, true);\n    }\n  };\n\n  Uploader.prototype.getSelectedFiles = function (index) {\n    var data = [];\n    var liElement = this.fileList[index];\n    var allFiles = this.getFilesData();\n    var nameElements = +liElement.getAttribute('data-files-count');\n    var startIndex = 0;\n\n    for (var i = 0; i < index; i++) {\n      startIndex += +this.fileList[i].getAttribute('data-files-count');\n    }\n\n    for (var j = startIndex; j < startIndex + nameElements; j++) {\n      data.push(allFiles[j]);\n    }\n\n    return data;\n  };\n\n  Uploader.prototype.removeFiles = function (args) {\n    if (!this.enabled) {\n      return;\n    }\n\n    var selectedElement = args.target.parentElement;\n\n    if (this.isBlazorSaveUrl) {\n      this.fileList = [].slice.call(this.uploadWrapper.querySelectorAll('li'));\n    }\n\n    var index = this.fileList.indexOf(selectedElement);\n    var liElement = this.fileList[index];\n    var formUpload = this.isFormUpload();\n    var fileData = formUpload ? this.getSelectedFiles(index) : this.getFilesInArray(this.filesData[index]);\n\n    if (isNullOrUndefined(fileData)) {\n      return;\n    }\n\n    if (args.target.classList.contains(ABORT_ICON) && !formUpload) {\n      fileData[0].statusCode = '5';\n\n      if (!isNullOrUndefined(liElement)) {\n        var spinnerTarget = liElement.querySelector('.' + ABORT_ICON);\n        createSpinner({\n          target: spinnerTarget,\n          width: '20px'\n        });\n        showSpinner(spinnerTarget);\n      }\n\n      if (this.sequentialUpload) {\n        /* istanbul ignore next */\n        this.uploadSequential();\n      }\n\n      if (!liElement.classList.contains(RESTRICT_RETRY)) {\n        this.checkActionComplete(true);\n      }\n    } else if (!closest(args.target, '.' + SPINNER_PANE)) {\n      this.remove(fileData, false, false, true, args);\n    }\n\n    this.element.value = '';\n    this.checkActionButtonStatus();\n  };\n\n  Uploader.prototype.removeFilesData = function (file, customTemplate) {\n    var index;\n\n    if (customTemplate) {\n      if (!this.showFileList) {\n        index = this.filesData.indexOf(file);\n        this.filesData.splice(index, 1);\n      }\n\n      return;\n    }\n\n    var selectedElement = this.getLiElement(file);\n\n    if (isNullOrUndefined(selectedElement)) {\n      return;\n    }\n\n    if (!this.isBlazorSaveUrl) {\n      detach(selectedElement);\n    }\n\n    index = this.fileList.indexOf(selectedElement);\n    this.fileList.splice(index, 1);\n    this.filesData.splice(index, 1);\n\n    if (!this.isBlazorSaveUrl) {\n      if (this.fileList.length === 0 && !isNullOrUndefined(this.listParent)) {\n        detach(this.listParent);\n        this.listParent = null;\n        this.removeActionButtons();\n      }\n\n      if (this.sequentialUpload) {\n        /* istanbul ignore next */\n        if (index <= this.count) {\n          --this.count;\n        }\n      }\n    } else {\n      // tslint:disable-next-line\n      this.interopAdaptor.invokeMethodAsync('removeFileData', index);\n    }\n  };\n\n  Uploader.prototype.removeUploadedFile = function (file, eventArgs, removeDirectly, custom) {\n    var _this = this;\n\n    var selectedFiles = file;\n    var ajax = new Ajax(this.asyncSettings.removeUrl, 'POST', true, null);\n    ajax.emitError = false;\n    var formData = new FormData();\n\n    ajax.beforeSend = function (e) {\n      eventArgs.currentRequest = ajax.httpRequest;\n\n      if (isBlazor()) {\n        if (_this.currentRequestHeader) {\n          _this.updateCustomheader(ajax.httpRequest, _this.currentRequestHeader);\n        }\n\n        if (_this.customFormDatas) {\n          _this.updateFormData(formData, _this.customFormDatas);\n        }\n      }\n\n      if (!removeDirectly) {\n        _this.trigger('removing', eventArgs, function (eventArgs) {\n          if (eventArgs.cancel) {\n            e.cancel = true;\n          } else {\n            _this.removingEventCallback(eventArgs, formData, selectedFiles, file);\n          }\n        });\n      } else {\n        _this.removingEventCallback(eventArgs, formData, selectedFiles, file);\n      }\n    };\n\n    if (this.isServerBlazor) {\n      var name_1 = this.element.getAttribute('name');\n\n      if (!isNullOrUndefined(selectedFiles.rawFile) && selectedFiles.rawFile !== '') {\n        formData.append(name_1, selectedFiles.rawFile, selectedFiles.name);\n      } else {\n        formData.append(name_1, selectedFiles.name);\n      }\n    }\n\n    ajax.onLoad = function (e) {\n      _this.removeCompleted(e, selectedFiles, custom);\n\n      return {};\n    };\n    /* istanbul ignore next */\n\n\n    ajax.onError = function (e) {\n      _this.removeFailed(e, selectedFiles, custom);\n\n      return {};\n    };\n\n    ajax.send(formData);\n  };\n\n  Uploader.prototype.removingEventCallback = function (eventArgs, formData, selectedFiles, file) {\n    /* istanbul ignore next */\n    var name = this.element.getAttribute('name');\n    var liElement = this.getLiElement(file);\n\n    if (!isNullOrUndefined(liElement) && (!isNullOrUndefined(liElement.querySelector('.' + DELETE_ICON)) || !isNullOrUndefined(liElement.querySelector('.' + REMOVE_ICON)))) {\n      var spinnerTarget = void 0;\n      spinnerTarget = liElement.querySelector('.' + DELETE_ICON) ? liElement.querySelector('.' + DELETE_ICON) : liElement.querySelector('.' + REMOVE_ICON);\n      createSpinner({\n        target: spinnerTarget,\n        width: '20px'\n      });\n      showSpinner(spinnerTarget);\n    }\n\n    if (!this.isServerBlazor) {\n      if (eventArgs.postRawFile && !isNullOrUndefined(selectedFiles.rawFile) && selectedFiles.rawFile !== '') {\n        formData.append(name, selectedFiles.rawFile, selectedFiles.name);\n      } else {\n        formData.append(name, selectedFiles.name);\n      }\n\n      this.updateFormData(formData, eventArgs.customFormData);\n    }\n  };\n  /* istanbul ignore next */\n\n\n  Uploader.prototype.updateFormData = function (formData, customData) {\n    if (customData.length > 0 && customData[0]) {\n      var _loop_1 = function (i) {\n        var data = customData[i]; // tslint:disable-next-line\n\n        var value = Object.keys(data).map(function (e) {\n          return data[e];\n        });\n        formData.append(Object.keys(data)[0], value);\n      };\n\n      for (var i = 0; i < customData.length; i++) {\n        _loop_1(i);\n      }\n    }\n  };\n  /* istanbul ignore next */\n\n\n  Uploader.prototype.updateCustomheader = function (request, currentRequest) {\n    if (currentRequest.length > 0 && currentRequest[0]) {\n      var _loop_2 = function (i) {\n        var data = currentRequest[i]; // tslint:disable-next-line\n\n        var value = Object.keys(data).map(function (e) {\n          return data[e];\n        });\n        request.setRequestHeader(Object.keys(data)[0], value);\n      };\n\n      for (var i = 0; i < currentRequest.length; i++) {\n        _loop_2(i);\n      }\n    }\n  };\n\n  Uploader.prototype.removeCompleted = function (e, files, customTemplate) {\n    var response = e && e.currentTarget ? this.getResponse(e) : null;\n    var args = {\n      e: e,\n      response: response,\n      operation: 'remove',\n      file: this.updateStatus(files, this.localizedTexts('removedSuccessMessage'), '2')\n    };\n    this.trigger('success', args);\n    this.removeFilesData(files, customTemplate);\n    var index = this.uploadedFilesData.indexOf(files);\n    this.uploadedFilesData.splice(index, 1);\n    this.trigger('change', {\n      files: this.uploadedFilesData\n    });\n  };\n\n  Uploader.prototype.removeFailed = function (e, files, customTemplate) {\n    var response = e && e.currentTarget ? this.getResponse(e) : null;\n    var args = {\n      e: e,\n      response: response,\n      operation: 'remove',\n      file: this.updateStatus(files, this.localizedTexts('removedFailedMessage'), '0')\n    };\n\n    if (!customTemplate) {\n      var index = this.filesData.indexOf(files);\n      var rootElement = this.fileList[index];\n\n      if (rootElement) {\n        var statusElement = rootElement.querySelector('.' + STATUS);\n        rootElement.classList.remove(UPLOAD_SUCCESS);\n        statusElement.classList.remove(UPLOAD_SUCCESS);\n        rootElement.classList.add(UPLOAD_FAILED);\n        statusElement.classList.add(UPLOAD_FAILED);\n      }\n\n      this.checkActionButtonStatus();\n    }\n\n    this.trigger('failure', args);\n    var liElement = this.getLiElement(files);\n    /* istanbul ignore next */\n\n    if (!isNullOrUndefined(liElement) && !isNullOrUndefined(liElement.querySelector('.' + DELETE_ICON))) {\n      var spinnerTarget = liElement.querySelector('.' + DELETE_ICON);\n      hideSpinner(spinnerTarget);\n      detach(liElement.querySelector('.e-spinner-pane'));\n    }\n  };\n  /* istanbul ignore next */\n\n\n  Uploader.prototype.getFilesFromFolder = function (event) {\n    this.filesEntries = [];\n    var items;\n    items = this.multiple ? event.dataTransfer.items : [event.dataTransfer.items[0]];\n    var validDirectoryUpload = this.checkDirectoryUpload(items);\n\n    if (!validDirectoryUpload) {\n      return;\n    }\n\n    var _loop_3 = function (i) {\n      // tslint:disable-next-line\n      var item = items[i].webkitGetAsEntry();\n\n      if (item.isFile) {\n        var files_2 = []; // tslint:disable-next-line\n\n        item.file(function (fileObj) {\n          var path = item.fullPath;\n          files_2.push({\n            'path': path,\n            'file': fileObj\n          });\n        });\n        this_1.renderSelectedFiles(event, files_2, true);\n      } else if (item.isDirectory) {\n        this_1.traverseFileTree(item, event);\n      }\n    };\n\n    var this_1 = this;\n\n    for (var i = 0; i < items.length; i++) {\n      _loop_3(i);\n    }\n  };\n  /* istanbul ignore next */\n\n\n  Uploader.prototype.checkDirectoryUpload = function (items) {\n    for (var i = 0; items && i < items.length; i++) {\n      // tslint:disable-next-line\n      var item = items[i].webkitGetAsEntry();\n\n      if (item.isDirectory) {\n        return true;\n      }\n    }\n\n    return false;\n  }; // tslint:disable\n\n  /* istanbul ignore next */\n\n\n  Uploader.prototype.traverseFileTree = function (item, event) {\n    if (item.isFile) {\n      this.filesEntries.push(item);\n    } else if (item.isDirectory) {\n      // tslint:disable-next-line\n      var directoryReader = item.createReader(); // tslint:disable-next-line\n\n      this.readFileFromDirectory(directoryReader, event);\n    }\n  }; // tslint:disable\n\n  /* istanbul ignore next */\n\n\n  Uploader.prototype.readFileFromDirectory = function (directoryReader, event) {\n    var _this = this; // tslint:disable-next-line\n\n\n    directoryReader.readEntries(function (entries) {\n      for (var i = 0; i < entries.length; i++) {\n        _this.traverseFileTree(entries[i]); // tslint:disable-next-line\n\n      }\n\n      ;\n\n      _this.pushFilesEntries(event);\n\n      if (entries.length) {\n        _this.readFileFromDirectory(directoryReader);\n      }\n    });\n  };\n\n  Uploader.prototype.pushFilesEntries = function (event) {\n    var _this = this;\n\n    var files = [];\n\n    var _loop_4 = function (i) {\n      // tslint:disable-next-line\n      this_2.filesEntries[i].file(function (fileObj) {\n        if (_this.filesEntries) {\n          var path = _this.filesEntries[i].fullPath;\n          files.push({\n            'path': path,\n            'file': fileObj\n          });\n\n          if (i === _this.filesEntries.length - 1) {\n            _this.filesEntries = [];\n\n            _this.renderSelectedFiles(event, files, true);\n          }\n        }\n      });\n    };\n\n    var this_2 = this;\n\n    for (var i = 0; i < this.filesEntries.length; i++) {\n      _loop_4(i);\n    }\n  }; // tslint:enable\n\n\n  Uploader.prototype.onSelectFiles = function (args) {\n    if (!this.enabled) {\n      return;\n    }\n\n    var targetFiles;\n    /* istanbul ignore next */\n\n    if (args.type === 'drop') {\n      if (this.directoryUpload) {\n        this.getFilesFromFolder(args);\n      } else {\n        var files = this.sortFilesList = args.dataTransfer.files;\n\n        if (this.browserName !== 'msie' && this.browserName !== 'edge') {\n          this.element.files = files;\n        }\n\n        targetFiles = this.multiple ? this.sortFileList(files) : [files[0]];\n        this.renderSelectedFiles(args, targetFiles);\n      }\n    } else {\n      targetFiles = [].slice.call(args.target.files);\n      this.renderSelectedFiles(args, targetFiles);\n    }\n  };\n  /* istanbul ignore next */\n\n\n  Uploader.prototype.getBase64 = function (file) {\n    return new Promise(function (resolve, reject) {\n      var fileReader = new FileReader();\n      fileReader.readAsDataURL(file);\n\n      fileReader.onload = function () {\n        return resolve(fileReader.result);\n      };\n\n      fileReader.onerror = function (error) {\n        return reject(error);\n      };\n    });\n  };\n  /* istanbul ignore next */\n\n  /* tslint:ignore */\n\n\n  Uploader.prototype.renderSelectedFiles = function (args, // tslint:disable-next-line\n  targetFiles, directory, paste) {\n    var _this = this;\n\n    this.base64String = []; // tslint:disable-next-line\n\n    var eventArgs = {\n      event: args,\n      cancel: false,\n      filesData: [],\n      isModified: false,\n      modifiedFilesData: [],\n      progressInterval: '',\n      isCanceled: false,\n      currentRequest: null,\n      customFormData: null\n    };\n    /* istanbul ignore next */\n\n    if (targetFiles.length < 1) {\n      eventArgs.isCanceled = true;\n      this.trigger('selected', eventArgs);\n      return;\n    }\n\n    this.flag = true;\n    var fileData = [];\n\n    if (!this.multiple) {\n      this.clearData(true);\n      targetFiles = [targetFiles[0]];\n    }\n\n    for (var i = 0; i < targetFiles.length; i++) {\n      var file = directory ? targetFiles[i].file : targetFiles[i];\n      this.updateInitialFileDetails(args, targetFiles, file, i, fileData, directory, paste);\n    }\n\n    eventArgs.filesData = fileData;\n\n    if (this.allowedExtensions.indexOf('*') > -1) {\n      this.allTypes = true;\n    }\n\n    if (!this.allTypes) {\n      fileData = this.checkExtension(fileData);\n    }\n\n    this.trigger('selected', eventArgs, function (eventArgs) {\n      _this._internalRenderSelect(eventArgs, fileData);\n    });\n  };\n\n  Uploader.prototype.updateInitialFileDetails = function (args, // tslint:disable-next-line\n  targetFiles, file, i, fileData, directory, paste) {\n    var fileName = directory ? targetFiles[i].path.substring(1, targetFiles[i].path.length) : paste ? getUniqueID(file.name.substring(0, file.name.lastIndexOf('.'))) + '.' + this.getFileType(file.name) : this.directoryUpload ? targetFiles[i].webkitRelativePath : file.name;\n    var fileDetails = {\n      name: fileName,\n      rawFile: file,\n      size: file.size,\n      status: this.localizedTexts('readyToUploadMessage'),\n      type: this.getFileType(file.name),\n      validationMessages: this.validatedFileSize(file.size),\n      statusCode: '1',\n      id: getUniqueID(file.name.substring(0, file.name.lastIndexOf('.'))) + '.' + this.getFileType(file.name)\n    };\n    /* istanbul ignore next */\n\n    if (paste) {\n      fileDetails.fileSource = 'paste';\n    }\n\n    fileDetails.status = fileDetails.validationMessages.minSize !== '' ? this.localizedTexts('invalidMinFileSize') : fileDetails.validationMessages.maxSize !== '' ? this.localizedTexts('invalidMaxFileSize') : fileDetails.status;\n\n    if (fileDetails.validationMessages.minSize !== '' || fileDetails.validationMessages.maxSize !== '') {\n      fileDetails.statusCode = '0';\n    }\n\n    fileData.push(fileDetails);\n  };\n\n  Uploader.prototype._internalRenderSelect = function (eventArgs, fileData) {\n    if (!eventArgs.cancel) {\n      /* istanbul ignore next */\n      if (isBlazor()) {\n        this.currentRequestHeader = eventArgs.currentRequest;\n        this.customFormDatas = eventArgs.customFormData;\n      }\n\n      this.selectedFiles = fileData;\n      this.btnTabIndex = this.disableKeyboardNavigation ? '-1' : '0';\n\n      if (this.showFileList) {\n        if (eventArgs.isModified && eventArgs.modifiedFilesData.length > 0) {\n          for (var j = 0; j < eventArgs.modifiedFilesData.length; j++) {\n            for (var k = 0; k < fileData.length; k++) {\n              if (eventArgs.modifiedFilesData[j].id === fileData[k].id) {\n                eventArgs.modifiedFilesData[j].rawFile = fileData[k].rawFile;\n              }\n            }\n          }\n\n          var dataFiles = this.allTypes ? eventArgs.modifiedFilesData : this.checkExtension(eventArgs.modifiedFilesData);\n          this.updateSortedFileList(dataFiles);\n          this.filesData = dataFiles;\n\n          if (!this.isForm || this.allowUpload()) {\n            this.checkAutoUpload(dataFiles);\n          }\n        } else {\n          this.createFileList(fileData, true);\n\n          if (!(this.isBlazorSaveUrl || this.isBlazorTemplate)) {\n            this.filesData = this.filesData.concat(fileData);\n          }\n\n          if (!this.isForm || this.allowUpload()) {\n            if (!(this.isBlazorSaveUrl || this.isBlazorTemplate)) {\n              this.checkAutoUpload(fileData);\n            }\n          }\n        }\n\n        if (!isNullOrUndefined(eventArgs.progressInterval) && eventArgs.progressInterval !== '') {\n          this.progressInterval = eventArgs.progressInterval;\n        }\n      } else {\n        this.filesData = this.filesData.concat(fileData);\n\n        if (this.isBlazorSaveUrl) {\n          // tslint:disable-next-line\n          this.interopAdaptor.invokeMethodAsync('updateServerFileData', this.filesData, this.isForm);\n        }\n\n        if (this.autoUpload) {\n          this.upload(this.filesData, true);\n        }\n      }\n\n      this.raiseActionComplete();\n      this.isFirstFileOnSelection = true;\n    }\n  };\n\n  Uploader.prototype.allowUpload = function () {\n    var allowFormUpload = false;\n\n    if (this.isForm && !isNullOrUndefined(this.asyncSettings.saveUrl) && this.asyncSettings.saveUrl !== '') {\n      allowFormUpload = true;\n    }\n\n    return allowFormUpload;\n  };\n\n  Uploader.prototype.isFormUpload = function () {\n    var isFormUpload = false;\n\n    if (this.isForm && (isNullOrUndefined(this.asyncSettings.saveUrl) || this.asyncSettings.saveUrl === '') && (isNullOrUndefined(this.asyncSettings.removeUrl) || this.asyncSettings.removeUrl === '')) {\n      isFormUpload = true;\n    }\n\n    return isFormUpload;\n  };\n\n  Uploader.prototype.clearData = function (singleUpload) {\n    if (!isNullOrUndefined(this.listParent) && !(this.isBlazorSaveUrl || this.isBlazorTemplate)) {\n      detach(this.listParent);\n      this.listParent = null;\n    }\n\n    if (this.browserName !== 'msie' && !singleUpload) {\n      this.element.value = '';\n    }\n\n    this.fileList = [];\n    this.filesData = [];\n\n    if (this.isBlazorSaveUrl || this.isBlazorTemplate) {\n      // tslint:disable-next-line\n      this.interopAdaptor.invokeMethodAsync('clearAll');\n    } else {\n      this.removeActionButtons();\n    }\n  };\n\n  Uploader.prototype.updateSortedFileList = function (filesData) {\n    var previousListClone = this.createElement('div', {\n      id: 'clonewrapper'\n    });\n    var added = -1;\n    var removedList;\n\n    if (this.listParent) {\n      for (var i = 0; i < this.listParent.querySelectorAll('li').length; i++) {\n        var liElement = this.listParent.querySelectorAll('li')[i];\n        previousListClone.appendChild(liElement.cloneNode(true));\n      }\n\n      removedList = this.listParent.querySelectorAll('li');\n\n      for (var _i = 0, removedList_1 = removedList; _i < removedList_1.length; _i++) {\n        var item = removedList_1[_i];\n        detach(item);\n      }\n\n      this.removeActionButtons();\n      var oldList = [].slice.call(previousListClone.childNodes);\n      detach(this.listParent);\n      this.listParent = null;\n      this.fileList = [];\n      this.createParentUL();\n\n      for (var index = 0; index < filesData.length; index++) {\n        for (var j = 0; j < this.filesData.length; j++) {\n          if (this.filesData[j].name === filesData[index].name) {\n            this.listParent.appendChild(oldList[j]);\n            EventHandler.add(oldList[j].querySelector('.e-icons'), 'click', this.removeFiles, this);\n            this.fileList.push(oldList[j]);\n            added = index;\n          }\n        }\n\n        if (added !== index) {\n          this.createFileList([filesData[index]]);\n        }\n      }\n    } else {\n      this.createFileList(filesData);\n    }\n  };\n\n  Uploader.prototype.isBlank = function (str) {\n    return !str || /^\\s*$/.test(str);\n  };\n\n  Uploader.prototype.checkExtension = function (files) {\n    var dropFiles = files;\n\n    if (!this.isBlank(this.allowedExtensions)) {\n      var allowedExtensions = [];\n      var extensions = this.allowedExtensions.split(',');\n\n      for (var _i = 0, extensions_1 = extensions; _i < extensions_1.length; _i++) {\n        var extension = extensions_1[_i];\n        allowedExtensions.push(extension.trim().toLocaleLowerCase());\n      }\n\n      for (var i = 0; i < files.length; i++) {\n        if (allowedExtensions.indexOf(('.' + files[i].type).toLocaleLowerCase()) === -1) {\n          files[i].status = this.localizedTexts('invalidFileType');\n          files[i].statusCode = '0';\n        }\n      }\n    }\n\n    return dropFiles;\n  };\n\n  Uploader.prototype.validatedFileSize = function (fileSize) {\n    var minSizeError = '';\n    var maxSizeError = '';\n\n    if (fileSize < this.minFileSize) {\n      minSizeError = this.localizedTexts('invalidMinFileSize');\n    } else if (fileSize > this.maxFileSize) {\n      maxSizeError = this.localizedTexts('invalidMaxFileSize');\n    } else {\n      minSizeError = '';\n      maxSizeError = '';\n    }\n\n    var errorMessage = {\n      minSize: minSizeError,\n      maxSize: maxSizeError\n    };\n    return errorMessage;\n  };\n\n  Uploader.prototype.isPreLoadFile = function (fileData) {\n    var isPreload = false;\n\n    for (var i = 0; i < this.files.length; i++) {\n      if (this.files[i].name === fileData.name.slice(0, fileData.name.lastIndexOf('.')) && this.files[i].type === fileData.type) {\n        isPreload = true;\n      }\n    }\n\n    return isPreload;\n  };\n\n  Uploader.prototype.createCustomfileList = function (fileData) {\n    this.createParentUL();\n    resetBlazorTemplate(this.element.id + 'Template', 'Template');\n\n    for (var _i = 0, fileData_1 = fileData; _i < fileData_1.length; _i++) {\n      var listItem = fileData_1[_i];\n      var liElement = this.createElement('li', {\n        className: FILE,\n        attrs: {\n          'data-file-name': listItem.name\n        }\n      });\n      this.uploadTemplateFn = this.templateComplier(this.template);\n      var fromElements = [].slice.call(this.uploadTemplateFn(listItem, null, null, this.element.id + 'Template', this.isStringTemplate));\n      var index = fileData.indexOf(listItem);\n      append(fromElements, liElement);\n      var eventArgs = {\n        element: liElement,\n        fileInfo: listItem,\n        index: index,\n        isPreload: this.isPreLoadFile(listItem)\n      };\n      var eventsArgs = {\n        element: liElement,\n        fileInfo: listItem,\n        index: index,\n        isPreload: this.isPreLoadFile(listItem)\n      };\n      this.trigger('rendering', eventArgs);\n      this.trigger('fileListRendering', eventsArgs);\n      this.listParent.appendChild(liElement);\n      this.fileList.push(liElement);\n    }\n\n    updateBlazorTemplate(this.element.id + 'Template', 'Template', this, false);\n  };\n\n  Uploader.prototype.createParentUL = function () {\n    if (isNullOrUndefined(this.listParent)) {\n      this.listParent = this.createElement('ul', {\n        className: LIST_PARENT\n      });\n      this.uploadWrapper.appendChild(this.listParent);\n    }\n  };\n\n  Uploader.prototype.formFileList = function (fileData, files) {\n    var fileList = this.createElement('li', {\n      className: FILE\n    });\n    fileList.setAttribute('data-files-count', fileData.length + '');\n    var fileContainer = this.createElement('span', {\n      className: TEXT_CONTAINER\n    });\n    var statusMessage;\n\n    for (var _i = 0, fileData_2 = fileData; _i < fileData_2.length; _i++) {\n      var listItem = fileData_2[_i];\n      var fileNameEle = this.createElement('span', {\n        className: FILE_NAME\n      });\n      fileNameEle.innerHTML = this.getFileNameOnly(listItem.name);\n      var fileTypeEle = this.createElement('span', {\n        className: FILE_TYPE\n      });\n      fileTypeEle.innerHTML = '.' + this.getFileType(listItem.name);\n\n      if (!this.enableRtl) {\n        fileContainer.appendChild(fileNameEle);\n        fileContainer.appendChild(fileTypeEle);\n      } else {\n        var rtlContainer = this.createElement('span', {\n          className: RTL_CONTAINER\n        });\n        rtlContainer.appendChild(fileTypeEle);\n        rtlContainer.appendChild(fileNameEle);\n        fileContainer.appendChild(rtlContainer);\n      }\n\n      this.truncateName(fileNameEle);\n      statusMessage = this.formValidateFileInfo(listItem, fileList);\n    }\n\n    fileList.appendChild(fileContainer);\n    this.setListToFileInfo(fileData, fileList);\n    var index = this.listParent.querySelectorAll('li').length;\n    var infoEle = this.createElement('span');\n\n    if (fileList.classList.contains(INVALID_FILE)) {\n      infoEle.classList.add(STATUS);\n      infoEle.classList.add(INVALID_FILE);\n      infoEle.innerText = fileData.length > 1 ? this.localizedTexts('invalidFileSelection') : statusMessage;\n    } else {\n      infoEle.classList.add(fileData.length > 1 ? INFORMATION : FILE_SIZE);\n      infoEle.innerText = fileData.length > 1 ? this.localizedTexts('totalFiles') + ': ' + fileData.length + ' , ' + this.localizedTexts('size') + ': ' + this.bytesToSize(this.getFileSize(fileData)) : this.bytesToSize(fileData[0].size);\n      this.createFormInput(fileData);\n    }\n\n    fileContainer.appendChild(infoEle);\n\n    if (isNullOrUndefined(fileList.querySelector('.e-icons'))) {\n      var iconElement = this.createElement('span', {\n        className: 'e-icons',\n        attrs: {\n          'tabindex': this.btnTabIndex\n        }\n      });\n      /* istanbul ignore next */\n\n      if (this.browserName === 'msie') {\n        iconElement.classList.add('e-msie');\n      }\n\n      iconElement.setAttribute('title', this.localizedTexts('remove'));\n      fileList.appendChild(fileContainer);\n      fileList.appendChild(iconElement);\n      EventHandler.add(iconElement, 'click', this.removeFiles, this);\n      iconElement.classList.add(REMOVE_ICON);\n    }\n\n    var eventArgs = {\n      element: fileList,\n      fileInfo: this.mergeFileInfo(fileData, fileList),\n      index: index,\n      isPreload: this.isPreLoadFile(this.mergeFileInfo(fileData, fileList))\n    };\n    var eventsArgs = {\n      element: fileList,\n      fileInfo: this.mergeFileInfo(fileData, fileList),\n      index: index,\n      isPreload: this.isPreLoadFile(this.mergeFileInfo(fileData, fileList))\n    };\n    this.trigger('rendering', eventArgs);\n    this.trigger('fileListRendering', eventsArgs);\n    this.listParent.appendChild(fileList);\n    this.fileList.push(fileList);\n  };\n\n  Uploader.prototype.formValidateFileInfo = function (listItem, fileList) {\n    var statusMessage = listItem.status;\n    var validationMessages = this.validatedFileSize(listItem.size);\n\n    if (validationMessages.minSize !== '' || validationMessages.maxSize !== '') {\n      this.addInvalidClass(fileList);\n      statusMessage = validationMessages.minSize !== '' ? this.localizedTexts('invalidMinFileSize') : validationMessages.maxSize !== '' ? this.localizedTexts('invalidMaxFileSize') : statusMessage;\n    }\n\n    var typeValidationMessage = this.checkExtension(this.getFilesInArray(listItem))[0].status;\n\n    if (typeValidationMessage === this.localizedTexts('invalidFileType')) {\n      this.addInvalidClass(fileList);\n      statusMessage = typeValidationMessage;\n    }\n\n    return statusMessage;\n  };\n\n  Uploader.prototype.addInvalidClass = function (fileList) {\n    fileList.classList.add(INVALID_FILE);\n  };\n\n  Uploader.prototype.createFormInput = function (fileData) {\n    var inputElement = this.element.cloneNode(true);\n    inputElement.classList.add(HIDDEN_INPUT);\n\n    for (var _i = 0, fileData_3 = fileData; _i < fileData_3.length; _i++) {\n      var listItem = fileData_3[_i];\n      listItem.input = inputElement;\n    }\n\n    inputElement.setAttribute('name', this.uploaderName);\n    this.uploadWrapper.querySelector('.' + INPUT_WRAPPER).appendChild(inputElement);\n\n    if (this.browserName !== 'msie' && this.browserName !== 'edge') {\n      this.element.value = '';\n    }\n  };\n\n  Uploader.prototype.getFileSize = function (fileData) {\n    var fileSize = 0;\n\n    for (var _i = 0, fileData_4 = fileData; _i < fileData_4.length; _i++) {\n      var file = fileData_4[_i];\n      fileSize += file.size;\n    }\n\n    return fileSize;\n  };\n\n  Uploader.prototype.mergeFileInfo = function (fileData, fileList) {\n    var result = {\n      name: '',\n      rawFile: '',\n      size: 0,\n      status: '',\n      type: '',\n      validationMessages: {\n        minSize: '',\n        maxSize: ''\n      },\n      statusCode: '1',\n      list: fileList\n    };\n    var fileNames = [];\n    var type = '';\n\n    for (var _i = 0, fileData_5 = fileData; _i < fileData_5.length; _i++) {\n      var listItem = fileData_5[_i];\n      fileNames.push(listItem.name);\n      type = listItem.type;\n    }\n\n    result.name = fileNames.join(', ');\n    result.size = this.getFileSize(fileData);\n    result.type = type;\n    result.status = this.statusForFormUpload(fileData, fileList);\n    return result;\n  };\n\n  Uploader.prototype.statusForFormUpload = function (fileData, fileList) {\n    var isValid = true;\n    var statusMessage;\n\n    for (var _i = 0, fileData_6 = fileData; _i < fileData_6.length; _i++) {\n      var listItem = fileData_6[_i];\n      statusMessage = listItem.status;\n      var validationMessages = this.validatedFileSize(listItem.size);\n\n      if (validationMessages.minSize !== '' || validationMessages.maxSize !== '') {\n        isValid = false;\n        statusMessage = validationMessages.minSize !== '' ? this.localizedTexts('invalidMinFileSize') : validationMessages.maxSize !== '' ? this.localizedTexts('invalidMaxFileSize') : statusMessage;\n      }\n\n      var typeValidationMessage = this.checkExtension(this.getFilesInArray(listItem))[0].status;\n\n      if (typeValidationMessage === this.localizedTexts('invalidFileType')) {\n        isValid = false;\n        statusMessage = typeValidationMessage;\n      }\n    }\n\n    if (!isValid) {\n      fileList.classList.add(INVALID_FILE);\n      statusMessage = fileData.length > 1 ? this.localizedTexts('invalidFileSelection') : statusMessage;\n    } else {\n      statusMessage = this.localizedTexts('totalFiles') + ': ' + fileData.length + ' , ' + this.localizedTexts('size') + ': ' + this.bytesToSize(this.getFileSize(fileData));\n    }\n\n    return statusMessage;\n  };\n\n  Uploader.prototype.formCustomFileList = function (fileData, files) {\n    this.createParentUL();\n    resetBlazorTemplate(this.element.id + 'Template', 'Template');\n    var fileList = this.createElement('li', {\n      className: FILE\n    });\n    fileList.setAttribute('data-files-count', fileData.length + '');\n    this.setListToFileInfo(fileData, fileList);\n    var result = this.mergeFileInfo(fileData, fileList);\n    fileList.setAttribute('data-file-name', result.name);\n    this.uploadTemplateFn = this.templateComplier(this.template);\n    var fromElements = [].slice.call(this.uploadTemplateFn(result, null, null, this.element.id + 'Template', this.isStringTemplate));\n    var index = this.listParent.querySelectorAll('li').length;\n    append(fromElements, fileList);\n\n    if (!fileList.classList.contains(INVALID_FILE)) {\n      this.createFormInput(fileData);\n    }\n\n    var eventArgs = {\n      element: fileList,\n      fileInfo: result,\n      index: index,\n      isPreload: this.isPreLoadFile(result)\n    };\n    var eventsArgs = {\n      element: fileList,\n      fileInfo: result,\n      index: index,\n      isPreload: this.isPreLoadFile(result)\n    };\n    this.trigger('rendering', eventArgs);\n    this.trigger('fileListRendering', eventsArgs);\n    this.listParent.appendChild(fileList);\n    this.fileList.push(fileList);\n    updateBlazorTemplate(this.element.id + 'Template', 'Template', this, false);\n  };\n  /**\n   * Create the file list for specified files data.\n   * @param { FileInfo[] } fileData - specifies the files data for file list creation.\n   * @returns void\n   */\n\n\n  Uploader.prototype.createFileList = function (fileData, isSelectedFile) {\n    if (this.isBlazorSaveUrl || this.isBlazorTemplate) {\n      var fileListData = isSelectedFile ? this.filesData = this.filesData.concat(fileData) : fileData; // tslint:disable-next-line\n\n      this.interopAdaptor.invokeMethodAsync('createFileList', fileListData, this.isForm);\n    } else {\n      this.createParentUL();\n\n      if (this.template !== '' && !isNullOrUndefined(this.template)) {\n        if (this.isFormUpload()) {\n          this.uploadWrapper.classList.add(FORM_UPLOAD);\n          this.formCustomFileList(fileData, this.element.files);\n        } else {\n          this.createCustomfileList(fileData);\n        }\n      } else if (this.isFormUpload()) {\n        this.uploadWrapper.classList.add(FORM_UPLOAD);\n        this.formFileList(fileData, this.element.files);\n      } else {\n        for (var _i = 0, fileData_7 = fileData; _i < fileData_7.length; _i++) {\n          var listItem = fileData_7[_i];\n          var liElement = this.createElement('li', {\n            className: FILE,\n            attrs: {\n              'data-file-name': listItem.name,\n              'data-files-count': '1'\n            }\n          });\n          var textContainer = this.createElement('span', {\n            className: TEXT_CONTAINER\n          });\n          var textElement = this.createElement('span', {\n            className: FILE_NAME,\n            attrs: {\n              'title': listItem.name\n            }\n          });\n          textElement.innerHTML = this.getFileNameOnly(listItem.name);\n          var fileExtension = this.createElement('span', {\n            className: FILE_TYPE\n          });\n          fileExtension.innerHTML = '.' + this.getFileType(listItem.name);\n\n          if (!this.enableRtl) {\n            textContainer.appendChild(textElement);\n            textContainer.appendChild(fileExtension);\n          } else {\n            var rtlContainer = this.createElement('span', {\n              className: RTL_CONTAINER\n            });\n            rtlContainer.appendChild(fileExtension);\n            rtlContainer.appendChild(textElement);\n            textContainer.appendChild(rtlContainer);\n          }\n\n          var fileSize = this.createElement('span', {\n            className: FILE_SIZE\n          });\n          fileSize.innerHTML = this.bytesToSize(listItem.size);\n          textContainer.appendChild(fileSize);\n          var statusElement = this.createElement('span', {\n            className: STATUS\n          });\n          textContainer.appendChild(statusElement);\n          statusElement.innerHTML = listItem.status;\n          liElement.appendChild(textContainer);\n          var iconElement = this.createElement('span', {\n            className: ' e-icons',\n            attrs: {\n              'tabindex': this.btnTabIndex\n            }\n          });\n          /* istanbul ignore next */\n\n          if (this.browserName === 'msie') {\n            iconElement.classList.add('e-msie');\n          }\n\n          iconElement.setAttribute('title', this.localizedTexts('remove'));\n          liElement.appendChild(iconElement);\n          EventHandler.add(iconElement, 'click', this.removeFiles, this);\n\n          if (listItem.statusCode === '2') {\n            statusElement.classList.add(UPLOAD_SUCCESS);\n            iconElement.classList.add(DELETE_ICON);\n            iconElement.setAttribute('title', this.localizedTexts('delete'));\n          } else if (listItem.statusCode !== '1') {\n            statusElement.classList.remove(UPLOAD_SUCCESS);\n            statusElement.classList.add(VALIDATION_FAILS);\n          }\n\n          if (this.autoUpload && listItem.statusCode === '1' && this.asyncSettings.saveUrl !== '') {\n            statusElement.innerHTML = '';\n          }\n\n          if (!iconElement.classList.contains(DELETE_ICON)) {\n            iconElement.classList.add(REMOVE_ICON);\n          }\n\n          var index = fileData.indexOf(listItem);\n          var eventArgs = {\n            element: liElement,\n            fileInfo: listItem,\n            index: index,\n            isPreload: this.isPreLoadFile(listItem)\n          };\n          var eventsArgs = {\n            element: liElement,\n            fileInfo: listItem,\n            index: index,\n            isPreload: this.isPreLoadFile(listItem)\n          };\n          this.trigger('rendering', eventArgs);\n          this.trigger('fileListRendering', eventsArgs);\n          this.listParent.appendChild(liElement);\n          this.fileList.push(liElement);\n          this.truncateName(textElement);\n          var preventActionComplete = this.flag;\n\n          if (this.isPreLoadFile(listItem)) {\n            this.flag = false;\n            this.checkActionComplete(true);\n            this.flag = preventActionComplete;\n          }\n        }\n      }\n    }\n  };\n\n  Uploader.prototype.getSlicedName = function (nameElement) {\n    var text;\n    text = nameElement.textContent;\n    nameElement.dataset.tail = text.slice(text.length - 10);\n  };\n\n  Uploader.prototype.setListToFileInfo = function (fileData, fileList) {\n    for (var _i = 0, fileData_8 = fileData; _i < fileData_8.length; _i++) {\n      var listItem = fileData_8[_i];\n      listItem.list = fileList;\n    }\n  };\n\n  Uploader.prototype.truncateName = function (name) {\n    var nameElement = name;\n\n    if (this.browserName !== 'edge' && nameElement.offsetWidth < nameElement.scrollWidth) {\n      this.getSlicedName(nameElement);\n      /* istanbul ignore next */\n    } else if (nameElement.offsetWidth + 1 < nameElement.scrollWidth) {\n      this.getSlicedName(nameElement);\n    }\n  };\n\n  Uploader.prototype.getFileType = function (name) {\n    var extension;\n    var index = name.lastIndexOf('.');\n\n    if (index >= 0) {\n      extension = name.substring(index + 1);\n    }\n\n    return extension ? extension : '';\n  };\n\n  Uploader.prototype.getFileNameOnly = function (name) {\n    var type = this.getFileType(name);\n    var names = name.split('.' + type);\n    return type = names[0];\n  };\n\n  Uploader.prototype.setInitialAttributes = function () {\n    if (this.initialAttr.accept) {\n      this.element.setAttribute('accept', this.initialAttr.accept);\n    }\n\n    if (this.initialAttr.disabled) {\n      this.element.setAttribute('disabled', 'disabled');\n    }\n\n    if (this.initialAttr.multiple) {\n      var newAttr = document.createAttribute('multiple');\n      this.element.setAttributeNode(newAttr);\n    }\n  };\n\n  Uploader.prototype.filterfileList = function (files) {\n    var filterFiles = [];\n    var li;\n\n    for (var i = 0; i < files.length; i++) {\n      li = this.getLiElement(files[i]);\n\n      if (!li.classList.contains(UPLOAD_SUCCESS)) {\n        filterFiles.push(files[i]);\n      }\n    }\n\n    return filterFiles;\n  };\n\n  Uploader.prototype.updateStatus = function (files, status, statusCode, updateLiStatus) {\n    if (updateLiStatus === void 0) {\n      updateLiStatus = true;\n    }\n\n    if (!(status === '' || isNullOrUndefined(status)) && !(statusCode === '' || isNullOrUndefined(statusCode))) {\n      if (this.isBlazorSaveUrl) {\n        for (var i = 0; i < this.filesData.length; i++) {\n          if (this.filesData[i].name === files.name) {\n            this.filesData[i].status = status;\n            this.filesData[i].statusCode = statusCode;\n          }\n        }\n      } else {\n        files.status = status;\n        files.statusCode = statusCode;\n      }\n    }\n\n    if (updateLiStatus) {\n      var li = this.getLiElement(files);\n\n      if (!isNullOrUndefined(li)) {\n        if (!isNullOrUndefined(li.querySelector('.' + STATUS)) && !(status === '' || isNullOrUndefined(status))) {\n          li.querySelector('.' + STATUS).textContent = status;\n        }\n      }\n    }\n\n    return files;\n  };\n\n  Uploader.prototype.getLiElement = function (files) {\n    var index;\n\n    for (var i = 0; i < this.filesData.length; i++) {\n      if (this.filesData[i].name === files.name) {\n        index = i;\n      }\n    }\n\n    return this.fileList[index];\n  };\n\n  Uploader.prototype.createProgressBar = function (liElement) {\n    var progressbarWrapper = this.createElement('span', {\n      className: PROGRESS_WRAPPER\n    });\n    var progressBar = this.createElement('progressbar', {\n      className: PROGRESSBAR,\n      attrs: {\n        value: '0',\n        max: '100'\n      }\n    });\n    var progressbarInnerWrapper = this.createElement('span', {\n      className: PROGRESS_INNER_WRAPPER\n    });\n    progressBar.setAttribute('style', 'width: 0%');\n    var progressbarText = this.createElement('span', {\n      className: PROGRESSBAR_TEXT\n    });\n    progressbarText.textContent = '0%';\n    progressbarInnerWrapper.appendChild(progressBar);\n    progressbarWrapper.appendChild(progressbarInnerWrapper);\n    progressbarWrapper.appendChild(progressbarText);\n    liElement.querySelector('.' + TEXT_CONTAINER).appendChild(progressbarWrapper);\n  };\n  /* istanbul ignore next */\n\n\n  Uploader.prototype.updateProgressbar = function (e, li) {\n    if (!isNaN(Math.round(e.loaded / e.total * 100)) && !isNullOrUndefined(li.querySelector('.' + PROGRESSBAR))) {\n      if (!isNullOrUndefined(this.progressInterval) && this.progressInterval !== '') {\n        var value = Math.round(e.loaded / e.total * 100) % parseInt(this.progressInterval, 10);\n\n        if (value === 0 || value === 100) {\n          this.changeProgressValue(li, Math.round(e.loaded / e.total * 100).toString() + '%');\n        }\n      } else {\n        this.changeProgressValue(li, Math.round(e.loaded / e.total * 100).toString() + '%');\n      }\n    }\n  };\n\n  Uploader.prototype.changeProgressValue = function (li, progressValue) {\n    li.querySelector('.' + PROGRESSBAR).setAttribute('style', 'width:' + progressValue);\n    li.querySelector('.' + PROGRESSBAR_TEXT).textContent = progressValue;\n  };\n\n  Uploader.prototype.uploadInProgress = function (e, files, customUI, request) {\n    var li = this.getLiElement(files);\n\n    if (isNullOrUndefined(li) && !customUI) {\n      return;\n    }\n\n    if (!isNullOrUndefined(li)) {\n      /* istanbul ignore next */\n      if (files.statusCode === '5') {\n        this.cancelUploadingFile(files, e, request, li);\n      }\n\n      if (!(li.querySelectorAll('.' + PROGRESS_WRAPPER).length > 0) && li.querySelector('.' + STATUS)) {\n        li.querySelector('.' + STATUS).classList.add(UPLOAD_INPROGRESS);\n        this.createProgressBar(li);\n        this.updateProgressBarClasses(li, UPLOAD_INPROGRESS);\n        li.querySelector('.' + STATUS).classList.remove(UPLOAD_FAILED);\n      }\n\n      this.updateProgressbar(e, li);\n      var iconEle = li.querySelector('.' + REMOVE_ICON);\n\n      if (!isNullOrUndefined(iconEle)) {\n        iconEle.classList.add(ABORT_ICON, UPLOAD_INPROGRESS);\n        iconEle.setAttribute('title', this.localizedTexts('abort'));\n        iconEle.classList.remove(REMOVE_ICON);\n      }\n    } else {\n      this.cancelUploadingFile(files, e, request);\n    }\n\n    var args = {\n      e: e,\n      operation: 'upload',\n      file: this.updateStatus(files, this.localizedTexts('inProgress'), '3')\n    };\n    this.trigger('progress', args);\n  };\n  /* istanbul ignore next */\n\n\n  Uploader.prototype.cancelUploadingFile = function (files, e, request, li) {\n    var _this = this;\n\n    if (files.statusCode === '5') {\n      var eventArgs = {\n        event: e,\n        fileData: files,\n        cancel: false\n      };\n      this.trigger('canceling', eventArgs, function (eventArgs) {\n        if (eventArgs.cancel) {\n          files.statusCode = '3';\n\n          if (!isNullOrUndefined(li)) {\n            var spinnerTarget = li.querySelector('.' + ABORT_ICON);\n\n            if (!isNullOrUndefined(spinnerTarget)) {\n              hideSpinner(spinnerTarget);\n              detach(li.querySelector('.e-spinner-pane'));\n            }\n          }\n        } else {\n          request.emitError = false;\n          request.httpRequest.abort();\n          var formData = new FormData();\n\n          if (files.statusCode === '5') {\n            var name_2 = _this.element.getAttribute('name');\n\n            formData.append(name_2, files.name);\n            formData.append('cancel-uploading', files.name);\n            var ajax = new Ajax(_this.asyncSettings.removeUrl, 'POST', true, null);\n            ajax.emitError = false;\n\n            ajax.onLoad = function (e) {\n              _this.removecanceledFile(e, files);\n\n              return {};\n            };\n\n            ajax.send(formData);\n          }\n        }\n      });\n    }\n  };\n\n  Uploader.prototype.removecanceledFile = function (e, file) {\n    var liElement = this.getLiElement(file);\n\n    if (liElement.querySelector('.' + RETRY_ICON) || isNullOrUndefined(liElement.querySelector('.' + ABORT_ICON))) {\n      return;\n    }\n\n    this.updateStatus(file, this.localizedTexts('fileUploadCancel'), '5');\n    this.renderFailureState(e, file, liElement);\n    var spinnerTarget = liElement.querySelector('.' + REMOVE_ICON);\n\n    if (!isNullOrUndefined(liElement)) {\n      hideSpinner(spinnerTarget);\n      detach(liElement.querySelector('.e-spinner-pane'));\n    }\n\n    var requestResponse = e && e.currentTarget ? this.getResponse(e) : null;\n    var args = {\n      event: e,\n      response: requestResponse,\n      operation: 'cancel',\n      file: file\n    };\n    this.trigger('success', args);\n  };\n\n  Uploader.prototype.renderFailureState = function (e, file, liElement) {\n    var _this = this;\n\n    this.updateProgressBarClasses(liElement, UPLOAD_FAILED);\n    this.removeProgressbar(liElement, 'failure');\n\n    if (!isNullOrUndefined(liElement.querySelector('.e-file-status'))) {\n      liElement.querySelector('.e-file-status').classList.add(UPLOAD_FAILED);\n    }\n\n    var deleteIcon = liElement.querySelector('.' + ABORT_ICON);\n\n    if (isNullOrUndefined(deleteIcon)) {\n      return;\n    }\n\n    deleteIcon.classList.remove(ABORT_ICON, UPLOAD_INPROGRESS);\n    deleteIcon.classList.add(REMOVE_ICON);\n    deleteIcon.setAttribute('title', this.localizedTexts('remove'));\n    this.pauseButton = this.createElement('span', {\n      className: 'e-icons e-file-reload-btn',\n      attrs: {\n        'tabindex': this.btnTabIndex\n      }\n    });\n    deleteIcon.parentElement.insertBefore(this.pauseButton, deleteIcon);\n    this.pauseButton.setAttribute('title', this.localizedTexts('retry'));\n    var retryElement = liElement.querySelector('.' + RETRY_ICON);\n    /* istanbul ignore next */\n\n    retryElement.addEventListener('click', function (e) {\n      _this.reloadcanceledFile(e, file, liElement, false);\n    }, false);\n  };\n\n  Uploader.prototype.reloadcanceledFile = function (e, file, liElement, custom) {\n    file.statusCode = '1';\n    file.status = this.localizedTexts('readyToUploadMessage');\n\n    if (!custom) {\n      liElement.querySelector('.' + STATUS).classList.remove(UPLOAD_FAILED);\n\n      if (!isNullOrUndefined(liElement.querySelector('.' + RETRY_ICON))) {\n        detach(liElement.querySelector('.' + RETRY_ICON));\n      }\n\n      this.pauseButton = null;\n    }\n    /* istanbul ignore next */\n\n\n    liElement.classList.add(RESTRICT_RETRY);\n    this.upload([file]);\n  };\n  /* istanbul ignore next */\n\n\n  Uploader.prototype.uploadComplete = function (e, file, customUI) {\n    var status = e.target;\n\n    if (status.readyState === 4 && status.status >= 200 && status.status <= 299) {\n      var li = this.getLiElement(file);\n\n      if (isNullOrUndefined(li) && (!customUI || isNullOrUndefined(customUI))) {\n        return;\n      }\n\n      if (!isNullOrUndefined(li)) {\n        this.updateProgressBarClasses(li, UPLOAD_SUCCESS);\n        this.removeProgressbar(li, 'success');\n        var iconEle = li.querySelector('.' + ABORT_ICON);\n\n        if (!isNullOrUndefined(iconEle)) {\n          iconEle.classList.add(DELETE_ICON);\n          iconEle.setAttribute('title', this.localizedTexts('delete'));\n          iconEle.classList.remove(ABORT_ICON);\n          iconEle.classList.remove(UPLOAD_INPROGRESS);\n        }\n      }\n\n      this.raiseSuccessEvent(e, file);\n    } else {\n      this.uploadFailed(e, file);\n    }\n  };\n\n  Uploader.prototype.getResponse = function (e) {\n    // tslint:disable-next-line\n    var target = e.currentTarget;\n    var response = {\n      readyState: target.readyState,\n      statusCode: target.status,\n      statusText: target.statusText,\n      headers: target.getAllResponseHeaders(),\n      withCredentials: target.withCredentials\n    };\n    return response;\n  };\n  /* istanbul ignore next */\n\n\n  Uploader.prototype.serverRemoveIconBindEvent = function () {\n    if (this.uploadWrapper && this.isBlazorSaveUrl) {\n      var iconElement = [].slice.call(this.uploadWrapper.querySelectorAll('ul li'));\n\n      for (var i = 0; i < iconElement.length; i++) {\n        var removeIconEle = iconElement[i] ? iconElement[i].querySelector('.e-icons') : null;\n\n        if (removeIconEle) {\n          EventHandler.remove(removeIconEle, 'click', this.removeFiles);\n          EventHandler.add(removeIconEle, 'click', this.removeFiles, this);\n        }\n      }\n    }\n  };\n\n  Uploader.prototype.raiseSuccessEvent = function (e, file) {\n    var _this = this;\n\n    var response = e && e.currentTarget ? this.getResponse(e) : null;\n    var statusMessage = this.localizedTexts('uploadSuccessMessage');\n    var args = {\n      e: e,\n      response: response,\n      operation: 'upload',\n      file: this.updateStatus(file, statusMessage, '2', false),\n      statusText: statusMessage\n    };\n\n    if (!this.isBlazorSaveUrl) {\n      var liElement = this.getLiElement(file);\n\n      if (!isNullOrUndefined(liElement)) {\n        var spinnerEle = liElement.querySelector('.' + SPINNER_PANE);\n\n        if (!isNullOrUndefined(spinnerEle)) {\n          hideSpinner(liElement);\n          detach(spinnerEle);\n        }\n      }\n    }\n\n    this.trigger('success', args, function (args) {\n      // tslint:disable-next-line\n      _this.updateStatus(file, args.statusText, '2');\n\n      _this.uploadedFilesData.push(file);\n\n      if (!_this.isBlazorSaveUrl) {\n        _this.trigger('change', {\n          file: _this.uploadedFilesData\n        });\n      }\n\n      _this.checkActionButtonStatus();\n\n      if (_this.fileList.length > 0) {\n        if (!_this.getLiElement(file).classList.contains(RESTRICT_RETRY)) {\n          _this.uploadSequential();\n\n          _this.checkActionComplete(true);\n        } else {\n          /* istanbul ignore next */\n          _this.getLiElement(file).classList.remove(RESTRICT_RETRY);\n        }\n      }\n    });\n  };\n\n  Uploader.prototype.uploadFailed = function (e, file) {\n    var _this = this;\n\n    var li = this.getLiElement(file);\n    var response = e && e.currentTarget ? this.getResponse(e) : null;\n    var statusMessage = this.localizedTexts('uploadFailedMessage');\n    var args = {\n      e: e,\n      response: response,\n      operation: 'upload',\n      file: this.updateStatus(file, statusMessage, '0', false),\n      statusText: statusMessage\n    };\n\n    if (!isNullOrUndefined(li)) {\n      this.renderFailureState(e, file, li);\n    }\n\n    this.trigger('failure', args, function (args) {\n      // tslint:disable-next-line\n      _this.updateStatus(file, args.statusText, '0');\n\n      _this.checkActionButtonStatus();\n\n      _this.uploadSequential();\n\n      _this.checkActionComplete(true);\n    });\n  };\n\n  Uploader.prototype.uploadSequential = function () {\n    if (this.sequentialUpload) {\n      if (this.autoUpload) {\n        /* istanbul ignore next */\n        this.checkAutoUpload(this.filesData);\n      } else {\n        this.uploadButtonClick();\n      }\n    }\n  };\n\n  Uploader.prototype.checkActionComplete = function (increment) {\n    increment ? ++this.actionCompleteCount : --this.actionCompleteCount;\n    this.raiseActionComplete();\n  };\n\n  Uploader.prototype.raiseActionComplete = function () {\n    if (this.filesData.length === this.actionCompleteCount && this.flag) {\n      this.flag = false;\n      var eventArgs = {\n        fileData: []\n      };\n      eventArgs.fileData = this.getSelectedFileStatus(this.selectedFiles);\n      this.trigger('actionComplete', eventArgs);\n    }\n  };\n\n  Uploader.prototype.getSelectedFileStatus = function (selectedFiles) {\n    var matchFiles = [];\n    var matchFilesIndex = 0;\n\n    for (var selectFileIndex = 0; selectFileIndex < selectedFiles.length; selectFileIndex++) {\n      var selectedFileData = selectedFiles[selectFileIndex];\n\n      for (var fileDataIndex = 0; fileDataIndex < this.filesData.length; fileDataIndex++) {\n        if (this.filesData[fileDataIndex].name === selectedFileData.name) {\n          matchFiles[matchFilesIndex] = this.filesData[fileDataIndex];\n          ++matchFilesIndex;\n        }\n      }\n    }\n\n    return matchFiles;\n  };\n\n  Uploader.prototype.updateProgressBarClasses = function (li, className) {\n    var progressBar = li.querySelector('.' + PROGRESSBAR);\n\n    if (!isNullOrUndefined(progressBar)) {\n      progressBar.classList.add(className);\n    }\n  };\n\n  Uploader.prototype.removeProgressbar = function (li, callType) {\n    var _this = this;\n\n    if (!isNullOrUndefined(li.querySelector('.' + PROGRESS_WRAPPER))) {\n      this.progressAnimation = new Animation({\n        duration: 1250\n      });\n      this.progressAnimation.animate(li.querySelector('.' + PROGRESS_WRAPPER), {\n        name: 'FadeOut'\n      });\n      this.progressAnimation.animate(li.querySelector('.' + PROGRESSBAR_TEXT), {\n        name: 'FadeOut'\n      });\n      setTimeout(function () {\n        _this.animateProgressBar(li, callType);\n      }, 750);\n    }\n  };\n  /* istanbul ignore next */\n\n\n  Uploader.prototype.animateProgressBar = function (li, callType) {\n    if (callType === 'success') {\n      li.classList.add(UPLOAD_SUCCESS);\n\n      if (!isNullOrUndefined(li.querySelector('.' + STATUS))) {\n        li.querySelector('.' + STATUS).classList.remove(UPLOAD_INPROGRESS);\n        this.progressAnimation.animate(li.querySelector('.' + STATUS), {\n          name: 'FadeIn'\n        });\n        li.querySelector('.' + STATUS).classList.add(UPLOAD_SUCCESS);\n      }\n    } else {\n      if (!isNullOrUndefined(li.querySelector('.' + STATUS))) {\n        li.querySelector('.' + STATUS).classList.remove(UPLOAD_INPROGRESS);\n        this.progressAnimation.animate(li.querySelector('.' + STATUS), {\n          name: 'FadeIn'\n        });\n        li.querySelector('.' + STATUS).classList.add(UPLOAD_FAILED);\n      }\n    }\n\n    if (li.querySelector('.' + PROGRESS_WRAPPER)) {\n      detach(li.querySelector('.' + PROGRESS_WRAPPER));\n    }\n  };\n\n  Uploader.prototype.setExtensions = function (extensions) {\n    if (extensions !== '' && !isNullOrUndefined(extensions)) {\n      this.element.setAttribute('accept', extensions);\n    } else {\n      this.element.removeAttribute('accept');\n    }\n  };\n\n  Uploader.prototype.templateComplier = function (uploadTemplate) {\n    if (uploadTemplate) {\n      var exception = void 0;\n\n      try {\n        if (document.querySelectorAll(uploadTemplate).length) {\n          return compile(document.querySelector(uploadTemplate).innerHTML.trim());\n        }\n      } catch (exception) {\n        return compile(uploadTemplate);\n      }\n    }\n\n    return undefined;\n  };\n\n  Uploader.prototype.setRTL = function () {\n    this.enableRtl ? addClass([this.uploadWrapper], RTL) : removeClass([this.uploadWrapper], RTL);\n  };\n\n  Uploader.prototype.localizedTexts = function (localeText) {\n    this.l10n.setLocale(this.locale);\n    return this.l10n.getConstant(localeText);\n  };\n\n  Uploader.prototype.setControlStatus = function () {\n    if (!this.enabled) {\n      this.uploadWrapper.classList.add(DISABLED);\n      this.element.setAttribute('disabled', 'disabled');\n      this.browseButton.setAttribute('disabled', 'disabled');\n\n      if (!isNullOrUndefined(this.clearButton)) {\n        this.clearButton.setAttribute('disabled', 'disabled');\n      }\n\n      if (!isNullOrUndefined(this.uploadButton)) {\n        this.uploadButton.setAttribute('disabled', 'disabled');\n      }\n    } else {\n      if (this.uploadWrapper.classList.contains(DISABLED)) {\n        this.uploadWrapper.classList.remove(DISABLED);\n      }\n\n      if (!isNullOrUndefined(this.browseButton) && this.element.hasAttribute('disabled')) {\n        this.element.removeAttribute('disabled');\n        this.browseButton.removeAttribute('disabled');\n      }\n\n      if (!isNullOrUndefined(this.clearButton) && this.clearButton.hasAttribute('disabled')) {\n        this.clearButton.removeAttribute('disabled');\n      }\n\n      if (!isNullOrUndefined(this.uploadButton) && this.uploadButton.hasAttribute('disabled')) {\n        this.uploadButton.hasAttribute('disabled');\n      }\n    }\n  };\n\n  Uploader.prototype.checkHTMLAttributes = function (isDynamic) {\n    var attributes = isDynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ['accept', 'multiple', 'disabled'];\n\n    for (var _i = 0, attributes_1 = attributes; _i < attributes_1.length; _i++) {\n      var prop = attributes_1[_i];\n\n      if (!isNullOrUndefined(this.element.getAttribute(prop))) {\n        switch (prop) {\n          case 'accept':\n            // tslint:disable-next-line\n            if (isNullOrUndefined(this.uploaderOptions) || this.uploaderOptions['allowedExtensions'] === undefined || isDynamic) {\n              this.setProperties({\n                allowedExtensions: this.element.getAttribute('accept')\n              }, !isDynamic);\n              this.initialAttr.accept = this.allowedExtensions;\n            }\n\n            break;\n\n          case 'multiple':\n            // tslint:disable-next-line\n            if (isNullOrUndefined(this.uploaderOptions) || this.uploaderOptions['multiple'] === undefined || isDynamic) {\n              var isMutiple = this.element.getAttribute(prop) === 'multiple' || this.element.getAttribute(prop) === '' || this.element.getAttribute(prop) === 'true' ? true : false;\n              this.setProperties({\n                multiple: isMutiple\n              }, !isDynamic);\n              this.initialAttr.multiple = true;\n            }\n\n            break;\n\n          case 'disabled':\n            // tslint:disable-next-line\n            if (isNullOrUndefined(this.uploaderOptions) || this.uploaderOptions['enabled'] === undefined || isDynamic) {\n              var isDisabled = this.element.getAttribute(prop) === 'disabled' || this.element.getAttribute(prop) === '' || this.element.getAttribute(prop) === 'true' ? false : true;\n              this.setProperties({\n                enabled: isDisabled\n              }, !isDynamic);\n              this.initialAttr.disabled = true;\n            }\n\n        }\n      }\n    }\n  };\n\n  Uploader.prototype.chunkUpload = function (file, custom, fileIndex) {\n    var start = 0;\n    var end = Math.min(this.asyncSettings.chunkSize, file.size);\n    var index = 0;\n    var blob = file.rawFile.slice(start, end);\n    var metaData = {\n      chunkIndex: index,\n      blob: blob,\n      file: file,\n      start: start,\n      end: end,\n      retryCount: 0,\n      request: null\n    };\n    this.sendRequest(file, metaData, custom, fileIndex);\n  };\n\n  Uploader.prototype.sendRequest = function (file, metaData, custom, fileIndex) {\n    var _this = this;\n\n    var formData = new FormData();\n    var cloneFile;\n    var blob = file.rawFile.slice(metaData.start, metaData.end);\n    formData.append('chunkFile', blob, file.name);\n    formData.append(this.uploaderName, blob, file.name);\n    formData.append('chunk-index', metaData.chunkIndex.toString());\n    formData.append('chunkIndex', metaData.chunkIndex.toString());\n    var totalChunk = Math.max(Math.ceil(file.size / this.asyncSettings.chunkSize), 1);\n    formData.append('total-chunk', totalChunk.toString());\n    formData.append('totalChunk', totalChunk.toString());\n    var ajax = new Ajax({\n      url: this.asyncSettings.saveUrl,\n      type: 'POST',\n      async: true,\n      contentType: null\n    });\n    ajax.emitError = false;\n\n    ajax.onLoad = function (e) {\n      _this.chunkUploadComplete(e, metaData, custom);\n\n      return {};\n    };\n\n    ajax.onUploadProgress = function (e) {\n      _this.chunkUploadInProgress(e, metaData, custom);\n\n      return {};\n    };\n\n    var eventArgs = {\n      fileData: file,\n      customFormData: [],\n      cancel: false,\n      chunkSize: this.asyncSettings.chunkSize === 0 ? null : this.asyncSettings.chunkSize\n    };\n\n    ajax.beforeSend = function (e) {\n      eventArgs.currentRequest = ajax.httpRequest;\n      eventArgs.currentChunkIndex = metaData.chunkIndex;\n      /* istanbul ignore next */\n\n      if (isBlazor()) {\n        if (_this.currentRequestHeader) {\n          _this.updateCustomheader(ajax.httpRequest, _this.currentRequestHeader);\n        }\n\n        if (_this.customFormDatas) {\n          _this.updateFormData(formData, _this.customFormDatas);\n        }\n      }\n\n      if (eventArgs.currentChunkIndex === 0) {\n        // This event is currently not required but to avoid breaking changes for previous customer, we have included.\n        _this.trigger('uploading', eventArgs, function (eventArgs) {\n          _this.uploadingEventCallback(formData, eventArgs, e, file);\n        });\n      } else {\n        _this.trigger('chunkUploading', eventArgs, function (eventArgs) {\n          _this.uploadingEventCallback(formData, eventArgs, e, file);\n        });\n      }\n    };\n    /* istanbul ignore next */\n\n\n    ajax.onError = function (e) {\n      _this.chunkUploadFailed(e, metaData, custom);\n\n      return {};\n    };\n\n    ajax.send(formData);\n    metaData.request = ajax;\n  };\n\n  Uploader.prototype.uploadingEventCallback = function (formData, eventArgs, e, file) {\n    if (eventArgs.cancel) {\n      this.eventCancelByArgs(e, eventArgs, file);\n    } else {\n      this.updateFormData(formData, eventArgs.customFormData);\n    }\n  };\n\n  Uploader.prototype.eventCancelByArgs = function (e, eventArgs, file) {\n    var _this = this;\n\n    e.cancel = true;\n\n    if (eventArgs.fileData.statusCode === '5') {\n      return;\n    }\n\n    var liElement = this.getLiElement(eventArgs.fileData);\n    liElement.querySelector('.' + STATUS).innerHTML = this.localizedTexts('fileUploadCancel');\n    liElement.querySelector('.' + STATUS).classList.add(UPLOAD_FAILED);\n    eventArgs.fileData.statusCode = '5';\n    eventArgs.fileData.status = this.localizedTexts('fileUploadCancel');\n    this.pauseButton = this.createElement('span', {\n      className: 'e-icons e-file-reload-btn',\n      attrs: {\n        'tabindex': this.btnTabIndex\n      }\n    });\n    var removeIcon = liElement.querySelector('.' + REMOVE_ICON);\n    removeIcon.parentElement.insertBefore(this.pauseButton, removeIcon);\n    this.pauseButton.setAttribute('title', this.localizedTexts('retry'));\n    /* istanbul ignore next */\n\n    this.pauseButton.addEventListener('click', function (e) {\n      _this.reloadcanceledFile(e, file, liElement);\n    }, false);\n    this.checkActionButtonStatus();\n  };\n\n  Uploader.prototype.checkChunkUpload = function () {\n    return this.asyncSettings.chunkSize <= 0 || isNullOrUndefined(this.asyncSettings.chunkSize) ? false : true;\n  };\n\n  Uploader.prototype.chunkUploadComplete = function (e, metaData, custom) {\n    var _this = this;\n\n    var response = e.target;\n    var liElement;\n\n    if (response.readyState === 4 && response.status >= 200 && response.status < 300) {\n      var requestResponse = e && e.currentTarget ? this.getResponse(e) : null;\n      var totalChunk = Math.max(Math.ceil(metaData.file.size / this.asyncSettings.chunkSize), 1);\n      var eventArgs = {\n        event: e,\n        file: metaData.file,\n        chunkIndex: metaData.chunkIndex,\n        totalChunk: totalChunk,\n        chunkSize: this.asyncSettings.chunkSize,\n        response: requestResponse\n      };\n      this.trigger('chunkSuccess', eventArgs);\n\n      if (isNullOrUndefined(custom) || !custom) {\n        liElement = this.getLiElement(metaData.file);\n      }\n\n      this.updateMetaData(metaData);\n\n      if (metaData.end === metaData.file.size) {\n        metaData.file.statusCode = '3';\n      }\n\n      if (metaData.file.statusCode === '5') {\n        var eventArgs_1 = {\n          event: e,\n          fileData: metaData.file,\n          cancel: false\n        };\n        this.trigger('canceling', eventArgs_1, function (eventArgs) {\n          /* istanbul ignore next */\n          if (eventArgs.cancel) {\n            metaData.file.statusCode = '3';\n            var spinnerTarget = liElement.querySelector('.' + ABORT_ICON);\n\n            if (!isNullOrUndefined(liElement) && !isNullOrUndefined(spinnerTarget)) {\n              hideSpinner(spinnerTarget);\n              detach(liElement.querySelector('.e-spinner-pane'));\n            }\n\n            _this.sendNextRequest(metaData);\n          } else {\n            metaData.request.emitError = false;\n            response.abort();\n            var formData = new FormData();\n\n            var name_3 = _this.element.getAttribute('name');\n\n            formData.append(name_3, metaData.file.name);\n            formData.append('cancel-uploading', metaData.file.name);\n            formData.append('cancelUploading', metaData.file.name);\n            var ajax = new Ajax(_this.asyncSettings.removeUrl, 'POST', true, null);\n            ajax.emitError = false;\n\n            ajax.onLoad = function (e) {\n              _this.removeChunkFile(e, metaData, custom);\n\n              return {};\n            };\n\n            ajax.send(formData);\n          }\n        });\n      } else {\n        if (totalChunk - 1 === metaData.chunkIndex && totalChunk > metaData.chunkIndex) {\n          var index = this.pausedData.indexOf(metaData);\n\n          if (index >= 0) {\n            this.pausedData.splice(index, 1);\n          }\n\n          if (isNullOrUndefined(this.template) && (isNullOrUndefined(custom) || !custom) && liElement) {\n            if (liElement) {\n              detach(liElement.querySelector('.' + PAUSE_UPLOAD));\n            }\n\n            this.removeChunkProgressBar(metaData);\n          }\n\n          this.raiseSuccessEvent(e, metaData.file);\n          return;\n        }\n\n        this.sendNextRequest(metaData);\n      }\n    } else {\n      this.chunkUploadFailed(e, metaData);\n    }\n  };\n\n  Uploader.prototype.sendNextRequest = function (metaData) {\n    metaData.start = metaData.end;\n    metaData.end += this.asyncSettings.chunkSize;\n    metaData.end = Math.min(metaData.end, metaData.file.size);\n    metaData.chunkIndex += 1;\n    this.sendRequest(metaData.file, metaData);\n  };\n\n  Uploader.prototype.removeChunkFile = function (e, metaData, custom) {\n    if (isNullOrUndefined(this.template) && isNullOrUndefined(custom) && !custom) {\n      var liElement = this.getLiElement(metaData.file);\n      var deleteIcon = liElement.querySelector('.' + ABORT_ICON);\n      var spinnerTarget = deleteIcon;\n      this.updateStatus(metaData.file, this.localizedTexts('fileUploadCancel'), '5');\n      this.updateProgressBarClasses(liElement, UPLOAD_FAILED);\n      this.removeProgressbar(liElement, 'failure');\n      deleteIcon.classList.remove(ABORT_ICON);\n      deleteIcon.classList.add(REMOVE_ICON);\n      deleteIcon.setAttribute('title', this.localizedTexts('remove'));\n      var pauseIcon = liElement.querySelector('.' + PAUSE_UPLOAD);\n      pauseIcon.classList.add(RETRY_ICON);\n      pauseIcon.classList.remove(PAUSE_UPLOAD);\n      pauseIcon.setAttribute('title', this.localizedTexts('retry'));\n\n      if (!isNullOrUndefined(liElement) && !isNullOrUndefined(deleteIcon)) {\n        hideSpinner(spinnerTarget);\n        detach(liElement.querySelector('.e-spinner-pane'));\n      }\n    }\n  };\n\n  Uploader.prototype.pauseUpload = function (metaData, e, custom) {\n    metaData.file.statusCode = '4';\n    metaData.file.status = this.localizedTexts('pause');\n    this.updateMetaData(metaData);\n    var eventArgs = {\n      event: e ? e : null,\n      file: metaData.file,\n      chunkIndex: metaData.chunkIndex,\n      chunkCount: Math.round(metaData.file.size / this.asyncSettings.chunkSize),\n      chunkSize: this.asyncSettings.chunkSize\n    };\n    this.abortUpload(metaData, custom, eventArgs);\n  };\n\n  Uploader.prototype.abortUpload = function (metaData, custom, eventArgs) {\n    metaData.request.emitError = false;\n    metaData.request.httpRequest.abort();\n    var liElement = this.getLiElement(metaData.file);\n\n    if (isNullOrUndefined(this.template) && (isNullOrUndefined(custom) || !custom)) {\n      var targetElement = liElement.querySelector('.' + PAUSE_UPLOAD);\n      targetElement.classList.remove(PAUSE_UPLOAD);\n      targetElement.classList.add(RESUME_UPLOAD);\n      targetElement.setAttribute('title', this.localizedTexts('resume'));\n      targetElement.nextElementSibling.classList.add(REMOVE_ICON);\n      targetElement.nextElementSibling.classList.remove(ABORT_ICON);\n      targetElement.nextElementSibling.setAttribute('title', this.localizedTexts('remove'));\n    }\n\n    for (var i = 0; i < this.pausedData.length; i++) {\n      if (this.pausedData[i].file.name === metaData.file.name) {\n        this.pausedData.splice(i, 1);\n      }\n    }\n\n    this.pausedData.push(metaData);\n    this.trigger('pausing', eventArgs);\n  };\n\n  Uploader.prototype.resumeUpload = function (metaData, e, custom) {\n    var liElement = this.getLiElement(metaData.file);\n    var targetElement;\n\n    if (!isNullOrUndefined(liElement)) {\n      targetElement = liElement.querySelector('.' + RESUME_UPLOAD);\n    }\n\n    if (!isNullOrUndefined(targetElement) && (isNullOrUndefined(custom) || !custom)) {\n      targetElement.classList.remove(RESUME_UPLOAD);\n      targetElement.classList.add(PAUSE_UPLOAD);\n      targetElement.setAttribute('title', this.localizedTexts('pause'));\n      targetElement.nextElementSibling.classList.remove(REMOVE_ICON);\n      targetElement.nextElementSibling.classList.add(ABORT_ICON);\n      targetElement.nextElementSibling.setAttribute('title', this.localizedTexts('abort'));\n    }\n\n    metaData.file.status = this.localizedTexts('inProgress');\n    metaData.file.statusCode = '3';\n    this.updateMetaData(metaData);\n    var eventArgs = {\n      event: e ? e : null,\n      file: metaData.file,\n      chunkIndex: metaData.chunkIndex,\n      chunkCount: Math.round(metaData.file.size / this.asyncSettings.chunkSize),\n      chunkSize: this.asyncSettings.chunkSize\n    };\n    this.trigger('resuming', eventArgs);\n\n    for (var i = 0; i < this.pausedData.length; i++) {\n      if (this.pausedData[i].end === this.pausedData[i].file.size) {\n        this.chunkUploadComplete(e, metaData, custom);\n      } else {\n        if (this.pausedData[i].file.name === metaData.file.name) {\n          this.pausedData[i].start = this.pausedData[i].end;\n          this.pausedData[i].end = this.pausedData[i].end + this.asyncSettings.chunkSize;\n          this.pausedData[i].end = Math.min(this.pausedData[i].end, this.pausedData[i].file.size);\n          this.pausedData[i].chunkIndex = this.pausedData[i].chunkIndex + 1;\n          this.sendRequest(this.pausedData[i].file, this.pausedData[i], custom);\n        }\n      }\n    }\n  };\n\n  Uploader.prototype.updateMetaData = function (metaData) {\n    if (this.uploadMetaData.indexOf(metaData) === -1) {\n      this.uploadMetaData.push(metaData);\n    } else {\n      this.uploadMetaData.splice(this.uploadMetaData.indexOf(metaData), 1);\n      this.uploadMetaData.push(metaData);\n    }\n  };\n\n  Uploader.prototype.removeChunkProgressBar = function (metaData) {\n    var liElement = this.getLiElement(metaData.file);\n\n    if (!isNullOrUndefined(liElement)) {\n      this.updateProgressBarClasses(liElement, UPLOAD_SUCCESS);\n      this.removeProgressbar(liElement, 'success');\n      var cancelButton = liElement.querySelector('.' + ABORT_ICON);\n\n      if (!isNullOrUndefined(cancelButton)) {\n        cancelButton.classList.add(DELETE_ICON);\n        cancelButton.setAttribute('title', this.localizedTexts('delete'));\n        cancelButton.classList.remove(ABORT_ICON, UPLOAD_INPROGRESS);\n      }\n    }\n  };\n\n  Uploader.prototype.chunkUploadFailed = function (e, metaData, custom) {\n    var _this = this;\n\n    var chunkCount = Math.max(Math.ceil(metaData.file.size / this.asyncSettings.chunkSize), 1);\n    var liElement;\n\n    if (isNullOrUndefined(this.template) && (isNullOrUndefined(custom) || !custom)) {\n      liElement = this.getLiElement(metaData.file);\n    }\n\n    var requestResponse = e && e.currentTarget ? this.getResponse(e) : null;\n    var eventArgs = {\n      event: e,\n      file: metaData.file,\n      chunkIndex: metaData.chunkIndex,\n      totalChunk: chunkCount,\n      chunkSize: this.asyncSettings.chunkSize,\n      cancel: false,\n      response: requestResponse\n    };\n    this.trigger('chunkFailure', eventArgs, function (eventArgs) {\n      // To prevent triggering of failure event\n      // tslint:disable-next-line\n      if (!eventArgs.cancel) {\n        if (metaData.retryCount < _this.asyncSettings.retryCount) {\n          setTimeout(function () {\n            _this.retryRequest(liElement, metaData, custom);\n          }, _this.asyncSettings.retryAfterDelay);\n        } else {\n          if (!isNullOrUndefined(liElement)) {\n            var pauseButton = liElement.querySelector('.' + PAUSE_UPLOAD) ? liElement.querySelector('.' + PAUSE_UPLOAD) : liElement.querySelector('.' + RESUME_UPLOAD);\n\n            if (!isNullOrUndefined(pauseButton)) {\n              pauseButton.classList.add(RETRY_ICON);\n              pauseButton.classList.remove(PAUSE_UPLOAD, RESUME_UPLOAD);\n            }\n\n            _this.updateProgressBarClasses(liElement, UPLOAD_FAILED);\n\n            _this.removeProgressbar(liElement, 'failure');\n\n            liElement.querySelector('.e-icons').classList.remove(UPLOAD_INPROGRESS);\n            var iconElement = liElement.querySelector('.' + ABORT_ICON) ? liElement.querySelector('.' + ABORT_ICON) : liElement.querySelector('.' + REMOVE_ICON);\n            iconElement.classList.remove(ABORT_ICON);\n\n            if (!isNullOrUndefined(liElement.querySelector('.' + PAUSE_UPLOAD))) {\n              detach(liElement.querySelector('.' + PAUSE_UPLOAD));\n            }\n\n            if (metaData.start > 0) {\n              iconElement.classList.add(DELETE_ICON);\n              iconElement.setAttribute('title', _this.localizedTexts('delete'));\n            } else {\n              iconElement.classList.add(REMOVE_ICON);\n              iconElement.setAttribute('title', _this.localizedTexts('remove'));\n            }\n          }\n\n          metaData.retryCount = 0;\n          var file_1 = metaData.file;\n\n          var failureMessage = _this.localizedTexts('uploadFailedMessage');\n\n          var args = {\n            e: e,\n            response: requestResponse,\n            operation: 'upload',\n            file: _this.updateStatus(file_1, failureMessage, '0', false),\n            statusText: failureMessage\n          };\n\n          _this.trigger('failure', args, function (args) {\n            // tslint:disable-next-line\n            _this.updateStatus(file_1, args.statusText, '0');\n\n            _this.uploadSequential();\n\n            _this.checkActionComplete(true);\n          });\n        }\n      }\n    });\n  };\n\n  Uploader.prototype.retryRequest = function (liElement, metaData, custom) {\n    if (isNullOrUndefined(this.template) && (isNullOrUndefined(custom) || !custom) && liElement) {\n      this.updateProgressBarClasses(liElement, UPLOAD_FAILED);\n    }\n\n    metaData.retryCount += 1;\n    this.sendRequest(metaData.file, metaData);\n  };\n\n  Uploader.prototype.checkPausePlayAction = function (e) {\n    var targetElement = e.target;\n    var selectedElement = e.target.parentElement;\n    var index = this.fileList.indexOf(selectedElement);\n    var fileData = this.filesData[index];\n    var metaData = this.getCurrentMetaData(fileData);\n\n    if (targetElement.classList.contains(PAUSE_UPLOAD)) {\n      /* istanbul ignore next */\n      this.pauseUpload(metaData, e);\n    } else if (targetElement.classList.contains(RESUME_UPLOAD)) {\n      /* istanbul ignore next */\n      this.resumeUpload(metaData, e);\n    } else if (targetElement.classList.contains(RETRY_ICON)) {\n      if (metaData.file.status === this.localizedTexts('fileUploadCancel')) {\n        this.retryUpload(metaData, false);\n      } else {\n        this.retryUpload(metaData, true);\n      }\n    }\n  };\n\n  Uploader.prototype.retryUpload = function (metaData, fromcanceledStage) {\n    if (fromcanceledStage) {\n      metaData.end = metaData.end + this.asyncSettings.chunkSize;\n      metaData.start = metaData.start + this.asyncSettings.chunkSize;\n      this.sendRequest(metaData.file, metaData);\n    } else {\n      metaData.file.statusCode = '1';\n      metaData.file.status = this.localizedTexts('readyToUploadMessage');\n      this.chunkUpload(metaData.file);\n    }\n    /* istanbul ignore next */\n\n\n    this.getLiElement(metaData.file).classList.add(RESTRICT_RETRY);\n  };\n\n  Uploader.prototype.chunkUploadInProgress = function (e, metaData, custom) {\n    var _this = this;\n\n    if (metaData.file.statusCode === '4') {\n      return;\n    }\n\n    if (metaData.file.statusCode !== '4' && metaData.file.statusCode !== '5') {\n      metaData.file.statusCode = '3';\n      metaData.file.status = this.localizedTexts('inProgress');\n    }\n\n    this.updateMetaData(metaData);\n    var liElement = this.getLiElement(metaData.file);\n\n    if (isNullOrUndefined(liElement)) {\n      return;\n    }\n\n    var target;\n    var retryElement = liElement.querySelector('.' + RETRY_ICON);\n\n    if (!isNullOrUndefined(retryElement)) {\n      retryElement.classList.add(PAUSE_UPLOAD);\n      retryElement.setAttribute('title', this.localizedTexts('pause'));\n      retryElement.classList.remove(RETRY_ICON);\n    }\n\n    if (!isNullOrUndefined(liElement)) {\n      if (!(liElement.querySelectorAll('.' + PROGRESS_WRAPPER).length > 0)) {\n        var statusElement = liElement.querySelector('.' + STATUS);\n\n        if (isNullOrUndefined(this.template)) {\n          statusElement.classList.add(UPLOAD_INPROGRESS);\n          statusElement.classList.remove(UPLOAD_FAILED);\n          this.createProgressBar(liElement);\n          this.updateProgressBarClasses(liElement, UPLOAD_INPROGRESS);\n        }\n\n        var clearIcon = liElement.querySelector('.' + REMOVE_ICON) ? liElement.querySelector('.' + REMOVE_ICON) : liElement.querySelector('.' + DELETE_ICON);\n\n        if (!isNullOrUndefined(clearIcon)) {\n          clearIcon.classList.add(ABORT_ICON);\n          clearIcon.setAttribute('title', this.localizedTexts('abort'));\n          clearIcon.classList.remove(REMOVE_ICON);\n        }\n      }\n\n      if (!isNaN(Math.round(e.loaded / e.total * 100)) && isNullOrUndefined(this.template) && metaData.file.statusCode !== '4') {\n        var loadedSize = metaData.chunkIndex * this.asyncSettings.chunkSize;\n        var value = Math.min((loadedSize + e.loaded) / metaData.file.size * 100, 100);\n        this.changeProgressValue(liElement, Math.round(value).toString() + '%');\n      }\n\n      if (metaData.chunkIndex === 0) {\n        this.checkActionButtonStatus();\n      }\n    }\n\n    if (isNullOrUndefined(liElement.querySelector('.' + PAUSE_UPLOAD)) && isNullOrUndefined(this.template)) {\n      this.pauseButton = this.createElement('span', {\n        className: 'e-icons e-file-pause-btn',\n        attrs: {\n          'tabindex': this.btnTabIndex\n        }\n      });\n\n      if (this.browserName === 'msie') {\n        this.pauseButton.classList.add('e-msie');\n      }\n\n      var abortIcon = liElement.querySelector('.' + ABORT_ICON);\n      abortIcon.parentElement.insertBefore(this.pauseButton, abortIcon);\n      this.pauseButton.setAttribute('title', this.localizedTexts('pause'));\n      this.pauseButton.addEventListener('click', function (e) {\n        _this.checkPausePlayAction(e);\n      }, false);\n    }\n  };\n  /**\n   * It is used to convert bytes value into kilobytes or megabytes depending on the size based\n   * on [binary prefix](https://en.wikipedia.org/wiki/Binary_prefix).\n   * @param { number } bytes - specifies the file size in bytes.\n   * @returns string\n   */\n\n\n  Uploader.prototype.bytesToSize = function (bytes) {\n    var i = -1;\n    var size;\n\n    if (!bytes) {\n      return '0.0 KB';\n    }\n\n    do {\n      bytes = bytes / 1024;\n      i++;\n    } while (bytes > 99);\n\n    if (i >= 2) {\n      bytes = bytes * 1024;\n      i = 1;\n    }\n\n    return Math.max(bytes, 0).toFixed(1) + ' ' + ['KB', 'MB'][i];\n  };\n  /**\n   * Allows you to sort the file data alphabetically based on its file name clearly.\n   * @param { FileList } filesData - specifies the files data for upload.\n   * @returns File[]\n   */\n\n  /* istanbul ignore next */\n\n\n  Uploader.prototype.sortFileList = function (filesData) {\n    filesData = filesData ? filesData : this.sortFilesList;\n    var files = filesData;\n    var fileNames = [];\n\n    for (var i = 0; i < files.length; i++) {\n      fileNames.push(files[i].name);\n    }\n\n    var sortedFileNames = fileNames.sort();\n    var sortedFilesData = [];\n    var index = 0;\n\n    for (var _i = 0, sortedFileNames_1 = sortedFileNames; _i < sortedFileNames_1.length; _i++) {\n      var name_4 = sortedFileNames_1[_i];\n\n      for (var i = 0; i < files.length; i++) {\n        if (name_4 === files[i].name) {\n          sortedFilesData.push(files[i]);\n        }\n      }\n    }\n\n    return sortedFilesData;\n  };\n  /**\n   * Removes the component from the DOM and detaches all its related event handlers. Also it removes the attributes and classes.\n   * @method destroy\n   * @return {void}.\n   */\n\n\n  Uploader.prototype.destroy = function () {\n    this.element.value = null;\n\n    if (!(this.isBlazorSaveUrl || this.isBlazorTemplate)) {\n      this.clearAll();\n    }\n\n    this.unWireEvents();\n    this.unBindDropEvents();\n\n    if (this.multiple) {\n      this.element.removeAttribute('multiple');\n    }\n\n    if (!this.enabled) {\n      this.element.removeAttribute('disabled');\n    }\n\n    this.element.removeAttribute('accept');\n    this.setInitialAttributes();\n    var attributes = ['aria-label', 'directory', 'webkitdirectory', 'tabindex'];\n\n    for (var _i = 0, attributes_2 = attributes; _i < attributes_2.length; _i++) {\n      var key = attributes_2[_i];\n      this.element.removeAttribute(key);\n    }\n\n    if (!this.isServerBlazor) {\n      if (!isNullOrUndefined(this.uploadWrapper)) {\n        this.uploadWrapper.parentElement.appendChild(this.element);\n        detach(this.uploadWrapper);\n      }\n\n      this.uploadWrapper = null;\n\n      _super.prototype.destroy.call(this);\n    } else {\n      this.uploadWrapper = null;\n    }\n  };\n  /**\n   * Allows you to call the upload process manually by calling save URL action.\n   * To process the selected files (added in upload queue), pass an empty argument otherwise\n   * upload the specific file based on its argument.\n   * @param { FileInfo | FileInfo[] } files - specifies the files data for upload.\n   * @returns void\n   */\n\n\n  Uploader.prototype.upload = function (files, custom) {\n    var _this = this;\n\n    files = files ? files : this.filesData;\n\n    if (this.sequentialUpload && this.isFirstFileOnSelection) {\n      this.sequenceUpload(files);\n    } else {\n      var uploadFiles_1 = this.getFilesInArray(files);\n      var eventArgs = {\n        customFormData: [],\n        currentRequest: null,\n        cancel: false\n      };\n      this.trigger('beforeUpload', eventArgs, function (eventArgs) {\n        if (!eventArgs.cancel) {\n          if (isBlazor()) {\n            _this.currentRequestHeader = eventArgs.currentRequest ? eventArgs.currentRequest : _this.currentRequestHeader;\n            _this.customFormDatas = eventArgs.customFormData && eventArgs.customFormData.length > 0 ? eventArgs.customFormData : _this.customFormDatas;\n          }\n\n          _this.uploadFiles(uploadFiles_1, custom);\n        }\n      });\n    }\n  };\n\n  Uploader.prototype.getFilesInArray = function (files) {\n    var uploadFiles = [];\n\n    if (files instanceof Array) {\n      uploadFiles = files;\n    } else {\n      uploadFiles.push(files);\n    }\n\n    return uploadFiles;\n  };\n  /* istanbul ignore next */\n\n\n  Uploader.prototype.serverReadFileBase64 = function (fileIndex, position, totalCount) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var file = _this.fileStreams[fileIndex].rawFile;\n\n      try {\n        var reader = new FileReader(); // tslint:disable-next-line\n\n        reader.onload = function (args) {\n          return function () {\n            try {\n              var contents = args.result;\n              var data = contents ? contents.split(';base64,')[1] : null;\n              resolve(data);\n            } catch (e) {\n              reject(e);\n            }\n          };\n        }(reader);\n\n        reader.readAsDataURL(file.slice(position, position + totalCount));\n      } catch (e) {\n        reject(e);\n      }\n    });\n  };\n  /* istanbul ignore next */\n\n\n  Uploader.prototype.uploadFileCount = function (ele) {\n    var files = this.filesData;\n\n    if (!files || files.length === 0) {\n      return -1;\n    }\n\n    var result = files.length;\n    return result;\n  };\n  /* istanbul ignore next */\n\n\n  Uploader.prototype.getFileRead = function (index, ele) {\n    var files = this.filesData;\n\n    if (!files || files.length === 0) {\n      return -1;\n    }\n\n    var file = files[index];\n    var fileCount = this.newFileRef++;\n    this.fileStreams[fileCount] = file;\n    return fileCount;\n  };\n  /* istanbul ignore next */\n\n\n  Uploader.prototype.getFileInfo = function (index, ele) {\n    var files = this.filesData;\n\n    if (!files || files.length === 0) {\n      return null;\n    }\n\n    var file = files[index];\n\n    if (!file) {\n      return null;\n    }\n\n    return this.filesData[index];\n  };\n\n  Uploader.prototype.uploadFiles = function (files, custom) {\n    var _this = this;\n\n    var selectedFiles = [];\n\n    if (this.asyncSettings.saveUrl === '' || isNullOrUndefined(this.asyncSettings.saveUrl)) {\n      if (this.isServerBlazor) {\n        // tslint:disable-next-line\n        this.interopAdaptor.invokeMethodAsync('GetFileDetails', files);\n      }\n\n      return;\n    }\n\n    if (!custom || isNullOrUndefined(custom)) {\n      if (!this.multiple) {\n        var file = [];\n        file.push(files[0]);\n        selectedFiles = this.filterfileList(file);\n      } else {\n        selectedFiles = this.filterfileList(files);\n      }\n    } else {\n      selectedFiles = files;\n    }\n\n    var _loop_5 = function (i) {\n      if (this_3.isServerBlazor && !this_3.checkChunkUpload()) {\n        /* istanbul ignore next */\n\n        /* tslint:disable */\n        if (selectedFiles[i] && selectedFiles[i].rawFile instanceof File) {\n          this_3.getBase64(selectedFiles[i].rawFile).then(function (data) {\n            _this.base64String.push(data);\n\n            _this.uploadFilesRequest(selectedFiles, i, custom);\n          });\n        }\n        /* tslint:disable */\n\n      } else {\n        this_3.uploadFilesRequest(selectedFiles, i, custom);\n      }\n    };\n\n    var this_3 = this;\n\n    for (var i = 0; i < selectedFiles.length; i++) {\n      _loop_5(i);\n    }\n  };\n\n  Uploader.prototype.uploadFilesRequest = function (selectedFiles, i, custom) {\n    var _this = this;\n\n    var cloneFiles = [];\n    var chunkEnabled = this.checkChunkUpload();\n    var ajax = new Ajax(this.asyncSettings.saveUrl, 'POST', true, null);\n    ajax.emitError = false;\n    var getFileData;\n    /* istanbul ignore next */\n\n    if (this.isServerBlazor) {\n      getFileData = selectedFiles.slice(0);\n      cloneFiles.push(getFileData[i].rawFile);\n    }\n\n    var eventArgs = {\n      fileData: this.isServerBlazor ? getFileData[i] : selectedFiles[i],\n      customFormData: [],\n      cancel: false\n    };\n    var formData = new FormData();\n\n    ajax.beforeSend = function (e) {\n      eventArgs.currentRequest = ajax.httpRequest;\n      /* istanbul ignore next */\n\n      if (isBlazor()) {\n        eventArgs.fileData.rawFile = !chunkEnabled ? _this.base64String[i] : eventArgs.fileData.rawFile;\n\n        if (_this.currentRequestHeader) {\n          _this.updateCustomheader(ajax.httpRequest, _this.currentRequestHeader);\n        }\n\n        if (_this.customFormDatas) {\n          _this.updateFormData(formData, _this.customFormDatas);\n        }\n      }\n\n      _this.trigger('uploading', eventArgs, function (eventArgs) {\n        /* istanbul ignore next */\n        if (_this.isServerBlazor && !chunkEnabled) {\n          selectedFiles[i].rawFile = eventArgs.fileData.rawFile = cloneFiles[i];\n        }\n\n        if (eventArgs.cancel) {\n          _this.eventCancelByArgs(e, eventArgs, selectedFiles[i]);\n        }\n\n        _this.updateFormData(formData, eventArgs.customFormData);\n      });\n    };\n\n    if (selectedFiles[i].statusCode === '1') {\n      var name_5 = this.element.getAttribute('name');\n      formData.append(name_5, selectedFiles[i].rawFile, selectedFiles[i].name);\n\n      if (chunkEnabled && selectedFiles[i].size > this.asyncSettings.chunkSize) {\n        this.chunkUpload(selectedFiles[i], custom, i);\n      } else {\n        ajax.onLoad = function (e) {\n          if (eventArgs.cancel && _this.isServerBlazor) {\n            return {};\n          } else {\n            _this.uploadComplete(e, selectedFiles[i], custom);\n\n            return {};\n          }\n        };\n\n        ajax.onUploadProgress = function (e) {\n          if (eventArgs.cancel && _this.isServerBlazor) {\n            return {};\n          } else {\n            _this.uploadInProgress(e, selectedFiles[i], custom, ajax);\n\n            return {};\n          }\n        };\n        /* istanbul ignore next */\n\n\n        ajax.onError = function (e) {\n          _this.uploadFailed(e, selectedFiles[i]);\n\n          return {};\n        };\n\n        ajax.send(formData);\n      }\n    }\n  };\n\n  Uploader.prototype.spliceFiles = function (liIndex) {\n    var liElement = this.fileList[liIndex];\n    var allFiles = this.getFilesData();\n    var nameElements = +liElement.getAttribute('data-files-count');\n    var startIndex = 0;\n\n    for (var i = 0; i < liIndex; i++) {\n      startIndex += +this.fileList[i].getAttribute('data-files-count');\n    }\n\n    var endIndex = startIndex + nameElements - 1;\n\n    for (var j = endIndex; j >= startIndex; j--) {\n      allFiles.splice(j, 1);\n    }\n  };\n  /**\n   * Remove the uploaded file from server manually by calling the remove URL action.\n   * If you pass an empty argument to this method, the complete file list can be cleared,\n   * otherwise remove the specific file based on its argument (“file_data”).\n   * @param { FileInfo | FileInfo[] } fileData - specifies the files data to remove from file list/server.\n   * @param { boolean } customTemplate - Set true if the component rendering with customize template.\n   * @param { boolean } removeDirectly - Set true if files remove without removing event.\n   * @param { boolean } postRawFile - Set false, to post file name only to the remove action.\n   * @returns void\n   */\n\n\n  Uploader.prototype.remove = function (fileData, customTemplate, removeDirectly, postRawFile, args) {\n    var _this = this;\n\n    if (isNullOrUndefined(postRawFile)) {\n      postRawFile = true;\n    }\n\n    var eventArgs = {\n      event: args,\n      cancel: false,\n      filesData: [],\n      customFormData: [],\n      postRawFile: postRawFile,\n      currentRequest: null\n    };\n    var beforeEventArgs = {\n      cancel: false,\n      customFormData: [],\n      currentRequest: null\n    };\n    this.trigger('beforeRemove', beforeEventArgs, function (beforeEventArgs) {\n      if (!beforeEventArgs.cancel) {\n        if (isBlazor()) {\n          _this.currentRequestHeader = beforeEventArgs.currentRequest;\n          _this.customFormDatas = beforeEventArgs.customFormData;\n        }\n\n        var index = void 0;\n\n        if (_this.isFormUpload() && !_this.isBlazorSaveUrl) {\n          eventArgs.filesData = fileData;\n\n          _this.trigger('removing', eventArgs, function (eventArgs) {\n            if (!eventArgs.cancel) {\n              var removingFiles = _this.getFilesInArray(fileData);\n\n              var isLiRemoved = false;\n              var liIndex = void 0;\n\n              for (var _i = 0, removingFiles_1 = removingFiles; _i < removingFiles_1.length; _i++) {\n                var data = removingFiles_1[_i];\n\n                if (!isLiRemoved) {\n                  liIndex = _this.fileList.indexOf(data.list);\n                }\n\n                if (liIndex > -1) {\n                  var inputElement = !isNullOrUndefined(data.input) ? data.input : null;\n\n                  if (inputElement) {\n                    detach(inputElement);\n                  }\n\n                  _this.spliceFiles(liIndex);\n\n                  detach(_this.fileList[liIndex]);\n\n                  _this.fileList.splice(liIndex, 1);\n\n                  isLiRemoved = true;\n                  liIndex = -1;\n                }\n              }\n            }\n          });\n        } else if (_this.isForm && (isNullOrUndefined(_this.asyncSettings.removeUrl) || _this.asyncSettings.removeUrl === '') && !_this.isBlazorSaveUrl) {\n          eventArgs.filesData = _this.getFilesData();\n\n          _this.trigger('removing', eventArgs, function (eventArgs) {\n            if (!eventArgs.cancel) {\n              _this.clearAll();\n            }\n          });\n        } else {\n          var removeFiles = [];\n          fileData = !isNullOrUndefined(fileData) ? fileData : _this.filesData;\n\n          if (fileData instanceof Array) {\n            removeFiles = fileData;\n          } else {\n            removeFiles.push(fileData);\n          }\n\n          eventArgs.filesData = removeFiles;\n          var removeUrl = _this.asyncSettings.removeUrl;\n          var validUrl = removeUrl === '' || isNullOrUndefined(removeUrl) ? false : true;\n\n          var _loop_6 = function (files) {\n            index = _this.filesData.indexOf(files);\n\n            if ((files.statusCode === '2' || files.statusCode === '4') && validUrl) {\n              _this.removeUploadedFile(files, eventArgs, removeDirectly, customTemplate);\n            } else {\n              if (!removeDirectly) {\n                _this.trigger('removing', eventArgs, function (eventArgs) {\n                  if (!eventArgs.cancel) {\n                    _this.removeFilesData(files, customTemplate);\n                  }\n                });\n              } else {\n                _this.removeFilesData(files, customTemplate);\n              }\n            }\n\n            if (args && !args.target.classList.contains(REMOVE_ICON)) {\n              _this.checkActionComplete(false);\n            }\n          };\n\n          for (var _i = 0, removeFiles_1 = removeFiles; _i < removeFiles_1.length; _i++) {\n            var files = removeFiles_1[_i];\n\n            _loop_6(files);\n          }\n        }\n      }\n    });\n  };\n  /**\n   * Clear all the file entries from list that can be uploaded files or added in upload queue.\n   * @returns void\n   */\n\n\n  Uploader.prototype.clearAll = function () {\n    var _this = this;\n\n    if (isNullOrUndefined(this.listParent) && !(this.isBlazorSaveUrl || this.isBlazorTemplate)) {\n      if (this.browserName !== 'msie') {\n        this.element.value = '';\n      }\n\n      this.filesData = [];\n      return;\n    }\n\n    var eventArgs = {\n      cancel: false,\n      filesData: this.filesData\n    };\n    this.trigger('clearing', eventArgs, function (eventArgs) {\n      if (!eventArgs.cancel) {\n        _this.clearData();\n\n        _this.actionCompleteCount = 0;\n        _this.count = -1;\n      }\n    });\n  };\n  /**\n   * Get the data of files which are shown in file list.\n   * @param { number } index - specifies the file list item(li) index.\n   * @returns FileInfo[]\n   */\n\n\n  Uploader.prototype.getFilesData = function (index) {\n    if (!this.isServerBlazor) {\n      if (isNullOrUndefined(index)) {\n        return this.filesData;\n      } else {\n        return this.getSelectedFiles(index);\n      }\n    } else {\n      for (var i = 0; i < this.filesData.length; i++) {\n        this.filesData[i].rawFile = this.base64String[i];\n      }\n\n      return this.filesData;\n    }\n  };\n  /**\n   * Pauses the in-progress chunked upload based on the file data.\n   * @param { FileInfo | FileInfo[] } fileData - specifies the files data to pause from uploading.\n   * @param { boolean } custom - Set true if used custom UI.\n   * @returns void\n   */\n\n\n  Uploader.prototype.pause = function (fileData, custom) {\n    fileData = fileData ? fileData : this.filesData;\n    var fileDataFiles = this.getFilesInArray(fileData);\n    this.pauseUploading(fileDataFiles, custom);\n  };\n\n  Uploader.prototype.pauseUploading = function (fileData, custom) {\n    var files = this.getFiles(fileData);\n\n    for (var i = 0; i < files.length; i++) {\n      if (files[i].statusCode === '3') {\n        this.pauseUpload(this.getCurrentMetaData(files[i], null), null, custom);\n      }\n    }\n  };\n\n  Uploader.prototype.getFiles = function (fileData) {\n    var files = [];\n\n    if (!isNullOrUndefined(fileData) && !(fileData instanceof Array)) {\n      files.push(fileData);\n    } else {\n      files = fileData;\n    }\n\n    return files;\n  };\n  /**\n   * Resumes the chunked upload that is previously paused based on the file data.\n   * @param { FileInfo | FileInfo[] } fileData - specifies the files data to resume the paused file.\n   * @param { boolean } custom - Set true if used custom UI.\n   * @returns void\n   */\n\n\n  Uploader.prototype.resume = function (fileData, custom) {\n    fileData = fileData ? fileData : this.filesData;\n    var fileDataFiles = this.getFilesInArray(fileData);\n    this.resumeFiles(fileDataFiles, custom);\n  };\n\n  Uploader.prototype.resumeFiles = function (fileData, custom) {\n    var files = this.getFiles(fileData);\n\n    for (var i = 0; i < files.length; i++) {\n      if (files[i].statusCode === '4') {\n        this.resumeUpload(this.getCurrentMetaData(files[i], null), null, custom);\n      }\n    }\n  };\n  /**\n   * Retries the canceled or failed file upload based on the file data.\n   * @param { FileInfo | FileInfo[] } fileData - specifies the files data to retry the canceled or failed file.\n   * @param { boolean } fromcanceledStage - Set true to retry from canceled stage and set false to retry from initial stage.\n   * @returns void\n   */\n\n\n  Uploader.prototype.retry = function (fileData, fromcanceledStage, custom) {\n    fileData = fileData ? fileData : this.filesData;\n    var fileDataFiles = this.getFilesInArray(fileData);\n    this.retryFailedFiles(fileDataFiles, fromcanceledStage, custom);\n  };\n\n  Uploader.prototype.retryFailedFiles = function (fileData, fromcanceledStage, custom) {\n    var files = this.getFiles(fileData);\n\n    for (var i = 0; i < files.length; i++) {\n      if (files[i].statusCode === '5' || files[i].statusCode === '0') {\n        if (this.asyncSettings.chunkSize > 0) {\n          this.retryUpload(this.getCurrentMetaData(files[i], null), fromcanceledStage);\n        } else {\n          var liElement = void 0;\n\n          if (!custom) {\n            liElement = this.fileList[this.filesData.indexOf(files[i])];\n          }\n\n          this.reloadcanceledFile(null, files[i], liElement, custom);\n        }\n      }\n    }\n  };\n  /**\n   * Stops the in-progress chunked upload based on the file data.\n   * When the file upload is canceled, the partially uploaded file is removed from server.\n   * @param { FileInfo | FileInfo[] } fileData - specifies the files data to cancel the progressing file.\n   * @returns void\n   */\n\n\n  Uploader.prototype.cancel = function (fileData) {\n    fileData = fileData ? fileData : this.filesData;\n    var cancelingFiles = this.getFilesInArray(fileData);\n    this.cancelUpload(cancelingFiles);\n  };\n\n  Uploader.prototype.cancelUpload = function (fileData) {\n    var files = this.getFiles(fileData);\n\n    if (this.asyncSettings.chunkSize > 0) {\n      for (var i = 0; i < files.length; i++) {\n        if (files[i].statusCode === '3') {\n          var metaData = this.getCurrentMetaData(files[i], null);\n          metaData.file.statusCode = '5';\n          metaData.file.status = this.localizedTexts('fileUploadCancel');\n          this.updateMetaData(metaData);\n          this.showHideUploadSpinner(files[i]);\n        }\n      }\n    } else {\n      for (var i = 0; i < files.length; i++) {\n        if (files[i].statusCode === '3') {\n          files[i].statusCode = '5';\n          files[i].status = this.localizedTexts('fileUploadCancel');\n          this.showHideUploadSpinner(files[i]);\n        }\n      }\n    }\n  };\n\n  Uploader.prototype.showHideUploadSpinner = function (files) {\n    var liElement = this.getLiElement(files);\n\n    if (!isNullOrUndefined(liElement) && isNullOrUndefined(this.template)) {\n      var spinnerTarget = liElement.querySelector('.' + ABORT_ICON);\n      createSpinner({\n        target: spinnerTarget,\n        width: '20px'\n      });\n      showSpinner(spinnerTarget);\n    }\n  };\n\n  __decorate([Complex({\n    saveUrl: '',\n    removeUrl: ''\n  }, AsyncSettings)], Uploader.prototype, \"asyncSettings\", void 0);\n\n  __decorate([Property(false)], Uploader.prototype, \"sequentialUpload\", void 0);\n\n  __decorate([Property({})], Uploader.prototype, \"htmlAttributes\", void 0);\n\n  __decorate([Property('')], Uploader.prototype, \"cssClass\", void 0);\n\n  __decorate([Property(true)], Uploader.prototype, \"enabled\", void 0);\n\n  __decorate([Property(null)], Uploader.prototype, \"template\", void 0);\n\n  __decorate([Property(true)], Uploader.prototype, \"multiple\", void 0);\n\n  __decorate([Property(true)], Uploader.prototype, \"autoUpload\", void 0);\n\n  __decorate([Complex({}, ButtonsProps)], Uploader.prototype, \"buttons\", void 0);\n\n  __decorate([Property('')], Uploader.prototype, \"allowedExtensions\", void 0);\n\n  __decorate([Property(0)], Uploader.prototype, \"minFileSize\", void 0);\n\n  __decorate([Property(30000000)], Uploader.prototype, \"maxFileSize\", void 0);\n\n  __decorate([Property(null)], Uploader.prototype, \"dropArea\", void 0);\n\n  __decorate([Collection([{}], FilesProp)], Uploader.prototype, \"files\", void 0);\n\n  __decorate([Property(true)], Uploader.prototype, \"showFileList\", void 0);\n\n  __decorate([Property(false)], Uploader.prototype, \"directoryUpload\", void 0);\n\n  __decorate([Property('Default')], Uploader.prototype, \"dropEffect\", void 0);\n\n  __decorate([Event()], Uploader.prototype, \"created\", void 0);\n\n  __decorate([Event()], Uploader.prototype, \"actionComplete\", void 0);\n\n  __decorate([Event()], Uploader.prototype, \"rendering\", void 0);\n\n  __decorate([Event()], Uploader.prototype, \"beforeUpload\", void 0);\n\n  __decorate([Event()], Uploader.prototype, \"fileListRendering\", void 0);\n\n  __decorate([Event()], Uploader.prototype, \"selected\", void 0);\n\n  __decorate([Event()], Uploader.prototype, \"uploading\", void 0);\n\n  __decorate([Event()], Uploader.prototype, \"success\", void 0);\n\n  __decorate([Event()], Uploader.prototype, \"failure\", void 0);\n\n  __decorate([Event()], Uploader.prototype, \"removing\", void 0);\n\n  __decorate([Event()], Uploader.prototype, \"beforeRemove\", void 0);\n\n  __decorate([Event()], Uploader.prototype, \"clearing\", void 0);\n\n  __decorate([Event()], Uploader.prototype, \"progress\", void 0);\n\n  __decorate([Event()], Uploader.prototype, \"change\", void 0);\n\n  __decorate([Event()], Uploader.prototype, \"chunkSuccess\", void 0);\n\n  __decorate([Event()], Uploader.prototype, \"chunkFailure\", void 0);\n\n  __decorate([Event()], Uploader.prototype, \"chunkUploading\", void 0);\n\n  __decorate([Event()], Uploader.prototype, \"canceling\", void 0);\n\n  __decorate([Event()], Uploader.prototype, \"pausing\", void 0);\n\n  __decorate([Event()], Uploader.prototype, \"resuming\", void 0);\n\n  Uploader = __decorate([NotifyPropertyChanges], Uploader);\n  return Uploader;\n}(Component);\n\nexport { Uploader };","map":null,"metadata":{},"sourceType":"module"}