{"ast":null,"code":"import { Observer, isBlazor, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport * as events from '../base/constant';\nimport { Row } from '../models/row';\nimport { AriaService } from '../services/aria-service';\nimport { Cell } from '../models/cell';\nimport { CellType } from '../base/enum';\nimport { DataUtil } from '@syncfusion/ej2-data';\nexport var gridObserver = new Observer();\n/**\n * BlazorAction is used for performing Blazor related Grid Actions.\n * @hidden\n */\n\nvar BlazorAction =\n/** @class */\nfunction () {\n  function BlazorAction(parent) {\n    this.aria = new AriaService();\n    this.actionArgs = {};\n    this.virtualHeight = 0;\n    this.parent = parent;\n    this.addEventListener();\n  }\n\n  BlazorAction.prototype.addEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.on('detailclick', this.onDetailRowClick, this);\n    this.parent.on('add-delete-success', this.addDeleteSuccess, this);\n    this.parent.on('editsuccess', this.editSuccess, this);\n    this.parent.on('setvisibility', this.setColumnVisibility, this);\n    this.parent.on('offset', this.setServerOffSet, this);\n    this.parent.on('updateaction', this.modelChanged, this);\n    this.parent.on(events.modelChanged, this.modelChanged, this);\n    this.parent.on('group-expand-collapse', this.onGroupClick, this);\n    this.parent.on('setcolumnstyles', this.setColVTableWidthAndTranslate, this);\n    this.parent.on('refresh-virtual-indices', this.invokeServerDataBind, this);\n    this.parent.on('contentcolgroup', this.contentColGroup, this);\n    this.parent.on(events.dataSourceModified, this.dataSourceModified, this);\n  };\n\n  BlazorAction.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off('detailclick', this.onDetailRowClick);\n    this.parent.off('add-delete-success', this.addDeleteSuccess);\n    this.parent.off('editsuccess', this.editSuccess);\n    this.parent.off('setvisibility', this.setColumnVisibility);\n    this.parent.off('offset', this.setServerOffSet);\n    this.parent.off('updateaction', this.modelChanged);\n    this.parent.off(events.modelChanged, this.modelChanged);\n    this.parent.off('group-expand-collapse', this.onGroupClick);\n    this.parent.off('setcolumnstyles', this.setColVTableWidthAndTranslate);\n    this.parent.off('refresh-virtual-indices', this.invokeServerDataBind);\n    this.parent.off('contentcolgroup', this.contentColGroup);\n    this.parent.off(events.dataSourceModified, this.dataSourceModified);\n  };\n\n  BlazorAction.prototype.getModuleName = function () {\n    return 'blazor';\n  };\n\n  ;\n\n  BlazorAction.prototype.modelChanged = function (args) {\n    this.actionArgs = args;\n    this.parent.currentAction = args;\n  };\n\n  BlazorAction.prototype.addDeleteSuccess = function (args) {\n    var _this = this;\n\n    var editArgs;\n    var action = 'action';\n    var data = 'data';\n    var index = 'index';\n    editArgs = {\n      requestType: args.requestType,\n      data: args[data],\n      action: args[action]\n    };\n\n    if (!isNullOrUndefined(args[index])) {\n      editArgs[index] = args[index];\n    }\n\n    args.promise.then(function (e) {\n      return _this.editSuccess(editArgs);\n    }).catch(function (e) {\n      if (isBlazor() && _this.parent.isServerRendered) {\n        var error = 'error';\n        var message = 'message';\n\n        if (!isNullOrUndefined(e[error]) && !isNullOrUndefined(e[error][message])) {\n          e[error] = e[error][message];\n        }\n      }\n\n      _this.parent.trigger(events.actionFailure, isBlazor() && e instanceof Array ? e[0] : e);\n\n      _this.parent.hideSpinner();\n\n      _this.parent.log('actionfailure', {\n        error: e\n      });\n    });\n  };\n\n  BlazorAction.prototype.editSuccess = function (args) {\n    this.parent.renderModule.resetTemplates();\n    this.invokeServerDataBind(args);\n  };\n\n  BlazorAction.prototype.invokeServerDataBind = function (args) {\n    this.actionArgs = args;\n    this.parent.currentAction = args;\n    this.parent.allowServerDataBinding = true;\n    this.parent.serverDataBind();\n    this.parent.allowServerDataBinding = false;\n  };\n\n  BlazorAction.prototype.onDetailRowClick = function (target) {\n    var gObj = this.parent;\n    var adaptor = 'interopAdaptor';\n    var rIndex = 'rowIndex';\n    var invokeMethodAsync = 'invokeMethodAsync';\n    var tr = target.parentElement;\n    var uid = tr.getAttribute('data-uid');\n    var rowObj = gObj.getRowObjectFromUID(uid);\n    var args = {\n      uid: uid,\n      classList: target.classList[0],\n      index: tr.getAttribute('aria-rowindex'),\n      rowIndex: gObj.getRowsObject().indexOf(rowObj),\n      colSpan: this.parent.getVisibleColumns().length\n    };\n    gObj[adaptor][invokeMethodAsync]('OnDetailClick', args);\n\n    if (target.classList.contains('e-detailrowcollapse')) {\n      var rows = gObj.getRowsObject();\n      var rowData = rowObj.data;\n      var gridRowId = this.parent.getRowUid('grid-row');\n      var len = gObj.groupSettings.columns.length;\n      var gridRow = new Row({\n        isDataRow: true,\n        isExpand: true,\n        uid: gridRowId,\n        isDetailRow: true,\n        cells: [new Cell({\n          cellType: CellType.Indent\n        }), new Cell({\n          isDataCell: true,\n          visible: true\n        })]\n      });\n\n      for (var i = 0; i < len; i++) {\n        gridRow.cells.unshift(new Cell({\n          cellType: CellType.Indent\n        }));\n      }\n\n      rows.splice(args[rIndex] + 1, 0, gridRow);\n      gObj.trigger(events.detailDataBound, {\n        data: rowData\n      });\n      gObj.notify(events.detailDataBound, {\n        rows: gObj.getRowsObject()\n      });\n      rowObj.isExpand = true;\n      this.aria.setExpand(target, true);\n    } else {\n      gObj.getRowsObject().splice(args[rIndex] + 1, 1);\n      gObj.notify(events.detailDataBound, {\n        rows: gObj.getRowsObject()\n      });\n      rowObj.isExpand = false;\n      this.aria.setExpand(target, false);\n    }\n  };\n\n  BlazorAction.prototype.setColumnVisibility = function (columns) {\n    var visible = {};\n    var adaptor = 'interopAdaptor';\n    var invokeMethodAsync = 'invokeMethodAsync';\n\n    for (var i = 0; i < columns.length; i++) {\n      visible[columns[i].uid] = columns[i].visible;\n    }\n\n    this.parent[adaptor][invokeMethodAsync]('setColumnVisibility', {\n      visible: visible\n    });\n  };\n\n  BlazorAction.prototype.dataSuccess = function (args) {\n    if (this.parent.enableVirtualization && Object.keys(this.actionArgs).length === 0) {\n      this.actionArgs.requestType = 'virtualscroll';\n    }\n\n    var startIndex = 'startIndex';\n    var endIndex = 'endIndex';\n    this.actionArgs[startIndex] = args[startIndex];\n    this.actionArgs[endIndex] = args[endIndex];\n\n    if (this.parent.enableVirtualization) {\n      this.virtualContentModule = this.parent.contentModule;\n\n      if (this.virtualContentModule.activeKey === 'downArrow' || this.virtualContentModule.activeKey === 'upArrow') {\n        var row = this.parent.getRowByIndex(this.virtualContentModule.blzRowIndex);\n\n        if (row) {\n          this.parent.selectRow(parseInt(row.getAttribute('aria-rowindex'), 10)); // tslint:disable-next-line:no-any\n\n          row.cells[0].focus({\n            preventScroll: true\n          });\n        }\n      }\n\n      this.virtualContentModule.blazorDataLoad = false;\n    }\n\n    if (args.foreignColumnsData) {\n      var columns = this.parent.getColumns();\n\n      for (var i = 0; i < columns.length; i++) {\n        if (args.foreignColumnsData[columns[i].field]) {\n          columns[i].columnData = args.foreignColumnsData[columns[i].field];\n        }\n      }\n    }\n\n    if (this.parent.allowGrouping && this.parent.groupSettings.columns) {\n      var agg = [];\n      var aggRows = this.parent.aggregates;\n\n      for (var i = 0; i < aggRows.length; i++) {\n        var aggRow = aggRows[i];\n\n        for (var j = 0; j < aggRow.columns.length; j++) {\n          var aggr = {};\n          var type = aggRow.columns[j].type.toString();\n          aggr = {\n            type: type.toLowerCase(),\n            field: aggRow.columns[j].field\n          };\n          agg.push(aggr);\n        }\n      }\n\n      var data = void 0;\n      var aggrds = void 0;\n      var groupedCols = this.parent.groupSettings.columns;\n\n      for (var k = 0; k < groupedCols.length; k++) {\n        aggrds = data ? data : args.result;\n        data = DataUtil.group(aggrds, groupedCols[k], agg, null, null);\n      }\n\n      args.result = data ? data : args.result;\n    }\n\n    var rowUid = 'rowUid';\n    var offsetTime = 'offsetTime';\n    var off = 'offset';\n    this.parent[rowUid] = args[rowUid];\n    args[off] = Math.sign(args[off]) === 1 ? -Math.abs(args[off]) : Math.abs(args[off]);\n    this.parent[offsetTime] = args[off];\n\n    if (this.parent[offsetTime] !== new Date().getTimezoneOffset() / 60) {\n      if (this.parent.editSettings.mode !== 'Batch') {\n        var action = 'action';\n        var rowIndex = 'rowIndex';\n        var index = 'index';\n\n        if (this.actionArgs[action] === 'edit') {\n          this.setClientOffSet(args, this.actionArgs[rowIndex]);\n        } else if (this.actionArgs[action] === 'add') {\n          this.setClientOffSet(args, this.actionArgs[index]);\n        }\n      } else if (this.parent.editSettings.mode === 'Batch') {\n        var changes = 'changes';\n        var changedRecords = 'changedRecords';\n        var addedRecords = 'addedRecords';\n        var keyField = this.parent.getPrimaryKeyFieldNames()[0];\n        var batchChanges = this.actionArgs[changes] || {\n          changedRecords: [],\n          addedRecords: []\n        };\n\n        for (var i = 0; i < batchChanges[changedRecords].length; i++) {\n          for (var j = 0; j < args.result.length; j++) {\n            if (batchChanges[changedRecords][i][keyField] === args.result[j][keyField]) {\n              this.setClientOffSet(args, j);\n            }\n          }\n        }\n\n        for (var i = 0; i < batchChanges[addedRecords].length; i++) {\n          for (var j = 0; j < args.result.length; j++) {\n            if (batchChanges[addedRecords][i][keyField] === args.result[j][keyField]) {\n              this.setClientOffSet(args, j);\n            }\n          }\n        }\n      }\n    }\n\n    this.parent.renderModule.dataManagerSuccess(args, this.actionArgs);\n    this.parent.getMediaColumns();\n\n    if (this.parent.enableVirtualization) {\n      this.virtualContentModule = this.parent.contentModule;\n      this.setColVTableWidthAndTranslate();\n\n      if (this.parent.groupSettings.columns.length) {\n        this.virtualContentModule.setVirtualHeight(this.virtualHeight);\n      }\n    }\n\n    this.actionArgs = this.parent.currentAction = {};\n  };\n\n  BlazorAction.prototype.removeDisplayNone = function () {\n    var renderedContentRows = this.parent.getContentTable().querySelectorAll('tr');\n\n    for (var i = 0; i < renderedContentRows.length; i++) {\n      var renderedContentCells = renderedContentRows[i].querySelectorAll('td');\n\n      for (var j = 0; j < renderedContentCells.length; j++) {\n        renderedContentCells[j].style.display = '';\n      }\n    }\n  };\n\n  BlazorAction.prototype.setVirtualTrackHeight = function (args) {\n    this.virtualHeight = args.VisibleGroupedRowsCount * this.parent.getRowHeight();\n    this.virtualContentModule.setVirtualHeight(this.virtualHeight);\n  };\n\n  BlazorAction.prototype.setColVTableWidthAndTranslate = function (args) {\n    if (this.parent.enableColumnVirtualization && this.virtualContentModule.prevInfo && JSON.stringify(this.virtualContentModule.currentInfo.columnIndexes) !== JSON.stringify(this.virtualContentModule.prevInfo.columnIndexes) || args && args.refresh) {\n      var translateX = this.virtualContentModule.getColumnOffset(this.virtualContentModule.startColIndex - 1);\n      var width = this.virtualContentModule.getColumnOffset(this.virtualContentModule.endColIndex - 1) - translateX + '';\n      this.virtualContentModule.header.virtualEle.setWrapperWidth(width);\n      this.virtualContentModule.virtualEle.setWrapperWidth(width);\n      this.virtualContentModule.header.virtualEle.adjustTable(translateX, 0);\n      this.parent.getContentTable().parentElement.style.width = width + 'px';\n    }\n\n    if (this.dataSourceChanged) {\n      this.virtualContentModule.getPanel().firstElementChild.scrollTop = 0;\n      this.virtualContentModule.getPanel().firstElementChild.scrollLeft = 0;\n\n      if (this.virtualContentModule.header.virtualEle) {\n        this.virtualContentModule.header.virtualEle.adjustTable(0, 0);\n      }\n\n      this.parent.getContentTable().parentElement.style.transform = 'translate(0px,0px)';\n      this.virtualContentModule.refreshOffsets();\n      this.virtualContentModule.refreshVirtualElement();\n      this.dataSourceChanged = false;\n    }\n  };\n\n  BlazorAction.prototype.dataSourceModified = function () {\n    this.dataSourceChanged = true;\n  };\n\n  BlazorAction.prototype.setClientOffSet = function (args, index) {\n    var timeZone = DataUtil.serverTimezoneOffset;\n    DataUtil.serverTimezoneOffset = 0;\n    args.result[index] = DataUtil.parse.parseJson(JSON.stringify(args.result[index]));\n    DataUtil.serverTimezoneOffset = timeZone;\n  };\n\n  BlazorAction.prototype.setServerOffSet = function (args) {\n    var serverTimeZone = DataUtil.serverTimezoneOffset;\n    var offsetTime = 'offsetTime';\n    var data = 'data';\n    var timeZone = new Date().getTimezoneOffset() / 60 * 2 + this.parent[offsetTime];\n    DataUtil.serverTimezoneOffset = timeZone;\n    args[data] = DataUtil.parse.parseJson(JSON.stringify(args[data]));\n    DataUtil.serverTimezoneOffset = serverTimeZone;\n  };\n\n  BlazorAction.prototype.onGroupClick = function (args) {\n    var _this = this;\n\n    var adaptor = 'interopAdaptor';\n    var content = 'contentModule';\n    var invokeMethodAsync = 'invokeMethodAsync';\n    var exactTopIndex = 'exactTopIndex';\n    args[exactTopIndex] = Math.round(this.parent.element.querySelector('.e-content').scrollTop / this.parent.getRowHeight());\n    var rowHeight = 'rowHeight';\n    args[rowHeight] = this.parent.getRowHeight();\n    this.parent[adaptor][invokeMethodAsync]('OnGroupExpandClick', args).then(function () {\n      _this.parent[content].rowElements = [].slice.call(_this.parent.getContentTable().querySelectorAll('tr.e-row[data-uid]'));\n    });\n  };\n\n  BlazorAction.prototype.setPersistData = function (args) {\n    var gObj = this.parent;\n    gObj.mergePersistGridData(args);\n    var bulkChanges = 'bulkChanges';\n\n    if (gObj[bulkChanges].columns) {\n      delete gObj[bulkChanges].columns;\n    }\n\n    gObj.headerModule.refreshUI();\n    gObj.notify('persist-data-changed', {});\n    gObj.notify(events.columnVisibilityChanged, gObj.getColumns());\n  };\n\n  ;\n\n  BlazorAction.prototype.resetPersistData = function (args) {\n    var gObj = this.parent;\n    var bulkChanges = 'bulkChanges';\n    var parseArgs = JSON.parse(args);\n    var persistArgs = {\n      filterSettings: parseArgs.filterSettings,\n      groupSettings: parseArgs.groupSettings,\n      pageSettings: parseArgs.pageSettings,\n      sortSettings: parseArgs.sortSettings,\n      searchSettings: parseArgs.searchSettings,\n      columns: parseArgs.columns\n    };\n\n    if (!persistArgs.sortSettings.columns) {\n      persistArgs.sortSettings.columns = [];\n    }\n\n    if (!persistArgs.groupSettings.columns) {\n      persistArgs.groupSettings.columns = [];\n    }\n\n    if (!persistArgs.pageSettings.currentPage) {\n      gObj.pageSettings.currentPage = 1;\n    }\n\n    for (var i = 0; i < gObj.columns.length; i++) {\n      if (gObj.groupSettings.columns.indexOf(gObj.columns[i].field) > -1) {\n        gObj.columns[i].visible = true;\n      }\n    }\n\n    gObj.mergePersistGridData(persistArgs);\n    gObj.notify('persist-data-changed', {});\n\n    if (gObj[bulkChanges].columns) {\n      delete gObj[bulkChanges].columns;\n    }\n\n    gObj.headerModule.refreshUI();\n\n    for (var i = 0; i < gObj.columns.length; i++) {\n      gObj.columns[i].editType = gObj.columns[i].editType.toLowerCase();\n    }\n\n    gObj.setProperties({\n      filterSettings: {\n        columns: []\n      }\n    }, true);\n  };\n\n  BlazorAction.prototype.contentColGroup = function () {\n    var gObj = this.parent;\n    var contentTable = gObj.getContent().querySelector('.e-table');\n    contentTable.insertBefore(contentTable.querySelector(\"#content-\" + gObj.element.id + \"colGroup\"), contentTable.querySelector('tbody'));\n\n    if (gObj.frozenRows) {\n      var headerTable = gObj.getHeaderContent().querySelector('.e-table');\n      headerTable.insertBefore(headerTable.querySelector(\"#\" + gObj.element.id + \"colGroup\"), headerTable.querySelector('tbody'));\n    }\n\n    if (gObj.getFrozenColumns() !== 0) {\n      var movableContentTable = gObj.getContent().querySelector('.e-movablecontent').querySelector('.e-table');\n      movableContentTable.insertBefore(movableContentTable.querySelector(\"#\" + gObj.element.id + \"colGroup\"), movableContentTable.querySelector('tbody'));\n\n      if (gObj.frozenRows) {\n        var movableHeaderTable = gObj.getHeaderContent().querySelector('.e-movableheader').querySelector('.e-table');\n        movableHeaderTable.insertBefore(movableHeaderTable.querySelector(\"#\" + gObj.element.id + \"colGroup\"), movableHeaderTable.querySelector('tbody'));\n      }\n    }\n  };\n\n  BlazorAction.prototype.dataFailure = function (args) {\n    this.parent.renderModule.dataManagerFailure(args, this.actionArgs);\n    this.actionArgs = this.parent.currentAction = {};\n  };\n\n  BlazorAction.prototype.destroy = function () {\n    this.removeEventListener();\n  };\n\n  return BlazorAction;\n}();\n\nexport { BlazorAction };","map":null,"metadata":{},"sourceType":"module"}