{"ast":null,"code":"import { PdfArray } from './../primitives/pdf-array';\nimport { PdfReferenceHolder } from './../primitives/pdf-reference';\nimport { DictionaryProperties } from './../input-output/pdf-dictionary-properties';\nimport { SizeF, RectangleF, PointF } from './../drawing/pdf-drawing';\nimport { PdfStringLayouter } from './../graphics/fonts/string-layouter';\nimport { PdfColorSpace } from './../graphics/enum';\n/**\n * `PdfAnnotationCollection` class represents the collection of 'PdfAnnotation' objects.\n * @private\n */\n\nvar PdfAnnotationCollection =\n/** @class */\nfunction () {\n  function PdfAnnotationCollection(page) {\n    // Constants\n\n    /**\n     * `Error` constant message.\n     * @private\n     */\n    this.alreadyExistsAnnotationError = 'This annotatation had been already added to page';\n    /**\n     * `Error` constant message.\n     * @private\n     */\n\n    this.missingAnnotationException = 'Annotation is not contained in collection.';\n    /**\n     * Specifies the Internal variable to store fields of `PdfDictionaryProperties`.\n     * @private\n     */\n\n    this.dictionaryProperties = new DictionaryProperties();\n    /**\n     * Array of the `annotations`.\n     * @private\n     */\n\n    this.internalAnnotations = new PdfArray();\n    /**\n     * privte `list` for the annotations.\n     * @private\n     */\n\n    this.lists = [];\n\n    if (typeof page !== 'undefined') {\n      this.page = page;\n    }\n  }\n\n  Object.defineProperty(PdfAnnotationCollection.prototype, \"annotations\", {\n    /**\n     * Gets the `PdfAnnotation` object at the specified index. Read-Only.\n     * @private\n     */\n    get: function () {\n      return this.internalAnnotations;\n    },\n    set: function (value) {\n      this.internalAnnotations = value;\n    },\n    enumerable: true,\n    configurable: true\n  }); // Public methods\n\n  /**\n   * `Adds` a new annotation to the collection.\n   * @private\n   */\n\n  PdfAnnotationCollection.prototype.add = function (annotation) {\n    // this.SetPrint(annotation);\n    this.doAdd(annotation);\n  };\n  /**\n   * `Adds` a Annotation to collection.\n   * @private\n   */\n\n  /* tslint:disable */\n\n\n  PdfAnnotationCollection.prototype.doAdd = function (annotation) {\n    if (typeof annotation.destination !== 'undefined') {\n      var layout = new PdfStringLayouter();\n      var layoutResult = layout.layout(annotation.text, annotation.font, annotation.stringFormat, new SizeF(annotation.bounds.width, 0), false, new SizeF(0, 0));\n      var lastPosition = annotation.bounds.y;\n\n      if (layoutResult.lines.length === 1) {\n        var size = annotation.font.measureString(layoutResult.lines[0].text);\n        annotation.bounds = new RectangleF(new PointF(annotation.bounds.x, lastPosition), size);\n        annotation.text = layoutResult.lines[0].text; //Draw Annotation Text.\n\n        this.page.graphics.drawString(annotation.text, annotation.font, null, annotation.brush, annotation.bounds.x, annotation.bounds.y, annotation.bounds.width, annotation.bounds.height, null); //Add annotation to dictionary.\n\n        annotation.setPage(this.page);\n        this.setColor(annotation);\n        this.internalAnnotations.add(new PdfReferenceHolder(annotation));\n        this.lists.push(annotation);\n      } else {\n        for (var i = 0; i < layoutResult.lines.length; i++) {\n          var size = annotation.font.measureString(layoutResult.lines[i].text);\n\n          if (i === 0) {\n            annotation.bounds = new RectangleF(annotation.bounds.x, lastPosition, size.width, size.height);\n            annotation.text = layoutResult.lines[i].text; //Draw Annotation Text.\n\n            this.page.graphics.drawString(annotation.text, annotation.font, null, annotation.brush, annotation.bounds.x, lastPosition, size.width, size.height, null); //Add annotation to dictionary.\n\n            annotation.setPage(this.page);\n            this.setColor(annotation);\n            this.internalAnnotations.add(new PdfReferenceHolder(annotation));\n            this.lists.push(annotation); //Update y for drawing next line of the text.\n\n            lastPosition += annotation.bounds.height;\n          } else {\n            var annot = annotation.clone();\n            annot.bounds = new RectangleF(new PointF(annotation.bounds.x, lastPosition), size);\n            annot.text = layoutResult.lines[i].text; //Draw Annotation Text.\n\n            this.page.graphics.drawString(annot.text, annot.font, null, annot.brush, annot.bounds.x, annot.bounds.y, annot.bounds.width, annot.bounds.height, null); //Add annotation to dictionary.\n\n            annot.setPage(this.page);\n            this.setColor(annot);\n            this.internalAnnotations.add(new PdfReferenceHolder(annot));\n            this.lists.push(annot); //Update y for drawing next line of the text.\n\n            lastPosition += annot.bounds.height;\n          }\n        }\n      }\n    } else {\n      annotation.setPage(this.page);\n      this.internalAnnotations.add(new PdfReferenceHolder(annotation));\n      return this.lists.push(annotation);\n    }\n  };\n  /* tslint:enable */\n\n  /**\n   * `Set a color of an annotation`.\n   * @private\n   */\n\n\n  PdfAnnotationCollection.prototype.setColor = function (annotation) {\n    var cs = PdfColorSpace.Rgb;\n    var colours = annotation.color.toArray(cs);\n    annotation.dictionary.items.setValue(this.dictionaryProperties.c, colours);\n  };\n\n  Object.defineProperty(PdfAnnotationCollection.prototype, \"element\", {\n    // IPdfWrapper Members\n\n    /**\n     * Gets the `Element` representing this object.\n     * @private\n     */\n    get: function () {\n      return this.internalAnnotations;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfAnnotationCollection;\n}();\n\nexport { PdfAnnotationCollection };","map":null,"metadata":{},"sourceType":"module"}