{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { isNullOrUndefined, extend } from '@syncfusion/ej2-base';\nimport { DataManager, Query, Deferred, Predicate, DataUtil } from '@syncfusion/ej2-data';\nimport { initForeignKeyColumn, getForeignKeyData, generateQuery } from '../base/constant';\nimport { getDatePredicate } from '../base/util';\nimport { Data } from './data';\nimport * as events from '../base/constant';\n/**\n * `ForeignKey` module is used to handle foreign key column's actions.\n */\n\nvar ForeignKey =\n/** @class */\nfunction (_super) {\n  __extends(ForeignKey, _super);\n\n  function ForeignKey(parent, serviceLocator) {\n    var _this = _super.call(this, parent, serviceLocator) || this;\n\n    _this.parent = parent;\n    _this.serviceLocator = serviceLocator;\n\n    _this.initEvent();\n\n    return _this;\n  }\n\n  ForeignKey.prototype.initEvent = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.on(initForeignKeyColumn, this.initForeignKeyColumns, this);\n    this.parent.on(getForeignKeyData, this.getForeignKeyData, this);\n    this.parent.on(generateQuery, this.generateQueryFormData, this);\n  };\n\n  ForeignKey.prototype.initForeignKeyColumns = function (columns) {\n    for (var i = 0; i < columns.length; i++) {\n      columns[i].dataSource = columns[i].dataSource instanceof DataManager ? columns[i].dataSource : isNullOrUndefined(columns[i].dataSource) ? new DataManager() : 'result' in columns[i].dataSource ? columns[i].dataSource : new DataManager(columns[i].dataSource);\n    }\n  };\n\n  ForeignKey.prototype.eventfPromise = function (args, query, key, column) {\n    var state = this.getStateEventArgument(query);\n    var def = new Deferred();\n    var deff = new Deferred();\n    state.action = args.action;\n    var dataModule = this.parent.getDataModule();\n\n    if (!isNullOrUndefined(args.action) && args.action.requestType && dataModule.foreignKeyDataState.isDataChanged !== false) {\n      dataModule.setForeignKeyDataState({\n        isPending: true,\n        resolver: deff.resolve\n      });\n      deff.promise.then(function () {\n        def.resolve(column.dataSource);\n      });\n      state.setColumnData = this.parent.setForeignKeyData.bind(this.parent);\n      this.parent.trigger(events.columnDataStateChange, state);\n    } else {\n      dataModule.setForeignKeyDataState({});\n      def.resolve(key);\n    }\n\n    return def;\n  };\n\n  ForeignKey.prototype.getForeignKeyData = function (args) {\n    var _this = this;\n\n    var foreignColumns = args.column ? [args.column] : this.parent.getForeignKeyColumns();\n    var allPromise = [];\n\n    var _loop_1 = function (i) {\n      var promise = void 0;\n      var query = args.isComplex ? this_1.genarateColumnQuery(foreignColumns[i]) : this_1.genarateQuery(foreignColumns[i], args.result.result, false, true);\n      query.params = this_1.parent.query.params;\n      var dataSource = foreignColumns[i].dataSource;\n\n      if (dataSource && 'result' in dataSource) {\n        var def = this_1.eventfPromise(args, query, dataSource, foreignColumns[i]);\n        promise = def.promise;\n      } else if (!dataSource.ready || dataSource.dataSource.offline) {\n        promise = dataSource.executeQuery(query);\n      } else {\n        promise = dataSource.ready.then(function () {\n          return dataSource.executeQuery(query);\n        });\n      }\n\n      allPromise.push(promise);\n    };\n\n    var this_1 = this;\n\n    for (var i = 0; i < foreignColumns.length; i++) {\n      _loop_1(i);\n    }\n\n    Promise.all(allPromise).then(function (responses) {\n      for (var i = 0; i < responses.length; i++) {\n        foreignColumns[i].columnData = responses[i].result;\n\n        if (foreignColumns[i].editType === 'dropdownedit' && 'result' in foreignColumns[i].dataSource) {\n          foreignColumns[i].edit.params = extend(foreignColumns[i].edit.params, {\n            dataSource: responses[i].result,\n            query: new Query(),\n            fields: {\n              value: foreignColumns[i].foreignKeyField || foreignColumns[i].field,\n              text: foreignColumns[i].foreignKeyValue\n            }\n          });\n        }\n      }\n\n      args.promise.resolve(args.result);\n    }).catch(function (e) {\n      _this.parent.log(['actionfailure', 'foreign_key_failure']);\n\n      if (args.promise && args.promise.reject) {\n        args.promise.reject(e);\n      }\n\n      return e;\n    });\n  };\n\n  ForeignKey.prototype.generateQueryFormData = function (args) {\n    args.predicate.predicate = this.genarateQuery(args.column, args.column.columnData, true);\n  };\n\n  ForeignKey.prototype.genarateQuery = function (column, e, fromData, needQuery) {\n    var gObj = this.parent;\n    var predicates = [];\n    var predicate;\n    var query = new Query();\n    var field = fromData ? column.foreignKeyField : column.field;\n\n    if (gObj.allowPaging || gObj.enableVirtualization || fromData) {\n      e = new DataManager(gObj.allowGrouping && gObj.groupSettings.columns.length && !fromData ? e.records : e).executeLocal(new Query().select(field));\n      var filteredValue = DataUtil.distinct(e, field, false);\n      field = fromData ? column.field : column.foreignKeyField;\n\n      for (var i = 0; i < filteredValue.length; i++) {\n        if (filteredValue[i] && filteredValue[i].getDay) {\n          predicates.push(getDatePredicate({\n            field: field,\n            operator: 'equal',\n            value: filteredValue[i],\n            matchCase: false\n          }));\n        } else {\n          predicates.push(new Predicate(field, 'equal', filteredValue[i], false));\n        }\n      }\n    }\n\n    if (needQuery) {\n      return predicates.length ? query.where(Predicate.or(predicates)) : query;\n    }\n\n    predicate = predicates.length ? Predicate.or(predicates) : {\n      predicates: []\n    };\n    return predicate;\n  };\n\n  ForeignKey.prototype.genarateColumnQuery = function (column) {\n    var gObj = this.parent;\n    var query = new Query();\n    var queryColumn = this.isFiltered(column);\n\n    if (queryColumn.isTrue) {\n      query = this.filterQuery(query, queryColumn.column, true);\n    }\n\n    if (gObj.searchSettings.key.length) {\n      var sSettings = gObj.searchSettings;\n\n      if (column.dataSource instanceof DataManager && column.dataSource.adaptor.getModuleName && column.dataSource.adaptor.getModuleName() === 'ODataV4Adaptor') {\n        query = this.searchQuery(query, column, true);\n      } else {\n        query.search(sSettings.key, column.foreignKeyValue, sSettings.operator, sSettings.ignoreCase);\n      }\n    }\n\n    return query;\n  };\n\n  ForeignKey.prototype.isFiltered = function (column) {\n    var filterColumn = this.parent.filterSettings.columns.filter(function (fColumn) {\n      return fColumn.field === column.foreignKeyValue && fColumn.uid === column.uid;\n    });\n    return {\n      column: filterColumn,\n      isTrue: !!filterColumn.length\n    };\n  };\n\n  ForeignKey.prototype.getModuleName = function () {\n    return 'foreignKey';\n  };\n\n  ForeignKey.prototype.destroy = function () {\n    this.destroyEvent();\n  };\n\n  ForeignKey.prototype.destroyEvent = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(initForeignKeyColumn, this.initForeignKeyColumns);\n    this.parent.off(getForeignKeyData, this.getForeignKeyData);\n    this.parent.off(generateQuery, this.generateQueryFormData);\n  };\n\n  return ForeignKey;\n}(Data);\n\nexport { ForeignKey };","map":null,"metadata":{},"sourceType":"module"}