{"ast":null,"code":"/**\n * Writes data in BigEndian order.\n */\nvar BigEndianWriter =\n/** @class */\nfunction () {\n  //Constructors\n\n  /**\n   * Creates a new writer.\n   */\n  function BigEndianWriter(capacity) {\n    //Constants\n\n    /**\n     * Size of Int32 type.\n     */\n    this.int32Size = 4;\n    /**\n     * Size of Int16 type.\n     */\n\n    this.int16Size = 2;\n    /**\n     * Size of long type.\n     */\n\n    this.int64Size = 8;\n    this.bufferLength = capacity;\n    this.buffer = [];\n  }\n\n  Object.defineProperty(BigEndianWriter.prototype, \"data\", {\n    //Properties\n\n    /**\n     * Gets data written to the writer.\n     */\n    get: function () {\n      if (this.buffer.length < this.bufferLength) {\n        var length_1 = this.bufferLength - this.buffer.length;\n\n        for (var i = 0; i < length_1; i++) {\n          this.buffer.push(0);\n        }\n      }\n\n      return this.buffer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BigEndianWriter.prototype, \"position\", {\n    /// <summary>\n    /// Gets position of the internal buffer.\n    /// </summary>\n    get: function () {\n      if (this.internalPosition === undefined || this.internalPosition === null) {\n        this.internalPosition = 0;\n      }\n\n      return this.internalPosition;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Writes short value.\n   */\n\n  BigEndianWriter.prototype.writeShort = function (value) {\n    var bytes = [(value & 0x0000ff00) >> 8, value & 0x000000ff];\n    this.flush(bytes);\n  };\n  /**\n   * Writes int value.\n   */\n\n\n  BigEndianWriter.prototype.writeInt = function (value) {\n    var i1 = (value & 0xff000000) >> 24;\n    i1 = i1 < 0 ? 256 + i1 : i1;\n    var i2 = (value & 0x00ff0000) >> 16;\n    i2 = i2 < 0 ? 256 + i2 : i2;\n    var i3 = (value & 0x0000ff00) >> 8;\n    i3 = i3 < 0 ? 256 + i3 : i3;\n    var i4 = value & 0x000000ff;\n    i4 = i4 < 0 ? 256 + i4 : i4;\n    var bytes = [(value & 0xff000000) >> 24, (value & 0x00ff0000) >> 16, (value & 0x0000ff00) >> 8, value & 0x000000ff];\n    this.flush(bytes);\n  };\n  /**\n   * Writes u int value.\n   */\n\n\n  BigEndianWriter.prototype.writeUInt = function (value) {\n    var buff = [(value & 0xff000000) >> 24, (value & 0x00ff0000) >> 16, (value & 0x0000ff00) >> 8, value & 0x000000ff];\n    this.flush(buff);\n  };\n  /**\n   * Writes string value.\n   */\n\n\n  BigEndianWriter.prototype.writeString = function (value) {\n    if (value == null) {\n      throw new Error('Argument Null Exception : value');\n    }\n\n    var bytes = [];\n\n    for (var i = 0; i < value.length; i++) {\n      bytes.push(value.charCodeAt(i));\n    }\n\n    this.flush(bytes);\n  };\n  /**\n   * Writes byte[] value.\n   */\n\n\n  BigEndianWriter.prototype.writeBytes = function (value) {\n    this.flush(value);\n  }; // //Implementation\n\n\n  BigEndianWriter.prototype.flush = function (buff) {\n    if (buff === null) {\n      throw new Error('Argument Null Exception : buff');\n    }\n\n    var position = this.position;\n\n    for (var i = 0; i < buff.length; i++) {\n      this.buffer[position] = buff[i];\n      position++;\n    }\n\n    this.internalPosition += buff.length;\n  };\n\n  return BigEndianWriter;\n}();\n\nexport { BigEndianWriter };","map":null,"metadata":{},"sourceType":"module"}