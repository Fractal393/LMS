{"ast":null,"code":"/**\n * Save class provide method to save file\n * ```typescript\n * let blob : Blob = new Blob([''], { type: 'text/plain' });\n * Save.save('fileName.txt',blob);\n */\nvar Save =\n/** @class */\nfunction () {\n  /**\n   * Initialize new instance of {save}\n   */\n  function Save() {} // tslint:disable\n\n  /**\n   * Saves the file with specified name and sends the file to client browser\n   * @param  {string} fileName- file name to save.\n   * @param  {Blob} buffer- the content to write in file\n   * @param  {boolean} isMicrosoftBrowser- specify whether microsoft browser or not\n   * @returns {void}\n   */\n\n\n  Save.save = function (fileName, buffer) {\n    if (fileName === null || fileName === undefined || fileName === '') {\n      throw new Error('ArgumentException: fileName cannot be undefined, null or empty');\n    }\n\n    var extension = fileName.substring(fileName.lastIndexOf('.') + 1, fileName.length);\n    var mimeType = this.getMimeType(extension);\n\n    if (mimeType !== '') {\n      buffer = new Blob([buffer], {\n        type: mimeType\n      });\n    }\n\n    if (this.isMicrosoftBrowser) {\n      navigator.msSaveBlob(buffer, fileName);\n    } else {\n      var downloadLink = document.createElementNS('http://www.w3.org/1999/xhtml', 'a');\n      this.saveInternal(fileName, extension, buffer, downloadLink, 'download' in downloadLink);\n    }\n  };\n\n  Save.saveInternal = function (fileName, extension, buffer, downloadLink, hasDownloadAttribute) {\n    if (hasDownloadAttribute) {\n      downloadLink.download = fileName;\n      var dataUrl_1 = window.URL.createObjectURL(buffer);\n      downloadLink.href = dataUrl_1;\n      var event_1 = document.createEvent('MouseEvent');\n      event_1.initEvent('click', true, true);\n      downloadLink.dispatchEvent(event_1);\n      setTimeout(function () {\n        window.URL.revokeObjectURL(dataUrl_1);\n        dataUrl_1 = undefined;\n      });\n    } else {\n      if (extension !== 'docx' && extension !== 'xlsx') {\n        var url = window.URL.createObjectURL(buffer);\n        var isPopupBlocked = window.open(url, '_blank');\n\n        if (!isPopupBlocked) {\n          window.location.href = url;\n        }\n      } else {\n        var reader_1 = new FileReader();\n\n        reader_1.onloadend = function () {\n          var isPopupBlocked = window.open(reader_1.result, '_blank');\n\n          if (!isPopupBlocked) {\n            window.location.href = reader_1.result;\n          }\n        };\n\n        reader_1.readAsDataURL(buffer);\n      }\n    }\n  };\n  /**\n   *\n   * @param {string} extension - get mime type of the specified extension\n   * @private\n   */\n\n\n  Save.getMimeType = function (extension) {\n    var mimeType = '';\n\n    switch (extension) {\n      case 'html':\n        mimeType = 'text/html';\n        break;\n\n      case 'pdf':\n        mimeType = 'application/pdf';\n        break;\n\n      case 'docx':\n        mimeType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';\n        break;\n\n      case 'xlsx':\n        mimeType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';\n        break;\n\n      case 'txt':\n        mimeType = 'text/plain';\n        break;\n    }\n\n    return mimeType;\n  };\n\n  return Save;\n}();\n\nexport { Save };","map":null,"metadata":{},"sourceType":"module"}