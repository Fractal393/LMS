{"ast":null,"code":"/**\r\n * DevExtreme (ui/date_box/ui.date_view_roller.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\");\n\nvar eventsEngine = require(\"../../events/core/events_engine\");\n\nvar registerComponent = require(\"../../core/component_registrator\");\n\nvar extend = require(\"../../core/utils/extend\").extend;\n\nvar each = require(\"../../core/utils/iterator\").each;\n\nvar getBoundingRect = require(\"../../core/utils/position\").getBoundingRect;\n\nvar eventUtils = require(\"../../events/utils\");\n\nvar clickEvent = require(\"../../events/click\");\n\nvar Scrollable = require(\"../scroll_view/ui.scrollable\");\n\nvar fx = require(\"../../animation/fx\");\n\nvar translator = require(\"../../animation/translator\");\n\nvar DATEVIEW_ROLLER_CLASS = \"dx-dateviewroller\";\nvar DATEVIEW_ROLLER_ACTIVE_CLASS = \"dx-state-active\";\nvar DATEVIEW_ROLLER_CURRENT_CLASS = \"dx-dateviewroller-current\";\nvar DATEVIEW_ROLLER_ITEM_CLASS = \"dx-dateview-item\";\nvar DATEVIEW_ROLLER_ITEM_SELECTED_CLASS = \"dx-dateview-item-selected\";\nvar DATEVIEW_ROLLER_ITEM_SELECTED_FRAME_CLASS = \"dx-dateview-item-selected-frame\";\nvar DATEVIEW_ROLLER_ITEM_SELECTED_BORDER_CLASS = \"dx-dateview-item-selected-border\";\nvar DateViewRoller = Scrollable.inherit({\n  _getDefaultOptions: function () {\n    return extend(this.callBase(), {\n      showScrollbar: false,\n      useNative: false,\n      selectedIndex: 0,\n      bounceEnabled: false,\n      items: [],\n      showOnClick: false,\n      onClick: null,\n      onSelectedIndexChanged: null\n    });\n  },\n  _defaultOptionsRules: function () {\n    return this.callBase().concat([{\n      device: {\n        platform: \"generic\"\n      },\n      options: {\n        scrollByContent: true\n      }\n    }]);\n  },\n  _init: function () {\n    this.callBase();\n\n    this._renderSelectedItemFrame();\n  },\n  _render: function () {\n    this.callBase();\n    this.$element().addClass(DATEVIEW_ROLLER_CLASS);\n\n    this._renderContainerClick();\n\n    this._renderItems();\n\n    this._renderSelectedValue();\n\n    this._renderItemsClick();\n\n    this._wrapAction(\"_endAction\", this._endActionHandler.bind(this));\n\n    this._renderSelectedIndexChanged();\n  },\n  _renderSelectedIndexChanged: function () {\n    this._selectedIndexChanged = this._createActionByOption(\"onSelectedIndexChanged\");\n  },\n  _renderContainerClick: function () {\n    if (!this.option(\"showOnClick\")) {\n      return;\n    }\n\n    var eventName = eventUtils.addNamespace(clickEvent.name, this.NAME);\n\n    var clickAction = this._createActionByOption(\"onClick\");\n\n    eventsEngine.off(this._$container, eventName);\n    eventsEngine.on(this._$container, eventName, function (e) {\n      clickAction({\n        event: e\n      });\n    });\n  },\n  _wrapAction: function (actionName, callback) {\n    var strategy = this._strategy;\n    var originalAction = strategy[actionName];\n\n    strategy[actionName] = function () {\n      callback.apply(this, arguments);\n      return originalAction.apply(this, arguments);\n    };\n  },\n  _renderItems: function () {\n    var items = this.option(\"items\") || [];\n    var $items = $();\n\n    this._$content.empty();\n\n    items.forEach(function (item) {\n      $items = $items.add($(\"<div>\").addClass(DATEVIEW_ROLLER_ITEM_CLASS).append(item));\n    });\n\n    this._$content.append($items);\n\n    this._$items = $items;\n    this.update();\n  },\n  _renderSelectedItemFrame: function () {\n    $(\"<div>\").addClass(DATEVIEW_ROLLER_ITEM_SELECTED_FRAME_CLASS).append($(\"<div>\").addClass(DATEVIEW_ROLLER_ITEM_SELECTED_BORDER_CLASS)).appendTo(this._$container);\n  },\n  _renderSelectedValue: function (selectedIndex) {\n    var index = this._fitIndex(selectedIndex || this.option(\"selectedIndex\"));\n\n    this._moveTo({\n      top: this._getItemPosition(index)\n    });\n\n    this._renderActiveStateItem();\n  },\n  _fitIndex: function (index) {\n    var items = this.option(\"items\") || [];\n    var itemCount = items.length;\n\n    if (index >= itemCount) {\n      return itemCount - 1;\n    }\n\n    if (index < 0) {\n      return 0;\n    }\n\n    return index;\n  },\n  _getItemPosition: function (index) {\n    return Math.round(this._itemHeight() * index);\n  },\n  _renderItemsClick: function () {\n    var itemSelector = this._getItemSelector();\n\n    var eventName = eventUtils.addNamespace(clickEvent.name, this.NAME);\n    eventsEngine.off(this.$element(), eventName, itemSelector);\n    eventsEngine.on(this.$element(), eventName, itemSelector, this._itemClickHandler.bind(this));\n  },\n  _getItemSelector: function () {\n    return \".\" + DATEVIEW_ROLLER_ITEM_CLASS;\n  },\n  _itemClickHandler: function (e) {\n    this.option(\"selectedIndex\", this._itemElementIndex(e.currentTarget));\n  },\n  _itemElementIndex: function (itemElement) {\n    return this._itemElements().index(itemElement);\n  },\n  _itemElements: function () {\n    return this.$element().find(this._getItemSelector());\n  },\n  _renderActiveStateItem: function () {\n    var selectedIndex = this.option(\"selectedIndex\");\n    each(this._$items, function (index) {\n      $(this).toggleClass(DATEVIEW_ROLLER_ITEM_SELECTED_CLASS, selectedIndex === index);\n    });\n  },\n  _moveTo: function (targetLocation) {\n    targetLocation = this._normalizeLocation(targetLocation);\n\n    var location = this._location();\n\n    var delta = {\n      x: -(location.left - targetLocation.left),\n      y: -(location.top - targetLocation.top)\n    };\n\n    if (this._isVisible() && (delta.x || delta.y)) {\n      this._strategy._prepareDirections(true);\n\n      if (this._animation) {\n        var that = this;\n        fx.stop(this._$content);\n        fx.animate(this._$content, {\n          duration: 200,\n          type: \"slide\",\n          to: {\n            top: Math.floor(delta.y)\n          },\n          complete: function () {\n            translator.resetPosition(that._$content);\n\n            that._strategy.handleMove({\n              delta: delta\n            });\n          }\n        });\n        delete this._animation;\n      } else {\n        this._strategy.handleMove({\n          delta: delta\n        });\n      }\n    }\n  },\n  _validate: function (e) {\n    return this._strategy.validate(e);\n  },\n  _endActionHandler: function () {\n    var currentSelectedIndex = this.option(\"selectedIndex\");\n\n    var ratio = -this._location().top / this._itemHeight();\n\n    var newSelectedIndex = Math.round(ratio);\n    this._animation = true;\n\n    if (newSelectedIndex === currentSelectedIndex) {\n      this._renderSelectedValue(newSelectedIndex);\n    } else {\n      this.option(\"selectedIndex\", newSelectedIndex);\n    }\n  },\n  _itemHeight: function () {\n    var $item = this._$items.first();\n\n    return $item.get(0) && getBoundingRect($item.get(0)).height || 0;\n  },\n  _toggleActive: function (state) {\n    this.$element().toggleClass(DATEVIEW_ROLLER_ACTIVE_CLASS, state);\n  },\n  _isVisible: function () {\n    return this._$container.is(\":visible\");\n  },\n  _fireSelectedIndexChanged: function (value, previousValue) {\n    this._selectedIndexChanged({\n      value: value,\n      previousValue: previousValue,\n      event: void 0\n    });\n  },\n  _visibilityChanged: function (visible) {\n    this.callBase(visible);\n\n    if (visible) {\n      this._renderSelectedValue(this.option(\"selectedIndex\"));\n    }\n\n    this.toggleActiveState(false);\n  },\n  toggleActiveState: function (state) {\n    this.$element().toggleClass(DATEVIEW_ROLLER_CURRENT_CLASS, state);\n  },\n  _refreshSelectedIndex: function () {\n    var selectedIndex = this.option(\"selectedIndex\");\n\n    var fitIndex = this._fitIndex(selectedIndex);\n\n    fitIndex === selectedIndex ? this._renderActiveStateItem() : this.option(\"selectedIndex\", fitIndex);\n  },\n  _optionChanged: function (args) {\n    switch (args.name) {\n      case \"selectedIndex\":\n        this._fireSelectedIndexChanged(args.value, args.previousValue);\n\n        this._renderSelectedValue(args.value);\n\n        break;\n\n      case \"items\":\n        this._renderItems();\n\n        this._refreshSelectedIndex();\n\n        break;\n\n      case \"onClick\":\n      case \"showOnClick\":\n        this._renderContainerClick();\n\n        break;\n\n      case \"onSelectedIndexChanged\":\n        this._renderSelectedIndexChanged();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n});\nregisterComponent(\"dxDateViewRoller\", DateViewRoller);\nmodule.exports = DateViewRoller;","map":null,"metadata":{},"sourceType":"script"}