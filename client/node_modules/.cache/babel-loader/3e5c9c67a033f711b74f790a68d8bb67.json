{"ast":null,"code":"/**\n * Dictionary.ts class for EJ2-PDF\n * @private\n * @hidden\n */\nimport { defaultToString } from './utils';\n/**\n * @private\n * @hidden\n */\n\nvar Dictionary =\n/** @class */\nfunction () {\n  /**\n   * @private\n   * @hidden\n   */\n  function Dictionary(toStringFunction) {\n    this.table = {};\n    this.nElements = 0;\n    this.toStr = toStringFunction || defaultToString;\n  }\n  /**\n   * @private\n   * @hidden\n   */\n\n\n  Dictionary.prototype.getValue = function (key) {\n    var pair = this.table['$' + this.toStr(key)];\n\n    if (typeof pair === 'undefined') {\n      return undefined;\n    }\n\n    return pair.value;\n  };\n  /**\n   * @private\n   * @hidden\n   */\n\n\n  Dictionary.prototype.setValue = function (key, value) {\n    // if (typeof key === 'undefined' || typeof value === 'undefined') {\n    //     return undefined;\n    // }\n    var ret;\n    var k = '$' + this.toStr(key);\n    var previousElement = this.table[k]; // if (typeof previousElement === 'undefined') {\n\n    this.nElements++;\n    ret = undefined; // }\n\n    this.table[k] = {\n      key: key,\n      value: value\n    };\n    return ret;\n  };\n  /**\n   * @private\n   * @hidden\n   */\n\n\n  Dictionary.prototype.remove = function (key) {\n    var k = '$' + this.toStr(key);\n    var previousElement = this.table[k]; // if (typeof previousElement !== 'undefined') {\n\n    delete this.table[k];\n    this.nElements--;\n    return previousElement.value; // }\n    // return undefined;\n  };\n  /**\n   * @private\n   * @hidden\n   */\n\n\n  Dictionary.prototype.keys = function () {\n    var keysArray = [];\n    var namesOfKeys = Object.keys(this.table);\n\n    for (var index1 = 0; index1 < namesOfKeys.length; index1++) {\n      // if (Object.prototype.hasOwnProperty.call(this.table, namesOfKeys[index1])) {\n      var pair1 = this.table[namesOfKeys[index1]];\n      keysArray.push(pair1.key); // }\n    }\n\n    return keysArray;\n  };\n  /**\n   * @private\n   * @hidden\n   */\n\n\n  Dictionary.prototype.values = function () {\n    var valuesArray = [];\n    var namesOfValues = Object.keys(this.table);\n\n    for (var index2 = 0; index2 < namesOfValues.length; index2++) {\n      // if (Object.prototype.hasOwnProperty.call(this.table, namesOfValues[index2])) {\n      var pair2 = this.table[namesOfValues[index2]];\n      valuesArray.push(pair2.value); // }\n    }\n\n    return valuesArray;\n  };\n  /**\n   * @private\n   * @hidden\n   */\n\n\n  Dictionary.prototype.containsKey = function (key) {\n    var retutnValue = true;\n\n    if (typeof this.getValue(key) === 'undefined') {\n      retutnValue = true;\n    } else {\n      retutnValue = false;\n    }\n\n    return !retutnValue;\n  };\n  /**\n   * @private\n   * @hidden\n   */\n\n\n  Dictionary.prototype.clear = function () {\n    this.table = {};\n    this.nElements = 0;\n  };\n  /**\n   * @private\n   * @hidden\n   */\n\n\n  Dictionary.prototype.size = function () {\n    return this.nElements;\n  };\n\n  return Dictionary;\n}(); // End of dictionary\n\n\nexport { Dictionary };","map":null,"metadata":{},"sourceType":"module"}