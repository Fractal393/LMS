{"ast":null,"code":"/**\r\n * DevExtreme (ui/file_manager/ui.file_manager.notification.progress_panel.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _icon = require(\"../../core/utils/icon\");\n\nvar _message = require(\"../../localization/message\");\n\nvar _message2 = _interopRequireDefault(_message);\n\nvar _ui = require(\"../widget/ui.widget\");\n\nvar _ui2 = _interopRequireDefault(_ui);\n\nvar _progress_bar = require(\"../progress_bar\");\n\nvar _progress_bar2 = _interopRequireDefault(_progress_bar);\n\nvar _button = require(\"../button\");\n\nvar _button2 = _interopRequireDefault(_button);\n\nvar _ui3 = require(\"../scroll_view/ui.scroll_view\");\n\nvar _ui4 = _interopRequireDefault(_ui3);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nfunction _get(target, property, receiver) {\n  if (\"undefined\" !== typeof Reflect && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function (target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) {\n        return;\n      }\n\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n\n    if (null === object) {\n      break;\n    }\n  }\n\n  return object;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (\"function\" !== typeof superClass && null !== superClass) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (superClass) {\n    _setPrototypeOf(subClass, superClass);\n  }\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function (o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var result,\n        Super = _getPrototypeOf(Derived);\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (\"object\" === _typeof(call) || \"function\" === typeof call)) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (void 0 === self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (\"undefined\" === typeof Reflect || !Reflect.construct) {\n    return false;\n  }\n\n  if (Reflect.construct.sham) {\n    return false;\n  }\n\n  if (\"function\" === typeof Proxy) {\n    return true;\n  }\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function (o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar FILE_MANAGER_PROGRESS_PANEL_CLASS = \"dx-filemanager-progress-panel\";\nvar FILE_MANAGER_PROGRESS_PANEL_CONTAINER_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_PANEL_CLASS, \"-container\");\nvar FILE_MANAGER_PROGRESS_PANEL_TITLE_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_PANEL_CLASS, \"-title\");\nvar FILE_MANAGER_PROGRESS_PANEL_TITLE_TEXT_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_PANEL_CLASS, \"-title-text\");\nvar FILE_MANAGER_PROGRESS_PANEL_CLOSE_BUTTON_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_PANEL_CLASS, \"-close-button\");\nvar FILE_MANAGER_PROGRESS_PANEL_INFOS_CONTAINER_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_PANEL_CLASS, \"-infos-container\");\nvar FILE_MANAGER_PROGRESS_PANEL_SEPARATOR_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_PANEL_CLASS, \"-separator\");\nvar FILE_MANAGER_PROGRESS_PANEL_INFO_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_PANEL_CLASS, \"-info\");\nvar FILE_MANAGER_PROGRESS_PANEL_COMMON_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_PANEL_CLASS, \"-common\");\nvar FILE_MANAGER_PROGRESS_PANEL_INFO_WITH_DETAILS_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_PANEL_CLASS, \"-info-with-details\");\nvar FILE_MANAGER_PROGRESS_PANEL_DETAILS_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_PANEL_CLASS, \"-details\");\nvar FILE_MANAGER_PROGRESS_BOX_CLASS = \"dx-filemanager-progress-box\";\nvar FILE_MANAGER_PROGRESS_BOX_ERROR_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_BOX_CLASS, \"-error\");\nvar FILE_MANAGER_PROGRESS_BOX_WITHOUT_CLOSE_BUTTON_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_BOX_CLASS, \"-without-close-button\");\nvar FILE_MANAGER_PROGRESS_BOX_IMAGE_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_BOX_CLASS, \"-image\");\nvar FILE_MANAGER_PROGRESS_BOX_WRAPPER_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_BOX_CLASS, \"-wrapper\");\nvar FILE_MANAGER_PROGRESS_BOX_COMMON_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_BOX_CLASS, \"-common\");\nvar FILE_MANAGER_PROGRESS_BOX_PROGRESS_BAR_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_BOX_CLASS, \"-progress-bar\");\nvar FILE_MANAGER_PROGRESS_BOX_CLOSE_BUTTON_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_BOX_CLASS, \"-close-button\");\nvar DX_CARD_CLASS = \"dx-card\";\n\nvar FileManagerProgressPanel = function (_Widget) {\n  _inherits(FileManagerProgressPanel, _Widget);\n\n  var _super = _createSuper(FileManagerProgressPanel);\n\n  function FileManagerProgressPanel() {\n    _classCallCheck(this, FileManagerProgressPanel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FileManagerProgressPanel, [{\n    key: \"_initMarkup\",\n    value: function () {\n      var _this = this;\n\n      _get(_getPrototypeOf(FileManagerProgressPanel.prototype), \"_initMarkup\", this).call(this);\n\n      this._initActions();\n\n      this._operationCount = 0;\n      this.$element().addClass(FILE_MANAGER_PROGRESS_PANEL_CLASS);\n      var $scrollView = (0, _renderer2.default)(\"<div>\").appendTo(this.$element());\n      var $container = (0, _renderer2.default)(\"<div>\").addClass(FILE_MANAGER_PROGRESS_PANEL_CONTAINER_CLASS).appendTo($scrollView);\n      this._scrollView = this._createComponent($scrollView, _ui4.default, {\n        scrollByContent: true,\n        scrollByThumb: true,\n        showScrollbar: \"onScroll\"\n      });\n      var $title = (0, _renderer2.default)(\"<div>\").addClass(FILE_MANAGER_PROGRESS_PANEL_TITLE_CLASS).appendTo($container);\n      (0, _renderer2.default)(\"<div>\").text(_message2.default.format(\"dxFileManager-notificationProgressPanelTitle\")).addClass(FILE_MANAGER_PROGRESS_PANEL_TITLE_TEXT_CLASS).appendTo($title);\n      var $closeButton = (0, _renderer2.default)(\"<div>\").addClass(FILE_MANAGER_PROGRESS_PANEL_CLOSE_BUTTON_CLASS).appendTo($title);\n\n      this._createComponent($closeButton, _button2.default, {\n        icon: \"close\",\n        stylingMode: \"text\",\n        onClick: function () {\n          return _this._raisePanelClosed();\n        }\n      });\n\n      this._$infosContainer = (0, _renderer2.default)(\"<div>\").addClass(FILE_MANAGER_PROGRESS_PANEL_INFOS_CONTAINER_CLASS).appendTo($container);\n\n      this._renderEmptyListText();\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function () {\n      return (0, _extend.extend)(_get(_getPrototypeOf(FileManagerProgressPanel.prototype), \"_getDefaultOptions\", this).call(this), {\n        onOperationClosed: null,\n        onOperationCanceled: null,\n        onOperationItemCanceled: null,\n        onPanelClosed: null\n      });\n    }\n  }, {\n    key: \"_initActions\",\n    value: function () {\n      this._actions = {\n        onOperationClosed: this._createActionByOption(\"onOperationClosed\"),\n        onOperationCanceled: this._createActionByOption(\"onOperationCanceled\"),\n        onOperationItemCanceled: this._createActionByOption(\"onOperationItemCanceled\"),\n        onPanelClosed: this._createActionByOption(\"onPanelClosed\")\n      };\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function (args) {\n      var name = args.name;\n\n      switch (name) {\n        case \"test\":\n          break;\n\n        case \"onOperationClosed\":\n        case \"onOperationCanceled\":\n        case \"onOperationItemCanceled\":\n          this._actions[name] = this._createActionByOption(name);\n          break;\n\n        default:\n          _get(_getPrototypeOf(FileManagerProgressPanel.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }, {\n    key: \"addOperation\",\n    value: function (commonText, showCloseButtonAlways, allowProgressAutoUpdate) {\n      var _this2 = this;\n\n      if (this._operationCount) {\n        (0, _renderer2.default)(\"<div>\").addClass(FILE_MANAGER_PROGRESS_PANEL_SEPARATOR_CLASS).prependTo(this._$infosContainer);\n      } else {\n        this._$infosContainer.empty();\n      }\n\n      this._operationCount++;\n      var info = {\n        customCloseHandling: showCloseButtonAlways,\n        allowProgressAutoUpdate: (0, _common.ensureDefined)(allowProgressAutoUpdate, true)\n      };\n      var $info = (0, _renderer2.default)(\"<div>\").addClass(FILE_MANAGER_PROGRESS_PANEL_INFO_CLASS).prependTo(this._$infosContainer);\n      info.$info = $info;\n      var $common = (0, _renderer2.default)(\"<div>\").addClass(FILE_MANAGER_PROGRESS_PANEL_COMMON_CLASS).appendTo($info);\n      info.common = this._createProgressBox($common, {\n        commonText: commonText,\n        showCloseButton: true,\n        showCloseButtonAlways: showCloseButtonAlways,\n        onCloseButtonClick: function () {\n          return _this2._closeOperation(info);\n        }\n      });\n      return info;\n    }\n  }, {\n    key: \"addOperationDetails\",\n    value: function (info, details, showCloseButton) {\n      var _this3 = this;\n\n      info.$info.addClass(FILE_MANAGER_PROGRESS_PANEL_INFO_WITH_DETAILS_CLASS);\n      var $details = (0, _renderer2.default)(\"<div>\").addClass(FILE_MANAGER_PROGRESS_PANEL_DETAILS_CLASS).appendTo(info.$info);\n      info.details = details.map(function (itemInfo, index) {\n        itemInfo.info = info;\n        return _this3._createDetailsItem($details, itemInfo, index, false, showCloseButton);\n      });\n    }\n  }, {\n    key: \"_createDetailsItem\",\n    value: function ($container, item, itemIndex, skipProgressBox, showCloseButton) {\n      var _this4 = this;\n\n      var $detailsItem = (0, _renderer2.default)(\"<div>\").appendTo($container);\n\n      if (itemIndex !== -1) {\n        $detailsItem.addClass(DX_CARD_CLASS);\n      }\n\n      return this._createProgressBox($detailsItem, {\n        commonText: item.commonText,\n        imageUrl: item.imageUrl,\n        skipProgressBox: skipProgressBox,\n        showCloseButton: showCloseButton,\n        showCloseButtonAlways: showCloseButton,\n        onCloseButtonClick: function () {\n          return _this4._cancelOperationItem(item, itemIndex);\n        }\n      });\n    }\n  }, {\n    key: \"completeOperationItem\",\n    value: function (operationInfo, itemIndex, commonProgress) {\n      if (operationInfo.allowProgressAutoUpdate) {\n        this.updateOperationItemProgress(operationInfo, itemIndex, 100, commonProgress);\n      }\n\n      this._setCloseButtonVisible(operationInfo.details[itemIndex], false);\n    }\n  }, {\n    key: \"updateOperationItemProgress\",\n    value: function (operationInfo, itemIndex, itemProgress, commonProgress) {\n      operationInfo.common.progressBar.option(\"value\", commonProgress);\n\n      if (operationInfo.details) {\n        var detailsItem = operationInfo.details[itemIndex];\n        detailsItem.progressBar.option(\"value\", itemProgress);\n      }\n    }\n  }, {\n    key: \"completeOperation\",\n    value: function (info, commonText, isError, statusText) {\n      info.completed = true;\n      info.common.$commonText.text(commonText);\n\n      if (isError) {\n        this._removeProgressBar(info.common);\n      } else {\n        if (info.allowProgressAutoUpdate) {\n          info.common.progressBar.option(\"value\", 100);\n        }\n      }\n\n      if (statusText) {\n        this._setProgressBarText(info.common, statusText);\n      }\n\n      this._setCloseButtonVisible(info.common, true);\n    }\n  }, {\n    key: \"completeSingleOperationWithError\",\n    value: function (info, errorText) {\n      info.completed = true;\n\n      this._renderOperationError(info.details ? info.details[0] : info.common, errorText);\n\n      this._setCloseButtonVisible(info.common, true);\n    }\n  }, {\n    key: \"addOperationDetailsError\",\n    value: function (info, index, errorText) {\n      var detailsItem = info.details[index];\n\n      this._renderOperationError(detailsItem, errorText);\n\n      this._setCloseButtonVisible(detailsItem, false);\n    }\n  }, {\n    key: \"renderError\",\n    value: function ($container, $target, errorText) {\n      (0, _renderer2.default)(\"<div>\").text(errorText).addClass(FILE_MANAGER_PROGRESS_BOX_ERROR_CLASS).appendTo($container);\n    }\n  }, {\n    key: \"createErrorDetailsProgressBox\",\n    value: function ($container, item, errorText) {\n      var detailsItem = this._createDetailsItem($container, item, -1, true);\n\n      this._renderOperationError(detailsItem, errorText);\n    }\n  }, {\n    key: \"_renderEmptyListText\",\n    value: function () {\n      this._$infosContainer.text(_message2.default.format(\"dxFileManager-notificationProgressPanelEmptyListText\"));\n    }\n  }, {\n    key: \"_renderOperationError\",\n    value: function (info, errorText) {\n      this._removeProgressBar(info);\n\n      this.renderError(info.$wrapper, info.$commonText, errorText);\n    }\n  }, {\n    key: \"_removeProgressBar\",\n    value: function (progressBox) {\n      if (progressBox.progressBar) {\n        progressBox.progressBar.dispose();\n        progressBox.progressBar.$element().remove();\n        progressBox.progressBar = null;\n      }\n    }\n  }, {\n    key: \"_createProgressBox\",\n    value: function ($container, options) {\n      var _this5 = this;\n\n      $container.addClass(FILE_MANAGER_PROGRESS_BOX_CLASS);\n\n      if (!options.showCloseButtonAlways) {\n        $container.addClass(FILE_MANAGER_PROGRESS_BOX_WITHOUT_CLOSE_BUTTON_CLASS);\n      }\n\n      if (options.imageUrl) {\n        (0, _icon.getImageContainer)(options.imageUrl).addClass(FILE_MANAGER_PROGRESS_BOX_IMAGE_CLASS).appendTo($container);\n      }\n\n      var $wrapper = (0, _renderer2.default)(\"<div>\").addClass(FILE_MANAGER_PROGRESS_BOX_WRAPPER_CLASS).appendTo($container);\n      var $commonText = (0, _renderer2.default)(\"<div>\").addClass(FILE_MANAGER_PROGRESS_BOX_COMMON_CLASS).text(options.commonText).appendTo($wrapper);\n      var progressBar = null;\n\n      if (!options.skipProgressBox) {\n        var $progressBar = (0, _renderer2.default)(\"<div>\").addClass(FILE_MANAGER_PROGRESS_BOX_PROGRESS_BAR_CLASS).appendTo($wrapper);\n        progressBar = this._createComponent($progressBar, _progress_bar2.default, {\n          min: 0,\n          max: 100,\n          width: \"100%\",\n          validationMessageMode: \"always\",\n          statusFormat: function (ratio, value) {\n            return _this5._getStatusString(ratio, value);\n          }\n        });\n      }\n\n      var closeButton = null;\n\n      if (options.showCloseButton) {\n        var $button = (0, _renderer2.default)(\"<div>\").addClass(FILE_MANAGER_PROGRESS_BOX_CLOSE_BUTTON_CLASS).appendTo($container);\n        closeButton = this._createComponent($button, _button2.default, {\n          icon: \"dx-filemanager-i dx-filemanager-i-cancel\",\n          stylingMode: \"text\",\n          visible: options.showCloseButtonAlways,\n          onClick: options.onCloseButtonClick\n        });\n      }\n\n      return {\n        $commonText: $commonText,\n        progressBar: progressBar,\n        $element: $container,\n        $wrapper: $wrapper,\n        closeButton: closeButton\n      };\n    }\n  }, {\n    key: \"_setCloseButtonVisible\",\n    value: function (progressBox, visible) {\n      if (progressBox.closeButton) {\n        progressBox.$element.toggleClass(FILE_MANAGER_PROGRESS_BOX_WITHOUT_CLOSE_BUTTON_CLASS, !visible);\n        progressBox.closeButton.option(\"visible\", visible);\n      }\n    }\n  }, {\n    key: \"_setProgressBarText\",\n    value: function (progressBox, text) {\n      progressBox.progressBar.option(\"statusFormat\", function () {\n        return text;\n      });\n    }\n  }, {\n    key: \"_closeOperation\",\n    value: function (info) {\n      var _this6 = this;\n\n      if (info.customCloseHandling && !info.completed) {\n        this._raiseOperationCanceled(info);\n\n        this._setCloseButtonVisible(info.common, false);\n\n        info.details.forEach(function (item) {\n          return _this6._displayClosedOperationItem(item);\n        });\n      } else {\n        this._raiseOperationClosed(info);\n\n        info.$info.next(\".\".concat(FILE_MANAGER_PROGRESS_PANEL_SEPARATOR_CLASS)).remove();\n        info.$info.remove();\n        this._operationCount--;\n\n        if (!this._operationCount) {\n          this._renderEmptyListText();\n        }\n      }\n    }\n  }, {\n    key: \"_cancelOperationItem\",\n    value: function (item, itemIndex) {\n      this._raiseOperationItemCanceled(item, itemIndex);\n\n      var itemInfo = item.info.details[itemIndex];\n\n      this._displayClosedOperationItem(itemInfo);\n    }\n  }, {\n    key: \"_displayClosedOperationItem\",\n    value: function (itemInfo) {\n      this._setProgressBarText(itemInfo, _message2.default.format(\"dxFileManager-notificationProgressPanelOperationCanceled\"));\n\n      this._setCloseButtonVisible(itemInfo, false);\n    }\n  }, {\n    key: \"_getStatusString\",\n    value: function (ratio, value) {\n      return 1 === ratio ? _message2.default.format(\"Done\") : Math.round(100 * ratio) + \"%\";\n    }\n  }, {\n    key: \"_raiseOperationClosed\",\n    value: function (info) {\n      this._actions.onOperationClosed({\n        info: info\n      });\n    }\n  }, {\n    key: \"_raiseOperationCanceled\",\n    value: function (info) {\n      this._actions.onOperationCanceled({\n        info: info\n      });\n    }\n  }, {\n    key: \"_raiseOperationItemCanceled\",\n    value: function (item, itemIndex) {\n      this._actions.onOperationItemCanceled({\n        item: item,\n        itemIndex: itemIndex\n      });\n    }\n  }, {\n    key: \"_raisePanelClosed\",\n    value: function () {\n      this._actions.onPanelClosed();\n    }\n  }]);\n\n  return FileManagerProgressPanel;\n}(_ui2.default);\n\nmodule.exports = FileManagerProgressPanel;","map":null,"metadata":{},"sourceType":"script"}