{"ast":null,"code":"/**\r\n * DevExtreme (events/utils/index.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addNamespace = exports.getChar = exports.normalizeKeyName = exports.fireEvent = exports.createEvent = exports.setEventFixMethod = exports.needSkipEvent = exports.stopEventsSkipping = exports.forceSkipEvents = exports.hasTouches = exports.eventDelta = exports.eventData = exports.isFakeClickEvent = exports.isKeyboardEvent = exports.isTouchEvent = exports.isDxMouseWheelEvent = exports.isMouseEvent = exports.isPointerEvent = exports.eventSource = void 0;\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _add_namespace = require(\"./add_namespace\");\n\nvar _add_namespace2 = _interopRequireDefault(_add_namespace);\n\nvar _events_engine = require(\"../core/events_engine\");\n\nvar _events_engine2 = _interopRequireDefault(_events_engine);\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _selectors = require(\"../../ui/widget/selectors\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar KEY_MAP = {\n  backspace: \"backspace\",\n  tab: \"tab\",\n  enter: \"enter\",\n  escape: \"escape\",\n  pageup: \"pageUp\",\n  pagedown: \"pageDown\",\n  end: \"end\",\n  home: \"home\",\n  arrowleft: \"leftArrow\",\n  arrowup: \"upArrow\",\n  arrowright: \"rightArrow\",\n  arrowdown: \"downArrow\",\n  \"delete\": \"del\",\n  \" \": \"space\",\n  f: \"F\",\n  a: \"A\",\n  \"*\": \"asterisk\",\n  \"-\": \"minus\",\n  alt: \"alt\",\n  control: \"control\",\n  shift: \"shift\",\n  left: \"leftArrow\",\n  up: \"upArrow\",\n  right: \"rightArrow\",\n  down: \"downArrow\",\n  multiply: \"asterisk\",\n  spacebar: \"space\",\n  del: \"del\",\n  subtract: \"minus\",\n  esc: \"escape\"\n};\nvar LEGACY_KEY_CODES = {\n  8: \"backspace\",\n  9: \"tab\",\n  13: \"enter\",\n  27: \"escape\",\n  33: \"pageUp\",\n  34: \"pageDown\",\n  35: \"end\",\n  36: \"home\",\n  37: \"leftArrow\",\n  38: \"upArrow\",\n  39: \"rightArrow\",\n  40: \"downArrow\",\n  46: \"del\",\n  32: \"space\",\n  70: \"F\",\n  65: \"A\",\n  106: \"asterisk\",\n  109: \"minus\",\n  189: \"minus\",\n  173: \"minus\",\n  16: \"shift\",\n  17: \"control\",\n  18: \"alt\"\n};\nvar EVENT_SOURCES_REGEX = {\n  dx: /^dx/i,\n  mouse: /(mouse|wheel)/i,\n  touch: /^touch/i,\n  keyboard: /^key/i,\n  pointer: /^(ms)?pointer/i\n};\n\nvar fixMethod = function (e) {\n  return e;\n};\n\nvar copyEvent = function (originalEvent) {\n  return fixMethod((0, _events_engine.Event)(originalEvent, originalEvent), originalEvent);\n};\n\nvar isDxEvent = function (e) {\n  return \"dx\" === eventSource(e);\n};\n\nvar isNativeMouseEvent = function (e) {\n  return \"mouse\" === eventSource(e);\n};\n\nvar isNativeTouchEvent = function (e) {\n  return \"touch\" === eventSource(e);\n};\n\nvar eventSource = exports.eventSource = function (_ref) {\n  var type = _ref.type;\n  var result = \"other\";\n  (0, _iterator.each)(EVENT_SOURCES_REGEX, function (key) {\n    if (this.test(type)) {\n      result = key;\n      return false;\n    }\n  });\n  return result;\n};\n\nvar isPointerEvent = exports.isPointerEvent = function (e) {\n  return \"pointer\" === eventSource(e);\n};\n\nvar isMouseEvent = exports.isMouseEvent = function (e) {\n  return isNativeMouseEvent(e) || (isPointerEvent(e) || isDxEvent(e)) && \"mouse\" === e.pointerType;\n};\n\nvar isDxMouseWheelEvent = exports.isDxMouseWheelEvent = function (e) {\n  return e && \"dxmousewheel\" === e.type;\n};\n\nvar isTouchEvent = exports.isTouchEvent = function (e) {\n  return isNativeTouchEvent(e) || (isPointerEvent(e) || isDxEvent(e)) && \"touch\" === e.pointerType;\n};\n\nvar isKeyboardEvent = exports.isKeyboardEvent = function (e) {\n  return \"keyboard\" === eventSource(e);\n};\n\nvar isFakeClickEvent = exports.isFakeClickEvent = function (_ref2) {\n  var screenX = _ref2.screenX,\n      offsetX = _ref2.offsetX,\n      pageX = _ref2.pageX;\n  return 0 === screenX && !offsetX && 0 === pageX;\n};\n\nvar eventData = exports.eventData = function (_ref3) {\n  var pageX = _ref3.pageX,\n      pageY = _ref3.pageY,\n      timeStamp = _ref3.timeStamp;\n  return {\n    x: pageX,\n    y: pageY,\n    time: timeStamp\n  };\n};\n\nvar eventDelta = exports.eventDelta = function (from, to) {\n  return {\n    x: to.x - from.x,\n    y: to.y - from.y,\n    time: to.time - from.time || 1\n  };\n};\n\nvar hasTouches = exports.hasTouches = function (e) {\n  var originalEvent = e.originalEvent,\n      pointers = e.pointers;\n\n  if (isNativeTouchEvent(e)) {\n    return (originalEvent.touches || []).length;\n  }\n\n  if (isDxEvent(e)) {\n    return (pointers || []).length;\n  }\n\n  return 0;\n};\n\nvar skipEvents = false;\n\nvar forceSkipEvents = exports.forceSkipEvents = function () {\n  return skipEvents = true;\n};\n\nvar stopEventsSkipping = exports.stopEventsSkipping = function () {\n  return skipEvents = false;\n};\n\nvar needSkipEvent = exports.needSkipEvent = function (e) {\n  if (skipEvents) {\n    return true;\n  }\n\n  var target = e.target;\n  var $target = (0, _renderer2.default)(target);\n  var touchInInput = $target.is(\"input, textarea, select\");\n\n  if ($target.is(\".dx-skip-gesture-event *, .dx-skip-gesture-event\")) {\n    return true;\n  }\n\n  if (isDxMouseWheelEvent(e)) {\n    var isTextArea = $target.is(\"textarea\") && $target.hasClass(\"dx-texteditor-input\");\n\n    if (isTextArea) {\n      return false;\n    }\n\n    var isContentEditable = target.isContentEditable || target.hasAttribute(\"contenteditable\");\n\n    if (isContentEditable) {\n      return false;\n    }\n\n    var isInputFocused = $target.is(\"input[type='number'], textarea, select\") && $target.is(\":focus\");\n    return isInputFocused;\n  }\n\n  if (isMouseEvent(e)) {\n    return touchInInput || e.which > 1;\n  }\n\n  if (isTouchEvent(e)) {\n    return touchInInput && (0, _selectors.focused)($target);\n  }\n};\n\nvar setEventFixMethod = exports.setEventFixMethod = function (func) {\n  return fixMethod = func;\n};\n\nvar createEvent = exports.createEvent = function (originalEvent, args) {\n  var event = copyEvent(originalEvent);\n  args && (0, _extend.extend)(event, args);\n  return event;\n};\n\nvar fireEvent = exports.fireEvent = function (props) {\n  var originalEvent = props.originalEvent,\n      delegateTarget = props.delegateTarget;\n  var event = createEvent(originalEvent, props);\n\n  _events_engine2.default.trigger(delegateTarget || event.target, event);\n\n  return event;\n};\n\nvar normalizeKeyName = exports.normalizeKeyName = function (_ref4) {\n  var key = _ref4.key,\n      which = _ref4.which;\n  var isKeySupported = !!key;\n  key = isKeySupported ? key : which;\n\n  if (key) {\n    if (isKeySupported) {\n      key = KEY_MAP[key.toLowerCase()] || key;\n    } else {\n      key = LEGACY_KEY_CODES[key] || String.fromCharCode(key);\n    }\n\n    return key;\n  }\n};\n\nvar getChar = exports.getChar = function (_ref5) {\n  var key = _ref5.key,\n      which = _ref5.which;\n  return key || String.fromCharCode(which);\n};\n\nvar addNamespace = exports.addNamespace = _add_namespace2.default;","map":null,"metadata":{},"sourceType":"script"}