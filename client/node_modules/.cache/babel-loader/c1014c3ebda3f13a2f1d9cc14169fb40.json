{"ast":null,"code":"/**\n * PdfBlend.ts class for EJ2-PDF\n */\nimport { PdfColorSpace } from './../enum';\nimport { PdfColor } from './../pdf-color';\nimport { PdfColorBlend } from './pdf-color-blend';\n/**\n * `PdfBlend` Represents the blend color space\n * @private\n */\n\nvar PdfBlend =\n/** @class */\nfunction () {\n  function PdfBlend(count) {\n    //Constants\n\n    /**\n     * precision of the GCD calculations.\n     * @private\n     */\n    this.precision = 1000; //\n  }\n\n  Object.defineProperty(PdfBlend.prototype, \"factors\", {\n    //Properties\n\n    /**\n     * Gets or sets the array of factor to the blend.\n     * @public\n     */\n    get: function () {\n      return this.mFactors;\n    },\n    set: function (value) {\n      if (value == null) {\n        throw new Error('ArgumentNullException : Factors');\n      }\n\n      this.mFactors = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfBlend.prototype, \"positions\", {\n    /**\n     * 'positions' Gets or sets the array of positions\n     * @public\n     */\n    get: function () {\n      return this.mPositions;\n    },\n    set: function (value) {\n      var positionarray = value;\n\n      for (var i = 0; i < positionarray.length; i++) {\n        if (positionarray[i] < 0 || positionarray[i] > 1) {\n          positionarray[i] = 0;\n        }\n      }\n\n      this.mPositions = positionarray;\n      this.mPositions = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfBlend.prototype, \"count\", {\n    /**\n     * Gets the number of elements that specify the blend.\n     * @protected\n     */\n    get: function () {\n      return this.mCount;\n    },\n    enumerable: true,\n    configurable: true\n  }); //Implementation\n\n  /**\n   * Generates a correct color blend.\n   * @param colours The colours.\n   * @param colorSpace The color space.\n   */\n\n  PdfBlend.prototype.generateColorBlend = function (colours, colorSpace) {\n    if (colours == null) {\n      throw new Error('ArgumentNullException : colours');\n    }\n\n    if (this.positions == null) {\n      this.positions = [0];\n    }\n\n    var cBlend = new PdfColorBlend(this.count);\n    var positions = this.positions;\n    var clrs = null;\n\n    if (positions.length === 1) {\n      positions = [3];\n      positions[0] = 0;\n      positions[1] = this.positions[0];\n      positions[2] = 1;\n      /* tslint:disable */\n\n      clrs = new Array(3);\n      clrs[0] = colours[0];\n      clrs[1] = colours[0];\n      clrs[2] = colours[1];\n    } else {\n      var c1 = colours[0];\n      var c2 = colours[1];\n      /* tslint:disable */\n\n      clrs = new Array(this.count);\n      var i = 0;\n      var count = this.count;\n\n      for (i = 0; i < count; ++i) {\n        clrs[i] = this.interpolate(this.mFactors[i], c1, c2, colorSpace);\n      }\n    }\n\n    cBlend.positions = positions;\n    cBlend.colors = clrs;\n    return cBlend;\n  };\n  /**\n   * 'clonePdfBlend' Clones this instance.\n   * @public\n   */\n\n\n  PdfBlend.prototype.clonePdfBlend = function () {\n    var blend = this;\n\n    if (this.mFactors != null) {\n      blend.factors = this.mFactors;\n    }\n\n    if (this.positions != null) {\n      blend.positions = this.positions;\n    }\n\n    return blend;\n  };\n\n  PdfBlend.prototype.gcd = function (u, v) {\n    if (typeof u === 'number' && typeof v === 'number' && typeof v !== 'undefined') {\n      if (u < 0 || u > 1) {\n        throw new Error('ArgumentOutOfRangeException : u');\n      }\n\n      if (v < 0 || v > 1) {\n        throw new Error('ArgumentOutOfRangeException : v');\n      }\n\n      var iU = Math.max(1, u * this.precision);\n      var iV = Math.max(1, v * this.precision);\n      var iResult = this.gcdInt(iU, iV);\n      var result = iResult / this.precision;\n      return result;\n    } else {\n      var values = u;\n\n      if (values == null) {\n        throw new Error('ArgumentNullException : values');\n      }\n\n      if (values.length < 1) {\n        throw new Error('ArgumentException : Not enough values in the array. - values');\n      }\n\n      var gcd = values[0];\n\n      if (values.length > 1) {\n        var count = values.length;\n\n        for (var i = 1; i < count; ++i) {\n          gcd = this.gcd(values[i], gcd);\n\n          if (gcd === 1 / this.precision) {\n            break;\n          }\n        }\n      }\n\n      return gcd;\n    }\n  };\n  /**\n   * Calculate the GCD int of the specified values.\n   * @param u The u.\n   * @param v The v.\n   */\n\n\n  PdfBlend.prototype.gcdInt = function (u, v) {\n    if (u <= 0) {\n      throw new Error('ArgumentOutOfRangeException' + u + 'The arguments cannot be less or equal to zero.');\n    }\n\n    if (v <= 0) {\n      throw new Error('ArgumentOutOfRangeException' + v + 'The arguments cannot be less or equal to zero.');\n    }\n\n    if (u === 1 || v === 1) {\n      return 1;\n    }\n\n    var shift = 0;\n\n    while (this.isEven(u, v)) {\n      ++shift;\n      u >>= 1;\n      v >>= 1;\n    }\n\n    while ((u & 1) <= 0) {\n      u >>= 1;\n    }\n\n    do {\n      while ((v & 1) <= 0) {\n        v >>= 1;\n      }\n\n      if (u > v) {\n        var t = v;\n        v = u;\n        u = t;\n      }\n\n      v = v - u;\n    } while (v !== 0);\n\n    return u << shift;\n  };\n\n  PdfBlend.prototype.isEven = function (arg1, arg2) {\n    if (typeof arg2 === 'number' && typeof arg2 !== 'undefined') {\n      var result = true;\n      result = result && (arg1 & 1) <= 0; //  Is u even?\n\n      result = result && (arg2 & 1) <= 0; //  Is v even?\n\n      return result;\n    } else {\n      return (arg1 & 1) <= 0;\n    }\n  };\n\n  PdfBlend.prototype.interpolate = function (t, color1, color2, colorSpace) {\n    if (color1 instanceof PdfColor) {\n      var color = new PdfColor();\n\n      switch (colorSpace) {\n        case PdfColorSpace.Rgb:\n          var red = this.interpolate(t, color1.red, color2.red);\n          var green = this.interpolate(t, color1.green, color2.green);\n          var blue = this.interpolate(t, color1.blue, color2.blue);\n          color = new PdfColor(red, green, blue);\n          break;\n\n        case PdfColorSpace.GrayScale:\n          var gray = this.interpolate(t, color1.gray, color2.gray);\n          color = new PdfColor(gray);\n          break;\n\n        case PdfColorSpace.Cmyk:\n          var cyan = this.interpolate(t, color1.c, color2.c);\n          var magenta = this.interpolate(t, color1.m, color2.m);\n          var yellow = this.interpolate(t, color1.y, color2.y);\n          var black = this.interpolate(t, color1.k, color2.k);\n          color = new PdfColor(cyan, magenta, yellow, black);\n          break;\n      }\n\n      return color;\n    } else {\n      var t0 = 0;\n      var t1 = 1;\n      var result = 0;\n\n      if (t === t0) {\n        result = color1;\n      } else if (t === t1) {\n        result = color2;\n      } else {\n        result = color1 + (t - t0) * ((color2 - color1) / (t1 - t0));\n      }\n\n      return result;\n    }\n  };\n\n  return PdfBlend;\n}();\n\nexport { PdfBlend };","map":null,"metadata":{},"sourceType":"module"}