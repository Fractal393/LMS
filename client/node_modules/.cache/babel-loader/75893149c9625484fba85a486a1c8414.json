{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { IndentCellRenderer } from './indent-cell-renderer';\n/**\n * ExpandCellRenderer class which responsible for building group expand cell.\n * @hidden\n */\n\nvar ExpandCellRenderer =\n/** @class */\nfunction (_super) {\n  __extends(ExpandCellRenderer, _super);\n\n  function ExpandCellRenderer() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Function to render the expand cell\n   * @param  {Cell} cell\n   * @param  {Object} data\n   * @param  {{ [x: string]: string }} attr\n   * @param {boolean} isExpand\n   */\n\n\n  ExpandCellRenderer.prototype.render = function (cell, data, attr, isExpand) {\n    var node = this.element.cloneNode();\n    node.className = isExpand ? 'e-recordplusexpand' : 'e-recordpluscollapse';\n    node.setAttribute('ej-mappingname', data.field);\n    node.setAttribute('ej-mappingvalue', data.key);\n    node.setAttribute('aria-expanded', isExpand ? 'true' : 'false');\n    node.setAttribute('tabindex', '-1');\n    node.appendChild(this.parent.createElement('div', {\n      className: isExpand ? 'e-icons e-gdiagonaldown e-icon-gdownarrow' : 'e-icons e-gnextforward e-icon-grightarrow'\n    }));\n    return node;\n  };\n\n  return ExpandCellRenderer;\n}(IndentCellRenderer);\n\nexport { ExpandCellRenderer };","map":null,"metadata":{},"sourceType":"module"}