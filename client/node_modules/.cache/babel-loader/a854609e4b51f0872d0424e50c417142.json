{"ast":null,"code":"import { PdfString } from './../../primitives/pdf-string';\nimport { ArabicShapeRenderer } from './rtl/rtl-text-shape';\nimport { PdfTextDirection } from './../enum';\nimport { Bidi } from './rtl/rtl-bidirectional';\n/**\n * `Metrics` of the font.\n * @private\n */\n\nvar RtlRenderer =\n/** @class */\nfunction () {\n  function RtlRenderer() {\n    //region Constants\n    /// Open bracket symbol.\n    /// </summary>\n    this.openBracket = '('; /// <summary>\n    /// Close bracket symbol.\n    /// </summary>\n\n    this.closeBracket = ')'; //#endregion\n  } //#region Constructors\n  /// <summary>\n  /// Initializes a new instance of the <see cref=\"RtlRenderer\"/> class.\n  /// </summary>\n  // public constructor() {\n  // }\n  //#region Public Methods\n  /// <summary>\n  /// Layouts text. Changes blocks position in the RTL text.\n  /// Ligates the text if needed.\n  /// </summary>\n  /// <param name=\"line\">Line of the text.</param>\n  /// <param name=\"font\">Font to be used for string printing.</param>\n  /// <param name=\"rtl\">Font alignment.</param>\n  /// <param name=\"wordSpace\">Indicates whether Word Spacing used or not.</param>\n  /// <returns>Layout string.</returns>\n\n\n  RtlRenderer.prototype.layout = function (line, font, rtl, wordSpace, format) {\n    if (line == null) {\n      throw new Error('ArgumentNullException : line');\n    }\n\n    if (font == null) {\n      throw new Error('ArgumentNullException : font');\n    }\n\n    var result = [];\n\n    if (font.Unicode) {\n      result = this.customLayout(line, rtl, format, font, wordSpace);\n    } else {\n      result = [];\n      result[0] = line;\n    }\n\n    return result;\n  }; /// <summary>\n  /// Layouts a string and splits it by the words and using correct lay outing.\n  /// </summary>\n  /// <param name=\"line\">Text line.</param>\n  /// <param name=\"font\">Font object.</param>\n  /// <param name=\"rtl\">Indicates whether RTL should be applied.</param>\n  /// <param name=\"wordSpace\">Indicates whether word spacing is used.</param>\n  /// <returns>Array of words if converted, null otherwise.</returns>\n\n\n  RtlRenderer.prototype.splitLayout = function (line, font, rtl, wordSpace, format) {\n    if (line == null) {\n      throw new Error('ArgumentNullException : line');\n    }\n\n    if (font == null) {\n      throw new Error('ArgumentNullException : font');\n    }\n\n    var words = [];\n    var system = false;\n\n    if (!system || words == null) {\n      words = this.customSplitLayout(line, font, rtl, wordSpace, format);\n    }\n\n    return words;\n  }; //#endregion\n  //#region Implementation\n  // private isEnglish( word : string) : boolean\n  // {\n  //     let c : string = (word.length > 0) ? word[0] : '';\n  //     return (c >= '0' && c < 'Ã¿');\n  // }\n  // private keepOrder( words : string, startIndex : number, count: number, result : string[], resultIndex : number) : void\n  // {\n  //     for (let i : number = 0, ri = resultIndex - count + 1; i < count; ++i, ++ri) {\n  //         result[ri] = words[i + startIndex];\n  //     }\n  // }\n  /// <summary>\n  /// Uses system API to layout the text.\n  /// </summary>\n  /// <param name=\"line\">Line of the text to be layouted.</param>\n  /// <param name=\"font\">Font which is used for text printing.</param>\n  /// <param name=\"rtl\">Indicates whether we use RTL or RTL lay outing of the text container.</param>\n  /// <returns>Layout string.</returns>\n\n  /* tslint:disable-next-line:max-line-length */\n\n\n  RtlRenderer.prototype.getGlyphIndex = function (line, font, rtl,\n  /*out*/\n  glyphs, custom) {\n    var success = true;\n    var fail = false;\n\n    if (line == null) {\n      throw new Error('ArgumentNullException : line');\n    }\n\n    if (font == null) {\n      throw new Error('ArgumentNullException : font');\n    }\n\n    glyphs = null;\n\n    if (line.length === 0) {\n      return {\n        success: fail,\n        glyphs: glyphs\n      };\n    }\n\n    var renderer = new ArabicShapeRenderer();\n    var text = renderer.shape(line, 0);\n    var internalFont = font.fontInternal;\n    var ttfReader = internalFont.ttfReader;\n    glyphs = new Uint16Array(text.length);\n    var i = 0;\n\n    for (var k = 0, len = text.length; k < len; k++) {\n      var ch = text[k];\n      var glyphInfo = ttfReader.getGlyph(ch);\n\n      if (glyphInfo !== null && typeof glyphInfo !== 'undefined') {\n        glyphs[i++] = glyphInfo.index;\n      }\n    }\n\n    return {\n      success: success,\n      glyphs: glyphs\n    };\n  };\n  /* tslint:disable-next-line:max-line-length */\n\n\n  RtlRenderer.prototype.customLayout = function (line, rtl, format, font, wordSpace) {\n    if (wordSpace === null || typeof wordSpace === 'undefined') {\n      if (line == null) {\n        throw new Error('ArgumentNullException : line');\n      }\n\n      var result = null; //bidirectional order.\n\n      if (format !== null && format.textDirection !== PdfTextDirection.None) {\n        var bidi = new Bidi();\n        result = bidi.getLogicalToVisualString(line, rtl);\n      }\n\n      return result;\n    } else {\n      if (line == null) {\n        throw new Error('ArgumentNullException : line');\n      }\n\n      if (font == null) {\n        throw new Error('ArgumentNullException : font');\n      }\n\n      var layouted = null;\n\n      if (format !== null && format.textDirection !== PdfTextDirection.None) {\n        var renderer = new ArabicShapeRenderer();\n        var txt = renderer.shape(line, 0);\n        layouted = this.customLayout(txt, rtl, format);\n      } // else {\n      //     layouted = this.customLayout(line, rtl, format);\n      // }\n      // We have unicode font, but from the file.        \n\n\n      var result = []; // Split the text by words if word spacing is not default.\n\n      if (wordSpace) {\n        var words = layouted.split('');\n        var count = words.length;\n\n        for (var i = 0; i < count; i++) {\n          words[i] = this.addChars(font, words[i]);\n        }\n\n        result = words;\n      } else {\n        result = [];\n        result[0] = this.addChars(font, layouted);\n      }\n\n      return result;\n    }\n  }; /// <summary>\n  /// Add information about used glyphs to the font.\n  /// </summary>\n  /// <param name=\"font\">Font used for text rendering.</param>\n  /// <param name=\"glyphs\">Array of used glyphs.</param>\n  /// <returns>String in the form to be written to the file.</returns>\n\n\n  RtlRenderer.prototype.addChars = function (font, glyphs) {\n    var line = glyphs;\n\n    if (font == null) {\n      throw new Error('ArgumentNullException : font');\n    }\n\n    if (line == null) {\n      throw new Error('ArgumentNullException : line');\n    }\n\n    var text = line;\n    var internalFont = font.fontInternal;\n    var ttfReader = internalFont.ttfReader;\n    font.setSymbols(text); // Reconvert string according to unicode standard.\n\n    text = ttfReader.convertString(text);\n    var bytes = PdfString.toUnicodeArray(text, false);\n    text = PdfString.byteToString(bytes);\n    return text; // else {\n    //     if (font == null) {\n    //         throw new Error('ArgumentNullException : font');\n    //     }\n    //     if (glyphs == null) {\n    //         throw new Error('ArgumentNullException : glyphs');\n    //     }\n    //     // Mark the chars as used.\n    //     let text : string = '';\n    //     font.setSymbols(glyphs);\n    //     // Create string from the glyphs.\n    //     \n    //     let chars : string[] = [];\n    //     for (let i : number = 0; i < glyphs.length; i++) {\n    //         chars[i] = glyphs[i].toString();\n    //     }\n    //     for (let j : number = 0 ; j < chars.length; j++) {\n    //         text = text + chars[j];\n    //     }\n    //     let bytes : number[] = PdfString.toUnicodeArray(text, false);\n    //     text = PdfString.byteToString(bytes);\n    //     return text;\n    // }\n  }; /// <summary>\n  /// Layouts a string and splits it by the words by using custom lay outing.\n  /// </summary>\n  /// <param name=\"line\">Text line.</param>\n  /// <param name=\"font\">Font object.</param>\n  /// <param name=\"rtl\">Indicates whether RTL should be applied.</param>\n  /// <param name=\"wordSpace\">Indicates whether word spacing is used.</param>\n  /// <returns>Array of words if converted, null otherwise.</returns>\n\n  /* tslint:disable-next-line:max-line-length */\n\n\n  RtlRenderer.prototype.customSplitLayout = function (line, font, rtl, wordSpace, format) {\n    if (line == null) {\n      throw new Error('ArgumentNullException : line');\n    }\n\n    if (font == null) {\n      throw new Error('ArgumentNullException : font');\n    }\n\n    var reversedLine = this.customLayout(line, rtl, format);\n    var words = reversedLine.split('');\n    return words;\n  };\n\n  return RtlRenderer;\n}();\n\nexport { RtlRenderer };","map":null,"metadata":{},"sourceType":"module"}