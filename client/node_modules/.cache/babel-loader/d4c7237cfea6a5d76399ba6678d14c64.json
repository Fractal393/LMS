{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}; /// <reference path='../calendar/calendar-model.d.ts'/>\n\n\nimport { Property, EventHandler, Internationalization, NotifyPropertyChanges, detach, getUniqueID } from '@syncfusion/ej2-base';\nimport { KeyboardEvents, Event, Browser, L10n, ChildProperty } from '@syncfusion/ej2-base';\nimport { addClass, createElement, remove, closest, select, prepend, removeClass, attributes, Collection } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined, isUndefined, formatUnit, setValue, rippleEffect, merge, extend, isBlazor } from '@syncfusion/ej2-base';\nimport { CalendarBase } from '../calendar/calendar';\nimport { Popup } from '@syncfusion/ej2-popups';\nimport { Button } from '@syncfusion/ej2-buttons';\nimport { Input } from '@syncfusion/ej2-inputs';\nimport { ListBase } from '@syncfusion/ej2-lists';\nvar DATERANGEWRAPPER = 'e-date-range-wrapper';\nvar INPUTCONTAINER = 'e-input-group';\nvar DATERANGEICON = 'e-input-group-icon e-range-icon e-icons';\nvar POPUP = 'e-popup';\nvar LEFTCALENDER = 'e-left-calendar';\nvar RIGHTCALENDER = 'e-right-calendar';\nvar LEFTCONTAINER = 'e-left-container';\nvar RIGHTCONTAINER = 'e-right-container';\nvar ROOT = 'e-daterangepicker';\nvar LIBRARY = 'e-lib';\nvar CONTROL = 'e-control';\nvar ERROR = 'e-error';\nvar ACTIVE = 'e-active';\nvar STARTENDCONTAINER = 'e-start-end';\nvar STARTDATE = 'e-start-date';\nvar ENDDATE = 'e-end-date';\nvar STARTBUTTON = 'e-start-btn';\nvar INPUTFOCUS = 'e-input-focus';\nvar ENDBUTTON = 'e-end-btn';\nvar RANGEHOVER = 'e-range-hover';\nvar OTHERMONTH = 'e-other-month';\nvar STARTLABEL = 'e-start-label';\nvar ENDLABEL = 'e-end-label';\nvar DISABLED = 'e-disabled';\nvar SELECTED = 'e-selected';\nvar CALENDAR = 'e-calendar';\nvar NEXTICON = 'e-next';\nvar PREVICON = 'e-prev';\nvar HEADER = 'e-header';\nvar TITLE = 'e-title';\nvar ICONCONTAINER = 'e-icon-container';\nvar RANGECONTAINER = 'e-date-range-container';\nvar RANGEHEADER = 'e-range-header';\nvar PRESETS = 'e-presets';\nvar FOOTER = 'e-footer';\nvar RANGEBORDER = 'e-range-border';\nvar TODAY = 'e-today';\nvar FOCUSDATE = 'e-focused-date';\nvar CONTENT = 'e-content';\nvar DAYSPAN = 'e-day-span';\nvar WEEKNUMBER = 'e-week-number';\nvar DATEDISABLED = 'e-date-disabled';\nvar ICONDISABLED = 'e-icon-disabled';\nvar CALENDARCONTAINER = 'e-calendar-container';\nvar SEPARATOR = 'e-separator';\nvar APPLY = 'e-apply';\nvar CANCEL = 'e-cancel';\nvar DEVICE = 'e-device';\nvar OVERLAY = 'e-overlay';\nvar CHANGEICON = 'e-change-icon e-icons';\nvar LISTCLASS = 'e-list-item';\nvar RTL = 'e-rtl';\nvar HOVER = 'e-hover';\nvar OVERFLOW = 'e-range-overflow';\nvar OFFSETVALUE = 4;\nvar PRIMARY = 'e-primary';\nvar FLAT = 'e-flat';\nvar CSS = 'e-css';\nvar ZOOMIN = 'e-zoomin';\nvar NONEDITABLE = 'e-non-edit';\nvar DAYHEADERLONG = 'e-daterange-day-header-lg';\nvar HIDDENELEMENT = 'e-daterange-hidden';\nvar wrapperAttr = ['title', 'class', 'style'];\n\nvar Presets =\n/** @class */\nfunction (_super) {\n  __extends(Presets, _super);\n\n  function Presets() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property()], Presets.prototype, \"label\", void 0);\n\n  __decorate([Property()], Presets.prototype, \"start\", void 0);\n\n  __decorate([Property()], Presets.prototype, \"end\", void 0);\n\n  return Presets;\n}(ChildProperty);\n\nexport { Presets };\n/**\n * Represents the DateRangePicker component that allows user to select the date range from the calendar\n * or entering the range through the input element.\n * ```html\n * <input id=\"daterangepicker\"/>\n * ```\n * ```typescript\n * <script>\n *   var dateRangePickerObj = new DateRangePicker({ startDate: new Date(\"05/07/2017\"), endDate: new Date(\"10/07/2017\") });\n *   dateRangePickerObj.appendTo(\"#daterangepicker\");\n * </script>\n * ```\n */\n\nvar DateRangePicker =\n/** @class */\nfunction (_super) {\n  __extends(DateRangePicker, _super);\n  /**\n   * Constructor for creating the widget\n   */\n\n\n  function DateRangePicker(options, element) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.isCustomRange = false;\n    _this.isCustomWindow = false;\n    _this.presetsItem = [];\n    _this.liCollections = [];\n    _this.previousEleValue = '';\n    _this.isKeyPopup = false;\n    _this.dateDisabled = false;\n    _this.isRangeIconClicked = false;\n    _this.isMaxDaysClicked = false;\n    _this.disabledDays = [];\n    _this.preventBlur = false;\n    _this.preventFocus = false;\n    _this.invalidValueString = null;\n    _this.dateRangeOptions = options;\n    return _this;\n  }\n  /**\n   * To Initialize the control rendering.\n   * @return void\n   * @private\n   */\n\n\n  DateRangePicker.prototype.render = function () {\n    this.initialize();\n    this.setProperties({\n      startDate: this.startValue\n    }, true);\n    this.setProperties({\n      endDate: this.endValue\n    }, true);\n    this.setModelValue();\n    this.setDataAttribute(false);\n    this.renderComplete();\n  };\n  /**\n   * Initialize the event handler\n   * @returns void\n   * @private\n   */\n\n\n  DateRangePicker.prototype.preRender = function () {\n    this.keyInputConfigs = {\n      altDownArrow: 'alt+downarrow',\n      escape: 'escape',\n      enter: 'enter',\n      tab: 'tab',\n      altRightArrow: 'alt+rightarrow',\n      altLeftArrow: 'alt+leftarrow',\n      moveUp: 'uparrow',\n      moveDown: 'downarrow',\n      spacebar: 'space'\n    };\n    this.defaultConstant = {\n      placeholder: this.placeholder,\n      startLabel: 'Start Date',\n      endLabel: 'End Date',\n      customRange: 'Custom Range',\n      applyText: 'Apply',\n      cancelText: 'Cancel',\n      selectedDays: 'Selected Days',\n      days: 'days'\n    };\n    /**\n     * Mobile View\n     */\n\n    this.isMobile = window.matchMedia('(max-width:550px)').matches;\n    this.inputElement = this.element;\n    this.angularTag = null;\n\n    if (this.element.tagName === 'EJS-DATERANGEPICKER') {\n      this.angularTag = this.element.tagName;\n      this.inputElement = this.createElement('input');\n      this.element.appendChild(this.inputElement);\n    }\n\n    this.cloneElement = this.element.cloneNode(true);\n    removeClass([this.cloneElement], [ROOT, CONTROL, LIBRARY]);\n    this.updateHtmlAttributeToElement();\n\n    if (this.element.getAttribute('id')) {\n      if (this.angularTag !== null) {\n        this.inputElement.id = this.element.getAttribute('id') + '_input';\n      }\n    } else {\n      this.element.id = getUniqueID('ej2-datetimepicker');\n\n      if (this.angularTag !== null) {\n        attributes(this.inputElement, {\n          'id': this.element.id + '_input'\n        });\n      }\n    }\n\n    this.checkInvalidRange(this.value);\n\n    if (!this.invalidValueString && typeof this.value === 'string') {\n      var rangeArray = this.value.split(' ' + this.separator + ' ');\n      this.value = [new Date(rangeArray[0]), new Date(rangeArray[1])];\n    }\n\n    this.initProperty();\n    this.tabIndex = this.element.hasAttribute('tabindex') ? this.element.getAttribute('tabindex') : '0';\n    this.element.removeAttribute('tabindex');\n\n    _super.prototype.preRender.call(this);\n\n    this.navNextFunction = this.navNextMonth.bind(this);\n    this.navPrevFunction = this.navPrevMonth.bind(this);\n    this.deviceNavNextFunction = this.deviceNavNext.bind(this);\n    this.deviceNavPrevFunction = this.deviceNavPrevious.bind(this);\n    this.initStartDate = this.checkDateValue(this.startValue);\n    this.initEndDate = this.checkDateValue(this.endValue);\n    this.formElement = closest(this.element, 'form');\n  };\n\n  ;\n\n  DateRangePicker.prototype.updateValue = function () {\n    var dateOptions = {\n      format: this.formatString,\n      type: 'date',\n      skeleton: isBlazor() ? 'd' : 'yMd'\n    };\n\n    if (this.value && this.value.length > 0) {\n      if (this.value[0] instanceof Date && !isNaN(+this.value[0])) {\n        this.setProperties({\n          startDate: this.value[0]\n        }, true);\n        this.startValue = this.value[0];\n      } else if (typeof this.value[0] === 'string') {\n        if (+this.value[0] === 0 || isNaN(+new Date(this.checkValue(this.value[0])))) {\n          this.startValue = null;\n          this.setValue();\n        } else {\n          this.setProperties({\n            startDate: new Date(this.checkValue(this.value[0]))\n          }, true);\n          this.startValue = new Date(this.checkValue(this.value[0]));\n        }\n      } else {\n        this.startValue = null;\n        this.setValue();\n      }\n\n      if (this.value[1] instanceof Date && !isNaN(+this.value[1])) {\n        this.setProperties({\n          endDate: this.value[1]\n        }, true);\n        this.endValue = this.value[1];\n      } else if (typeof this.value[1] === 'string') {\n        if (+this.value[0] === 0 || isNaN(+new Date(this.checkValue(this.value[0])))) {\n          this.setProperties({\n            endDate: null\n          }, true);\n          this.endValue = null;\n          this.setValue();\n        } else {\n          this.setProperties({\n            endDate: new Date(this.checkValue(this.value[1]))\n          }, true);\n          this.endValue = new Date(this.checkValue(this.value[1]));\n          this.setValue();\n        }\n      } else {\n        this.setProperties({\n          endDate: null\n        }, true);\n        this.endValue = null;\n        this.setValue();\n      }\n    } else if (this.value && this.value.start) {\n      if (this.value.start instanceof Date && !isNaN(+this.value.start)) {\n        this.setProperties({\n          startDate: this.value.start\n        }, true);\n        this.startValue = this.value.start;\n      } else if (typeof this.value.start === 'string') {\n        this.setProperties({\n          startDate: new Date(this.checkValue(this.value.start))\n        }, true);\n        this.startValue = new Date(this.checkValue(this.value.start));\n      } else {\n        this.startValue = null;\n        this.setValue();\n      }\n\n      if (this.value.end instanceof Date && !isNaN(+this.value.end)) {\n        this.setProperties({\n          endDate: this.value.end\n        }, true);\n        this.endValue = this.value.end;\n      } else if (typeof this.value.end === 'string') {\n        this.setProperties({\n          endDate: new Date(this.checkValue(this.value.end))\n        }, true);\n        this.endValue = new Date(this.checkValue(this.value.end));\n        this.setValue();\n      } else {\n        this.setProperties({\n          endDate: null\n        }, true);\n        this.endValue = null;\n        this.setValue();\n      }\n    } else if (isNullOrUndefined(this.value)) {\n      this.endValue = this.checkDateValue(new Date(this.checkValue(this.endDate)));\n      this.startValue = this.checkDateValue(new Date(this.checkValue(this.startDate)));\n      this.setValue();\n    }\n  };\n\n  DateRangePicker.prototype.initProperty = function () {\n    this.globalize = new Internationalization(this.locale);\n    this.checkFormat();\n    this.checkView();\n\n    if (isNullOrUndefined(this.firstDayOfWeek) || this.firstDayOfWeek > 6 || this.firstDayOfWeek < 0) {\n      this.setProperties({\n        firstDayOfWeek: this.globalize.getFirstDayOfWeek()\n      }, true);\n    }\n\n    this.updateValue();\n  };\n\n  DateRangePicker.prototype.checkFormat = function () {\n    if (this.format) {\n      if (typeof this.format === 'string') {\n        this.formatString = this.format;\n      } else if (this.format.skeleton !== '' && !isNullOrUndefined(this.format.skeleton)) {\n        var skeletonString = this.format.skeleton;\n        this.formatString = this.globalize.getDatePattern({\n          skeleton: skeletonString,\n          type: 'date'\n        });\n      } else {\n        this.formatString = null;\n      }\n    } else {\n      this.formatString = null;\n    }\n  };\n\n  DateRangePicker.prototype.initialize = function () {\n    if (this.angularTag !== null) {\n      this.validationAttribute(this.element, this.inputElement);\n    }\n\n    this.checkHtmlAttributes(false);\n    merge(this.defaultKeyConfigs, {\n      shiftTab: 'shift+tab'\n    });\n    var start = this.checkDateValue(new Date(this.checkValue(this.startValue)));\n    this.setProperties({\n      startDate: start\n    }, true); // persist the value propeerty.\n\n    this.setProperties({\n      endValue: this.checkDateValue(new Date(this.checkValue(this.endValue)))\n    }, true);\n    this.setValue();\n    this.setProperties({\n      min: this.checkDateValue(new Date(this.checkValue(this.min)))\n    }, true);\n    this.setProperties({\n      max: this.checkDateValue(new Date(this.checkValue(this.max)))\n    }, true);\n    this.l10n = new L10n('daterangepicker', this.defaultConstant, this.locale);\n    this.l10n.setLocale(this.locale);\n    this.setProperties({\n      placeholder: this.placeholder || this.l10n.getConstant('placeholder')\n    }, true);\n    this.processPresets();\n    this.createInput();\n    this.updateHtmlAttributeToWrapper();\n    this.setRangeAllowEdit();\n    this.bindEvents();\n  };\n\n  DateRangePicker.prototype.setDataAttribute = function (isDynamic) {\n    var attributes = {};\n\n    if (!isDynamic) {\n      for (var i = 0; i < this.element.attributes.length; i++) {\n        attributes[this.element.attributes[i].name] = this.element.getAttribute(this.element.attributes[i].name);\n      }\n    } else {\n      attributes = this.htmlAttributes;\n    }\n\n    for (var _i = 0, _a = Object.keys(attributes); _i < _a.length; _i++) {\n      var pro = _a[_i];\n\n      if (pro.indexOf('data') === 0) {\n        this.firstHiddenChild.setAttribute(pro, attributes[pro]);\n        this.secondHiddenChild.setAttribute(pro, attributes[pro]);\n      }\n    }\n  };\n\n  DateRangePicker.prototype.setRangeAllowEdit = function () {\n    if (this.allowEdit) {\n      if (!this.readonly) {\n        this.inputElement.removeAttribute('readonly');\n      }\n    } else {\n      attributes(this.inputElement, {\n        'readonly': ''\n      });\n    }\n\n    this.updateClearIconState();\n  };\n\n  DateRangePicker.prototype.updateClearIconState = function () {\n    if (!this.allowEdit && this.inputWrapper && !this.readonly) {\n      if (this.inputElement.value === '') {\n        removeClass([this.inputWrapper.container], [NONEDITABLE]);\n      } else {\n        addClass([this.inputWrapper.container], [NONEDITABLE]);\n      }\n    } else if (this.inputWrapper) {\n      removeClass([this.inputWrapper.container], [NONEDITABLE]);\n    }\n  };\n\n  DateRangePicker.prototype.validationAttribute = function (element, input) {\n    var name = element.getAttribute('name') ? element.getAttribute('name') : element.getAttribute('id');\n    input.setAttribute('name', name);\n    element.removeAttribute('name');\n    var attributes = ['required', 'aria-required', 'form'];\n\n    for (var i = 0; i < attributes.length; i++) {\n      if (isNullOrUndefined(element.getAttribute(attributes[i]))) {\n        continue;\n      }\n\n      var attr = element.getAttribute(attributes[i]);\n      input.setAttribute(attributes[i], attr);\n      element.removeAttribute(attributes[i]);\n    }\n  };\n\n  DateRangePicker.prototype.updateHtmlAttributeToWrapper = function () {\n    if (!isNullOrUndefined(this.htmlAttributes)) {\n      for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {\n        var key = _a[_i];\n\n        if (wrapperAttr.indexOf(key) > -1) {\n          if (key === 'class') {\n            var updatedClassValue = this.htmlAttributes[key].replace(/\\s+/g, ' ').trim();\n\n            if (updatedClassValue !== '') {\n              addClass([this.inputWrapper.container], updatedClassValue.split(' '));\n            }\n          } else if (key === 'style') {\n            var dateRangeStyle = this.inputWrapper.container.getAttribute(key);\n            dateRangeStyle = !isNullOrUndefined(dateRangeStyle) ? dateRangeStyle + this.htmlAttributes[key] : this.htmlAttributes[key];\n            this.inputWrapper.container.setAttribute(key, dateRangeStyle);\n          } else {\n            this.inputWrapper.container.setAttribute(key, this.htmlAttributes[key]);\n          }\n        }\n      }\n    }\n  };\n\n  DateRangePicker.prototype.updateHtmlAttributeToElement = function () {\n    if (!isNullOrUndefined(this.htmlAttributes)) {\n      for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {\n        var key = _a[_i];\n\n        if (wrapperAttr.indexOf(key) < 0) {\n          this.inputElement.setAttribute(key, this.htmlAttributes[key]);\n        }\n      }\n    }\n  };\n\n  DateRangePicker.prototype.updateCssClass = function (cssNewClass, cssOldClass) {\n    if (!isNullOrUndefined(cssOldClass)) {\n      cssOldClass = cssOldClass.replace(/\\s+/g, ' ').trim();\n    }\n\n    if (!isNullOrUndefined(cssNewClass)) {\n      cssNewClass = cssNewClass.replace(/\\s+/g, ' ').trim();\n    }\n\n    Input.setCssClass(cssNewClass, [this.inputWrapper.container], cssOldClass);\n\n    if (this.popupWrapper) {\n      Input.setCssClass(cssNewClass, [this.popupWrapper], cssOldClass);\n    }\n  };\n\n  DateRangePicker.prototype.processPresets = function () {\n    this.presetsItem = [];\n    var i = 0;\n\n    if (!isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label)) {\n      for (var _i = 0, _a = this.presets; _i < _a.length; _i++) {\n        var range = _a[_i];\n        var id = range.label.replace(/\\s+/g, '') + '_' + ++i;\n\n        if (typeof range.end === 'string') {\n          this.presetsItem.push({\n            id: id,\n            text: range.label,\n            end: new Date(this.checkValue(range.end)),\n            start: new Date(this.checkValue(range.start))\n          });\n        } else {\n          this.presetsItem.push({\n            id: id,\n            text: range.label,\n            start: range.start,\n            end: range.end\n          });\n        }\n      }\n\n      var startDate = isNullOrUndefined(this.startValue) ? null : new Date(+this.startValue);\n      var endDate = isNullOrUndefined(this.endValue) ? null : new Date(+this.endValue);\n      this.presetsItem.push({\n        id: 'custom_range',\n        text: this.l10n.getConstant('customRange'),\n        start: startDate,\n        end: endDate\n      });\n\n      if (!isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue)) {\n        this.isCustomRange = true;\n        this.activeIndex = this.presetsItem.length - 1;\n      }\n    }\n  };\n\n  DateRangePicker.prototype.bindEvents = function () {\n    if (this.enabled) {\n      EventHandler.add(this.inputWrapper.buttons[0], 'mousedown', this.rangeIconHandler, this);\n      EventHandler.add(this.inputElement, 'focus', this.inputFocusHandler, this);\n      EventHandler.add(this.inputElement, 'blur', this.inputBlurHandler, this);\n      EventHandler.add(this.inputElement, 'change', this.inputChangeHandler, this);\n\n      if (this.showClearButton && this.inputWrapper.clearButton) {\n        EventHandler.add(this.inputWrapper.clearButton, 'mousedown', this.resetHandler, this);\n      }\n\n      if (!this.isMobile) {\n        this.keyInputConfigs = extend(this.keyInputConfigs, this.keyConfigs);\n        this.inputKeyboardModule = new KeyboardEvents(this.inputElement, {\n          eventName: 'keydown',\n          keyAction: this.inputHandler.bind(this),\n          keyConfigs: this.keyInputConfigs\n        });\n      }\n\n      if (this.formElement) {\n        EventHandler.add(this.formElement, 'reset', this.formResetHandler, this);\n      }\n\n      this.inputElement.setAttribute('tabindex', this.tabIndex);\n    } else {\n      EventHandler.remove(this.inputWrapper.buttons[0], 'mousedown', this.rangeIconHandler);\n      EventHandler.remove(this.inputElement, 'blur', this.inputBlurHandler);\n      EventHandler.remove(this.inputElement, 'focus', this.inputFocusHandler);\n      EventHandler.remove(this.inputElement, 'change', this.inputChangeHandler);\n\n      if (this.showClearButton && this.inputWrapper.clearButton) {\n        EventHandler.remove(this.inputWrapper.clearButton, 'mousedown touchstart', this.resetHandler);\n      }\n\n      if (!this.isMobile) {\n        if (!isNullOrUndefined(this.inputKeyboardModule)) {\n          this.inputKeyboardModule.destroy();\n        }\n      }\n\n      if (this.formElement) {\n        EventHandler.remove(this.formElement, 'reset', this.formResetHandler);\n      }\n\n      this.inputElement.tabIndex = -1;\n    }\n  };\n\n  DateRangePicker.prototype.updateHiddenInput = function () {\n    if (this.firstHiddenChild && this.secondHiddenChild) {\n      var format = {\n        type: 'datetime',\n        skeleton: isBlazor() ? 'd' : 'yMd'\n      };\n\n      if (typeof this.startDate === 'string') {\n        this.startDate = this.globalize.parseDate(this.startDate, format);\n      }\n\n      if (typeof this.endDate === 'string') {\n        this.endDate = this.globalize.parseDate(this.endDate, format);\n      }\n\n      this.firstHiddenChild.value = this.startDate && this.globalize.formatDate(this.startDate, format) || this.inputElement.value;\n      this.secondHiddenChild.value = this.endDate && this.globalize.formatDate(this.endDate, format) || this.inputElement.value;\n      this.dispatchEvent(this.firstHiddenChild, 'focusout');\n      this.dispatchEvent(this.firstHiddenChild, 'change');\n    }\n  };\n\n  DateRangePicker.prototype.inputChangeHandler = function (e) {\n    e.stopPropagation();\n    this.updateHiddenInput();\n  };\n\n  DateRangePicker.prototype.bindClearEvent = function () {\n    if (this.showClearButton && this.inputWrapper.clearButton) {\n      EventHandler.add(this.inputWrapper.clearButton, 'mousedown', this.resetHandler, this);\n    }\n  };\n\n  DateRangePicker.prototype.resetHandler = function (e) {\n    this.valueType = this.value;\n    e.preventDefault();\n    this.clear();\n    var clearedArgs = {\n      event: e\n    };\n    this.setProperties({\n      endDate: this.checkDateValue(this.endValue)\n    }, true);\n    this.setProperties({\n      startDate: this.checkDateValue(this.startValue)\n    }, true);\n    this.trigger('cleared', clearedArgs);\n    this.changeTrigger(e);\n    this.clearRange();\n    this.hide(e);\n  };\n\n  DateRangePicker.prototype.restoreValue = function () {\n    this.previousEleValue = this.inputElement.value;\n    this.previousStartValue = this.startValue;\n    this.previousEndValue = this.endValue;\n    this.valueType = null;\n    this.initStartDate = this.checkDateValue(this.startValue);\n    this.initEndDate = this.checkDateValue(this.endValue);\n    this.setValue();\n    this.setModelValue();\n  };\n\n  DateRangePicker.prototype.formResetHandler = function (e) {\n    if (this.formElement && e.target === this.formElement && !this.inputElement.disabled) {\n      var val = this.inputElement.getAttribute('value');\n\n      if (!isNullOrUndefined(this.startCopy)) {\n        if (!isNullOrUndefined(this.value) && !isNullOrUndefined(this.value.start)) {\n          this.setProperties({\n            value: {\n              start: this.startCopy,\n              end: this.endCopy\n            }\n          }, true);\n          this.startValue = this.value.start;\n          this.endValue = this.value.end;\n        } else {\n          this.setProperties({\n            value: [this.startCopy, this.endCopy]\n          }, true);\n          this.startValue = this.value[0];\n          this.endValue = this.value[1];\n        }\n\n        this.setProperties({\n          startDate: this.startValue,\n          endDate: this.endValue\n        }, true);\n      } else {\n        this.setProperties({\n          value: null,\n          startDate: null,\n          endDate: null\n        }, true);\n        this.startValue = this.endValue = null;\n      }\n\n      if (this.element.tagName === 'EJS-DATERANGEPICKER') {\n        this.setProperties({\n          value: null,\n          startDate: null,\n          endDate: null\n        }, true);\n        val = '';\n        this.startValue = this.endValue = null;\n        this.inputElement.setAttribute('value', '');\n      }\n\n      this.restoreValue();\n\n      if (this.inputElement) {\n        Input.setValue(val, this.inputElement, this.floatLabelType, this.showClearButton);\n        this.errorClass();\n      }\n    }\n  };\n\n  DateRangePicker.prototype.clear = function () {\n    if (this.startValue !== null) {\n      this.startValue = null;\n    }\n\n    if (this.endValue !== null) {\n      this.endValue = null;\n    }\n\n    if (this.value && this.value.start) {\n      this.setProperties({\n        value: {\n          start: null,\n          end: null\n        }\n      }, true);\n    }\n\n    if (this.value !== null && this.value.length > 0) {\n      this.setProperties({\n        value: null\n      }, true);\n    }\n\n    Input.setValue('', this.inputElement, this.floatLabelType, this.showClearButton);\n\n    if (!isNullOrUndefined(this.applyButton)) {\n      this.applyButton.disabled = this.applyButton.element.disabled = true;\n    }\n\n    this.removeSelection();\n  };\n\n  DateRangePicker.prototype.rangeIconHandler = function (e) {\n    if (this.isMobile) {\n      this.inputElement.setAttribute('readonly', '');\n    }\n\n    e.preventDefault();\n    this.targetElement = null;\n\n    if (this.isPopupOpen() && document.body.contains(this.popupObj.element)) {\n      this.applyFunction(e);\n    } else {\n      this.isRangeIconClicked = true;\n      this.inputWrapper.container.children[0].focus();\n      this.show(null, e);\n\n      if (!this.isMobile) {\n        if (!isNullOrUndefined(this.leftCalendar)) {\n          this.isRangeIconClicked = false;\n          this.calendarFocus();\n          this.isRangeIconClicked = true;\n        }\n      }\n\n      addClass([this.inputWrapper.container], [INPUTFOCUS]);\n    }\n  };\n\n  DateRangePicker.prototype.checkHtmlAttributes = function (isDynamic) {\n    this.globalize = new Internationalization(this.locale);\n    var attributes = isDynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ['startDate', 'endDate', 'minDays', 'maxDays', 'min', 'max', 'disabled', 'readonly', 'style', 'name', 'placeholder', 'type', 'value'];\n    var format = {\n      format: this.formatString,\n      type: 'date',\n      skeleton: isBlazor() ? 'd' : 'yMd'\n    };\n\n    for (var _i = 0, attributes_1 = attributes; _i < attributes_1.length; _i++) {\n      var prop = attributes_1[_i];\n\n      if (!isNullOrUndefined(this.inputElement.getAttribute(prop))) {\n        switch (prop) {\n          case 'disabled':\n            // tslint:disable-next-line\n            if (isNullOrUndefined(this.dateRangeOptions) || this.dateRangeOptions['enabled'] === undefined || isDynamic) {\n              var disabled = this.inputElement.getAttribute(prop) === 'disabled' || this.inputElement.getAttribute(prop) === '' || this.inputElement.getAttribute(prop) === 'true' ? true : false;\n              this.setProperties({\n                enabled: !disabled\n              }, !isDynamic);\n            }\n\n            break;\n\n          case 'readonly':\n            // tslint:disable-next-line\n            if (isNullOrUndefined(this.dateRangeOptions) || this.dateRangeOptions['readonly'] === undefined || isDynamic) {\n              var readonly = this.inputElement.getAttribute(prop) === 'readonly' || this.inputElement.getAttribute(prop) === 'true' || this.inputElement.getAttribute(prop) === '' ? true : false;\n              this.setProperties({\n                readonly: readonly\n              }, !isDynamic);\n            }\n\n            break;\n\n          case 'placeholder':\n            // tslint:disable-next-line\n            if (isNullOrUndefined(this.dateRangeOptions) || this.dateRangeOptions['placeholder'] === undefined || isDynamic) {\n              this.setProperties({\n                placeholder: this.inputElement.getAttribute(prop)\n              }, !isDynamic);\n            }\n\n            break;\n\n          case 'value':\n            // tslint:disable-next-line\n            if (isNullOrUndefined(this.dateRangeOptions) || this.dateRangeOptions['value'] === undefined || isDynamic) {\n              var value = this.inputElement.getAttribute(prop);\n              this.setProperties(setValue(prop, value, {}), !isDynamic);\n            }\n\n            break;\n\n          case 'style':\n            this.inputElement.setAttribute('style', '' + this.inputElement.getAttribute(prop));\n            break;\n\n          case 'min':\n            if (isNullOrUndefined(this.min) || +this.min === +new Date(1900, 0, 1) || isDynamic) {\n              var dateValue = this.globalize.parseDate(this.inputElement.getAttribute(prop), format);\n              this.setProperties(setValue(prop, dateValue, {}), !isDynamic);\n            }\n\n            break;\n\n          case 'name':\n            this.inputElement.setAttribute('name', '' + this.inputElement.getAttribute(prop));\n            break;\n\n          case 'max':\n            if (isNullOrUndefined(this.max) || +this.max === +new Date(2099, 11, 31) || isDynamic) {\n              var dateValue = this.globalize.parseDate(this.inputElement.getAttribute(prop), format);\n              this.setProperties(setValue(prop, dateValue, {}), !isDynamic);\n            }\n\n            break;\n\n          case 'startDate':\n            if (isNullOrUndefined(this.startDate)) {\n              var dateValue = this.globalize.parseDate(this.inputElement.getAttribute(prop), format);\n              this.startValue = dateValue;\n              this.setValue();\n            }\n\n            break;\n\n          case 'endDate':\n            if (isNullOrUndefined(this.endDate)) {\n              var dateValue = this.globalize.parseDate(this.inputElement.getAttribute(prop), format);\n              this.endValue = dateValue;\n              this.setValue();\n            }\n\n            break;\n\n          case 'minDays':\n            if (isNullOrUndefined(this.minDays)) {\n              this.setProperties(setValue(prop, parseInt(this.inputElement.getAttribute(prop), 10), {}), true);\n            }\n\n            break;\n\n          case 'maxDays':\n            if (isNullOrUndefined(this.maxDays)) {\n              this.setProperties(setValue(prop, parseInt(this.inputElement.getAttribute(prop), 10), {}), true);\n            }\n\n            break;\n\n          case 'type':\n            if (this.inputElement.getAttribute(prop) !== 'text') {\n              this.inputElement.setAttribute('type', 'text');\n            }\n\n            break;\n        }\n      }\n    }\n  };\n\n  DateRangePicker.prototype.createPopup = function () {\n    for (var i = 0; i < this.presetsItem.length; i++) {\n      if (i !== this.presetsItem.length - 1 && this.presetsItem[i].id === 'custom_range') {\n        this.presetsItem.splice(i, 1);\n      }\n    }\n\n    this.activeIndex = this.presetsItem.length - 1;\n    this.isCustomRange = true;\n\n    for (var i = 0; i <= this.presetsItem.length - 2; i++) {\n      var startDate = this.presetsItem[i].start;\n      var endDate = this.presetsItem[i].end;\n\n      if (this.startValue && this.endValue) {\n        if (+startDate.setMilliseconds(0) === +this.startValue.setMilliseconds(0) && +endDate.setMilliseconds(0) === +this.endValue.setMilliseconds(0)) {\n          this.activeIndex = i;\n          this.isCustomRange = false;\n        }\n      }\n    }\n\n    this.popupWrapper = createElement('div', {\n      id: this.element.id + '_popup',\n      className: ROOT + ' ' + POPUP\n    });\n    this.adjustLongHeaderWidth();\n    var isPreset = !this.isCustomRange || this.isMobile;\n\n    if (!isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label) && isPreset) {\n      this.isCustomWindow = false;\n      this.createPresets();\n      this.listRippleEffect();\n      this.renderPopup();\n    } else {\n      this.isCustomWindow = true;\n      this.renderControl();\n    }\n  };\n\n  DateRangePicker.prototype.renderControl = function () {\n    this.createControl();\n    this.bindCalendarEvents();\n    this.updateRange(this.isMobile ? [this.calendarElement] : [this.leftCalendar, this.rightCalendar]);\n\n    if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue)) {\n      this.disabledDateRender();\n    }\n\n    this.updateHeader();\n  };\n\n  DateRangePicker.prototype.clearCalendarEvents = function () {\n    EventHandler.clearEvents(this.leftCalPrevIcon);\n    EventHandler.clearEvents(this.leftCalNextIcon);\n    EventHandler.clearEvents(this.rightCalPrevIcon);\n    EventHandler.clearEvents(this.rightCalNextIcon);\n  };\n\n  DateRangePicker.prototype.updateNavIcons = function () {\n    _super.prototype.iconHandler.call(this);\n  };\n\n  DateRangePicker.prototype.calendarIconEvent = function () {\n    this.clearCalendarEvents();\n\n    if (this.leftCalPrevIcon && !this.leftCalPrevIcon.classList.contains(DISABLED)) {\n      EventHandler.add(this.leftCalPrevIcon, 'mousedown', this.navPrevFunction);\n    }\n\n    if (this.leftCalNextIcon && !this.leftCalNextIcon.classList.contains(DISABLED)) {\n      EventHandler.add(this.leftCalNextIcon, 'mousedown', this.navNextFunction);\n    }\n\n    if (this.rightCalPrevIcon && !this.rightCalPrevIcon.classList.contains(DISABLED)) {\n      EventHandler.add(this.rightCalPrevIcon, 'mousedown', this.navPrevFunction);\n    }\n\n    if (this.rightCalNextIcon && !this.rightCalNextIcon.classList.contains(DISABLED)) {\n      EventHandler.add(this.rightCalNextIcon, 'mousedown', this.navNextFunction);\n    }\n  };\n\n  DateRangePicker.prototype.bindCalendarEvents = function () {\n    if (!this.isMobile) {\n      this.updateNavIcons();\n      this.calendarIconEvent();\n      this.calendarIconRipple();\n      this.headerTitleElement = this.popupObj.element.querySelector('.' + RIGHTCALENDER + ' .' + HEADER + ' .' + TITLE);\n      this.headerTitleElement = this.popupObj.element.querySelector('.' + LEFTCALENDER + ' .' + HEADER + ' .' + TITLE);\n      this.defaultKeyConfigs = extend(this.defaultKeyConfigs, this.keyConfigs);\n      this.leftKeyboardModule = new KeyboardEvents(this.leftCalendar, {\n        eventName: 'keydown',\n        keyAction: this.keyInputHandler.bind(this),\n        keyConfigs: this.defaultKeyConfigs\n      });\n      this.rightKeyboardModule = new KeyboardEvents(this.rightCalendar, {\n        eventName: 'keydown',\n        keyAction: this.keyInputHandler.bind(this),\n        keyConfigs: this.defaultKeyConfigs\n      });\n    } else {\n      this.deviceCalendarEvent();\n      EventHandler.add(this.startButton.element, 'click', this.deviceHeaderClick, this);\n      EventHandler.add(this.endButton.element, 'click', this.deviceHeaderClick, this);\n    }\n\n    if (this.start === this.depth) {\n      this.bindCalendarCellEvents();\n    }\n\n    this.removeFocusedDate();\n  };\n\n  DateRangePicker.prototype.calendarIconRipple = function () {\n    rippleEffect(this.leftCalPrevIcon, {\n      selector: '.e-prev',\n      duration: 400,\n      isCenterRipple: true\n    });\n    rippleEffect(this.leftCalNextIcon, {\n      selector: '.e-next',\n      duration: 400,\n      isCenterRipple: true\n    });\n    rippleEffect(this.rightCalPrevIcon, {\n      selector: '.e-prev',\n      duration: 400,\n      isCenterRipple: true\n    });\n    rippleEffect(this.rightCalNextIcon, {\n      selector: '.e-next',\n      duration: 400,\n      isCenterRipple: true\n    });\n  };\n\n  DateRangePicker.prototype.deviceCalendarEvent = function () {\n    EventHandler.clearEvents(this.nextIcon);\n    EventHandler.clearEvents(this.previousIcon);\n    rippleEffect(this.nextIcon, {\n      selector: '.e-prev',\n      duration: 400,\n      isCenterRipple: true\n    });\n    rippleEffect(this.previousIcon, {\n      selector: '.e-next',\n      duration: 400,\n      isCenterRipple: true\n    });\n\n    if (this.nextIcon && !this.nextIcon.classList.contains(DISABLED)) {\n      EventHandler.add(this.nextIcon, 'mousedown', this.deviceNavNextFunction);\n    }\n\n    if (this.previousIcon && !this.previousIcon.classList.contains(DISABLED)) {\n      EventHandler.add(this.previousIcon, 'mousedown', this.deviceNavPrevFunction);\n    }\n  };\n\n  DateRangePicker.prototype.deviceNavNext = function (e) {\n    var calendar = closest(e.target, '.' + CALENDAR);\n    this.updateDeviceCalendar(calendar);\n    this.navigateNext(e);\n    this.deviceNavigation();\n  };\n\n  DateRangePicker.prototype.deviceNavPrevious = function (e) {\n    var calendar = closest(e.target, '.' + CALENDAR);\n    this.updateDeviceCalendar(calendar);\n    this.navigatePrevious(e);\n    this.deviceNavigation();\n  };\n\n  DateRangePicker.prototype.updateDeviceCalendar = function (calendar) {\n    if (calendar) {\n      this.previousIcon = calendar.querySelector('.' + PREVICON);\n      this.nextIcon = calendar.querySelector('.' + NEXTICON);\n      this.calendarElement = calendar;\n      this.deviceCalendar = calendar;\n      this.contentElement = calendar.querySelector('.' + CONTENT);\n      this.tableBodyElement = select('.' + CONTENT + ' tbody', calendar);\n      this.table = calendar.querySelector('.' + CONTENT).getElementsByTagName('table')[0];\n      this.headerTitleElement = calendar.querySelector('.' + HEADER + ' .' + TITLE);\n      this.headerElement = calendar.querySelector('.' + HEADER);\n    }\n  };\n\n  DateRangePicker.prototype.deviceHeaderClick = function (event) {\n    var element = event.currentTarget;\n\n    if (element.classList.contains(STARTBUTTON) && !isNullOrUndefined(this.startValue)) {\n      this.endButton.element.classList.remove(ACTIVE);\n      this.startButton.element.classList.add(ACTIVE);\n      var calendar = this.popupObj.element.querySelector('.' + CALENDAR);\n      this.updateDeviceCalendar(calendar);\n\n      if (isNullOrUndefined(this.calendarElement.querySelector('.' + STARTDATE + ':not(.e-other-month)'))) {\n        this.currentDate = new Date(+this.startValue);\n        remove(this.tableBodyElement);\n        this.createContentBody();\n        this.deviceNavigation();\n      }\n\n      this.removeClassDisabled();\n    } else if (!isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue)) {\n      this.startButton.element.classList.remove(ACTIVE);\n      this.endButton.element.classList.add(ACTIVE);\n      var calendar = this.popupObj.element.querySelector('.' + CALENDAR);\n      this.updateDeviceCalendar(calendar);\n\n      if (isNullOrUndefined(this.calendarElement.querySelector('.' + ENDDATE + ':not(.e-other-month)'))) {\n        this.currentDate = new Date(+this.endValue);\n        remove(this.tableBodyElement);\n        this.createContentBody();\n        this.deviceNavigation();\n      }\n\n      this.updateMinMaxDays(this.popupObj.element.querySelector('.' + CALENDAR));\n      this.selectableDates();\n    }\n  };\n\n  DateRangePicker.prototype.inputFocusHandler = function () {\n    this.preventBlur = false;\n    var focusArguments = {\n      model: isBlazor() && this.isServerRendered ? null : this\n    };\n\n    if (!this.preventFocus) {\n      this.preventFocus = true;\n      this.trigger('focus', focusArguments);\n    }\n\n    this.updateClearIconState();\n    this.updateHiddenInput();\n\n    if (this.openOnFocus) {\n      this.show();\n    }\n  };\n\n  DateRangePicker.prototype.inputBlurHandler = function (e) {\n    if (!this.preventBlur) {\n      var value = this.inputElement.value;\n\n      if (!isNullOrUndefined(this.presetsItem)) {\n        if (this.presetsItem.length > 0 && this.previousEleValue !== this.inputElement.value) {\n          this.activeIndex = this.presetsItem.length - 1;\n          this.isCustomRange = true;\n        }\n      }\n\n      if (!isNullOrUndefined(value) && value.trim() !== '') {\n        var range = value.split(' ' + this.separator + ' ');\n\n        if (range.length > 1) {\n          this.invalidValueString = null;\n          var dateOptions = {\n            format: this.formatString,\n            type: 'date',\n            skeleton: isBlazor() ? 'd' : 'yMd'\n          };\n          var startDate = this.globalize.parseDate(range[0].trim(), dateOptions);\n          var endDate = this.globalize.parseDate(range[1].trim(), dateOptions);\n\n          if (!isNullOrUndefined(startDate) && !isNaN(+startDate) && !isNullOrUndefined(endDate) && !isNaN(+endDate)) {\n            var prevStartVal = this.startValue;\n            this.startValue = startDate;\n            var prevEndVal = this.endValue;\n            this.endValue = endDate;\n            this.setValue();\n            this.refreshControl();\n\n            if (value !== this.previousEleValue) {\n              this.changeTrigger(e);\n            }\n\n            if (!this.preventBlur && document.activeElement !== this.inputElement) {\n              this.preventFocus = false;\n              var blurArguments = {\n                model: isBlazor() && this.isServerRendered ? null : this\n              };\n              this.trigger('blur', blurArguments);\n            }\n\n            this.updateHiddenInput(); // For Mobile mode, when a value is present and choose another range and click on console\n            // when popup is open, two startvalues and end values are updated in the popup.\n\n            if (this.isMobile && this.isPopupOpen()) {\n              this.startValue = prevStartVal;\n              this.endValue = prevEndVal;\n            }\n\n            return;\n          } else {\n            if (!this.strictMode) {\n              this.startValue = null;\n              this.endValue = null;\n              this.setValue();\n            }\n          }\n        } else {\n          if (!this.strictMode) {\n            this.startValue = null;\n            this.endValue = null;\n            this.setValue();\n          }\n        }\n      }\n\n      if (!this.strictMode) {\n        if (isNullOrUndefined(this.popupObj)) {\n          this.currentDate = null;\n        }\n\n        this.previousStartValue = this.previousEndValue = null;\n        this.startValue = null;\n        this.endValue = null;\n        this.setValue();\n      } else {\n        if (!isNullOrUndefined(value) && value.trim() === '') {\n          this.startValue = null;\n          this.endValue = null;\n        }\n\n        Input.setValue('', this.inputElement, this.floatLabelType, this.showClearButton);\n        this.updateInput();\n      }\n\n      this.errorClass();\n      this.changeTrigger(e);\n\n      if (!this.preventBlur && document.activeElement !== this.inputElement) {\n        this.preventFocus = false;\n        var blurArguments = {\n          model: isBlazor() && this.isServerRendered ? null : this\n        };\n        this.trigger('blur', blurArguments);\n      }\n    }\n\n    this.updateHiddenInput();\n  };\n\n  DateRangePicker.prototype.clearRange = function () {\n    this.previousStartValue = this.previousEndValue = null;\n    this.currentDate = null;\n  };\n\n  DateRangePicker.prototype.errorClass = function () {\n    var inputStr = this.inputElement.value.trim();\n\n    if ((isNullOrUndefined(this.endValue) && isNullOrUndefined(this.startValue) && inputStr !== '' || !isNullOrUndefined(this.startValue) && +this.startValue < +this.min || !isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue) && +this.startValue > +this.endValue || !isNullOrUndefined(this.endValue) && +this.endValue > +this.max || this.startValue && this.isDateDisabled(this.startValue) || this.endValue && this.isDateDisabled(this.endValue)) && inputStr !== '') {\n      addClass([this.inputWrapper.container], ERROR);\n      attributes(this.inputElement, {\n        'aria-invalid': 'true'\n      });\n    } else {\n      if (this.inputWrapper) {\n        removeClass([this.inputWrapper.container], ERROR);\n        attributes(this.inputElement, {\n          'aria-invalid': 'false'\n        });\n      }\n    }\n  };\n\n  DateRangePicker.prototype.keyCalendarUpdate = function (isLeftCalendar, ele) {\n    this.removeFocusedDate();\n\n    if (isLeftCalendar) {\n      this.leftCalCurrentDate = new Date(+this.currentDate);\n      ele = this.leftCalendar;\n    } else {\n      this.rightCalCurrentDate = new Date(+this.currentDate);\n      ele = this.rightCalendar;\n    }\n\n    this.updateCalendarElement(ele);\n    this.table.focus();\n    return ele;\n  };\n\n  DateRangePicker.prototype.navInCalendar = function (e, isLeftCalendar, leftLimit, rightLimit, ele) {\n    var view = this.getViewNumber(this.currentView());\n    var date;\n    var min = this.min;\n    var max;\n\n    if (!isNullOrUndefined(this.maxDays) && this.isMaxDaysClicked && !isNullOrUndefined(this.startValue)) {\n      max = new Date(new Date(+this.startValue).setDate(this.startValue.getDate() + (this.maxDays - 1)));\n    } else {\n      max = this.max;\n    }\n\n    switch (e.action) {\n      case 'moveRight':\n        date = new Date(+this.currentDate);\n        this.addDay(date, 1, e, max, min);\n\n        if (isLeftCalendar && +date === +rightLimit) {\n          ele = this.keyCalendarUpdate(false, ele);\n        }\n\n        this.KeyboardNavigate(1, view, e, max, min);\n        this.keyNavigation(ele, e);\n        break;\n\n      case 'moveLeft':\n        date = new Date(+this.currentDate);\n        this.addDay(date, -1, e, max, min);\n\n        if (!isLeftCalendar) {\n          if (+date === +leftLimit) {\n            ele = this.keyCalendarUpdate(true, ele);\n          }\n        }\n\n        this.KeyboardNavigate(-1, view, e, max, min);\n        this.keyNavigation(ele, e);\n        break;\n\n      case 'moveUp':\n        if (view === 0) {\n          date = new Date(+this.currentDate);\n          this.addDay(date, -7, e, max, min);\n\n          if (+date <= +leftLimit && !isLeftCalendar) {\n            ele = this.keyCalendarUpdate(true, ele);\n          }\n\n          this.KeyboardNavigate(-7, view, e, max, min);\n        } else {\n          this.KeyboardNavigate(-4, view, e, this.max, this.min); // move the current year to the previous four days.\n        }\n\n        this.keyNavigation(ele, e);\n        break;\n\n      case 'moveDown':\n        if (view === 0) {\n          date = new Date(+this.currentDate);\n          this.addDay(date, 7, e, max, min);\n\n          if (isLeftCalendar && +date >= +rightLimit) {\n            ele = this.keyCalendarUpdate(false, ele);\n          }\n\n          this.KeyboardNavigate(7, view, e, max, min);\n        } else {\n          this.KeyboardNavigate(4, view, e, this.max, this.min);\n        }\n\n        this.keyNavigation(ele, e);\n        break;\n\n      case 'home':\n        this.currentDate = this.firstDay(this.currentDate);\n        remove(this.tableBodyElement);\n        view === 0 ? this.renderMonths(e) : view === 1 ? this.renderYears(e) : this.renderDecades(e);\n        this.keyNavigation(ele, e);\n        break;\n\n      case 'end':\n        this.currentDate = this.lastDay(this.currentDate, view);\n        remove(this.tableBodyElement);\n        view === 0 ? this.renderMonths(e) : view === 1 ? this.renderYears(e) : this.renderDecades(e);\n        this.keyNavigation(ele, e);\n        break;\n    }\n  }; // tslint:disable-next-line:max-func-body-length\n\n\n  DateRangePicker.prototype.keyInputHandler = function (e, value) {\n    var date;\n    var view = this.getViewNumber(this.currentView());\n    var rightDateLimit = new Date(this.rightCalCurrentDate.getFullYear(), this.rightCalCurrentDate.getMonth(), 1);\n    var leftDateLimit = new Date(this.leftCalCurrentDate.getFullYear(), this.leftCalCurrentDate.getMonth() + 1, 0);\n    var ele = closest(e.target, '.' + RIGHTCALENDER);\n    ele = isNullOrUndefined(ele) ? this.leftCalendar : ele;\n    var isLeftCalendar = ele.classList.contains(LEFTCALENDER);\n    this.updateCalendarElement(ele);\n    var selectedDate = this.tableBodyElement.querySelector('tr td.e-selected');\n    var focusedDate = ele.querySelector('tr td.' + FOCUSDATE);\n    var startDate = ele.querySelector('tr td.' + STARTDATE);\n    var endDate = ele.querySelector('tr td.' + ENDDATE);\n    var depthValue = this.getViewNumber(this.depth);\n    var levelRestrict = view === depthValue && this.getViewNumber(this.start) >= depthValue;\n    var leftCalendar = closest(e.target, '.' + LEFTCALENDER);\n    var rightCalendar = closest(e.target, '.' + RIGHTCALENDER);\n    var presetElement = closest(e.target, '.' + PRESETS);\n\n    if (!isNullOrUndefined(focusedDate)) {\n      this.currentDate = this.currentDate;\n    } else if (!isNullOrUndefined(endDate) && !this.dateDisabled) {\n      this.currentDate = new Date(+this.endValue);\n    } else if (!isNullOrUndefined(startDate) && !this.dateDisabled) {\n      this.currentDate = new Date(+this.startValue);\n    } else if (!this.dateDisabled) {\n      this.currentDate.setDate(1);\n    }\n\n    this.effect = '';\n\n    switch (e.action) {\n      case 'altUpArrow':\n        if (this.isPopupOpen()) {\n          this.hide(e);\n          this.preventFocus = true;\n          this.inputElement.focus();\n          addClass([this.inputWrapper.container], [INPUTFOCUS]);\n        }\n\n        break;\n\n      case 'select':\n        if (levelRestrict) {\n          var element = !isNullOrUndefined(focusedDate) ? focusedDate : startDate;\n\n          if (!isNullOrUndefined(element) && !element.classList.contains(DISABLED)) {\n            this.selectRange(null, element);\n          }\n        } else {\n          if (!isNullOrUndefined(selectedDate) && !levelRestrict || !isNullOrUndefined(focusedDate)) {\n            if (!isNullOrUndefined(this.value)) {\n              if (this.calendarElement.classList.contains(LEFTCALENDER)) {\n                value = this.startDate;\n              } else {\n                value = this.endDate;\n              }\n            }\n\n            this.controlDown = e;\n            this.contentClick(null, --view, focusedDate || selectedDate, value);\n          }\n        }\n\n        e.preventDefault();\n        break;\n\n      case 'controlHome':\n        var yearDate = new Date(this.currentDate.getFullYear(), 0, 1);\n\n        if (!isLeftCalendar && +yearDate < +leftDateLimit) {\n          ele = this.keyCalendarUpdate(true, ele);\n        }\n\n        _super.prototype.navigateTo.call(this, 'Month', new Date(this.currentDate.getFullYear(), 0, 1));\n\n        this.keyNavigation(ele, e);\n        break;\n\n      case 'altRightArrow':\n        if (!isNullOrUndefined(leftCalendar)) {\n          this.rightCalendar.children[1].firstElementChild.focus();\n        } else if (!isNullOrUndefined(rightCalendar)) {\n          if (!isNullOrUndefined(this.presetElement)) {\n            this.presetElement.focus();\n            this.removeFocusedDate();\n          } else {\n            this.cancelButton.element.focus();\n          }\n        } else {\n          if (!isNullOrUndefined(presetElement)) {\n            this.cancelButton.element.focus();\n          }\n        }\n\n        e.preventDefault();\n        break;\n\n      case 'altLeftArrow':\n        if (!isNullOrUndefined(leftCalendar)) {\n          if (this.applyButton.element.disabled !== true) {\n            this.applyButton.element.focus();\n          } else {\n            this.cancelButton.element.focus();\n          }\n        } else {\n          if (!isNullOrUndefined(rightCalendar)) {\n            this.leftCalendar.children[1].firstElementChild.focus();\n          }\n        }\n\n        e.preventDefault();\n        break;\n\n      case 'controlUp':\n        if (this.calendarElement.classList.contains(LEFTCALENDER)) {\n          this.calendarNavigation(e, this.calendarElement);\n        } else {\n          this.calendarNavigation(e, this.calendarElement);\n        }\n\n        e.preventDefault();\n        break;\n\n      case 'controlDown':\n        if ((!isNullOrUndefined(selectedDate) || !isNullOrUndefined(focusedDate)) && !levelRestrict) {\n          if (!isNullOrUndefined(this.value)) {\n            if (this.calendarElement.classList.contains(LEFTCALENDER)) {\n              value = this.startDate;\n            } else {\n              value = this.endDate;\n            }\n          }\n\n          this.controlDown = e;\n          this.contentClick(null, --view, selectedDate || focusedDate, value);\n        }\n\n        e.preventDefault();\n        break;\n\n      case 'controlEnd':\n        yearDate = new Date(this.currentDate.getFullYear(), 11, 31);\n\n        if (isLeftCalendar && +yearDate > +rightDateLimit) {\n          ele = this.keyCalendarUpdate(false, ele);\n        }\n\n        _super.prototype.navigateTo.call(this, 'Month', new Date(this.currentDate.getFullYear(), 11, 31));\n\n        this.keyNavigation(ele, e);\n        break;\n\n      case 'pageUp':\n        date = new Date(+this.currentDate);\n        this.addMonths(date, -1);\n\n        if (!isLeftCalendar && +date <= +leftDateLimit) {\n          ele = this.keyCalendarUpdate(true, ele);\n        }\n\n        this.addMonths(this.currentDate, -1);\n\n        _super.prototype.navigateTo.call(this, 'Month', this.currentDate);\n\n        this.keyNavigation(ele, e);\n        break;\n\n      case 'pageDown':\n        date = new Date(+this.currentDate);\n        this.addMonths(date, 1);\n\n        if (isLeftCalendar && +date >= +rightDateLimit) {\n          ele = this.keyCalendarUpdate(false, ele);\n        }\n\n        this.addMonths(this.currentDate, 1);\n\n        _super.prototype.navigateTo.call(this, 'Month', this.currentDate);\n\n        this.keyNavigation(ele, e);\n        break;\n\n      case 'shiftPageUp':\n        date = new Date(+this.currentDate);\n        this.addYears(date, -1);\n\n        if (!isLeftCalendar && +date <= +leftDateLimit) {\n          ele = this.keyCalendarUpdate(true, ele);\n        }\n\n        this.addYears(this.currentDate, -1);\n\n        _super.prototype.navigateTo.call(this, 'Month', this.currentDate);\n\n        this.keyNavigation(ele, e);\n        break;\n\n      case 'shiftPageDown':\n        date = new Date(+this.currentDate);\n        this.addYears(date, 1);\n\n        if (isLeftCalendar && +date >= +rightDateLimit) {\n          ele = this.keyCalendarUpdate(false, ele);\n        }\n\n        this.addYears(this.currentDate, 1);\n\n        _super.prototype.navigateTo.call(this, 'Month', this.currentDate);\n\n        this.keyNavigation(ele, e);\n        break;\n\n      case 'shiftTab':\n        if (!isNullOrUndefined(this.presetElement)) {\n          this.presetElement.setAttribute('tabindex', '0');\n          this.presetElement.focus();\n          this.removeFocusedDate();\n        }\n\n        e.preventDefault();\n        break;\n\n      case 'spacebar':\n        if (this.applyButton && !this.applyButton.disabled) {\n          this.applyFunction(e);\n        }\n\n        break;\n\n      default:\n        this.navInCalendar(e, isLeftCalendar, leftDateLimit, rightDateLimit, ele);\n        this.checkMinMaxDays();\n    }\n\n    this.presetHeight();\n  };\n\n  DateRangePicker.prototype.keyNavigation = function (calendar, e) {\n    this.bindCalendarCellEvents(calendar);\n\n    if (calendar.classList.contains(LEFTCALENDER)) {\n      this.leftCalCurrentDate = new Date(+this.currentDate);\n    } else {\n      this.rightCalCurrentDate = new Date(+this.currentDate);\n    }\n\n    this.updateNavIcons();\n    this.calendarIconEvent();\n    this.updateRange([calendar]);\n    this.dateDisabled = this.isDateDisabled(this.currentDate);\n    e.preventDefault();\n  };\n\n  DateRangePicker.prototype.inputHandler = function (e) {\n    switch (e.action) {\n      case 'altDownArrow':\n        if (!this.isPopupOpen()) {\n          if (this.inputElement.value === '') {\n            this.clear();\n            this.changeTrigger(e);\n            this.clearRange();\n          }\n\n          this.show(null, e);\n          this.isRangeIconClicked = false;\n\n          if (!this.isMobile) {\n            if (!isNullOrUndefined(this.leftCalendar)) {\n              this.calendarFocus();\n            }\n          }\n\n          this.isKeyPopup = true;\n        }\n\n        break;\n\n      case 'escape':\n        if (this.isPopupOpen()) {\n          this.hide(e);\n        }\n\n        break;\n\n      case 'enter':\n        if (document.activeElement === this.inputElement) {\n          this.inputBlurHandler(e);\n          this.hide(e);\n        }\n\n        break;\n\n      case 'tab':\n        if (document.activeElement === this.inputElement && this.isPopupOpen()) {\n          this.hide(e);\n          e.preventDefault();\n        }\n\n        break;\n    }\n  };\n\n  DateRangePicker.prototype.bindCalendarCellEvents = function (calendar) {\n    var tdCells;\n\n    if (calendar) {\n      tdCells = calendar.querySelectorAll('.' + CALENDAR + ' td');\n    } else {\n      tdCells = this.popupObj.element.querySelectorAll('.' + CALENDAR + ' td');\n    }\n\n    for (var _i = 0, tdCells_1 = tdCells; _i < tdCells_1.length; _i++) {\n      var cell = tdCells_1[_i];\n      EventHandler.clearEvents(cell);\n      var disabledCell = void 0;\n      disabledCell = cell.classList.contains(DISABLED) || cell.classList.contains(DATEDISABLED);\n\n      if (!disabledCell && !cell.classList.contains(WEEKNUMBER)) {\n        if (!this.isMobile) {\n          EventHandler.add(cell, 'mouseover', this.hoverSelection, this);\n        }\n\n        EventHandler.add(cell, 'mousedown', this.selectRange, this);\n      }\n    }\n  };\n\n  DateRangePicker.prototype.removeFocusedDate = function () {\n    var isDate = !isNullOrUndefined(this.startValue) || !isNullOrUndefined(this.endValue);\n    var focusedDate;\n    focusedDate = this.popupObj.element.querySelectorAll('.' + CALENDAR + ' .' + FOCUSDATE);\n\n    for (var _i = 0, focusedDate_1 = focusedDate; _i < focusedDate_1.length; _i++) {\n      var ele = focusedDate_1[_i];\n      var today = new Date();\n      var eleDate = this.getIdValue(null, ele);\n\n      if (this.depth === 'Month' && this.currentView() === 'Month' && (!ele.classList.contains(TODAY) || ele.classList.contains(TODAY) && isDate) || this.depth === 'Year' && this.currentView() === 'Year' && (!this.isSameMonth(today, eleDate) && !this.isSameYear(today, eleDate) || isDate) || this.depth === 'Decade' && this.currentView() === 'Decade' && (!this.isSameYear(today, eleDate) || isDate)) {\n        ele.classList.remove(FOCUSDATE);\n\n        if (!ele.classList.contains(STARTDATE) && !ele.classList.contains(ENDDATE)) {\n          ele.removeAttribute('aria-label');\n        }\n      }\n    }\n  };\n\n  DateRangePicker.prototype.hoverSelection = function (event, element) {\n    var currentElement = element || event.currentTarget;\n    var currentDate = this.getIdValue(null, currentElement);\n\n    if (!isNullOrUndefined(this.startValue) && +this.startValue >= +this.min && +this.startValue <= +this.max) {\n      if (!this.isDateDisabled(this.endValue) && !this.isDateDisabled(this.startValue) && isNullOrUndefined(this.endValue) && isNullOrUndefined(this.startValue) || !isNullOrUndefined(this.startValue) && isNullOrUndefined(this.endValue)) {\n        var tdCells = void 0;\n        tdCells = this.popupObj.element.querySelectorAll('.' + CALENDAR + ' td');\n\n        for (var _i = 0, tdCells_2 = tdCells; _i < tdCells_2.length; _i++) {\n          var ele = tdCells_2[_i];\n          var isDisabledCell = !ele.classList.contains(DISABLED) || ele.classList.contains(DATEDISABLED);\n\n          if (!ele.classList.contains(WEEKNUMBER) && isDisabledCell) {\n            var eleDate = this.getIdValue(null, ele);\n            var startDateValue = new Date(+this.startValue);\n            var eleDateValue = new Date(+eleDate);\n\n            if (eleDateValue.setHours(0, 0, 0, 0) >= startDateValue.setHours(0, 0, 0, 0) && +eleDate <= +currentDate) {\n              addClass([ele], RANGEHOVER);\n            } else {\n              removeClass([ele], [RANGEHOVER]);\n            }\n          }\n        }\n      }\n    }\n  };\n\n  DateRangePicker.prototype.isSameStartEnd = function (startVal, endVal) {\n    var isSame = false;\n\n    if (this.depth === 'Month') {\n      if (startVal.setHours(0, 0, 0, 0) === endVal.setHours(0, 0, 0, 0)) {\n        isSame = true;\n      }\n    } else if (this.depth === 'Year') {\n      if (startVal.getFullYear() === endVal.getFullYear() && startVal.getMonth() === endVal.getMonth()) {\n        isSame = true;\n      }\n    } else if (this.depth === 'Decade') {\n      if (startVal.getFullYear() === endVal.getFullYear()) {\n        isSame = true;\n      }\n    }\n\n    return isSame;\n  };\n\n  DateRangePicker.prototype.updateRange = function (elementCollection) {\n    if (!isNullOrUndefined(this.startValue)) {\n      for (var _i = 0, elementCollection_1 = elementCollection; _i < elementCollection_1.length; _i++) {\n        var calendar = elementCollection_1[_i];\n        var tdCells = calendar.querySelectorAll('.' + CALENDAR + ' td');\n\n        for (var _a = 0, tdCells_3 = tdCells; _a < tdCells_3.length; _a++) {\n          var ele = tdCells_3[_a];\n\n          if (!ele.classList.contains(WEEKNUMBER) && !ele.classList.contains(DISABLED)) {\n            var eleDate = this.getIdValue(null, ele);\n            var eleDateValue = this.getIdValue(null, ele);\n\n            if (!isNullOrUndefined(this.endValue)) {\n              if (this.currentView() === this.depth && +eleDateValue.setHours(0, 0, 0, 0) >= +new Date(+this.startValue).setHours(0, 0, 0, 0) && +eleDateValue.setHours(0, 0, 0, 0) <= +new Date(+this.endValue).setHours(0, 0, 0, 0) && !this.isSameStartEnd(new Date(+this.startValue), new Date(+this.endValue)) && +new Date(+this.startValue).setHours(0, 0, 0, 0) >= +this.min && +new Date(+this.endValue).setHours(0, 0, 0, 0) <= +this.max && !(this.isDateDisabled(this.startValue) || this.isDateDisabled(this.endValue))) {\n                addClass([ele], RANGEHOVER);\n              }\n            } else {\n              removeClass([ele], [RANGEHOVER]);\n            }\n\n            if (!ele.classList.contains(OTHERMONTH)) {\n              var startDateValue = new Date(+this.startValue);\n              var eleDateValue_1 = new Date(+eleDate);\n\n              if (this.currentView() === this.depth && +eleDateValue_1.setHours(0, 0, 0, 0) === +startDateValue.setHours(0, 0, 0, 0) && +eleDateValue_1.setHours(0, 0, 0, 0) >= +startDateValue.setHours(0, 0, 0, 0) && +this.startValue >= +this.min && !this.inputWrapper.container.classList.contains('e-error') && !(this.isDateDisabled(this.startValue) || this.isDateDisabled(this.endValue))) {\n                addClass([ele], [STARTDATE, SELECTED]);\n                this.addSelectedAttributes(ele, this.startValue, true);\n              }\n\n              var endDateValue = new Date(+this.endValue);\n\n              if (this.currentView() === 'Year') {\n                eleDateValue_1 = new Date(eleDateValue_1.getFullYear(), eleDateValue_1.getMonth() + 1, 0);\n              } else if (this.currentView() === 'Decade') {\n                eleDateValue_1 = new Date(eleDateValue_1.getFullYear(), 11, 31);\n              }\n\n              if (this.currentView() === this.depth && !isNullOrUndefined(this.endValue) && +eleDateValue_1.setHours(0, 0, 0, 0) === +endDateValue.setHours(0, 0, 0, 0) && +eleDateValue_1.setHours(0, 0, 0, 0) <= +endDateValue.setHours(0, 0, 0, 0) && +this.startValue >= +this.min && !this.inputWrapper.container.classList.contains('e-error') && !(this.isDateDisabled(this.startValue) || this.isDateDisabled(this.endValue))) {\n                addClass([ele], [ENDDATE, SELECTED]);\n                this.addSelectedAttributes(ele, this.startValue, false);\n              }\n\n              if (+eleDate === +this.startValue && !isNullOrUndefined(this.endValue) && +eleDate === +this.endValue) {\n                this.addSelectedAttributes(ele, this.endValue, false, true);\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n\n  DateRangePicker.prototype.checkMinMaxDays = function () {\n    if (!isNullOrUndefined(this.minDays) && this.minDays > 0 || !isNullOrUndefined(this.maxDays) && this.maxDays > 0) {\n      if (!this.isMobile) {\n        this.updateMinMaxDays(this.popupObj.element.querySelector('.' + LEFTCALENDER));\n        this.updateMinMaxDays(this.popupObj.element.querySelector('.' + RIGHTCALENDER));\n      } else {\n        this.updateMinMaxDays(this.popupObj.element.querySelector('.' + CALENDAR));\n      }\n    }\n  };\n\n  DateRangePicker.prototype.rangeArgs = function (e) {\n    var inputValue;\n    var range;\n    var startDate = !isNullOrUndefined(this.startValue) ? this.globalize.formatDate(this.startValue, {\n      format: this.formatString,\n      type: 'date',\n      skeleton: isBlazor() ? 'd' : 'yMd'\n    }) : null;\n    var endDate = !isNullOrUndefined(this.endValue) ? this.globalize.formatDate(this.endValue, {\n      format: this.formatString,\n      type: 'date',\n      skeleton: isBlazor() ? 'd' : 'yMd'\n    }) : null;\n\n    if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue)) {\n      inputValue = startDate + ' ' + this.separator + ' ' + endDate;\n      range = Math.round(Math.abs((this.startValue.getTime() - this.endValue.getTime()) / (1000 * 60 * 60 * 24))) + 1;\n    } else {\n      inputValue = '';\n      range = 0;\n    }\n\n    var args = {\n      value: this.value,\n      startDate: this.startValue,\n      endDate: this.endValue,\n      daySpan: range,\n      event: e || null,\n      element: this.element,\n      isInteracted: !isNullOrUndefined(e),\n      text: inputValue\n    };\n    return args;\n  };\n\n  DateRangePicker.prototype.otherMonthSelect = function (ele, isStartDate, sameDate) {\n    var value = +this.getIdValue(null, ele);\n    var dateIdString = '*[id^=\"/id\"]:not(.e-other-month)'.replace('/id', '' + value);\n    var tdCell = this.popupObj && this.popupObj.element.querySelector(dateIdString);\n\n    if (!isNullOrUndefined(tdCell)) {\n      if (isStartDate) {\n        addClass([tdCell], [STARTDATE, SELECTED]);\n        this.addSelectedAttributes(tdCell, this.startValue, true);\n      } else {\n        addClass([tdCell], [ENDDATE, SELECTED]);\n        this.addSelectedAttributes(tdCell, this.endValue, true);\n      }\n\n      if (sameDate) {\n        this.addSelectedAttributes(ele, this.endValue, false, true);\n      }\n    }\n  }; // tslint:disable-next-line:max-func-body-length\n\n\n  DateRangePicker.prototype.selectRange = function (event, element) {\n    var leftCalendar;\n    var rightCalendar;\n\n    if (event) {\n      event.preventDefault();\n    }\n\n    var date;\n    date = isNullOrUndefined(event) ? this.getIdValue(null, element) : this.getIdValue(event, null);\n    var y = date.getFullYear();\n    var m = date.getMonth();\n    var firstDay = new Date(y, m, 1);\n    var lastDay = new Date(y, m + 1, 0);\n    var firstMonth = new Date(y, 0, 1);\n    var lastMonth = new Date(y, 11, 31);\n\n    if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue)) {\n      if (!this.isMobile || this.isMobile && !this.endButton.element.classList.contains(ACTIVE)) {\n        this.removeSelection();\n      }\n    } else if (this.isMobile && this.startButton.element.classList.contains(ACTIVE)) {\n      this.removeSelection();\n    }\n\n    var ele = element || event.currentTarget;\n\n    if (isNullOrUndefined(this.startValue)) {\n      if (!isNullOrUndefined(this.previousStartValue)) {\n        date.setHours(this.previousStartValue.getHours());\n        date.setMinutes(this.previousStartValue.getMinutes());\n        date.setSeconds(this.previousStartValue.getSeconds());\n      }\n\n      this.startValue = this.depth === 'Month' ? new Date(this.checkValue(date)) : this.depth === 'Year' ? firstDay : firstMonth;\n      this.endValue = null;\n      this.setValue();\n      addClass([ele], STARTDATE);\n      this.addSelectedAttributes(ele, this.startValue, true);\n\n      if (ele.classList.contains(OTHERMONTH)) {\n        this.otherMonthSelect(ele, true);\n      }\n\n      this.checkMinMaxDays();\n      this.applyButton.disabled = true;\n      this.applyButton.element.disabled = true;\n\n      if (this.isMobile) {\n        this.endButton.element.classList.add(ACTIVE);\n        this.startButton.element.classList.remove(ACTIVE);\n        this.endButton.element.removeAttribute('disabled');\n        this.selectableDates();\n      }\n\n      this.trigger('select', this.rangeArgs(event));\n    } else {\n      if (+date === +this.startValue || +date > +this.startValue) {\n        if (+date === +this.startValue && !isNullOrUndefined(this.minDays) && this.minDays > 1) {\n          return;\n        }\n\n        this.endValue = null;\n        this.setValue();\n\n        if (this.isMobile || element) {\n          this.hoverSelection(event, element);\n        }\n\n        if (!isNullOrUndefined(this.previousEndValue)) {\n          date.setHours(this.previousEndValue.getHours());\n          date.setMinutes(this.previousEndValue.getMinutes());\n          date.setSeconds(this.previousEndValue.getSeconds());\n        }\n\n        this.endValue = this.depth === 'Month' ? new Date(this.checkValue(date)) : this.depth === 'Year' ? lastDay : lastMonth;\n        this.setValue();\n        var endEle = this.popupObj.element.querySelectorAll('.' + ENDDATE);\n\n        if (this.isMobile) {\n          this.startButton.element.classList.remove(ACTIVE);\n          this.endButton.element.classList.add(ACTIVE);\n\n          for (var _i = 0, endEle_1 = endEle; _i < endEle_1.length; _i++) {\n            var ele_1 = endEle_1[_i];\n            ele_1.removeAttribute('aria-label');\n\n            if (!ele_1.classList.contains(STARTDATE)) {\n              ele_1.setAttribute('aria-selected', 'false');\n              removeClass([ele_1], [ENDDATE, SELECTED]);\n            } else {\n              this.addSelectedAttributes(ele_1, this.startValue, true);\n              removeClass([ele_1], [ENDDATE]);\n            }\n          }\n        }\n\n        addClass([ele], ENDDATE);\n\n        if (+this.endValue === +this.startValue) {\n          this.addSelectedAttributes(ele, this.endValue, false, true);\n        } else {\n          this.addSelectedAttributes(ele, this.endValue, false);\n        }\n\n        if (ele.classList.contains(OTHERMONTH)) {\n          if (+this.endValue === +this.startValue) {\n            this.otherMonthSelect(ele, false, true);\n          } else {\n            this.otherMonthSelect(ele, false);\n          }\n        }\n\n        endEle = this.popupObj.element.querySelectorAll('.' + ENDDATE);\n\n        for (var _a = 0, endEle_2 = endEle; _a < endEle_2.length; _a++) {\n          var ele_2 = endEle_2[_a];\n\n          if (ele_2.classList.contains(STARTDATE)) {\n            removeClass([ele_2], [RANGEHOVER]);\n          }\n        }\n\n        this.applyButton.disabled = false;\n        this.applyButton.element.disabled = false;\n\n        if (!this.isMobile) {\n          this.removeClassDisabled();\n        }\n\n        this.disabledDateRender();\n        this.trigger('select', this.rangeArgs(event));\n      } else if (+date < +this.startValue) {\n        this.removeClassDisabled();\n        this.startValue = this.depth === 'Month' ? new Date(this.checkValue(date)) : this.depth === 'Year' ? firstDay : firstMonth;\n        this.setValue();\n        this.removeSelectedAttributes();\n        removeClass(this.popupObj.element.querySelectorAll('.' + STARTDATE), [STARTDATE, SELECTED]);\n        addClass([ele], STARTDATE);\n        this.addSelectedAttributes(ele, this.startValue, true);\n\n        if (ele.classList.contains(OTHERMONTH)) {\n          this.otherMonthSelect(ele, true);\n        }\n\n        this.checkMinMaxDays();\n      }\n    }\n\n    if (event) {\n      leftCalendar = closest(event.target, '.' + LEFTCALENDER);\n    }\n\n    if (!isNullOrUndefined(leftCalendar)) {\n      this.leftCalendar.children[1].firstElementChild.focus();\n    } else {\n      if (event) {\n        rightCalendar = event && closest(event.target, '.' + RIGHTCALENDER);\n      }\n\n      if (!isNullOrUndefined(rightCalendar)) {\n        this.rightCalendar.children[1].firstElementChild.focus();\n      }\n    }\n\n    addClass([ele], SELECTED);\n    this.updateHeader();\n    this.removeFocusedDate();\n  };\n\n  DateRangePicker.prototype.selectableDates = function () {\n    if (!isNullOrUndefined(this.startValue)) {\n      var tdCells = this.calendarElement.querySelectorAll('.' + CALENDAR + ' td');\n      var isStartDate = false;\n\n      if (this.currentView() === this.depth) {\n        for (var _i = 0, tdCells_4 = tdCells; _i < tdCells_4.length; _i++) {\n          var ele = tdCells_4[_i];\n\n          if (!ele.classList.contains(STARTDATE) && !ele.classList.contains(WEEKNUMBER)) {\n            if (!ele.classList.contains(DISABLED)) {\n              var eleDate = this.getIdValue(null, ele);\n\n              if (+eleDate < +this.startValue) {\n                addClass([ele], [DATEDISABLED, DISABLED, OVERLAY]);\n                EventHandler.clearEvents(ele);\n                continue;\n              } else {\n                break;\n              }\n            }\n          }\n\n          if (ele.classList.contains(STARTDATE) && !ele.classList.contains(OTHERMONTH)) {\n            isStartDate = true;\n            break;\n          }\n        }\n\n        if (isStartDate) {\n          if (!this.previousIcon.classList.contains(DISABLED)) {\n            addClass([this.previousIcon], [ICONDISABLED, DISABLED, OVERLAY]);\n          }\n        }\n      } else {\n        for (var _a = 0, tdCells_5 = tdCells; _a < tdCells_5.length; _a++) {\n          var ele = tdCells_5[_a];\n          var startMonth = this.startValue.getMonth();\n          var startYear = this.startValue.getFullYear();\n          var element = this.getIdValue(null, ele);\n\n          if (!this.startButton.element.classList.contains(ACTIVE) && (this.currentView() === 'Year' && element.getMonth() < startMonth && element.getFullYear() <= startYear || this.currentView() === 'Decade' && element.getMonth() <= startMonth && element.getFullYear() < startYear)) {\n            addClass([ele], [DISABLED]);\n          } else {\n            break;\n          }\n        }\n\n        if (tdCells[0].classList.contains(DISABLED)) {\n          this.previousIconHandler(true);\n        } else if (tdCells[tdCells.length - 1].classList.contains(DISABLED)) {\n          this.nextIconHandler(true);\n        }\n      }\n    }\n  };\n\n  DateRangePicker.prototype.updateMinMaxDays = function (calendar) {\n    if (!isNullOrUndefined(this.startValue) && isNullOrUndefined(this.endValue) || this.isMobile && this.endButton.element.classList.contains(ACTIVE)) {\n      if (!isNullOrUndefined(this.minDays) && this.minDays > 0 || !isNullOrUndefined(this.maxDays) && this.maxDays > 0) {\n        var minDate = new Date(new Date(+this.startValue).setDate(this.startValue.getDate() + (this.minDays - 1)));\n        var maxDate = new Date(new Date(+this.startValue).setDate(this.startValue.getDate() + (this.maxDays - 1)));\n        minDate = !isNullOrUndefined(this.minDays) && this.minDays > 0 ? minDate : null;\n        maxDate = !isNullOrUndefined(this.maxDays) && this.maxDays > 0 ? maxDate : null;\n\n        if (this.currentView() === 'Year') {\n          minDate = isNullOrUndefined(minDate) ? null : new Date(minDate.getFullYear(), minDate.getMonth(), 0);\n          maxDate = isNullOrUndefined(maxDate) ? null : new Date(maxDate.getFullYear(), maxDate.getMonth(), 1);\n        } else if (this.currentView() === 'Decade') {\n          minDate = isNullOrUndefined(minDate) ? null : new Date(minDate.getFullYear() - 1, 11, 1);\n          maxDate = isNullOrUndefined(maxDate) ? null : new Date(maxDate.getFullYear(), 0, 1);\n        }\n\n        var tdCells = calendar.querySelectorAll('.' + CALENDAR + ' td');\n        var maxEle = void 0;\n\n        for (var _i = 0, tdCells_6 = tdCells; _i < tdCells_6.length; _i++) {\n          var ele = tdCells_6[_i];\n\n          if (!ele.classList.contains(STARTDATE) && !ele.classList.contains(WEEKNUMBER)) {\n            var eleDate = this.getIdValue(null, ele);\n\n            if (!isNullOrUndefined(minDate) && +eleDate === +minDate && ele.classList.contains(DISABLED)) {\n              minDate.setDate(minDate.getDate() + 1);\n            }\n\n            if (!ele.classList.contains(DISABLED)) {\n              if (+eleDate <= +this.startValue) {\n                continue;\n              }\n\n              if (!isNullOrUndefined(minDate) && +eleDate < +minDate) {\n                addClass([ele], [DATEDISABLED, DISABLED, OVERLAY]);\n                EventHandler.clearEvents(ele);\n              }\n\n              if (!isNullOrUndefined(maxDate) && +eleDate > +maxDate) {\n                addClass([ele], [DATEDISABLED, DISABLED, OVERLAY]);\n                this.isMaxDaysClicked = true;\n                EventHandler.clearEvents(ele);\n\n                if (isNullOrUndefined(maxEle) && !ele.classList.contains(OTHERMONTH)) {\n                  maxEle = ele;\n                }\n              }\n            }\n          }\n        }\n\n        if (!isNullOrUndefined(maxEle)) {\n          if (this.isMobile) {\n            if (!this.nextIcon.classList.contains(DISABLED)) {\n              addClass([this.nextIcon], [ICONDISABLED, DISABLED, OVERLAY]);\n            }\n          } else {\n            var calendar_1 = closest(maxEle, '.' + RIGHTCALENDER);\n            calendar_1 = isNullOrUndefined(calendar_1) ? this.leftCalendar : calendar_1;\n            var isLeftCalendar = calendar_1.classList.contains(LEFTCALENDER);\n\n            if (!isLeftCalendar) {\n              if (!this.rightCalNextIcon.classList.contains(DISABLED)) {\n                addClass([this.rightCalNextIcon], [ICONDISABLED, DISABLED, OVERLAY]);\n              }\n            } else {\n              if (!this.rightCalNextIcon.classList.contains(DISABLED)) {\n                addClass([this.rightCalNextIcon], [ICONDISABLED, DISABLED, OVERLAY]);\n              }\n\n              if (!this.leftCalNextIcon.classList.contains(DISABLED)) {\n                addClass([this.leftCalNextIcon], [ICONDISABLED, DISABLED, OVERLAY]);\n              }\n\n              if (!this.rightCalPrevIcon.classList.contains(DISABLED)) {\n                addClass([this.rightCalPrevIcon], [ICONDISABLED, DISABLED, OVERLAY]);\n              }\n            }\n          }\n        }\n      }\n    } else {\n      this.isMaxDaysClicked = false;\n    }\n  };\n\n  DateRangePicker.prototype.removeClassDisabled = function () {\n    var tdCells;\n    tdCells = this.popupObj.element.querySelectorAll('.' + CALENDAR + ' td' + '.' + DATEDISABLED);\n\n    for (var _i = 0, tdCells_7 = tdCells; _i < tdCells_7.length; _i++) {\n      var ele = tdCells_7[_i];\n\n      if (ele.classList.contains(DATEDISABLED)) {\n        removeClass([ele], [DATEDISABLED, DISABLED, OVERLAY]);\n        EventHandler.add(ele, 'click', this.selectRange, this);\n\n        if (!this.isMobile) {\n          EventHandler.add(ele, 'mouseover', this.hoverSelection, this);\n        }\n      }\n    }\n\n    if (this.isMobile) {\n      if (this.nextIcon.classList.contains(ICONDISABLED)) {\n        removeClass([this.nextIcon], [ICONDISABLED, DISABLED, OVERLAY]);\n      }\n\n      if (this.previousIcon.classList.contains(ICONDISABLED)) {\n        removeClass([this.previousIcon], [ICONDISABLED, DISABLED, OVERLAY]);\n      }\n    } else {\n      if (this.rightCalNextIcon.classList.contains(ICONDISABLED)) {\n        removeClass([this.rightCalNextIcon], [ICONDISABLED, DISABLED, OVERLAY]);\n      }\n\n      if (this.rightCalPrevIcon.classList.contains(ICONDISABLED)) {\n        removeClass([this.rightCalPrevIcon], [ICONDISABLED, DISABLED, OVERLAY]);\n      }\n\n      if (this.leftCalNextIcon.classList.contains(ICONDISABLED)) {\n        removeClass([this.leftCalNextIcon], [ICONDISABLED, DISABLED, OVERLAY]);\n      }\n    }\n  };\n\n  DateRangePicker.prototype.updateHeader = function () {\n    var format = {\n      type: 'date',\n      skeleton: isBlazor() ? 'D' : 'yMMMd'\n    };\n\n    if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue)) {\n      var range = Math.round(Math.abs((this.startValue.getTime() - this.endValue.getTime()) / (1000 * 60 * 60 * 24))) + 1;\n\n      if (!isNullOrUndefined(this.disabledDayCnt)) {\n        range = range - this.disabledDayCnt;\n        this.disabledDayCnt = null;\n      }\n\n      this.popupObj.element.querySelector('.' + DAYSPAN).textContent = range.toString() + ' ' + this.l10n.getConstant('days');\n    } else {\n      this.popupObj.element.querySelector('.' + DAYSPAN).textContent = this.l10n.getConstant('selectedDays');\n    }\n\n    if (!this.isMobile) {\n      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue)) {\n        this.popupObj.element.querySelector('.' + ENDLABEL).textContent = this.globalize.formatDate(this.endValue, format);\n      } else {\n        this.popupObj.element.querySelector('.' + ENDLABEL).textContent = this.l10n.getConstant('endLabel');\n      }\n\n      if (!isNullOrUndefined(this.startValue)) {\n        this.popupObj.element.querySelector('.' + STARTLABEL).textContent = this.globalize.formatDate(this.startValue, format);\n      } else {\n        this.popupObj.element.querySelector('.' + STARTLABEL).textContent = this.l10n.getConstant('startLabel');\n      }\n    } else {\n      if (!isNullOrUndefined(this.startValue)) {\n        this.startButton.element.textContent = this.globalize.formatDate(this.startValue, format);\n      } else {\n        this.startButton.element.textContent = this.l10n.getConstant('startLabel');\n      }\n\n      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue)) {\n        this.endButton.element.textContent = this.globalize.formatDate(this.endValue, format);\n      } else {\n        this.endButton.element.textContent = this.l10n.getConstant('endLabel');\n      }\n    }\n\n    if (this.isDateDisabled(this.startValue) || this.isDateDisabled(this.endValue) || !isNullOrUndefined(this.startValue) && +this.startValue < +this.min || !isNullOrUndefined(this.endValue) && +this.endValue > +this.max || !isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue) && +this.startValue > +this.endValue) {\n      if (!this.isMobile) {\n        this.popupObj.element.querySelector('.' + DAYSPAN).textContent = this.l10n.getConstant('selectedDays');\n        this.popupObj.element.querySelector('.' + STARTLABEL).textContent = this.l10n.getConstant('startLabel');\n        this.popupObj.element.querySelector('.' + ENDLABEL).textContent = this.l10n.getConstant('endLabel');\n      } else {\n        this.startButton.element.textContent = this.l10n.getConstant('startLabel');\n        this.endButton.element.textContent = this.l10n.getConstant('endLabel');\n        this.popupObj.element.querySelector('.' + DAYSPAN).textContent = this.l10n.getConstant('selectedDays');\n      }\n    }\n\n    if (this.popupObj.element.querySelector('#custom_range')) {\n      this.popupObj.element.querySelector('#custom_range').textContent = this.l10n.getConstant('customRange') !== '' ? this.l10n.getConstant('customRange') : 'Custom Range';\n    }\n  };\n\n  DateRangePicker.prototype.removeSelection = function () {\n    this.startValue = null;\n    this.endValue = null;\n    this.setValue();\n    this.removeSelectedAttributes();\n\n    if (this.popupObj) {\n      if (this.popupObj.element.querySelectorAll('.' + SELECTED).length > 0) {\n        removeClass(this.popupObj.element.querySelectorAll('.' + SELECTED), [STARTDATE, ENDDATE, SELECTED]);\n      }\n\n      if (this.popupObj.element.querySelectorAll('.' + FOCUSDATE).length > 0) {\n        removeClass(this.popupObj.element.querySelectorAll('.' + FOCUSDATE), FOCUSDATE);\n      }\n\n      if (this.popupObj.element.querySelectorAll('.' + RANGEHOVER).length > 0) {\n        removeClass(this.popupObj.element.querySelectorAll('.' + RANGEHOVER), [RANGEHOVER]);\n      }\n    }\n  };\n\n  DateRangePicker.prototype.addSelectedAttributes = function (ele, date, isStartDate, sameDate) {\n    if (ele) {\n      var title = this.globalize.formatDate(date, {\n        type: 'date',\n        skeleton: isBlazor() ? 'D' : 'full'\n      });\n\n      if (!isNullOrUndefined(sameDate) && sameDate) {\n        ele.setAttribute('aria-label', 'The current start and end date is ' + '' + title);\n      } else {\n        ele.setAttribute('aria-label', 'The current ' + (isStartDate ? 'start' : 'end') + ' date is ' + '' + title);\n      }\n\n      ele.setAttribute('aria-selected', 'true');\n    }\n  };\n\n  DateRangePicker.prototype.removeSelectedAttributes = function () {\n    if (this.popupObj) {\n      var start = this.popupObj.element.querySelectorAll('.' + STARTDATE);\n\n      for (var _i = 0, start_1 = start; _i < start_1.length; _i++) {\n        var ele = start_1[_i];\n        ele.setAttribute('aria-selected', 'false');\n        ele.removeAttribute('aria-label');\n      }\n\n      var end = this.popupObj.element.querySelectorAll('.' + ENDDATE);\n\n      for (var _a = 0, end_1 = end; _a < end_1.length; _a++) {\n        var ele = end_1[_a];\n        ele.setAttribute('aria-selected', 'false');\n        ele.removeAttribute('aria-label');\n      }\n    }\n  };\n\n  DateRangePicker.prototype.updateCalendarElement = function (calendar) {\n    if (calendar.classList.contains(LEFTCALENDER)) {\n      this.calendarElement = this.leftCalendar;\n      this.currentDate = this.leftCalCurrentDate;\n      this.previousIcon = this.leftCalPrevIcon;\n      this.nextIcon = this.leftCalNextIcon;\n    } else {\n      this.calendarElement = this.rightCalendar;\n      this.currentDate = this.rightCalCurrentDate;\n      this.previousIcon = this.rightCalPrevIcon;\n      this.nextIcon = this.rightCalNextIcon;\n    }\n\n    this.contentElement = calendar.querySelector('.' + CONTENT);\n    this.tableBodyElement = select('.' + CONTENT + ' tbody', calendar);\n    this.table = calendar.querySelector('.' + CONTENT).getElementsByTagName('table')[0];\n    this.headerTitleElement = calendar.querySelector('.' + HEADER + ' .' + TITLE);\n    this.headerElement = calendar.querySelector('.' + HEADER);\n  };\n\n  DateRangePicker.prototype.navPrevMonth = function (e) {\n    e.preventDefault();\n    var ele = closest(e.target, '.' + LEFTCALENDER);\n    ele = isNullOrUndefined(ele) ? closest(e.target, '.' + RIGHTCALENDER) : ele;\n    this.updateCalendarElement(ele);\n    this.navigatePrevious(e);\n\n    if (!isNullOrUndefined(this.startValue) && isNullOrUndefined(this.endValue)) {\n      this.updateMinMaxDays(ele);\n    }\n\n    this.updateControl(ele);\n  };\n\n  DateRangePicker.prototype.deviceNavigation = function (ele) {\n    this.deviceCalendarEvent();\n    this.updateRange([this.popupObj.element.querySelector('.' + CALENDAR)]);\n\n    if (this.endButton.element.classList.contains(ACTIVE)) {\n      this.updateMinMaxDays(this.popupObj.element.querySelector('.' + CALENDAR));\n    }\n\n    if (this.endButton.element.classList.contains(ACTIVE)) {\n      this.selectableDates();\n    }\n\n    if (this.currentView() === this.depth) {\n      this.bindCalendarCellEvents();\n    }\n\n    this.removeFocusedDate();\n  };\n\n  DateRangePicker.prototype.updateControl = function (calendar) {\n    if (calendar.classList.contains(RIGHTCALENDER)) {\n      this.rightCalCurrentDate = new Date(+this.currentDate);\n    } else {\n      this.leftCalCurrentDate = new Date(+this.currentDate);\n    }\n\n    this.calendarIconEvent();\n\n    if (this.depth === 'Month' && this.leftCalendar.querySelector('.e-content').classList.contains('e-month') && this.rightCalendar.querySelector('.e-content').classList.contains('e-month') || this.depth === 'Year' && this.leftCalendar.querySelector('.e-content').classList.contains('e-year') && this.rightCalendar.querySelector('.e-content').classList.contains('e-year') || this.depth === 'Decade' && this.leftCalendar.querySelector('.e-content').classList.contains('e-decade') && this.rightCalendar.querySelector('.e-content').classList.contains('e-decade') || this.isMobile) {\n      this.bindCalendarCellEvents();\n    }\n\n    this.removeFocusedDate();\n    this.updateRange([calendar]);\n  };\n\n  DateRangePicker.prototype.navNextMonth = function (event) {\n    event.preventDefault();\n    var ele = closest(event.target, '.' + LEFTCALENDER);\n    ele = isNullOrUndefined(ele) ? closest(event.target, '.' + RIGHTCALENDER) : ele;\n    this.updateCalendarElement(ele);\n    this.navigateNext(event);\n\n    if (!isNullOrUndefined(this.startValue) && isNullOrUndefined(this.endValue)) {\n      this.updateMinMaxDays(ele);\n    }\n\n    this.updateControl(ele);\n  };\n\n  DateRangePicker.prototype.isPopupOpen = function () {\n    if (!isNullOrUndefined(this.popupObj) && this.popupObj.element.classList.contains(POPUP)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  DateRangePicker.prototype.createRangeHeader = function () {\n    var labelContainer = this.createElement('div', {\n      className: STARTENDCONTAINER\n    });\n\n    if (!this.isMobile) {\n      var startLabel = this.createElement('a', {\n        className: STARTLABEL\n      });\n      var endLabel = this.createElement('a', {\n        className: ENDLABEL\n      });\n      var changeIcon = this.createElement('span', {\n        className: CHANGEICON\n      });\n      attributes(startLabel, {\n        'aria-atomic': 'true',\n        'aria-live': 'assertive',\n        'aria-label': 'Start Date',\n        'role': 'button'\n      });\n      attributes(endLabel, {\n        'aria-atomic': 'true',\n        'aria-live': 'assertive',\n        'aria-label': 'End Date',\n        'role': 'button'\n      });\n      labelContainer.appendChild(startLabel);\n      labelContainer.appendChild(changeIcon);\n      labelContainer.appendChild(endLabel);\n      startLabel.textContent = this.l10n.getConstant('startLabel');\n      endLabel.textContent = this.l10n.getConstant('endLabel');\n    } else {\n      var endBtn = this.createElement('button', {\n        className: ENDBUTTON\n      });\n      var startBtn = this.createElement('button', {\n        className: STARTBUTTON\n      });\n      this.startButton = new Button({\n        content: this.l10n.getConstant('startLabel')\n      }, startBtn);\n      this.endButton = new Button({\n        content: this.l10n.getConstant('endLabel')\n      }, endBtn);\n      labelContainer.appendChild(startBtn);\n      labelContainer.appendChild(endBtn);\n    }\n\n    return labelContainer;\n  };\n\n  DateRangePicker.prototype.disableInput = function () {\n    if (this.strictMode) {\n      if (!isNullOrUndefined(this.previousStartValue) && !isNullOrUndefined(this.previousEndValue)) {\n        this.startValue = this.previousStartValue;\n        this.endValue = this.previousEndValue;\n        this.setValue();\n        this.updateInput();\n      }\n    } else {\n      this.updateInput();\n      this.clearRange();\n      this.setProperties({\n        startDate: null\n      }, true);\n      this.setProperties({\n        endDate: null\n      }, true);\n      this.startValue = null;\n      this.endValue = null;\n      this.setValue();\n      this.errorClass();\n    }\n\n    this.setProperties({\n      enabled: false\n    }, true);\n    Input.setEnabled(this.enabled, this.inputElement);\n    this.bindEvents();\n  };\n\n  DateRangePicker.prototype.validateMinMax = function () {\n    this.min = isNullOrUndefined(this.min) || !+this.min ? this.min = new Date(1900, 0, 1) : this.min;\n    this.max = isNullOrUndefined(this.max) || !+this.max ? this.max = new Date(2099, 11, 31) : this.max;\n\n    if (!(this.min <= this.max)) {\n      this.disableInput();\n      return;\n    }\n\n    if (!isNullOrUndefined(this.minDays) && !isNullOrUndefined(this.maxDays)) {\n      if (this.maxDays > 0 && this.minDays > 0 && this.minDays > this.maxDays) {\n        this.maxDays = null;\n      }\n    }\n\n    if (!isNullOrUndefined(this.minDays) && this.minDays < 0) {\n      this.minDays = null;\n    }\n\n    if (!isNullOrUndefined(this.maxDays) && this.maxDays < 0) {\n      this.maxDays = null;\n    }\n  };\n\n  DateRangePicker.prototype.validateRangeStrict = function () {\n    if (!isNullOrUndefined(this.startValue)) {\n      if (+this.startValue <= +this.min) {\n        this.startValue = this.min;\n        this.setValue();\n      } else if (+this.startValue >= +this.min && +this.startValue >= +this.max) {\n        this.startValue = this.max;\n      }\n    }\n\n    if (!isNullOrUndefined(this.endValue)) {\n      if (+this.endValue > +this.max) {\n        this.endValue = this.max;\n        this.setValue();\n      } else if (+this.endValue < +this.min) {\n        this.endValue = this.min;\n        this.setValue();\n      }\n    }\n\n    this.validateMinMaxDays();\n  };\n\n  DateRangePicker.prototype.validateRange = function () {\n    this.validateMinMaxDays();\n  };\n\n  DateRangePicker.prototype.validateMinMaxDays = function () {\n    if (!isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue)) {\n      var range = Math.round(Math.abs((this.startValue.getTime() - this.endValue.getTime()) / (1000 * 60 * 60 * 24))) + 1;\n\n      if (!isNullOrUndefined(this.minDays) && this.minDays > 0 && !(range >= this.minDays)) {\n        if (this.strictMode) {\n          var date = new Date(+this.startValue);\n          date.setDate(date.getDate() + (this.minDays - 1));\n\n          if (+date > +this.max) {\n            this.endValue = this.max;\n            this.setValue();\n          } else {\n            this.endValue = date;\n            this.setValue();\n          }\n        } else {\n          this.startValue = null;\n          this.endValue = null;\n          this.setValue();\n        }\n      }\n\n      if (!isNullOrUndefined(this.maxDays) && this.maxDays > 0 && !(range <= this.maxDays)) {\n        if (this.strictMode) {\n          this.endValue = new Date(+this.startValue);\n          this.endValue.setDate(this.endValue.getDate() + (this.maxDays - 1));\n          this.setValue();\n        } else {\n          this.startValue = null;\n          this.endValue = null;\n          this.setValue();\n        }\n      }\n    }\n  };\n\n  DateRangePicker.prototype.renderCalendar = function () {\n    this.calendarElement = this.createElement('div');\n    this.calendarElement.classList.add(CALENDAR);\n\n    if (this.enableRtl) {\n      this.calendarElement.classList.add(RTL);\n    }\n\n    attributes(this.calendarElement, {\n      'role': 'calendar'\n    });\n\n    _super.prototype.createHeader.call(this);\n\n    _super.prototype.createContent.call(this);\n  };\n\n  DateRangePicker.prototype.isSameMonth = function (start, end) {\n    if (start.getMonth() === end.getMonth() && start.getFullYear() === end.getFullYear()) {\n      return true;\n    }\n\n    return false;\n  };\n\n  DateRangePicker.prototype.isSameYear = function (start, end) {\n    if (start.getFullYear() === end.getFullYear()) {\n      return true;\n    }\n\n    return false;\n  };\n\n  DateRangePicker.prototype.isSameDecade = function (start, end) {\n    var startYear = start.getFullYear();\n    var endYear = end.getFullYear();\n\n    if (startYear - startYear % 10 === endYear - endYear % 10) {\n      return true;\n    }\n\n    return false;\n  };\n\n  DateRangePicker.prototype.startMonthCurrentDate = function () {\n    if (this.isSameMonth(this.min, this.max) || +this.currentDate > +this.max || this.isSameMonth(this.currentDate, this.max)) {\n      this.currentDate = new Date(+this.max);\n      this.currentDate.setDate(1);\n      this.currentDate.setMonth(this.currentDate.getMonth() - 1);\n    } else if (this.currentDate < this.min) {\n      this.currentDate = new Date(this.checkValue(this.min));\n    }\n  };\n\n  DateRangePicker.prototype.selectNextMonth = function () {\n    if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue) && !this.isSameMonth(this.endValue, this.currentDate) && !this.isDateDisabled(this.endValue) && !this.isDateDisabled(this.startValue)) {\n      this.currentDate = new Date(+this.endValue);\n    } else {\n      this.currentDate.setDate(1);\n      this.currentDate.setMonth(this.currentDate.getMonth() + 1);\n      return;\n    }\n\n    if (!isNullOrUndefined(this.startValue) && +this.startValue < +this.min || !isNullOrUndefined(this.endValue) && +this.endValue > +this.max || !isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue) && +this.startValue > +this.endValue) {\n      this.currentDate = new Date(new Date().setHours(0, 0, 0, 0));\n      this.currentDate.setDate(1);\n      var month = this.currentDate.getMonth() + 1;\n      this.currentDate.setMonth(month);\n    }\n  };\n\n  DateRangePicker.prototype.selectNextYear = function () {\n    if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue) && !this.isSameYear(this.endValue, this.currentDate) && !this.isDateDisabled(this.endValue) && !this.isDateDisabled(this.startValue)) {\n      this.currentDate = new Date(+this.endValue);\n    } else {\n      this.currentDate.setMonth(0);\n      var yr = this.currentDate.getFullYear() + 1;\n      this.currentDate.setFullYear(yr);\n      return;\n    }\n\n    if (!isNullOrUndefined(this.endValue) && +this.endValue > +this.max || !isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue) && +this.startValue > +this.endValue || !isNullOrUndefined(this.startValue) && +this.startValue < +this.min) {\n      this.currentDate = new Date(new Date().setHours(0, 0, 0, 0));\n      this.currentDate.setMonth(0);\n      this.currentDate.setFullYear(this.currentDate.getFullYear() + 1);\n    }\n  };\n\n  DateRangePicker.prototype.selectNextDecade = function () {\n    if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue) && !this.isSameDecade(this.endValue, this.currentDate) && !this.isDateDisabled(this.endValue) && !this.isDateDisabled(this.startValue)) {\n      this.currentDate = new Date(+this.endValue);\n    } else {\n      var decyr = this.currentDate.getFullYear() + 10;\n      this.currentDate.setFullYear(decyr);\n      return;\n    }\n\n    if (!isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue) && +this.startValue > +this.endValue || !isNullOrUndefined(this.endValue) && +this.endValue > +this.max || !isNullOrUndefined(this.startValue) && +this.startValue < +this.min) {\n      this.currentDate = new Date(new Date().setHours(0, 0, 0, 0));\n      this.currentDate.setFullYear(this.currentDate.getFullYear() + 10);\n    }\n  };\n\n  DateRangePicker.prototype.selectStartMonth = function () {\n    if (!isNullOrUndefined(this.startValue)) {\n      if (!isNullOrUndefined(this.max) && this.isSameMonth(this.startValue, this.max)) {\n        this.currentDate = new Date(+this.max);\n        this.currentDate.setDate(1);\n        this.currentDate.setMonth(this.currentDate.getMonth() - 1);\n      } else if (!(this.startValue >= this.min && this.startValue <= this.max) || this.isDateDisabled(this.startValue)) {\n        this.currentDate = new Date(new Date().setHours(0, 0, 0, 0));\n      } else {\n        this.currentDate = new Date(+this.startValue);\n      }\n    } else {\n      this.currentDate = new Date(new Date().setHours(0, 0, 0, 0));\n      this.startMonthCurrentDate();\n    }\n\n    if (!isNullOrUndefined(this.endValue) && +this.endValue > +this.max || !isNullOrUndefined(this.startValue) && +this.startValue < +this.min || !isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue) && +this.startValue > +this.endValue) {\n      this.currentDate = new Date(new Date().setHours(0, 0, 0, 0));\n    }\n\n    this.startMonthCurrentDate();\n  };\n\n  DateRangePicker.prototype.createCalendar = function () {\n    var calendarContainer = this.createElement('div', {\n      className: CALENDARCONTAINER\n    });\n\n    if (!this.isMobile) {\n      this.selectStartMonth();\n      this.renderCalendar();\n      this.leftCalCurrentDate = new Date(+this.currentDate);\n      this.calendarElement.classList.add(LEFTCALENDER);\n      this.leftCalPrevIcon = this.calendarElement.querySelector('.' + LEFTCALENDER + ' .' + PREVICON);\n      this.leftCalNextIcon = this.calendarElement.querySelector('.' + LEFTCALENDER + ' .' + NEXTICON);\n      this.leftTitle = this.calendarElement.querySelector('.' + LEFTCALENDER + ' .' + TITLE);\n      remove(this.calendarElement.querySelector('.' + LEFTCALENDER + ' .' + ICONCONTAINER));\n      this.calendarElement.querySelector('.' + LEFTCALENDER + ' .' + HEADER).appendChild(this.leftCalNextIcon);\n      this.calendarElement.querySelector('.' + LEFTCALENDER + ' .' + HEADER).appendChild(this.leftCalPrevIcon);\n      prepend([this.leftCalPrevIcon], this.calendarElement.querySelector('.' + LEFTCALENDER + ' .' + HEADER));\n      this.leftCalendar = this.calendarElement;\n      var leftContainer = this.createElement('div', {\n        className: LEFTCONTAINER\n      });\n      var rightContainer = this.createElement('div', {\n        className: RIGHTCONTAINER\n      });\n      leftContainer.appendChild(this.leftCalendar);\n      calendarContainer.appendChild(leftContainer);\n\n      if (!this.isMobile) {\n        EventHandler.add(this.leftTitle, 'click', this.leftNavTitle, this);\n      }\n\n      if (this.start === 'Month') {\n        this.selectNextMonth();\n      }\n\n      if (this.start === 'Year') {\n        this.selectNextYear();\n      }\n\n      if (this.start === 'Decade') {\n        this.selectNextDecade();\n      }\n\n      this.renderCalendar();\n      this.rightCalCurrentDate = new Date(+this.currentDate);\n      addClass([this.calendarElement], RIGHTCALENDER);\n      this.rightCalendar = this.calendarElement;\n      removeClass([this.leftCalendar && this.leftCalendar.querySelector('.e-content tbody')], 'e-zoomin');\n      removeClass([this.rightCalendar && this.rightCalendar.querySelector('.e-content tbody')], 'e-zoomin');\n      this.rightCalPrevIcon = this.calendarElement.querySelector('.' + RIGHTCALENDER + ' .' + PREVICON);\n      this.rightCalNextIcon = this.calendarElement.querySelector('.' + RIGHTCALENDER + ' .' + NEXTICON);\n      this.rightTitle = this.calendarElement.querySelector('.' + RIGHTCALENDER + ' .' + TITLE);\n      remove(this.calendarElement.querySelector('.' + RIGHTCALENDER + ' .' + ICONCONTAINER));\n      this.calendarElement.querySelector('table').setAttribute('tabindex', '-1');\n      this.calendarElement.querySelector('.' + RIGHTCALENDER + ' .' + HEADER).appendChild(this.rightCalNextIcon);\n      this.calendarElement.querySelector('.' + RIGHTCALENDER + ' .' + HEADER).appendChild(this.rightCalPrevIcon);\n      prepend([this.rightCalPrevIcon], this.calendarElement.querySelector('.' + RIGHTCALENDER + ' .' + HEADER));\n      rightContainer.appendChild(this.rightCalendar);\n      calendarContainer.appendChild(rightContainer);\n\n      if (!this.isMobile) {\n        EventHandler.add(this.rightTitle, 'click', this.rightNavTitle, this);\n      }\n    } else {\n      if (!isNullOrUndefined(this.startValue)) {\n        this.currentDate = new Date(+this.startValue);\n      }\n\n      _super.prototype.validateDate.call(this);\n\n      _super.prototype.minMaxUpdate.call(this);\n\n      _super.prototype.render.call(this);\n\n      var prevIcon = this.calendarElement.querySelector('.' + CALENDAR + ' .' + PREVICON);\n      var nextIcon = this.calendarElement.querySelector('.' + CALENDAR + ' .' + NEXTICON);\n      remove(this.calendarElement.querySelector('.' + CALENDAR + ' .' + ICONCONTAINER));\n      this.calendarElement.querySelector('.' + CALENDAR + ' .' + HEADER).appendChild(nextIcon);\n      this.calendarElement.querySelector('.' + CALENDAR + ' .' + HEADER).appendChild(prevIcon);\n      prepend([prevIcon], this.calendarElement.querySelector('.' + CALENDAR + ' .' + HEADER));\n      this.deviceCalendar = this.calendarElement;\n      calendarContainer.appendChild(this.calendarElement);\n      this.headerTitleElement = this.calendarElement.querySelector('.' + CALENDAR + ' .' + HEADER + ' .' + TITLE);\n    }\n\n    return calendarContainer;\n  };\n\n  DateRangePicker.prototype.leftNavTitle = function (e) {\n    if (this.isPopupOpen()) {\n      this.calendarElement = this.leftCalendar;\n      this.calendarNavigation(e, this.calendarElement);\n    }\n  };\n\n  DateRangePicker.prototype.calendarNavigation = function (e, element) {\n    this.table = element.querySelector('table');\n    this.headerTitleElement = element.querySelector('.e-title');\n    this.tableBodyElement = element.querySelector('tbody');\n    this.tableHeadElement = element.querySelector('thead');\n    this.contentElement = element.querySelector('.e-content');\n    this.updateCalendarElement(element);\n\n    _super.prototype.navigateTitle.call(this, e);\n\n    this.updateNavIcons();\n  };\n\n  DateRangePicker.prototype.rightNavTitle = function (e) {\n    if (this.isPopupOpen()) {\n      this.calendarElement = this.rightCalendar;\n      this.calendarNavigation(e, this.calendarElement);\n    }\n  };\n\n  DateRangePicker.prototype.clickEventEmitter = function (e) {\n    if (!this.isMobile) {\n      if (closest(e.target, '.e-calendar.e-left-calendar')) {\n        this.calendarElement = this.leftCalendar;\n        this.updateCalendarElement(this.leftCalendar);\n      } else {\n        this.calendarElement = this.rightCalendar;\n        this.updateCalendarElement(this.rightCalendar);\n      }\n    }\n  };\n  /**\n   * Gets the current view of the Calendar.\n   * @returns string\n   * @private\n   * @hidden\n   */\n\n\n  DateRangePicker.prototype.currentView = function () {\n    return _super.prototype.currentView.call(this);\n  };\n\n  DateRangePicker.prototype.getCalendarView = function (view) {\n    if (view === 'Year') {\n      return 'Year';\n    } else if (view === 'Decade') {\n      return 'Decade';\n    } else {\n      return 'Month';\n    }\n  };\n\n  DateRangePicker.prototype.navigatedEvent = function (e) {\n    this.trigger('navigated', this.navigatedArgs);\n\n    if (!isNullOrUndefined(this.popupObj)) {\n      var element = void 0;\n      var view = this.getCalendarView(this.currentView());\n\n      if (this.isMobile) {\n        if (view === this.depth) {\n          this.bindCalendarCellEvents();\n          this.deviceNavigation();\n          this.removeFocusedDate();\n          this.checkMinMaxDays();\n        } else {\n          this.selectableDates();\n        }\n      } else {\n        if (!this.isMobile && view === this.depth) {\n          element = this.calendarElement.classList.contains('e-left-calendar') ? this.leftCalendar : this.rightCalendar;\n\n          if (element === this.leftCalendar && (e && !e.currentTarget.children[0].classList.contains('e-icons') || !isNullOrUndefined(this.controlDown))) {\n            this.leftCalCurrentDate = new Date(+this.currentDate);\n            this.effect = '';\n            this.currentDate = this.leftCalCurrentDate;\n            this.updateCalendarElement(this.leftCalendar);\n            this.updateControl(this.leftCalendar);\n            this.updateCalendarElement(this.rightCalendar);\n\n            _super.prototype.navigateTo.call(this, view, this.rightCalCurrentDate);\n\n            this.updateControl(this.rightCalendar);\n            this.updateNavIcons();\n            this.calendarIconEvent();\n            this.calendarIconRipple();\n            this.controlDown = null;\n          } else if (e && !e.currentTarget.children[0].classList.contains('e-icons') || !isNullOrUndefined(this.controlDown)) {\n            this.rightCalCurrentDate = new Date(+this.currentDate);\n            this.effect = '';\n            this.currentDate = this.rightCalCurrentDate;\n            this.updateCalendarElement(this.rightCalendar);\n            this.updateControl(this.rightCalendar);\n            this.updateCalendarElement(this.leftCalendar);\n\n            if (this.startValue && isNullOrUndefined(this.endValue)) {\n              if (view === 'Month' && this.startValue.getMonth() < this.rightCalCurrentDate.getMonth() && this.startValue.getFullYear() <= this.rightCalCurrentDate.getFullYear()) {\n                _super.prototype.navigateTo.call(this, view, new Date(+this.startValue));\n              } else if (view === 'Year' && this.startValue.getFullYear() < this.rightCalCurrentDate.getFullYear()) {\n                _super.prototype.navigateTo.call(this, view, new Date(+this.startValue));\n              } else {\n                _super.prototype.navigateTo.call(this, view, this.leftCalCurrentDate);\n              }\n            } else {\n              _super.prototype.navigateTo.call(this, view, this.leftCalCurrentDate);\n            }\n\n            this.updateControl(this.leftCalendar);\n            this.updateNavIcons();\n            this.calendarIconEvent();\n            this.calendarIconRipple();\n            this.controlDown = null;\n          }\n\n          this.checkMinMaxDays();\n        } else {\n          this.updateNavIcons();\n          this.calendarIconEvent();\n        }\n      }\n    }\n  };\n\n  DateRangePicker.prototype.createControl = function () {\n    var controlContainer = this.createElement('div', {\n      className: RANGECONTAINER\n    });\n    var headerContainer = this.createElement('div', {\n      className: RANGEHEADER\n    });\n    var labelContainer = this.createRangeHeader();\n    headerContainer.appendChild(labelContainer);\n    var daySpan = this.createElement('div', {\n      className: DAYSPAN\n    });\n    attributes(daySpan, {\n      'aria-label': 'Selected Days'\n    });\n    daySpan.textContent = this.l10n.getConstant('selectedDays');\n    headerContainer.appendChild(daySpan);\n    var separator = this.createElement('div', {\n      className: SEPARATOR\n    });\n    var calendarContainer = this.createCalendar();\n    controlContainer.appendChild(headerContainer);\n    controlContainer.appendChild(separator);\n    controlContainer.appendChild(calendarContainer);\n    var footerSection = this.createElement('div', {\n      className: FOOTER\n    });\n    var cancelBtn = this.createElement('button', {\n      className: CANCEL + ' ' + FLAT + ' ' + CSS\n    });\n    var applyBtn = this.createElement('button');\n    addClass([applyBtn], [APPLY, FLAT, PRIMARY, CSS]);\n    footerSection.appendChild(applyBtn);\n    footerSection.appendChild(cancelBtn);\n    var enable = !isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue);\n    this.cancelButton = new Button({\n      content: this.l10n.getConstant('cancelText')\n    }, cancelBtn);\n    this.applyButton = new Button({\n      content: this.l10n.getConstant('applyText'),\n      disabled: !enable\n    }, applyBtn);\n    EventHandler.add(applyBtn, 'click', this.applyFunction, this);\n    EventHandler.add(cancelBtn, 'click', this.cancelFunction, this);\n    this.popupWrapper.appendChild(controlContainer);\n\n    if (!this.isMobile) {\n      if (!isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label)) {\n        this.createPresets();\n        this.listRippleEffect();\n        addClass([controlContainer], RANGEBORDER);\n        addClass([this.popupWrapper], 'e-preset-wrapper');\n        var presets = this.popupWrapper.querySelector('.' + PRESETS);\n        presets.style.height = this.popupWrapper.querySelector('.' + RANGECONTAINER).getBoundingClientRect().height + 'px';\n      }\n    }\n\n    this.popupWrapper.appendChild(footerSection);\n\n    if (this.isMobile) {\n      this.deviceHeaderUpdate();\n    }\n\n    this.renderPopup();\n  };\n\n  DateRangePicker.prototype.cancelFunction = function (eve) {\n    if (document.activeElement !== this.inputElement) {\n      this.preventFocus = true;\n      this.inputElement.focus();\n      addClass([this.inputWrapper.container], [INPUTFOCUS]);\n    }\n\n    eve.preventDefault();\n\n    if (this.isKeyPopup) {\n      this.inputElement.focus();\n      this.isKeyPopup = false;\n    }\n\n    this.startValue = null;\n    this.endValue = null;\n    this.removeSelection();\n    this.hide(eve);\n  };\n\n  DateRangePicker.prototype.deviceHeaderUpdate = function () {\n    if (isNullOrUndefined(this.startValue) && isNullOrUndefined(this.endValue)) {\n      this.endButton.element.setAttribute('disabled', '');\n      this.startButton.element.classList.add(ACTIVE);\n    } else if (!isNullOrUndefined(this.startValue)) {\n      this.startButton.element.classList.add(ACTIVE);\n    }\n  };\n\n  DateRangePicker.prototype.applyFunction = function (eve) {\n    var isValueChanged = false;\n\n    if (eve.type !== 'touchstart') {\n      eve.preventDefault();\n    }\n\n    if (this.closeEventArgs && this.closeEventArgs.cancel) {\n      this.startValue = this.popupWrapper.querySelector('.e-start-date') && this.getIdValue(null, this.popupWrapper.querySelector('.e-start-date'));\n      this.endValue = this.popupWrapper.querySelector('.e-end-date') && this.getIdValue(null, this.popupWrapper.querySelector('.e-end-date'));\n      this.setValue();\n    }\n\n    if (document.activeElement !== this.inputElement) {\n      this.preventFocus = true;\n      this.inputElement.focus();\n      addClass([this.inputWrapper.container], [INPUTFOCUS]);\n    }\n\n    if (eve.type !== 'touchstart' && this.closeEventArgs && !this.closeEventArgs.cancel) {\n      eve.preventDefault();\n    }\n\n    if (!isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue)) {\n      this.previousStartValue = new Date(+this.startValue);\n      this.previousEndValue = new Date(+this.endValue);\n      this.previousEleValue = this.inputElement.value;\n      Input.setValue(this.rangeArgs(eve).text, this.inputElement, this.floatLabelType, this.showClearButton);\n\n      if (+this.initStartDate !== +this.startValue || +this.initEndDate !== +this.endValue) {\n        isValueChanged = true;\n      }\n\n      this.changeTrigger(eve);\n      this.hide(eve ? eve : null);\n      this.errorClass();\n      isValueChanged = true;\n    } else {\n      this.hide(eve ? eve : null);\n    }\n\n    if (!closest(eve.target, '.' + INPUTCONTAINER) && !isValueChanged) {\n      this.focusOut();\n    }\n\n    if (!this.isMobile) {\n      this.isKeyPopup = false;\n\n      if (this.isRangeIconClicked) {\n        this.inputWrapper.container.children[1].focus();\n        this.keyInputConfigs = extend(this.keyInputConfigs, this.keyConfigs);\n        this.popupKeyboardModule = new KeyboardEvents(this.inputWrapper.container.children[1], {\n          eventName: 'keydown',\n          keyConfigs: this.keyInputConfigs,\n          keyAction: this.popupKeyActionHandle.bind(this)\n        });\n      }\n    }\n  };\n\n  DateRangePicker.prototype.onMouseClick = function (event, item) {\n    if (event.type === 'touchstart') {\n      return;\n    }\n\n    var target = item || event.target;\n    var li = closest(target, '.' + LISTCLASS);\n    var isClick = li && li.classList.contains(ACTIVE);\n\n    if (li && li.classList.contains(LISTCLASS)) {\n      this.setListSelection(li, event);\n    }\n\n    this.inputElement.focus();\n\n    if (!this.isMobile) {\n      this.preventFocus = true;\n\n      if (li && li.classList.contains(LISTCLASS) && li.getAttribute('id') === 'custom_range') {\n        this.leftCalendar.children[1].firstElementChild.focus();\n      } else {\n        if (!isClick && event.type === 'keydown') {\n          this.inputElement.focus();\n        }\n      }\n    }\n  };\n\n  DateRangePicker.prototype.onMouseOver = function (event) {\n    var li = closest(event.target, '.' + LISTCLASS);\n\n    if (li && li.classList.contains(LISTCLASS) && !li.classList.contains(HOVER)) {\n      addClass([li], HOVER);\n    }\n  };\n\n  DateRangePicker.prototype.onMouseLeave = function (event) {\n    var item = closest(event.target, '.' + HOVER);\n\n    if (!isNullOrUndefined(item)) {\n      removeClass([item], HOVER);\n    }\n  };\n\n  DateRangePicker.prototype.setListSelection = function (li, event) {\n    if (li && (!li.classList.contains(ACTIVE) || this.isMobile && li.classList.contains(ACTIVE))) {\n      if (this.isMobile && li.classList.contains(ACTIVE)) {\n        this.activeIndex = Array.prototype.slice.call(this.liCollections).indexOf(li);\n        var values_1 = this.presetsItem[this.activeIndex];\n\n        if (values_1.id === 'custom_range') {\n          this.renderCustomPopup();\n          return;\n        }\n\n        return;\n      }\n\n      this.removeListSelection();\n      this.activeIndex = Array.prototype.slice.call(this.liCollections).indexOf(li);\n      addClass([li], ACTIVE);\n      li.setAttribute('aria-selected', 'true');\n      var values = this.presetsItem[this.activeIndex];\n\n      if (values.id === 'custom_range') {\n        this.renderCustomPopup();\n      } else {\n        this.applyPresetRange(values, event);\n      }\n    }\n  };\n\n  DateRangePicker.prototype.removeListSelection = function () {\n    var item = this.presetElement.querySelector('.' + ACTIVE);\n\n    if (!isNullOrUndefined(item)) {\n      removeClass([item], ACTIVE);\n      item.removeAttribute('aria-selected');\n    }\n  };\n\n  DateRangePicker.prototype.setValue = function () {\n    this.modelValue = [this.startValue, this.endValue];\n  };\n\n  DateRangePicker.prototype.applyPresetRange = function (values, e) {\n    this.hide(null);\n    this.presetsItem[this.presetsItem.length - 1].start = null;\n    this.presetsItem[this.presetsItem.length - 1].end = null;\n    this.startValue = values.start;\n    this.endValue = values.end;\n    this.setValue();\n    this.refreshControl();\n    this.trigger('select', this.rangeArgs(e));\n    this.changeTrigger(e);\n    this.previousEleValue = this.inputElement.value;\n    this.isCustomRange = false;\n    this.leftCalendar = this.rightCalendar = null;\n\n    if (this.isKeyPopup) {\n      this.isRangeIconClicked = false;\n      this.inputElement.focus();\n    }\n  };\n\n  DateRangePicker.prototype.showPopup = function (element, event) {\n    this.presetHeight();\n\n    if (this.zIndex === 1000) {\n      this.popupObj.show(null, this.element);\n    } else {\n      this.popupObj.show(null, null);\n    }\n\n    if (this.isMobile) {\n      this.popupObj.refreshPosition();\n    }\n  };\n\n  DateRangePicker.prototype.renderCustomPopup = function () {\n    this.isCustomWindow = true;\n    this.popupObj.hide();\n    this.popupWrapper = this.createElement('div', {\n      id: this.element.id + '_popup',\n      className: ROOT + ' ' + POPUP\n    });\n    this.renderControl();\n    this.openEventArgs.appendTo.appendChild(this.popupWrapper);\n    this.showPopup();\n    this.isCustomRange = true;\n\n    if (!this.isMobile) {\n      this.calendarFocus();\n    }\n  };\n\n  DateRangePicker.prototype.listRippleEffect = function () {\n    for (var _i = 0, _a = this.liCollections; _i < _a.length; _i++) {\n      var li = _a[_i];\n      rippleEffect(li);\n    }\n  };\n\n  DateRangePicker.prototype.createPresets = function () {\n    if (!isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label)) {\n      this.presetElement = this.createElement('div', {\n        className: PRESETS,\n        attrs: {\n          'tabindex': '0'\n        }\n      });\n      var listTag = ListBase.createList(this.createElement, this.presetsItem, null, true);\n      attributes(listTag, {\n        'role': 'listbox',\n        'aria-hidden': 'false',\n        'id': this.element.id + '_options'\n      });\n      this.presetElement.appendChild(listTag);\n      this.popupWrapper.appendChild(this.presetElement);\n      var customElement = this.presetElement.querySelector('#custom_range');\n\n      if (!isNullOrUndefined(customElement)) {\n        customElement.textContent = this.l10n.getConstant('customRange') !== '' ? this.l10n.getConstant('customRange') : 'Custom Range';\n      }\n\n      this.liCollections = this.presetElement.querySelectorAll('.' + LISTCLASS);\n      this.wireListEvents();\n\n      if (this.isMobile) {\n        this.presetElement.style.width = this.inputWrapper.container.getBoundingClientRect().width + 'px';\n      }\n\n      if (!isNullOrUndefined(this.activeIndex) && this.activeIndex > -1) {\n        addClass([this.liCollections[this.activeIndex]], ACTIVE);\n      }\n    }\n  };\n\n  DateRangePicker.prototype.wireListEvents = function () {\n    EventHandler.add(this.presetElement, 'click', this.onMouseClick, this);\n\n    if (!this.isMobile) {\n      EventHandler.add(this.presetElement, 'mouseover', this.onMouseOver, this);\n      EventHandler.add(this.presetElement, 'mouseout', this.onMouseLeave, this);\n    }\n  };\n\n  DateRangePicker.prototype.unWireListEvents = function () {\n    if (!isNullOrUndefined(this.presetElement)) {\n      EventHandler.remove(this.presetElement, 'click touchstart', this.onMouseClick);\n\n      if (!this.isMobile) {\n        EventHandler.remove(this.presetElement, 'mouseover', this.onMouseOver);\n        EventHandler.remove(this.presetElement, 'mouseout', this.onMouseLeave);\n      }\n    }\n  }; // tslint:disable-next-line:max-func-body-length\n\n\n  DateRangePicker.prototype.renderPopup = function () {\n    var _this = this;\n\n    this.popupWrapper.classList.add('e-control');\n    var popupWidth = this.popupWrapper.getBoundingClientRect().width;\n\n    if (!isNullOrUndefined(this.cssClass) && this.cssClass.trim() !== '') {\n      this.popupWrapper.className += ' ' + this.cssClass;\n    }\n\n    if (this.isMobile && this.isCustomWindow) {\n      this.modal = this.createElement('div');\n      document.body.appendChild(this.modal);\n    }\n\n    this.popupObj = new Popup(this.popupWrapper, {\n      relateTo: this.isMobile && this.isCustomWindow ? document.body : !isNullOrUndefined(this.targetElement) ? this.targetElement : this.inputWrapper.container,\n      position: this.isMobile ? !isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label) && !this.isCustomWindow ? {\n        X: 'left',\n        Y: 'bottom'\n      } : {\n        X: 'center',\n        Y: 'center'\n      } : this.enableRtl ? {\n        X: 'left',\n        Y: 'bottom'\n      } : {\n        X: 'right',\n        Y: 'bottom'\n      },\n      offsetX: this.isMobile || this.enableRtl ? 0 : -popupWidth,\n      offsetY: OFFSETVALUE,\n      collision: this.isMobile ? !isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label) && !this.isCustomWindow ? {\n        X: 'fit'\n      } : {\n        X: 'fit',\n        Y: 'fit'\n      } : {\n        X: 'fit',\n        Y: 'flip'\n      },\n      targetType: this.isMobile && this.isCustomWindow ? 'container' : 'relative',\n      enableRtl: this.enableRtl,\n      zIndex: this.zIndex,\n      open: function () {\n        attributes(_this.inputElement, {\n          'aria-expanded': 'true'\n        });\n        addClass([_this.inputWrapper.buttons[0]], ACTIVE);\n\n        if (!_this.isMobile) {\n          if (_this.cancelButton) {\n            _this.btnKeyboardModule = new KeyboardEvents(_this.cancelButton.element, {\n              eventName: 'keydown',\n              keyAction: _this.popupKeyActionHandle.bind(_this),\n              keyConfigs: {\n                tab: 'tab',\n                altRightArrow: 'alt+rightarrow',\n                altLeftArrow: 'alt+leftarrow'\n              }\n            });\n            _this.btnKeyboardModule = new KeyboardEvents(_this.applyButton.element, {\n              eventName: 'keydown',\n              keyAction: _this.popupKeyActionHandle.bind(_this),\n              keyConfigs: {\n                altRightArrow: 'alt+rightarrow',\n                altLeftArrow: 'alt+leftarrow'\n              }\n            });\n          }\n\n          if (!isNullOrUndefined(_this.leftCalendar)) {\n            if (!_this.isRangeIconClicked) {\n              _this.calendarFocus();\n            }\n          }\n\n          if (!isNullOrUndefined(_this.presetElement)) {\n            _this.keyInputConfigs = extend(_this.keyInputConfigs, _this.keyConfigs);\n            _this.presetKeyboardModule = new KeyboardEvents(_this.presetElement, {\n              eventName: 'keydown',\n              keyAction: _this.presetKeyActionHandler.bind(_this),\n              keyConfigs: _this.keyInputConfigs\n            });\n            _this.presetKeyboardModule = new KeyboardEvents(_this.presetElement, {\n              eventName: 'keydown',\n              keyAction: _this.popupKeyActionHandle.bind(_this),\n              keyConfigs: {\n                altRightArrow: 'alt+rightarrow',\n                altLeftArrow: 'alt+leftarrow'\n              }\n            });\n\n            if (isNullOrUndefined(_this.leftCalendar)) {\n              _this.preventBlur = true;\n\n              _this.presetElement.focus();\n            } else {\n              _this.presetElement.setAttribute('tabindex', '-1');\n            }\n          }\n\n          _this.popupKeyBoardHandler();\n        }\n\n        if (_this.isMobile && !Browser.isDevice) {\n          EventHandler.add(document, 'keydown', _this.popupCloseHandler, _this);\n        }\n      },\n      close: function () {\n        attributes(_this.inputElement, {\n          'aria-expanded': 'false'\n        });\n        removeClass([_this.inputWrapper.buttons[0]], ACTIVE);\n\n        if (_this.isRangeIconClicked) {\n          _this.inputWrapper.container.children[1].focus();\n        }\n\n        if (!isUndefined(_this.presets[0].start && _this.presets[0].end && _this.presets[0].label)) {\n          _this.unWireListEvents();\n        }\n\n        if (!isNullOrUndefined(_this.popupObj)) {\n          if (!isNullOrUndefined(_this.popupObj.element.parentElement)) {\n            detach(_this.popupObj.element);\n          }\n\n          _this.popupObj.destroy();\n\n          _this.popupObj = null;\n        }\n\n        if (_this.isMobile && !Browser.isDevice) {\n          EventHandler.remove(document, 'keydown', _this.popupCloseHandler);\n        }\n      },\n      targetExitViewport: function () {\n        if (!Browser.isDevice) {\n          _this.hide();\n        }\n      }\n    });\n\n    if (this.isMobile) {\n      this.popupObj.element.classList.add(DEVICE);\n\n      if (!this.isMobile) {\n        this.popupObj.element.classList.add('e-bigger');\n      }\n    }\n\n    if (this.isMobile && this.isCustomWindow) {\n      addClass([this.modal], [DEVICE, ROOT, 'e-range-modal']);\n      document.body.className += ' ' + OVERFLOW;\n      this.modal.style.display = 'block';\n    }\n\n    EventHandler.add(document, 'mousedown touchstart', this.documentHandler, this);\n  };\n\n  DateRangePicker.prototype.popupCloseHandler = function (e) {\n    switch (e.keyCode) {\n      case 27:\n        this.hide(e);\n        break;\n    }\n  };\n\n  DateRangePicker.prototype.calendarFocus = function () {\n    var startDate = this.popupObj && this.popupObj.element.querySelector('.' + STARTDATE);\n\n    if (startDate) {\n      var ele = closest(startDate, '.' + RIGHTCALENDER);\n      ele = isNullOrUndefined(ele) ? this.leftCalendar : ele;\n\n      if (this.isRangeIconClicked) {\n        this.inputWrapper.container.focus();\n      } else {\n        this.preventBlur = true;\n        ele.children[1].firstElementChild.focus();\n      }\n\n      addClass([startDate], FOCUSDATE);\n    } else {\n      if (this.isRangeIconClicked) {\n        this.inputWrapper.container.focus();\n      } else {\n        this.preventBlur = true;\n        this.leftCalendar.children[1].firstElementChild.focus();\n      }\n    }\n  };\n\n  DateRangePicker.prototype.presetHeight = function () {\n    var presets = this.popupObj && this.popupObj.element.querySelector('.' + PRESETS);\n    var rangeContainer = this.popupObj && this.popupObj.element.querySelector('.' + RANGECONTAINER);\n\n    if (!isNullOrUndefined(presets) && !isNullOrUndefined(rangeContainer)) {\n      presets.style.height = rangeContainer.getBoundingClientRect().height + 'px';\n    }\n  };\n\n  DateRangePicker.prototype.presetKeyActionHandler = function (e) {\n    switch (e.action) {\n      case 'moveDown':\n        this.listMoveDown(e);\n        this.setScrollPosition();\n        e.preventDefault();\n        break;\n\n      case 'moveUp':\n        this.listMoveUp(e);\n        this.setScrollPosition();\n        e.preventDefault();\n        break;\n\n      case 'enter':\n        var hvrItem = this.getHoverLI();\n        var actItem = this.getActiveLI();\n\n        if (!isNullOrUndefined(this.leftCalendar) && !isNullOrUndefined(actItem)) {\n          if (isNullOrUndefined(hvrItem) || !isNullOrUndefined(actItem) && actItem === hvrItem) {\n            this.activeIndex = Array.prototype.slice.call(this.liCollections).indexOf(actItem);\n            var values = this.presetsItem[this.activeIndex];\n\n            if (values.id === 'custom_range') {\n              this.calendarFocus();\n              actItem.classList.remove(HOVER);\n              e.preventDefault();\n              return;\n            }\n          }\n        }\n\n        if (!isNullOrUndefined(hvrItem) || !isNullOrUndefined(actItem)) {\n          this.onMouseClick(e, hvrItem || actItem);\n        }\n\n        e.preventDefault();\n        break;\n\n      case 'tab':\n        if (this.leftCalendar) {\n          var item = this.getHoverLI();\n\n          if (!isNullOrUndefined(item)) {\n            item.classList.remove(HOVER);\n          }\n        } else {\n          this.hide(e);\n          e.preventDefault();\n        }\n\n        break;\n    }\n  };\n\n  DateRangePicker.prototype.listMoveDown = function (e) {\n    var hvrItem = this.getHoverLI();\n    var actItem = this.getActiveLI();\n\n    if (!isNullOrUndefined(hvrItem)) {\n      var li = hvrItem.nextElementSibling;\n\n      if (!isNullOrUndefined(li) && li.classList.contains(LISTCLASS)) {\n        removeClass([hvrItem], HOVER);\n        addClass([li], HOVER);\n      }\n    } else if (!isNullOrUndefined(actItem)) {\n      var li = actItem.nextElementSibling;\n\n      if (!isNullOrUndefined(li) && li.classList.contains(LISTCLASS)) {\n        addClass([li], HOVER);\n      }\n    } else {\n      addClass([this.liCollections[0]], HOVER);\n    }\n  };\n\n  DateRangePicker.prototype.listMoveUp = function (e) {\n    var hvrItem = this.getHoverLI();\n    var actItem = this.getActiveLI();\n\n    if (!isNullOrUndefined(hvrItem)) {\n      var li = hvrItem.previousElementSibling;\n\n      if (!isNullOrUndefined(li) && li.classList.contains(LISTCLASS)) {\n        removeClass([hvrItem], HOVER);\n        addClass([li], HOVER);\n      }\n    } else if (!isNullOrUndefined(actItem)) {\n      var li = actItem.previousElementSibling;\n\n      if (!isNullOrUndefined(li) && li.classList.contains(LISTCLASS)) {\n        addClass([li], HOVER);\n      }\n    }\n  };\n\n  DateRangePicker.prototype.getHoverLI = function () {\n    var item = this.presetElement.querySelector('.' + HOVER);\n    return item;\n  };\n\n  DateRangePicker.prototype.getActiveLI = function () {\n    var item = this.presetElement.querySelector('.' + ACTIVE);\n    return item;\n  };\n\n  DateRangePicker.prototype.popupKeyBoardHandler = function () {\n    this.popupKeyboardModule = new KeyboardEvents(this.popupWrapper, {\n      eventName: 'keydown',\n      keyAction: this.popupKeyActionHandle.bind(this),\n      keyConfigs: {\n        escape: 'escape'\n      }\n    });\n    this.keyInputConfigs = extend(this.keyInputConfigs, this.keyConfigs);\n    this.popupKeyboardModule = new KeyboardEvents(this.inputWrapper.container.children[1], {\n      eventName: 'keydown',\n      keyAction: this.popupKeyActionHandle.bind(this),\n      keyConfigs: this.keyInputConfigs\n    });\n  };\n\n  DateRangePicker.prototype.setScrollPosition = function () {\n    var listHeight = this.presetElement.getBoundingClientRect().height;\n    var hover = this.presetElement.querySelector('.' + HOVER);\n    var active = this.presetElement.querySelector('.' + ACTIVE);\n    var element = !isNullOrUndefined(hover) ? hover : active;\n\n    if (!isNullOrUndefined(element)) {\n      var nextEle = element.nextElementSibling;\n      var height = nextEle ? nextEle.offsetTop : element.offsetTop;\n      var liHeight = element.getBoundingClientRect().height;\n\n      if (height + element.offsetTop > listHeight) {\n        this.presetElement.scrollTop = nextEle ? height - (listHeight / 2 + liHeight / 2) : height;\n      } else {\n        this.presetElement.scrollTop = 0;\n      }\n    }\n  };\n\n  DateRangePicker.prototype.popupKeyActionHandle = function (e) {\n    var presetElement = closest(e.target, '.' + PRESETS);\n\n    switch (e.action) {\n      case 'escape':\n        if (this.isPopupOpen()) {\n          if (this.isKeyPopup) {\n            this.inputElement.focus();\n            this.isKeyPopup = false;\n          }\n\n          this.hide(e);\n        } else {\n          this.inputWrapper.container.children[1].blur();\n        }\n\n        break;\n\n      case 'enter':\n        if (!this.isPopupOpen()) {\n          this.show(null, e);\n        } else {\n          this.inputWrapper.container.children[1].focus();\n        }\n\n        break;\n\n      case 'tab':\n        this.hide(e);\n        break;\n\n      case 'altRightArrow':\n        if (!isNullOrUndefined(presetElement)) {\n          this.cancelButton.element.focus();\n        } else {\n          if (document.activeElement === this.cancelButton.element && this.applyButton.element.disabled !== true) {\n            this.applyButton.element.focus();\n          } else {\n            this.leftCalendar.children[1].firstElementChild.focus();\n          }\n        }\n\n        e.preventDefault();\n        break;\n\n      case 'altLeftArrow':\n        if (!isNullOrUndefined(presetElement)) {\n          this.rightCalendar.children[1].firstElementChild.focus();\n        } else {\n          if (document.activeElement === this.applyButton.element && this.applyButton.element.disabled !== true) {\n            this.cancelButton.element.focus();\n          } else {\n            if (!isNullOrUndefined(this.presetElement) && document.activeElement === this.cancelButton.element) {\n              this.presetElement.focus();\n            } else {\n              this.rightCalendar.children[1].firstElementChild.focus();\n            }\n          }\n        }\n\n        e.preventDefault();\n        break;\n    }\n  };\n\n  DateRangePicker.prototype.documentHandler = function (e) {\n    if (isNullOrUndefined(this.popupObj)) {\n      return;\n    }\n\n    var target = e.target;\n\n    if (!this.inputWrapper.container.contains(target) || !isNullOrUndefined(this.popupObj) && !closest(target, this.popupWrapper.id)) {\n      if (e.type !== 'touchstart' && (e.type === 'mousedown' || this.closeEventArgs && !this.closeEventArgs.cancel)) {\n        e.preventDefault();\n      }\n    }\n\n    if ((isNullOrUndefined(this.targetElement) || !isNullOrUndefined(this.targetElement) && !(target === this.targetElement)) && !closest(target, '#' + this.popupObj.element.id) && !(closest(target, '.' + INPUTCONTAINER) === this.inputWrapper.container) && !(closest(target, '.e-daterangepicker.e-popup') && !target.classList.contains('e-day'))) {\n      this.preventBlur = false;\n\n      if (this.isPopupOpen() && document.body.contains(this.popupObj.element)) {\n        this.applyFunction(e);\n\n        if (!this.isMobile) {\n          this.isRangeIconClicked = false;\n        }\n      }\n    }\n  };\n\n  DateRangePicker.prototype.createInput = function () {\n    var updatedCssClassValue = this.cssClass;\n\n    if (!isNullOrUndefined(this.cssClass) && this.cssClass !== '') {\n      updatedCssClassValue = this.cssClass.replace(/\\s+/g, ' ').trim();\n    }\n\n    this.inputWrapper = Input.createInput({\n      floatLabelType: this.floatLabelType,\n      element: this.inputElement,\n      properties: {\n        readonly: this.readonly,\n        placeholder: this.placeholder,\n        cssClass: updatedCssClassValue,\n        enabled: this.enabled,\n        enableRtl: this.enableRtl,\n        showClearButton: this.showClearButton\n      },\n      buttons: [DATERANGEICON]\n    }, this.createElement);\n    attributes(this.inputElement, {\n      'aria-readonly': this.readonly ? 'true' : 'false',\n      'tabindex': '0',\n      'aria-haspopup': 'true',\n      'aria-activedescendant': 'null',\n      'aria-owns': this.element.id + '_popup',\n      'aria-expanded': 'false',\n      'role': 'combobox',\n      'autocomplete': 'off',\n      'aria-disabled': !this.enabled ? 'true' : 'false',\n      'autocorrect': 'off',\n      'autocapitalize': 'off',\n      'spellcheck': 'false'\n    });\n    Input.addAttributes({\n      'aria-label': 'select'\n    }, this.inputWrapper.buttons[0]);\n\n    if (!isNullOrUndefined(this.placeholder) && this.placeholder.trim() !== '') {\n      Input.addAttributes({\n        'aria-placeholder': this.placeholder\n      }, this.inputElement);\n    }\n\n    this.setEleWidth(this.width);\n    addClass([this.inputWrapper.container], DATERANGEWRAPPER);\n\n    if (isNullOrUndefined(this.inputElement.getAttribute('name'))) {\n      attributes(this.inputElement, {\n        'name': this.element.id\n      });\n    }\n\n    if (this.inputElement.type === 'hidden') {\n      this.inputWrapper.container.style.display = 'none';\n    }\n\n    this.refreshControl();\n    this.previousEleValue = this.inputElement.value;\n    this.inputElement.setAttribute('value', this.inputElement.value);\n    this.startCopy = this.startDate;\n    this.endCopy = this.endDate;\n  };\n\n  DateRangePicker.prototype.setEleWidth = function (width) {\n    if (typeof width === 'string') {\n      this.inputWrapper.container.style.width = this.width;\n    } else if (typeof width === 'number') {\n      this.inputWrapper.container.style.width = formatUnit(this.width);\n    } else {\n      this.inputWrapper.container.style.width = '100%';\n    }\n  };\n\n  DateRangePicker.prototype.adjustLongHeaderWidth = function () {\n    if (this.dayHeaderFormat === 'Wide') {\n      addClass([this.popupWrapper], DAYHEADERLONG);\n    }\n  };\n\n  DateRangePicker.prototype.refreshControl = function () {\n    this.validateMinMax();\n\n    if (this.strictMode) {\n      this.validateRangeStrict();\n    }\n\n    var isDisabled = this.disabledDates();\n\n    if (this.strictMode && isDisabled) {\n      this.startValue = this.previousStartValue;\n      this.setProperties({\n        startDate: this.startValue\n      }, true);\n      this.endValue = this.previousEndValue;\n      this.setProperties({\n        endDate: this.endValue\n      }, true);\n      this.setValue();\n    }\n\n    this.updateInput();\n\n    if (!this.strictMode) {\n      this.validateRange();\n    }\n\n    if (!this.strictMode && isDisabled) {\n      this.clearRange();\n    }\n\n    if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue) && !isDisabled) {\n      this.disabledDateRender();\n    }\n\n    this.errorClass();\n    this.previousStartValue = isNullOrUndefined(this.startValue) || isNaN(+this.startValue) ? null : new Date(+this.startValue);\n    this.previousEndValue = isNullOrUndefined(this.endValue) || isNaN(+this.endValue) ? null : new Date(+this.endValue);\n  };\n\n  DateRangePicker.prototype.updateInput = function () {\n    if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue)) {\n      var formatOption = {\n        format: this.formatString,\n        type: 'date',\n        skeleton: isBlazor() ? 'd' : 'yMd'\n      };\n      var startDate = this.globalize.formatDate(this.startValue, formatOption);\n      var endDate = this.globalize.formatDate(this.endValue, formatOption);\n      Input.setValue(startDate + ' ' + this.separator + ' ' + endDate, this.inputElement, this.floatLabelType, this.showClearButton);\n      this.previousStartValue = new Date(+this.startValue);\n      this.previousEndValue = new Date(+this.endValue);\n    }\n\n    if (!this.strictMode && isNullOrUndefined(this.value) && this.invalidValueString) {\n      Input.setValue(this.invalidValueString, this.inputElement, this.floatLabelType, this.showClearButton);\n    }\n  };\n\n  DateRangePicker.prototype.checkInvalidRange = function (value) {\n    if (!isNullOrUndefined(value)) {\n      var invalid = false;\n      var startinvalue = void 0;\n      var endinvalue = void 0;\n      var startString = null;\n      var endString = null;\n      var valueString = null;\n      var startObject = false;\n      var endObject = false;\n      var invalidobject = false;\n\n      if (typeof value === 'string') {\n        var range = value.split(' ' + this.separator + ' ');\n\n        if (range.length === 2) {\n          startString = range[0];\n          endString = range[1];\n        } else {\n          invalid = true;\n          valueString = value;\n        }\n      } else {\n        if (value.length > 0) {\n          startinvalue = value[0];\n          endinvalue = value[1];\n        } else {\n          startinvalue = value.start;\n          endinvalue = value.end;\n        }\n\n        if (!(startinvalue instanceof Date) && typeof startinvalue !== 'object') {\n          startString = this.getstringvalue(startinvalue);\n        } else if (startinvalue instanceof Date) {\n          startObject = true;\n        } else if (!isNullOrUndefined(startinvalue)) {\n          invalidobject = true;\n        }\n\n        if (!(endinvalue instanceof Date) && typeof endinvalue !== 'object') {\n          endString = this.getstringvalue(endinvalue);\n        } else if (endinvalue instanceof Date) {\n          endObject = true;\n        } else if (!isNullOrUndefined(endinvalue)) {\n          invalidobject = true;\n        }\n      }\n\n      if (isNullOrUndefined(startString) && !startObject && !isNullOrUndefined(endString) || !isNullOrUndefined(startString) && !endObject && isNullOrUndefined(endString)) {\n        invalid = true;\n      }\n\n      if (invalidobject) {\n        startString = endString = valueString = null;\n        invalid = true;\n      }\n\n      if (startString) {\n        invalid = invalid || this.checkInvalidValue(startString);\n      }\n\n      if (endString) {\n        invalid = invalid || this.checkInvalidValue(endString);\n      }\n\n      if (invalid) {\n        if (startObject && !invalidobject) {\n          startString = startinvalue.toLocaleDateString();\n        }\n\n        if (endObject && !invalidobject) {\n          endString = endinvalue.toLocaleDateString();\n        }\n\n        if (!isNullOrUndefined(startString) && !isNullOrUndefined(endString)) {\n          valueString = startString + ' ' + this.separator + ' ' + endString;\n        } else if (!isNullOrUndefined(startString)) {\n          valueString = startString;\n        } else if (!isNullOrUndefined(endString)) {\n          valueString = endString;\n        }\n\n        this.invalidValueString = valueString;\n        this.setProperties({\n          value: null\n        }, true);\n        this.setProperties({\n          startValue: null\n        }, true);\n        this.setProperties({\n          endValue: null\n        }, true);\n        this.startDate = null;\n        this.endDate = null;\n      }\n    }\n  };\n\n  DateRangePicker.prototype.getstringvalue = function (value) {\n    var stringValue = null;\n\n    if (!isNullOrUndefined(value) && typeof value === 'number') {\n      stringValue = value.toString();\n    } else if (!isNullOrUndefined(value) && typeof value === 'string') {\n      stringValue = '' + value;\n    }\n\n    return stringValue;\n  };\n\n  DateRangePicker.prototype.checkInvalidValue = function (value) {\n    var valueString = value;\n    var invalid = false;\n    var formatOpt = null;\n    formatOpt = {\n      format: this.formatString,\n      type: 'date',\n      skeleton: isBlazor() ? 'd' : 'yMd'\n    };\n\n    if (typeof valueString !== 'string') {\n      invalid = true;\n    } else {\n      var globalize = new Internationalization(this.locale);\n\n      if (!this.checkDateValue(globalize.parseDate(valueString, formatOpt))) {\n        var extISOStr = null;\n        var basISOString = null; // tslint:disable-next-line\n\n        extISOStr = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?/; // tslint:disable-next-line\n\n        basISOString = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?/;\n\n        if (!extISOStr.test(valueString) && !basISOString.test(valueString) || /^[a-zA-Z0-9- ]*$/.test(valueString) || isNaN(+new Date(this.checkValue(valueString)))) {\n          invalid = true;\n        }\n      }\n    }\n\n    return invalid;\n  };\n\n  DateRangePicker.prototype.isDateDisabled = function (date) {\n    if (isNullOrUndefined(date)) {\n      return false;\n    }\n\n    var value = new Date(+date);\n\n    if (+value < +this.min || +value > +this.max) {\n      return true;\n    }\n\n    this.virtualRenderCellArgs = {\n      date: value,\n      isDisabled: false\n    };\n    var args = this.virtualRenderCellArgs;\n    this.virtualRenderCellEvent(args);\n\n    if (args.isDisabled) {\n      return true;\n    }\n\n    return false;\n  };\n\n  DateRangePicker.prototype.disabledDateRender = function () {\n    this.disabledDays = [];\n    this.disabledDayCnt = null;\n    var localDate = new Date(+this.startValue);\n    var count = 0;\n\n    while (+localDate <= +this.endValue) {\n      this.virtualRenderCellArgs = {\n        date: localDate,\n        isDisabled: false\n      };\n      var args = this.virtualRenderCellArgs;\n      this.virtualRenderCellEvent(args);\n\n      if (args.isDisabled) {\n        this.disabledDays.push(new Date(+args.date));\n\n        if (+localDate > +this.startValue && +localDate < +this.endValue) {\n          count++;\n        }\n      }\n\n      this.addDay(localDate, 1, null, this.max, this.min);\n    }\n\n    this.disabledDayCnt = count;\n  };\n\n  DateRangePicker.prototype.virtualRenderCellEvent = function (args) {\n    extend(this.virtualRenderCellArgs, {\n      name: 'renderDayCell'\n    });\n    this.trigger('renderDayCell', args);\n  };\n\n  DateRangePicker.prototype.disabledDates = function () {\n    var isStartDisabled = false;\n    var isEndDisabled = false;\n\n    if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue)) {\n      isStartDisabled = this.isDateDisabled(this.startValue);\n      isEndDisabled = this.isDateDisabled(this.endValue);\n\n      if (!this.isPopupOpen()) {\n        this.currentDate = null;\n      }\n\n      this.setValue();\n    }\n\n    return isStartDisabled || isEndDisabled;\n  };\n\n  DateRangePicker.prototype.setModelValue = function () {\n    if (!this.value && this.startDate === null && this.endDate === null) {\n      this.setProperties({\n        value: null\n      }, true);\n    } else if (this.value === null || this.value.start === null) {\n      if (this.value === null) {\n        this.setProperties({\n          value: [this.startDate, this.endDate]\n        }, true);\n      } else if (this.value.start === null) {\n        this.setProperties({\n          value: {\n            start: this.startDate,\n            end: this.endDate\n          }\n        }, true);\n      }\n    } else {\n      if (this.value && this.value.length > 0 || this.valueType && this.valueType.length > 0) {\n        if (+this.startDate !== +this.value[0] || +this.endDate !== +this.value[1]) {\n          this.setProperties({\n            value: [this.startDate, this.endDate]\n          }, true);\n        }\n\n        if (this.value && this.value[0] == null && this.value[1] == null) {\n          this.setProperties({\n            value: null\n          }, true);\n        }\n      } else {\n        if (this.value && this.value.start) {\n          this.setProperties({\n            value: {\n              start: this.startDate,\n              end: this.endDate\n            }\n          }, true);\n        }\n      }\n    }\n\n    this.createHiddenInput();\n  };\n  /**\n   * To dispatch the event manually\n   */\n\n\n  DateRangePicker.prototype.dispatchEvent = function (element, type) {\n    var evt = document.createEvent('HTMLEvents');\n    evt.initEvent(type, false, true);\n    element.dispatchEvent(evt);\n    this.firstHiddenChild.dispatchEvent(evt);\n  };\n\n  DateRangePicker.prototype.changeTrigger = function (e) {\n    if (+this.initStartDate !== +this.startValue || +this.initEndDate !== +this.endValue) {\n      this.setProperties({\n        endDate: this.checkDateValue(this.endValue)\n      }, true);\n      this.setProperties({\n        startDate: this.checkDateValue(this.startValue)\n      }, true);\n      this.setModelValue();\n      this.trigger('change', this.rangeArgs(e));\n    }\n\n    this.previousEleValue = this.inputElement.value;\n    this.initStartDate = this.checkDateValue(this.startValue);\n    this.initEndDate = this.checkDateValue(this.endValue);\n  };\n  /**\n   * This method is used to navigate to the month/year/decade view of the Calendar.\n   * @param  {string} view - Specifies the view of the Calendar.\n   * @param  {Date} date - Specifies the focused date in a view.\n   * @returns void\n   * @hidden\n   */\n\n\n  DateRangePicker.prototype.navigateTo = function (view, date) {\n    if (this.isPopupOpen()) {\n      if (view.toLowerCase() === 'month') {\n        view = 'Month';\n      } else if (view.toLowerCase() === 'year') {\n        view = 'Year';\n      } else if (view.toLowerCase() === 'decade') {\n        view = 'Decade';\n      } else {\n        return;\n      }\n\n      if (this.getViewNumber(view) < this.getViewNumber(this.depth)) {\n        view = this.depth;\n      }\n\n      if (this.isMobile) {\n        _super.prototype.navigateTo.call(this, view, date);\n      } else {\n        if (date < this.min) {\n          date = new Date(+this.min);\n        } else if (date >= this.max) {\n          date = new Date(+this.max);\n        }\n\n        if (view === 'Month' && this.isSameMonth(date, this.max)) {\n          date = new Date(this.max.getFullYear(), this.max.getMonth() - 1, this.min.getDate());\n        } else if (view === 'Year' && this.isSameYear(date, this.max)) {\n          date = new Date(this.max.getFullYear() - 1, this.max.getMonth(), this.max.getDate());\n        } else if (view === 'Decade' && this.isSameDecade(date, this.max)) {\n          date = new Date(this.max.getFullYear() - 10, this.max.getMonth(), this.max.getDate());\n        }\n\n        this.leftCalCurrentDate = date;\n        this.navigate(this.leftCalendar, this.leftCalCurrentDate, view);\n\n        if (view === 'Month') {\n          date = new Date(this.currentDate.setMonth(this.currentDate.getMonth() + 1));\n        } else if (view === 'Year') {\n          date = new Date(this.currentDate.setFullYear(this.currentDate.getFullYear() + 1));\n        } else {\n          date = new Date(this.currentDate.setFullYear(this.currentDate.getFullYear() + 10));\n        }\n\n        this.rightCalCurrentDate = date;\n        this.navigate(this.rightCalendar, this.rightCalCurrentDate, view);\n        this.leftKeyboardModule = this.rightKeyboardModule = null;\n        this.updateNavIcons();\n      }\n\n      if (this.currentView() === this.depth) {\n        this.bindCalendarCellEvents();\n      }\n\n      this.removeFocusedDate();\n      this.updateRange(this.isMobile ? [this.calendarElement] : [this.leftCalendar, this.rightCalendar]);\n    }\n  };\n\n  DateRangePicker.prototype.navigate = function (calendar, date, view) {\n    this.calendarElement = calendar;\n    this.table = calendar.querySelector('table');\n    this.tableBodyElement = calendar.querySelector('tbody');\n    this.headerTitleElement = calendar.querySelector('.e-title');\n    this.tableHeadElement = calendar.querySelector('thead');\n    this.contentElement = calendar.querySelector('.e-content');\n    this.previousIcon = calendar.querySelector('.e-prev');\n    this.nextIcon = calendar.querySelector('.e-next');\n    this.effect = ZOOMIN;\n\n    _super.prototype.navigateTo.call(this, view, date);\n  };\n  /**\n   * Sets the focus to widget for interaction.\n   * @returns void\n   */\n\n\n  DateRangePicker.prototype.focusIn = function () {\n    if (document.activeElement !== this.inputElement && this.enabled) {\n      addClass([this.inputWrapper.container], [INPUTFOCUS]);\n      this.inputElement.focus();\n      var focusArguments = {\n        model: this\n      };\n    }\n  };\n  /**\n   * Remove the focus from widget, if the widget is in focus state.\n   * @returns void\n   */\n\n\n  DateRangePicker.prototype.focusOut = function () {\n    var isBlur = this.preventBlur;\n\n    if (document.activeElement === this.inputElement) {\n      removeClass([this.inputWrapper.container], [INPUTFOCUS]);\n      this.preventBlur = false;\n      this.inputElement.blur();\n      this.preventBlur = isBlur;\n    }\n  };\n  /**\n   * To destroy the widget.\n   * @returns void\n   */\n\n\n  DateRangePicker.prototype.destroy = function () {\n    this.hide(null);\n    var ariaAttrs = {\n      'aria-readonly': this.readonly ? 'true' : 'false',\n      'tabindex': '0',\n      'aria-haspopup': 'true',\n      'aria-activedescendant': 'null',\n      'aria-owns': this.element.id + '_popup',\n      'aria-expanded': 'false',\n      'role': 'combobox',\n      'autocomplete': 'off',\n      'aria-disabled': !this.enabled ? 'true' : 'false',\n      'autocorrect': 'off',\n      'autocapitalize': 'off',\n      'aria-invalid': 'false',\n      'spellcheck': 'false'\n    };\n\n    if (this.inputElement) {\n      removeClass([this.inputElement], [ROOT]);\n      EventHandler.remove(this.inputElement, 'blur', this.inputBlurHandler);\n      Input.removeAttributes(ariaAttrs, this.inputElement);\n      !isNullOrUndefined(this.cloneElement.getAttribute('tabindex')) ? this.inputElement.setAttribute('tabindex', this.tabIndex) : this.inputElement.removeAttribute('tabindex');\n      this.ensureInputAttribute();\n      this.inputElement.classList.remove('e-input');\n\n      if (!isNullOrUndefined(this.inputWrapper)) {\n        EventHandler.remove(this.inputWrapper.buttons[0], 'mousedown', this.rangeIconHandler);\n\n        if (this.angularTag === null) {\n          this.inputWrapper.container.parentElement.appendChild(this.inputElement);\n        }\n\n        detach(this.inputWrapper.container);\n      }\n    }\n\n    if (!isNullOrUndefined(this.inputKeyboardModule) && !this.isMobile) {\n      this.inputKeyboardModule.destroy();\n    }\n\n    if (this.popupObj) {\n      if (!this.isMobile) {\n        this.clearCalendarEvents();\n      }\n    }\n\n    _super.prototype.destroy.call(this);\n\n    this.inputWrapper = this.popupWrapper = this.popupObj = this.cloneElement = this.presetElement = null;\n\n    if (this.formElement) {\n      EventHandler.remove(this.formElement, 'reset', this.formResetHandler);\n    }\n\n    if (!isNullOrUndefined(this.firstHiddenChild) && !isNullOrUndefined(this.secondHiddenChild)) {\n      detach(this.firstHiddenChild);\n      detach(this.secondHiddenChild);\n      this.firstHiddenChild = this.secondHiddenChild = null;\n      this.inputElement.setAttribute('name', this.element.getAttribute('data-name'));\n      this.inputElement.removeAttribute('data-name');\n    }\n  };\n\n  DateRangePicker.prototype.ensureInputAttribute = function () {\n    var attr = [];\n\n    for (var i = 0; i < this.inputElement.attributes.length; i++) {\n      attr[i] = this.inputElement.attributes[i].name;\n    }\n\n    for (var i = 0; i < attr.length; i++) {\n      if (isNullOrUndefined(this.cloneElement.getAttribute(attr[i]))) {\n        if (attr[i].toLowerCase() === 'value') {\n          this.inputElement.value = '';\n        }\n\n        this.inputElement.removeAttribute(attr[i]);\n      } else {\n        if (attr[i].toLowerCase() === 'value') {\n          this.inputElement.value = this.cloneElement.getAttribute(attr[i]);\n        }\n\n        this.inputElement.setAttribute(attr[i], this.cloneElement.getAttribute(attr[i]));\n      }\n    }\n  };\n  /**\n   * To get component name\n   * @returns string\n   * @private\n   */\n\n\n  DateRangePicker.prototype.getModuleName = function () {\n    return 'daterangepicker';\n  };\n  /**\n   * Return the properties that are maintained upon browser refresh.\n   * @returns string\n   */\n\n\n  DateRangePicker.prototype.getPersistData = function () {\n    var keyEntity = ['startDate', 'endDate', 'value'];\n    return this.addOnPersist(keyEntity);\n  };\n  /**\n   * Return the selected range and day span in the DateRangePicker.\n   * @returns Object\n   */\n\n\n  DateRangePicker.prototype.getSelectedRange = function () {\n    var range;\n\n    if (!isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue)) {\n      range = Math.round(Math.abs((this.startValue.getTime() - this.endValue.getTime()) / (1000 * 60 * 60 * 24))) + 1;\n      this.disabledDateRender();\n\n      if (!isNullOrUndefined(this.disabledDayCnt)) {\n        range = range - this.disabledDayCnt;\n        this.disabledDayCnt = null;\n      }\n    } else {\n      range = 0;\n    }\n\n    return {\n      startDate: this.startValue,\n      endDate: this.endValue,\n      daySpan: range\n    };\n  };\n  /**\n   * To open the Popup container in the DateRangePicker component.\n   * @returns void\n   */\n\n\n  DateRangePicker.prototype.show = function (element, event) {\n    var _this = this;\n\n    if (this.isMobile && this.popupObj) {\n      this.popupObj.refreshPosition();\n    }\n\n    if (this.enabled && this.readonly || !this.enabled || this.popupObj) {\n      return;\n    } else {\n      if (!this.isPopupOpen()) {\n        if (element) {\n          this.targetElement = element;\n        }\n\n        this.createPopup();\n\n        if (this.isMobile || Browser.isDevice) {\n          this.mobileRangePopupWrap = this.createElement('div', {\n            className: 'e-daterangepick-mob-popup-wrap'\n          });\n          document.body.appendChild(this.mobileRangePopupWrap);\n        }\n\n        this.openEventArgs = {\n          popup: isBlazor() && this.isServerRendered ? null : this.popupObj || null,\n          cancel: false,\n          date: this.inputElement.value,\n          model: isBlazor() && this.isServerRendered ? null : this,\n          event: event ? event : null,\n          appendTo: this.isMobile || Browser.isDevice ? this.mobileRangePopupWrap : document.body\n        };\n        var eventArgs = this.openEventArgs;\n        this.trigger('open', eventArgs, function (eventArgs) {\n          _this.openEventArgs = eventArgs;\n\n          if (!_this.openEventArgs.cancel) {\n            _this.openEventArgs.appendTo.appendChild(_this.popupWrapper);\n\n            _this.showPopup(element, event);\n\n            var isPreset = !_this.isCustomRange || _this.isMobile && _this.isCustomRange;\n\n            if (!isUndefined(_this.presets[0].start && _this.presets[0].end && _this.presets[0].label) && isPreset) {\n              _this.setScrollPosition();\n            }\n\n            _this.checkMinMaxDays();\n\n            if (_this.isMobile && !isNullOrUndefined(_this.startDate) && isNullOrUndefined(_this.endDate)) {\n              _this.endButton.element.classList.add(ACTIVE);\n\n              _this.startButton.element.classList.remove(ACTIVE);\n\n              _this.endButton.element.removeAttribute('disabled');\n\n              _this.selectableDates();\n            }\n\n            _super.prototype.setOverlayIndex.call(_this, _this.mobileRangePopupWrap, _this.popupObj.element, _this.modal, _this.isMobile || Browser.isDevice);\n          }\n        });\n      }\n    }\n  };\n  /**\n   * To close the Popup container in the DateRangePicker component.\n   * @returns void\n   */\n\n\n  DateRangePicker.prototype.hide = function (event) {\n    var _this = this;\n\n    if (this.popupObj) {\n      if (isNullOrUndefined(this.previousEndValue) && isNullOrUndefined(this.previousStartValue)) {\n        this.clearRange();\n      } else {\n        if (!isNullOrUndefined(this.previousStartValue)) {\n          this.startValue = new Date(this.checkValue(this.previousStartValue));\n          this.setValue();\n          this.currentDate = new Date(this.checkValue(this.startValue));\n        } else {\n          this.startValue = null;\n          this.setValue();\n        }\n\n        if (!isNullOrUndefined(this.previousEndValue)) {\n          this.endValue = new Date(this.checkValue(this.previousEndValue));\n          this.setValue();\n        } else {\n          this.endValue = null;\n          this.setValue();\n        }\n      }\n\n      if (this.isPopupOpen()) {\n        this.closeEventArgs = {\n          cancel: false,\n          popup: isBlazor() && this.isServerRendered ? null : this.popupObj,\n          date: this.inputElement.value,\n          model: isBlazor() && this.isServerRendered ? null : this,\n          event: event ? event : null\n        };\n        var eventArgs = this.closeEventArgs;\n        this.trigger('close', eventArgs, function (eventArgs) {\n          _this.closeEventArgs = eventArgs;\n\n          if (!_this.closeEventArgs.cancel) {\n            if (_this.isMobile) {\n              if (!isNullOrUndefined(_this.startButton) && !isNullOrUndefined(_this.endButton)) {\n                EventHandler.remove(_this.startButton.element, 'click touchstart', _this.deviceHeaderClick);\n                EventHandler.remove(_this.endButton.element, 'click touchstart', _this.deviceHeaderClick);\n              }\n            }\n\n            if (_this.popupObj) {\n              _this.popupObj.hide();\n\n              if (_this.preventBlur) {\n                _this.inputElement.focus();\n\n                addClass([_this.inputWrapper.container], [INPUTFOCUS]);\n              }\n            }\n\n            if (!_this.isMobile) {\n              if (!isNullOrUndefined(_this.leftKeyboardModule) && !isNullOrUndefined(_this.rightKeyboardModule)) {\n                _this.leftKeyboardModule.destroy();\n\n                _this.rightKeyboardModule.destroy();\n              }\n\n              if (!isNullOrUndefined(_this.presetElement)) {\n                _this.presetKeyboardModule.destroy();\n              }\n\n              if (!isNullOrUndefined(_this.cancelButton)) {\n                _this.btnKeyboardModule.destroy();\n              }\n            }\n\n            _this.targetElement = null;\n            removeClass([document.body], OVERFLOW);\n            EventHandler.remove(document, 'mousedown touchstart', _this.documentHandler);\n\n            if (_this.isMobile && _this.modal) {\n              _this.modal.style.display = 'none';\n              _this.modal.outerHTML = '';\n              _this.modal = null;\n            }\n\n            if (_this.isMobile || Browser.isDevice) {\n              if (!isNullOrUndefined(_this.mobileRangePopupWrap)) {\n                _this.mobileRangePopupWrap.remove();\n\n                _this.mobileRangePopupWrap = null;\n              }\n            }\n\n            _this.isKeyPopup = _this.dateDisabled = false;\n          } else {\n            removeClass([_this.inputWrapper.buttons[0]], ACTIVE);\n          }\n\n          _this.updateClearIconState();\n\n          _this.updateHiddenInput();\n\n          if (_this.isMobile && _this.allowEdit && !_this.readonly) {\n            _this.inputElement.removeAttribute('readonly');\n          }\n        });\n      }\n    } else {\n      this.updateClearIconState();\n      this.updateHiddenInput();\n\n      if (this.isMobile && this.allowEdit && !this.readonly) {\n        this.inputElement.removeAttribute('readonly');\n      }\n    }\n  };\n\n  DateRangePicker.prototype.setLocale = function () {\n    this.globalize = new Internationalization(this.locale);\n    this.l10n.setLocale(this.locale);\n    this.setProperties({\n      placeholder: this.l10n.getConstant('placeholder')\n    }, true);\n    Input.setPlaceholder(this.placeholder, this.inputElement);\n    this.updateInput();\n    this.updateHiddenInput();\n    this.changeTrigger();\n  };\n\n  DateRangePicker.prototype.refreshChange = function () {\n    this.checkView();\n    this.refreshControl();\n    this.changeTrigger();\n  };\n\n  DateRangePicker.prototype.setDate = function () {\n    Input.setValue('', this.inputElement, this.floatLabelType, this.showClearButton);\n    this.refreshChange();\n  };\n\n  DateRangePicker.prototype.enableInput = function () {\n    if (+this.min <= +this.max) {\n      this.setProperties({\n        enabled: true\n      }, true);\n      Input.setEnabled(this.enabled, this.inputElement);\n\n      if (this.element.hasAttribute('disabled')) {\n        this.bindEvents();\n      }\n    }\n  };\n\n  DateRangePicker.prototype.clearModelvalue = function (newProp, oldProp) {\n    this.setProperties({\n      startDate: null\n    }, true);\n    this.setProperties({\n      endDate: null\n    }, true);\n\n    if (oldProp.value && oldProp.value.length > 0) {\n      this.setProperties({\n        value: null\n      }, true);\n    } else if (oldProp.value && oldProp.value.start) {\n      this.setProperties({\n        value: {\n          start: null,\n          end: null\n        }\n      }, true);\n    } else if (oldProp.value && !oldProp.value.start) {\n      this.setProperties({\n        value: {\n          start: null,\n          end: null\n        }\n      }, true);\n    }\n\n    this.updateValue();\n    this.setDate();\n  };\n\n  DateRangePicker.prototype.createHiddenInput = function () {\n    if (isNullOrUndefined(this.firstHiddenChild) && isNullOrUndefined(this.secondHiddenChild)) {\n      this.firstHiddenChild = this.createElement('input');\n      this.secondHiddenChild = this.createElement('input');\n    }\n\n    if (!isNullOrUndefined(this.inputElement.getAttribute('name'))) {\n      this.inputElement.setAttribute('data-name', this.inputElement.getAttribute('name'));\n      this.inputElement.removeAttribute('name');\n    }\n\n    attributes(this.firstHiddenChild, {\n      'type': 'text',\n      'name': this.inputElement.getAttribute('data-name'),\n      'class': HIDDENELEMENT\n    });\n    attributes(this.secondHiddenChild, {\n      'type': 'text',\n      'name': this.inputElement.getAttribute('data-name'),\n      'class': HIDDENELEMENT\n    });\n    var format = {\n      type: 'datetime',\n      skeleton: isBlazor() ? 'd' : 'yMd'\n    };\n    this.firstHiddenChild.value = this.startDate && this.globalize.formatDate(this.startDate, format);\n    this.secondHiddenChild.value = this.endDate && this.globalize.formatDate(this.endDate, format);\n    this.inputElement.parentElement.appendChild(this.firstHiddenChild);\n    this.inputElement.parentElement.appendChild(this.secondHiddenChild);\n  };\n  /**\n   * Called internally if any of the property value changed.\n   * returns void\n   * @private\n   */\n  // tslint:disable-next-line:max-func-body-length\n\n\n  DateRangePicker.prototype.onPropertyChanged = function (newProp, oldProp) {\n    var format = {\n      format: this.formatString,\n      type: 'date',\n      skeleton: isBlazor() ? 'd' : 'yMd'\n    };\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n      this.hide(null);\n\n      switch (prop) {\n        case 'width':\n          this.setEleWidth(this.width);\n          break;\n\n        case 'separator':\n          this.previousEleValue = this.inputElement.value;\n          this.setProperties({\n            separator: newProp.separator\n          }, true);\n          this.updateInput();\n          this.changeTrigger();\n          break;\n\n        case 'placeholder':\n          Input.setPlaceholder(newProp.placeholder, this.inputElement);\n          this.setProperties({\n            placeholder: newProp.placeholder\n          }, true);\n          break;\n\n        case 'readonly':\n          Input.setReadonly(this.readonly, this.inputElement);\n          this.inputElement.setAttribute('aria-readonly', '' + this.readonly);\n          this.setRangeAllowEdit();\n          break;\n\n        case 'cssClass':\n          this.updateCssClass(newProp.cssClass, oldProp.cssClass);\n          break;\n\n        case 'enabled':\n          this.setProperties({\n            enabled: newProp.enabled\n          }, true);\n          Input.setEnabled(this.enabled, this.inputElement);\n          this.bindEvents();\n          break;\n\n        case 'allowEdit':\n          this.setRangeAllowEdit();\n          break;\n\n        case 'enableRtl':\n          this.setProperties({\n            enableRtl: newProp.enableRtl\n          }, true);\n          Input.setEnableRtl(this.enableRtl, [this.inputWrapper.container]);\n          break;\n\n        case 'zIndex':\n          this.setProperties({\n            zIndex: newProp.zIndex\n          }, true);\n          break;\n\n        case 'format':\n          this.setProperties({\n            format: newProp.format\n          }, true);\n          this.checkFormat();\n          this.updateInput();\n          this.changeTrigger();\n          break;\n\n        case 'locale':\n          this.globalize = new Internationalization(this.locale);\n          this.l10n.setLocale(this.locale);\n          this.setProperties({\n            placeholder: this.l10n.getConstant('placeholder')\n          }, true);\n          Input.setPlaceholder(this.placeholder, this.inputElement);\n          this.setLocale();\n          break;\n\n        case 'htmlAttributes':\n          this.updateHtmlAttributeToElement();\n          this.updateHtmlAttributeToWrapper();\n          this.setDataAttribute(true);\n          this.checkHtmlAttributes(true);\n          break;\n\n        case 'showClearButton':\n          Input.setClearButton(this.showClearButton, this.inputElement, this.inputWrapper);\n          this.bindClearEvent();\n          break;\n\n        case 'startDate':\n          if (typeof newProp.startDate === 'string') {\n            newProp.startDate = this.globalize.parseDate(newProp.startDate, format);\n          }\n\n          if (+this.initStartDate !== +newProp.startDate) {\n            this.startValue = this.checkDateValue(new Date(this.checkValue(newProp.startDate)));\n            this.setDate();\n            this.setValue();\n          }\n\n          break;\n\n        case 'endDate':\n          if (typeof newProp.endDate === 'string') {\n            newProp.endDate = this.globalize.parseDate(newProp.endDate, format);\n          }\n\n          if (+this.initEndDate !== +newProp.endDate) {\n            this.endValue = this.checkDateValue(new Date(this.checkValue(newProp.endDate)));\n            this.setDate();\n            this.setValue();\n          }\n\n          break;\n\n        case 'value':\n          this.invalidValueString = null;\n          this.checkInvalidRange(newProp.value);\n\n          if (typeof newProp.value === 'string') {\n            if (!this.invalidValueString) {\n              var rangeArray = newProp.value.split(' ' + this.separator + ' ');\n              this.value = [new Date(rangeArray[0]), new Date(rangeArray[1])];\n              this.updateValue();\n              this.setDate();\n            } else {\n              this.clearModelvalue(newProp, oldProp);\n            }\n          } else {\n            if (!isNullOrUndefined(newProp.value) && newProp.value.length > 0 || !isNullOrUndefined(newProp.value) && newProp.value.start) {\n              this.valueType = newProp.value;\n\n              if (newProp.value[0] === null || newProp.value.start === null) {\n                if (newProp.value.length === 1 || newProp.value.start) {\n                  this.clearModelvalue(newProp, oldProp);\n                } else if (newProp.value[1] === null || newProp.value.start === null) {\n                  this.clearModelvalue(newProp, oldProp);\n                }\n              } else if (+this.initStartDate !== +newProp.value[0] || +this.initEndDate !== +newProp.value[1] || +this.initStartDate !== +(newProp.value.start || +this.initEndDate !== +newProp.value.start)) {\n                if (newProp.value.length === 1) {\n                  this.modelValue = newProp.value;\n                } else if (newProp.value.start) {\n                  this.modelValue = newProp.value;\n                }\n\n                this.updateValue();\n                this.setDate();\n              }\n            } else {\n              if (isNullOrUndefined(this.value) || newProp.value.start == null) {\n                this.valueType = newProp.value;\n                this.startValue = null;\n                this.endValue = null;\n                this.clearModelvalue(newProp, oldProp);\n              }\n            }\n          }\n\n          break;\n\n        case 'minDays':\n          this.setProperties({\n            minDays: newProp.minDays\n          }, true);\n          this.refreshChange();\n          break;\n\n        case 'maxDays':\n          this.setProperties({\n            maxDays: newProp.maxDays\n          }, true);\n          this.refreshChange();\n          break;\n\n        case 'min':\n          this.setProperties({\n            min: this.checkDateValue(new Date(this.checkValue(newProp.min)))\n          }, true);\n          this.previousEleValue = this.inputElement.value;\n          this.enableInput();\n          this.refreshChange();\n          break;\n\n        case 'max':\n          this.setProperties({\n            max: this.checkDateValue(new Date(this.checkValue(newProp.max)))\n          }, true);\n          this.enableInput();\n          this.refreshChange();\n          break;\n\n        case 'strictMode':\n          this.invalidValueString = null;\n          this.setProperties({\n            strictMode: newProp.strictMode\n          }, true);\n          this.refreshChange();\n          break;\n\n        case 'presets':\n          this.setProperties({\n            presets: newProp.presets\n          }, true);\n          this.processPresets();\n          break;\n\n        case 'floatLabelType':\n          this.floatLabelType = newProp.floatLabelType;\n          Input.removeFloating(this.inputWrapper);\n          Input.addFloating(this.inputElement, this.floatLabelType, this.placeholder);\n          break;\n\n        case 'start':\n          this.setProperties({\n            start: newProp.start\n          }, true);\n          this.refreshChange();\n          break;\n\n        case 'depth':\n          this.setProperties({\n            depth: newProp.depth\n          }, true);\n          this.refreshChange();\n          break;\n      }\n    }\n  };\n\n  __decorate([Property(null)], DateRangePicker.prototype, \"value\", void 0);\n\n  __decorate([Property(false)], DateRangePicker.prototype, \"enablePersistence\", void 0);\n\n  __decorate([Property(new Date(1900, 0, 1))], DateRangePicker.prototype, \"min\", void 0);\n\n  __decorate([Property(new Date(2099, 11, 31))], DateRangePicker.prototype, \"max\", void 0);\n\n  __decorate([Property(null)], DateRangePicker.prototype, \"locale\", void 0);\n\n  __decorate([Property(null)], DateRangePicker.prototype, \"firstDayOfWeek\", void 0);\n\n  __decorate([Property(false)], DateRangePicker.prototype, \"weekNumber\", void 0);\n\n  __decorate([Property('Gregorian')], DateRangePicker.prototype, \"calendarMode\", void 0);\n\n  __decorate([Property(false)], DateRangePicker.prototype, \"openOnFocus\", void 0);\n\n  __decorate([Event()], DateRangePicker.prototype, \"created\", void 0);\n\n  __decorate([Event()], DateRangePicker.prototype, \"destroyed\", void 0);\n\n  __decorate([Event()], DateRangePicker.prototype, \"change\", void 0);\n\n  __decorate([Event()], DateRangePicker.prototype, \"cleared\", void 0);\n\n  __decorate([Event()], DateRangePicker.prototype, \"navigated\", void 0);\n\n  __decorate([Event()], DateRangePicker.prototype, \"renderDayCell\", void 0);\n\n  __decorate([Property(null)], DateRangePicker.prototype, \"startDate\", void 0);\n\n  __decorate([Property(null)], DateRangePicker.prototype, \"endDate\", void 0);\n\n  __decorate([Collection([{}], Presets)], DateRangePicker.prototype, \"presets\", void 0);\n\n  __decorate([Property('')], DateRangePicker.prototype, \"width\", void 0);\n\n  __decorate([Property(1000)], DateRangePicker.prototype, \"zIndex\", void 0);\n\n  __decorate([Property(true)], DateRangePicker.prototype, \"showClearButton\", void 0);\n\n  __decorate([Property(true)], DateRangePicker.prototype, \"showTodayButton\", void 0);\n\n  __decorate([Property('Month')], DateRangePicker.prototype, \"start\", void 0);\n\n  __decorate([Property('Month')], DateRangePicker.prototype, \"depth\", void 0);\n\n  __decorate([Property('')], DateRangePicker.prototype, \"cssClass\", void 0);\n\n  __decorate([Property('-')], DateRangePicker.prototype, \"separator\", void 0);\n\n  __decorate([Property(null)], DateRangePicker.prototype, \"minDays\", void 0);\n\n  __decorate([Property(null)], DateRangePicker.prototype, \"maxDays\", void 0);\n\n  __decorate([Property(false)], DateRangePicker.prototype, \"strictMode\", void 0);\n\n  __decorate([Property(null)], DateRangePicker.prototype, \"keyConfigs\", void 0);\n\n  __decorate([Property(null)], DateRangePicker.prototype, \"format\", void 0);\n\n  __decorate([Property(true)], DateRangePicker.prototype, \"enabled\", void 0);\n\n  __decorate([Property(false)], DateRangePicker.prototype, \"readonly\", void 0);\n\n  __decorate([Property(true)], DateRangePicker.prototype, \"allowEdit\", void 0);\n\n  __decorate([Property('Never')], DateRangePicker.prototype, \"floatLabelType\", void 0);\n\n  __decorate([Property(null)], DateRangePicker.prototype, \"placeholder\", void 0);\n\n  __decorate([Property({})], DateRangePicker.prototype, \"htmlAttributes\", void 0);\n\n  __decorate([Event()], DateRangePicker.prototype, \"open\", void 0);\n\n  __decorate([Event()], DateRangePicker.prototype, \"close\", void 0);\n\n  __decorate([Event()], DateRangePicker.prototype, \"select\", void 0);\n\n  __decorate([Event()], DateRangePicker.prototype, \"focus\", void 0);\n\n  __decorate([Event()], DateRangePicker.prototype, \"blur\", void 0);\n\n  DateRangePicker = __decorate([NotifyPropertyChanges], DateRangePicker);\n  return DateRangePicker;\n}(CalendarBase);\n\nexport { DateRangePicker };","map":null,"metadata":{},"sourceType":"module"}