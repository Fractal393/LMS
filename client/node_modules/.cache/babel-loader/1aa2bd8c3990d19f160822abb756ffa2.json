{"ast":null,"code":"/**\r\n * DevExtreme (ui/drawer/ui.drawer.rendering.strategy.overlap.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _uiDrawerRendering = require(\"./ui.drawer.rendering.strategy\");\n\nvar _uiDrawerRendering2 = _interopRequireDefault(_uiDrawerRendering);\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _translator = require(\"../../animation/translator\");\n\nvar _translator2 = _interopRequireDefault(_translator);\n\nvar _overlay = require(\"../overlay\");\n\nvar _overlay2 = _interopRequireDefault(_overlay);\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _inflector = require(\"../../core/utils/inflector\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nfunction _get(target, property, receiver) {\n  if (\"undefined\" !== typeof Reflect && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function (target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) {\n        return;\n      }\n\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n\n    if (null === object) {\n      break;\n    }\n  }\n\n  return object;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (\"function\" !== typeof superClass && null !== superClass) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (superClass) {\n    _setPrototypeOf(subClass, superClass);\n  }\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function (o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var result,\n        Super = _getPrototypeOf(Derived);\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (\"object\" === _typeof(call) || \"function\" === typeof call)) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (void 0 === self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (\"undefined\" === typeof Reflect || !Reflect.construct) {\n    return false;\n  }\n\n  if (Reflect.construct.sham) {\n    return false;\n  }\n\n  if (\"function\" === typeof Proxy) {\n    return true;\n  }\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function (o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar OverlapStrategy = function (_DrawerStrategy) {\n  _inherits(OverlapStrategy, _DrawerStrategy);\n\n  var _super = _createSuper(OverlapStrategy);\n\n  function OverlapStrategy() {\n    _classCallCheck(this, OverlapStrategy);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(OverlapStrategy, [{\n    key: \"renderPanelContent\",\n    value: function (whenPanelContentRendered) {\n      var _this = this;\n\n      delete this._initialPosition;\n      var drawer = this.getDrawerInstance();\n\n      var _drawer$option = drawer.option(),\n          opened = _drawer$option.opened,\n          minSize = _drawer$option.minSize;\n\n      drawer._overlay = drawer._createComponent(drawer.content(), _overlay2.default, {\n        shading: false,\n        container: drawer.getOverlayTarget(),\n        position: this._getOverlayPosition(),\n        width: opened ? \"auto\" : minSize || 0,\n        height: \"100%\",\n        templatesRenderAsynchronously: drawer.option(\"templatesRenderAsynchronously\"),\n        animation: {\n          show: {\n            duration: 0\n          }\n        },\n        onPositioned: function (e) {\n          this._fixOverlayPosition(e.component.$content());\n        }.bind(this),\n        contentTemplate: drawer.option(\"template\"),\n        onContentReady: function (args) {\n          whenPanelContentRendered.resolve();\n\n          _this._processOverlayZIndex(args.component.content());\n        },\n        visible: true,\n        propagateOutsideClick: true\n      });\n    }\n  }, {\n    key: \"_fixOverlayPosition\",\n    value: function ($overlayContent) {\n      var position = (0, _common.ensureDefined)(this._initialPosition, {\n        left: 0,\n        top: 0\n      });\n\n      _translator2.default.move($overlayContent, position);\n\n      if (\"right\" === this.getDrawerInstance().calcTargetPosition()) {\n        $overlayContent.css(\"left\", \"auto\");\n      }\n    }\n  }, {\n    key: \"_getOverlayPosition\",\n    value: function () {\n      var drawer = this.getDrawerInstance();\n      var panelPosition = drawer.calcTargetPosition();\n      var result = {};\n\n      switch (panelPosition) {\n        case \"left\":\n          result = {\n            my: \"top left\",\n            at: \"top left\"\n          };\n          break;\n\n        case \"right\":\n          result = {\n            my: drawer.option(\"rtlEnabled\") ? \"top left\" : \"top right\",\n            at: \"top right\"\n          };\n          break;\n\n        case \"top\":\n        case \"bottom\":\n          result = {\n            my: panelPosition,\n            at: panelPosition\n          };\n      }\n\n      result.of = drawer.getOverlayTarget();\n      return result;\n    }\n  }, {\n    key: \"refreshPanelElementSize\",\n    value: function (calcFromRealPanelSize) {\n      var drawer = this.getDrawerInstance();\n      var overlay = drawer.getOverlay();\n\n      if (drawer.isHorizontalDirection()) {\n        overlay.option(\"height\", \"100%\");\n        overlay.option(\"width\", calcFromRealPanelSize ? drawer.getRealPanelWidth() : this._getPanelSize(drawer.option(\"opened\")));\n      } else {\n        overlay.option(\"width\", overlay.option(\"container\").width());\n        overlay.option(\"height\", calcFromRealPanelSize ? drawer.getRealPanelHeight() : this._getPanelSize(drawer.option(\"opened\")));\n      }\n    }\n  }, {\n    key: \"_setupContent\",\n    value: function ($content, position) {\n      $content.css(\"padding\" + (0, _inflector.camelize)(position, true), this.getDrawerInstance().option(\"minSize\"));\n      $content.css(\"transform\", \"inherit\");\n    }\n  }, {\n    key: \"_slidePositionRendering\",\n    value: function (config, _, animate) {\n      var drawer = this.getDrawerInstance();\n      this._initialPosition = drawer.isHorizontalDirection() ? {\n        left: config.panelOffset\n      } : {\n        top: config.panelOffset\n      };\n      var position = drawer.calcTargetPosition();\n\n      this._setupContent(config.$content, position, config.drawer);\n\n      if (animate) {\n        var animationConfig = (0, _extend.extend)(config.defaultAnimationConfig, {\n          $element: config.$panel,\n          position: config.panelOffset,\n          duration: drawer.option(\"animationDuration\"),\n          direction: position\n        });\n\n        _uiDrawerRendering.animation.moveTo(animationConfig);\n      } else {\n        if (drawer.isHorizontalDirection()) {\n          _translator2.default.move(config.$panel, {\n            left: config.panelOffset\n          });\n        } else {\n          _translator2.default.move(config.$panel, {\n            top: config.panelOffset\n          });\n        }\n      }\n    }\n  }, {\n    key: \"_expandPositionRendering\",\n    value: function (config, _, animate) {\n      var drawer = this.getDrawerInstance();\n      this._initialPosition = {\n        left: 0\n      };\n      var position = drawer.calcTargetPosition();\n\n      this._setupContent(config.$content, position);\n\n      _translator2.default.move(config.$panelOverlayContent, {\n        left: 0\n      });\n\n      if (animate) {\n        var animationConfig = (0, _extend.extend)(config.defaultAnimationConfig, {\n          $element: config.$panelOverlayContent,\n          size: config.size,\n          duration: drawer.option(\"animationDuration\"),\n          direction: position,\n          marginTop: config.marginTop\n        });\n\n        _uiDrawerRendering.animation.size(animationConfig);\n      } else {\n        if (drawer.isHorizontalDirection()) {\n          (0, _renderer2.default)(config.$panelOverlayContent).css(\"width\", config.size);\n        } else {\n          (0, _renderer2.default)(config.$panelOverlayContent).css(\"height\", config.size);\n\n          if (\"bottom\" === position) {\n            (0, _renderer2.default)(config.$panelOverlayContent).css(\"marginTop\", config.marginTop);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_getPositionRenderingConfig\",\n    value: function (isDrawerOpened) {\n      var drawer = this.getDrawerInstance();\n\n      var config = _get(_getPrototypeOf(OverlapStrategy.prototype), \"_getPositionRenderingConfig\", this).call(this, isDrawerOpened);\n\n      return (0, _extend.extend)(config, {\n        panelOffset: this._getPanelOffset(isDrawerOpened) * this.getDrawerInstance()._getPositionCorrection(),\n        $panelOverlayContent: drawer.getOverlay().$content(),\n        marginTop: drawer.getRealPanelHeight() - config.size\n      });\n    }\n  }, {\n    key: \"getPanelContent\",\n    value: function () {\n      return (0, _renderer2.default)(this.getDrawerInstance().getOverlay().content());\n    }\n  }, {\n    key: \"_processOverlayZIndex\",\n    value: function ($element) {\n      var styles = (0, _renderer2.default)($element).get(0).style;\n      var zIndex = styles.zIndex || 1;\n      this.getDrawerInstance().setZIndex(zIndex);\n    }\n  }, {\n    key: \"isViewContentFirst\",\n    value: function (position) {\n      return \"right\" === position || \"bottom\" === position;\n    }\n  }]);\n\n  return OverlapStrategy;\n}(_uiDrawerRendering2.default);\n\nmodule.exports = OverlapStrategy;","map":null,"metadata":{},"sourceType":"script"}