{"ast":null,"code":"/**\r\n * DevExtreme (ui/text_box/text_box.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\");\n\nvar windowUtils = require(\"../../core/utils/window\");\n\nvar window = windowUtils.getWindow();\nvar navigator = windowUtils.getNavigator();\n\nvar browser = require(\"../../core/utils/browser\");\n\nvar eventsEngine = require(\"../../events/core/events_engine\");\n\nvar devices = require(\"../../core/devices\");\n\nvar inArray = require(\"../../core/utils/array\").inArray;\n\nvar extend = require(\"../../core/utils/extend\").extend;\n\nvar registerComponent = require(\"../../core/component_registrator\");\n\nvar TextEditor = require(\"./ui.text_editor\");\n\nvar eventUtils = require(\"../../events/utils\");\n\nvar ua = navigator.userAgent;\nvar ignoreKeys = [\"backspace\", \"tab\", \"enter\", \"pageUp\", \"pageDown\", \"end\", \"home\", \"leftArrow\", \"rightArrow\", \"downArrow\", \"upArrow\", \"del\"];\nvar TEXTBOX_CLASS = \"dx-textbox\";\nvar SEARCHBOX_CLASS = \"dx-searchbox\";\nvar ICON_CLASS = \"dx-icon\";\nvar SEARCH_ICON_CLASS = \"dx-icon-search\";\nvar TextBox = TextEditor.inherit({\n  ctor: function (element, options) {\n    if (options) {\n      this._showClearButton = options.showClearButton;\n    }\n\n    this.callBase.apply(this, arguments);\n  },\n  _getDefaultOptions: function () {\n    return extend(this.callBase(), {\n      value: \"\",\n      mode: \"text\",\n      maxLength: null\n    });\n  },\n  _initMarkup: function () {\n    this.$element().addClass(TEXTBOX_CLASS);\n    this.callBase();\n    this.setAria(\"role\", \"textbox\");\n  },\n  _renderContentImpl: function () {\n    this._renderMaxLengthHandlers();\n\n    this.callBase();\n  },\n  _renderInputType: function () {\n    this.callBase();\n\n    this._renderSearchMode();\n  },\n  _renderMaxLengthHandlers: function () {\n    if (this._isAndroidOrIE()) {\n      eventsEngine.on(this._input(), eventUtils.addNamespace(\"keydown\", this.NAME), this._onKeyDownCutOffHandler.bind(this));\n      eventsEngine.on(this._input(), eventUtils.addNamespace(\"change\", this.NAME), this._onChangeCutOffHandler.bind(this));\n    }\n  },\n  _renderProps: function () {\n    this.callBase();\n\n    this._toggleMaxLengthProp();\n  },\n  _toggleMaxLengthProp: function () {\n    var maxLength = this._getMaxLength();\n\n    if (maxLength && maxLength > 0) {\n      this._input().attr(\"maxLength\", maxLength);\n    } else {\n      this._input().removeAttr(\"maxLength\");\n    }\n  },\n  _renderSearchMode: function () {\n    var $element = this._$element;\n\n    if (\"search\" === this.option(\"mode\")) {\n      $element.addClass(SEARCHBOX_CLASS);\n\n      this._renderSearchIcon();\n\n      if (void 0 === this._showClearButton) {\n        this._showClearButton = this.option(\"showClearButton\");\n        this.option(\"showClearButton\", true);\n      }\n    } else {\n      $element.removeClass(SEARCHBOX_CLASS);\n      this._$searchIcon && this._$searchIcon.remove();\n      this.option(\"showClearButton\", void 0 === this._showClearButton ? this.option(\"showClearButton\") : this._showClearButton);\n      delete this._showClearButton;\n    }\n  },\n  _renderSearchIcon: function () {\n    var $searchIcon = $(\"<div>\").addClass(ICON_CLASS).addClass(SEARCH_ICON_CLASS);\n    $searchIcon.prependTo(this._input().parent());\n    this._$searchIcon = $searchIcon;\n  },\n  _optionChanged: function (args) {\n    switch (args.name) {\n      case \"maxLength\":\n        this._toggleMaxLengthProp();\n\n        this._renderMaxLengthHandlers();\n\n        break;\n\n      case \"mask\":\n        this.callBase(args);\n\n        this._toggleMaxLengthProp();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _onKeyDownCutOffHandler: function (e) {\n    var actualMaxLength = this._getMaxLength();\n\n    if (actualMaxLength) {\n      var $input = $(e.target);\n      var key = eventUtils.normalizeKeyName(e);\n\n      this._cutOffExtraChar($input);\n\n      return $input.val().length < actualMaxLength || inArray(key, ignoreKeys) !== -1 || \"\" !== window.getSelection().toString();\n    } else {\n      return true;\n    }\n  },\n  _onChangeCutOffHandler: function (e) {\n    var $input = $(e.target);\n\n    if (this.option(\"maxLength\")) {\n      this._cutOffExtraChar($input);\n    }\n  },\n  _cutOffExtraChar: function ($input) {\n    var actualMaxLength = this._getMaxLength();\n\n    var textInput = $input.val();\n\n    if (actualMaxLength && textInput.length > actualMaxLength) {\n      $input.val(textInput.substr(0, actualMaxLength));\n    }\n  },\n  _getMaxLength: function () {\n    var isMaskSpecified = !!this.option(\"mask\");\n    return isMaskSpecified ? null : this.option(\"maxLength\");\n  },\n  _isAndroidOrIE: function () {\n    var realDevice = devices.real();\n    var version = realDevice.version.join(\".\");\n    return browser.msie || \"android\" === realDevice.platform && version && /^(2\\.|4\\.1)/.test(version) && !/chrome/i.test(ua);\n  }\n});\nregisterComponent(\"dxTextBox\", TextBox);\nmodule.exports = TextBox;","map":null,"metadata":{},"sourceType":"script"}