{"ast":null,"code":"/**\r\n * DevExtreme (ui/responsive_box.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../core/renderer\");\n\nvar eventsEngine = require(\"../events/core/events_engine\");\n\nvar commonUtils = require(\"../core/utils/common\");\n\nvar typeUtils = require(\"../core/utils/type\");\n\nvar errors = require(\"./widget/ui.errors\");\n\nvar windowUtils = require(\"../core/utils/window\");\n\nvar window = windowUtils.getWindow();\n\nvar iteratorUtils = require(\"../core/utils/iterator\");\n\nvar extend = require(\"../core/utils/extend\").extend;\n\nvar registerComponent = require(\"../core/component_registrator\");\n\nvar Box = require(\"./box\");\n\nvar CollectionWidget = require(\"./collection/ui.collection_widget.edit\");\n\nvar RESPONSIVE_BOX_CLASS = \"dx-responsivebox\";\nvar SCREEN_SIZE_CLASS_PREFIX = RESPONSIVE_BOX_CLASS + \"-screen-\";\nvar BOX_ITEM_CLASS = \"dx-box-item\";\nvar BOX_ITEM_DATA_KEY = \"dxBoxItemData\";\nvar HD_SCREEN_WIDTH = 1920;\nvar ResponsiveBox = CollectionWidget.inherit({\n  _getDefaultOptions: function () {\n    return extend(this.callBase(), {\n      rows: [],\n      cols: [],\n      screenByWidth: null,\n      singleColumnScreen: \"\",\n      height: \"100%\",\n      width: \"100%\",\n      activeStateEnabled: false,\n      focusStateEnabled: false,\n      onItemStateChanged: void 0,\n      onLayoutChanged: null,\n      currentScreenFactor: void 0,\n      _layoutStrategy: void 0\n    });\n  },\n  _init: function () {\n    if (!this.option(\"screenByWidth\")) {\n      this._options.silent(\"screenByWidth\", windowUtils.defaultScreenFactorFunc);\n    }\n\n    this.callBase();\n\n    this._initLayoutChangedAction();\n  },\n  _initLayoutChangedAction: function () {\n    this._layoutChangedAction = this._createActionByOption(\"onLayoutChanged\", {\n      excludeValidators: [\"disabled\", \"readonly\"]\n    });\n  },\n  _itemClass: function () {\n    return BOX_ITEM_CLASS;\n  },\n  _itemDataKey: function () {\n    return BOX_ITEM_DATA_KEY;\n  },\n  _initMarkup: function () {\n    this.callBase();\n    this.$element().addClass(RESPONSIVE_BOX_CLASS);\n\n    this._updateRootBox();\n  },\n  _updateRootBox: function () {\n    clearTimeout(this._updateTimer);\n    this._updateTimer = setTimeout(function () {\n      if (this._$root) {\n        eventsEngine.triggerHandler(this._$root, \"dxupdate\");\n      }\n    }.bind(this));\n  },\n  _renderItems: function () {\n    this._setScreenSize();\n\n    this._screenItems = this._itemsByScreen();\n\n    this._prepareGrid();\n\n    this._spreadItems();\n\n    this._layoutItems();\n\n    this._linkNodeToItem();\n  },\n  _itemOptionChanged: function (item) {\n    var $item = this._findItemElementByItem(item);\n\n    if (!$item.length) {\n      return;\n    }\n\n    this._refreshItem($item, item);\n\n    this._clearItemNodeTemplates();\n\n    this._update();\n  },\n  _setScreenSize: function () {\n    var currentScreen = this._getCurrentScreen();\n\n    this._removeScreenSizeClass();\n\n    this.$element().addClass(SCREEN_SIZE_CLASS_PREFIX + currentScreen);\n    this.option(\"currentScreenFactor\", currentScreen);\n  },\n  _removeScreenSizeClass: function () {\n    var currentScreenFactor = this.option(\"currentScreenFactor\");\n    currentScreenFactor && this.$element().removeClass(SCREEN_SIZE_CLASS_PREFIX + currentScreenFactor);\n  },\n  _prepareGrid: function () {\n    var grid = this._grid = [];\n\n    this._prepareRowsAndCols();\n\n    iteratorUtils.each(this._rows, function () {\n      var row = [];\n      grid.push(row);\n      iteratorUtils.each(this._cols, function () {\n        row.push(this._createEmptyCell());\n      }.bind(this));\n    }.bind(this));\n  },\n  getSingleColumnRows: function () {\n    var rows = this.option(\"rows\");\n    var screenItemsLength = this._screenItems.length;\n\n    if (rows.length) {\n      var filteredRows = this._filterByScreen(rows);\n\n      var result = [];\n\n      for (var i = 0; i < screenItemsLength; i++) {\n        var sizeConfig = this._defaultSizeConfig();\n\n        if (i < filteredRows.length && typeUtils.isDefined(filteredRows[i].shrink)) {\n          sizeConfig.shrink = filteredRows[i].shrink;\n        }\n\n        result.push(sizeConfig);\n      }\n\n      return result;\n    } else {\n      return this._defaultSizeConfig(screenItemsLength);\n    }\n  },\n  _prepareRowsAndCols: function () {\n    if (this._isSingleColumnScreen()) {\n      this._prepareSingleColumnScreenItems();\n\n      this._rows = this.getSingleColumnRows();\n      this._cols = this._defaultSizeConfig(1);\n    } else {\n      this._rows = this._sizesByScreen(this.option(\"rows\"));\n      this._cols = this._sizesByScreen(this.option(\"cols\"));\n    }\n  },\n  _isSingleColumnScreen: function () {\n    return this._screenRegExp().test(this.option(\"singleColumnScreen\")) || !this.option(\"rows\").length || !this.option(\"cols\").length;\n  },\n  _prepareSingleColumnScreenItems: function () {\n    this._screenItems.sort(function (item1, item2) {\n      return item1.location.row - item2.location.row || item1.location.col - item2.location.col;\n    });\n\n    iteratorUtils.each(this._screenItems, function (index, item) {\n      extend(item.location, {\n        row: index,\n        col: 0,\n        rowspan: 1,\n        colspan: 1\n      });\n    });\n  },\n  _sizesByScreen: function (sizeConfigs) {\n    return iteratorUtils.map(this._filterByScreen(sizeConfigs), function (sizeConfig) {\n      return extend(this._defaultSizeConfig(), sizeConfig);\n    }.bind(this));\n  },\n  _createDefaultSizeConfig: function () {\n    return {\n      ratio: 1,\n      baseSize: 0,\n      minSize: 0,\n      maxSize: 0\n    };\n  },\n  _defaultSizeConfig: function (size) {\n    var defaultSizeConfig = this._createDefaultSizeConfig();\n\n    if (!arguments.length) {\n      return defaultSizeConfig;\n    }\n\n    var result = [];\n\n    for (var i = 0; i < size; i++) {\n      result.push(defaultSizeConfig);\n    }\n\n    return result;\n  },\n  _filterByScreen: function (items) {\n    var screenRegExp = this._screenRegExp();\n\n    return commonUtils.grep(items, function (item) {\n      return !item.screen || screenRegExp.test(item.screen);\n    });\n  },\n  _screenRegExp: function () {\n    var screen = this._getCurrentScreen();\n\n    return new RegExp(\"(^|\\\\s)\" + screen + \"($|\\\\s)\", \"i\");\n  },\n  _getCurrentScreen: function () {\n    var width = this._screenWidth();\n\n    return this.option(\"screenByWidth\")(width);\n  },\n  _screenWidth: function () {\n    return windowUtils.hasWindow() ? $(window).width() : HD_SCREEN_WIDTH;\n  },\n  _createEmptyCell: function () {\n    return {\n      item: {},\n      location: {\n        colspan: 1,\n        rowspan: 1\n      }\n    };\n  },\n  _spreadItems: function () {\n    iteratorUtils.each(this._screenItems, function (_, itemInfo) {\n      var location = itemInfo.location || {};\n      var itemCol = location.col;\n      var itemRow = location.row;\n      var row = this._grid[itemRow];\n      var itemCell = row && row[itemCol];\n\n      this._occupyCells(itemCell, itemInfo);\n    }.bind(this));\n  },\n  _itemsByScreen: function () {\n    var _this = this;\n\n    return this.option(\"items\").reduce(function (result, item) {\n      var locations = item.location || {};\n      locations = typeUtils.isPlainObject(locations) ? [locations] : locations;\n\n      _this._filterByScreen(locations).forEach(function (location) {\n        result.push({\n          item: item,\n          location: extend({\n            rowspan: 1,\n            colspan: 1\n          }, location)\n        });\n      });\n\n      return result;\n    }, []);\n  },\n  _occupyCells: function (itemCell, itemInfo) {\n    if (!itemCell || this._isItemCellOccupied(itemCell, itemInfo)) {\n      return;\n    }\n\n    extend(itemCell, itemInfo);\n\n    this._markSpanningCell(itemCell);\n  },\n  _isItemCellOccupied: function (itemCell, itemInfo) {\n    if (!typeUtils.isEmptyObject(itemCell.item)) {\n      return true;\n    }\n\n    var result = false;\n\n    this._loopOverSpanning(itemInfo.location, function (cell) {\n      result = result || !typeUtils.isEmptyObject(cell.item);\n    });\n\n    return result;\n  },\n  _loopOverSpanning: function (location, callback) {\n    var rowEnd = location.row + location.rowspan - 1;\n    var colEnd = location.col + location.colspan - 1;\n    var boundRowEnd = Math.min(rowEnd, this._rows.length - 1);\n    var boundColEnd = Math.min(colEnd, this._cols.length - 1);\n    location.rowspan -= rowEnd - boundRowEnd;\n    location.colspan -= colEnd - boundColEnd;\n\n    for (var rowIndex = location.row; rowIndex <= boundRowEnd; rowIndex++) {\n      for (var colIndex = location.col; colIndex <= boundColEnd; colIndex++) {\n        if (rowIndex !== location.row || colIndex !== location.col) {\n          callback(this._grid[rowIndex][colIndex]);\n        }\n      }\n    }\n  },\n  _markSpanningCell: function (itemCell) {\n    this._loopOverSpanning(itemCell.location, function (cell) {\n      extend(cell, {\n        item: itemCell.item,\n        spanningCell: itemCell\n      });\n    });\n  },\n  _linkNodeToItem: function () {\n    iteratorUtils.each(this._itemElements(), function (_, itemNode) {\n      var $item = $(itemNode);\n      var item = $item.data(BOX_ITEM_DATA_KEY);\n\n      if (!item.box) {\n        item.node = $item.children();\n      }\n    });\n  },\n  _layoutItems: function () {\n    var rowsCount = this._grid.length;\n    var colsCount = rowsCount && this._grid[0].length;\n\n    if (!rowsCount && !colsCount) {\n      return;\n    }\n\n    var result = this._layoutBlock({\n      direction: \"col\",\n      row: {\n        start: 0,\n        end: rowsCount - 1\n      },\n      col: {\n        start: 0,\n        end: colsCount - 1\n      }\n    });\n\n    var rootBox = this._prepareBoxConfig(result.box || {\n      direction: \"row\",\n      items: [extend(result, {\n        ratio: 1\n      })]\n    });\n\n    extend(rootBox, this._rootBoxConfig(rootBox.items));\n    this._$root = $(\"<div>\").appendTo(this._itemContainer());\n\n    this._createComponent(this._$root, Box, rootBox);\n  },\n  _rootBoxConfig: function (items) {\n    var rootItems = iteratorUtils.each(items, function (index, item) {\n      this._needApplyAutoBaseSize(item) && extend(item, {\n        baseSize: \"auto\"\n      });\n    }.bind(this));\n    return extend({\n      width: \"100%\",\n      height: \"100%\",\n      items: rootItems,\n      itemTemplate: this._getTemplateByOption(\"itemTemplate\"),\n      itemHoldTimeout: this.option(\"itemHoldTimeout\"),\n      onItemHold: this._createActionByOption(\"onItemHold\"),\n      onItemClick: this._createActionByOption(\"onItemClick\"),\n      onItemContextMenu: this._createActionByOption(\"onItemContextMenu\"),\n      onItemRendered: this._createActionByOption(\"onItemRendered\")\n    }, {\n      _layoutStrategy: this.option(\"_layoutStrategy\")\n    });\n  },\n  _needApplyAutoBaseSize: function (item) {\n    return !item.baseSize && (!item.minSize || \"auto\" === item.minSize) && (!item.maxSize || \"auto\" === item.maxSize);\n  },\n  _prepareBoxConfig: function (config) {\n    return extend(config || {}, {\n      crossAlign: \"stretch\",\n      onItemStateChanged: this.option(\"onItemStateChanged\")\n    });\n  },\n  _layoutBlock: function (options) {\n    if (this._isSingleItem(options)) {\n      return this._itemByCell(options.row.start, options.col.start);\n    }\n\n    return this._layoutDirection(options);\n  },\n  _isSingleItem: function (options) {\n    var firstCellLocation = this._grid[options.row.start][options.col.start].location;\n    var isItemRowSpanned = options.row.end - options.row.start === firstCellLocation.rowspan - 1;\n    var isItemColSpanned = options.col.end - options.col.start === firstCellLocation.colspan - 1;\n    return isItemRowSpanned && isItemColSpanned;\n  },\n  _itemByCell: function (rowIndex, colIndex) {\n    var itemCell = this._grid[rowIndex][colIndex];\n    return itemCell.spanningCell ? null : itemCell.item;\n  },\n  _layoutDirection: function (options) {\n    var items = [];\n    var direction = options.direction;\n\n    var crossDirection = this._crossDirection(direction);\n\n    var block;\n\n    while (block = this._nextBlock(options)) {\n      if (this._isBlockIndivisible(options.prevBlockOptions, block)) {\n        throw errors.Error(\"E1025\");\n      }\n\n      var item = this._layoutBlock({\n        direction: crossDirection,\n        row: block.row,\n        col: block.col,\n        prevBlockOptions: options\n      });\n\n      if (item) {\n        extend(item, this._blockSize(block, crossDirection));\n        items.push(item);\n      }\n\n      options[crossDirection].start = block[crossDirection].end + 1;\n    }\n\n    return {\n      box: this._prepareBoxConfig({\n        direction: direction,\n        items: items\n      })\n    };\n  },\n  _isBlockIndivisible: function (options, block) {\n    return options && options.col.start === block.col.start && options.col.end === block.col.end && options.row.start === block.row.start && options.row.end === block.row.end;\n  },\n  _crossDirection: function (direction) {\n    return \"col\" === direction ? \"row\" : \"col\";\n  },\n  _nextBlock: function (options) {\n    var direction = options.direction;\n\n    var crossDirection = this._crossDirection(direction);\n\n    var startIndex = options[direction].start;\n    var endIndex = options[direction].end;\n    var crossStartIndex = options[crossDirection].start;\n\n    if (crossStartIndex > options[crossDirection].end) {\n      return null;\n    }\n\n    var crossSpan = 1;\n\n    for (var crossIndex = crossStartIndex; crossIndex < crossStartIndex + crossSpan; crossIndex++) {\n      var lineCrossSpan = 1;\n\n      for (var index = startIndex; index <= endIndex; index++) {\n        var cell = this._cellByDirection(direction, index, crossIndex);\n\n        lineCrossSpan = Math.max(lineCrossSpan, cell.location[crossDirection + \"span\"]);\n      }\n\n      var lineCrossEndIndex = crossIndex + lineCrossSpan;\n      var crossEndIndex = crossStartIndex + crossSpan;\n\n      if (lineCrossEndIndex > crossEndIndex) {\n        crossSpan += lineCrossEndIndex - crossEndIndex;\n      }\n    }\n\n    var result = {};\n    result[direction] = {\n      start: startIndex,\n      end: endIndex\n    };\n    result[crossDirection] = {\n      start: crossStartIndex,\n      end: crossStartIndex + crossSpan - 1\n    };\n    return result;\n  },\n  _cellByDirection: function (direction, index, crossIndex) {\n    return \"col\" === direction ? this._grid[crossIndex][index] : this._grid[index][crossIndex];\n  },\n  _blockSize: function (block, direction) {\n    var defaultMinSize = \"row\" === direction ? \"auto\" : 0;\n    var sizeConfigs = \"row\" === direction ? this._rows : this._cols;\n    var result = extend(this._createDefaultSizeConfig(), {\n      ratio: 0\n    });\n\n    for (var index = block[direction].start; index <= block[direction].end; index++) {\n      var sizeConfig = sizeConfigs[index];\n      result.ratio += sizeConfig.ratio;\n      result.baseSize += sizeConfig.baseSize;\n      result.minSize += sizeConfig.minSize;\n      result.maxSize += sizeConfig.maxSize;\n\n      if (typeUtils.isDefined(sizeConfig.shrink)) {\n        result.shrink = sizeConfig.shrink;\n      }\n    }\n\n    result.minSize = result.minSize ? result.minSize : defaultMinSize;\n    result.maxSize = result.maxSize ? result.maxSize : \"auto\";\n    this._isSingleColumnScreen() && (result.baseSize = \"auto\");\n    return result;\n  },\n  _update: function () {\n    var $existingRoot = this._$root;\n\n    this._renderItems();\n\n    $existingRoot && $existingRoot.detach();\n\n    this._saveAssistantRoot($existingRoot);\n\n    this._layoutChangedAction();\n\n    this._updateRootBox();\n  },\n  _saveAssistantRoot: function ($root) {\n    this._assistantRoots = this._assistantRoots || [];\n\n    this._assistantRoots.push($root);\n  },\n  _dispose: function () {\n    clearTimeout(this._updateTimer);\n\n    this._clearItemNodeTemplates();\n\n    this._cleanUnusedRoots();\n\n    this.callBase.apply(this, arguments);\n  },\n  _cleanUnusedRoots: function () {\n    if (!this._assistantRoots) {\n      return;\n    }\n\n    iteratorUtils.each(this._assistantRoots, function (_, item) {\n      $(item).remove();\n    });\n  },\n  _clearItemNodeTemplates: function () {\n    iteratorUtils.each(this.option(\"items\"), function () {\n      delete this.node;\n    });\n  },\n  _toggleVisibility: function (visible) {\n    this.callBase(visible);\n\n    if (visible) {\n      this._updateRootBox();\n    }\n  },\n  _attachClickEvent: commonUtils.noop,\n  _optionChanged: function (args) {\n    switch (args.name) {\n      case \"rows\":\n      case \"cols\":\n      case \"screenByWidth\":\n      case \"_layoutStrategy\":\n      case \"singleColumnScreen\":\n        this._clearItemNodeTemplates();\n\n        this._invalidate();\n\n        break;\n\n      case \"width\":\n      case \"height\":\n        this.callBase(args);\n\n        this._update();\n\n        break;\n\n      case \"onLayoutChanged\":\n        this._initLayoutChangedAction();\n\n        break;\n\n      case \"itemTemplate\":\n        this._clearItemNodeTemplates();\n\n        this.callBase(args);\n        break;\n\n      case \"currentScreenFactor\":\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _dimensionChanged: function () {\n    if (this._getCurrentScreen() !== this.option(\"currentScreenFactor\")) {\n      this._update();\n    }\n  },\n  repaint: function () {\n    this._update();\n  }\n});\nregisterComponent(\"dxResponsiveBox\", ResponsiveBox);\nmodule.exports = ResponsiveBox;\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}