{"ast":null,"code":"/**\r\n * DevExtreme (ui/scroll_view/ui.scroll_view.native.pull_down.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\");\n\nvar Callbacks = require(\"../../core/utils/callbacks\");\n\nvar translator = require(\"../../animation/translator\");\n\nvar NativeStrategy = require(\"./ui.scrollable.native\");\n\nvar LoadIndicator = require(\"../load_indicator\");\n\nvar each = require(\"../../core/utils/iterator\").each;\n\nvar browser = require(\"../../core/utils/browser\");\n\nvar Deferred = require(\"../../core/utils/deferred\").Deferred;\n\nvar SCROLLVIEW_PULLDOWN_REFRESHING_CLASS = \"dx-scrollview-pull-down-loading\";\nvar SCROLLVIEW_PULLDOWN_READY_CLASS = \"dx-scrollview-pull-down-ready\";\nvar SCROLLVIEW_PULLDOWN_IMAGE_CLASS = \"dx-scrollview-pull-down-image\";\nvar SCROLLVIEW_PULLDOWN_INDICATOR_CLASS = \"dx-scrollview-pull-down-indicator\";\nvar SCROLLVIEW_PULLDOWN_TEXT_CLASS = \"dx-scrollview-pull-down-text\";\nvar SCROLLVIEW_PULLDOWN_VISIBLE_TEXT_CLASS = \"dx-scrollview-pull-down-text-visible\";\nvar STATE_RELEASED = 0;\nvar STATE_READY = 1;\nvar STATE_REFRESHING = 2;\nvar STATE_LOADING = 3;\nvar PULLDOWN_RELEASE_TIME = 400;\nvar PullDownNativeScrollViewStrategy = NativeStrategy.inherit({\n  _init: function (scrollView) {\n    this.callBase(scrollView);\n    this._$topPocket = scrollView._$topPocket;\n    this._$pullDown = scrollView._$pullDown;\n    this._$bottomPocket = scrollView._$bottomPocket;\n    this._$refreshingText = scrollView._$refreshingText;\n    this._$scrollViewContent = $(scrollView.content());\n\n    this._initCallbacks();\n  },\n  _initCallbacks: function () {\n    this.pullDownCallbacks = Callbacks();\n    this.releaseCallbacks = Callbacks();\n    this.reachBottomCallbacks = Callbacks();\n  },\n  render: function () {\n    this.callBase();\n\n    this._renderPullDown();\n\n    this._releaseState();\n  },\n  _renderPullDown: function () {\n    var $image = $(\"<div>\").addClass(SCROLLVIEW_PULLDOWN_IMAGE_CLASS);\n    var $loadContainer = $(\"<div>\").addClass(SCROLLVIEW_PULLDOWN_INDICATOR_CLASS);\n    var $loadIndicator = new LoadIndicator($(\"<div>\")).$element();\n    var $text = this._$pullDownText = $(\"<div>\").addClass(SCROLLVIEW_PULLDOWN_TEXT_CLASS);\n    this._$pullingDownText = $(\"<div>\").text(this.option(\"pullingDownText\")).appendTo($text);\n    this._$pulledDownText = $(\"<div>\").text(this.option(\"pulledDownText\")).appendTo($text);\n    this._$refreshingText = $(\"<div>\").text(this.option(\"refreshingText\")).appendTo($text);\n\n    this._$pullDown.empty().append($image).append($loadContainer.append($loadIndicator)).append($text);\n  },\n  _releaseState: function () {\n    this._state = STATE_RELEASED;\n\n    this._refreshPullDownText();\n  },\n  _pushBackFromBoundary: function () {\n    if (!this._isLocked() && !this._component.isEmpty()) {\n      this.callBase();\n    }\n  },\n  _refreshPullDownText: function () {\n    var that = this;\n    var pullDownTextItems = [{\n      element: this._$pullingDownText,\n      visibleState: STATE_RELEASED\n    }, {\n      element: this._$pulledDownText,\n      visibleState: STATE_READY\n    }, {\n      element: this._$refreshingText,\n      visibleState: STATE_REFRESHING\n    }];\n    each(pullDownTextItems, function (_, item) {\n      var action = that._state === item.visibleState ? \"addClass\" : \"removeClass\";\n      item.element[action](SCROLLVIEW_PULLDOWN_VISIBLE_TEXT_CLASS);\n    });\n  },\n  update: function () {\n    this.callBase();\n\n    this._setTopPocketOffset();\n  },\n  _updateDimensions: function () {\n    this.callBase();\n    this._topPocketSize = this._$topPocket.height();\n    this._bottomPocketSize = this._$bottomPocket.height();\n\n    if (browser.msie) {\n      this._scrollOffset = Math.round(100 * (this._$container.height() - this._$content.height())) / 100;\n    } else {\n      this._scrollOffset = this._$container.height() - this._$content.height();\n    }\n  },\n  _allowedDirections: function () {\n    var allowedDirections = this.callBase();\n    allowedDirections.vertical = allowedDirections.vertical || this._pullDownEnabled;\n    return allowedDirections;\n  },\n  _setTopPocketOffset: function () {\n    this._$topPocket.css({\n      top: -this._topPocketSize\n    });\n  },\n  handleEnd: function () {\n    this.callBase();\n\n    this._complete();\n  },\n  handleStop: function () {\n    this.callBase();\n\n    this._complete();\n  },\n  _complete: function () {\n    if (this._state === STATE_READY) {\n      this._setPullDownOffset(this._topPocketSize);\n\n      clearTimeout(this._pullDownRefreshTimeout);\n      this._pullDownRefreshTimeout = setTimeout(function () {\n        this._pullDownRefreshing();\n      }.bind(this), 400);\n    }\n  },\n  _setPullDownOffset: function (offset) {\n    translator.move(this._$topPocket, {\n      top: offset\n    });\n    translator.move(this._$scrollViewContent, {\n      top: offset\n    });\n  },\n  handleScroll: function (e) {\n    this.callBase(e);\n\n    if (this._state === STATE_REFRESHING) {\n      return;\n    }\n\n    var currentLocation = this.location().top;\n    var scrollDelta = (this._location || 0) - currentLocation;\n    this._location = currentLocation;\n\n    if (this._isPullDown()) {\n      this._pullDownReady();\n    } else {\n      if (scrollDelta > 0 && this._isReachBottom()) {\n        this._reachBottom();\n      } else {\n        this._stateReleased();\n      }\n    }\n  },\n  _isPullDown: function () {\n    return this._pullDownEnabled && this._location >= this._topPocketSize;\n  },\n  _isReachBottom: function () {\n    return this._reachBottomEnabled && this._location - (this._scrollOffset + this._bottomPocketSize) <= .5;\n  },\n  _reachBottom: function () {\n    if (this._state === STATE_LOADING) {\n      return;\n    }\n\n    this._state = STATE_LOADING;\n    this.reachBottomCallbacks.fire();\n  },\n  _pullDownReady: function () {\n    if (this._state === STATE_READY) {\n      return;\n    }\n\n    this._state = STATE_READY;\n\n    this._$pullDown.addClass(SCROLLVIEW_PULLDOWN_READY_CLASS);\n\n    this._refreshPullDownText();\n  },\n  _stateReleased: function () {\n    if (this._state === STATE_RELEASED) {\n      return;\n    }\n\n    this._$pullDown.removeClass(SCROLLVIEW_PULLDOWN_REFRESHING_CLASS).removeClass(SCROLLVIEW_PULLDOWN_READY_CLASS);\n\n    this._releaseState();\n  },\n  _pullDownRefreshing: function () {\n    if (this._state === STATE_REFRESHING) {\n      return;\n    }\n\n    this._state = STATE_REFRESHING;\n\n    this._$pullDown.addClass(SCROLLVIEW_PULLDOWN_REFRESHING_CLASS).removeClass(SCROLLVIEW_PULLDOWN_READY_CLASS);\n\n    this._refreshPullDownText();\n\n    this.pullDownCallbacks.fire();\n  },\n  pullDownEnable: function (enabled) {\n    if (enabled) {\n      this._updateDimensions();\n\n      this._setTopPocketOffset();\n    }\n\n    this._pullDownEnabled = enabled;\n  },\n  reachBottomEnable: function (enabled) {\n    this._reachBottomEnabled = enabled;\n  },\n  pendingRelease: function () {\n    this._state = STATE_READY;\n  },\n  release: function () {\n    var deferred = new Deferred();\n\n    this._updateDimensions();\n\n    clearTimeout(this._releaseTimeout);\n\n    if (this._state === STATE_LOADING) {\n      this._state = STATE_RELEASED;\n    }\n\n    this._releaseTimeout = setTimeout(function () {\n      this._setPullDownOffset(0);\n\n      this._stateReleased();\n\n      this.releaseCallbacks.fire();\n\n      this._updateAction();\n\n      deferred.resolve();\n    }.bind(this), PULLDOWN_RELEASE_TIME);\n    return deferred.promise();\n  },\n  dispose: function () {\n    clearTimeout(this._pullDownRefreshTimeout);\n    clearTimeout(this._releaseTimeout);\n    this.callBase();\n  }\n});\nmodule.exports = PullDownNativeScrollViewStrategy;","map":null,"metadata":{},"sourceType":"script"}