{"ast":null,"code":"/**\r\n * DevExtreme (ui/date_box/ui.date_box.strategy.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\");\n\nvar eventsEngine = require(\"../../events/core/events_engine\");\n\nvar noop = require(\"../../core/utils/common\").noop;\n\nvar Class = require(\"../../core/class\");\n\nvar dateLocalization = require(\"../../localization/date\");\n\nvar abstract = Class.abstract;\nvar DateBoxStrategy = Class.inherit({\n  ctor: function (dateBox) {\n    this.dateBox = dateBox;\n  },\n  widgetOption: function () {\n    return this._widget && this._widget.option.apply(this._widget, arguments);\n  },\n  _renderWidget: function (element) {\n    element = element || $(\"<div>\");\n    this._widget = this._createWidget(element);\n\n    this._widget.$element().appendTo(this._getWidgetContainer());\n  },\n  _createWidget: function (element) {\n    var widgetName = this._getWidgetName();\n\n    var widgetOptions = this._getWidgetOptions();\n\n    return this.dateBox._createComponent(element, widgetName, widgetOptions);\n  },\n  _getWidgetOptions: abstract,\n  _getWidgetName: abstract,\n  getDefaultOptions: function () {\n    return {\n      mode: \"text\"\n    };\n  },\n  getDisplayFormat: abstract,\n  supportedKeys: noop,\n  getKeyboardListener: noop,\n  customizeButtons: noop,\n  getParsedText: function (text, format) {\n    var value = dateLocalization.parse(text, format);\n    return value ? value : dateLocalization.parse(text);\n  },\n  renderInputMinMax: noop,\n  renderOpenedState: function () {\n    this._updateValue();\n  },\n  popupConfig: abstract,\n  _dimensionChanged: function () {\n    var _this$_getPopup;\n\n    null === (_this$_getPopup = this._getPopup()) || void 0 === _this$_getPopup ? void 0 : _this$_getPopup.repaint();\n  },\n  renderPopupContent: function () {\n    var popup = this._getPopup();\n\n    this._renderWidget();\n\n    var $popupContent = popup.$content().parent();\n    eventsEngine.off($popupContent, \"mousedown\");\n    eventsEngine.on($popupContent, \"mousedown\", this._preventFocusOnPopup.bind(this));\n  },\n  getFirstPopupElement: noop,\n  getLastPopupElement: noop,\n  _preventFocusOnPopup: function (e) {\n    e.preventDefault();\n  },\n  _getWidgetContainer: function () {\n    return this._getPopup().$content();\n  },\n  _getPopup: function () {\n    return this.dateBox._popup;\n  },\n  popupShowingHandler: noop,\n  popupHiddenHandler: noop,\n  _updateValue: function () {\n    this._widget && this._widget.option(\"value\", this.dateBoxValue());\n  },\n  useCurrentDateByDefault: noop,\n  getDefaultDate: function () {\n    return new Date();\n  },\n  textChangedHandler: noop,\n  renderValue: function () {\n    if (this.dateBox.option(\"opened\")) {\n      this._updateValue();\n    }\n  },\n  getValue: function () {\n    return this._widget.option(\"value\");\n  },\n  isAdaptivityChanged: function () {\n    return false;\n  },\n  dispose: function () {\n    var popup = this._getPopup();\n\n    if (popup) {\n      popup.$content().empty();\n    }\n  },\n  dateBoxValue: function () {\n    if (arguments.length) {\n      return this.dateBox.dateValue.apply(this.dateBox, arguments);\n    } else {\n      return this.dateBox.dateOption.apply(this.dateBox, [\"value\"]);\n    }\n  }\n});\nmodule.exports = DateBoxStrategy;","map":null,"metadata":{},"sourceType":"script"}