{"ast":null,"code":"import { ChildProperty, compile as baseTemplateComplier, setValue, Internationalization, isUndefined } from '@syncfusion/ej2-base';\nimport { extend as baseExtend, isNullOrUndefined, getValue, classList } from '@syncfusion/ej2-base';\nimport { setStyleAttribute, addClass, attributes, remove, createElement, removeClass } from '@syncfusion/ej2-base';\nimport { isObject, isBlazor, Browser } from '@syncfusion/ej2-base';\nimport { DataUtil, Query, DataManager, Predicate, UrlAdaptor, Deferred } from '@syncfusion/ej2-data';\nimport { Column } from '../models/column';\nimport { calculateRelativeBasedPosition, calculatePosition } from '@syncfusion/ej2-popups';\nimport { Print } from '../actions/print'; //https://typescript.codeplex.com/discussions/401501\n\n/**\n * Function to check whether target object implement specific interface\n * @param  {Object} target\n * @param  {string} checkFor\n * @returns no\n * @hidden\n */\n\nexport function doesImplementInterface(target, checkFor) {\n  /* tslint:disable:no-any */\n  return target.prototype && checkFor in target.prototype;\n}\n/**\n * Function to get value from provided data\n * @param  {string} field\n * @param  {Object} data\n * @param  {IColumn} column\n * @hidden\n */\n\nexport function valueAccessor(field, data, column) {\n  return isNullOrUndefined(field) || field === '' ? '' : DataUtil.getObject(field, data);\n}\n/**\n * Defines the method used to apply custom header cell values from external function and display this on each header cell rendered.\n * @param  {string} field\n * @param  {IColumn} column\n * @hidden\n */\n\nexport function headerValueAccessor(field, column) {\n  return isNullOrUndefined(field) || field === '' ? '' : DataUtil.getObject(field, column);\n}\n/**\n * The function used to update Dom using requestAnimationFrame.\n * @param  {Function} fn - Function that contains the actual action\n * @return {Promise<T>}\n * @hidden\n */\n\nexport function getUpdateUsingRaf(updateFunction, callBack) {\n  requestAnimationFrame(function () {\n    try {\n      callBack(null, updateFunction());\n    } catch (e) {\n      callBack(e);\n    }\n  });\n}\n/**\n * @hidden\n */\n\nexport function isExportColumns(exportProperties) {\n  return !isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.columns) && exportProperties.columns.length > 0;\n}\n/**\n * @hidden\n */\n\nexport function updateColumnTypeForExportColumns(exportProperties, gObj) {\n  var exportColumns = exportProperties.columns;\n  var gridColumns = gObj.columns;\n\n  for (var i = 0; i < exportColumns.length; i++) {\n    if (gridColumns.length - 1 >= i) {\n      if (gridColumns[i].columns) {\n        for (var j = 0; j < gridColumns[i].columns.length; j++) {\n          exportColumns[i].columns[j].type = gridColumns[i].columns[j].type;\n        }\n      } else {\n        exportColumns[i].type = gridColumns[i].type;\n      }\n    }\n  }\n}\n/**\n * @hidden\n */\n\nexport function updatecloneRow(grid) {\n  var nRows = [];\n  var actualRows = grid.vRows;\n\n  for (var i = 0; i < actualRows.length; i++) {\n    if (actualRows[i].isDataRow) {\n      nRows.push(actualRows[i]);\n    } else if (!actualRows[i].isDataRow) {\n      nRows.push(actualRows[i]);\n\n      if (!actualRows[i].isExpand && actualRows[i].isCaptionRow) {\n        i += getCollapsedRowsCount(actualRows[i], grid);\n      }\n    }\n  }\n\n  grid.vcRows = nRows;\n}\n/**\n * @hidden\n */\n\nvar count = 0;\nexport function getCollapsedRowsCount(val, grid) {\n  count = 0;\n  var gSummary = 'gSummary';\n  var total = 'count';\n  var gLen = grid.groupSettings.columns.length;\n  var records = 'records';\n  var items = 'items';\n  var value = val[gSummary];\n  var dataRowCnt = 0;\n  var agrCnt = 'aggregatesCount';\n\n  if (value === val.data[total]) {\n    if (grid.groupSettings.columns.length && !isNullOrUndefined(val[agrCnt]) && val[agrCnt]) {\n      if (grid.groupSettings.columns.length !== 1) {\n        count += val.indent !== 0 && value < 2 ? val[gSummary] * (gLen - val.indent + (gLen - val.indent) * val[agrCnt]) : val[gSummary] * (gLen - val.indent + (gLen - val.indent - 1) * val[agrCnt]) + val[agrCnt];\n      } else if (grid.groupSettings.columns.length === 1) {\n        count += val[gSummary] * (gLen - val.indent) + val[agrCnt];\n      }\n    } else if (grid.groupSettings.columns.length) {\n      if (grid.groupSettings.columns.length !== 1) {\n        count += val[gSummary] * (grid.groupSettings.columns.length - val.indent);\n      } else {\n        count += val[gSummary];\n      }\n    }\n\n    return count;\n  } else {\n    for (var i = 0, len = val.data[items].length; i < len; i++) {\n      var gLevel = val.data[items][i];\n      count += gLevel[items].length + (gLen !== grid.columns.length && !isNullOrUndefined(gLevel[items][records]) ? gLevel[items][records].length : 0);\n      dataRowCnt += !isNullOrUndefined(gLevel[items][records]) && !isNullOrUndefined(val[agrCnt]) ? gLevel[items][records].length : gLevel[items].length;\n\n      if (gLevel[items].GroupGuid && gLevel[items].childLevels !== 0) {\n        recursive(gLevel);\n      }\n    }\n\n    count += val.data[items].length;\n\n    if (!isNullOrUndefined(val[agrCnt])) {\n      if (val[agrCnt] && count && dataRowCnt !== 0) {\n        count += (count - dataRowCnt) * val[agrCnt] + val[agrCnt];\n      }\n    }\n  }\n\n  return count;\n}\n/**\n * @hidden\n */\n\nexport function recursive(row) {\n  var items = 'items';\n  var rCount = 'count';\n\n  for (var j = 0, length_1 = row[items].length; j < length_1; j++) {\n    var nLevel = row[items][j];\n    count += nLevel[rCount];\n\n    if (nLevel[items].childLevels !== 0) {\n      recursive(nLevel);\n    }\n  }\n}\n/**\n * @hidden\n */\n\nexport function iterateArrayOrObject(collection, predicate) {\n  var result = [];\n\n  for (var i = 0, len = collection.length; i < len; i++) {\n    var pred = predicate(collection[i], i);\n\n    if (!isNullOrUndefined(pred)) {\n      result.push(pred);\n    }\n  }\n\n  return result;\n}\n/** @hidden */\n\nexport function iterateExtend(array) {\n  var obj = [];\n\n  for (var i = 0; i < array.length; i++) {\n    obj.push(baseExtend({}, getActualProperties(array[i]), {}, true));\n  }\n\n  return obj;\n}\n/** @hidden */\n\nexport function templateCompiler(template) {\n  if (template) {\n    var e = void 0;\n\n    try {\n      if (document.querySelectorAll(template).length) {\n        return baseTemplateComplier(document.querySelector(template).innerHTML.trim());\n      }\n    } catch (e) {\n      return baseTemplateComplier(template);\n    }\n  }\n\n  return undefined;\n}\n/** @hidden */\n\nexport function setStyleAndAttributes(node, customAttributes) {\n  var copyAttr = {};\n  var literals = ['style', 'class']; //Dont touch the original object - make a copy\n\n  baseExtend(copyAttr, customAttributes, {});\n\n  if ('style' in copyAttr) {\n    setStyleAttribute(node, copyAttr[literals[0]]);\n    delete copyAttr[literals[0]];\n  }\n\n  if ('class' in copyAttr) {\n    addClass([node], copyAttr[literals[1]]);\n    delete copyAttr[literals[1]];\n  }\n\n  attributes(node, copyAttr);\n}\n/** @hidden */\n\nexport function extend(copied, first, second, exclude) {\n  var moved = baseExtend(copied, first, second);\n  var values = Object.keys(moved);\n\n  for (var i = 0; i < values.length; i++) {\n    if (exclude && exclude.indexOf(values[i]) !== -1) {\n      delete moved[values[i]];\n    }\n  }\n\n  return moved;\n}\n/** @hidden */\n\nexport function setColumnIndex(columnModel, ind) {\n  if (ind === void 0) {\n    ind = 0;\n  }\n\n  for (var i = 0, len = columnModel.length; i < len; i++) {\n    if (columnModel[i].columns) {\n      columnModel[i].index = isNullOrUndefined(columnModel[i].index) ? ind : columnModel[i].index;\n      ind++;\n      ind = setColumnIndex(columnModel[i].columns, ind);\n    } else {\n      columnModel[i].index = isNullOrUndefined(columnModel[i].index) ? ind : columnModel[i].index;\n      ind++;\n    }\n  }\n\n  return ind;\n}\n/** @hidden */\n\nexport function prepareColumns(columns, autoWidth) {\n  for (var c = 0, len = columns.length; c < len; c++) {\n    var column = void 0;\n\n    if (typeof columns[c] === 'string') {\n      column = new Column({\n        field: columns[c]\n      });\n    } else if (!(columns[c] instanceof Column)) {\n      if (!columns[c].columns) {\n        column = new Column(columns[c]);\n      } else {\n        columns[c].columns = prepareColumns(columns[c].columns);\n        column = new Column(columns[c]);\n      }\n    } else {\n      column = columns[c];\n    }\n\n    if (column.type && column.type.toLowerCase() === 'checkbox') {\n      column.allowReordering = false;\n    }\n\n    column.headerText = isNullOrUndefined(column.headerText) ? column.foreignKeyValue || column.field || '' : column.headerText;\n    column.foreignKeyField = column.foreignKeyField || column.field;\n    column.valueAccessor = (typeof column.valueAccessor === 'string' ? getValue(column.valueAccessor, window) : column.valueAccessor) || valueAccessor;\n    column.width = autoWidth && isNullOrUndefined(column.width) ? 200 : column.width;\n\n    if (isNullOrUndefined(column.visible)) {\n      column.visible = true;\n    }\n\n    columns[c] = column;\n  }\n\n  return columns;\n}\n/** @hidden */\n\nexport function setCssInGridPopUp(popUp, e, className) {\n  var popUpSpan = popUp.querySelector('span');\n  var position = popUp.parentElement.getBoundingClientRect();\n  var targetPosition = e.target.getBoundingClientRect();\n  var isBottomTail;\n  popUpSpan.className = className;\n  popUp.style.display = '';\n  isBottomTail = (isNullOrUndefined(e.clientY) ? e.changedTouches[0].clientY : e.clientY) > popUp.offsetHeight + 10;\n  popUp.style.top = targetPosition.top - position.top + (isBottomTail ? -(popUp.offsetHeight + 10) : popUp.offsetHeight + 10) + 'px'; //10px for tail element\n\n  popUp.style.left = getPopupLeftPosition(popUp, e, targetPosition, position.left) + 'px';\n\n  if (isBottomTail) {\n    popUp.querySelector('.e-downtail').style.display = '';\n    popUp.querySelector('.e-uptail').style.display = 'none';\n  } else {\n    popUp.querySelector('.e-downtail').style.display = 'none';\n    popUp.querySelector('.e-uptail').style.display = '';\n  }\n}\n/** @hidden */\n\nfunction getPopupLeftPosition(popup, e, targetPosition, left) {\n  var width = popup.offsetWidth / 2;\n  var x = getPosition(e).x;\n\n  if (x - targetPosition.left < width) {\n    return targetPosition.left - left;\n  } else if (targetPosition.right - x < width) {\n    return targetPosition.right - left - width * 2;\n  } else {\n    return x - left - width;\n  }\n}\n/** @hidden */\n\n\nexport function getActualProperties(obj) {\n  if (obj instanceof ChildProperty) {\n    return getValue('properties', obj);\n  } else {\n    return obj;\n  }\n}\n/** @hidden */\n\nexport function parentsUntil(elem, selector, isID) {\n  var parent = elem;\n\n  while (parent) {\n    if (isID ? parent.id === selector : parent.classList.contains(selector)) {\n      break;\n    }\n\n    parent = parent.parentElement;\n  }\n\n  return parent;\n}\n/** @hidden */\n\nexport function getElementIndex(element, elements) {\n  var index = -1;\n\n  for (var i = 0, len = elements.length; i < len; i++) {\n    if (elements[i].isEqualNode(element)) {\n      index = i;\n      break;\n    }\n  }\n\n  return index;\n}\n/** @hidden */\n\nexport function inArray(value, collection) {\n  for (var i = 0, len = collection.length; i < len; i++) {\n    if (collection[i] === value) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n/** @hidden */\n\nexport function getActualPropFromColl(collection) {\n  var coll = [];\n\n  for (var i = 0, len = collection.length; i < len; i++) {\n    if (collection[i].hasOwnProperty('properties')) {\n      coll.push(collection[i].properties);\n    } else {\n      coll.push(collection[i]);\n    }\n  }\n\n  return coll;\n}\n/** @hidden */\n\nexport function removeElement(target, selector) {\n  var elements = [].slice.call(target.querySelectorAll(selector));\n\n  for (var i = 0; i < elements.length; i++) {\n    remove(elements[i]);\n  }\n}\n/** @hidden */\n\nexport function getPosition(e) {\n  var position = {};\n  position.x = isNullOrUndefined(e.clientX) ? e.changedTouches[0].clientX : e.clientX;\n  position.y = isNullOrUndefined(e.clientY) ? e.changedTouches[0].clientY : e.clientY;\n  return position;\n}\nvar uid = 0;\n/** @hidden */\n\nexport function getUid(prefix) {\n  return prefix + uid++;\n}\n/** @hidden */\n\nexport function appendChildren(elem, children) {\n  for (var i = 0, len = children.length; i < len; i++) {\n    if (len === children.length) {\n      elem.appendChild(children[i]);\n    } else {\n      elem.appendChild(children[0]);\n    }\n  }\n\n  return elem;\n}\n/** @hidden */\n\nexport function parents(elem, selector, isID) {\n  var parent = elem;\n  var parents = [];\n\n  while (parent) {\n    if (isID ? parent.id === selector : parent.classList.contains(selector)) {\n      parents.push(parent);\n    }\n\n    parent = parent.parentElement;\n  }\n\n  return parents;\n}\n/** @hidden */\n\nexport function calculateAggregate(type, data, column, context) {\n  if (type === 'Custom') {\n    var temp = column.customAggregate;\n\n    if (typeof temp === 'string') {\n      temp = getValue(temp, window);\n    }\n\n    return temp ? temp.call(context, data, column) : '';\n  }\n\n  return column.field in data || data instanceof Array ? DataUtil.aggregates[type.toLowerCase()](data, column.field) : null;\n}\n/** @hidden */\n\nvar scrollWidth = null;\n/** @hidden */\n\nexport function getScrollBarWidth() {\n  if (scrollWidth !== null) {\n    return scrollWidth;\n  }\n\n  var divNode = document.createElement('div');\n  var value = 0;\n  divNode.style.cssText = 'width:100px;height: 100px;overflow: scroll;position: absolute;top: -9999px;';\n  document.body.appendChild(divNode);\n  value = divNode.offsetWidth - divNode.clientWidth | 0;\n  document.body.removeChild(divNode);\n  return scrollWidth = value;\n}\n/** @hidden */\n\nvar rowHeight;\n/** @hidden */\n\nexport function getRowHeight(element) {\n  if (rowHeight !== undefined) {\n    return rowHeight;\n  }\n\n  var table = createElement('table', {\n    className: 'e-table',\n    styles: 'visibility: hidden'\n  });\n  table.innerHTML = '<tr><td class=\"e-rowcell\">A<td></tr>';\n  element.appendChild(table);\n  var rect = table.querySelector('td').getBoundingClientRect();\n  element.removeChild(table);\n  rowHeight = Math.ceil(rect.height);\n  return rowHeight;\n}\n/** @hidden */\n\nexport function isComplexField(field) {\n  return field.split('.').length > 1;\n}\n/** @hidden */\n\nexport function getComplexFieldID(field) {\n  if (field === void 0) {\n    field = '';\n  }\n\n  return field.replace(/\\./g, '___');\n}\n/** @hidden */\n\nexport function setComplexFieldID(field) {\n  if (field === void 0) {\n    field = '';\n  }\n\n  return field.replace(/___/g, '.');\n}\n/** @hidden */\n\nexport function isEditable(col, type, elem) {\n  var row = parentsUntil(elem, 'e-row');\n  var isOldRow = !row ? true : row && !row.classList.contains('e-insertedrow');\n\n  if (type === 'beginEdit' && isOldRow) {\n    if (col.isIdentity || col.isPrimaryKey || !col.allowEditing) {\n      return false;\n    }\n\n    return true;\n  } else if (type === 'add' && col.isIdentity) {\n    return false;\n  } else {\n    if (isOldRow && !col.allowEditing && !col.isIdentity && !col.isPrimaryKey) {\n      return false;\n    }\n\n    return true;\n  }\n}\n/** @hidden */\n\nexport function isActionPrevent(inst) {\n  var dlg = inst.element.querySelector('#' + inst.element.id + 'EditConfirm');\n  return inst.editSettings.mode === 'Batch' && inst.element.querySelectorAll('.e-updatedtd').length && inst.editSettings.showConfirmDialog && (dlg ? dlg.classList.contains('e-popup-close') : true);\n}\n/** @hidden */\n\nexport function wrap(elem, action) {\n  var clName = 'e-wrap';\n  elem = elem instanceof Array ? elem : [elem];\n\n  for (var i = 0; i < elem.length; i++) {\n    action ? elem[i].classList.add(clName) : elem[i].classList.remove(clName);\n  }\n}\n/** @hidden */\n\nexport function setFormatter(serviceLocator, column, isServerRendered) {\n  var fmtr = serviceLocator.getService('valueFormatter');\n  var format = 'format';\n  var args;\n\n  if (column.type === 'date' || column.type === 'datetime') {\n    args = {\n      type: column.type,\n      skeleton: column.format\n    };\n\n    if (isBlazor() && isServerRendered) {\n      var isServer = 'isServerRendered';\n      args[isServer] = isServerRendered;\n    }\n\n    if (typeof column.format === 'string' && column.format !== 'yMd') {\n      args[format] = column.format;\n    }\n  }\n\n  switch (column.type) {\n    case 'date':\n      column.setFormatter(fmtr.getFormatFunction(args));\n      column.setParser(fmtr.getParserFunction(args));\n      break;\n\n    case 'datetime':\n      column.setFormatter(fmtr.getFormatFunction(args));\n      column.setParser(fmtr.getParserFunction(args));\n      break;\n\n    case 'number':\n      column.setFormatter(fmtr.getFormatFunction({\n        format: column.format\n      }));\n      column.setParser(fmtr.getParserFunction({\n        format: column.format\n      }));\n      break;\n  }\n}\n/** @hidden */\n\nexport function addRemoveActiveClasses(cells, add) {\n  var args = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    args[_i - 2] = arguments[_i];\n  }\n\n  for (var i = 0, len = cells.length; i < len; i++) {\n    if (add) {\n      classList(cells[i], args.slice(), []);\n      cells[i].setAttribute('aria-selected', 'true');\n    } else {\n      classList(cells[i], [], args.slice());\n      cells[i].removeAttribute('aria-selected');\n    }\n  }\n}\n/** @hidden */\n\nexport function distinctStringValues(result) {\n  var temp = {};\n  var res = [];\n\n  for (var i = 0; i < result.length; i++) {\n    if (!(result[i] in temp)) {\n      res.push(result[i].toString());\n      temp[result[i]] = 1;\n    }\n  }\n\n  return res;\n}\n/** @hidden */\n\nexport function getFilterMenuPostion(target, dialogObj, grid) {\n  var elementVisible = dialogObj.element.style.display;\n  dialogObj.element.style.display = 'block';\n  var dlgWidth = dialogObj.width;\n  var newpos;\n\n  if (!grid.enableRtl) {\n    newpos = calculateRelativeBasedPosition(target, dialogObj.element);\n    dialogObj.element.style.display = elementVisible;\n    dialogObj.element.style.top = newpos.top + target.getBoundingClientRect().height - 5 + 'px';\n    var leftPos = newpos.left - dlgWidth + target.clientWidth;\n\n    if (leftPos < 1) {\n      dialogObj.element.style.left = dlgWidth + leftPos - 16 + 'px'; // right calculation\n    } else {\n      dialogObj.element.style.left = leftPos + -4 + 'px';\n    }\n  } else {\n    newpos = calculatePosition(target, 'left', 'bottom');\n    dialogObj.element.style.top = newpos.top + target.getBoundingClientRect().height - 35 + 'px';\n    dialogObj.element.style.display = elementVisible;\n    var leftPos = newpos.left - dlgWidth + target.clientWidth;\n\n    if (leftPos < 1) {\n      dialogObj.element.style.left = dlgWidth + leftPos + -16 + 'px';\n    } else {\n      dialogObj.element.style.left = leftPos - 16 + 'px';\n    }\n  }\n}\n/** @hidden */\n\nexport function getZIndexCalcualtion(args, dialogObj) {\n  args.popup.element.style.zIndex = (dialogObj.zIndex + 1).toString();\n}\n/** @hidden */\n\nexport function toogleCheckbox(elem) {\n  var span = elem.querySelector('.e-frame');\n  span.classList.contains('e-check') ? classList(span, ['e-uncheck'], ['e-check']) : classList(span, ['e-check'], ['e-uncheck']);\n}\n/** @hidden */\n\nexport function createCboxWithWrap(uid, elem, className) {\n  var div = createElement('div', {\n    className: className\n  });\n  div.appendChild(elem);\n  div.setAttribute('uid', uid);\n  return div;\n}\n/** @hidden */\n\nexport function removeAddCboxClasses(elem, checked) {\n  removeClass([elem], ['e-check', 'e-stop', 'e-uncheck']);\n\n  if (checked) {\n    elem.classList.add('e-check');\n  } else {\n    elem.classList.add('e-uncheck');\n  }\n}\n/**\n * Refresh the Row model's foreign data.\n * @param row - Grid Row model object.\n * @param columns - Foreign columns array.\n * @param data - Updated Row data.\n * @hidden\n */\n\nexport function refreshForeignData(row, columns, data) {\n  for (var i = 0; i < columns.length; i++) {\n    setValue(columns[i].field, getForeignData(columns[i], data), row.foreignKeyData);\n  }\n\n  var cells = row.cells;\n\n  for (var i = 0; i < cells.length; i++) {\n    if (cells[i].isForeignKey) {\n      setValue('foreignKeyData', getValue(cells[i].column.field, row.foreignKeyData), cells[i]);\n    }\n  }\n}\n/**\n * Get the foreign data for the corresponding cell value.\n * @param column - Foreign Key column\n * @param data - Row data.\n * @param lValue - cell value.\n * @param foreignData - foreign data source.\n * @hidden\n */\n\nexport function getForeignData(column, data, lValue, foreignKeyData) {\n  var fField = column.foreignKeyField;\n  var key = !isNullOrUndefined(lValue) ? lValue : valueAccessor(column.field, data, column);\n  key = isNullOrUndefined(key) ? '' : key;\n  var query = new Query();\n  var fdata = foreignKeyData || (column.dataSource instanceof DataManager && column.dataSource.dataSource.json.length ? column.dataSource.dataSource.json : column.columnData);\n\n  if (key.getDay) {\n    query.where(getDatePredicate({\n      field: fField,\n      operator: 'equal',\n      value: key,\n      matchCase: false\n    }));\n  } else {\n    query.where(fField, '==', key, false);\n  }\n\n  return new DataManager(fdata).executeLocal(query);\n}\n/**\n * To use to get the column's object by the foreign key value.\n * @param foreignKeyValue - Defines ForeignKeyValue.\n * @param columns - Array of column object.\n * @hidden\n */\n\nexport function getColumnByForeignKeyValue(foreignKeyValue, columns) {\n  var column;\n  return columns.some(function (col) {\n    column = col;\n    return col.foreignKeyValue === foreignKeyValue;\n  }) && column;\n}\n/**\n * @hidden\n * @param filterObject - Defines predicate model object\n */\n\nexport function getDatePredicate(filterObject, type) {\n  var datePredicate;\n  var prevDate;\n  var nextDate;\n  var prevObj = baseExtend({}, getActualProperties(filterObject));\n  var nextObj = baseExtend({}, getActualProperties(filterObject));\n\n  if (isNullOrUndefined(filterObject.value)) {\n    datePredicate = new Predicate(prevObj.field, prevObj.operator, prevObj.value, false);\n    return datePredicate;\n  }\n\n  var value = new Date(filterObject.value);\n\n  if (filterObject.operator === 'equal' || filterObject.operator === 'notequal') {\n    if (type === 'datetime') {\n      prevDate = new Date(value.setSeconds(value.getSeconds() - 1));\n      nextDate = new Date(value.setSeconds(value.getSeconds() + 2));\n      filterObject.value = new Date(value.setSeconds(nextDate.getSeconds() - 1));\n    } else {\n      prevDate = new Date(value.setHours(0) - 1);\n      nextDate = new Date(value.setHours(24));\n    }\n\n    prevObj.value = prevDate;\n    nextObj.value = nextDate;\n\n    if (filterObject.operator === 'equal') {\n      prevObj.operator = 'greaterthan';\n      nextObj.operator = 'lessthan';\n    } else if (filterObject.operator === 'notequal') {\n      prevObj.operator = 'lessthanorequal';\n      nextObj.operator = 'greaterthanorequal';\n    }\n\n    var predicateSt = new Predicate(prevObj.field, prevObj.operator, prevObj.value, false);\n    var predicateEnd = new Predicate(nextObj.field, nextObj.operator, nextObj.value, false);\n    datePredicate = filterObject.operator === 'equal' ? predicateSt.and(predicateEnd) : predicateSt.or(predicateEnd);\n  } else {\n    if (typeof prevObj.value === 'string') {\n      prevObj.value = new Date(prevObj.value);\n    }\n\n    var predicates = new Predicate(prevObj.field, prevObj.operator, prevObj.value, false);\n    datePredicate = predicates;\n  }\n\n  if (filterObject.setProperties) {\n    filterObject.setProperties({\n      ejpredicate: datePredicate\n    }, true);\n  } else {\n    filterObject.ejpredicate = datePredicate;\n  }\n\n  return datePredicate;\n}\n/**\n * @hidden\n */\n\nexport function renderMovable(ele, frzCols) {\n  var mEle = ele.cloneNode(true);\n\n  for (var i = 0; i < frzCols; i++) {\n    mEle.removeChild(mEle.children[0]);\n  }\n\n  for (var i = frzCols, len = ele.childElementCount; i < len; i++) {\n    ele.removeChild(ele.children[ele.childElementCount - 1]);\n  }\n\n  return mEle;\n}\n/**\n * @hidden\n */\n\nexport function isGroupAdaptive(grid) {\n  return grid.enableVirtualization && grid.groupSettings.columns.length > 0 && grid.isVirtualAdaptive;\n}\n/**\n * @hidden\n */\n\nexport function getObject(field, object) {\n  if (field === void 0) {\n    field = '';\n  }\n\n  if (field) {\n    var value = object;\n    var splits = field.split('.');\n\n    for (var i = 0; i < splits.length && !isNullOrUndefined(value); i++) {\n      value = value[splits[i]];\n    }\n\n    return value;\n  }\n}\n/**\n * @hidden\n */\n\nexport function getCustomDateFormat(format, colType) {\n  var intl = new Internationalization();\n  var formatvalue;\n  var formatter = 'format';\n  var type = 'type';\n\n  if (colType === 'date') {\n    formatvalue = typeof format === 'object' ? intl.getDatePattern({\n      type: format[type] ? format[type] : 'date',\n      format: format[formatter]\n    }, false) : isBlazor() ? intl.getDatePattern({\n      type: 'dateTime',\n      format: format\n    }, false) : intl.getDatePattern({\n      type: 'dateTime',\n      skeleton: format\n    }, false);\n  } else {\n    formatvalue = typeof format === 'object' ? intl.getDatePattern({\n      type: format[type] ? format[type] : 'dateTime',\n      format: format[formatter]\n    }, false) : isBlazor() ? intl.getDatePattern({\n      type: 'dateTime',\n      format: format\n    }, false) : intl.getDatePattern({\n      type: 'dateTime',\n      skeleton: format\n    }, false);\n  }\n\n  return formatvalue;\n}\n/**\n * @hidden\n */\n\nexport function getExpandedState(gObj, hierarchyPrintMode) {\n  var rows = gObj.getRowsObject();\n  var obj = {};\n\n  for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {\n    var row = rows_1[_i];\n\n    if (row.isExpand && !row.isDetailRow) {\n      var index = gObj.allowPaging && gObj.printMode === 'AllPages' ? row.index + gObj.pageSettings.currentPage * gObj.pageSettings.pageSize - gObj.pageSettings.pageSize : row.index;\n      obj[index] = {};\n      obj[index].isExpand = true;\n      obj[index].gridModel = getPrintGridModel(row.childGrid, hierarchyPrintMode);\n      obj[index].gridModel.query = gObj.childGrid.query;\n    }\n  }\n\n  return obj;\n}\n/**\n * @hidden\n */\n\nexport function getPrintGridModel(gObj, hierarchyPrintMode) {\n  if (hierarchyPrintMode === void 0) {\n    hierarchyPrintMode = 'Expanded';\n  }\n\n  var printGridModel = {};\n\n  if (!gObj) {\n    return printGridModel;\n  }\n\n  for (var _i = 0, _a = Print.printGridProp; _i < _a.length; _i++) {\n    var key = _a[_i];\n\n    if (key === 'columns') {\n      printGridModel[key] = getActualPropFromColl(gObj[key]);\n    } else if (key === 'allowPaging') {\n      printGridModel[key] = gObj.printMode === 'CurrentPage';\n    } else {\n      printGridModel[key] = getActualProperties(gObj[key]);\n    }\n  }\n\n  if (gObj.childGrid && hierarchyPrintMode !== 'None') {\n    printGridModel.expandedRows = getExpandedState(gObj, hierarchyPrintMode);\n  }\n\n  return printGridModel;\n}\n/**\n * @hidden\n */\n\nexport function extendObjWithFn(copied, first, second, deep) {\n  var res = copied || {};\n  var len = arguments.length;\n\n  if (deep) {\n    len = len - 1;\n  }\n\n  for (var i = 1; i < len; i++) {\n    if (!arguments[i]) {\n      continue;\n    }\n\n    var obj1 = arguments[i];\n    var keys = Object.keys(Object.getPrototypeOf(obj1)).length ? Object.keys(obj1).concat(getPrototypesOfObj(obj1)) : Object.keys(obj1);\n\n    for (var i_1 = 0; i_1 < keys.length; i_1++) {\n      var source = res[keys[i_1]];\n      var cpy = obj1[keys[i_1]];\n      var cln = void 0;\n\n      if (deep && (isObject(cpy) || Array.isArray(cpy))) {\n        if (isObject(cpy)) {\n          cln = source ? source : {};\n          res[keys[i_1]] = baseExtend({}, cln, cpy, deep);\n        } else {\n          cln = source ? source : [];\n          res[keys[i_1]] = baseExtend([], cln, cpy, deep);\n        }\n      } else {\n        res[keys[i_1]] = cpy;\n      }\n    }\n  }\n\n  return res;\n}\n/**\n * @hidden\n */\n\nfunction getPrototypesOfObj(obj) {\n  var keys = [];\n\n  while (Object.getPrototypeOf(obj) && Object.keys(Object.getPrototypeOf(obj)).length) {\n    keys = keys.concat(Object.keys(Object.getPrototypeOf(obj)));\n    obj = Object.getPrototypeOf(obj);\n  }\n\n  return keys;\n}\n/**\n * @hidden\n */\n\n\nexport function measureColumnDepth(column) {\n  var max = 0;\n\n  for (var i = 0; i < column.length; i++) {\n    var depth = checkDepth(column[i], 0);\n\n    if (max < depth) {\n      max = depth;\n    }\n  }\n\n  return max + 1;\n}\n/**\n * @hidden\n */\n\nexport function checkDepth(col, index) {\n  var max = index;\n  var indices = [];\n\n  if (col.columns) {\n    index++;\n\n    for (var i = 0; i < col.columns.length; i++) {\n      indices[i] = checkDepth(col.columns[i], index);\n    }\n\n    for (var j = 0; j < indices.length; j++) {\n      if (max < indices[j]) {\n        max = indices[j];\n      }\n    }\n\n    index = max;\n  }\n\n  return index;\n}\n/**\n * @hidden\n */\n\nexport function refreshFilteredColsUid(gObj, filteredCols) {\n  for (var i = 0; i < filteredCols.length; i++) {\n    filteredCols[i].uid = filteredCols[i].isForeignKey ? getColumnByForeignKeyValue(filteredCols[i].field, gObj.getForeignKeyColumns()).uid : gObj.getColumnByField(filteredCols[i].field).uid;\n  }\n}\n/** @hidden */\n\nexport var Global;\n\n(function (Global) {\n  Global.timer = null;\n})(Global || (Global = {}));\n/**\n * @hidden\n */\n\n\nexport function getTransformValues(element) {\n  var style = document.defaultView.getComputedStyle(element, null);\n  var transformV = style.getPropertyValue('transform');\n  var replacedTv = transformV.replace(/,/g, '');\n  var translateX = parseFloat(replacedTv.split(' ')[4]);\n  var translateY = parseFloat(replacedTv.split(' ')[5]);\n  return {\n    width: translateX,\n    height: translateY\n  };\n}\n/** @hidden */\n\nexport function applyBiggerTheme(rootElement, element) {\n  if (rootElement.classList.contains('e-bigger')) {\n    element.classList.add('e-bigger');\n  }\n}\n/** @hidden */\n\nexport function alignFrozenEditForm(mTD, fTD) {\n  if (mTD && fTD) {\n    var mHeight = mTD.closest('.e-row').getBoundingClientRect().height;\n    var fHeight = fTD.closest('.e-row').getBoundingClientRect().height;\n\n    if (mHeight > fHeight) {\n      fTD.style.height = mHeight + 'px';\n    } else {\n      mTD.style.height = fHeight + 'px';\n    }\n  }\n}\n/** @hidden */\n\nexport function ensureLastRow(row, gridObj) {\n  var cntOffset = gridObj.getContent().firstElementChild.offsetHeight;\n  return row && row.getBoundingClientRect().top > cntOffset;\n}\n/** @hidden */\n\nexport function ensureFirstRow(row, rowTop) {\n  return row && row.getBoundingClientRect().top < rowTop;\n}\n/** @hidden */\n\nexport function getEditedDataIndex(gObj, data) {\n  var keyField = gObj.getPrimaryKeyFieldNames()[0];\n  var dataIndex;\n  gObj.getCurrentViewRecords().filter(function (e, index) {\n    if (e[keyField] === data[keyField]) {\n      dataIndex = index;\n    }\n  });\n  return dataIndex;\n}\n/** @hidden */\n\nexport function eventPromise(args, query) {\n  var state;\n  state = getStateEventArgument(query);\n  var def = new Deferred();\n  state.dataSource = def.resolve;\n  state.action = args;\n  return {\n    state: state,\n    deffered: def\n  };\n}\n/** @hidden */\n\nexport function getStateEventArgument(query) {\n  var adaptr = new UrlAdaptor();\n  var dm = new DataManager({\n    url: '',\n    adaptor: new UrlAdaptor()\n  });\n  var state = adaptr.processQuery(dm, query);\n  var data = JSON.parse(state.data);\n  return data;\n}\n/** @hidden */\n\nexport function ispercentageWidth(gObj) {\n  var columns = gObj.getVisibleColumns();\n  var percentageCol = 0;\n  var undefinedWidthCol = 0;\n\n  for (var i = 0; i < columns.length; i++) {\n    if (isUndefined(columns[i].width)) {\n      undefinedWidthCol++;\n    } else if (columns[i].width.toString().indexOf('%') !== -1) {\n      percentageCol++;\n    }\n  }\n\n  return (gObj.width === 'auto' || typeof gObj.width === 'string' && gObj.width.indexOf('%') !== -1) && Browser.info.name !== 'chrome' && !gObj.groupSettings.showGroupedColumn && gObj.groupSettings.columns.length && percentageCol && !undefinedWidthCol;\n}","map":null,"metadata":{},"sourceType":"module"}