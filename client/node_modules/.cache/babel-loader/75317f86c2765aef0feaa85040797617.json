{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * PdfColorBlend.ts class for EJ2-PDF\n */\n\n\nimport { PdfColorSpace } from './../enum';\nimport { PdfSampledFunction } from './../../general/functions/pdf-sampled-function';\nimport { PdfBlend } from './pdf-blend';\n/**\n * `PdfColorBlend` Represents the arrays of colors and positions used for\n *  interpolating color blending in a multicolor gradient.\n * @private\n */\n\nvar PdfColorBlend =\n/** @class */\nfunction (_super) {\n  __extends(PdfColorBlend, _super);\n\n  function PdfColorBlend(count) {\n    var _this = _super.call(this) || this;\n\n    if (typeof count === 'number') {\n      _this = _super.call(this, count) || this;\n    }\n\n    return _this;\n  }\n\n  Object.defineProperty(PdfColorBlend.prototype, \"colors\", {\n    //Properties\n\n    /**\n     * Gets or sets the array of colors.\n     * @public\n     */\n    get: function () {\n      return this.mcolors;\n    },\n    set: function (value) {\n      if (value == null) {\n        throw new Error('ArgumentNullException : Colors');\n      }\n\n      this.mcolors = value;\n    },\n    enumerable: true,\n    configurable: true\n  }); //Implementation\n\n  /**\n   * Gets the function.\n   * @param colorSpace The color space.\n   * @public\n   */\n\n  PdfColorBlend.prototype.getFunction = function (colorSpace) {\n    var domain = [0, 1];\n    var colourComponents = this.getColorComponentsCount(colorSpace);\n    var maxComponentValue = this.getMaxComponentValue(colorSpace);\n    var range = this.setRange(colourComponents, maxComponentValue);\n    var func = null;\n\n    if (this.mbrush == null && typeof this.mbrush === 'undefined') {\n      var sizes = [1];\n      var samplesCount = void 0;\n      var step = 1;\n\n      if (this.positions.length === 2) {\n        samplesCount = 2;\n      } else {\n        var positions = this.positions;\n        var intervals = this.getIntervals(positions);\n        var gcd = this.gcd(intervals);\n        step = gcd;\n        samplesCount = 1 / gcd + 1;\n      }\n\n      sizes[0] = samplesCount;\n      var samples = this.getSamplesValues(colorSpace, samplesCount, maxComponentValue, step);\n      func = new PdfSampledFunction(domain, range, sizes, samples);\n      return func;\n    }\n\n    return func;\n  };\n  /**\n   * 'cloneColorBlend' Clones this instance.\n   * @public\n   */\n\n\n  PdfColorBlend.prototype.cloneColorBlend = function () {\n    var cBlend = this;\n\n    if (this.mcolors != null && typeof this.mcolors !== 'undefined') {\n      cBlend.colors = this.mcolors;\n    }\n\n    if (this.positions != null && typeof this.positions !== 'undefined') {\n      cBlend.positions = this.positions;\n    }\n\n    return cBlend;\n  };\n  /**\n   * Sets the range.\n   * @param colourComponents The colour components.\n   * @param maxValue The max value.\n   */\n\n\n  PdfColorBlend.prototype.setRange = function (colourComponents, maxValue) {\n    var range = [colourComponents * 2];\n\n    for (var i = 0; i < colourComponents; ++i) {\n      range[i * 2] = 0;\n      range[i * 2 + 1] = 1;\n    }\n\n    return range;\n  };\n  /**\n   * Calculates the color components count according to colour space.\n   * @param colorSpace The color space.\n   */\n\n\n  PdfColorBlend.prototype.getColorComponentsCount = function (colorSpace) {\n    var count = 0;\n\n    switch (colorSpace) {\n      case PdfColorSpace.Rgb:\n        count = 3;\n        break;\n\n      case PdfColorSpace.Cmyk:\n        count = 4;\n        break;\n\n      case PdfColorSpace.GrayScale:\n        count = 1;\n        break;\n\n      default:\n        throw new Error('ArgumentException - Unsupported color space: ' + colorSpace + ' colorSpace');\n    }\n\n    return count;\n  };\n  /**\n   * Gets samples values for specified colour space.\n   * @param colorSpace The color space.\n   * @param sampleCount The sample count.\n   * @param maxComponentValue The max component value.\n   * @param step The step.\n   */\n\n\n  PdfColorBlend.prototype.getSamplesValues = function (colorSpace, sampleCount, maxComponentValue, step) {\n    var values;\n\n    switch (colorSpace) {\n      case PdfColorSpace.GrayScale:\n        values = this.getGrayscaleSamples(sampleCount, maxComponentValue, step);\n        break;\n\n      case PdfColorSpace.Cmyk:\n        values = this.getCmykSamples(sampleCount, maxComponentValue, step);\n        break;\n\n      case PdfColorSpace.Rgb:\n        values = this.getRgbSamples(sampleCount, maxComponentValue, step);\n        break;\n\n      default:\n        throw new Error('ArgumentException - Unsupported color space: ' + colorSpace + ' colorSpace');\n    }\n\n    return values;\n  };\n  /**\n   * Gets the grayscale samples.\n   * @param sampleCount The sample count.\n   * @param maxComponentValue The max component value.\n   * @param step The step.\n   */\n\n\n  PdfColorBlend.prototype.getGrayscaleSamples = function (sampleCount, maxComponentValue, step) {\n    var values = [sampleCount * 2];\n\n    for (var i = 0; i < sampleCount; ++i) {\n      var color = this.getNextColor(i, step, PdfColorSpace.GrayScale);\n      var index = i * 2;\n    }\n\n    return values;\n  };\n  /**\n   * Gets the RGB samples.\n   * @param sampleCount The sample count.\n   * @param maxComponentValue The max component value.\n   * @param step The step.\n   */\n\n\n  PdfColorBlend.prototype.getRgbSamples = function (sampleCount, maxComponentValue, step) {\n    var values = [sampleCount * 3];\n\n    for (var i = 0; i < sampleCount; ++i) {\n      var color = this.getNextColor(i, step, PdfColorSpace.Rgb);\n      var index = i * 3;\n      values[index] = color.r;\n      values[index + 1] = color.g;\n      values[index + 2] = color.b;\n    }\n\n    return values;\n  };\n  /**\n   * Gets the CMYK samples.\n   * @param sampleCount The sample count.\n   * @param maxComponentValue The max component value.\n   * @param step The step.\n   */\n\n\n  PdfColorBlend.prototype.getCmykSamples = function (sampleCount, maxComponentValue, step) {\n    var values = [sampleCount * 4];\n\n    for (var i = 0; i < sampleCount; i++) {\n      var color = this.getNextColor(i, step, PdfColorSpace.Cmyk);\n      var index = i * 4;\n      values[index] = color.c * maxComponentValue;\n      values[index + 1] = color.m * maxComponentValue;\n      values[index + 2] = color.y * maxComponentValue;\n      values[index + 3] = color.k * maxComponentValue;\n    }\n\n    return values;\n  };\n  /**\n   * Calculates the color that should be at the specified index.\n   * @param index The index.\n   * @param step The step.\n   * @param colorSpace The color space.\n   */\n\n\n  PdfColorBlend.prototype.getNextColor = function (index, step, colorSpace) {\n    var position = step * index;\n    var indexHi;\n    var indexLow;\n    var result = this.getIndices(position, indexLow, indexHi);\n    indexLow = result.indexLow;\n    indexHi = result.indexHi;\n    var color;\n\n    if (indexLow === indexHi) {\n      color = this.mcolors[indexLow];\n    } else {\n      var positionLow = this.positions[indexLow];\n      var positionHi = this.positions[indexHi];\n      var colorLow = this.mcolors[indexLow];\n      var colorHi = this.mcolors[indexHi];\n      var t = (position - positionLow) / (positionHi - positionLow);\n      color = this.interpolate(t, colorLow, colorHi, colorSpace);\n    }\n\n    return color;\n  };\n  /**\n   * Gets the indices.\n   * @param position The position.\n   * @param indexLow The index low.\n   * @param indexHi The index hi.\n   */\n\n\n  PdfColorBlend.prototype.getIndices = function (position, indexLow, indexHi) {\n    var positions = this.positions;\n    indexLow = 0;\n    indexHi = 0;\n\n    for (var i = 0; i < this.mcolors.length; ++i) {\n      var currPos = positions[i];\n\n      if (currPos === position) {\n        indexHi = i;\n        indexLow = i;\n        break;\n      } else if (currPos > position) {\n        indexHi = i;\n        break;\n      }\n\n      indexLow = i;\n      indexHi = i;\n    }\n\n    return {\n      indexLow: indexLow,\n      indexHi: indexHi\n    };\n  };\n  /**\n   * Calculates the max component value.\n   * @param colorSpace The color space.\n   */\n\n\n  PdfColorBlend.prototype.getMaxComponentValue = function (colorSpace) {\n    var result = 0;\n\n    switch (colorSpace) {\n      case PdfColorSpace.Cmyk:\n      case PdfColorSpace.Rgb:\n        result = 255;\n        break;\n\n      case PdfColorSpace.GrayScale:\n        result = 65535;\n        break;\n\n      default:\n        throw new Error('ArgumentException - Unsupported color space: ' + colorSpace + 'colorSpace');\n    }\n\n    return result;\n  };\n  /**\n   * Gets an intervals array from the positions array.\n   * @param positions The positions array.\n   */\n\n\n  PdfColorBlend.prototype.getIntervals = function (positions) {\n    var count = positions.length;\n    var intervals = [count - 1];\n    var prev = positions[0];\n\n    for (var i = 1; i < count; ++i) {\n      var v = positions[i];\n      intervals[i - 1] = v - prev;\n      prev = v;\n    }\n\n    return intervals;\n  };\n\n  return PdfColorBlend;\n}(PdfBlend);\n\nexport { PdfColorBlend };","map":null,"metadata":{},"sourceType":"module"}