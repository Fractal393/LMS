{"ast":null,"code":"import { extend, isBlazor } from '@syncfusion/ej2-base';\nimport { remove, isNullOrUndefined, updateBlazorTemplate, resetBlazorTemplate } from '@syncfusion/ej2-base';\nimport { parentsUntil, isGroupAdaptive, refreshForeignData, getObject } from '../base/util';\nimport * as events from '../base/constant';\nimport { RowRenderer } from '../renderer/row-renderer';\nimport { DataUtil } from '@syncfusion/ej2-data';\n/**\n * `NormalEdit` module is used to handle normal('inline, dialog, external') editing actions.\n * @hidden\n */\n\nvar NormalEdit =\n/** @class */\nfunction () {\n  function NormalEdit(parent, serviceLocator, renderer) {\n    this.args = {};\n    this.currentVirtualData = {};\n    this.parent = parent;\n    this.renderer = renderer;\n    this.serviceLocator = serviceLocator;\n    this.addEventListener();\n  }\n\n  NormalEdit.prototype.clickHandler = function (e) {\n    var target = e.target;\n    var gObj = this.parent;\n\n    if ((parentsUntil(target, 'e-gridcontent') && parentsUntil(parentsUntil(target, 'e-gridcontent'), 'e-grid').id === gObj.element.id || gObj.frozenRows && parentsUntil(target, 'e-headercontent')) && !parentsUntil(target, 'e-unboundcelldiv')) {\n      this.rowIndex = parentsUntil(target, 'e-rowcell') ? parseInt(target.parentElement.getAttribute('aria-rowindex'), 10) : -1;\n\n      if (gObj.isEdit) {\n        gObj.editModule.endEdit();\n      }\n    }\n  };\n\n  NormalEdit.prototype.dblClickHandler = function (e) {\n    if (parentsUntil(e.target, 'e-rowcell') && this.parent.editSettings.allowEditOnDblClick) {\n      this.parent.editModule.startEdit(parentsUntil(e.target, 'e-row'));\n    }\n  };\n  /**\n   * The function used to trigger editComplete\n   * @return {void}\n   * @hidden\n   */\n\n\n  NormalEdit.prototype.editComplete = function (e) {\n    this.parent.isEdit = false;\n    var action = 'action';\n\n    if (isBlazor() && !this.parent.isJsComponent) {\n      e.rows = null;\n    }\n\n    switch (e.requestType) {\n      case 'save':\n        if (!(this.parent.isCheckBoxSelection || this.parent.selectionSettings.type === 'Multiple') || !this.parent.isPersistSelection) {\n          if (e[action] !== 'edit') {\n            this.parent.selectRow(0);\n          }\n        }\n\n        this.parent.trigger(events.actionComplete, extend(e, {\n          requestType: 'save',\n          type: events.actionComplete\n        }));\n        break;\n\n      case 'delete':\n        if (isBlazor() && !this.parent.isJsComponent) {\n          var d = 'data';\n          e[d] = e[d][0];\n        }\n\n        this.parent.trigger(events.actionComplete, extend(e, {\n          requestType: 'delete',\n          type: events.actionComplete\n        }));\n        this.parent.selectRow(this.editRowIndex);\n        break;\n    }\n  };\n\n  NormalEdit.prototype.startEdit = function (tr) {\n    var _this = this;\n\n    var gObj = this.parent;\n    var primaryKeys = gObj.getPrimaryKeyFieldNames();\n    var primaryKeyValues = [];\n    this.rowIndex = this.editRowIndex = parseInt(tr.getAttribute('aria-rowindex'), 10);\n\n    if (gObj.enableVirtualization || gObj.enableInfiniteScrolling) {\n      var selector = '.e-row[aria-rowindex=\"' + this.rowIndex + '\"]';\n      var virtualRow = this.parent.element.querySelector(selector);\n\n      if (!virtualRow) {\n        return;\n      }\n    }\n\n    if (isBlazor()) {\n      var cols = this.parent.getColumns();\n\n      for (var i = 0; i < cols.length; i++) {\n        var col = cols[i];\n\n        if (col.template) {\n          resetBlazorTemplate(gObj.element.id + col.uid, 'Template', this.rowIndex);\n        }\n      }\n    }\n\n    if (isGroupAdaptive(gObj)) {\n      var rObj = gObj.getRowObjectFromUID(tr.getAttribute('data-uid'));\n      this.previousData = rObj.data;\n    } else if (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling) {\n      var e = {\n        data: this.previousData,\n        index: this.rowIndex\n      };\n      this.parent.notify(events.virtualScrollEditActionBegin, e);\n      this.previousData = e.data;\n    } else {\n      this.previousData = gObj.getCurrentViewRecords()[this.rowIndex];\n    }\n\n    for (var i = 0; i < primaryKeys.length; i++) {\n      primaryKeyValues.push(getObject(primaryKeys[i], this.previousData));\n    }\n\n    this.uid = tr.getAttribute('data-uid');\n    var rowObj = gObj.getRowObjectFromUID(this.uid);\n    var args = {\n      primaryKey: primaryKeys,\n      primaryKeyValue: primaryKeyValues,\n      requestType: 'beginEdit',\n      rowData: this.previousData,\n      rowIndex: this.rowIndex,\n      type: 'edit',\n      cancel: false,\n      foreignKeyData: rowObj && rowObj.foreignKeyData,\n      target: undefined\n    };\n\n    if (!isBlazor() || this.parent.isJsComponent) {\n      args.row = tr;\n    }\n\n    gObj.trigger(events.beginEdit, args, function (begineditargs) {\n      begineditargs.type = 'actionBegin';\n      gObj.trigger(events.actionBegin, begineditargs, function (editargs) {\n        if (!editargs.cancel) {\n          var cloneRow = 'cloneRow';\n          var frozen = 'frozen';\n          var cloneFrozen = 'cloneFrozen';\n          gObj.isEdit = true;\n          editargs.row = editargs.row ? editargs.row : tr;\n\n          if (isBlazor() && gObj.isServerRendered) {\n            _this.originalRow = editargs.row;\n            _this.cloneRow = editargs.row.cloneNode(true);\n            editargs[cloneRow] = _this.cloneRow;\n          }\n\n          if (gObj.editSettings.mode !== 'Dialog') {\n            gObj.clearSelection();\n          }\n\n          if (gObj.editSettings.mode === 'Dialog' && gObj.selectionModule) {\n            gObj.selectionModule.preventFocus = true;\n            editargs.row.classList.add('e-dlgeditrow');\n          }\n\n          _this.renderer.update(editargs);\n\n          if (isBlazor()) {\n            editargs.form = null;\n            _this.cloneFrozen = editargs[cloneFrozen];\n            _this.frozen = editargs[frozen];\n            _this.cloneRow = editargs[cloneRow];\n            _this.originalRow = editargs.row;\n          }\n\n          _this.uid = tr.getAttribute('data-uid');\n          gObj.editModule.applyFormValidation();\n          editargs.type = 'actionComplete';\n          gObj.trigger(events.actionComplete, editargs);\n          _this.args = editargs;\n\n          if (_this.parent.allowTextWrap) {\n            _this.parent.notify(events.freezeRender, {\n              case: 'textwrap'\n            });\n          }\n\n          if (isBlazor()) {\n            _this.parent.notify(events.toolbarRefresh, {});\n\n            gObj.element.querySelector('.e-gridpopup').style.display = 'none';\n\n            _this.parent.notify('start-edit', {});\n          }\n        }\n      });\n    });\n  };\n\n  NormalEdit.prototype.updateRow = function (index, data) {\n    var _this = this;\n\n    var gObj = this.parent;\n    this.editRowIndex = index;\n    var args = {\n      requestType: 'save',\n      action: 'edit',\n      type: events.actionBegin,\n      data: data,\n      cancel: false,\n      previousData: gObj.getCurrentViewRecords()[index],\n      row: gObj.getRowByIndex(index)\n    };\n    gObj.showSpinner();\n    gObj.notify(events.updateData, args);\n\n    if (args.promise) {\n      args.promise.then(function () {\n        return gObj.refresh();\n      }).catch(function (e) {\n        return _this.edFail(e);\n      });\n    } else {\n      gObj.refresh();\n    }\n  };\n\n  NormalEdit.prototype.editFormValidate = function () {\n    var gObj = this.parent;\n    var form1 = gObj.editModule.formObj.validate();\n    var form2 = gObj.editModule.mFormObj ? gObj.editModule.mFormObj.validate() : true;\n    return form1 && form2;\n  };\n\n  NormalEdit.prototype.endEdit = function () {\n    var gObj = this.parent;\n\n    if (!this.parent.isEdit || !this.editFormValidate()) {\n      return;\n    }\n\n    var editedData = extend({}, {}, this.previousData, true);\n    var args = extend(this.args, {\n      requestType: 'save',\n      type: events.actionBegin,\n      data: editedData,\n      cancel: false,\n      previousData: this.previousData,\n      selectedRow: gObj.selectedRowIndex,\n      foreignKeyData: {}\n    });\n    var isDlg = gObj.editSettings.mode === 'Dialog';\n    var dlgWrapper = document.querySelector('#' + gObj.element.id + '_dialogEdit_wrapper');\n    var dlgForm = isDlg ? dlgWrapper.querySelector('.e-gridform') : gObj.element.querySelector('.e-gridform');\n    var data = {\n      virtualData: {},\n      isAdd: false\n    };\n    this.parent.notify(events.getVirtualData, data);\n\n    if ((this.parent.enableVirtualization || this.parent.enableInfiniteScrolling) && this.parent.editSettings.mode === 'Normal' && !dlgForm) {\n      if (this.parent.isEdit) {\n        this.currentVirtualData = editedData = args.data = data.virtualData;\n      }\n    } else {\n      editedData = gObj.editModule.getCurrentEditedData(dlgForm, editedData);\n    }\n\n    if (gObj.getFrozenColumns() && gObj.editSettings.mode === 'Normal') {\n      var mForm = gObj.element.querySelector('.e-movableheader').querySelector('.e-gridform');\n\n      if (gObj.frozenRows && mForm) {\n        editedData = gObj.editModule.getCurrentEditedData(mForm, editedData);\n      } else {\n        var form = gObj.element.querySelector('.e-movablecontent').querySelector('.e-gridform');\n\n        if (form) {\n          editedData = gObj.editModule.getCurrentEditedData(form, editedData);\n        }\n      }\n    }\n\n    if (isBlazor()) {\n      var form = 'form';\n      var movableForm = 'movableForm';\n      args[form] = null;\n      args[movableForm] = null;\n      args.row = {};\n    }\n\n    var eleLength = [].slice.call(gObj.element.querySelectorAll('.e-editedrow')).length;\n\n    if (!data.isAdd && Object.keys(this.currentVirtualData).length && !eleLength) {\n      eleLength = 1;\n    }\n\n    if (isDlg ? dlgWrapper.querySelectorAll('.e-editedrow').length : eleLength) {\n      args.action = 'edit';\n      gObj.trigger(events.actionBegin, args, function (endEditArgs) {\n        if (endEditArgs.cancel) {\n          return;\n        }\n\n        gObj.showSpinner();\n        gObj.notify(events.updateData, endEditArgs);\n      });\n    } else {\n      args.action = 'add';\n      args.selectedRow = 0;\n      args.index = this.addedRowIndex;\n      gObj.notify(events.virtualScrollEditSuccess, {});\n      gObj.notify(events.modelChanged, args);\n      this.addedRowIndex = null;\n\n      if (args.cancel) {\n        return;\n      }\n    }\n  };\n\n  NormalEdit.prototype.destroyElements = function () {\n    var gObj = this.parent;\n    gObj.editModule.destroyWidgets();\n    gObj.editModule.destroyForm();\n    this.parent.notify(events.dialogDestroy, {});\n  };\n\n  NormalEdit.prototype.editHandler = function (args) {\n    var _this = this;\n\n    if (args.promise) {\n      args.promise.then(function (e) {\n        return _this.edSucc(e, args);\n      }).catch(function (e) {\n        return _this.edFail(e);\n      });\n    } else {\n      this.editSuccess(args.data, args);\n    }\n  };\n\n  NormalEdit.prototype.edSucc = function (e, args) {\n    this.editSuccess(e, args);\n  };\n\n  NormalEdit.prototype.edFail = function (e) {\n    if (isBlazor() && this.parent.isServerRendered) {\n      var error = 'error';\n      var message = 'message';\n\n      if (!isNullOrUndefined(e[error]) && !isNullOrUndefined(e[error][message])) {\n        e[error] = e[error][message];\n      }\n    }\n\n    this.editFailure(e);\n  };\n\n  NormalEdit.prototype.updateCurrentViewData = function (data) {\n    if (!this.parent.enableVirtualization && !this.parent.enableInfiniteScrolling) {\n      this.parent.getCurrentViewRecords()[this.editRowIndex] = data;\n    }\n  };\n\n  NormalEdit.prototype.requestSuccess = function (args) {\n    if (this.parent.editModule.formObj && !this.parent.editModule.formObj.isDestroyed) {\n      this.destroyElements();\n      this.stopEditStatus();\n\n      if (this.parent.editSettings.mode === 'Dialog' && args.action !== 'add') {\n        this.parent.element.querySelector('.e-dlgeditrow').classList.remove('e-dlgeditrow');\n      }\n    }\n  };\n\n  NormalEdit.prototype.editSuccess = function (e, args) {\n    if (!isNullOrUndefined(e) && !(e instanceof Array)) {\n      var rowData = 'rowData';\n      args.data = extend({}, extend({}, args[rowData], args.data), e);\n    }\n\n    var editArgs;\n    this.requestSuccess(args);\n    this.parent.trigger(events.beforeDataBound, args);\n    args.type = events.actionComplete;\n    this.parent.isEdit = false;\n\n    if (isBlazor() && this.parent.isServerRendered) {\n      this.closeForm();\n      var rowIndex = 'rowIndex';\n      var action = 'action';\n      var data = 'data';\n      editArgs = {\n        requestType: args.requestType,\n        rowIndex: args[rowIndex],\n        action: args[action],\n        data: args[data]\n      };\n      this.parent.notify('editsuccess', editArgs);\n    } else {\n      this.refreshRow(args.data);\n    }\n\n    this.parent.notify(events.virtualScrollEditSuccess, args);\n    this.parent.editModule.checkLastRow(args.row);\n    this.parent.editModule.isLastRow = false;\n    this.updateCurrentViewData(args.data);\n    this.blazorTemplate();\n\n    if (!(isBlazor() && this.parent.isServerRendered)) {\n      this.editRowIndex = null;\n      this.parent.trigger(events.actionComplete, args);\n    }\n\n    if (isBlazor()) {\n      this.parent.notify(events.toolbarRefresh, {});\n    }\n\n    if (!(this.parent.isCheckBoxSelection || this.parent.selectionSettings.type === 'Multiple') || !this.parent.isPersistSelection) {\n      if (this.parent.editSettings.mode !== 'Dialog') {\n        if (isBlazor() && this.parent.isServerRendered) {\n          var rowIndex = 'editRowIndex';\n          editArgs[rowIndex] = this.rowIndex > -1 ? this.rowIndex : this.editRowIndex;\n        } else {\n          this.parent.selectRow(this.rowIndex > -1 ? this.rowIndex : this.editRowIndex);\n        }\n      }\n    }\n\n    this.parent.hideSpinner();\n  };\n\n  NormalEdit.prototype.closeForm = function () {\n    if (!this.cloneRow && this.parent.isEdit) {\n      this.stopEditStatus();\n    }\n\n    if (this.cloneRow) {\n      this.cloneRow.remove();\n      this.cloneRow = null;\n      this.originalRow.classList.remove('e-hiddenrow');\n    }\n\n    if (this.parent.getFrozenColumns() && this.cloneFrozen) {\n      this.cloneFrozen.remove();\n      this.frozen.classList.remove('e-hiddenrow');\n    }\n  };\n\n  NormalEdit.prototype.blazorTemplate = function () {\n    var cols = this.parent.getColumns();\n\n    if (this.parent.editSettings.template && this.parent.editSettings.mode === 'Normal') {\n      updateBlazorTemplate(this.parent.element.id + 'editSettingsTemplate', 'Template', this.parent.editSettings);\n    }\n\n    for (var i = 0; i < cols.length; i++) {\n      var col = cols[i];\n\n      if (col.template) {\n        updateBlazorTemplate(this.parent.element.id + col.uid, 'Template', col, false);\n      }\n\n      if (col.editTemplate) {\n        updateBlazorTemplate(this.parent.element.id + col.uid + 'editTemplate', 'EditTemplate', col);\n      }\n    }\n  };\n\n  NormalEdit.prototype.editFailure = function (e) {\n    this.parent.trigger(events.actionFailure, isBlazor() && e instanceof Array ? e[0] : e);\n    this.parent.hideSpinner();\n    this.parent.log('actionfailure', {\n      error: e\n    });\n  };\n\n  NormalEdit.prototype.needRefresh = function () {\n    var refresh = true;\n    var editedRow = this.parent.element.querySelector('.e-gridform');\n\n    if ((this.parent.enableVirtualization || this.parent.infiniteScrollSettings.enableCache) && this.parent.editSettings.mode === 'Normal' && !editedRow) {\n      refresh = false;\n    }\n\n    return refresh;\n  };\n\n  NormalEdit.prototype.refreshRow = function (data) {\n    var frzCols = this.parent.getFrozenColumns();\n    var row = new RowRenderer(this.serviceLocator, null, this.parent);\n    var rowObj = this.parent.getRowObjectFromUID(this.uid);\n\n    if (rowObj) {\n      rowObj.changes = data;\n      this.parent.notify(events.refreshVirtualCache, data);\n      refreshForeignData(rowObj, this.parent.getForeignKeyColumns(), rowObj.changes);\n\n      if (this.needRefresh()) {\n        row.refresh(rowObj, this.parent.getColumns(), true);\n      }\n\n      if (frzCols) {\n        var uid = void 0;\n        var tr = this.parent.element.querySelector('[data-uid=' + rowObj.uid + ']');\n\n        if (parentsUntil(tr, 'e-frozencontent') || parentsUntil(tr, 'e-frozenheader')) {\n          if (this.parent.infiniteScrollSettings.enableCache) {\n            uid = this.parent.getMovableRowByIndex(rowObj.index).getAttribute('data-uid');\n          } else {\n            uid = this.parent.getMovableRows()[rowObj.index].getAttribute('data-uid');\n          }\n        } else {\n          if (this.parent.infiniteScrollSettings.enableCache) {\n            uid = this.parent.getRowByIndex(rowObj.index).getAttribute('data-uid');\n          } else {\n            uid = this.parent.getRows()[rowObj.index].getAttribute('data-uid');\n          }\n        }\n\n        rowObj = this.parent.getRowObjectFromUID(uid);\n        rowObj.changes = data;\n        row.refresh(rowObj, this.parent.columns, true);\n        this.parent.editModule.checkLastRow(tr);\n      }\n    }\n  };\n\n  NormalEdit.prototype.closeEdit = function () {\n    var _this = this;\n\n    if (!this.parent.isEdit) {\n      return;\n    }\n\n    var gObj = this.parent;\n    var args = extend(this.args, {\n      requestType: 'cancel',\n      type: events.actionBegin,\n      cancel: false,\n      data: this.previousData,\n      selectedRow: gObj.selectedRowIndex\n    });\n    gObj.notify(events.virtualScrollEditCancel, args);\n    this.blazorTemplate();\n\n    if (isBlazor()) {\n      var form = 'form';\n      args[form] = null;\n    }\n\n    gObj.trigger(events.actionBegin, args, function (closeEditArgs) {\n      if (closeEditArgs.cancel) {\n        return;\n      }\n\n      if (_this.parent.editSettings.mode === 'Dialog') {\n        _this.parent.notify(events.dialogDestroy, {});\n      }\n\n      gObj.isEdit = false;\n\n      _this.stopEditStatus();\n\n      closeEditArgs.type = events.actionComplete;\n\n      if (gObj.editSettings.mode !== 'Dialog') {\n        if (isBlazor() && gObj.isServerRendered) {\n          _this.closeForm();\n        } else {\n          _this.refreshRow(closeEditArgs.data);\n        }\n      }\n\n      if (!gObj.getContentTable().querySelector('tr.e-emptyrow') && !gObj.getContentTable().querySelector('tr.e-row')) {\n        gObj.renderModule.emptyRow();\n      }\n\n      if (gObj.editSettings.mode !== 'Dialog') {\n        gObj.selectRow(_this.rowIndex);\n      }\n\n      gObj.trigger(events.actionComplete, closeEditArgs);\n\n      if (isBlazor()) {\n        _this.parent.notify(events.toolbarRefresh, {});\n\n        _this.parent.notify('close-edit', {});\n      }\n    });\n  };\n\n  NormalEdit.prototype.addRecord = function (data, index) {\n    var _this = this;\n\n    var gObj = this.parent;\n    this.addedRowIndex = index = !isNullOrUndefined(index) ? index : 0;\n\n    if (data) {\n      gObj.notify(events.modelChanged, {\n        requestType: 'save',\n        type: events.actionBegin,\n        data: data,\n        selectedRow: 0,\n        action: 'add',\n        index: index\n      });\n      return;\n    }\n\n    if (gObj.isEdit) {\n      return;\n    }\n\n    this.previousData = {};\n    this.uid = '';\n    var cols = gObj.columnModel;\n\n    for (var i = 0; i < cols.length; i++) {\n      if (cols[i].field) {\n        DataUtil.setValue(cols[i].field, cols[i].defaultValue, this.previousData);\n      }\n    }\n\n    var args = {\n      cancel: false,\n      foreignKeyData: {},\n      requestType: 'add',\n      data: this.previousData,\n      type: events.actionBegin,\n      index: index,\n      rowData: this.previousData,\n      target: undefined\n    };\n    var rowData = {\n      virtualData: {}\n    };\n    this.parent.notify(events.getVirtualData, rowData);\n\n    if ((this.parent.enableVirtualization || this.parent.infiniteScrollSettings.enableCache) && Object.keys(rowData.virtualData).length) {\n      args.data = args.rowData = rowData.virtualData;\n    }\n\n    if (isBlazor()) {\n      var form = 'form';\n      args[form] = null;\n    }\n\n    gObj.trigger(events.actionBegin, args, function (addArgs) {\n      if (addArgs.cancel) {\n        return;\n      }\n\n      gObj.isEdit = true;\n\n      if (gObj.editSettings.mode !== 'Dialog') {\n        gObj.clearSelection();\n      }\n\n      _this.renderer.addNew(addArgs);\n\n      gObj.editModule.applyFormValidation();\n      addArgs.type = events.actionComplete;\n      addArgs.row = gObj.element.querySelector('.e-addedrow');\n      gObj.trigger(events.actionComplete, addArgs);\n\n      if (isBlazor()) {\n        _this.parent.notify(events.toolbarRefresh, {});\n\n        _this.parent.notify('start-add', {});\n      }\n\n      _this.args = addArgs;\n    });\n  };\n\n  NormalEdit.prototype.deleteRecord = function (fieldname, data) {\n    this.editRowIndex = this.parent.selectedRowIndex;\n\n    if (data) {\n      data = data instanceof Array ? data : [data];\n      var gObj = this.parent;\n      var index = 0;\n      var dataLen = Object.keys(data).length;\n      fieldname = fieldname || this.parent.getPrimaryKeyFieldNames()[0];\n\n      var _loop_1 = function (i) {\n        var _a;\n\n        var tmpRecord;\n        var contained = gObj.currentViewData.some(function (record) {\n          tmpRecord = record;\n          return data[i] === getObject(fieldname, record) || data[i] === record;\n        });\n        data[i] = contained ? tmpRecord : (_a = {}, _a[fieldname] = data[i], _a);\n      };\n\n      for (var i = 0; i < dataLen; i++) {\n        _loop_1(i);\n      }\n    }\n\n    var args = {\n      requestType: 'delete',\n      type: events.actionBegin,\n      foreignKeyData: {},\n      data: data ? data : this.parent.getSelectedRecords(),\n      tr: this.parent.getSelectedRows(),\n      cancel: false\n    };\n\n    if (!isNullOrUndefined(this.parent.commandDelIndex)) {\n      args.data[0] = this.parent.getRowObjectFromUID(this.parent.getRowByIndex(this.parent.commandDelIndex).getAttribute('data-uid')).data;\n    }\n\n    if (this.parent.enableVirtualization && args.data.length > 1) {\n      var uid = this.parent.getSelectedRows()[0].getAttribute('data-uid');\n      args.data = [this.parent.getRowObjectFromUID(uid).data];\n    }\n\n    var dataInString = 'data';\n\n    if (isBlazor() && !this.parent.isJsComponent) {\n      args[dataInString] = args[dataInString][0];\n    }\n\n    this.parent.notify(events.modelChanged, args);\n  };\n\n  NormalEdit.prototype.stopEditStatus = function () {\n    var gObj = this.parent;\n    var elem = gObj.element.querySelector('.e-addedrow');\n    var mElem;\n    var editMElem;\n\n    if (gObj.getFrozenColumns()) {\n      mElem = gObj.element.querySelectorAll('.e-addedrow')[1];\n      editMElem = gObj.element.querySelectorAll('.e-editedrow')[1];\n\n      if (mElem) {\n        remove(mElem);\n      }\n\n      if (editMElem) {\n        editMElem.classList.remove('e-editedrow');\n      }\n    }\n\n    if (elem) {\n      remove(elem);\n    }\n\n    elem = gObj.element.querySelector('.e-editedrow');\n\n    if (elem) {\n      elem.classList.remove('e-editedrow');\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  NormalEdit.prototype.addEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.on(events.crudAction, this.editHandler, this);\n    this.parent.on(events.doubleTap, this.dblClickHandler, this);\n    this.parent.on(events.click, this.clickHandler, this);\n    this.parent.on(events.recordAdded, this.requestSuccess, this);\n    this.parent.on(events.dblclick, this.dblClickHandler, this);\n    this.parent.on(events.deleteComplete, this.editComplete, this);\n    this.parent.on(events.saveComplete, this.editComplete, this);\n    this.parent.on('closeinline', this.closeForm, this);\n  };\n  /**\n   * @hidden\n   */\n\n\n  NormalEdit.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(events.crudAction, this.editHandler);\n    this.parent.off(events.doubleTap, this.dblClickHandler);\n    this.parent.off(events.click, this.clickHandler);\n    this.parent.off(events.recordAdded, this.requestSuccess);\n    this.parent.off(events.dblclick, this.dblClickHandler);\n    this.parent.off(events.deleteComplete, this.editComplete);\n    this.parent.off(events.saveComplete, this.editComplete);\n    this.parent.off('closeinline', this.closeForm);\n  };\n  /**\n   * @hidden\n   */\n\n\n  NormalEdit.prototype.destroy = function () {\n    this.removeEventListener();\n    this.renderer.destroy();\n  };\n\n  return NormalEdit;\n}();\n\nexport { NormalEdit };","map":null,"metadata":{},"sourceType":"module"}