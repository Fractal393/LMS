{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.data_source_adapter.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _callbacks = require(\"../../core/utils/callbacks\");\n\nvar _callbacks2 = _interopRequireDefault(_callbacks);\n\nvar _uiData_grid = require(\"../data_grid/ui.data_grid.core\");\n\nvar _uiData_grid2 = _interopRequireDefault(_uiData_grid);\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _type2 = _interopRequireDefault(_type);\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _array_store = require(\"../../data/array_store\");\n\nvar _array_store2 = _interopRequireDefault(_array_store);\n\nvar _array_utils = require(\"../../data/array_utils\");\n\nvar _array_utils2 = _interopRequireDefault(_array_utils);\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nmodule.exports = _uiData_grid2.default.Controller.inherit(function () {\n  function cloneItems(items, groupCount) {\n    if (items) {\n      items = items.slice(0);\n\n      if (groupCount) {\n        for (var i = 0; i < items.length; i++) {\n          items[i] = (0, _extend.extend)({\n            key: items[i].key\n          }, items[i]);\n          items[i].items = cloneItems(items[i].items, groupCount - 1);\n        }\n      }\n    }\n\n    return items;\n  }\n\n  function calculateOperationTypes(loadOptions, lastLoadOptions) {\n    var operationTypes = {};\n\n    if (lastLoadOptions) {\n      operationTypes = {\n        sorting: !_uiData_grid2.default.equalSortParameters(loadOptions.sort, lastLoadOptions.sort),\n        grouping: !_uiData_grid2.default.equalSortParameters(loadOptions.group, lastLoadOptions.group, true),\n        groupExpanding: !_uiData_grid2.default.equalSortParameters(loadOptions.group, lastLoadOptions.group) || lastLoadOptions.groupExpand,\n        filtering: !_uiData_grid2.default.equalFilterParameters(loadOptions.filter, lastLoadOptions.filter),\n        pageIndex: loadOptions.pageIndex !== lastLoadOptions.pageIndex,\n        skip: loadOptions.skip !== lastLoadOptions.skip,\n        take: loadOptions.take !== lastLoadOptions.take\n      };\n      operationTypes.reload = operationTypes.sorting || operationTypes.grouping || operationTypes.filtering;\n      operationTypes.paging = operationTypes.pageIndex || operationTypes.take;\n    }\n\n    return operationTypes;\n  }\n\n  function executeTask(action, timeout) {\n    if (_type2.default.isDefined(timeout)) {\n      (0, _common.executeAsync)(action, timeout);\n    } else {\n      action();\n    }\n  }\n\n  function createEmptyPagesData() {\n    return {\n      pages: {}\n    };\n  }\n\n  function getPageDataFromCache(options) {\n    return options.cachedPagesData.pages[options.pageIndex];\n  }\n\n  function setPageDataToCache(options, data) {\n    var pageIndex = options.pageIndex;\n\n    if (void 0 !== pageIndex) {\n      options.cachedPagesData.pages[pageIndex] = data;\n    }\n  }\n\n  return {\n    init: function (dataSource, remoteOperations) {\n      var that = this;\n      that._dataSource = dataSource;\n      that._remoteOperations = remoteOperations || {};\n      that._isLastPage = !dataSource.isLastPage();\n      that._hasLastPage = false;\n      that._currentTotalCount = 0;\n      that._cachedPagesData = createEmptyPagesData();\n      that._lastOperationTypes = {};\n      that._eventsStrategy = dataSource._eventsStrategy;\n      that._skipCorrection = 0;\n      that.changed = (0, _callbacks2.default)();\n      that.loadingChanged = (0, _callbacks2.default)();\n      that.loadError = (0, _callbacks2.default)();\n      that.customizeStoreLoadOptions = (0, _callbacks2.default)();\n      that.changing = (0, _callbacks2.default)();\n      that._dataChangedHandler = that._handleDataChanged.bind(that);\n      that._dataLoadingHandler = that._handleDataLoading.bind(that);\n      that._dataLoadedHandler = that._handleDataLoaded.bind(that);\n      that._loadingChangedHandler = that._handleLoadingChanged.bind(that);\n      that._loadErrorHandler = that._handleLoadError.bind(that);\n      that._pushHandler = that._handlePush.bind(that);\n      that._changingHandler = that._handleChanging.bind(that);\n      dataSource.on(\"changed\", that._dataChangedHandler);\n      dataSource.on(\"customizeStoreLoadOptions\", that._dataLoadingHandler);\n      dataSource.on(\"customizeLoadResult\", that._dataLoadedHandler);\n      dataSource.on(\"loadingChanged\", that._loadingChangedHandler);\n      dataSource.on(\"loadError\", that._loadErrorHandler);\n      dataSource.on(\"changing\", that._changingHandler);\n      dataSource.store().on(\"push\", that._pushHandler);\n      (0, _iterator.each)(dataSource, function (memberName, member) {\n        if (!that[memberName] && _type2.default.isFunction(member)) {\n          that[memberName] = function () {\n            return this._dataSource[memberName].apply(this._dataSource, arguments);\n          };\n        }\n      });\n    },\n    remoteOperations: function () {\n      return this._remoteOperations;\n    },\n    dispose: function (isSharedDataSource) {\n      var that = this;\n      var dataSource = that._dataSource;\n      var store = dataSource.store();\n      dataSource.off(\"changed\", that._dataChangedHandler);\n      dataSource.off(\"customizeStoreLoadOptions\", that._dataLoadingHandler);\n      dataSource.off(\"customizeLoadResult\", that._dataLoadedHandler);\n      dataSource.off(\"loadingChanged\", that._loadingChangedHandler);\n      dataSource.off(\"loadError\", that._loadErrorHandler);\n      dataSource.off(\"changing\", that._changingHandler);\n      store && store.off(\"push\", that._pushHandler);\n\n      if (!isSharedDataSource) {\n        dataSource.dispose();\n      }\n    },\n    refresh: function (options, isReload, operationTypes) {\n      var that = this;\n      var dataSource = that._dataSource;\n\n      if (isReload || operationTypes.reload) {\n        that._currentTotalCount = 0;\n        that._skipCorrection = 0;\n        that._isLastPage = !dataSource.paginate();\n        that._hasLastPage = that._isLastPage;\n      }\n    },\n    resetCache: function () {\n      this._cachedStoreData = void 0;\n      this._cachedPagingData = void 0;\n    },\n    resetPagesCache: function () {\n      this._cachedPagesData = createEmptyPagesData();\n    },\n    _needClearStoreDataCache: function () {\n      var remoteOperations = this.remoteOperations();\n      var operationTypes = calculateOperationTypes(this._lastLoadOptions || {}, {});\n      var isLocalOperations = Object.keys(remoteOperations).every(function (operationName) {\n        return !operationTypes[operationName] || !remoteOperations[operationName];\n      });\n      return !isLocalOperations;\n    },\n    push: function (changes, fromStore) {\n      var store = this.store();\n\n      if (this._needClearStoreDataCache()) {\n        this._cachedStoreData = void 0;\n      }\n\n      this._cachedPagingData = void 0;\n      this.resetPagesCache(true);\n\n      if (this._cachedStoreData) {\n        _array_utils2.default.applyBatch(store, this._cachedStoreData, changes);\n      }\n\n      if (!fromStore) {\n        this._applyBatch(changes);\n      }\n    },\n    getDataIndexGetter: function () {\n      var _this = this;\n\n      if (!this._dataIndexGetter) {\n        var indexByKey;\n        var storeData;\n        var store = this.store();\n\n        this._dataIndexGetter = function (data) {\n          var isCacheUpdated = storeData && storeData !== _this._cachedStoreData;\n\n          if (!indexByKey || isCacheUpdated) {\n            storeData = _this._cachedStoreData || [];\n            indexByKey = {};\n\n            for (var i = 0; i < storeData.length; i++) {\n              indexByKey[(0, _common.getKeyHash)(store.keyOf(storeData[i]))] = i;\n            }\n          }\n\n          return indexByKey[(0, _common.getKeyHash)(store.keyOf(data))];\n        };\n      }\n\n      return this._dataIndexGetter;\n    },\n    _getKeyInfo: function () {\n      return this.store();\n    },\n    _applyBatch: function (changes) {\n      var _this2 = this;\n\n      var keyInfo = this._getKeyInfo();\n\n      var dataSource = this._dataSource;\n\n      var groupCount = _uiData_grid2.default.normalizeSortingInfo(this.group()).length;\n\n      changes = changes.filter(function (change) {\n        return !dataSource.paginate() || \"insert\" !== change.type || void 0 !== change.index;\n      });\n\n      var getItemCount = function () {\n        return groupCount ? _this2.itemsCount() : _this2._items.length;\n      };\n\n      var oldItemCount = getItemCount();\n\n      _array_utils2.default.applyBatch(keyInfo, this._items, changes, groupCount, true);\n\n      _array_utils2.default.applyBatch(keyInfo, dataSource.items(), changes, groupCount, true);\n\n      if (this._currentTotalCount > 0) {\n        this._skipCorrection += getItemCount() - oldItemCount;\n      }\n\n      changes.splice(0, changes.length);\n    },\n    _handlePush: function (changes) {\n      this.push(changes, true);\n    },\n    _handleChanging: function (e) {\n      this.changing.fire(e);\n\n      this._applyBatch(e.changes);\n    },\n    _needCleanCacheByOperation: function (operationType, remoteOperations) {\n      var operationTypesByOrder = [\"filtering\", \"sorting\", \"paging\"];\n      var operationTypeIndex = operationTypesByOrder.indexOf(operationType);\n      var currentOperationTypes = operationTypeIndex >= 0 ? operationTypesByOrder.slice(operationTypeIndex) : [operationType];\n      return currentOperationTypes.some(function (operationType) {\n        return remoteOperations[operationType];\n      });\n    },\n    _customizeRemoteOperations: function (options, isReload, operationTypes) {\n      var that = this;\n      var cachedStoreData = that._cachedStoreData;\n      var cachedPagingData = that._cachedPagingData;\n      var cachedPagesData = that._cachedPagesData;\n\n      if (options.storeLoadOptions.filter && !options.remoteOperations.filtering || options.storeLoadOptions.sort && !options.remoteOperations.sorting) {\n        options.remoteOperations = {\n          filtering: options.remoteOperations.filtering\n        };\n      }\n\n      if (isReload) {\n        cachedStoreData = void 0;\n        cachedPagingData = void 0;\n        cachedPagesData = createEmptyPagesData();\n      } else {\n        if (operationTypes.reload) {\n          cachedPagingData = void 0;\n          cachedPagesData = createEmptyPagesData();\n        } else {\n          if (operationTypes.take || operationTypes.groupExpanding) {\n            cachedPagesData = createEmptyPagesData();\n          }\n        }\n\n        (0, _iterator.each)(operationTypes, function (operationType, value) {\n          if (value && that._needCleanCacheByOperation(operationType, options.remoteOperations)) {\n            cachedStoreData = void 0;\n            cachedPagingData = void 0;\n          }\n        });\n      }\n\n      if (cachedPagingData) {\n        options.remoteOperations.paging = false;\n      }\n\n      options.cachedStoreData = cachedStoreData;\n      options.cachedPagingData = cachedPagingData;\n      options.cachedPagesData = cachedPagesData;\n\n      if (!options.isCustomLoading) {\n        that._cachedStoreData = cachedStoreData;\n        that._cachedPagingData = cachedPagingData;\n        that._cachedPagesData = cachedPagesData;\n      }\n    },\n    _handleDataLoading: function (options) {\n      var that = this;\n      var dataSource = that._dataSource;\n      var lastLoadOptions = that._lastLoadOptions;\n      that.customizeStoreLoadOptions.fire(options);\n      options.delay = this.option(\"loadingTimeout\");\n      options.originalStoreLoadOptions = options.storeLoadOptions;\n      options.remoteOperations = (0, _extend.extend)({}, this.remoteOperations());\n      var isReload = !that.isLoaded() && !that._isRefreshing;\n\n      if (that.option(\"integrationOptions.renderedOnServer\") && !that.isLoaded()) {\n        options.delay = void 0;\n      }\n\n      var loadOptions = (0, _extend.extend)({\n        pageIndex: that.pageIndex()\n      }, options.storeLoadOptions);\n      var operationTypes = calculateOperationTypes(loadOptions, lastLoadOptions);\n\n      that._customizeRemoteOperations(options, isReload, operationTypes);\n\n      if (!options.isCustomLoading) {\n        var isRefreshing = that._isRefreshing;\n        options.pageIndex = dataSource.pageIndex();\n        options.lastLoadOptions = loadOptions;\n        options.operationTypes = operationTypes;\n        that._loadingOperationTypes = operationTypes;\n        that._isRefreshing = true;\n        (0, _deferred.when)(isRefreshing || that._isRefreshed || that.refresh(options, isReload, operationTypes)).done(function () {\n          if (that._lastOperationId === options.operationId) {\n            that._isRefreshed = true;\n            that.load().always(function () {\n              that._isRefreshed = false;\n            });\n          }\n        }).fail(function () {\n          dataSource.cancel(options.operationId);\n        }).always(function () {\n          that._isRefreshing = false;\n        });\n        dataSource.cancel(that._lastOperationId);\n        that._lastOperationId = options.operationId;\n\n        if (that._isRefreshing) {\n          dataSource.cancel(that._lastOperationId);\n        }\n      }\n\n      this._handleDataLoadingCore(options);\n    },\n    _handleDataLoadingCore: function (options) {\n      var remoteOperations = options.remoteOperations;\n      options.loadOptions = {};\n      var cachedExtra = options.cachedPagesData.extra;\n      var localLoadOptionNames = {\n        filter: !remoteOperations.filtering,\n        sort: !remoteOperations.sorting,\n        group: !remoteOperations.grouping,\n        summary: !remoteOperations.summary,\n        skip: !remoteOperations.paging,\n        take: !remoteOperations.paging,\n        requireTotalCount: cachedExtra && \"totalCount\" in cachedExtra || !remoteOperations.paging\n      };\n      (0, _iterator.each)(options.storeLoadOptions, function (optionName, optionValue) {\n        if (localLoadOptionNames[optionName]) {\n          options.loadOptions[optionName] = optionValue;\n          delete options.storeLoadOptions[optionName];\n        }\n      });\n\n      if (cachedExtra) {\n        options.extra = cachedExtra;\n      }\n\n      options.data = getPageDataFromCache(options) || options.cachedStoreData;\n    },\n    _handleDataLoaded: function (options) {\n      var _this3 = this;\n\n      var loadOptions = options.loadOptions;\n      var localPaging = options.remoteOperations && !options.remoteOperations.paging;\n      var cachedPagesData = options.cachedPagesData;\n      var storeLoadOptions = options.storeLoadOptions;\n      var needCache = false !== this.option(\"cacheEnabled\") && storeLoadOptions;\n      var needPageCache = needCache && !options.isCustomLoading && cachedPagesData && (!localPaging || storeLoadOptions.group) && !this.option(\"legacyRendering\");\n      var needPagingCache = needCache && localPaging;\n      var needStoreCache = needPagingCache && !options.isCustomLoading;\n\n      if (!loadOptions) {\n        this._dataSource.cancel(options.operationId);\n\n        return;\n      }\n\n      if (options.lastLoadOptions) {\n        this._lastLoadOptions = options.lastLoadOptions;\n        Object.keys(options.operationTypes).forEach(function (operationType) {\n          _this3._lastOperationTypes[operationType] = _this3._lastOperationTypes[operationType] || options.operationTypes[operationType];\n        });\n      }\n\n      if (localPaging) {\n        options.skip = loadOptions.skip;\n        options.take = loadOptions.take;\n        delete loadOptions.skip;\n        delete loadOptions.take;\n      }\n\n      if (loadOptions.group) {\n        loadOptions.group = options.group || loadOptions.group;\n      }\n\n      var groupCount = _uiData_grid2.default.normalizeSortingInfo(storeLoadOptions.group || loadOptions.group).length;\n\n      if (!needPageCache || !getPageDataFromCache(options)) {\n        if (needPagingCache && options.cachedPagingData) {\n          options.data = cloneItems(options.cachedPagingData, groupCount);\n        } else {\n          if (needStoreCache) {\n            if (!this._cachedStoreData) {\n              this._cachedStoreData = cloneItems(options.data, _uiData_grid2.default.normalizeSortingInfo(storeLoadOptions.group).length);\n            } else {\n              if (options.mergeStoreLoadData) {\n                options.data = this._cachedStoreData = this._cachedStoreData.concat(options.data);\n              }\n            }\n          }\n\n          new _array_store2.default(options.data).load(loadOptions).done(function (data) {\n            options.data = data;\n\n            if (needStoreCache) {\n              _this3._cachedPagingData = cloneItems(options.data, groupCount);\n            }\n          }).fail(function (error) {\n            options.data = new _deferred.Deferred().reject(error);\n          });\n        }\n\n        if (loadOptions.requireTotalCount && localPaging) {\n          options.extra = _type2.default.isPlainObject(options.extra) ? options.extra : {};\n          options.extra.totalCount = options.data.length;\n        }\n\n        if (options.extra && options.extra.totalCount >= 0 && (false === storeLoadOptions.requireTotalCount || false === loadOptions.requireTotalCount)) {\n          options.extra.totalCount = -1;\n        }\n\n        this._handleDataLoadedCore(options);\n\n        if (needPageCache) {\n          cachedPagesData.extra = cachedPagesData.extra || (0, _extend.extend)({}, options.extra);\n          (0, _deferred.when)(options.data).done(function (data) {\n            setPageDataToCache(options, cloneItems(data, groupCount));\n          });\n        }\n      }\n\n      options.storeLoadOptions = options.originalStoreLoadOptions;\n    },\n    _handleDataLoadedCore: function (options) {\n      if (options.remoteOperations && !options.remoteOperations.paging && Array.isArray(options.data)) {\n        if (void 0 !== options.skip) {\n          options.data = options.data.slice(options.skip);\n        }\n\n        if (void 0 !== options.take) {\n          options.data = options.data.slice(0, options.take);\n        }\n      }\n    },\n    _handleLoadingChanged: function (isLoading) {\n      this.loadingChanged.fire(isLoading);\n    },\n    _handleLoadError: function (error) {\n      this.loadError.fire(error);\n      this.changed.fire({\n        changeType: \"loadError\",\n        error: error\n      });\n    },\n    _handleDataChanged: function (args) {\n      var that = this;\n      var currentTotalCount;\n      var dataSource = that._dataSource;\n      var isLoading = false;\n      var itemsCount = that.itemsCount();\n      that._isLastPage = !itemsCount || !that.pageSize() || itemsCount < that.pageSize();\n\n      if (that._isLastPage) {\n        that._hasLastPage = true;\n      }\n\n      if (dataSource.totalCount() >= 0) {\n        if (dataSource.pageIndex() >= that.pageCount()) {\n          dataSource.pageIndex(that.pageCount() - 1);\n          that.pageIndex(dataSource.pageIndex());\n          that.resetPagesCache();\n          dataSource.load();\n          isLoading = true;\n        }\n      } else {\n        currentTotalCount = dataSource.pageIndex() * that.pageSize() + itemsCount;\n        that._currentTotalCount = Math.max(that._currentTotalCount, currentTotalCount);\n\n        if (0 === itemsCount && dataSource.pageIndex() >= that.pageCount()) {\n          dataSource.pageIndex(that.pageCount() - 1);\n\n          if (\"infinite\" !== that.option(\"scrolling.mode\")) {\n            dataSource.load();\n            isLoading = true;\n          }\n        }\n      }\n\n      if (!isLoading) {\n        that._operationTypes = that._lastOperationTypes;\n        that._lastOperationTypes = {};\n        that.component._optionCache = {};\n        that.changed.fire(args);\n        that.component._optionCache = void 0;\n      }\n    },\n    _scheduleCustomLoadCallbacks: function (deferred) {\n      var that = this;\n      that._isCustomLoading = true;\n      deferred.always(function () {\n        that._isCustomLoading = false;\n      });\n    },\n    loadingOperationTypes: function () {\n      return this._loadingOperationTypes;\n    },\n    operationTypes: function () {\n      return this._operationTypes;\n    },\n    lastLoadOptions: function () {\n      return this._lastLoadOptions || {};\n    },\n    isLastPage: function () {\n      return this._isLastPage;\n    },\n    totalCount: function () {\n      return parseInt(this._currentTotalCount + this._skipCorrection || this._dataSource.totalCount());\n    },\n    itemsCount: function () {\n      return this._dataSource.items().length;\n    },\n    totalItemsCount: function () {\n      return this.totalCount();\n    },\n    pageSize: function () {\n      var dataSource = this._dataSource;\n\n      if (!arguments.length && !dataSource.paginate()) {\n        return 0;\n      }\n\n      return dataSource.pageSize.apply(dataSource, arguments);\n    },\n    pageCount: function () {\n      var that = this;\n      var count = that.totalItemsCount();\n      var pageSize = that.pageSize();\n\n      if (pageSize && count > 0) {\n        return Math.max(1, Math.ceil(count / pageSize));\n      }\n\n      return 1;\n    },\n    hasKnownLastPage: function () {\n      return this._hasLastPage || this._dataSource.totalCount() >= 0;\n    },\n    loadFromStore: function (loadOptions, store) {\n      var dataSource = this._dataSource;\n      var d = new _deferred.Deferred();\n\n      if (!dataSource) {\n        return;\n      }\n\n      store = store || dataSource.store();\n      store.load(loadOptions).done(function (data, extra) {\n        if (data && !Array.isArray(data) && Array.isArray(data.data)) {\n          extra = data;\n          data = data.data;\n        }\n\n        d.resolve(data, extra);\n      }).fail(d.reject);\n      return d;\n    },\n    isCustomLoading: function () {\n      return !!this._isCustomLoading;\n    },\n    load: function (options) {\n      var that = this;\n      var dataSource = that._dataSource;\n      var d = new _deferred.Deferred();\n\n      if (options) {\n        var store = dataSource.store();\n        var dataSourceLoadOptions = dataSource.loadOptions();\n        var loadResult = {\n          storeLoadOptions: options,\n          isCustomLoading: true\n        };\n        (0, _iterator.each)(store._customLoadOptions() || [], function (_, optionName) {\n          if (!(optionName in loadResult.storeLoadOptions)) {\n            loadResult.storeLoadOptions[optionName] = dataSourceLoadOptions[optionName];\n          }\n        });\n\n        that._scheduleCustomLoadCallbacks(d);\n\n        dataSource._scheduleLoadCallbacks(d);\n\n        that._handleDataLoading(loadResult);\n\n        executeTask(function () {\n          if (!dataSource.store()) {\n            return d.reject(\"canceled\");\n          }\n\n          (0, _deferred.when)(loadResult.data || that.loadFromStore(loadResult.storeLoadOptions)).done(function (data, extra) {\n            loadResult.data = data;\n            loadResult.extra = extra || {};\n\n            that._handleDataLoaded(loadResult);\n\n            if (options.requireTotalCount && void 0 === loadResult.extra.totalCount) {\n              loadResult.extra.totalCount = store.totalCount(loadResult.storeLoadOptions);\n            }\n\n            (0, _deferred.when)(loadResult.data, loadResult.extra.totalCount).done(function (data, totalCount) {\n              loadResult.extra.totalCount = totalCount;\n              d.resolve(data, loadResult.extra);\n            }).fail(d.reject);\n          }).fail(d.reject);\n        }, that.option(\"loadingTimeout\"));\n        return d.fail(function () {\n          that._eventsStrategy.fireEvent(\"loadError\", arguments);\n        }).promise();\n      } else {\n        return dataSource.load();\n      }\n    },\n    reload: function (full) {\n      return full ? this._dataSource.reload() : this._dataSource.load();\n    },\n    getCachedStoreData: function () {\n      return this._cachedStoreData;\n    }\n  };\n}());","map":null,"metadata":{},"sourceType":"script"}