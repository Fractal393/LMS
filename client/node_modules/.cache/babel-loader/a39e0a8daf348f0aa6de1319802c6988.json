{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useActionGroups = exports.useFolderChainComponent = void 0;\n\nvar classnames_1 = __importDefault(require(\"classnames\"));\n\nvar react_1 = __importStar(require(\"react\"));\n\nvar recoil_1 = require(\"recoil\");\n\nvar file_actions_recoil_1 = require(\"../../recoil/file-actions.recoil\");\n\nvar files_recoil_1 = require(\"../../recoil/files.recoil\");\n\nvar special_actions_recoil_1 = require(\"../../recoil/special-actions.recoil\");\n\nvar icons_types_1 = require(\"../../types/icons.types\");\n\nvar special_actions_types_1 = require(\"../../types/special-actions.types\");\n\nvar file_actions_definitions_1 = require(\"../../util/file-actions-definitions\");\n\nvar file_helper_1 = require(\"../../util/file-helper\");\n\nvar ChonkyIcon_1 = require(\"./ChonkyIcon\");\n/**\n * Generates folder chain HTML components for the `FileToolbar` component.\n */\n\n\nexports.useFolderChainComponent = function () {\n  var folderChain = recoil_1.useRecoilValue(files_recoil_1.folderChainState);\n  var dispatchSpecialAction = recoil_1.useRecoilValue(special_actions_recoil_1.dispatchSpecialActionState);\n  var folderChainComponent = react_1.useMemo(function () {\n    if (!folderChain) return folderChain;\n    var comps = new Array(Math.max(0, folderChain.length * 2 - 1));\n\n    var _loop_1 = function (i) {\n      var file = folderChain[i];\n      var isLast = i === folderChain.length - 1;\n      var j = i * 2;\n      var compProps = {\n        key: \"folder-chain-entry-\" + j,\n        className: classnames_1.default({\n          'chonky-folder-chain-entry': true,\n          'chonky-loading': !file\n        })\n      };\n\n      if (file_helper_1.FileHelper.isOpenable(file) && !isLast) {\n        compProps.onClick = function () {\n          dispatchSpecialAction({\n            actionId: special_actions_types_1.SpecialAction.OpenFolderChainFolder,\n            file: file\n          });\n        };\n      }\n\n      var TagToUse = compProps.onClick ? 'button' : 'div';\n      if (TagToUse === 'button') compProps.type = 'button';\n      comps[j] = react_1.default.createElement(TagToUse, __assign({}, compProps), j === 0 && react_1.default.createElement(\"span\", {\n        className: \"chonky-text-subtle-dark\"\n      }, react_1.default.createElement(ChonkyIcon_1.ChonkyIconFA, {\n        icon: icons_types_1.ChonkyIconName.folder\n      }), \"\\u00A0\\u00A0\"), react_1.default.createElement(\"span\", {\n        className: \"chonky-folder-chain-entry-name\"\n      }, file ? file.name : 'Loading...'));\n\n      if (!isLast) {\n        comps[j + 1] = react_1.default.createElement(\"div\", {\n          key: \"folder-chain-separator-\" + j,\n          className: \"chonky-folder-chain-separator\"\n        }, react_1.default.createElement(ChonkyIcon_1.ChonkyIconFA, {\n          icon: icons_types_1.ChonkyIconName.folderChainSeparator,\n          size: \"xs\"\n        }));\n      }\n    };\n\n    for (var i = 0; i < folderChain.length; ++i) {\n      _loop_1(i);\n    }\n\n    return react_1.default.createElement(\"div\", {\n      className: \"chonky-folder-chain\"\n    }, comps);\n  }, [folderChain, dispatchSpecialAction]);\n  return folderChainComponent;\n};\n\nexports.useActionGroups = function () {\n  var fileActions = recoil_1.useRecoilValue(file_actions_recoil_1.fileActionsState);\n  return react_1.useMemo(function () {\n    // Create an array for normal toolbar buttons\n    var buttonGroups = []; // Create a map used for merging buttons into groups\n\n    var buttonGroupMap = {}; // Create separate variables for buttons that get special treatment:\n\n    var openParentFolderButtonGroup = null;\n    var searchButtonGroup = null;\n\n    for (var _i = 0, fileActions_1 = fileActions; _i < fileActions_1.length; _i++) {\n      var action = fileActions_1[_i];\n      if (!action.toolbarButton) continue;\n      var button = action.toolbarButton;\n      var group = void 0;\n\n      if (button.group) {\n        if (buttonGroupMap[button.group]) {\n          // If group exists, append action to it.\n          group = buttonGroupMap[button.group];\n          group.dropdown = group.dropdown || button.dropdown;\n          group.fileActionIds.push(action.id);\n        } else {\n          // Otherwise, create a new group.\n          group = {\n            name: button.group,\n            dropdown: button.dropdown,\n            fileActionIds: [action.id]\n          };\n          buttonGroups.push(group);\n          buttonGroupMap[group.name] = group;\n        }\n      } else {\n        // If button has no group specified, we put it in a standalone group\n        group = {\n          name: button.group,\n          dropdown: button.dropdown,\n          fileActionIds: [action.id]\n        }; // Only add it to the normal groups array if it's not a special button\n\n        if (action.id === file_actions_definitions_1.ChonkyActions.OpenParentFolder.id) {\n          openParentFolderButtonGroup = group;\n        } else if (action.id === file_actions_definitions_1.ChonkyActions.ToggleSearch.id) {\n          searchButtonGroup = group;\n        } else {\n          buttonGroups.push(group);\n        }\n      }\n    }\n\n    return {\n      buttonGroups: buttonGroups,\n      openParentFolderButtonGroup: openParentFolderButtonGroup,\n      searchButtonGroup: searchButtonGroup\n    };\n  }, [fileActions]);\n};","map":null,"metadata":{},"sourceType":"script"}