{"ast":null,"code":"/**\r\n * DevExtreme (core/component_registrator.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"./renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _component_registrator_callbacks = require(\"./component_registrator_callbacks\");\n\nvar _component_registrator_callbacks2 = _interopRequireDefault(_component_registrator_callbacks);\n\nvar _errors = require(\"./errors\");\n\nvar _errors2 = _interopRequireDefault(_errors);\n\nvar _public_component = require(\"./utils/public_component\");\n\nvar _public_component2 = _interopRequireDefault(_public_component);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar registerComponent = function (name, namespace, componentClass) {\n  if (!componentClass) {\n    componentClass = namespace;\n  } else {\n    namespace[name] = componentClass;\n  }\n\n  _public_component2.default.name(componentClass, name);\n\n  _component_registrator_callbacks2.default.fire(name, componentClass);\n};\n\nvar registerRendererComponent = function (name, componentClass) {\n  _renderer2.default.fn[name] = function (options) {\n    var isMemberInvoke = \"string\" === typeof options;\n    var result;\n\n    if (isMemberInvoke) {\n      var memberName = options;\n      var memberArgs = [].slice.call(arguments).slice(1);\n      this.each(function () {\n        var instance = componentClass.getInstance(this);\n\n        if (!instance) {\n          throw _errors2.default.Error(\"E0009\", name);\n        }\n\n        var member = instance[memberName];\n        var memberValue = member.apply(instance, memberArgs);\n\n        if (void 0 === result) {\n          result = memberValue;\n        }\n      });\n    } else {\n      this.each(function () {\n        var instance = componentClass.getInstance(this);\n\n        if (instance) {\n          instance.option(options);\n        } else {\n          new componentClass(this, options);\n        }\n      });\n      result = this;\n    }\n\n    return result;\n  };\n};\n\n_component_registrator_callbacks2.default.add(registerRendererComponent);\n\nmodule.exports = registerComponent;\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}