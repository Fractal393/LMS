{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.editor_factory.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _dom_adapter = require(\"../../core/dom_adapter\");\n\nvar _dom_adapter2 = _interopRequireDefault(_dom_adapter);\n\nvar _events_engine = require(\"../../events/core/events_engine\");\n\nvar _events_engine2 = _interopRequireDefault(_events_engine);\n\nvar _uiGrid_core = require(\"./ui.grid_core.modules\");\n\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\n\nvar _click = require(\"../../events/click\");\n\nvar _click2 = _interopRequireDefault(_click);\n\nvar _pointer = require(\"../../events/pointer\");\n\nvar _pointer2 = _interopRequireDefault(_pointer);\n\nvar _position = require(\"../../animation/position\");\n\nvar _position2 = _interopRequireDefault(_position);\n\nvar _utils = require(\"../../events/utils\");\n\nvar _browser = require(\"../../core/utils/browser\");\n\nvar _browser2 = _interopRequireDefault(_browser);\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _position3 = require(\"../../core/utils/position\");\n\nvar _ui = require(\"../shared/ui.editor_factory_mixin\");\n\nvar _ui2 = _interopRequireDefault(_ui);\n\nvar _uiGrid_core3 = require(\"./ui.grid_core.utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar EDITOR_INLINE_BLOCK = \"dx-editor-inline-block\";\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nvar FOCUS_OVERLAY_CLASS = \"focus-overlay\";\nvar CONTENT_CLASS = \"content\";\nvar FOCUSED_ELEMENT_CLASS = \"dx-focused\";\nvar ROW_CLASS = \"dx-row\";\nvar MODULE_NAMESPACE = \"dxDataGridEditorFactory\";\nvar UPDATE_FOCUS_EVENTS = (0, _utils.addNamespace)([_pointer2.default.down, \"focusin\", _click2.default.name].join(\" \"), MODULE_NAMESPACE);\nvar POINTER_EVENTS_TARGET_CLASS = \"dx-pointer-events-target\";\nvar POINTER_EVENTS_NONE_CLASS = \"dx-pointer-events-none\";\nvar DX_HIDDEN = \"dx-hidden\";\n\nvar EditorFactory = _uiGrid_core2.default.ViewController.inherit({\n  _getFocusedElement: function ($dataGridElement) {\n    var rowSelector = this.option(\"focusedRowEnabled\") ? \"tr[tabindex]:focus\" : \"tr[tabindex]:not(.dx-data-row):focus\";\n    var focusedElementSelector = \"td[tabindex]:focus, \".concat(rowSelector, \", input:focus, textarea:focus, .dx-lookup-field:focus, .dx-checkbox:focus, .dx-switch:focus\");\n    return $dataGridElement.find(focusedElementSelector);\n  },\n  _getFocusCellSelector: function () {\n    return \".dx-row > td\";\n  },\n  _updateFocusCore: function () {\n    var $focus = this._$focusedElement;\n    var $dataGridElement = this.component && this.component.$element();\n    var $focusCell;\n    var hideBorders;\n\n    if ($dataGridElement) {\n      $focus = this._getFocusedElement($dataGridElement);\n\n      if ($focus.length) {\n        if (!$focus.hasClass(CELL_FOCUS_DISABLED_CLASS) && !$focus.hasClass(ROW_CLASS)) {\n          $focusCell = $focus.closest(this._getFocusCellSelector() + \", .\" + CELL_FOCUS_DISABLED_CLASS);\n          hideBorders = $focusCell.get(0) !== $focus.get(0) && $focusCell.hasClass(EDITOR_INLINE_BLOCK);\n          $focus = $focusCell;\n        }\n\n        if ($focus.length && !$focus.hasClass(CELL_FOCUS_DISABLED_CLASS)) {\n          this.focus($focus, hideBorders);\n          return;\n        }\n      }\n    }\n\n    this.loseFocus();\n  },\n  _updateFocus: function (e) {\n    var that = this;\n    var isFocusOverlay = e && e.event && (0, _renderer2.default)(e.event.target).hasClass(that.addWidgetPrefix(FOCUS_OVERLAY_CLASS));\n    that._isFocusOverlay = that._isFocusOverlay || isFocusOverlay;\n    clearTimeout(that._updateFocusTimeoutID);\n    that._updateFocusTimeoutID = setTimeout(function () {\n      delete that._updateFocusTimeoutID;\n\n      if (!that._isFocusOverlay) {\n        that._updateFocusCore();\n      }\n\n      that._isFocusOverlay = false;\n    });\n  },\n  _updateFocusOverlaySize: function ($element, position) {\n    $element.hide();\n\n    var location = _position2.default.calculate($element, (0, _extend.extend)({\n      collision: \"fit\"\n    }, position));\n\n    if (location.h.oversize > 0) {\n      $element.outerWidth($element.outerWidth() - location.h.oversize);\n    }\n\n    if (location.v.oversize > 0) {\n      $element.outerHeight($element.outerHeight() - location.v.oversize);\n    }\n\n    $element.show();\n  },\n  callbackNames: function () {\n    return [\"focused\"];\n  },\n  focus: function ($element, hideBorder) {\n    var that = this;\n\n    if (void 0 === $element) {\n      return that._$focusedElement;\n    } else {\n      if ($element) {\n        if (!$element.is(that._$focusedElement)) {\n          that._$focusedElement && that._$focusedElement.removeClass(FOCUSED_ELEMENT_CLASS);\n        }\n\n        that._$focusedElement = $element;\n        clearTimeout(that._focusTimeoutID);\n        that._focusTimeoutID = setTimeout(function () {\n          delete that._focusTimeoutID;\n          that.renderFocusOverlay($element, hideBorder);\n          $element.addClass(FOCUSED_ELEMENT_CLASS);\n          that.focused.fire($element);\n        });\n      }\n    }\n  },\n  refocus: function () {\n    var $focus = this.focus();\n    this.focus($focus);\n  },\n  renderFocusOverlay: function ($element, hideBorder) {\n    var that = this;\n\n    if (!(0, _uiGrid_core3.isElementInCurrentGrid)(this, $element)) {\n      return;\n    }\n\n    if (!that._$focusOverlay) {\n      that._$focusOverlay = (0, _renderer2.default)(\"<div>\").addClass(that.addWidgetPrefix(FOCUS_OVERLAY_CLASS) + \" \" + POINTER_EVENTS_TARGET_CLASS);\n    }\n\n    if (hideBorder) {\n      that._$focusOverlay.addClass(DX_HIDDEN);\n    } else {\n      if ($element.length) {\n        var align = _browser2.default.msie ? \"left bottom\" : _browser2.default.mozilla ? \"right bottom\" : \"left top\";\n        var $content = $element.closest(\".\" + that.addWidgetPrefix(CONTENT_CLASS));\n        var elemCoord = (0, _position3.getBoundingRect)($element.get(0));\n\n        that._$focusOverlay.removeClass(DX_HIDDEN).appendTo($content).outerWidth(elemCoord.right - elemCoord.left + 1).outerHeight(elemCoord.bottom - elemCoord.top + 1);\n\n        var focusOverlayPosition = {\n          precise: true,\n          my: align,\n          at: align,\n          of: $element,\n          boundary: $content.length && $content\n        };\n\n        that._updateFocusOverlaySize(that._$focusOverlay, focusOverlayPosition);\n\n        _position2.default.setup(that._$focusOverlay, focusOverlayPosition);\n\n        that._$focusOverlay.css(\"visibility\", \"visible\");\n      }\n    }\n  },\n  resize: function () {\n    var $focusedElement = this._$focusedElement;\n\n    if ($focusedElement) {\n      this.focus($focusedElement);\n    }\n  },\n  loseFocus: function () {\n    this._$focusedElement && this._$focusedElement.removeClass(FOCUSED_ELEMENT_CLASS);\n    this._$focusedElement = null;\n    this._$focusOverlay && this._$focusOverlay.addClass(DX_HIDDEN);\n  },\n  init: function () {\n    this.createAction(\"onEditorPreparing\", {\n      excludeValidators: [\"disabled\", \"readOnly\"],\n      category: \"rendering\"\n    });\n    this.createAction(\"onEditorPrepared\", {\n      excludeValidators: [\"disabled\", \"readOnly\"],\n      category: \"rendering\"\n    });\n    this._updateFocusHandler = this._updateFocusHandler || this.createAction(this._updateFocus.bind(this));\n\n    _events_engine2.default.on(_dom_adapter2.default.getDocument(), UPDATE_FOCUS_EVENTS, this._updateFocusHandler);\n\n    this._attachContainerEventHandlers();\n  },\n  _attachContainerEventHandlers: function () {\n    var that = this;\n    var $container = that.component && that.component.$element();\n\n    if ($container) {\n      _events_engine2.default.on($container, (0, _utils.addNamespace)(\"keydown\", MODULE_NAMESPACE), function (e) {\n        if (\"tab\" === (0, _utils.normalizeKeyName)(e)) {\n          that._updateFocusHandler(e);\n        }\n      });\n    }\n  },\n  _focusOverlayEventProxy: function (e) {\n    var $target = (0, _renderer2.default)(e.target);\n    var $currentTarget = (0, _renderer2.default)(e.currentTarget);\n    var needProxy = $target.hasClass(POINTER_EVENTS_TARGET_CLASS) || $target.hasClass(POINTER_EVENTS_NONE_CLASS);\n\n    if (!needProxy || $currentTarget.hasClass(DX_HIDDEN)) {\n      return;\n    }\n\n    $currentTarget.addClass(DX_HIDDEN);\n    var element = $target.get(0).ownerDocument.elementFromPoint(e.clientX, e.clientY);\n    (0, _utils.fireEvent)({\n      originalEvent: e,\n      target: element\n    });\n    e.stopPropagation();\n    $currentTarget.removeClass(DX_HIDDEN);\n\n    if (e.type === _click2.default.name && \"INPUT\" === element.tagName) {\n      _events_engine2.default.trigger((0, _renderer2.default)(element), \"focus\");\n    }\n  },\n  dispose: function () {\n    clearTimeout(this._focusTimeoutID);\n    clearTimeout(this._updateFocusTimeoutID);\n\n    _events_engine2.default.off(_dom_adapter2.default.getDocument(), UPDATE_FOCUS_EVENTS, this._updateFocusHandler);\n  }\n}).include(_ui2.default);\n\nmodule.exports = {\n  defaultOptions: function () {\n    return {};\n  },\n  controllers: {\n    editorFactory: EditorFactory\n  }\n};","map":null,"metadata":{},"sourceType":"script"}