{"ast":null,"code":"/**\r\n * DevExtreme (core/devices.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _window = require(\"./utils/window\");\n\nvar _window2 = _interopRequireDefault(_window);\n\nvar _extend = require(\"./utils/extend\");\n\nvar _type = require(\"./utils/type\");\n\nvar _iterator = require(\"./utils/iterator\");\n\nvar _errors = require(\"./errors\");\n\nvar _errors2 = _interopRequireDefault(_errors);\n\nvar _callbacks = require(\"./utils/callbacks\");\n\nvar _callbacks2 = _interopRequireDefault(_callbacks);\n\nvar _resize_callbacks = require(\"./utils/resize_callbacks\");\n\nvar _resize_callbacks2 = _interopRequireDefault(_resize_callbacks);\n\nvar _events_strategy = require(\"./events_strategy\");\n\nvar _storage = require(\"./utils/storage\");\n\nvar _view_port = require(\"./utils/view_port\");\n\nvar _view_port2 = _interopRequireDefault(_view_port);\n\nvar _config = require(\"./config\");\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nvar navigator = _window2.default.getNavigator();\n\nvar window = _window2.default.getWindow();\n\nvar KNOWN_UA_TABLE = {\n  iPhone: \"iPhone\",\n  iPhone5: \"iPhone\",\n  iPhone6: \"iPhone\",\n  iPhone6plus: \"iPhone\",\n  iPad: \"iPad\",\n  iPadMini: \"iPad Mini\",\n  androidPhone: \"Android Mobile\",\n  androidTablet: \"Android\",\n  msSurface: \"Windows ARM Tablet PC\",\n  desktop: \"desktop\"\n};\nvar DEFAULT_DEVICE = {\n  deviceType: \"desktop\",\n  platform: \"generic\",\n  version: [],\n  phone: false,\n  tablet: false,\n  android: false,\n  ios: false,\n  generic: true,\n  grade: \"A\",\n  mac: false\n};\nvar uaParsers = {\n  generic: function (userAgent) {\n    var isPhone = /windows phone/i.test(userAgent) || userAgent.match(/WPDesktop/);\n    var isTablet = !isPhone && /Windows(.*)arm(.*)Tablet PC/i.test(userAgent);\n    var isDesktop = !isPhone && !isTablet && /msapphost/i.test(userAgent);\n    var isMac = /((intel|ppc) mac os x)/.test(userAgent.toLowerCase());\n\n    if (!(isPhone || isTablet || isDesktop || isMac)) {\n      return;\n    }\n\n    return {\n      deviceType: isPhone ? \"phone\" : isTablet ? \"tablet\" : \"desktop\",\n      platform: \"generic\",\n      version: [],\n      grade: \"A\",\n      mac: isMac\n    };\n  },\n  ios: function (userAgent) {\n    if (!/ip(hone|od|ad)/i.test(userAgent)) {\n      return;\n    }\n\n    var isPhone = /ip(hone|od)/i.test(userAgent);\n    var matches = userAgent.match(/os (\\d+)_(\\d+)_?(\\d+)?/i);\n    var version = matches ? [parseInt(matches[1], 10), parseInt(matches[2], 10), parseInt(matches[3] || 0, 10)] : [];\n    var isIPhone4 = 480 === window.screen.height;\n    var grade = isIPhone4 ? \"B\" : \"A\";\n    return {\n      deviceType: isPhone ? \"phone\" : \"tablet\",\n      platform: \"ios\",\n      version: version,\n      grade: grade\n    };\n  },\n  android: function (userAgent) {\n    if (!/android|htc_|silk/i.test(userAgent)) {\n      return;\n    }\n\n    var isPhone = /mobile/i.test(userAgent);\n    var matches = userAgent.match(/android (\\d+)\\.?(\\d+)?\\.?(\\d+)?/i);\n    var version = matches ? [parseInt(matches[1], 10), parseInt(matches[2] || 0, 10), parseInt(matches[3] || 0, 10)] : [];\n    var worseThan4_4 = version.length > 1 && (version[0] < 4 || 4 === version[0] && version[1] < 4);\n    var grade = worseThan4_4 ? \"B\" : \"A\";\n    return {\n      deviceType: isPhone ? \"phone\" : \"tablet\",\n      platform: \"android\",\n      version: version,\n      grade: grade\n    };\n  }\n};\n\nvar Devices = function () {\n  function Devices(options) {\n    _classCallCheck(this, Devices);\n\n    this._window = (null === options || void 0 === options ? void 0 : options.window) || window;\n    this._realDevice = this._getDevice();\n    this._currentDevice = void 0;\n    this._currentOrientation = void 0;\n    this._eventsStrategy = new _events_strategy.EventsStrategy(this);\n    this.changed = (0, _callbacks2.default)();\n\n    if (_window2.default.hasWindow()) {\n      this._recalculateOrientation();\n\n      _resize_callbacks2.default.add(this._recalculateOrientation.bind(this));\n    }\n  }\n\n  _createClass(Devices, [{\n    key: \"current\",\n    value: function (deviceOrName) {\n      if (deviceOrName) {\n        this._currentDevice = this._getDevice(deviceOrName);\n        this._forced = true;\n        this.changed.fire();\n        return;\n      }\n\n      if (!this._currentDevice) {\n        deviceOrName = void 0;\n\n        try {\n          deviceOrName = this._getDeviceOrNameFromWindowScope();\n        } catch (e) {\n          deviceOrName = this._getDeviceNameFromSessionStorage();\n        } finally {\n          if (!deviceOrName) {\n            deviceOrName = this._getDeviceNameFromSessionStorage();\n          }\n\n          if (deviceOrName) {\n            this._forced = true;\n          }\n        }\n\n        this._currentDevice = this._getDevice(deviceOrName);\n      }\n\n      return this._currentDevice;\n    }\n  }, {\n    key: \"real\",\n    value: function (forceDevice) {\n      return (0, _extend.extend)({}, this._realDevice);\n    }\n  }, {\n    key: \"orientation\",\n    value: function () {\n      return this._currentOrientation;\n    }\n  }, {\n    key: \"isForced\",\n    value: function () {\n      return this._forced;\n    }\n  }, {\n    key: \"isRippleEmulator\",\n    value: function () {\n      return !!this._window.tinyHippos;\n    }\n  }, {\n    key: \"_getCssClasses\",\n    value: function (device) {\n      var result = [];\n      var realDevice = this._realDevice;\n      device = device || this.current();\n\n      if (device.deviceType) {\n        result.push(\"dx-device-\".concat(device.deviceType));\n\n        if (\"desktop\" !== device.deviceType) {\n          result.push(\"dx-device-mobile\");\n        }\n      }\n\n      result.push(\"dx-device-\".concat(realDevice.platform));\n\n      if (realDevice.version && realDevice.version.length) {\n        result.push(\"dx-device-\".concat(realDevice.platform, \"-\").concat(realDevice.version[0]));\n      }\n\n      if (this.isSimulator()) {\n        result.push(\"dx-simulator\");\n      }\n\n      if ((0, _config2.default)().rtlEnabled) {\n        result.push(\"dx-rtl\");\n      }\n\n      return result;\n    }\n  }, {\n    key: \"attachCssClasses\",\n    value: function (element, device) {\n      this._deviceClasses = this._getCssClasses(device).join(\" \");\n      (0, _renderer2.default)(element).addClass(this._deviceClasses);\n    }\n  }, {\n    key: \"detachCssClasses\",\n    value: function (element) {\n      (0, _renderer2.default)(element).removeClass(this._deviceClasses);\n    }\n  }, {\n    key: \"isSimulator\",\n    value: function () {\n      try {\n        return this._isSimulator || _window2.default.hasWindow() && this._window.top !== this._window.self && this._window.top[\"dx-force-device\"] || this.isRippleEmulator();\n      } catch (e) {\n        return false;\n      }\n    }\n  }, {\n    key: \"forceSimulator\",\n    value: function () {\n      this._isSimulator = true;\n    }\n  }, {\n    key: \"_getDevice\",\n    value: function (deviceName) {\n      if (\"genericPhone\" === deviceName) {\n        deviceName = {\n          deviceType: \"phone\",\n          platform: \"generic\",\n          generic: true\n        };\n      }\n\n      if ((0, _type.isPlainObject)(deviceName)) {\n        return this._fromConfig(deviceName);\n      } else {\n        var ua;\n\n        if (deviceName) {\n          ua = KNOWN_UA_TABLE[deviceName];\n\n          if (!ua) {\n            throw _errors2.default.Error(\"E0005\");\n          }\n        } else {\n          ua = navigator.userAgent;\n        }\n\n        return this._fromUA(ua);\n      }\n    }\n  }, {\n    key: \"_getDeviceOrNameFromWindowScope\",\n    value: function () {\n      var result;\n\n      if (_window2.default.hasWindow() && (this._window.top[\"dx-force-device-object\"] || this._window.top[\"dx-force-device\"])) {\n        result = this._window.top[\"dx-force-device-object\"] || this._window.top[\"dx-force-device\"];\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_getDeviceNameFromSessionStorage\",\n    value: function () {\n      var sessionStorage = (0, _storage.sessionStorage)();\n\n      if (!sessionStorage) {\n        return;\n      }\n\n      var deviceOrName = sessionStorage.getItem(\"dx-force-device\");\n\n      try {\n        return JSON.parse(deviceOrName);\n      } catch (ex) {\n        return deviceOrName;\n      }\n    }\n  }, {\n    key: \"_fromConfig\",\n    value: function (config) {\n      var result = (0, _extend.extend)({}, DEFAULT_DEVICE, this._currentDevice, config);\n      var shortcuts = {\n        phone: \"phone\" === result.deviceType,\n        tablet: \"tablet\" === result.deviceType,\n        android: \"android\" === result.platform,\n        ios: \"ios\" === result.platform,\n        generic: \"generic\" === result.platform\n      };\n      return (0, _extend.extend)(result, shortcuts);\n    }\n  }, {\n    key: \"_fromUA\",\n    value: function (ua) {\n      var config;\n      (0, _iterator.each)(uaParsers, function (platform, parser) {\n        config = parser(ua);\n        return !config;\n      });\n\n      if (config) {\n        return this._fromConfig(config);\n      }\n\n      return DEFAULT_DEVICE;\n    }\n  }, {\n    key: \"_changeOrientation\",\n    value: function () {\n      var $window = (0, _renderer2.default)(this._window);\n      var orientation = $window.height() > $window.width() ? \"portrait\" : \"landscape\";\n\n      if (this._currentOrientation === orientation) {\n        return;\n      }\n\n      this._currentOrientation = orientation;\n\n      this._eventsStrategy.fireEvent(\"orientationChanged\", [{\n        orientation: orientation\n      }]);\n    }\n  }, {\n    key: \"_recalculateOrientation\",\n    value: function () {\n      var windowWidth = (0, _renderer2.default)(this._window).width();\n\n      if (this._currentWidth === windowWidth) {\n        return;\n      }\n\n      this._currentWidth = windowWidth;\n\n      this._changeOrientation();\n    }\n  }, {\n    key: \"on\",\n    value: function (eventName, eventHandler) {\n      this._eventsStrategy.on(eventName, eventHandler);\n\n      return this;\n    }\n  }, {\n    key: \"off\",\n    value: function (eventName, eventHandler) {\n      this._eventsStrategy.off(eventName, eventHandler);\n\n      return this;\n    }\n  }]);\n\n  return Devices;\n}();\n\nvar devices = new Devices();\n\n_view_port2.default.changeCallback.add(function (viewPort, prevViewport) {\n  devices.detachCssClasses(prevViewport);\n  devices.attachCssClasses(viewPort);\n});\n\nmodule.exports = devices;\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}