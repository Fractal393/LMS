{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { PdfPen } from './../pdf-pen';\nimport { RectangleF } from './../../drawing/pdf-drawing';\nimport { PdfFillElement } from './../figures/base/fill-element';\n/**\n * `PdfRectangleArea` class Implements graphics rectangle area, which is a sequence of primitive graphics elements.\n * @private\n */\n\nvar PdfRectangleArea =\n/** @class */\nfunction (_super) {\n  __extends(PdfRectangleArea, _super);\n  /* tslint:disable-next-line:max-line-length */\n\n\n  function PdfRectangleArea(arg1, arg2, arg3, arg4, arg5, arg6) {\n    var _this = _super.call(this) || this; //Fields\n\n    /**\n     * public variable to store the rectangle.\n     * @public\n     */\n\n\n    _this.bounds = new RectangleF(0, 0, 0, 0);\n\n    if (typeof arg1 === 'undefined') {//\n    } else if (arg1 instanceof PdfPen) {\n      _this = _super.call(this, arg1, arg2) || this;\n\n      if (arg3 instanceof RectangleF) {\n        _this.bounds = arg3;\n      } else {\n        _this.bounds = new RectangleF(arg3, arg4, arg5, arg6);\n      }\n    } else if (arg1 instanceof RectangleF) {\n      _this.bounds = arg1;\n    } else {\n      _this.bounds = new RectangleF(arg1, arg2, arg3, arg4);\n    }\n\n    return _this;\n  }\n\n  Object.defineProperty(PdfRectangleArea.prototype, \"x\", {\n    //Properties\n\n    /**\n     * Gets or sets the X co-ordinate of the upper-left corner of this the element.\n     * @public\n     */\n    get: function () {\n      return this.bounds.x;\n    },\n    set: function (value) {\n      this.bounds.x = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfRectangleArea.prototype, \"y\", {\n    /**\n     * Gets or sets the Y co-ordinate of the upper-left corner of this the element.\n     * @public\n     */\n    get: function () {\n      return this.bounds.y;\n    },\n    set: function (value) {\n      this.bounds.y = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfRectangleArea.prototype, \"width\", {\n    /**\n     * Gets or sets the width of this element.\n     * @public\n     */\n    get: function () {\n      return this.bounds.width;\n    },\n    set: function (value) {\n      this.bounds.width = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfRectangleArea.prototype, \"height\", {\n    /**\n     * Gets or sets the height of this element.\n     * @public\n     */\n    get: function () {\n      return this.bounds.height;\n    },\n    set: function (value) {\n      this.bounds.height = value;\n    },\n    enumerable: true,\n    configurable: true\n  }); //Implementation\n\n  PdfRectangleArea.prototype.getBoundsInternal = function () {\n    return this.bounds;\n  };\n\n  return PdfRectangleArea;\n}(PdfFillElement);\n\nexport { PdfRectangleArea };","map":null,"metadata":{},"sourceType":"module"}