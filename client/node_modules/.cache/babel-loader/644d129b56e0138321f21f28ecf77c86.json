{"ast":null,"code":"/**\r\n * DevExtreme (ui/popover.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar $ = require(\"../core/renderer\");\n\nvar windowUtils = require(\"../core/utils/window\");\n\nvar window = windowUtils.getWindow();\n\nvar getPublicElement = require(\"../core/utils/dom\").getPublicElement;\n\nvar domAdapter = require(\"../core/dom_adapter\");\n\nvar eventsEngine = require(\"../events/core/events_engine\");\n\nvar registerComponent = require(\"../core/component_registrator\");\n\nvar commonUtils = require(\"../core/utils/common\");\n\nvar extend = require(\"../core/utils/extend\").extend;\n\nvar translator = require(\"../animation/translator\");\n\nvar positionUtils = require(\"../animation/position\");\n\nvar typeUtils = require(\"../core/utils/type\");\n\nvar mathUtils = require(\"../core/utils/math\");\n\nvar eventUtils = require(\"../events/utils\");\n\nvar Popup = require(\"./popup\");\n\nvar getBoundingRect = require(\"../core/utils/position\").getBoundingRect;\n\nvar POPOVER_CLASS = \"dx-popover\";\nvar POPOVER_WRAPPER_CLASS = \"dx-popover-wrapper\";\nvar POPOVER_ARROW_CLASS = \"dx-popover-arrow\";\nvar POPOVER_WITHOUT_TITLE_CLASS = \"dx-popover-without-title\";\nvar POSITION_FLIP_MAP = {\n  left: \"right\",\n  top: \"bottom\",\n  right: \"left\",\n  bottom: \"top\",\n  center: \"center\"\n};\nvar WEIGHT_OF_SIDES = {\n  left: -1,\n  top: -1,\n  center: 0,\n  right: 1,\n  bottom: 1\n};\nvar POSITION_ALIASES = {\n  top: {\n    my: \"bottom center\",\n    at: \"top center\",\n    collision: \"fit flip\"\n  },\n  bottom: {\n    my: \"top center\",\n    at: \"bottom center\",\n    collision: \"fit flip\"\n  },\n  right: {\n    my: \"left center\",\n    at: \"right center\",\n    collision: \"flip fit\"\n  },\n  left: {\n    my: \"right center\",\n    at: \"left center\",\n    collision: \"flip fit\"\n  }\n};\nvar SIDE_BORDER_WIDTH_STYLES = {\n  left: \"borderLeftWidth\",\n  top: \"borderTopWidth\",\n  right: \"borderRightWidth\",\n  bottom: \"borderBottomWidth\"\n};\n\nvar getEventNameByOption = function (optionValue) {\n  return typeUtils.isObject(optionValue) ? optionValue.name : optionValue;\n};\n\nvar getEventName = function (that, optionName) {\n  var optionValue = that.option(optionName);\n  return getEventNameByOption(optionValue);\n};\n\nvar getEventDelay = function (that, optionName) {\n  var optionValue = that.option(optionName);\n  return typeUtils.isObject(optionValue) && optionValue.delay;\n};\n\nvar attachEvent = function (that, name) {\n  var target = that.option(\"target\");\n  var isSelector = typeUtils.isString(target);\n  var event = getEventName(that, name + \"Event\");\n\n  if (!event || that.option(\"disabled\")) {\n    return;\n  }\n\n  var eventName = eventUtils.addNamespace(event, that.NAME);\n\n  var action = that._createAction(function () {\n    var delay = getEventDelay(that, name + \"Event\");\n\n    this._clearEventsTimeouts();\n\n    if (delay) {\n      this._timeouts[name] = setTimeout(function () {\n        that[name]();\n      }, delay);\n    } else {\n      that[name]();\n    }\n  }.bind(that), {\n    validatingTargetName: \"target\"\n  });\n\n  var handler = function (e) {\n    action({\n      event: e,\n      target: $(e.currentTarget)\n    });\n  };\n\n  var EVENT_HANDLER_NAME = \"_\" + name + \"EventHandler\";\n\n  if (isSelector) {\n    that[EVENT_HANDLER_NAME] = handler;\n    eventsEngine.on(domAdapter.getDocument(), eventName, target, handler);\n  } else {\n    var targetElement = getPublicElement($(target));\n    that[EVENT_HANDLER_NAME] = void 0;\n    eventsEngine.on(targetElement, eventName, handler);\n  }\n};\n\nvar detachEvent = function (that, target, name, event) {\n  var eventName = event || getEventName(that, name + \"Event\");\n\n  if (!eventName) {\n    return;\n  }\n\n  eventName = eventUtils.addNamespace(eventName, that.NAME);\n  var EVENT_HANDLER_NAME = \"_\" + name + \"EventHandler\";\n\n  if (that[EVENT_HANDLER_NAME]) {\n    eventsEngine.off(domAdapter.getDocument(), eventName, target, that[EVENT_HANDLER_NAME]);\n  } else {\n    eventsEngine.off(getPublicElement($(target)), eventName);\n  }\n};\n\nvar Popover = Popup.inherit({\n  _getDefaultOptions: function () {\n    return extend(this.callBase(), {\n      target: window,\n      shading: false,\n      position: \"bottom\",\n      closeOnOutsideClick: true,\n      animation: {\n        show: {\n          type: \"fade\",\n          from: 0,\n          to: 1\n        },\n        hide: {\n          type: \"fade\",\n          to: 0\n        }\n      },\n      showTitle: false,\n      width: \"auto\",\n      height: \"auto\",\n      dragEnabled: false,\n      resizeEnabled: false,\n      fullScreen: false,\n      closeOnTargetScroll: true,\n      arrowPosition: \"\",\n      arrowOffset: 0,\n      boundaryOffset: {\n        h: 10,\n        v: 10\n      }\n    });\n  },\n  _defaultOptionsRules: function () {\n    return [{\n      device: {\n        platform: \"ios\"\n      },\n      options: {\n        arrowPosition: {\n          boundaryOffset: {\n            h: 20,\n            v: -10\n          },\n          collision: \"fit\"\n        }\n      }\n    }, {\n      device: function () {\n        return !windowUtils.hasWindow();\n      },\n      options: {\n        animation: null\n      }\n    }];\n  },\n  _init: function () {\n    this.callBase();\n\n    this._renderArrow();\n\n    this._timeouts = {};\n    this.$element().addClass(POPOVER_CLASS);\n\n    this._wrapper().addClass(POPOVER_WRAPPER_CLASS);\n  },\n  _render: function () {\n    this.callBase.apply(this, arguments);\n\n    this._detachEvents(this.option(\"target\"));\n\n    this._attachEvents();\n  },\n  _detachEvents: function (target) {\n    detachEvent(this, target, \"show\");\n    detachEvent(this, target, \"hide\");\n  },\n  _attachEvents: function () {\n    attachEvent(this, \"show\");\n    attachEvent(this, \"hide\");\n  },\n  _renderArrow: function () {\n    this._$arrow = $(\"<div>\").addClass(POPOVER_ARROW_CLASS).prependTo(this.overlayContent());\n  },\n  _documentDownHandler: function (e) {\n    if (this._isOutsideClick(e)) {\n      return this.callBase(e);\n    }\n\n    return true;\n  },\n  _isOutsideClick: function (e) {\n    return !$(e.target).closest(this.option(\"target\")).length;\n  },\n  _animate: function (animation) {\n    if (animation && animation.to && \"object\" === _typeof(animation.to)) {\n      extend(animation.to, {\n        position: this._getContainerPosition()\n      });\n    }\n\n    this.callBase.apply(this, arguments);\n  },\n  _stopAnimation: function () {\n    this.callBase.apply(this, arguments);\n  },\n  _renderTitle: function () {\n    this._wrapper().toggleClass(POPOVER_WITHOUT_TITLE_CLASS, !this.option(\"showTitle\"));\n\n    this.callBase();\n  },\n  _renderPosition: function () {\n    this.callBase();\n\n    this._renderOverlayPosition();\n  },\n  _renderOverlayBoundaryOffset: commonUtils.noop,\n  _renderOverlayPosition: function () {\n    this._resetOverlayPosition();\n\n    this._updateContentSize();\n\n    var contentPosition = this._getContainerPosition();\n\n    var resultLocation = positionUtils.setup(this._$content, contentPosition);\n\n    var positionSide = this._getSideByLocation(resultLocation);\n\n    this._togglePositionClass(\"dx-position-\" + positionSide);\n\n    this._toggleFlippedClass(resultLocation.h.flip, resultLocation.v.flip);\n\n    var isArrowVisible = this._isHorizontalSide() || this._isVerticalSide();\n\n    if (isArrowVisible) {\n      this._renderArrowPosition(positionSide);\n    }\n  },\n  _resetOverlayPosition: function () {\n    this._setContentHeight(true);\n\n    this._togglePositionClass(\"dx-position-\" + this._positionSide);\n\n    translator.move(this._$content, {\n      left: 0,\n      top: 0\n    });\n\n    this._$arrow.css({\n      top: \"auto\",\n      right: \"auto\",\n      bottom: \"auto\",\n      left: \"auto\"\n    });\n  },\n  _updateContentSize: function () {\n    if (!this._$popupContent) {\n      return;\n    }\n\n    var containerLocation = positionUtils.calculate(this._$content, this._getContainerPosition());\n\n    if (containerLocation.h.oversize > 0 && this._isHorizontalSide() && !containerLocation.h.fit) {\n      var newContainerWidth = this._$content.width() - containerLocation.h.oversize;\n\n      this._$content.width(newContainerWidth);\n    }\n\n    if (containerLocation.v.oversize > 0 && this._isVerticalSide() && !containerLocation.v.fit) {\n      var newOverlayContentHeight = this._$content.height() - containerLocation.v.oversize;\n      var newPopupContentHeight = this._$popupContent.height() - containerLocation.v.oversize;\n\n      this._$content.height(newOverlayContentHeight);\n\n      this._$popupContent.height(newPopupContentHeight);\n    }\n  },\n  _getContainerPosition: function () {\n    var offset = commonUtils.pairToObject(this._position.offset || \"\");\n    var hOffset = offset.h;\n    var vOffset = offset.v;\n\n    var isVerticalSide = this._isVerticalSide();\n\n    var isHorizontalSide = this._isHorizontalSide();\n\n    if (isVerticalSide || isHorizontalSide) {\n      var isPopoverInside = this._isPopoverInside();\n\n      var sign = (isPopoverInside ? -1 : 1) * WEIGHT_OF_SIDES[this._positionSide];\n      var arrowSize = isVerticalSide ? this._$arrow.height() : this._$arrow.width();\n\n      var arrowSizeCorrection = this._getContentBorderWidth(this._positionSide);\n\n      var arrowOffset = sign * (arrowSize - arrowSizeCorrection);\n      isVerticalSide ? vOffset += arrowOffset : hOffset += arrowOffset;\n    }\n\n    return extend({}, this._position, {\n      offset: hOffset + \" \" + vOffset\n    });\n  },\n  _getContentBorderWidth: function (side) {\n    var borderWidth = this._$content.css(SIDE_BORDER_WIDTH_STYLES[side]);\n\n    return parseInt(borderWidth) || 0;\n  },\n  _getSideByLocation: function (location) {\n    var isFlippedByVertical = location.v.flip;\n    var isFlippedByHorizontal = location.h.flip;\n    return this._isVerticalSide() && isFlippedByVertical || this._isHorizontalSide() && isFlippedByHorizontal || this._isPopoverInside() ? POSITION_FLIP_MAP[this._positionSide] : this._positionSide;\n  },\n  _togglePositionClass: function (positionClass) {\n    this._$wrapper.removeClass(\"dx-position-left dx-position-right dx-position-top dx-position-bottom\").addClass(positionClass);\n  },\n  _toggleFlippedClass: function (isFlippedHorizontal, isFlippedVertical) {\n    this._$wrapper.toggleClass(\"dx-popover-flipped-horizontal\", isFlippedHorizontal).toggleClass(\"dx-popover-flipped-vertical\", isFlippedVertical);\n  },\n  _renderArrowPosition: function (side) {\n    var arrowRect = getBoundingRect(this._$arrow.get(0));\n    var arrowFlip = -(this._isVerticalSide(side) ? arrowRect.height : arrowRect.width);\n\n    this._$arrow.css(POSITION_FLIP_MAP[side], arrowFlip);\n\n    var axis = this._isVerticalSide(side) ? \"left\" : \"top\";\n    var sizeProperty = this._isVerticalSide(side) ? \"width\" : \"height\";\n    var $target = $(this._position.of);\n    var targetOffset = positionUtils.offset($target) || {\n      top: 0,\n      left: 0\n    };\n    var contentOffset = positionUtils.offset(this._$content);\n    var arrowSize = arrowRect[sizeProperty];\n    var contentLocation = contentOffset[axis];\n    var contentSize = getBoundingRect(this._$content.get(0))[sizeProperty];\n    var targetLocation = targetOffset[axis];\n    var targetSize = $target.get(0).preventDefault ? 0 : getBoundingRect($target.get(0))[sizeProperty];\n    var min = Math.max(contentLocation, targetLocation);\n    var max = Math.min(contentLocation + contentSize, targetLocation + targetSize);\n    var arrowLocation;\n\n    if (\"start\" === this.option(\"arrowPosition\")) {\n      arrowLocation = min - contentLocation;\n    } else {\n      if (\"end\" === this.option(\"arrowPosition\")) {\n        arrowLocation = max - contentLocation - arrowSize;\n      } else {\n        arrowLocation = (min + max) / 2 - contentLocation - arrowSize / 2;\n      }\n    }\n\n    var borderWidth = this._getContentBorderWidth(side);\n\n    var finalArrowLocation = mathUtils.fitIntoRange(arrowLocation - borderWidth + this.option(\"arrowOffset\"), borderWidth, contentSize - arrowSize - 2 * borderWidth);\n\n    this._$arrow.css(axis, finalArrowLocation);\n  },\n  _isPopoverInside: function () {\n    var position = this._transformStringPosition(this.option(\"position\"), POSITION_ALIASES);\n\n    var my = positionUtils.setup.normalizeAlign(position.my);\n    var at = positionUtils.setup.normalizeAlign(position.at);\n    return my.h === at.h && my.v === at.v;\n  },\n  _setContentHeight: function (fullUpdate) {\n    if (fullUpdate) {\n      this.callBase();\n    }\n  },\n  _renderWrapperPosition: function () {\n    if (this.option(\"shading\")) {\n      this._$wrapper.css({\n        top: 0,\n        left: 0\n      });\n    }\n  },\n  _renderWrapperDimensions: function () {\n    if (this.option(\"shading\")) {\n      this._$wrapper.css({\n        width: \"100%\",\n        height: \"100%\"\n      });\n    }\n  },\n  _normalizePosition: function () {\n    var position = extend({}, this._transformStringPosition(this.option(\"position\"), POSITION_ALIASES));\n\n    if (!position.of) {\n      position.of = this.option(\"target\");\n    }\n\n    if (!position.collision) {\n      position.collision = \"flip\";\n    }\n\n    if (!position.boundaryOffset) {\n      position.boundaryOffset = this.option(\"boundaryOffset\");\n    }\n\n    this._positionSide = this._getDisplaySide(position);\n    this._position = position;\n  },\n  _getDisplaySide: function (position) {\n    var my = positionUtils.setup.normalizeAlign(position.my);\n    var at = positionUtils.setup.normalizeAlign(position.at);\n    var weightSign = WEIGHT_OF_SIDES[my.h] === WEIGHT_OF_SIDES[at.h] && WEIGHT_OF_SIDES[my.v] === WEIGHT_OF_SIDES[at.v] ? -1 : 1;\n    var horizontalWeight = Math.abs(WEIGHT_OF_SIDES[my.h] - weightSign * WEIGHT_OF_SIDES[at.h]);\n    var verticalWeight = Math.abs(WEIGHT_OF_SIDES[my.v] - weightSign * WEIGHT_OF_SIDES[at.v]);\n    return horizontalWeight > verticalWeight ? at.h : at.v;\n  },\n  _isVerticalSide: function (side) {\n    side = side || this._positionSide;\n    return \"top\" === side || \"bottom\" === side;\n  },\n  _isHorizontalSide: function (side) {\n    side = side || this._positionSide;\n    return \"left\" === side || \"right\" === side;\n  },\n  _clearEventTimeout: function (name) {\n    clearTimeout(this._timeouts[name]);\n  },\n  _clearEventsTimeouts: function () {\n    this._clearEventTimeout(\"show\");\n\n    this._clearEventTimeout(\"hide\");\n  },\n  _clean: function () {\n    this._detachEvents(this.option(\"target\"));\n\n    this.callBase.apply(this, arguments);\n  },\n  _optionChanged: function (args) {\n    switch (args.name) {\n      case \"boundaryOffset\":\n      case \"arrowPosition\":\n      case \"arrowOffset\":\n        this._renderGeometry();\n\n        break;\n\n      case \"fullScreen\":\n        if (args.value) {\n          this.option(\"fullScreen\", false);\n        }\n\n        break;\n\n      case \"target\":\n        args.previousValue && this._detachEvents(args.previousValue);\n        this.callBase(args);\n        break;\n\n      case \"showEvent\":\n      case \"hideEvent\":\n        var name = args.name.substring(0, 4);\n        var event = getEventNameByOption(args.previousValue);\n        this.hide();\n        detachEvent(this, this.option(\"target\"), name, event);\n        attachEvent(this, name);\n        break;\n\n      case \"visible\":\n        this._clearEventTimeout(args.value ? \"show\" : \"hide\");\n\n        this.callBase(args);\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  show: function (target) {\n    if (target) {\n      this.option(\"target\", target);\n    }\n\n    return this.callBase();\n  }\n});\nregisterComponent(\"dxPopover\", Popover);\nmodule.exports = Popover;\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}