{"ast":null,"code":"import { PdfColor } from './../graphics/pdf-color';\nimport { RectangleF, PointF } from './../drawing/pdf-drawing';\nimport { PdfDictionary, SaveAnnotationEventHandler } from './../primitives/pdf-dictionary';\nimport { PdfArray } from './../primitives/pdf-array';\nimport { PdfNumber } from './../primitives/pdf-number';\nimport { PdfReferenceHolder } from './../primitives/pdf-reference';\nimport { PdfString } from './../primitives/pdf-string';\nimport { DictionaryProperties } from './../input-output/pdf-dictionary-properties';\nimport { PdfName } from './../primitives/pdf-name';\nimport { PdfSolidBrush } from './../graphics/brushes/pdf-solid-brush';\nimport { PdfStandardFont } from './../graphics/fonts/pdf-standard-font';\nimport { PdfFontFamily } from './../graphics/fonts/enum';\nimport { PdfStringFormat } from './../graphics/fonts/pdf-string-format';\nimport { PdfTextAlignment } from './../graphics/enum';\n/**\n * `PdfAnnotation` class represents the base class for annotation objects.\n * @private\n */\n\nvar PdfAnnotation =\n/** @class */\nfunction () {\n  function PdfAnnotation(arg1) {\n    // Fields\n\n    /**\n     * Specifies the Internal variable to store fields of `PdfDictionaryProperties`.\n     * @private\n     */\n    this.dictionaryProperties = new DictionaryProperties();\n    /**\n     * `Color` of the annotation\n     * @private\n     */\n\n    this.pdfColor = new PdfColor(255, 255, 255);\n    /**\n     * `Bounds` of the annotation.\n     * @private\n     */\n\n    this.rectangle = new RectangleF(0, 0, 0, 0);\n    /**\n     * Parent `page` of the annotation.\n     * @private\n     */\n\n    this.pdfPage = null;\n    /**\n     * `Brush of the text` of the annotation.\n     * @default new PdfSolidBrush(new PdfColor(0, 0, 0))\n     * @private\n     */\n\n    this.textBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n    /**\n     * `Font of the text` of the annotation.\n     * @default new PdfStandardFont(PdfFontFamily.TimesRoman, 10)\n     * @private\n     */\n\n    this.textFont = new PdfStandardFont(PdfFontFamily.TimesRoman, 10);\n    /**\n     * `StringFormat of the text` of the annotation.\n     * @default new PdfStringFormat(PdfTextAlignment.Left)\n     * @private\n     */\n\n    this.format = new PdfStringFormat(PdfTextAlignment.Left);\n    /**\n     * `Text` of the annotation.\n     * @private\n     */\n\n    this.content = '';\n    /**\n     * Internal variable to store `dictionary`.\n     * @private\n     */\n\n    this.pdfDictionary = new PdfDictionary();\n    /**\n     * To specifying the `Inner color` with which to fill the annotation\n     * @private\n     */\n\n    this.internalColor = new PdfColor();\n    /**\n     * `opacity or darkness` of the annotation.\n     * @private\n     * @default 1.0\n     */\n\n    this.darkness = 1.0;\n\n    if (typeof arg1 === 'undefined') {\n      this.initialize();\n    } else {\n      this.initialize();\n      this.bounds = arg1;\n    }\n  }\n\n  Object.defineProperty(PdfAnnotation.prototype, \"color\", {\n    // Properties\n\n    /**\n     * `Color` of the annotation\n     * @private\n     */\n    get: function () {\n      return this.pdfColor;\n    },\n    set: function (value) {\n      this.pdfColor = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfAnnotation.prototype, \"innerColor\", {\n    /**\n     * To specifying the `Inner color` with which to fill the annotation\n     * @private\n     */\n    get: function () {\n      return this.internalColor;\n    },\n    set: function (value) {\n      this.internalColor = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfAnnotation.prototype, \"bounds\", {\n    /**\n     * `bounds` of the annotation.\n     * @private\n     */\n    get: function () {\n      return this.rectangle;\n    },\n    set: function (value) {\n      this.rectangle = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfAnnotation.prototype, \"page\", {\n    /**\n     * Parent `page` of the annotation.\n     * @private\n     */\n    get: function () {\n      return this.pdfPage;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfAnnotation.prototype, \"font\", {\n    /**\n     * To specifying the `Font of the text` in the annotation.\n     * @private\n     */\n    get: function () {\n      return this.textFont;\n    },\n    set: function (value) {\n      this.textFont = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfAnnotation.prototype, \"stringFormat\", {\n    /**\n     * To specifying the `StringFormat of the text` in the annotation.\n     * @private\n     */\n    get: function () {\n      return this.format;\n    },\n    set: function (value) {\n      this.format = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfAnnotation.prototype, \"brush\", {\n    /**\n     * To specifying the `Brush of the text` in the annotation.\n     * @private\n     */\n    get: function () {\n      return this.textBrush;\n    },\n    set: function (value) {\n      this.textBrush = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfAnnotation.prototype, \"text\", {\n    /**\n     * `Text` of the annotation.\n     * @private\n     */\n    get: function () {\n      return this.content;\n    },\n    set: function (value) {\n      this.content = value;\n      this.dictionary.items.setValue(this.dictionaryProperties.contents, new PdfString(this.content));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfAnnotation.prototype, \"dictionary\", {\n    /**\n     * Internal variable to store `dictionary`.\n     * @hidden\n     */\n    get: function () {\n      return this.pdfDictionary;\n    },\n    set: function (value) {\n      this.pdfDictionary = value;\n    },\n    enumerable: true,\n    configurable: true\n  }); // Implementation\n\n  /**\n   * `Initialize` the annotation event handler and specifies the type of the annotation.\n   * @private\n   */\n\n  PdfAnnotation.prototype.initialize = function () {\n    this.pdfDictionary.annotationBeginSave = new SaveAnnotationEventHandler(this);\n    this.pdfDictionary.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.annot));\n  };\n  /**\n   * Sets related `page` of the annotation.\n   * @private\n   */\n\n\n  PdfAnnotation.prototype.setPage = function (page) {\n    this.pdfPage = page;\n    this.pdfDictionary.items.setValue(this.dictionaryProperties.p, new PdfReferenceHolder(this.pdfPage));\n  };\n  /**\n   * Handles the `BeginSave` event of the Dictionary.\n   * @private\n   */\n\n\n  PdfAnnotation.prototype.beginSave = function () {\n    this.save();\n  };\n  /**\n   * `Saves` an annotation.\n   * @private\n   */\n\n  /* tslint:disable */\n\n\n  PdfAnnotation.prototype.save = function () {\n    var nativeRectangle = new RectangleF(this.rectangle.x, this.rectangle.y, this.rectangle.width, this.rectangle.height);\n    var section = this.pdfPage.section;\n    var initialHeight = nativeRectangle.height;\n    var tempLoacation = section.pointToNativePdf(this.page, new PointF(nativeRectangle.x, nativeRectangle.y));\n    nativeRectangle.x = tempLoacation.x;\n    nativeRectangle.width = tempLoacation.x + nativeRectangle.width;\n    nativeRectangle.y = tempLoacation.y - this.page.document.pageSettings.margins.top;\n    nativeRectangle.height = nativeRectangle.y - initialHeight;\n    this.pdfDictionary.items.setValue(this.dictionaryProperties.rect, PdfArray.fromRectangle(nativeRectangle));\n    this.dictionary.items.setValue(this.dictionaryProperties.ca, new PdfNumber(this.darkness));\n  };\n\n  Object.defineProperty(PdfAnnotation.prototype, \"element\", {\n    /* tslint:enable */\n    // IPdfWrapper Members\n\n    /**\n     * Gets the `element`.\n     * @private\n     */\n    get: function () {\n      return this.pdfDictionary;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfAnnotation;\n}();\n\nexport { PdfAnnotation };","map":null,"metadata":{},"sourceType":"module"}