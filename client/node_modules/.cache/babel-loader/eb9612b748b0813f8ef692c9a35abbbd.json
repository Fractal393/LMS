{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Component, Property, Event, Collection, L10n, Browser, Complex, compile, createElement } from '@syncfusion/ej2-base';\nimport { addClass, removeClass, detach, attributes, prepend, setStyleAttribute } from '@syncfusion/ej2-base';\nimport { NotifyPropertyChanges, ChildProperty, isBlazor } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined, formatUnit, append, EventHandler, Draggable, extend } from '@syncfusion/ej2-base';\nimport { SanitizeHtmlHelper } from '@syncfusion/ej2-base';\nimport { Button } from '@syncfusion/ej2-buttons';\nimport { Popup, PositionData, getZindexPartial } from '../popup/popup';\nimport { createResize, removeResize, setMinHeight } from '../common/resize';\n\nvar ButtonProps =\n/** @class */\nfunction (_super) {\n  __extends(ButtonProps, _super);\n\n  function ButtonProps() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property()], ButtonProps.prototype, \"buttonModel\", void 0);\n\n  __decorate([Property('Button')], ButtonProps.prototype, \"type\", void 0);\n\n  __decorate([Event()], ButtonProps.prototype, \"click\", void 0);\n\n  return ButtonProps;\n}(ChildProperty);\n\nexport { ButtonProps };\n/**\n * Configures the animation properties for both open and close the dialog.\n */\n\nvar AnimationSettings =\n/** @class */\nfunction (_super) {\n  __extends(AnimationSettings, _super);\n\n  function AnimationSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property('Fade')], AnimationSettings.prototype, \"effect\", void 0);\n\n  __decorate([Property(400)], AnimationSettings.prototype, \"duration\", void 0);\n\n  __decorate([Property(0)], AnimationSettings.prototype, \"delay\", void 0);\n\n  return AnimationSettings;\n}(ChildProperty);\n\nexport { AnimationSettings };\nvar ROOT = 'e-dialog';\nvar RTL = 'e-rtl';\nvar DLG_HEADER_CONTENT = 'e-dlg-header-content';\nvar DLG_HEADER = 'e-dlg-header';\nvar DLG_FOOTER_CONTENT = 'e-footer-content';\nvar MODAL_DLG = 'e-dlg-modal';\nvar DLG_CONTENT = 'e-dlg-content';\nvar DLG_CLOSE_ICON = 'e-icon-dlg-close';\nvar DLG_OVERLAY = 'e-dlg-overlay';\nvar DLG_TARGET = 'e-dlg-target';\nvar DLG_CONTAINER = 'e-dlg-container';\nvar SCROLL_DISABLED = 'e-scroll-disabled';\nvar DLG_PRIMARY_BUTTON = 'e-primary';\nvar ICON = 'e-icons';\nvar POPUP_ROOT = 'e-popup';\nvar DEVICE = 'e-device';\nvar FULLSCREEN = 'e-dlg-fullscreen';\nvar DLG_CLOSE_ICON_BTN = 'e-dlg-closeicon-btn';\nvar DLG_HIDE = 'e-popup-close';\nvar DLG_SHOW = 'e-popup-open';\nvar DLG_UTIL_DEFAULT_TITLE = 'Information';\nvar DLG_UTIL_ROOT = 'e-scroll-disabled';\nvar DLG_UTIL_ALERT = 'e-alert-dialog';\nvar DLG_UTIL_CONFIRM = 'e-confirm-dialog';\nvar DLG_RESIZABLE = 'e-dlg-resizable';\nvar DLG_RESTRICT_LEFT_VALUE = 'e-restrict-left';\nvar DLG_RESTRICT_WIDTH_VALUE = 'e-resize-viewport';\nvar DLG_REF_ELEMENT = 'e-dlg-ref-element';\n/**\n * Represents the dialog component that displays the information and get input from the user.\n * Two types of dialog components are `Modal and Modeless (non-modal)` depending on its interaction with parent application.\n * ```html\n * <div id=\"dialog\"></div>\n * ```\n * ```typescript\n * <script>\n *   var dialogObj = new Dialog({ header: 'Dialog' });\n *   dialogObj.appendTo(\"#dialog\");\n * </script>\n * ```\n */\n\nvar Dialog =\n/** @class */\nfunction (_super) {\n  __extends(Dialog, _super);\n  /**\n   * Constructor for creating the widget\n   * @hidden\n   */\n\n\n  function Dialog(options, element) {\n    return _super.call(this, options, element) || this;\n  }\n  /**\n   * Initialize the control rendering\n   * @private\n   */\n\n\n  Dialog.prototype.render = function () {\n    this.initialize();\n    this.initRender();\n    this.wireEvents();\n\n    if (this.width === '100%') {\n      this.element.style.width = '';\n    }\n\n    if (this.minHeight !== '') {\n      this.element.style.minHeight = this.minHeight.toString();\n    }\n\n    if (this.enableResize) {\n      this.setResize();\n\n      if (this.animationSettings.effect === 'None') {\n        this.getMinHeight();\n      }\n    }\n\n    this.renderComplete();\n  };\n  /**\n   * Initialize the event handler\n   * @private\n   */\n\n\n  Dialog.prototype.preRender = function () {\n    var _this = this;\n\n    this.headerContent = null;\n    this.allowMaxHeight = true;\n    this.preventVisibility = true;\n    this.clonedEle = this.element.cloneNode(true);\n\n    this.closeIconClickEventHandler = function (event) {\n      _this.hide(event);\n    };\n\n    this.dlgOverlayClickEventHandler = function (event) {\n      _this.trigger('overlayClick', event);\n\n      _this.focusContent();\n    };\n\n    var localeText = {\n      close: 'Close'\n    };\n    this.l10n = new L10n('dialog', localeText, this.locale);\n    this.checkPositionData();\n\n    if (isNullOrUndefined(this.target)) {\n      var prevOnChange = this.isProtectedOnChange;\n      this.isProtectedOnChange = true;\n      this.target = document.body;\n      this.isProtectedOnChange = prevOnChange;\n    }\n  };\n\n  ;\n\n  Dialog.prototype.isNumberValue = function (value) {\n    var isNumber = /^[-+]?\\d*\\.?\\d+$/.test(value);\n    return isNumber;\n  };\n\n  Dialog.prototype.checkPositionData = function () {\n    if (!isNullOrUndefined(this.position)) {\n      if (!isNullOrUndefined(this.position.X) && typeof this.position.X !== 'number') {\n        var isNumber = this.isNumberValue(this.position.X);\n\n        if (isNumber) {\n          var prevOnChange = this.isProtectedOnChange;\n          this.isProtectedOnChange = true;\n          this.position.X = parseFloat(this.position.X);\n          this.isProtectedOnChange = prevOnChange;\n        }\n      }\n\n      if (!isNullOrUndefined(this.position.Y) && typeof this.position.Y !== 'number') {\n        var isNumber = this.isNumberValue(this.position.Y);\n\n        if (isNumber) {\n          var prevOnChange = this.isProtectedOnChange;\n          this.isProtectedOnChange = true;\n          this.position.Y = parseFloat(this.position.Y);\n          this.isProtectedOnChange = prevOnChange;\n        }\n      }\n    }\n  };\n\n  Dialog.prototype.getEle = function (list, selector) {\n    var element = undefined;\n\n    for (var i = 0; i < list.length; i++) {\n      if (list[i].classList.contains(selector)) {\n        element = list[i];\n        break;\n      }\n    }\n\n    return element;\n  };\n  /* istanbul ignore next */\n\n\n  Dialog.prototype.getMinHeight = function () {\n    var computedHeaderHeight = '0px';\n    var computedFooterHeight = '0px';\n\n    if (!isNullOrUndefined(this.element.querySelector('.' + DLG_HEADER_CONTENT))) {\n      computedHeaderHeight = getComputedStyle(this.headerContent).height;\n    }\n\n    var footerEle = this.getEle(this.element.children, DLG_FOOTER_CONTENT);\n\n    if (!isNullOrUndefined(footerEle)) {\n      computedFooterHeight = getComputedStyle(footerEle).height;\n    }\n\n    var headerHeight = parseInt(computedHeaderHeight.slice(0, computedHeaderHeight.indexOf('p')), 10);\n    var footerHeight = parseInt(computedFooterHeight.slice(0, computedFooterHeight.indexOf('p')), 10);\n    setMinHeight(headerHeight + 30 + footerHeight);\n    return headerHeight + 30 + footerHeight;\n  };\n\n  Dialog.prototype.onResizeStart = function (args, dialogObj) {\n    dialogObj.trigger('resizeStart', args);\n    return args.cancel;\n  };\n\n  Dialog.prototype.onResizing = function (args, dialogObj) {\n    dialogObj.trigger('resizing', args);\n  };\n\n  Dialog.prototype.onResizeComplete = function (args, dialogObj) {\n    dialogObj.trigger('resizeStop', args);\n  };\n\n  Dialog.prototype.setResize = function () {\n    if (this.enableResize) {\n      if (this.isBlazorServerRender() && !isNullOrUndefined(this.element.querySelector('.e-icons.e-resize-handle'))) {\n        return;\n      }\n\n      this.element.classList.add(DLG_RESIZABLE);\n      var computedHeight = getComputedStyle(this.element).minHeight;\n      var computedWidth = getComputedStyle(this.element).minWidth;\n      var direction = this.enableRtl ? 'south-west' : 'south-east';\n\n      if (this.isModal && this.enableRtl) {\n        this.element.classList.add(DLG_RESTRICT_LEFT_VALUE);\n      } else if (this.isModal && this.target === document.body) {\n        this.element.classList.add(DLG_RESTRICT_WIDTH_VALUE);\n      }\n\n      createResize({\n        element: this.element,\n        direction: direction,\n        minHeight: parseInt(computedHeight.slice(0, computedWidth.indexOf('p')), 10),\n        maxHeight: this.targetEle.clientHeight,\n        minWidth: parseInt(computedWidth.slice(0, computedWidth.indexOf('p')), 10),\n        maxWidth: this.targetEle.clientWidth,\n        boundary: this.target === document.body ? null : this.targetEle,\n        resizeBegin: this.onResizeStart.bind(this),\n        resizeComplete: this.onResizeComplete.bind(this),\n        resizing: this.onResizing.bind(this),\n        proxy: this\n      });\n    } else {\n      removeResize();\n\n      if (this.isModal) {\n        this.element.classList.remove(DLG_RESTRICT_LEFT_VALUE);\n      } else {\n        this.element.classList.remove(DLG_RESTRICT_WIDTH_VALUE);\n      }\n\n      this.element.classList.remove(DLG_RESIZABLE);\n    }\n  };\n  /* istanbul ignore next */\n\n\n  Dialog.prototype.keyDown = function (event) {\n    var _this = this;\n\n    if (event.keyCode === 9) {\n      if (this.isModal) {\n        var buttonObj = void 0;\n\n        if (!isNullOrUndefined(this.btnObj)) {\n          buttonObj = this.btnObj[this.btnObj.length - 1];\n        }\n\n        if (isNullOrUndefined(this.btnObj) && !isNullOrUndefined(this.ftrTemplateContent)) {\n          var value = 'input,select,textarea,button,a,[contenteditable=\"true\"],[tabindex]';\n          var items = this.ftrTemplateContent.querySelectorAll(value);\n          buttonObj = {\n            element: items[items.length - 1]\n          };\n        }\n\n        if (!isNullOrUndefined(buttonObj) && document.activeElement === buttonObj.element && !event.shiftKey) {\n          event.preventDefault();\n          this.focusableElements(this.element).focus();\n        }\n\n        if (document.activeElement === this.focusableElements(this.element) && event.shiftKey) {\n          event.preventDefault();\n\n          if (!isNullOrUndefined(buttonObj)) {\n            buttonObj.element.focus();\n          }\n        }\n      }\n    }\n\n    var element = document.activeElement;\n    var isTagName = ['input', 'textarea'].indexOf(element.tagName.toLowerCase()) > -1;\n    var isContentEdit = false;\n\n    if (!isTagName) {\n      isContentEdit = element.hasAttribute('contenteditable') && element.getAttribute('contenteditable') === 'true';\n    }\n\n    if (event.keyCode === 27 && this.closeOnEscape) {\n      this.hide(event);\n    }\n\n    if (event.keyCode === 13 && !event.ctrlKey && element.tagName.toLowerCase() !== 'textarea' && isTagName && !isNullOrUndefined(this.primaryButtonEle) || event.keyCode === 13 && event.ctrlKey && (element.tagName.toLowerCase() === 'textarea' || isContentEdit) && !isNullOrUndefined(this.primaryButtonEle)) {\n      var buttonIndex_1;\n      var firstPrimary = this.buttons.some(function (data, index) {\n        buttonIndex_1 = index;\n        var buttonModel = data.buttonModel;\n        return !isNullOrUndefined(buttonModel) && buttonModel.isPrimary === true;\n      });\n\n      if (firstPrimary && typeof this.buttons[buttonIndex_1].click === 'function') {\n        setTimeout(function () {\n          _this.buttons[buttonIndex_1].click.call(_this, event);\n        });\n      }\n    }\n  };\n  /**\n   * Initialize the control rendering\n   * @private\n   */\n\n\n  Dialog.prototype.initialize = function () {\n    if (!isNullOrUndefined(this.target)) {\n      this.targetEle = typeof this.target === 'string' ? document.querySelector(this.target) : this.target;\n    }\n\n    if (!this.isBlazorServerRender()) {\n      addClass([this.element], ROOT);\n    }\n\n    if (Browser.isDevice) {\n      addClass([this.element], DEVICE);\n    }\n\n    if (!this.isBlazorServerRender()) {\n      this.setCSSClass();\n    }\n\n    this.setMaxHeight();\n  };\n  /**\n   * Initialize the rendering\n   * @private\n   */\n\n\n  Dialog.prototype.initRender = function () {\n    var _this = this;\n\n    this.initialRender = true;\n\n    if (!this.isBlazorServerRender()) {\n      attributes(this.element, {\n        role: 'dialog'\n      });\n    }\n\n    if (this.zIndex === 1000) {\n      this.setzIndex(this.element, false);\n      this.calculatezIndex = true;\n    } else {\n      this.calculatezIndex = false;\n    }\n\n    if (this.isBlazorServerRender() && isNullOrUndefined(this.headerContent)) {\n      this.headerContent = this.element.getElementsByClassName('e-dlg-header-content')[0];\n    }\n\n    if (this.isBlazorServerRender() && isNullOrUndefined(this.contentEle)) {\n      this.contentEle = this.element.querySelector('#' + this.element.id + '_dialog-content');\n    }\n\n    if (!this.isBlazorServerRender()) {\n      this.setTargetContent();\n\n      if (this.header !== '' && !isNullOrUndefined(this.header)) {\n        this.setHeader();\n      }\n\n      if (this.showCloseIcon) {\n        this.renderCloseIcon();\n      }\n\n      this.setContent();\n\n      if (this.footerTemplate !== '' && !isNullOrUndefined(this.footerTemplate)) {\n        this.setFooterTemplate();\n      } else if (!isNullOrUndefined(this.buttons[0].buttonModel)) {\n        this.setButton();\n      }\n    }\n\n    if (this.isBlazorServerRender()) {\n      if (!isNullOrUndefined(this.buttons[0].buttonModel) && this.footerTemplate === '') {\n        this.setButton();\n      }\n    }\n\n    if (this.allowDragging && !isNullOrUndefined(this.headerContent)) {\n      this.setAllowDragging();\n    }\n\n    if (!this.isBlazorServerRender()) {\n      attributes(this.element, {\n        'aria-modal': this.isModal ? 'true' : 'false'\n      });\n\n      if (this.isModal) {\n        this.setIsModal();\n      }\n    }\n\n    if (this.isBlazorServerRender() && isNullOrUndefined(this.dlgContainer)) {\n      this.dlgContainer = this.element.parentElement;\n\n      for (var i = 0, childNodes = this.dlgContainer.children; i < childNodes.length; i++) {\n        if (childNodes[i].classList.contains('e-dlg-overlay')) {\n          this.dlgOverlay = childNodes[i];\n        }\n      }\n    }\n\n    if (this.element.classList.contains(DLG_UTIL_ALERT) !== true && this.element.classList.contains(DLG_UTIL_CONFIRM) !== true && !isNullOrUndefined(this.element.parentElement)) {\n      var parentEle = this.isModal ? this.dlgContainer.parentElement : this.element.parentElement;\n      this.refElement = this.createElement('div', {\n        className: DLG_REF_ELEMENT\n      });\n      parentEle.insertBefore(this.refElement, this.isModal ? this.dlgContainer : this.element);\n    }\n\n    if (!isNullOrUndefined(this.targetEle)) {\n      this.isModal ? this.targetEle.appendChild(this.dlgContainer) : this.targetEle.appendChild(this.element);\n    }\n\n    this.popupObj = new Popup(this.element, {\n      height: this.height,\n      width: this.width,\n      zIndex: this.zIndex,\n      relateTo: this.target,\n      actionOnScroll: 'none',\n      enableRtl: this.enableRtl,\n      open: function (event) {\n        var eventArgs = {\n          container: _this.isModal ? _this.dlgContainer : _this.element,\n          element: _this.element,\n          target: _this.target,\n          preventFocus: false\n        };\n\n        if (_this.enableResize) {\n          _this.resetResizeIcon();\n        }\n\n        _this.trigger('open', eventArgs, function (openEventArgs) {\n          if (!openEventArgs.preventFocus) {\n            _this.focusContent();\n          }\n        });\n      },\n      close: function (event) {\n        if (_this.isModal) {\n          addClass([_this.dlgOverlay], 'e-fade');\n        }\n\n        _this.unBindEvent(_this.element);\n\n        if (_this.isModal) {\n          _this.dlgContainer.style.display = 'none';\n        }\n\n        _this.trigger('close', _this.closeArgs);\n\n        var activeEle = document.activeElement;\n\n        if (!isNullOrUndefined(activeEle) && !isNullOrUndefined(activeEle.blur)) {\n          activeEle.blur();\n        }\n\n        if (!isNullOrUndefined(_this.storeActiveElement) && !isNullOrUndefined(_this.storeActiveElement.focus)) {\n          _this.storeActiveElement.focus();\n        }\n      }\n    });\n    this.positionChange();\n    this.setEnableRTL();\n\n    if (!this.isBlazorServerRender()) {\n      addClass([this.element], DLG_HIDE);\n\n      if (this.isModal) {\n        this.setOverlayZindex();\n      }\n    }\n\n    if (this.visible) {\n      this.show();\n    } else {\n      if (this.isModal) {\n        this.dlgOverlay.style.display = 'none';\n      }\n    }\n\n    this.initialRender = false;\n  };\n\n  Dialog.prototype.resetResizeIcon = function () {\n    var dialogConHeight = this.getMinHeight();\n\n    if (this.targetEle.offsetHeight < dialogConHeight) {\n      var className = this.enableRtl ? 'e-south-west' : 'e-south-east';\n      var resizeIcon = this.element.querySelector('.' + className);\n\n      if (!isNullOrUndefined(resizeIcon)) {\n        resizeIcon.style.bottom = '-' + dialogConHeight.toString() + 'px';\n      }\n    }\n  };\n\n  Dialog.prototype.setOverlayZindex = function (zIndexValue) {\n    var zIndex;\n\n    if (isNullOrUndefined(zIndexValue)) {\n      zIndex = parseInt(this.element.style.zIndex, 10) ? parseInt(this.element.style.zIndex, 10) : this.zIndex;\n    } else {\n      zIndex = zIndexValue;\n    }\n\n    this.dlgOverlay.style.zIndex = (zIndex - 1).toString();\n    this.dlgContainer.style.zIndex = zIndex.toString();\n  };\n\n  Dialog.prototype.positionChange = function () {\n    if (this.isModal) {\n      if (!isNaN(parseFloat(this.position.X)) && !isNaN(parseFloat(this.position.Y))) {\n        this.setPopupPosition();\n      } else if (!isNaN(parseFloat(this.position.X)) && isNaN(parseFloat(this.position.Y)) || isNaN(parseFloat(this.position.X)) && !isNaN(parseFloat(this.position.Y))) {\n        this.setPopupPosition();\n      } else {\n        this.element.style.top = '0px';\n        this.element.style.left = '0px';\n        this.dlgContainer.classList.add('e-dlg-' + this.position.X + '-' + this.position.Y);\n      }\n    } else {\n      this.setPopupPosition();\n    }\n  };\n\n  Dialog.prototype.setPopupPosition = function () {\n    this.popupObj.setProperties({\n      position: {\n        X: this.position.X,\n        Y: this.position.Y\n      }\n    });\n  };\n\n  Dialog.prototype.setAllowDragging = function () {\n    var _this = this;\n\n    var handleContent = '.' + DLG_HEADER_CONTENT;\n    this.dragObj = new Draggable(this.element, {\n      clone: false,\n      abort: '.e-dlg-closeicon-btn',\n      handle: handleContent,\n      dragStart: function (event) {\n        _this.trigger('dragStart', event, function (dragEventArgs) {\n          if (isBlazor()) {\n            dragEventArgs.bindEvents(event.dragElement);\n          }\n        });\n      },\n      dragStop: function (event) {\n        if (_this.isModal) {\n          if (!isNullOrUndefined(_this.position)) {\n            _this.dlgContainer.classList.remove('e-dlg-' + _this.position.X + '-' + _this.position.Y);\n          } // Reset the dialog position after drag completion.\n\n\n          _this.element.style.position = 'relative';\n        }\n\n        _this.trigger('dragStop', event);\n\n        _this.element.classList.remove(DLG_RESTRICT_LEFT_VALUE);\n      },\n      drag: function (event) {\n        _this.trigger('drag', event);\n      }\n    });\n\n    if (!isNullOrUndefined(this.targetEle)) {\n      this.dragObj.dragArea = this.targetEle;\n    }\n  };\n\n  Dialog.prototype.setButton = function () {\n    if (!this.isBlazorServerRender()) {\n      this.buttonContent = [];\n      this.btnObj = [];\n      var primaryBtnFlag = true;\n\n      for (var i = 0; i < this.buttons.length; i++) {\n        var buttonType = !isNullOrUndefined(this.buttons[i].type) ? this.buttons[i].type.toLowerCase() : 'button';\n        var btn = this.createElement('button', {\n          attrs: {\n            type: buttonType\n          }\n        });\n        this.buttonContent.push(btn.outerHTML);\n      }\n\n      this.setFooterTemplate();\n    }\n\n    var footerBtn;\n\n    for (var i = 0, childNodes = this.element.children; i < childNodes.length; i++) {\n      if (childNodes[i].classList.contains(DLG_FOOTER_CONTENT)) {\n        footerBtn = childNodes[i].querySelectorAll('button');\n      }\n    }\n\n    for (var i = 0; i < this.buttons.length; i++) {\n      if (!this.isBlazorServerRender()) {\n        this.btnObj[i] = new Button(this.buttons[i].buttonModel);\n      }\n\n      if (this.isBlazorServerRender()) {\n        this.ftrTemplateContent = this.element.querySelector('.' + DLG_FOOTER_CONTENT);\n      }\n\n      if (!isNullOrUndefined(this.ftrTemplateContent) && typeof this.buttons[i].click === 'function' && footerBtn.length > 0) {\n        EventHandler.add(footerBtn[i], 'click', this.buttons[i].click, this);\n      }\n\n      if (!this.isBlazorServerRender() && !isNullOrUndefined(this.ftrTemplateContent)) {\n        this.btnObj[i].appendTo(this.ftrTemplateContent.children[i]);\n        this.btnObj[i].element.classList.add('e-flat');\n        this.primaryButtonEle = this.element.getElementsByClassName('e-primary')[0];\n      }\n    }\n  };\n\n  Dialog.prototype.setContent = function () {\n    attributes(this.element, {\n      'aria-describedby': this.element.id + '_dialog-content'\n    });\n    this.contentEle = this.createElement('div', {\n      className: DLG_CONTENT,\n      id: this.element.id + '_dialog-content'\n    });\n\n    if (this.innerContentElement) {\n      this.contentEle.appendChild(this.innerContentElement);\n    } else if (!isNullOrUndefined(this.content) && this.content !== '' || !this.initialRender) {\n      var blazorContain = Object.keys(window);\n\n      if (typeof this.content === 'string' && !isBlazor()) {\n        this.contentEle.innerHTML = this.sanitizeHelper(this.content);\n      } else if (this.content instanceof HTMLElement) {\n        this.contentEle.appendChild(this.content);\n      } else {\n        this.setTemplate(this.content, this.contentEle);\n      }\n    }\n\n    if (!isNullOrUndefined(this.headerContent)) {\n      this.element.insertBefore(this.contentEle, this.element.children[1]);\n    } else {\n      this.element.insertBefore(this.contentEle, this.element.children[0]);\n    }\n\n    if (this.height === 'auto') {\n      if (!this.isBlazorServerRender() && Browser.isIE && this.element.style.width === '' && !isNullOrUndefined(this.width)) {\n        this.element.style.width = formatUnit(this.width);\n      }\n\n      this.setMaxHeight();\n    }\n  };\n\n  Dialog.prototype.setTemplate = function (template, toElement) {\n    var templateFn;\n    var templateProps;\n    var blazorContain = Object.keys(window);\n\n    if (toElement.classList.contains(DLG_HEADER)) {\n      templateProps = this.element.id + 'header';\n    } else if (toElement.classList.contains(DLG_FOOTER_CONTENT)) {\n      templateProps = this.element.id + 'footerTemplate';\n    } else {\n      templateProps = this.element.id + 'content';\n    }\n\n    var templateValue;\n\n    if (!isNullOrUndefined(template.outerHTML)) {\n      toElement.appendChild(template);\n    } else if (typeof template !== 'string' || isBlazor() && !this.isStringTemplate) {\n      templateFn = compile(template);\n      templateValue = template;\n    } else {\n      toElement.innerHTML = this.sanitizeHelper(template);\n    }\n\n    var fromElements = [];\n\n    if (!isNullOrUndefined(templateFn)) {\n      var isString = isBlazor() && !this.isStringTemplate && templateValue.indexOf('<div>Blazor') === 0 ? this.isStringTemplate : true;\n\n      for (var _i = 0, _a = templateFn({}, null, null, templateProps, isString); _i < _a.length; _i++) {\n        var item = _a[_i];\n        fromElements.push(item);\n      }\n\n      append([].slice.call(fromElements), toElement);\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  Dialog.prototype.sanitizeHelper = function (value) {\n    if (this.enableHtmlSanitizer) {\n      var dialogItem = SanitizeHtmlHelper.beforeSanitize();\n      var beforeEvent = {\n        cancel: false,\n        helper: null\n      };\n      extend(dialogItem, dialogItem, beforeEvent);\n      this.trigger('beforeSanitizeHtml', dialogItem);\n\n      if (dialogItem.cancel && !isNullOrUndefined(dialogItem.helper)) {\n        value = dialogItem.helper(value);\n      } else if (!dialogItem.cancel) {\n        value = SanitizeHtmlHelper.serializeValue(dialogItem, value);\n      }\n    }\n\n    return value;\n  };\n\n  Dialog.prototype.setMaxHeight = function () {\n    if (!this.allowMaxHeight) {\n      return;\n    }\n\n    var display = this.element.style.display;\n    this.element.style.display = 'none';\n    this.element.style.maxHeight = !isNullOrUndefined(this.target) && this.targetEle.offsetHeight < window.innerHeight ? this.targetEle.offsetHeight - 20 + 'px' : window.innerHeight - 20 + 'px';\n    this.element.style.display = display;\n\n    if (Browser.isIE && this.height === 'auto' && !isNullOrUndefined(this.contentEle) && this.element.offsetHeight < this.contentEle.offsetHeight) {\n      this.element.style.height = 'inherit';\n    }\n  };\n\n  Dialog.prototype.setEnableRTL = function () {\n    if (!this.isBlazorServerRender()) {\n      this.enableRtl ? addClass([this.element], RTL) : removeClass([this.element], RTL);\n    }\n\n    if (!isNullOrUndefined(this.element.querySelector('.e-resize-handle'))) {\n      removeResize();\n      this.setResize();\n    }\n  };\n\n  Dialog.prototype.setTargetContent = function () {\n    var _this = this;\n\n    if (isNullOrUndefined(this.content) || this.content === '') {\n      var isContent = this.element.innerHTML.replace(/\\s|<(\\/?|\\!?)(!--!--)>/g, '') !== '';\n\n      if (this.element.children.length > 0 || isContent) {\n        this.innerContentElement = document.createDocumentFragment();\n        [].slice.call(this.element.childNodes).forEach(function (el) {\n          if (el.nodeType !== 8) {\n            _this.innerContentElement.appendChild(el);\n          }\n        });\n      }\n    }\n  };\n\n  Dialog.prototype.setHeader = function () {\n    if (this.headerEle) {\n      this.headerEle.innerHTML = '';\n    } else {\n      this.headerEle = this.createElement('div', {\n        id: this.element.id + '_title',\n        className: DLG_HEADER\n      });\n    }\n\n    this.createHeaderContent();\n    this.headerContent.appendChild(this.headerEle);\n    this.setTemplate(this.header, this.headerEle);\n    attributes(this.element, {\n      'aria-labelledby': this.element.id + '_title'\n    });\n    this.element.insertBefore(this.headerContent, this.element.children[0]);\n  };\n\n  Dialog.prototype.setFooterTemplate = function () {\n    if (this.ftrTemplateContent) {\n      this.ftrTemplateContent.innerHTML = '';\n    } else {\n      this.ftrTemplateContent = this.createElement('div', {\n        className: DLG_FOOTER_CONTENT\n      });\n    }\n\n    if (this.footerTemplate !== '' && !isNullOrUndefined(this.footerTemplate)) {\n      this.setTemplate(this.footerTemplate, this.ftrTemplateContent);\n    } else {\n      this.ftrTemplateContent.innerHTML = this.buttonContent.join('');\n    }\n\n    this.element.appendChild(this.ftrTemplateContent);\n  };\n\n  Dialog.prototype.createHeaderContent = function () {\n    if (isNullOrUndefined(this.headerContent)) {\n      this.headerContent = this.createElement('div', {\n        id: this.element.id + '_dialog-header',\n        className: DLG_HEADER_CONTENT\n      });\n    }\n  };\n\n  Dialog.prototype.renderCloseIcon = function () {\n    this.closeIcon = this.createElement('button', {\n      className: DLG_CLOSE_ICON_BTN,\n      attrs: {\n        type: 'button'\n      }\n    });\n    this.closeIconBtnObj = new Button({\n      cssClass: 'e-flat',\n      iconCss: DLG_CLOSE_ICON + ' ' + ICON\n    });\n    this.closeIconTitle();\n\n    if (!isNullOrUndefined(this.headerContent)) {\n      prepend([this.closeIcon], this.headerContent);\n    } else {\n      this.createHeaderContent();\n      prepend([this.closeIcon], this.headerContent);\n      this.element.insertBefore(this.headerContent, this.element.children[0]);\n    }\n\n    this.closeIconBtnObj.appendTo(this.closeIcon);\n  };\n\n  Dialog.prototype.closeIconTitle = function () {\n    this.l10n.setLocale(this.locale);\n    var closeIconTitle = this.l10n.getConstant('close');\n    this.closeIcon.setAttribute('title', closeIconTitle);\n    this.closeIcon.setAttribute('aria-label', closeIconTitle);\n  };\n\n  Dialog.prototype.setCSSClass = function (oldCSSClass) {\n    if (this.cssClass) {\n      addClass([this.element], this.cssClass.split(' '));\n    }\n\n    if (oldCSSClass) {\n      removeClass([this.element], oldCSSClass.split(' '));\n    }\n  };\n\n  Dialog.prototype.setIsModal = function () {\n    this.dlgContainer = this.createElement('div', {\n      className: DLG_CONTAINER\n    });\n    this.element.classList.remove(DLG_SHOW);\n    this.element.parentNode.insertBefore(this.dlgContainer, this.element);\n    this.dlgContainer.appendChild(this.element);\n    addClass([this.element], MODAL_DLG);\n    this.dlgOverlay = this.createElement('div', {\n      className: DLG_OVERLAY\n    });\n    this.dlgOverlay.style.zIndex = (this.zIndex - 1).toString();\n    this.dlgContainer.appendChild(this.dlgOverlay);\n  };\n\n  Dialog.prototype.getValidFocusNode = function (items) {\n    var node;\n\n    for (var u = 0; u < items.length; u++) {\n      node = items[u];\n\n      if ((node.clientHeight > 0 || node.tagName.toLowerCase() === 'a' && node.hasAttribute('href')) && node.tabIndex > -1 && !node.disabled && !this.disableElement(node, '[disabled],[aria-disabled=\"true\"],[type=\"hidden\"]')) {\n        return node;\n      }\n    }\n\n    return node;\n  };\n\n  Dialog.prototype.focusableElements = function (content) {\n    if (!isNullOrUndefined(content)) {\n      var value = 'input,select,textarea,button,a,[contenteditable=\"true\"],[tabindex]';\n      var items = content.querySelectorAll(value);\n      return this.getValidFocusNode(items);\n    }\n\n    return null;\n  };\n\n  Dialog.prototype.getAutoFocusNode = function (container) {\n    var node = container.querySelector('.' + DLG_CLOSE_ICON_BTN);\n    var value = '[autofocus]';\n    var items = container.querySelectorAll(value);\n    var validNode = this.getValidFocusNode(items);\n\n    if (isBlazor()) {\n      this.primaryButtonEle = this.element.getElementsByClassName('e-primary')[0];\n    }\n\n    if (!isNullOrUndefined(validNode)) {\n      node = validNode;\n    } else {\n      validNode = this.focusableElements(this.contentEle);\n\n      if (!isNullOrUndefined(validNode)) {\n        return node = validNode;\n      } else if (!isNullOrUndefined(this.primaryButtonEle)) {\n        return this.element.querySelector('.' + DLG_PRIMARY_BUTTON);\n      }\n    }\n\n    return node;\n  };\n\n  Dialog.prototype.disableElement = function (element, t) {\n    var elementMatch = element ? element.matches || element.webkitMatchesSelector || element.msMatchesSelector : null;\n\n    if (elementMatch) {\n      for (; element; element = element.parentNode) {\n        if (element instanceof Element && elementMatch.call(element, t)) {\n          /* istanbul ignore next */\n          return element;\n        }\n      }\n    }\n\n    return null;\n  };\n\n  Dialog.prototype.focusContent = function () {\n    var element = this.getAutoFocusNode(this.element);\n    var node = !isNullOrUndefined(element) ? element : this.element;\n    node.focus();\n    this.bindEvent(this.element);\n  };\n\n  Dialog.prototype.bindEvent = function (element) {\n    EventHandler.add(element, 'keydown', this.keyDown, this);\n  };\n\n  Dialog.prototype.unBindEvent = function (element) {\n    EventHandler.remove(element, 'keydown', this.keyDown);\n  };\n\n  Dialog.prototype.updateSanitizeContent = function () {\n    if (!this.isBlazorServerRender()) {\n      this.contentEle.innerHTML = this.sanitizeHelper(this.content);\n    }\n  };\n\n  Dialog.prototype.isBlazorServerRender = function () {\n    return isBlazor() && this.isServerRendered;\n  };\n  /**\n   * Module required function\n   * @private\n   */\n\n\n  Dialog.prototype.getModuleName = function () {\n    return 'dialog';\n  };\n  /**\n   * Called internally if any of the property value changed\n   * @private\n   */\n\n\n  Dialog.prototype.onPropertyChanged = function (newProp, oldProp) {\n    if (!this.element.classList.contains(ROOT)) {\n      return;\n    }\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'content':\n          if (!isNullOrUndefined(this.content) && this.content !== '') {\n            if (this.isBlazorServerRender()) {\n              this.contentEle = this.element.querySelector('.e-dlg-content');\n            }\n\n            if (!isNullOrUndefined(this.contentEle) && this.contentEle.getAttribute('role') !== 'dialog') {\n              if (!this.isBlazorServerRender()) {\n                this.contentEle.innerHTML = '';\n              }\n\n              typeof this.content === 'string' ? this.isBlazorServerRender() && this.contentEle.innerText === '' ? this.contentEle.insertAdjacentHTML('beforeend', this.sanitizeHelper(this.content)) : this.updateSanitizeContent() : this.contentEle.appendChild(this.content);\n              this.setMaxHeight();\n            } else {\n              if (!this.isBlazorServerRender() || isNullOrUndefined(this.element.querySelector('.e-dlg-content'))) {\n                this.setContent();\n              }\n            }\n          } else if (!isNullOrUndefined(this.contentEle)) {\n            detach(this.contentEle);\n            this.contentEle = null;\n          }\n\n          break;\n\n        case 'header':\n          if (this.header === '' || isNullOrUndefined(this.header)) {\n            if (this.headerEle) {\n              detach(this.headerEle);\n              this.headerEle = null;\n            }\n          } else {\n            if (!this.isBlazorServerRender() || isNullOrUndefined(this.element.querySelector('.e-dlg-header-content'))) {\n              this.setHeader();\n            }\n          }\n\n          break;\n\n        case 'footerTemplate':\n          if (this.footerTemplate === '' || isNullOrUndefined(this.footerTemplate)) {\n            if (!this.ftrTemplateContent) {\n              return;\n            }\n\n            detach(this.ftrTemplateContent);\n            this.ftrTemplateContent = null;\n            this.buttons = [{}];\n          } else {\n            if (!this.isBlazorServerRender() || isNullOrUndefined(this.element.querySelector('.e-footer-content'))) {\n              this.setFooterTemplate();\n            }\n\n            this.buttons = [{}];\n          }\n\n          break;\n\n        case 'showCloseIcon':\n          if (this.element.getElementsByClassName(DLG_CLOSE_ICON).length > 0) {\n            if (!this.showCloseIcon && (this.header === '' || isNullOrUndefined(this.header))) {\n              detach(this.headerContent);\n              this.headerContent = null;\n            } else if (!this.showCloseIcon) {\n              detach(this.closeIcon);\n            } else {\n              if (this.isBlazorServerRender()) {\n                this.wireEvents();\n              }\n            }\n          } else {\n            if (!this.isBlazorServerRender()) {\n              this.renderCloseIcon();\n            }\n\n            this.wireEvents();\n          }\n\n          break;\n\n        case 'locale':\n          if (this.showCloseIcon) {\n            this.closeIconTitle();\n          }\n\n          break;\n\n        case 'visible':\n          this.visible ? this.show() : this.hide();\n          break;\n\n        case 'isModal':\n          this.updateIsModal();\n          break;\n\n        case 'height':\n          setStyleAttribute(this.element, {\n            'height': formatUnit(newProp.height)\n          });\n          break;\n\n        case 'width':\n          setStyleAttribute(this.element, {\n            'width': formatUnit(newProp.width)\n          });\n          break;\n\n        case 'zIndex':\n          this.popupObj.zIndex = this.zIndex;\n\n          if (this.isModal) {\n            this.setOverlayZindex(this.zIndex);\n          }\n\n          if (this.element.style.zIndex !== this.zIndex.toString()) {\n            this.calculatezIndex = false;\n          }\n\n          break;\n\n        case 'cssClass':\n          this.setCSSClass(oldProp.cssClass);\n          break;\n\n        case 'buttons':\n          var buttonCount = this.buttons.length;\n\n          if (!isNullOrUndefined(this.ftrTemplateContent) && !this.isBlazorServerRender()) {\n            detach(this.ftrTemplateContent);\n            this.ftrTemplateContent = null;\n          }\n\n          for (var i = 0; i < buttonCount; i++) {\n            if (!isNullOrUndefined(this.buttons[i].buttonModel)) {\n              this.footerTemplate = '';\n              this.setButton();\n            }\n          }\n\n          break;\n\n        case 'allowDragging':\n          if (this.allowDragging && !isNullOrUndefined(this.headerContent)) {\n            this.setAllowDragging();\n          } else {\n            this.dragObj.destroy();\n          }\n\n          break;\n\n        case 'target':\n          this.setTarget(newProp.target);\n          break;\n\n        case 'position':\n          this.checkPositionData();\n\n          if (this.isModal) {\n            var positionX = isNullOrUndefined(oldProp.position.X) ? this.position.X : oldProp.position.X;\n            var positionY = isNullOrUndefined(oldProp.position.Y) ? this.position.Y : oldProp.position.Y;\n\n            if (this.dlgContainer.classList.contains('e-dlg-' + positionX + '-' + positionY)) {\n              this.dlgContainer.classList.remove('e-dlg-' + positionX + '-' + positionY);\n            }\n          }\n\n          this.positionChange();\n          break;\n\n        case 'enableRtl':\n          this.setEnableRTL();\n          break;\n\n        case 'enableResize':\n          this.setResize();\n          break;\n      }\n    }\n  };\n\n  Dialog.prototype.setTarget = function (target) {\n    this.popupObj.relateTo = target;\n    this.target = target;\n    this.targetEle = typeof this.target === 'string' ? document.querySelector(this.target) : this.target;\n\n    if (this.dragObj) {\n      this.dragObj.dragArea = this.targetEle;\n    }\n\n    this.setMaxHeight();\n\n    if (this.isModal) {\n      this.updateIsModal();\n    }\n\n    if (this.enableResize) {\n      this.setResize();\n    }\n  };\n\n  Dialog.prototype.updateIsModal = function () {\n    this.element.setAttribute('aria-modal', this.isModal ? 'true' : 'false');\n\n    if (this.isModal) {\n      this.setIsModal();\n      this.element.style.top = '0px';\n      this.element.style.left = '0px';\n\n      if (!isNullOrUndefined(this.targetEle)) {\n        this.targetEle.appendChild(this.dlgContainer);\n      }\n    } else {\n      removeClass([this.element], MODAL_DLG);\n      removeClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);\n      detach(this.dlgOverlay);\n\n      while (this.dlgContainer.firstChild) {\n        this.dlgContainer.parentElement.insertBefore(this.dlgContainer.firstChild, this.dlgContainer);\n      }\n\n      this.dlgContainer.parentElement.removeChild(this.dlgContainer);\n    }\n\n    if (this.visible) {\n      this.show();\n    }\n\n    this.positionChange();\n\n    if (this.isModal && this.dlgOverlay) {\n      EventHandler.add(this.dlgOverlay, 'click', this.dlgOverlayClickEventHandler, this);\n    }\n  };\n\n  Dialog.prototype.setzIndex = function (zIndexElement, setPopupZindex) {\n    var prevOnChange = this.isProtectedOnChange;\n    this.isProtectedOnChange = true;\n    this.zIndex = getZindexPartial(zIndexElement);\n    this.isProtectedOnChange = prevOnChange;\n\n    if (setPopupZindex) {\n      this.popupObj.zIndex = this.zIndex;\n    }\n  };\n  /**\n   * Get the properties to be maintained in the persisted state.\n   * @private\n   */\n\n\n  Dialog.prototype.getPersistData = function () {\n    return this.addOnPersist([]);\n  };\n  /**\n   * To destroy the widget\n   * @method destroy\n   * @return {void}\n   * @memberof dialog\n   */\n\n\n  Dialog.prototype.destroy = function () {\n    if (this.isDestroyed) {\n      return;\n    }\n\n    var classArray = [RTL, MODAL_DLG, DLG_RESIZABLE, DLG_RESTRICT_LEFT_VALUE, FULLSCREEN, DEVICE];\n    var attrs = ['role', 'aria-modal', 'aria-labelledby', 'aria-describedby', 'aria-grabbed', 'tabindex', 'style'];\n    removeClass([this.targetEle], [DLG_TARGET, SCROLL_DISABLED]);\n\n    if (this.element.classList.contains(FULLSCREEN)) {\n      removeClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);\n    }\n\n    if (this.isModal) {\n      removeClass([!isNullOrUndefined(this.targetEle) ? this.targetEle : document.body], SCROLL_DISABLED);\n    }\n\n    this.unWireEvents();\n\n    if (!isNullOrUndefined(this.btnObj)) {\n      for (var i = 0; i < this.btnObj.length; i++) {\n        this.btnObj[i].destroy();\n      }\n    }\n\n    if (!isNullOrUndefined(this.dragObj)) {\n      this.dragObj.destroy();\n    }\n\n    if (this.popupObj.element.classList.contains(POPUP_ROOT)) {\n      this.popupObj.destroy();\n    }\n\n    removeClass([this.element], classArray);\n\n    if (!isNullOrUndefined(this.cssClass) && this.cssClass !== '') {\n      removeClass([this.element], this.cssClass.split(' '));\n    }\n\n    if (!isNullOrUndefined(this.refElement) && !isNullOrUndefined(this.refElement.parentElement)) {\n      this.refElement.parentElement.insertBefore(this.isModal ? this.dlgContainer : this.element, this.refElement);\n      detach(this.refElement);\n      this.refElement = undefined;\n    }\n\n    if (this.isModal && !this.isBlazorServerRender()) {\n      detach(this.dlgOverlay);\n      this.dlgContainer.parentNode.insertBefore(this.element, this.dlgContainer);\n      detach(this.dlgContainer);\n    }\n\n    if (!this.isBlazorServerRender()) {\n      this.element.innerHTML = this.clonedEle.innerHTML;\n    }\n\n    if (this.isBlazorServerRender()) {\n      if (!isNullOrUndefined(this.element.children)) {\n        for (var i = 0; i <= this.element.children.length; i++) {\n          i = i - i;\n          detach(this.element.children[i]);\n        }\n      }\n    }\n\n    for (var i = 0; i < attrs.length; i++) {\n      this.element.removeAttribute(attrs[i]);\n    }\n\n    if (!this.isBlazorServerRender()) {\n      _super.prototype.destroy.call(this);\n    } else {\n      this.isDestroyed = true;\n    }\n  };\n  /**\n   * Binding event to the element while widget creation\n   * @hidden\n   */\n\n\n  Dialog.prototype.wireEvents = function () {\n    if (this.isBlazorServerRender() && this.showCloseIcon) {\n      this.closeIcon = this.element.getElementsByClassName('e-dlg-closeicon-btn')[0];\n    }\n\n    if (this.showCloseIcon) {\n      EventHandler.add(this.closeIcon, 'click', this.closeIconClickEventHandler, this);\n    }\n\n    if (this.isModal && this.dlgOverlay) {\n      EventHandler.add(this.dlgOverlay, 'click', this.dlgOverlayClickEventHandler, this);\n    }\n  };\n  /**\n   * Unbinding event to the element while widget destroy\n   * @hidden\n   */\n\n\n  Dialog.prototype.unWireEvents = function () {\n    if (this.showCloseIcon) {\n      EventHandler.remove(this.closeIcon, 'click', this.closeIconClickEventHandler);\n    }\n\n    if (this.isModal) {\n      EventHandler.remove(this.dlgOverlay, 'click', this.dlgOverlayClickEventHandler);\n    }\n\n    if (this.buttons.length > 0 && !isNullOrUndefined(this.buttons[0].buttonModel) && this.footerTemplate === '') {\n      for (var i = 0; i < this.buttons.length; i++) {\n        if (typeof this.buttons[i].click === 'function') {\n          EventHandler.remove(this.ftrTemplateContent.children[i], 'click', this.buttons[i].click);\n        }\n      }\n    }\n  };\n  /**\n   * Refreshes the dialog's position when the user changes its header and footer height/width dynamically.\n   * @return {void}\n   */\n\n\n  Dialog.prototype.refreshPosition = function () {\n    this.popupObj.refreshPosition();\n  };\n  /**\n   * Opens the dialog if it is in hidden state.\n   * To open the dialog with full screen width, set the parameter to true.\n   * @param { boolean } isFullScreen - Enable the fullScreen Dialog.\n   * @return {void}\n   */\n\n\n  Dialog.prototype.show = function (isFullScreen) {\n    var _this = this;\n\n    if (!this.element.classList.contains(ROOT)) {\n      return;\n    }\n\n    if (!this.element.classList.contains(DLG_SHOW) || !isNullOrUndefined(isFullScreen)) {\n      if (!isNullOrUndefined(isFullScreen)) {\n        this.fullScreen(isFullScreen);\n      }\n\n      var eventArgs_1 = isBlazor() ? {\n        cancel: false,\n        element: this.element,\n        container: this.isModal ? this.dlgContainer : this.element,\n        maxHeight: this.element.style.maxHeight\n      } : {\n        cancel: false,\n        element: this.element,\n        container: this.isModal ? this.dlgContainer : this.element,\n        target: this.target,\n        maxHeight: this.element.style.maxHeight\n      };\n      this.trigger('beforeOpen', eventArgs_1, function (beforeOpenArgs) {\n        if (!beforeOpenArgs.cancel) {\n          if (_this.element.style.maxHeight !== eventArgs_1.maxHeight) {\n            _this.allowMaxHeight = false;\n            _this.element.style.maxHeight = eventArgs_1.maxHeight;\n          }\n\n          _this.storeActiveElement = document.activeElement;\n          _this.element.tabIndex = -1;\n\n          if (_this.isModal && !isNullOrUndefined(_this.dlgOverlay)) {\n            _this.dlgOverlay.style.display = 'block';\n            _this.dlgContainer.style.display = 'flex';\n            removeClass([_this.dlgOverlay], 'e-fade');\n\n            if (!isNullOrUndefined(_this.targetEle)) {\n              if (_this.targetEle === document.body) {\n                _this.dlgContainer.style.position = 'fixed';\n              } else {\n                _this.dlgContainer.style.position = 'absolute';\n              }\n\n              _this.dlgOverlay.style.position = 'absolute';\n              _this.element.style.position = 'relative';\n              addClass([_this.targetEle], [DLG_TARGET, SCROLL_DISABLED]);\n            } else {\n              addClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);\n            }\n          }\n\n          var openAnimation = {\n            name: _this.animationSettings.effect + 'In',\n            duration: _this.animationSettings.duration,\n            delay: _this.animationSettings.delay\n          };\n          var zIndexElement = _this.isModal ? _this.element.parentElement : _this.element;\n\n          if (_this.calculatezIndex) {\n            _this.setzIndex(zIndexElement, true);\n\n            setStyleAttribute(_this.element, {\n              'zIndex': _this.zIndex\n            });\n\n            if (_this.isModal) {\n              _this.setOverlayZindex(_this.zIndex);\n            }\n          }\n\n          _this.animationSettings.effect === 'None' ? _this.popupObj.show() : _this.popupObj.show(openAnimation);\n          _this.dialogOpen = true;\n          var prevOnChange = _this.isProtectedOnChange;\n          _this.isProtectedOnChange = true;\n          _this.visible = true;\n          _this.preventVisibility = true;\n          _this.isProtectedOnChange = prevOnChange;\n        }\n      });\n    }\n  };\n  /**\n   * Closes the dialog if it is in visible state.\n   * @return {void}\n   */\n\n\n  Dialog.prototype.hide = function (event) {\n    var _this = this;\n\n    if (!this.element.classList.contains(ROOT)) {\n      return;\n    }\n\n    if (this.preventVisibility) {\n      var eventArgs = isBlazor() ? {\n        cancel: false,\n        isInteracted: event ? true : false,\n        element: this.element,\n        container: this.isModal ? this.dlgContainer : this.element,\n        event: event\n      } : {\n        cancel: false,\n        isInteracted: event ? true : false,\n        element: this.element,\n        target: this.target,\n        container: this.isModal ? this.dlgContainer : this.element,\n        event: event\n      };\n      this.closeArgs = eventArgs;\n      this.trigger('beforeClose', eventArgs, function (beforeCloseArgs) {\n        if (!beforeCloseArgs.cancel) {\n          if (_this.isModal) {\n            !isNullOrUndefined(_this.targetEle) ? removeClass([_this.targetEle], [DLG_TARGET, SCROLL_DISABLED]) : removeClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);\n          }\n\n          var closeAnimation = {\n            name: _this.animationSettings.effect + 'Out',\n            duration: _this.animationSettings.duration,\n            delay: _this.animationSettings.delay\n          };\n          _this.animationSettings.effect === 'None' ? _this.popupObj.hide() : _this.popupObj.hide(closeAnimation);\n          _this.dialogOpen = false;\n          var prevOnChange = _this.isProtectedOnChange;\n          _this.isProtectedOnChange = true;\n          _this.visible = false;\n          _this.preventVisibility = false;\n          _this.isProtectedOnChange = prevOnChange;\n        }\n      });\n    }\n  };\n  /**\n   * Specifies to view the Full screen Dialog.\n   * @private\n   */\n\n\n  Dialog.prototype.fullScreen = function (args) {\n    var top = this.element.offsetTop;\n    var left = this.element.offsetLeft;\n\n    if (args) {\n      addClass([this.element], FULLSCREEN);\n      var display = this.element.style.display;\n      this.element.style.display = 'none';\n      this.element.style.maxHeight = !isNullOrUndefined(this.target) ? this.targetEle.offsetHeight + 'px' : window.innerHeight + 'px';\n      this.element.style.display = display;\n      addClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);\n\n      if (this.allowDragging && !isNullOrUndefined(this.dragObj)) {\n        this.dragObj.destroy();\n      }\n    } else {\n      removeClass([this.element], FULLSCREEN);\n      removeClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);\n\n      if (this.allowDragging && !isNullOrUndefined(this.headerContent)) {\n        this.setAllowDragging();\n      }\n    }\n\n    return args;\n  };\n  /**\n   * Returns the dialog button instances.\n   * Based on that, you can dynamically change the button states.\n   * @param { number } index - Index of the button.\n   * @return {Button}\n   */\n\n\n  Dialog.prototype.getButtons = function (index) {\n    if (!isNullOrUndefined(index)) {\n      return this.btnObj[index];\n    }\n\n    return this.btnObj;\n  };\n\n  __decorate([Property('')], Dialog.prototype, \"content\", void 0);\n\n  __decorate([Property(true)], Dialog.prototype, \"enableHtmlSanitizer\", void 0);\n\n  __decorate([Property(false)], Dialog.prototype, \"showCloseIcon\", void 0);\n\n  __decorate([Property(false)], Dialog.prototype, \"isModal\", void 0);\n\n  __decorate([Property('')], Dialog.prototype, \"header\", void 0);\n\n  __decorate([Property(true)], Dialog.prototype, \"visible\", void 0);\n\n  __decorate([Property(false)], Dialog.prototype, \"enableResize\", void 0);\n\n  __decorate([Property('auto')], Dialog.prototype, \"height\", void 0);\n\n  __decorate([Property('')], Dialog.prototype, \"minHeight\", void 0);\n\n  __decorate([Property('100%')], Dialog.prototype, \"width\", void 0);\n\n  __decorate([Property('')], Dialog.prototype, \"cssClass\", void 0);\n\n  __decorate([Property(1000)], Dialog.prototype, \"zIndex\", void 0);\n\n  __decorate([Property(null)], Dialog.prototype, \"target\", void 0);\n\n  __decorate([Property('')], Dialog.prototype, \"footerTemplate\", void 0);\n\n  __decorate([Property(false)], Dialog.prototype, \"allowDragging\", void 0);\n\n  __decorate([Collection([{}], ButtonProps)], Dialog.prototype, \"buttons\", void 0);\n\n  __decorate([Property(true)], Dialog.prototype, \"closeOnEscape\", void 0);\n\n  __decorate([Complex({}, AnimationSettings)], Dialog.prototype, \"animationSettings\", void 0);\n\n  __decorate([Complex({\n    X: 'center',\n    Y: 'center'\n  }, PositionData)], Dialog.prototype, \"position\", void 0);\n\n  __decorate([Event()], Dialog.prototype, \"created\", void 0);\n\n  __decorate([Event()], Dialog.prototype, \"open\", void 0);\n\n  __decorate([Event()], Dialog.prototype, \"beforeSanitizeHtml\", void 0);\n\n  __decorate([Event()], Dialog.prototype, \"beforeOpen\", void 0);\n\n  __decorate([Event()], Dialog.prototype, \"close\", void 0);\n\n  __decorate([Event()], Dialog.prototype, \"beforeClose\", void 0);\n\n  __decorate([Event()], Dialog.prototype, \"dragStart\", void 0);\n\n  __decorate([Event()], Dialog.prototype, \"dragStop\", void 0);\n\n  __decorate([Event()], Dialog.prototype, \"drag\", void 0);\n\n  __decorate([Event()], Dialog.prototype, \"overlayClick\", void 0);\n\n  __decorate([Event()], Dialog.prototype, \"resizeStart\", void 0);\n\n  __decorate([Event()], Dialog.prototype, \"resizing\", void 0);\n\n  __decorate([Event()], Dialog.prototype, \"resizeStop\", void 0);\n\n  __decorate([Event()], Dialog.prototype, \"destroyed\", void 0);\n\n  Dialog = __decorate([NotifyPropertyChanges], Dialog);\n  return Dialog;\n}(Component);\n\nexport { Dialog };\n/**\n * Base for creating Alert and Confirmation Dialog through util method.\n */\n\nexport var DialogUtility;\n\n(function (DialogUtility) {\n  /**\n   * An alert dialog box is used to display warning like messages to the users.\n   * ```\n   * Eg : DialogUtility.alert('Alert message');\n   *\n   * ```\n   */\n\n  /* istanbul ignore next */\n  function alert(args) {\n    var dialogComponent;\n    var dialogElement = createElement('div', {\n      'className': DLG_UTIL_ALERT\n    });\n    document.body.appendChild(dialogElement);\n    var alertDialogObj;\n    var okButtonModel = [{\n      buttonModel: {\n        isPrimary: true,\n        content: 'OK'\n      },\n      click: function () {\n        this.hide();\n      }\n    }];\n\n    if (typeof args === 'string') {\n      alertDialogObj = createDialog({\n        content: args,\n        position: {\n          X: 'center',\n          Y: 'top'\n        },\n        isModal: true,\n        header: DLG_UTIL_DEFAULT_TITLE,\n        buttons: okButtonModel\n      }, dialogElement);\n    } else {\n      alertDialogObj = createDialog(alertOptions(args), dialogElement);\n    }\n\n    alertDialogObj.close = function () {\n      if (args && args.close) {\n        args.close.apply(alertDialogObj);\n      }\n\n      alertDialogObj.destroy();\n\n      if (alertDialogObj.element.classList.contains('e-dlg-modal')) {\n        alertDialogObj.element.parentElement.remove();\n        alertDialogObj.target.classList.remove(DLG_UTIL_ROOT);\n      } else {\n        alertDialogObj.element.remove();\n      }\n    };\n\n    return alertDialogObj;\n  }\n\n  DialogUtility.alert = alert;\n  /**\n   * A confirm dialog displays a specified message along with ‘OK’ and ‘Cancel’ button.\n   * ```\n   * Eg : DialogUtility.confirm('Confirm dialog message');\n   *\n   * ```\n   */\n\n  /* istanbul ignore next */\n\n  function confirm(args) {\n    var dialogComponent;\n    var dialogElement = createElement('div', {\n      'className': DLG_UTIL_CONFIRM\n    });\n    document.body.appendChild(dialogElement);\n    var confirmDialogObj;\n    var okCancelButtonModel = [{\n      buttonModel: {\n        isPrimary: true,\n        content: 'OK'\n      },\n      click: function () {\n        this.hide();\n      }\n    }, {\n      buttonModel: {\n        content: 'Cancel'\n      },\n      click: function () {\n        this.hide();\n      }\n    }];\n\n    if (typeof args === 'string') {\n      confirmDialogObj = createDialog({\n        position: {\n          X: 'center',\n          Y: 'top'\n        },\n        content: args,\n        isModal: true,\n        header: DLG_UTIL_DEFAULT_TITLE,\n        buttons: okCancelButtonModel\n      }, dialogElement);\n    } else {\n      confirmDialogObj = createDialog(confirmOptions(args), dialogElement);\n    }\n\n    confirmDialogObj.close = function () {\n      if (args && args.close) {\n        args.close.apply(confirmDialogObj);\n      }\n\n      confirmDialogObj.destroy();\n\n      if (confirmDialogObj.element.classList.contains('e-dlg-modal')) {\n        confirmDialogObj.element.parentElement.remove();\n        confirmDialogObj.target.classList.remove(DLG_UTIL_ROOT);\n      } else {\n        confirmDialogObj.element.remove();\n      }\n    };\n\n    return confirmDialogObj;\n  }\n\n  DialogUtility.confirm = confirm;\n\n  function createDialog(options, element) {\n    var dialogObject = new Dialog(options);\n    dialogObject.appendTo(element);\n    return dialogObject;\n  }\n\n  function alertOptions(option) {\n    var options = {};\n    options.buttons = [];\n    options = formOptions(options, option);\n    options = setAlertButtonModel(options, option);\n    return options;\n  }\n\n  function confirmOptions(option) {\n    var options = {};\n    options.buttons = [];\n    options = formOptions(options, option);\n    options = setConfirmButtonModel(options, option);\n    return options;\n  }\n\n  function formOptions(options, option) {\n    options.header = !isNullOrUndefined(option.title) ? option.title : DLG_UTIL_DEFAULT_TITLE;\n    options.content = !isNullOrUndefined(option.content) ? option.content : '';\n    options.isModal = !isNullOrUndefined(option.isModal) ? option.isModal : true;\n    options.showCloseIcon = !isNullOrUndefined(option.showCloseIcon) ? option.showCloseIcon : false;\n    options.allowDragging = !isNullOrUndefined(option.isDraggable) ? option.isDraggable : false;\n    options.closeOnEscape = !isNullOrUndefined(option.closeOnEscape) ? option.closeOnEscape : false;\n    options.position = !isNullOrUndefined(option.position) ? option.position : {\n      X: 'center',\n      Y: 'top'\n    };\n    options.animationSettings = !isNullOrUndefined(option.animationSettings) ? option.animationSettings : {\n      effect: 'Fade',\n      duration: 400,\n      delay: 0\n    };\n    options.cssClass = !isNullOrUndefined(option.cssClass) ? option.cssClass : '';\n    options.zIndex = !isNullOrUndefined(option.zIndex) ? option.zIndex : 1000;\n    options.open = !isNullOrUndefined(option.open) ? option.open : null;\n    return options;\n  }\n\n  function setAlertButtonModel(options, option) {\n    var alertButtonModel = [{\n      buttonModel: {\n        isPrimary: true,\n        content: 'OK'\n      },\n      click: function () {\n        this.hide();\n      }\n    }];\n\n    if (!isNullOrUndefined(option.okButton)) {\n      options.buttons[0] = formButtonModel(options.buttons[0], option.okButton, alertButtonModel[0]);\n    } else {\n      options.buttons = alertButtonModel;\n    }\n\n    return options;\n  }\n\n  function setConfirmButtonModel(options, option) {\n    var okButtonModel = {\n      buttonModel: {\n        isPrimary: true,\n        content: 'OK'\n      },\n      click: function () {\n        this.hide();\n      }\n    };\n    var cancelButtonModel = {\n      buttonModel: {\n        content: 'Cancel'\n      },\n      click: function () {\n        this.hide();\n      }\n    };\n\n    if (!isNullOrUndefined(option.okButton)) {\n      options.buttons[0] = formButtonModel(options.buttons[0], option.okButton, okButtonModel);\n    } else {\n      options.buttons[0] = okButtonModel;\n    }\n\n    if (!isNullOrUndefined(option.cancelButton)) {\n      options.buttons[1] = formButtonModel(options.buttons[1], option.cancelButton, cancelButtonModel);\n    } else {\n      options.buttons[1] = cancelButtonModel;\n    }\n\n    return options;\n  }\n\n  function formButtonModel(buttonModel, option, buttonPropModel) {\n    var buttonProps = buttonPropModel;\n\n    if (!isNullOrUndefined(option.text)) {\n      buttonProps.buttonModel.content = option.text;\n    }\n\n    if (!isNullOrUndefined(option.icon)) {\n      buttonProps.buttonModel.iconCss = option.icon;\n    }\n\n    if (!isNullOrUndefined(option.cssClass)) {\n      buttonProps.buttonModel.cssClass = option.cssClass;\n    }\n\n    if (!isNullOrUndefined(option.click)) {\n      buttonProps.click = option.click;\n    }\n\n    return buttonProps;\n  }\n})(DialogUtility || (DialogUtility = {}));","map":null,"metadata":{},"sourceType":"module"}