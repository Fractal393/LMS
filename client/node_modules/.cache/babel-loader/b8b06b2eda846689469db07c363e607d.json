{"ast":null,"code":"/**\r\n * DevExtreme (ui/calendar/ui.calendar.base_view.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _dom_adapter = require(\"../../core/dom_adapter\");\n\nvar _dom_adapter2 = _interopRequireDefault(_dom_adapter);\n\nvar _events_engine = require(\"../../events/core/events_engine\");\n\nvar _events_engine2 = _interopRequireDefault(_events_engine);\n\nvar _element_data = require(\"../../core/element_data\");\n\nvar _element_data2 = _interopRequireDefault(_element_data);\n\nvar _dom = require(\"../../core/utils/dom\");\n\nvar _dom2 = _interopRequireDefault(_dom);\n\nvar _ui = require(\"../widget/ui.widget\");\n\nvar _ui2 = _interopRequireDefault(_ui);\n\nvar _date = require(\"../../core/utils/date\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _date_serialization = require(\"../../core/utils/date_serialization\");\n\nvar _message = require(\"../../localization/message\");\n\nvar _utils = require(\"../../events/utils\");\n\nvar _click = require(\"../../events/click\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar abstract = _ui2.default.abstract;\nvar CALENDAR_OTHER_VIEW_CLASS = \"dx-calendar-other-view\";\nvar CALENDAR_CELL_CLASS = \"dx-calendar-cell\";\nvar CALENDAR_EMPTY_CELL_CLASS = \"dx-calendar-empty-cell\";\nvar CALENDAR_TODAY_CLASS = \"dx-calendar-today\";\nvar CALENDAR_SELECTED_DATE_CLASS = \"dx-calendar-selected-date\";\nvar CALENDAR_CONTOURED_DATE_CLASS = \"dx-calendar-contoured-date\";\nvar CALENDAR_DXCLICK_EVENT_NAME = (0, _utils.addNamespace)(_click.name, \"dxCalendar\");\nvar CALENDAR_DATE_VALUE_KEY = \"dxDateValueKey\";\n\nvar BaseView = _ui2.default.inherit({\n  _getViewName: function () {\n    return \"base\";\n  },\n  _getDefaultOptions: function () {\n    return (0, _extend.extend)(this.callBase(), {\n      date: new Date(),\n      focusStateEnabled: false,\n      cellTemplate: null,\n      disabledDates: null,\n      onCellClick: null,\n      rowCount: 3,\n      colCount: 4,\n      allowValueSelection: true\n    });\n  },\n  _init: function () {\n    this.callBase();\n    var value = this.option(\"value\");\n    this.option(\"value\", new Date(value));\n\n    if (!this.option(\"value\").valueOf()) {\n      this.option(\"value\", new Date(0, 0, 0, 0, 0, 0));\n    }\n  },\n  _initMarkup: function () {\n    this.callBase();\n\n    this._renderImpl();\n  },\n  _renderImpl: function () {\n    this.$element().append(this._createTable());\n\n    this._createDisabledDatesHandler();\n\n    this._renderBody();\n\n    this._renderContouredDate();\n\n    this._renderValue();\n\n    this._renderEvents();\n  },\n  _createTable: function () {\n    this._$table = (0, _renderer2.default)(\"<table>\");\n    this.setAria({\n      label: (0, _message.format)(\"dxCalendar-ariaWidgetName\"),\n      role: \"grid\"\n    }, this._$table);\n    return this._$table;\n  },\n  _renderBody: function () {\n    this.$body = (0, _renderer2.default)(\"<tbody>\").appendTo(this._$table);\n    var rowData = {\n      cellDate: this._getFirstCellData(),\n      prevCellDate: null\n    };\n\n    for (var rowIndex = 0, rowCount = this.option(\"rowCount\"); rowIndex < rowCount; rowIndex++) {\n      rowData.row = this._createRow();\n\n      for (var colIndex = 0, colCount = this.option(\"colCount\"); colIndex < colCount; colIndex++) {\n        this._renderCell(rowData, colIndex);\n      }\n    }\n  },\n  _createRow: function () {\n    var row = _dom_adapter2.default.createElement(\"tr\");\n\n    this.setAria(\"role\", \"row\", (0, _renderer2.default)(row));\n    this.$body.get(0).appendChild(row);\n    return row;\n  },\n  _appendCell: function (row, cell) {\n    if (!this._appendMethodName) {\n      this._cacheAppendMethodName();\n    }\n\n    (0, _renderer2.default)(row)[this._appendMethodName](cell);\n  },\n  _cacheAppendMethodName: function (rtlEnabled) {\n    this._appendMethodName = (null !== rtlEnabled && void 0 !== rtlEnabled ? rtlEnabled : this.option(\"rtlEnabled\")) ? \"prepend\" : \"append\";\n  },\n  _createCell: function (cellDate) {\n    var cell = _dom_adapter2.default.createElement(\"td\");\n\n    var $cell = (0, _renderer2.default)(cell);\n    cell.className = this._getClassNameByDate(cellDate);\n    cell.setAttribute(\"data-value\", (0, _date_serialization.serializeDate)(cellDate, (0, _date.getShortDateFormat)()));\n\n    _element_data2.default.data(cell, CALENDAR_DATE_VALUE_KEY, cellDate);\n\n    this.setAria({\n      role: \"gridcell\",\n      label: this.getCellAriaLabel(cellDate)\n    }, $cell);\n    return {\n      cell: cell,\n      $cell: $cell\n    };\n  },\n  _renderCell: function (params, cellIndex) {\n    var cellDate = params.cellDate,\n        prevCellDate = params.prevCellDate,\n        row = params.row;\n\n    if (prevCellDate) {\n      (0, _date.fixTimezoneGap)(prevCellDate, cellDate);\n    }\n\n    params.prevCellDate = cellDate;\n\n    var _this$_createCell = this._createCell(cellDate),\n        cell = _this$_createCell.cell,\n        $cell = _this$_createCell.$cell;\n\n    var cellTemplate = this.option(\"cellTemplate\");\n\n    this._appendCell(row, cell);\n\n    if (cellTemplate) {\n      cellTemplate.render(this._prepareCellTemplateData(cellDate, cellIndex, $cell));\n    } else {\n      cell.innerHTML = this._getCellText(cellDate);\n    }\n\n    params.cellDate = this._getNextCellData(cellDate);\n  },\n  _getClassNameByDate: function (cellDate) {\n    var className = CALENDAR_CELL_CLASS;\n\n    if (this._isTodayCell(cellDate)) {\n      className += \" \".concat(CALENDAR_TODAY_CLASS);\n    }\n\n    if (this._isDateOutOfRange(cellDate) || this.isDateDisabled(cellDate)) {\n      className += \" \".concat(CALENDAR_EMPTY_CELL_CLASS);\n    }\n\n    if (this._isOtherView(cellDate)) {\n      className += \" \".concat(CALENDAR_OTHER_VIEW_CLASS);\n    }\n\n    return className;\n  },\n  _prepareCellTemplateData: function (cellDate, cellIndex, $cell) {\n    return {\n      model: {\n        text: this._getCellText(cellDate),\n        date: cellDate,\n        view: this._getViewName()\n      },\n      container: _dom2.default.getPublicElement($cell),\n      index: cellIndex\n    };\n  },\n  _renderEvents: function () {\n    var _this = this;\n\n    this._createCellClickAction();\n\n    _events_engine2.default.off(this._$table, CALENDAR_DXCLICK_EVENT_NAME);\n\n    _events_engine2.default.on(this._$table, CALENDAR_DXCLICK_EVENT_NAME, \"td\", function (e) {\n      if (!(0, _renderer2.default)(e.currentTarget).hasClass(CALENDAR_EMPTY_CELL_CLASS)) {\n        _this._cellClickAction({\n          event: e,\n          value: (0, _renderer2.default)(e.currentTarget).data(CALENDAR_DATE_VALUE_KEY)\n        });\n      }\n    });\n  },\n  _createCellClickAction: function () {\n    this._cellClickAction = this._createActionByOption(\"onCellClick\");\n  },\n  _createDisabledDatesHandler: function () {\n    var disabledDates = this.option(\"disabledDates\");\n    this._disabledDatesHandler = Array.isArray(disabledDates) ? this._getDefaultDisabledDatesHandler(disabledDates) : disabledDates || _common.noop;\n  },\n  _getDefaultDisabledDatesHandler: function (disabledDates) {\n    return _common.noop;\n  },\n  _isTodayCell: abstract,\n  _isDateOutOfRange: abstract,\n  isDateDisabled: function (cellDate) {\n    var dateParts = {\n      date: cellDate,\n      view: this._getViewName()\n    };\n    return this._disabledDatesHandler(dateParts);\n  },\n  _isOtherView: abstract,\n  _getCellText: abstract,\n  _getFirstCellData: abstract,\n  _getNextCellData: abstract,\n  _renderContouredDate: function (contouredDate) {\n    if (!this.option(\"focusStateEnabled\")) {\n      return;\n    }\n\n    contouredDate = contouredDate || this.option(\"contouredDate\");\n\n    var $oldContouredCell = this._$table.find(\".\".concat(CALENDAR_CONTOURED_DATE_CLASS));\n\n    var $newContouredCell = this._getCellByDate(contouredDate);\n\n    $oldContouredCell.removeClass(CALENDAR_CONTOURED_DATE_CLASS);\n    $newContouredCell.addClass(CALENDAR_CONTOURED_DATE_CLASS);\n  },\n  _changeValue: function (cellDate) {\n    if (cellDate) {\n      var value = this.option(\"value\");\n      var newValue = value ? new Date(value) : new Date();\n      newValue.setDate(cellDate.getDate());\n      newValue.setMonth(cellDate.getMonth());\n      newValue.setFullYear(cellDate.getFullYear());\n      newValue.setDate(cellDate.getDate());\n      this.option(\"value\", newValue);\n    } else {\n      this.option(\"value\", null);\n    }\n  },\n  _renderValue: function () {\n    if (!this.option(\"allowValueSelection\")) {\n      return;\n    }\n\n    var value = this.option(\"value\");\n\n    var selectedCell = this._getCellByDate(value);\n\n    if (this._selectedCell) {\n      this._selectedCell.removeClass(CALENDAR_SELECTED_DATE_CLASS);\n    }\n\n    selectedCell.addClass(CALENDAR_SELECTED_DATE_CLASS);\n    this._selectedCell = selectedCell;\n  },\n  getCellAriaLabel: function (date) {\n    return this._getCellText(date);\n  },\n  _getFirstAvailableDate: function () {\n    var date = this.option(\"date\");\n    var min = this.option(\"min\");\n    date = (0, _date.getFirstDateView)(this._getViewName(), date);\n    return new Date(min && date < min ? min : date);\n  },\n  _getCellByDate: abstract,\n  isBoundary: abstract,\n  _optionChanged: function (args) {\n    var name = args.name,\n        value = args.value;\n\n    switch (name) {\n      case \"value\":\n        this._renderValue();\n\n        break;\n\n      case \"contouredDate\":\n        this._renderContouredDate(value);\n\n        break;\n\n      case \"onCellClick\":\n        this._createCellClickAction();\n\n        break;\n\n      case \"disabledDates\":\n      case \"cellTemplate\":\n        this._invalidate();\n\n        break;\n\n      case \"rtlEnabled\":\n        this._cacheAppendMethodName(value);\n\n        this.callBase(args);\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n});\n\nmodule.exports = BaseView;","map":null,"metadata":{},"sourceType":"script"}