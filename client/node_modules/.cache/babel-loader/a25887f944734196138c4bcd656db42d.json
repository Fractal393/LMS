{"ast":null,"code":"/**\r\n * DevExtreme (ui/select_box.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../core/renderer\");\n\nvar commonUtils = require(\"../core/utils/common\");\n\nvar typeUtils = require(\"../core/utils/type\");\n\nvar isDefined = typeUtils.isDefined;\nvar isPromise = typeUtils.isPromise;\n\nvar extend = require(\"../core/utils/extend\").extend;\n\nvar inArray = require(\"../core/utils/array\").inArray;\n\nvar each = require(\"../core/utils/iterator\").each;\n\nvar deferredUtils = require(\"../core/utils/deferred\");\n\nvar getPublicElement = require(\"../core/utils/dom\").getPublicElement;\n\nvar Deferred = deferredUtils.Deferred;\n\nvar errors = require(\"../core/errors\");\n\nvar domAdapter = require(\"../core/dom_adapter\");\n\nvar inkRipple = require(\"./widget/utils.ink_ripple\");\n\nvar messageLocalization = require(\"../localization/message\");\n\nvar registerComponent = require(\"../core/component_registrator\");\n\nvar DropDownList = require(\"./drop_down_editor/ui.drop_down_list\");\n\nvar DISABLED_STATE_SELECTOR = \".dx-state-disabled\";\nvar SELECTBOX_CLASS = \"dx-selectbox\";\nvar SELECTBOX_POPUP_CLASS = \"dx-selectbox-popup\";\nvar SELECTBOX_CONTAINER_CLASS = \"dx-selectbox-container\";\nvar SELECTBOX_POPUP_WRAPPER_CLASS = \"dx-selectbox-popup-wrapper\";\nvar SelectBox = DropDownList.inherit({\n  _supportedKeys: function () {\n    var that = this;\n    var parent = this.callBase();\n\n    var clearSelectBox = function (e) {\n      var isEditable = this._isEditable();\n\n      if (!isEditable) {\n        if (this.option(\"showClearButton\")) {\n          e.preventDefault();\n          this.reset();\n        }\n      } else {\n        if (this._valueSubstituted()) {\n          this._preventFiltering = true;\n        }\n      }\n\n      this._preventSubstitution = true;\n    };\n\n    var searchIfNeeded = function () {\n      if (that.option(\"searchEnabled\") && that._valueSubstituted()) {\n        that._searchHandler();\n      }\n    };\n\n    return extend({}, parent, {\n      tab: function () {\n        if (this.option(\"opened\") && \"instantly\" === this.option(\"applyValueMode\")) {\n          this._cleanInputSelection();\n        }\n\n        if (this._wasSearch()) {\n          this._clearFilter();\n        }\n\n        parent.tab && parent.tab.apply(this, arguments);\n      },\n      upArrow: function (e) {\n        if (parent.upArrow && parent.upArrow.apply(this, arguments)) {\n          if (!this.option(\"opened\")) {\n            this._setNextValue(e);\n          }\n\n          return true;\n        }\n      },\n      downArrow: function (e) {\n        if (parent.downArrow && parent.downArrow.apply(this, arguments)) {\n          if (!this.option(\"opened\")) {\n            this._setNextValue(e);\n          }\n\n          return true;\n        }\n      },\n      leftArrow: function () {\n        searchIfNeeded();\n        parent.leftArrow && parent.leftArrow.apply(this, arguments);\n      },\n      rightArrow: function () {\n        searchIfNeeded();\n        parent.rightArrow && parent.rightArrow.apply(this, arguments);\n      },\n      home: function () {\n        searchIfNeeded();\n        parent.home && parent.home.apply(this, arguments);\n      },\n      end: function () {\n        searchIfNeeded();\n        parent.end && parent.end.apply(this, arguments);\n      },\n      escape: function () {\n        var result = parent.escape && parent.escape.apply(this, arguments);\n\n        this._cancelEditing();\n\n        return isDefined(result) ? result : true;\n      },\n      enter: function (e) {\n        var isOpened = this.option(\"opened\");\n\n        var inputText = this._input().val().trim();\n\n        var isCustomText = inputText && this._list && !this._list.option(\"focusedElement\");\n\n        if (!inputText && this.option(\"value\") && this.option(\"allowClearing\")) {\n          this.option({\n            selectedItem: null,\n            value: null\n          });\n          this.close();\n        } else {\n          if (this.option(\"acceptCustomValue\")) {\n            e.preventDefault();\n\n            if (isCustomText) {\n              this._valueChangeEventHandler(e);\n\n              if (isOpened) {\n                this._toggleOpenState();\n              }\n            }\n\n            return isOpened;\n          }\n\n          if (parent.enter && parent.enter.apply(this, arguments)) {\n            return isOpened;\n          }\n        }\n      },\n      space: function (e) {\n        var isOpened = this.option(\"opened\");\n        var isSearchEnabled = this.option(\"searchEnabled\");\n        var acceptCustomValue = this.option(\"acceptCustomValue\");\n\n        if (!isOpened || isSearchEnabled || acceptCustomValue) {\n          return;\n        }\n\n        e.preventDefault();\n\n        this._valueChangeEventHandler(e);\n\n        return true;\n      },\n      backspace: clearSelectBox,\n      del: clearSelectBox\n    });\n  },\n  _getDefaultOptions: function () {\n    return extend(this.callBase(), {\n      placeholder: messageLocalization.format(\"Select\"),\n      fieldTemplate: null,\n      valueChangeEvent: \"change\",\n      acceptCustomValue: false,\n      onCustomItemCreating: function (e) {\n        if (!isDefined(e.customItem)) {\n          e.customItem = e.text;\n        }\n      },\n      showSelectionControls: false,\n      autocompletionEnabled: true,\n      allowClearing: true,\n      tooltipEnabled: false,\n      openOnFieldClick: true,\n      showDropDownButton: true,\n      displayCustomValue: false,\n      _isAdaptablePopupPosition: false,\n      useInkRipple: false,\n      useHiddenSubmitElement: true\n    });\n  },\n  _init: function () {\n    this.callBase();\n\n    this._initCustomItemCreatingAction();\n  },\n  _initMarkup: function () {\n    this.$element().addClass(SELECTBOX_CLASS);\n\n    this._renderTooltip();\n\n    this.option(\"useInkRipple\") && this._renderInkRipple();\n    this.callBase();\n\n    this._$container.addClass(SELECTBOX_CONTAINER_CLASS);\n  },\n  _renderInkRipple: function () {\n    this._inkRipple = inkRipple.render();\n  },\n  _toggleActiveState: function ($element, value, e) {\n    this.callBase.apply(this, arguments);\n\n    if (!this._inkRipple || this._isEditable()) {\n      return;\n    }\n\n    var config = {\n      element: this._inputWrapper(),\n      event: e\n    };\n\n    if (value) {\n      this._inkRipple.showWave(config);\n    } else {\n      this._inkRipple.hideWave(config);\n    }\n  },\n  _createPopup: function () {\n    this.callBase();\n\n    this._popup.$element().addClass(SELECTBOX_POPUP_CLASS);\n\n    this._popup.overlayContent().attr(\"tabindex\", -1);\n  },\n  _popupWrapperClass: function () {\n    return this.callBase() + \" \" + SELECTBOX_POPUP_WRAPPER_CLASS;\n  },\n  _cancelEditing: function () {\n    if (!this.option(\"searchEnabled\") && this._list) {\n      this._focusListElement(null);\n\n      this._updateField(this.option(\"selectedItem\"));\n    }\n  },\n  _renderOpenedState: function () {\n    this.callBase();\n\n    if (this.option(\"opened\")) {\n      this._scrollToSelectedItem();\n\n      this._focusSelectedElement();\n    }\n  },\n  _focusSelectedElement: function () {\n    var searchValue = this._searchValue();\n\n    if (!searchValue) {\n      this._focusListElement(null);\n\n      return;\n    }\n\n    var $listItems = this._list._itemElements();\n\n    var index = inArray(this.option(\"selectedItem\"), this.option(\"items\"));\n    var focusedElement = index >= 0 && !this._isCustomItemSelected() ? $listItems.eq(index) : null;\n\n    this._focusListElement(focusedElement);\n  },\n  _renderFocusedElement: function () {\n    if (!this._list) {\n      return;\n    }\n\n    var searchValue = this._searchValue();\n\n    if (!searchValue || this.option(\"acceptCustomValue\")) {\n      this._focusListElement(null);\n\n      return;\n    }\n\n    var $listItems = this._list._itemElements();\n\n    var focusedElement = $listItems.not(DISABLED_STATE_SELECTOR).eq(0);\n\n    this._focusListElement(focusedElement);\n  },\n  _focusListElement: function (element) {\n    this._preventInputValueRender = true;\n\n    this._list.option(\"focusedElement\", getPublicElement(element));\n\n    delete this._preventInputValueRender;\n  },\n  _scrollToSelectedItem: function () {\n    this._list && this._list.scrollToItem(this._list.option(\"selectedItem\"));\n  },\n  _listContentReadyHandler: function () {\n    this.callBase();\n\n    var isPaginate = this._dataSource && this._dataSource.paginate();\n\n    if (isPaginate && this._needPopupRepaint()) {\n      return;\n    }\n\n    this._scrollToSelectedItem();\n  },\n  _renderValue: function () {\n    this._renderInputValue();\n\n    this._setSubmitValue();\n\n    return new Deferred().resolve();\n  },\n  _renderInputValue: function () {\n    return this.callBase().always(function () {\n      this._renderInputValueAsync();\n    }.bind(this));\n  },\n  _renderInputValueAsync: function () {\n    this._renderTooltip();\n\n    this._renderInputValueImpl().always(function () {\n      this._refreshSelected();\n    }.bind(this));\n  },\n  _renderInputValueImpl: function () {\n    this._renderField();\n\n    return new Deferred().resolve();\n  },\n  _setNextItem: function (step) {\n    var item = this._calcNextItem(step);\n\n    var value = this._valueGetter(item);\n\n    this._setValue(value);\n  },\n  _setNextValue: function (e) {\n    var dataSourceIsLoaded = this._dataSource.isLoaded() ? new Deferred().resolve() : this._dataSource.load();\n    dataSourceIsLoaded.done(function () {\n      var selectedIndex = this._getSelectedIndex();\n\n      var hasPages = this._dataSource.pageSize();\n\n      var isLastPage = this._dataSource.isLastPage();\n\n      var isLastItem = selectedIndex === this._items().length - 1;\n\n      this._saveValueChangeEvent(e);\n\n      var step = \"ArrowDown\" === e.key ? 1 : -1;\n\n      if (hasPages && !isLastPage && isLastItem && step > 0) {\n        if (!this._popup) {\n          this._createPopup();\n        }\n\n        if (!this._dataSource.isLoading()) {\n          this._list._loadNextPage().done(this._setNextItem.bind(this, step));\n        }\n      } else {\n        this._setNextItem(step);\n      }\n    }.bind(this));\n  },\n  _setSelectedItem: function (item) {\n    var isUnknownItem = !this._isCustomValueAllowed() && void 0 === item;\n    this.callBase(isUnknownItem ? null : item);\n\n    if (!isUnknownItem && (!this._isEditable() || this._isCustomItemSelected())) {\n      this._setListOption(\"selectedItem\", this.option(\"selectedItem\"));\n    }\n  },\n  _isCustomValueAllowed: function () {\n    return this.option(\"acceptCustomValue\") || this.callBase();\n  },\n  _displayValue: function (item) {\n    item = !isDefined(item) && this._isCustomValueAllowed() ? this.option(\"value\") : item;\n    return this.callBase(item);\n  },\n  _listConfig: function () {\n    var result = extend(this.callBase(), {\n      pageLoadMode: \"scrollBottom\",\n      onSelectionChanged: this._getSelectionChangeHandler(),\n      selectedItem: this.option(\"selectedItem\"),\n      onFocusedItemChanged: this._listFocusedItemChangeHandler.bind(this)\n    });\n\n    if (this.option(\"showSelectionControls\")) {\n      extend(result, {\n        showSelectionControls: true,\n        selectionByClick: true\n      });\n    }\n\n    return result;\n  },\n  _listFocusedItemChangeHandler: function (e) {\n    if (this._preventInputValueRender) {\n      return;\n    }\n\n    var list = e.component;\n    var focusedElement = $(list.option(\"focusedElement\"));\n\n    var focusedItem = list._getItemData(focusedElement);\n\n    this._updateField(focusedItem);\n  },\n  _updateField: function (item) {\n    var fieldTemplate = this._getTemplateByOption(\"fieldTemplate\");\n\n    if (!(fieldTemplate && this.option(\"fieldTemplate\"))) {\n      this._renderDisplayText(this._displayGetter(item));\n\n      return;\n    }\n\n    this._renderField();\n  },\n  _getSelectionChangeHandler: function () {\n    return this.option(\"showSelectionControls\") ? this._selectionChangeHandler.bind(this) : commonUtils.noop;\n  },\n  _selectionChangeHandler: function (e) {\n    each(e.addedItems || [], function (_, addedItem) {\n      this._setValue(this._valueGetter(addedItem));\n    }.bind(this));\n  },\n  _getActualSearchValue: function () {\n    return this._dataSource.searchValue();\n  },\n  _toggleOpenState: function (isVisible) {\n    if (this.option(\"disabled\")) {\n      return;\n    }\n\n    isVisible = arguments.length ? isVisible : !this.option(\"opened\");\n\n    if (!isVisible) {\n      this._restoreInputText(true);\n    }\n\n    if (this._wasSearch() && isVisible) {\n      this._wasSearch(false);\n\n      var showDataImmediately = this.option(\"showDataBeforeSearch\") || 0 === this.option(\"minSearchLength\");\n\n      if (showDataImmediately && this._dataSource) {\n        if (this._searchTimer) {\n          return;\n        }\n\n        var searchValue = this._getActualSearchValue();\n\n        searchValue && this._wasSearch(true);\n\n        this._filterDataSource(searchValue || null);\n      } else {\n        this._setListOption(\"items\", []);\n      }\n    }\n\n    if (isVisible) {\n      this._scrollToSelectedItem();\n    }\n\n    this.callBase(isVisible);\n  },\n  _renderTooltip: function () {\n    if (this.option(\"tooltipEnabled\")) {\n      this.$element().attr(\"title\", this.option(\"displayValue\"));\n    }\n  },\n  _renderDimensions: function () {\n    this.callBase();\n\n    this._dimensionChanged();\n  },\n  _isValueEqualInputText: function () {\n    var initialSelectedItem = this.option(\"selectedItem\");\n\n    var value = this._displayGetter(initialSelectedItem);\n\n    var displayValue = value ? String(value) : \"\";\n\n    var inputText = this._searchValue();\n\n    return displayValue === inputText;\n  },\n  _popupHidingHandler: function () {\n    if (this._isValueEqualInputText()) {\n      this._cancelEditing();\n    }\n\n    this.callBase();\n  },\n  _restoreInputText: function (saveEditingValue) {\n    if (this.option(\"readOnly\")) {\n      return;\n    }\n\n    this._loadItemDeferred && this._loadItemDeferred.always(function () {\n      var initialSelectedItem = this.option(\"selectedItem\");\n\n      if (this.option(\"acceptCustomValue\")) {\n        if (!saveEditingValue) {\n          this._updateField(initialSelectedItem);\n\n          this._clearFilter();\n        }\n\n        return;\n      }\n\n      if (this.option(\"searchEnabled\")) {\n        if (!this._searchValue() && this.option(\"allowClearing\")) {\n          this._clearTextValue();\n\n          return;\n        }\n      }\n\n      if (this._isValueEqualInputText()) {\n        return;\n      }\n\n      this._renderInputValue().always(function (selectedItem) {\n        var newSelectedItem = commonUtils.ensureDefined(selectedItem, initialSelectedItem);\n\n        this._setSelectedItem(newSelectedItem);\n\n        this._updateField(newSelectedItem);\n\n        this._clearFilter();\n      }.bind(this));\n    }.bind(this));\n  },\n  _focusOutHandler: function (e) {\n    if (!this._preventNestedFocusEvent(e)) {\n      var isOverlayTarget = this._isOverlayNestedTarget(e.relatedTarget);\n\n      if (!isOverlayTarget) {\n        this._restoreInputText();\n\n        this._clearSearchTimer();\n      }\n\n      var shouldCancelSearch = this._wasSearch() && !this.option(\"acceptCustomValue\") && this.option(\"searchEnabled\") && this.option(\"opened\") && !isOverlayTarget;\n\n      if (shouldCancelSearch) {\n        this._searchCanceled();\n      }\n    }\n\n    this.callBase(e);\n  },\n  _isOverlayNestedTarget: function (target) {\n    return !!$(target).closest(\".\".concat(SELECTBOX_POPUP_WRAPPER_CLASS)).length;\n  },\n  _clearTextValue: function () {\n    if (this.option(\"selectedItem\")) {\n      this.option(\"value\", null);\n    }\n  },\n  _shouldOpenPopup: function () {\n    return this._needPassDataSourceToList();\n  },\n  _isFocused: function () {\n    var activeElement = domAdapter.getActiveElement();\n    return this.callBase() && $(activeElement).closest(this._input()).length > 0;\n  },\n  _renderValueChangeEvent: function () {\n    if (this._isEditable()) {\n      this.callBase();\n    }\n  },\n  _isEditable: function () {\n    return this.option(\"acceptCustomValue\") || this.option(\"searchEnabled\");\n  },\n  _fieldRenderData: function () {\n    var $listFocused = this._list && this.option(\"opened\") && $(this._list.option(\"focusedElement\"));\n\n    if ($listFocused && $listFocused.length) {\n      return this._list._getItemData($listFocused);\n    }\n\n    return this.option(\"selectedItem\");\n  },\n  _readOnlyPropValue: function () {\n    return !this._isEditable() || this.option(\"readOnly\");\n  },\n  _isSelectedValue: function (value) {\n    return this._isValueEquals(value, this.option(\"value\"));\n  },\n  _shouldCloseOnItemClick: function () {\n    return !(this.option(\"showSelectionControls\") && \"single\" !== this.option(\"selectionMode\"));\n  },\n  _listItemClickHandler: function (e) {\n    var previousValue = this._getCurrentValue();\n\n    this._focusListElement($(e.itemElement));\n\n    this._saveValueChangeEvent(e.event);\n\n    if (this._shouldClearFilter()) {\n      this._clearFilter();\n    }\n\n    this._completeSelection(this._valueGetter(e.itemData));\n\n    if (this._shouldCloseOnItemClick()) {\n      this.option(\"opened\", false);\n    }\n\n    if (this.option(\"searchEnabled\") && previousValue === this._valueGetter(e.itemData)) {\n      this._updateField(e.itemData);\n    }\n  },\n  _shouldClearFilter: function () {\n    return this._wasSearch();\n  },\n  _completeSelection: function (value) {\n    this._setValue(value);\n  },\n  _loadItem: function (value, cache) {\n    var that = this;\n    var deferred = new Deferred();\n    this.callBase(value, cache).done(function (item) {\n      deferred.resolve(item);\n    }.bind(this)).fail(function () {\n      var selectedItem = that.option(\"selectedItem\");\n\n      if (that.option(\"acceptCustomValue\") && value === that._valueGetter(selectedItem)) {\n        deferred.resolve(selectedItem);\n      } else {\n        deferred.reject();\n      }\n    }.bind(this));\n    return deferred.promise();\n  },\n  _loadInputValue: function (value, callback) {\n    this._loadItemDeferred = this._loadItem(value).always(callback);\n    return this._loadItemDeferred;\n  },\n  _isCustomItemSelected: function () {\n    var selectedItem = this.option(\"selectedItem\");\n\n    var searchValue = this._searchValue();\n\n    var selectedItemText = this._displayGetter(selectedItem);\n\n    return !selectedItemText || searchValue !== selectedItemText.toString();\n  },\n  _valueChangeEventHandler: function (e) {\n    if (this.option(\"acceptCustomValue\") && this._isCustomItemSelected() && !this._isValueChanging) {\n      this._isValueChanging = true;\n\n      this._customItemAddedHandler(e);\n\n      this._isValueChanging = false;\n    }\n  },\n  _initCustomItemCreatingAction: function () {\n    this._customItemCreatingAction = this._createActionByOption(\"onCustomItemCreating\");\n  },\n  _createCustomItem: function (text) {\n    var params = {\n      text: text\n    };\n\n    var actionResult = this._customItemCreatingAction(params);\n\n    var item = commonUtils.ensureDefined(actionResult, params.customItem);\n\n    if (isDefined(actionResult)) {\n      errors.log(\"W0015\", \"onCustomItemCreating\", \"customItem\");\n    }\n\n    return item;\n  },\n  _customItemAddedHandler: function (e) {\n    var searchValue = this._searchValue();\n\n    var item = this._createCustomItem(searchValue);\n\n    this._saveValueChangeEvent(e);\n\n    if (void 0 === item) {\n      this._renderValue();\n\n      throw errors.Error(\"E0121\");\n    }\n\n    if (isPromise(item)) {\n      deferredUtils.fromPromise(item).done(this._setCustomItem.bind(this)).fail(this._setCustomItem.bind(this, null));\n    } else {\n      this._setCustomItem(item);\n    }\n  },\n  _setCustomItem: function (item) {\n    if (this._disposed) {\n      return;\n    }\n\n    item = item || null;\n    this.option(\"selectedItem\", item);\n\n    if (this._shouldClearFilter()) {\n      this._filterDataSource(null);\n    }\n\n    this._setValue(this._valueGetter(item));\n\n    this._renderDisplayText(this._displayGetter(item));\n  },\n  _clearValueHandler: function (e) {\n    this.callBase(e);\n    return false;\n  },\n  _wasSearch: function (value) {\n    if (!arguments.length) {\n      return this._wasSearchValue;\n    }\n\n    this._wasSearchValue = value;\n  },\n  _searchHandler: function (e) {\n    if (this._preventFiltering) {\n      delete this._preventFiltering;\n      return;\n    }\n\n    if (this._needPassDataSourceToList()) {\n      this._wasSearch(true);\n    }\n\n    this.callBase(e);\n  },\n  _dataSourceFiltered: function (searchValue) {\n    this.callBase();\n\n    if (null !== searchValue) {\n      this._renderInputSubstitution();\n\n      this._renderFocusedElement();\n    }\n  },\n  _valueSubstituted: function () {\n    var input = this._input().get(0);\n\n    var isAllSelected = 0 === input.selectionStart && input.selectionEnd === this._searchValue().length;\n\n    var inputHasSelection = input.selectionStart !== input.selectionEnd;\n    return this._wasSearch() && inputHasSelection && !isAllSelected;\n  },\n  _shouldSubstitutionBeRendered: function () {\n    return this.option(\"autocompletionEnabled\") && !this._preventSubstitution && this.option(\"searchEnabled\") && !this.option(\"acceptCustomValue\") && \"startswith\" === this.option(\"searchMode\");\n  },\n  _renderInputSubstitution: function () {\n    if (!this._shouldSubstitutionBeRendered()) {\n      delete this._preventSubstitution;\n      return;\n    }\n\n    var item = this._list && this._getPlainItems(this._list.option(\"items\"))[0];\n\n    if (!item) {\n      return;\n    }\n\n    var $input = this._input();\n\n    var valueLength = $input.val().length;\n\n    if (0 === valueLength) {\n      return;\n    }\n\n    var inputElement = $input.get(0);\n\n    var displayValue = this._displayGetter(item).toString();\n\n    inputElement.value = displayValue;\n\n    this._caret({\n      start: valueLength,\n      end: displayValue.length\n    });\n  },\n  _cleanInputSelection: function () {\n    var inputElement = this._input().get(0);\n\n    var endPosition = inputElement.value.length;\n    inputElement.selectionStart = endPosition;\n    inputElement.selectionEnd = endPosition;\n  },\n  _dispose: function () {\n    this._renderInputValueAsync = commonUtils.noop;\n    delete this._loadItemDeferred;\n    this.callBase();\n  },\n  _optionChanged: function (args) {\n    switch (args.name) {\n      case \"_isAdaptablePopupPosition\":\n      case \"autocompletionEnabled\":\n        break;\n\n      case \"onCustomItemCreating\":\n        this._initCustomItemCreatingAction();\n\n        break;\n\n      case \"tooltipEnabled\":\n        this._renderTooltip();\n\n        break;\n\n      case \"displayCustomValue\":\n      case \"acceptCustomValue\":\n      case \"showSelectionControls\":\n      case \"useInkRipple\":\n        this._invalidate();\n\n        break;\n\n      case \"allowClearing\":\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _clean: function () {\n    delete this._inkRipple;\n    this.callBase();\n  }\n});\nregisterComponent(\"dxSelectBox\", SelectBox);\nmodule.exports = SelectBox;\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}