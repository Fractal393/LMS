{"ast":null,"code":"/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2019\n * @license LGPL-3.0\n */\nclass ExactTrie {\n  /**\n   * @param {object} [options]\n   * @param {boolean} [options.ignoreCase]\n   */\n  constructor(options = {}) {\n    this.trie = {};\n    this.ignoreCase = options.ignoreCase !== undefined ? !!options.ignoreCase : true;\n  }\n  /**\n   * @param {string} key\n   * @param {*} value\n   * @param {boolean} [reverse]\n   * @returns {ExactTrie}\n   */\n\n\n  put(key, value, reverse = false) {\n    if (this.ignoreCase) key = key.toLowerCase();\n    let curr = this.trie;\n\n    if (reverse) {\n      for (let i = key.length - 1; i >= 0; --i) {\n        const char = key.charAt(i);\n        if (!curr[char]) curr[char] = {};\n        curr = curr[char];\n      }\n    } else {\n      for (let i = 0; i < key.length; ++i) {\n        const char = key.charAt(i);\n        if (!curr[char]) curr[char] = {};\n        curr = curr[char];\n      }\n    }\n\n    curr['__'] = value;\n    return this;\n  }\n  /**\n   * @param {string[]} keys\n   * @param {*|*[]} values\n   * @param {boolean} [reverse]\n   * @returns {ExactTrie}\n   */\n\n\n  putAll(keys, values, reverse = false) {\n    const valuesIsArray = toString.call(values) === '[object Array]';\n\n    for (let i = 0; i < keys.length; ++i) {\n      this.put(keys[i], valuesIsArray ? values[i] : values, reverse);\n    }\n\n    return this;\n  }\n  /**\n   * @param {string} key\n   * @param {boolean} [reverse]\n   * @returns {*}\n   */\n\n\n  get(key, reverse = false) {\n    if (this.ignoreCase) key = key.toLowerCase();\n    let curr = this.trie;\n\n    if (reverse) {\n      for (let i = key.length - 1; i >= 0; --i) {\n        const char = key.charAt(i);\n        let next = curr[char];\n        if (!next) return;\n        curr = next;\n      }\n    } else {\n      for (let i = 0; i < key.length; i++) {\n        const char = key.charAt(i);\n        let next = curr[char];\n        if (!next) return;\n        curr = next;\n      }\n    }\n\n    return curr['__'];\n  }\n  /**\n   * @param {string[]} keys\n   * @param {boolean} [reverse]\n   * @returns {*[]}\n   */\n\n\n  getAll(keys, reverse = false) {\n    const values = new Array(keys.length);\n\n    for (let i = 0; i < keys.length; ++i) {\n      values[i] = this.get(keys[i], reverse);\n    }\n\n    return values;\n  }\n  /**\n   * @param {string} key\n   * @param {boolean} [reverse]\n   * @returns {boolean}\n   */\n\n\n  has(key, reverse = false) {\n    return this.get(key, reverse) !== undefined;\n  }\n  /**\n   * @param {string[]} keys\n   * @param {boolean} [reverse]\n   * @returns {boolean[]}\n   */\n\n\n  hasAll(keys, reverse = false) {\n    const values = new Array(keys.length);\n\n    for (let i = 0; i < keys.length; ++i) {\n      values[i] = this.has(keys[i], reverse);\n    }\n\n    return values;\n  }\n  /**\n   * @param {string} string\n   * @param {string|null} [checkpointChar]\n   * @param {boolean} [reverse]\n   * @returns {*}\n   */\n\n\n  getWithCheckpoints(string, checkpointChar = null, reverse = false) {\n    if (this.ignoreCase) string = string.toLowerCase();\n    let candidate = undefined;\n    let curr = this.trie;\n\n    if (reverse) {\n      for (let i = string.length - 1; i >= 0; --i) {\n        const char = string.charAt(i);\n        let next = curr[char];\n        if (!next) break;\n\n        if (checkpointChar === null || char === checkpointChar) {\n          const val = curr['__'];\n          if (val) candidate = val;\n        }\n\n        curr = next;\n      }\n    } else {\n      for (let i = 0; i < string.length; ++i) {\n        const char = string.charAt(i);\n        let next = curr[char];\n        if (!next) break;\n\n        if (char === checkpointChar) {\n          const val = curr['__'];\n          if (val) candidate = val;\n        }\n\n        curr = next;\n      }\n    }\n\n    const val = curr['__'];\n    if (val) candidate = val;\n    return candidate;\n  }\n  /**\n   * @param {string[]} keys\n   * @param {string|null} [checkpointChar]\n   * @param {boolean} [reverse]\n   * @returns {*[]}\n   */\n\n\n  getAllWithCheckpoints(keys, checkpointChar = null, reverse = false) {\n    const values = new Array(keys.length);\n\n    for (let i = 0; i < keys.length; ++i) {\n      values[i] = this.getWithCheckpoints(keys[i], checkpointChar, reverse);\n    }\n\n    return values;\n  }\n  /**\n   * @param {string} string\n   * @param {string|null} [checkpointChar]\n   * @param {boolean} [reverse]\n   * @returns {*}\n   */\n\n\n  hasWithCheckpoints(string, checkpointChar = null, reverse = false) {\n    return this.getWithCheckpoints(string, checkpointChar, reverse) !== undefined;\n  }\n  /**\n   * @param {string[]} keys\n   * @param {string|null} [checkpointChar]\n   * @param {boolean} [reverse]\n   * @returns {boolean[]}\n   */\n\n\n  hasAllWithCheckpoints(keys, checkpointChar = null, reverse = false) {\n    const values = new Array(keys.length);\n\n    for (let i = 0; i < keys.length; ++i) {\n      values[i] = this.hasWithCheckpoints(keys[i], checkpointChar, reverse);\n    }\n\n    return values;\n  }\n\n}\n\nmodule.exports = ExactTrie;","map":null,"metadata":{},"sourceType":"script"}