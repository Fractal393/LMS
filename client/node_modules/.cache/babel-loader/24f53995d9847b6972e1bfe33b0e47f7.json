{"ast":null,"code":"/**\r\n * DevExtreme (ui/splitter.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _renderer = require(\"../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _ui = require(\"./widget/ui.widget\");\n\nvar _ui2 = _interopRequireDefault(_ui);\n\nvar _dom_adapter = require(\"../core/dom_adapter\");\n\nvar _dom_adapter2 = _interopRequireDefault(_dom_adapter);\n\nvar _events_engine = require(\"../events/core/events_engine\");\n\nvar _events_engine2 = _interopRequireDefault(_events_engine);\n\nvar _pointer = require(\"../events/pointer\");\n\nvar _pointer2 = _interopRequireDefault(_pointer);\n\nvar _utils = require(\"../events/utils\");\n\nvar _type = require(\"../core/utils/type\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nfunction _get(target, property, receiver) {\n  if (\"undefined\" !== typeof Reflect && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function (target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) {\n        return;\n      }\n\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n\n    if (null === object) {\n      break;\n    }\n  }\n\n  return object;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (\"function\" !== typeof superClass && null !== superClass) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (superClass) {\n    _setPrototypeOf(subClass, superClass);\n  }\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function (o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var result,\n        Super = _getPrototypeOf(Derived);\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (\"object\" === _typeof(call) || \"function\" === typeof call)) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (void 0 === self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (\"undefined\" === typeof Reflect || !Reflect.construct) {\n    return false;\n  }\n\n  if (Reflect.construct.sham) {\n    return false;\n  }\n\n  if (\"function\" === typeof Proxy) {\n    return true;\n  }\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function (o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar SPLITTER_CLASS = \"dx-splitter\";\nvar SPLITTER_WRAPPER_CLASS = \"\".concat(SPLITTER_CLASS, \"-wrapper\");\nvar SPLITTER_INACTIVE_CLASS = \"\".concat(SPLITTER_CLASS, \"-inactive\");\nvar SPLITTER_BORDER_CLASS = \"\".concat(SPLITTER_CLASS, \"-border\");\nvar SPLITTER_INITIAL_STATE_CLASS = \"\".concat(SPLITTER_CLASS, \"-initial\");\nvar STATE_DISABLED_CLASS = \"dx-state-disabled\";\nvar SPLITTER_MODULE_NAMESPACE = \"dxSplitterResizing\";\nvar SPLITTER_POINTER_DOWN_EVENT_NAME = (0, _utils.addNamespace)(_pointer2.default.down, SPLITTER_MODULE_NAMESPACE);\nvar SPLITTER_POINTER_MOVE_EVENT_NAME = (0, _utils.addNamespace)(_pointer2.default.move, SPLITTER_MODULE_NAMESPACE);\nvar SPLITTER_POINTER_UP_EVENT_NAME = (0, _utils.addNamespace)(_pointer2.default.up, SPLITTER_MODULE_NAMESPACE);\n\nvar SplitterControl = function (_Widget) {\n  _inherits(SplitterControl, _Widget);\n\n  var _super = _createSuper(SplitterControl);\n\n  function SplitterControl() {\n    _classCallCheck(this, SplitterControl);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SplitterControl, [{\n    key: \"_initMarkup\",\n    value: function () {\n      this._$container = this.option(\"container\");\n      this._$leftElement = this.option(\"leftElement\");\n      this._$rightElement = this.option(\"rightElement\");\n      this._onApplyPanelSize = this._createActionByOption(\"onApplyPanelSize\");\n      this.$element().addClass(SPLITTER_WRAPPER_CLASS).addClass(SPLITTER_INITIAL_STATE_CLASS);\n      this._$splitterBorder = (0, _renderer2.default)(\"<div>\").addClass(SPLITTER_BORDER_CLASS).appendTo(this.$element());\n      this._$splitter = (0, _renderer2.default)(\"<div>\").addClass(SPLITTER_CLASS).addClass(SPLITTER_INACTIVE_CLASS).appendTo(this._$splitterBorder);\n    }\n  }, {\n    key: \"_render\",\n    value: function () {\n      _get(_getPrototypeOf(SplitterControl.prototype), \"_render\", this).call(this);\n\n      this._detachEventHandlers();\n\n      this._attachEventHandlers();\n    }\n  }, {\n    key: \"_clean\",\n    value: function () {\n      this._detachEventHandlers();\n\n      _get(_getPrototypeOf(SplitterControl.prototype), \"_clean\", this).call(this);\n    }\n  }, {\n    key: \"_attachEventHandlers\",\n    value: function () {\n      var document = _dom_adapter2.default.getDocument();\n\n      _events_engine2.default.on(this._$splitterBorder, SPLITTER_POINTER_DOWN_EVENT_NAME, this._onMouseDownHandler.bind(this));\n\n      _events_engine2.default.on(document, SPLITTER_POINTER_MOVE_EVENT_NAME, this._onMouseMoveHandler.bind(this));\n\n      _events_engine2.default.on(document, SPLITTER_POINTER_UP_EVENT_NAME, this._onMouseUpHandler.bind(this));\n    }\n  }, {\n    key: \"_detachEventHandlers\",\n    value: function () {\n      var document = _dom_adapter2.default.getDocument();\n\n      _events_engine2.default.off(this._$splitterBorder, SPLITTER_POINTER_DOWN_EVENT_NAME);\n\n      _events_engine2.default.off(document, SPLITTER_POINTER_MOVE_EVENT_NAME);\n\n      _events_engine2.default.off(document, SPLITTER_POINTER_UP_EVENT_NAME);\n    }\n  }, {\n    key: \"_dimensionChanged\",\n    value: function () {\n      if (void 0 === this._leftPanelPercentageWidth) {\n        var leftElementWidth = this._$leftElement.get(0).clientWidth + this.getSplitterOffset();\n        this._leftPanelPercentageWidth = this._convertLeftPanelWidthToPercentage(leftElementWidth);\n      }\n\n      var rightPanelWidth = 100 - this._leftPanelPercentageWidth;\n\n      this._onApplyPanelSize({\n        leftPanelWidth: this._leftPanelPercentageWidth + \"%\",\n        rightPanelWidth: rightPanelWidth + \"%\"\n      });\n\n      this.setSplitterPositionLeft(this._$leftElement.get(0).clientWidth - this.getSplitterOffset());\n    }\n  }, {\n    key: \"_onMouseDownHandler\",\n    value: function (e) {\n      e.preventDefault();\n      this._offsetX = e.pageX - this._$splitterBorder.offset().left <= this._getSplitterBorderWidth() ? e.pageX - this._$splitterBorder.offset().left : 0;\n      this._isSplitterActive = true;\n      this._containerWidth = this._$container.get(0).clientWidth;\n      this.$element().removeClass(SPLITTER_INITIAL_STATE_CLASS);\n\n      this._$splitter.removeClass(SPLITTER_INACTIVE_CLASS);\n\n      this.setSplitterPositionLeft(null, true);\n    }\n  }, {\n    key: \"_onMouseMoveHandler\",\n    value: function (e) {\n      if (!this._isSplitterActive) {\n        return;\n      }\n\n      this.setSplitterPositionLeft(this._getNewSplitterPositionLeft(e), true);\n    }\n  }, {\n    key: \"_onMouseUpHandler\",\n    value: function () {\n      if (this._isSplitterActive) {\n        this._$splitter.addClass(SPLITTER_INACTIVE_CLASS);\n\n        this._isSplitterActive = false;\n      }\n    }\n  }, {\n    key: \"_getNewSplitterPositionLeft\",\n    value: function (e) {\n      var newSplitterPositionLeft = e.pageX - this._$container.offset().left - this._offsetX;\n\n      newSplitterPositionLeft = Math.max(0 - this.getSplitterOffset(), newSplitterPositionLeft);\n      newSplitterPositionLeft = Math.min(this._containerWidth - this.getSplitterOffset() - this._getSplitterWidth(), newSplitterPositionLeft);\n      return newSplitterPositionLeft;\n    }\n  }, {\n    key: \"_isDomElement\",\n    value: function (element) {\n      return element && element.nodeType && 1 === element.nodeType;\n    }\n  }, {\n    key: \"_isPercentValue\",\n    value: function (value) {\n      return (0, _type.isString)(value) && \"%\" === value.slice(-1);\n    }\n  }, {\n    key: \"getSplitterOffset\",\n    value: function () {\n      return (this._getSplitterBorderWidth() - this._getSplitterWidth()) / 2;\n    }\n  }, {\n    key: \"_getSplitterWidth\",\n    value: function () {\n      return this._$splitter.get(0).clientWidth;\n    }\n  }, {\n    key: \"_getSplitterBorderWidth\",\n    value: function () {\n      return this._$splitterBorder.get(0).clientWidth;\n    }\n  }, {\n    key: \"toggleState\",\n    value: function (isActive) {\n      var classAction = isActive ? \"removeClass\" : \"addClass\";\n      this.$element()[classAction](STATE_DISABLED_CLASS);\n\n      this._$splitter[classAction](STATE_DISABLED_CLASS);\n    }\n  }, {\n    key: \"isSplitterMoved\",\n    value: function () {\n      return !this.$element().hasClass(SPLITTER_INITIAL_STATE_CLASS);\n    }\n  }, {\n    key: \"setSplitterPositionLeft\",\n    value: function (splitterPositionLeft, needUpdatePanels) {\n      splitterPositionLeft = splitterPositionLeft || this._$leftElement.get(0).clientWidth - this.getSplitterOffset();\n      this.$element().css(\"left\", splitterPositionLeft);\n\n      if (!needUpdatePanels) {\n        return;\n      }\n\n      var leftPanelWidth = splitterPositionLeft + this.getSplitterOffset();\n      var rightPanelWidth = this._containerWidth - leftPanelWidth;\n\n      this._onApplyPanelSize({\n        leftPanelWidth: leftPanelWidth,\n        rightPanelWidth: rightPanelWidth\n      });\n\n      this._leftPanelPercentageWidth = this._convertLeftPanelWidthToPercentage(leftPanelWidth);\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function (args) {\n      switch (args.name) {\n        case \"initialLeftPanelWidth\":\n          this._leftPanelPercentageWidth = this._convertLeftPanelWidthToPercentage(args.value);\n\n          this._dimensionChanged();\n\n          break;\n\n        case \"leftElement\":\n          this.repaint();\n          break;\n\n        default:\n          _get(_getPrototypeOf(SplitterControl.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }, {\n    key: \"_convertLeftPanelWidthToPercentage\",\n    value: function (leftPanelWidth) {\n      return leftPanelWidth / this._$container.get(0).clientWidth * 100;\n    }\n  }]);\n\n  return SplitterControl;\n}(_ui2.default);\n\nexports.default = SplitterControl;","map":null,"metadata":{},"sourceType":"script"}