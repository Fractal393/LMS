{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { PdfColor } from './../pdf-color';\nimport { PdfColorSpace } from './../enum';\nimport { PdfBrush } from './pdf-brush';\n/**\n * Represents a brush that fills any object with a solid color.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a pages to the document\n * let page1 : PdfPage = document.pages.add();\n * // set font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * // set brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n * // draw the text\n * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10));\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\n\nvar PdfSolidBrush =\n/** @class */\nfunction (_super) {\n  __extends(PdfSolidBrush, _super); //Constructors\n\n  /**\n   * Initializes a new instance of the `PdfSolidBrush` class.\n   * ```typescript\n   * // create a new PDF document\n   * let document : PdfDocument = new PdfDocument();\n   * // add a pages to the document\n   * let page1 : PdfPage = document.pages.add();\n   * // set font\n   * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n   * // set brush\n   * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n   * // draw the text\n   * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10));\n   * // save the document\n   * document.save('output.pdf');\n   * // destroy the document\n   * document.destroy();\n   * ```\n   * @param color color of the brush\n   */\n\n\n  function PdfSolidBrush(color) {\n    var _this = _super.call(this) || this;\n\n    _this.pdfColor = color;\n    return _this;\n  }\n\n  Object.defineProperty(PdfSolidBrush.prototype, \"color\", {\n    //Properties\n\n    /**\n     * Gets or sets the `color` of the brush.\n     * @private\n     */\n    get: function () {\n      return this.pdfColor;\n    },\n    set: function (value) {\n      this.pdfColor = value;\n    },\n    enumerable: true,\n    configurable: true\n  }); //Implementation\n\n  /**\n   * `Monitors` the changes of the brush and modify PDF state respectively.\n   * @private\n   */\n\n  PdfSolidBrush.prototype.monitorChanges = function (brush, streamWriter, getResources, saveChanges, currentColorSpace) {\n    if (streamWriter == null) {\n      throw new Error('ArgumentNullException:streamWriter');\n    }\n\n    var diff = false;\n\n    if (brush == null) {\n      diff = true;\n      streamWriter.setColorAndSpace(this.pdfColor, currentColorSpace, false);\n      return diff;\n    } else {\n      var sBrush = brush;\n      diff = true;\n      streamWriter.setColorAndSpace(this.pdfColor, currentColorSpace, false);\n      return diff;\n    }\n  };\n  /**\n   * `Resets` the changes, which were made by the brush.\n   * @private\n   */\n\n\n  PdfSolidBrush.prototype.resetChanges = function (streamWriter) {\n    streamWriter.setColorAndSpace(new PdfColor(0, 0, 0), PdfColorSpace.Rgb, false);\n  };\n\n  return PdfSolidBrush;\n}(PdfBrush);\n\nexport { PdfSolidBrush };","map":null,"metadata":{},"sourceType":"module"}