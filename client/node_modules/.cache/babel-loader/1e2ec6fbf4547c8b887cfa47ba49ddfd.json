{"ast":null,"code":"/* eslint max-statements: 0 */\n// Support for functions returning promise\n\"use strict\";\n\nvar objectMap = require(\"es5-ext/object/map\"),\n    primitiveSet = require(\"es5-ext/object/primitive-set\"),\n    ensureString = require(\"es5-ext/object/validate-stringifiable-value\"),\n    toShortString = require(\"es5-ext/to-short-string-representation\"),\n    isPromise = require(\"is-promise\"),\n    nextTick = require(\"next-tick\");\n\nvar create = Object.create,\n    supportedModes = primitiveSet(\"then\", \"then:finally\", \"done\", \"done:finally\");\n\nrequire(\"../lib/registered-extensions\").promise = function (mode, conf) {\n  var waiting = create(null),\n      cache = create(null),\n      promises = create(null);\n\n  if (mode === true) {\n    mode = null;\n  } else {\n    mode = ensureString(mode);\n\n    if (!supportedModes[mode]) {\n      throw new TypeError(\"'\" + toShortString(mode) + \"' is not valid promise mode\");\n    }\n  } // After not from cache call\n\n\n  conf.on(\"set\", function (id, ignore, promise) {\n    var isFailed = false;\n\n    if (!isPromise(promise)) {\n      // Non promise result\n      cache[id] = promise;\n      conf.emit(\"setasync\", id, 1);\n      return;\n    }\n\n    waiting[id] = 1;\n    promises[id] = promise;\n\n    var onSuccess = function (result) {\n      var count = waiting[id];\n\n      if (isFailed) {\n        throw new Error(\"Memoizee error: Detected unordered then|done & finally resolution, which \" + \"in turn makes proper detection of success/failure impossible (when in \" + \"'done:finally' mode)\\n\" + \"Consider to rely on 'then' or 'done' mode instead.\");\n      }\n\n      if (!count) return; // Deleted from cache before resolved\n\n      delete waiting[id];\n      cache[id] = result;\n      conf.emit(\"setasync\", id, count);\n    };\n\n    var onFailure = function () {\n      isFailed = true;\n      if (!waiting[id]) return; // Deleted from cache (or succeed in case of finally)\n\n      delete waiting[id];\n      delete promises[id];\n      conf.delete(id);\n    };\n\n    var resolvedMode = mode;\n    if (!resolvedMode) resolvedMode = \"then\";\n\n    if (resolvedMode === \"then\") {\n      var nextTickFailure = function () {\n        nextTick(onFailure);\n      }; // Eventual finally needs to be attached to non rejected promise\n      // (so we not force propagation of unhandled rejection)\n\n\n      promise = promise.then(function (result) {\n        nextTick(onSuccess.bind(this, result));\n      }, nextTickFailure); // If `finally` is a function we attach to it to remove cancelled promises.\n\n      if (typeof promise.finally === \"function\") {\n        promise.finally(nextTickFailure);\n      }\n    } else if (resolvedMode === \"done\") {\n      // Not recommended, as it may mute any eventual \"Unhandled error\" events\n      if (typeof promise.done !== \"function\") {\n        throw new Error(\"Memoizee error: Retrieved promise does not implement 'done' \" + \"in 'done' mode\");\n      }\n\n      promise.done(onSuccess, onFailure);\n    } else if (resolvedMode === \"done:finally\") {\n      // The only mode with no side effects assuming library does not throw unconditionally\n      // for rejected promises.\n      if (typeof promise.done !== \"function\") {\n        throw new Error(\"Memoizee error: Retrieved promise does not implement 'done' \" + \"in 'done:finally' mode\");\n      }\n\n      if (typeof promise.finally !== \"function\") {\n        throw new Error(\"Memoizee error: Retrieved promise does not implement 'finally' \" + \"in 'done:finally' mode\");\n      }\n\n      promise.done(onSuccess);\n      promise.finally(onFailure);\n    }\n  }); // From cache (sync)\n\n  conf.on(\"get\", function (id, args, context) {\n    var promise;\n\n    if (waiting[id]) {\n      ++waiting[id]; // Still waiting\n\n      return;\n    }\n\n    promise = promises[id];\n\n    var emit = function () {\n      conf.emit(\"getasync\", id, args, context);\n    };\n\n    if (isPromise(promise)) {\n      if (typeof promise.done === \"function\") promise.done(emit);else {\n        promise.then(function () {\n          nextTick(emit);\n        });\n      }\n    } else {\n      emit();\n    }\n  }); // On delete\n\n  conf.on(\"delete\", function (id) {\n    delete promises[id];\n\n    if (waiting[id]) {\n      delete waiting[id];\n      return; // Not yet resolved\n    }\n\n    if (!hasOwnProperty.call(cache, id)) return;\n    var result = cache[id];\n    delete cache[id];\n    conf.emit(\"deleteasync\", id, [result]);\n  }); // On clear\n\n  conf.on(\"clear\", function () {\n    var oldCache = cache;\n    cache = create(null);\n    waiting = create(null);\n    promises = create(null);\n    conf.emit(\"clearasync\", objectMap(oldCache, function (data) {\n      return [data];\n    }));\n  });\n};","map":null,"metadata":{},"sourceType":"script"}