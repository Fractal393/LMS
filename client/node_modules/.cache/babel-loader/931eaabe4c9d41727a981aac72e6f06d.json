{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { NormalEdit } from './normal-edit';\n/**\n * `DialogEdit` module is used to handle dialog editing actions.\n * @hidden\n */\n\nvar DialogEdit =\n/** @class */\nfunction (_super) {\n  __extends(DialogEdit, _super);\n\n  function DialogEdit(parent, serviceLocator, renderer) {\n    var _this = //constructor\n    _super.call(this, parent, serviceLocator) || this;\n\n    _this.parent = parent;\n    _this.serviceLocator = serviceLocator;\n    _this.renderer = renderer;\n    return _this;\n  }\n\n  DialogEdit.prototype.closeEdit = function () {\n    //closeEdit\n    _super.prototype.closeEdit.call(this);\n  };\n\n  DialogEdit.prototype.addRecord = function (data, index) {\n    //addRecord\n    _super.prototype.addRecord.call(this, data, index);\n  };\n\n  DialogEdit.prototype.endEdit = function () {\n    //endEdit\n    _super.prototype.endEdit.call(this);\n  };\n\n  DialogEdit.prototype.updateRow = function (index, data) {\n    _super.prototype.updateRow.call(this, index, data);\n  };\n\n  DialogEdit.prototype.deleteRecord = function (fieldname, data) {\n    //deleteRecord\n    _super.prototype.deleteRecord.call(this, fieldname, data);\n  };\n\n  DialogEdit.prototype.startEdit = function (tr) {\n    _super.prototype.startEdit.call(this, tr);\n  };\n\n  return DialogEdit;\n}(NormalEdit);\n\nexport { DialogEdit };","map":null,"metadata":{},"sourceType":"module"}