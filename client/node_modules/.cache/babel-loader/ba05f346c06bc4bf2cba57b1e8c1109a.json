{"ast":null,"code":"import { isBlazor, removeClass, addClass } from '@syncfusion/ej2-base';\nimport { closest, classList, updateBlazorTemplate } from '@syncfusion/ej2-base';\nimport { Grid } from '../base/grid';\nimport { parents, getUid, appendChildren } from '../base/util';\nimport * as events from '../base/constant';\nimport { AriaService } from '../services/aria-service';\nimport { Row } from '../models/row';\nimport { Cell } from '../models/cell';\nimport { CellType } from '../base/enum';\n/**\n * The `DetailRow` module is used to handle detail template and hierarchy Grid operations.\n */\n\nvar DetailRow =\n/** @class */\nfunction () {\n  /**\n   * Constructor for the Grid detail template module\n   * @hidden\n   */\n  function DetailRow(parent, locator) {\n    //Internal variables\n    this.aria = new AriaService();\n    this.parent = parent;\n\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.focus = locator.getService('focus');\n    this.parent.on(events.click, this.clickHandler, this);\n    this.parent.on(events.destroy, this.destroy, this);\n    this.parent.on(events.keyPressed, this.keyPressHandler, this);\n    this.parent.on(events.expandChildGrid, this.expand, this);\n    this.parent.on(events.columnVisibilityChanged, this.refreshColSpan, this);\n  }\n\n  DetailRow.prototype.clickHandler = function (e) {\n    this.toogleExpandcollapse(closest(e.target, 'td'));\n  }; // tslint:disable-next-line:max-func-body-length\n\n\n  DetailRow.prototype.toogleExpandcollapse = function (target) {\n    var gObj = this.parent;\n    var table = this.parent.getContentTable();\n    var lastrowIdx = this.parent.getCurrentViewRecords().length - 1;\n    var parent = 'parentDetails';\n    var isServerRendered = 'isServerRendered';\n    var childGrid;\n    var isExpanded = target && target.classList.contains('e-detailrowcollapse');\n\n    if (!(target && (target.classList.contains('e-detailrowcollapse') || target.classList.contains('e-detailrowexpand')))) {\n      return;\n    }\n\n    if (isBlazor() && this.parent[isServerRendered]) {\n      this.parent.notify('detailclick', target);\n      return;\n    }\n\n    var tr = target.parentElement;\n    var uid = tr.getAttribute('data-uid');\n    var rowObj = gObj.getRowObjectFromUID(uid);\n    var nextRow = this.parent.getContentTable().querySelector('tbody').children[tr.rowIndex + 1];\n\n    if (target.classList.contains('e-detailrowcollapse')) {\n      var data = rowObj.data;\n\n      if (this.isDetailRow(nextRow)) {\n        nextRow.style.display = '';\n        gObj.notify(events.detailStateChange, {\n          data: data,\n          childGrid: gObj.childGrid,\n          detailElement: target,\n          isExpanded: isExpanded\n        });\n      } else if (gObj.getDetailTemplate() || gObj.childGrid) {\n        var rowId = getUid('grid-row');\n        var detailRow = this.parent.createElement('tr', {\n          className: 'e-detailrow',\n          attrs: {\n            'data-uid': rowId\n          }\n        });\n        var detailCell = this.parent.createElement('td', {\n          className: 'e-detailcell'\n        });\n        var colSpan = this.parent.getVisibleColumns().length;\n\n        if (this.parent.allowRowDragAndDrop) {\n          colSpan++;\n        }\n\n        detailCell.setAttribute('colspan', colSpan.toString());\n        var row = new Row({\n          isDataRow: true,\n          isExpand: true,\n          uid: rowId,\n          isDetailRow: true,\n          cells: [new Cell({\n            cellType: CellType.Indent\n          }), new Cell({\n            isDataCell: true,\n            visible: true\n          })]\n        });\n\n        for (var i = 0, len = gObj.groupSettings.columns.length; i < len; i++) {\n          detailRow.appendChild(this.parent.createElement('td', {\n            className: 'e-indentcell'\n          }));\n          row.cells.unshift(new Cell({\n            cellType: CellType.Indent\n          }));\n        }\n\n        detailRow.appendChild(this.parent.createElement('td', {\n          className: 'e-detailindentcell'\n        }));\n        detailRow.appendChild(detailCell);\n        tr.parentNode.insertBefore(detailRow, tr.nextSibling);\n\n        if (gObj.detailTemplate) {\n          var detailTemplateID = gObj.element.id + 'detailTemplate';\n          appendChildren(detailCell, gObj.getDetailTemplate()(data, gObj, 'detailTemplate', detailTemplateID));\n\n          if (isBlazor()) {\n            updateBlazorTemplate(detailTemplateID, 'DetailTemplate', gObj, false);\n          }\n        } else {\n          childGrid = new Grid(this.getGridModel(gObj, rowObj, gObj.printMode));\n\n          if (childGrid.query) {\n            childGrid.query = childGrid.query.clone();\n          }\n\n          childGrid[parent] = {\n            parentID: gObj.element.id,\n            parentPrimaryKeys: gObj.getPrimaryKeyFieldNames(),\n            parentKeyField: gObj.childGrid.queryString,\n            parentKeyFieldValue: data[gObj.childGrid.queryString],\n            parentRowData: data\n          };\n\n          if (gObj.isPrinting) {\n            childGrid.isPrinting = true;\n            childGrid.on(events.contentReady, this.promiseResolve(childGrid), this);\n            childGrid.on(events.onEmpty, this.promiseResolve(childGrid), this);\n          }\n\n          rowObj.childGrid = childGrid;\n          var modules = childGrid.getInjectedModules();\n          var injectedModues = gObj.getInjectedModules();\n\n          if (!modules || modules.length !== injectedModues.length) {\n            childGrid.setInjectedModules(injectedModues);\n          }\n\n          var gridElem = this.parent.createElement('div', {\n            id: 'child' + parents(tr, 'e-grid').length + '_grid' + tr.rowIndex + getUid('')\n          });\n          detailCell.appendChild(gridElem);\n          childGrid.appendTo(gridElem);\n        }\n\n        detailRow.appendChild(detailCell);\n\n        if (tr.nextSibling) {\n          tr.parentNode.insertBefore(detailRow, tr.nextSibling);\n        } else {\n          tr.parentNode.appendChild(detailRow);\n        }\n\n        gObj.getRows().splice(tr.rowIndex + 1, 0, detailRow);\n        gObj.getRowsObject().splice(rowObj.index + 1, 0, row);\n        gObj.trigger(events.detailDataBound, {\n          detailElement: detailCell,\n          data: data,\n          childGrid: childGrid\n        });\n        gObj.notify(events.detailDataBound, {\n          rows: gObj.getRowsObject()\n        });\n      }\n\n      classList(target, ['e-detailrowexpand'], ['e-detailrowcollapse']);\n      classList(target.firstElementChild, ['e-dtdiagonaldown', 'e-icon-gdownarrow'], ['e-dtdiagonalright', 'e-icon-grightarrow']);\n      rowObj.isExpand = true;\n\n      if (target.classList.contains('e-lastrowcell') && this.parent.getContent().clientHeight > table.scrollHeight) {\n        removeClass(target.parentElement.querySelectorAll('td'), 'e-lastrowcell');\n        var detailrowIdx = table.querySelector('tbody').querySelectorAll('.e-detailrow').length - 1;\n        addClass(table.querySelector('tbody').querySelectorAll('.e-detailrow')[detailrowIdx].childNodes, ['e-lastrowcell']);\n        this.lastrowcell = true;\n      }\n\n      this.aria.setExpand(target, true);\n    } else {\n      if (this.isDetailRow(nextRow)) {\n        nextRow.style.display = 'none';\n        gObj.notify(events.detailStateChange, {\n          data: rowObj.data,\n          childGrid: gObj.childGrid,\n          detailElement: target,\n          isExpanded: isExpanded\n        });\n      }\n\n      classList(target, ['e-detailrowcollapse'], ['e-detailrowexpand']);\n      classList(target.firstElementChild, ['e-dtdiagonalright', 'e-icon-grightarrow'], ['e-dtdiagonaldown', 'e-icon-gdownarrow']);\n\n      if (parseInt(tr.getAttribute('aria-rowindex'), 10) === lastrowIdx && this.lastrowcell) {\n        addClass(target.parentElement.querySelectorAll('td'), 'e-lastrowcell');\n        this.lastrowcell = false;\n      }\n\n      rowObj.isExpand = false;\n      this.aria.setExpand(target, false);\n    }\n  };\n  /**\n   * @hidden\n   * @param gObj\n   * @param rowObj\n   */\n\n\n  DetailRow.prototype.getGridModel = function (gObj, rowObj, printMode) {\n    var gridModel;\n\n    if (gObj.isPrinting && rowObj.isExpand && gObj.expandedRows && gObj.expandedRows[rowObj.index] && gObj.expandedRows[rowObj.index].gridModel) {\n      gObj.expandedRows[rowObj.index].gridModel.hierarchyPrintMode = gObj.childGrid.hierarchyPrintMode;\n      gridModel = gObj.expandedRows[rowObj.index].gridModel;\n    } else {\n      if (gObj.isPrinting && gObj.childGrid.allowPaging) {\n        gObj.childGrid.allowPaging = printMode === 'CurrentPage';\n        gridModel = gObj.childGrid;\n      } else {\n        gridModel = gObj.childGrid;\n      }\n    }\n\n    return gridModel;\n  };\n\n  DetailRow.prototype.promiseResolve = function (grid) {\n    var _this = this;\n\n    return function () {\n      grid.off(events.contentReady, _this.promiseResolve);\n      grid.off(events.onEmpty, _this.promiseResolve);\n      grid.notify(events.hierarchyPrint, {});\n    };\n  };\n\n  DetailRow.prototype.isDetailRow = function (row) {\n    return row && row.classList.contains('e-detailrow');\n  };\n\n  DetailRow.prototype.destroy = function () {\n    var gridElement = this.parent.element;\n\n    if (this.parent.isDestroyed || !gridElement || !gridElement.querySelector('.e-gridheader') && !gridElement.querySelector('.e-gridcontent')) {\n      return;\n    }\n\n    this.parent.off(events.click, this.clickHandler);\n    this.parent.off(events.destroy, this.destroy);\n    this.parent.off(events.keyPressed, this.keyPressHandler);\n    this.parent.off(events.expandChildGrid, this.expand);\n    this.parent.off(events.columnVisibilityChanged, this.refreshColSpan);\n  };\n\n  DetailRow.prototype.getTDfromIndex = function (index, className) {\n    var tr = this.parent.getDataRows()[index];\n\n    if (tr && tr.querySelector(className)) {\n      return tr.querySelector(className);\n    }\n\n    return null;\n  };\n  /**\n   * Expands a detail row with the given target.\n   * @param  {Element} target - Defines the collapsed element to expand.\n   * @return {void}\n   */\n\n\n  DetailRow.prototype.expand = function (target) {\n    if (!isNaN(target)) {\n      target = this.getTDfromIndex(target, '.e-detailrowcollapse');\n    }\n\n    if (target && target.classList.contains('e-detailrowcollapse')) {\n      this.toogleExpandcollapse(target);\n    }\n  };\n  /**\n   * Collapses a detail row with the given target.\n   * @param  {Element} target - Defines the expanded element to collapse.\n   * @return {void}\n   */\n\n\n  DetailRow.prototype.collapse = function (target) {\n    if (!isNaN(target)) {\n      target = this.getTDfromIndex(target, '.e-detailrowexpand');\n    }\n\n    if (target && target.classList.contains('e-detailrowexpand')) {\n      this.toogleExpandcollapse(target);\n    }\n  };\n  /**\n   * Expands all the detail rows of the Grid.\n   * @return {void}\n   */\n\n\n  DetailRow.prototype.expandAll = function () {\n    this.expandCollapse(true);\n    this.parent.trigger(events.actionComplete, {\n      requestType: 'expandAllComplete',\n      type: events.actionComplete,\n      moduleObj: this\n    });\n  };\n  /**\n   * Collapses all the detail rows of the Grid.\n   * @return {void}\n   */\n\n\n  DetailRow.prototype.collapseAll = function () {\n    this.expandCollapse(false);\n    this.parent.trigger(events.actionComplete, {\n      requestType: 'collapseAllComplete',\n      type: events.actionComplete,\n      moduleObj: this\n    });\n  };\n\n  DetailRow.prototype.expandCollapse = function (isExpand) {\n    var td;\n    var rows = this.parent.getDataRows();\n\n    for (var i = 0, len = rows.length; i < len; i++) {\n      td = rows[i].querySelector('.e-detailrowcollapse, .e-detailrowexpand');\n      isExpand ? this.expand(td) : this.collapse(td);\n    }\n  };\n\n  DetailRow.prototype.keyPressHandler = function (e) {\n    var gObj = this.parent;\n\n    switch (e.action) {\n      case 'ctrlDownArrow':\n        this.expandAll();\n        break;\n\n      case 'ctrlUpArrow':\n        this.collapseAll();\n        break;\n\n      case 'altUpArrow':\n      case 'altDownArrow':\n        var selected = gObj.allowSelection ? gObj.getSelectedRowIndexes() : [];\n\n        if (selected.length) {\n          var dataRow = gObj.getDataRows()[selected[selected.length - 1]];\n          var td = dataRow.querySelector('.e-detailrowcollapse, .e-detailrowexpand');\n          e.action === 'altDownArrow' ? this.expand(td) : this.collapse(td);\n        }\n\n        break;\n\n      case 'enter':\n        if (this.parent.isEdit) {\n          return;\n        }\n\n        var element = this.focus.getFocusedElement();\n\n        if (!e.target.classList.contains('e-detailrowcollapse') && !e.target.classList.contains('e-detailrowexpand')) {\n          break;\n        }\n\n        this.toogleExpandcollapse(element);\n        break;\n    }\n  };\n\n  DetailRow.prototype.refreshColSpan = function () {\n    var detailrows = this.parent.contentModule.getTable().querySelectorAll('tr.e-detailrow');\n    var colSpan = this.parent.getVisibleColumns().length;\n\n    for (var i = 0; i < detailrows.length; i++) {\n      detailrows[i].querySelector('.e-detailcell').setAttribute('colspan', colSpan + '');\n    }\n  };\n  /**\n   * For internal use only - Get the module name.\n   * @private\n   */\n\n\n  DetailRow.prototype.getModuleName = function () {\n    return 'detailRow';\n  };\n\n  return DetailRow;\n}();\n\nexport { DetailRow };","map":null,"metadata":{},"sourceType":"module"}