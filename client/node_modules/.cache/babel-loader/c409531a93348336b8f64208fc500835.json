{"ast":null,"code":"import { Grid, Resize, ContextMenu, Sort, VirtualScroll } from '@syncfusion/ej2-grids';\nimport { select, KeyboardEvents, EventHandler, getValue, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined as isNOU, Touch, setValue, addClass, removeClass } from '@syncfusion/ej2-base';\nimport { Internationalization, closest, Draggable } from '@syncfusion/ej2-base';\nimport { DataManager, Query } from '@syncfusion/ej2-data';\nimport { hideSpinner, showSpinner } from '@syncfusion/ej2-popups';\nimport * as events from '../base/constant';\nimport * as CLS from '../base/classes';\nimport { createDialog, createImageDialog } from '../pop-up/dialog';\nimport { removeBlur, openAction, getImageUrl, fileType, getSortedData, getLocaleText, updateLayout } from '../common/utility';\nimport { createEmptyElement } from '../common/utility';\nimport { read, Download, GetDetails, Delete } from '../common/operations';\nimport { cutFiles, addBlur, openSearchFolder, copyFiles, removeActive, pasteHandler, getPathObject, getName } from '../common/index';\nimport { hasReadAccess, hasEditAccess, hasDownloadAccess, doRename, getAccessClass, createDeniedDialog, rename } from '../common/index';\nimport { createVirtualDragElement, dragStopHandler, dragStartHandler, draggingHandler, getModule, getFullPath } from '../common/index';\nimport { getDirectoryPath, updateRenamingData, getItemName, doDeleteFiles, doDownloadFiles } from '../common/index';\n/**\n * DetailsView module\n */\n\nvar DetailsView =\n/** @class */\nfunction () {\n  /**\n   * Constructor for the GridView module\n   * @hidden\n   */\n  function DetailsView(parent) {\n    this.isInteracted = true;\n    this.interaction = true;\n    this.isPasteOperation = false;\n    this.isColumnRefresh = false;\n    this.dragObj = null;\n    this.startIndex = null;\n    this.firstItemIndex = null;\n    this.isSelectionUpdate = false;\n    this.currentSelectedItem = [];\n    this.count = 0;\n    this.isRendered = true;\n    this.isLoaded = false;\n    this.isNameWidth = false;\n    this.pasteOperation = false;\n    this.uploadOperation = false;\n    Grid.Inject(Resize, ContextMenu, Sort, VirtualScroll);\n    this.parent = parent;\n    this.element = select('#' + this.parent.element.id + CLS.GRID_ID, this.parent.element);\n    this.addEventListener();\n    this.keyConfigs = {\n      altEnter: 'alt+enter',\n      esc: 'escape',\n      tab: 'tab',\n      moveDown: 'downarrow',\n      ctrlEnd: 'ctrl+end',\n      ctrlHome: 'ctrl+home',\n      ctrlDown: 'ctrl+downarrow',\n      ctrlLeft: 'ctrl+leftarrow',\n      ctrlRight: 'ctrl+rightarrow',\n      shiftEnd: 'shift+end',\n      shiftHome: 'shift+home',\n      shiftDown: 'shift+downarrow',\n      shiftUp: 'shift+uparrow',\n      ctrlUp: 'ctrl+uparrow',\n      csEnd: 'ctrl+shift+end',\n      csHome: 'ctrl+shift+home',\n      csDown: 'ctrl+shift+downarrow',\n      csUp: 'ctrl+shift+uparrow',\n      space: 'space',\n      ctrlSpace: 'ctrl+space',\n      shiftSpace: 'shift+space',\n      csSpace: 'ctrl+shift+space',\n      end: 'end',\n      home: 'home',\n      moveUp: 'uparrow',\n      del: 'delete',\n      ctrlX: 'ctrl+x',\n      ctrlC: 'ctrl+c',\n      ctrlV: 'ctrl+v',\n      ctrlShiftN: 'ctrl+shift+n',\n      shiftdel: 'shift+delete',\n      ctrlD: 'ctrl+d',\n      f2: 'f2',\n      ctrlA: 'ctrl+a',\n      enter: 'enter'\n    };\n  } // tslint:disable-next-line\n\n  /* istanbul ignore next */\n\n\n  DetailsView.prototype.render = function (args) {\n    showSpinner(this.parent.element);\n\n    if (this.parent.view === 'Details') {\n      removeClass([this.parent.element], CLS.MULTI_SELECT);\n      var items = getSortedData(this.parent, args.files);\n      this.checkNameWidth();\n      var columns = this.getColumns();\n      var sortSettings = void 0;\n\n      if (this.parent.isMobile) {\n        sortSettings = [];\n      } else {\n        if (this.parent.sortOrder !== 'None') {\n          sortSettings = [{\n            direction: this.parent.sortOrder,\n            field: this.parent.sortBy\n          }];\n        }\n      }\n\n      this.gridObj = new Grid({\n        dataSource: items,\n        allowSorting: true,\n        rowSelecting: this.onSelection.bind(this, 'select'),\n        rowDeselecting: this.onSelection.bind(this, 'unselect'),\n        rowSelected: this.onSelected.bind(this),\n        rowDeselected: this.onDeSelection.bind(this),\n        allowResizing: this.parent.detailsViewSettings.columnResizing,\n        selectionSettings: {\n          type: this.parent.allowMultiSelection ? 'Multiple' : 'Single',\n          checkboxMode: 'ResetOnRowClick'\n        },\n        enableRtl: this.parent.enableRtl,\n        pageSettings: {\n          pageSize: 20\n        },\n        sortSettings: {\n          allowUnsort: false,\n          columns: sortSettings\n        },\n        columns: columns,\n        recordDoubleClick: this.DblClickEvents.bind(this),\n        beforeDataBound: this.onBeforeDataBound.bind(this),\n        dataBound: this.onDataBound.bind(this),\n        rowDataBound: this.onRowDataBound.bind(this),\n        actionBegin: this.onActionBegin.bind(this),\n        headerCellInfo: this.onHeaderCellInfo.bind(this),\n        width: '100%',\n        beforeCopy: function (args) {\n          args.cancel = true;\n        },\n        load: function (args) {\n          this.focusModule.destroy();\n        },\n        locale: this.parent.locale\n      });\n      this.gridObj.isStringTemplate = true;\n      this.gridObj.appendTo('#' + this.parent.element.id + CLS.GRID_ID);\n      this.wireEvents();\n      this.adjustHeight();\n      this.emptyArgs = args;\n    }\n  };\n\n  DetailsView.prototype.checkNameWidth = function () {\n    var initialColumn = this.parent.detailsViewSettings.columns;\n    this.isNameWidth = false;\n\n    for (var i = 0; i < initialColumn.length; i++) {\n      if (initialColumn[i].field === 'name') {\n        this.isNameWidth = !isNOU(initialColumn[i].width);\n        return;\n      }\n    }\n  };\n\n  DetailsView.prototype.adjustWidth = function (columns, fieldName) {\n    if (this.isNameWidth && fieldName === 'name') {\n      return;\n    }\n\n    for (var i = 0; i < columns.length; i++) {\n      if (columns[i].field === fieldName) {\n        var nameWidth = void 0;\n\n        if (this.parent.breadcrumbbarModule.searchObj.element.value === '' && !this.parent.isFiltered) {\n          nameWidth = this.element.clientWidth <= 500 ? '120px' : 'auto';\n        } else {\n          nameWidth = this.element.clientWidth <= 680 ? fieldName === 'name' ? '120px' : '180px' : 'auto';\n        }\n\n        columns[i].width = nameWidth;\n      }\n    }\n  };\n\n  DetailsView.prototype.getColumns = function () {\n    var columns;\n\n    if (this.parent.isMobile) {\n      columns = [{\n        field: 'name',\n        headerText: getLocaleText(this.parent, 'Name'),\n        width: 'auto',\n        minWidth: 120,\n        headerTextAlign: 'Left',\n        template: '<div class=\"e-fe-text\">${name}</div><div class=\"e-fe-date\">${_fm_modified}</div>' + '<span class=\"e-fe-size\">${size}</span>'\n      }];\n    } else {\n      columns = JSON.parse(JSON.stringify(this.parent.detailsViewSettings.columns));\n      this.adjustWidth(columns, 'name');\n\n      for (var i = 0, len = columns.length; i < len; i++) {\n        columns[i].headerText = getLocaleText(this.parent, columns[i].headerText);\n      }\n    }\n\n    var iWidth = this.parent.isMobile || this.parent.isBigger ? '54' : '46';\n    var icon = {\n      field: 'type',\n      width: iWidth,\n      minWidth: iWidth,\n      template: '<span class=\"e-fe-icon ${_fm_iconClass}\"></span>',\n      allowResizing: false,\n      allowSorting: true,\n      customAttributes: {\n        class: 'e-fe-grid-icon'\n      },\n      headerTemplate: '<span class=\"e-fe-icon e-fe-folder\"></span>'\n    };\n    columns.unshift(icon);\n\n    if (this.parent.allowMultiSelection) {\n      var cWidth = this.parent.isBigger ? '36' : '26';\n      var cBox = {\n        type: 'checkbox',\n        width: cWidth,\n        minWidth: cWidth,\n        customAttributes: {\n          class: 'e-fe-checkbox'\n        },\n        allowResizing: false,\n        allowSorting: false\n      };\n\n      if (this.parent.isMobile) {\n        columns.push(cBox);\n      } else {\n        columns.unshift(cBox);\n      }\n    }\n\n    for (var i = 0, len = columns.length; i < len; i++) {\n      columns[i].disableHtmlEncode = !this.parent.enableHtmlSanitizer;\n    }\n\n    return columns;\n  };\n\n  DetailsView.prototype.adjustHeight = function () {\n    if (!this.gridObj) {\n      return;\n    }\n\n    var pane = select('#' + this.parent.element.id + CLS.CONTENT_ID, this.parent.element);\n    var bar = select('#' + this.parent.element.id + CLS.BREADCRUMBBAR_ID, this.parent.element);\n    var gridHeader = select('.' + CLS.GRID_HEADER, this.parent.element);\n    var height = pane.offsetHeight - bar.offsetHeight - gridHeader.offsetHeight;\n    this.gridObj.height = height;\n    this.gridObj.dataBind();\n  };\n\n  DetailsView.prototype.renderCheckBox = function () {\n    this.gridObj.columns = this.getColumns();\n    this.isColumnRefresh = true;\n    this.gridObj.refreshColumns();\n  };\n\n  DetailsView.prototype.onRowDataBound = function (args) {\n    var td = select('.e-fe-grid-name', args.row);\n\n    if (!td) {\n      var columns = this.parent.detailsViewSettings.columns;\n\n      for (var i = 0; i < columns.length; i++) {\n        if (columns[i].field === 'name') {\n          td = args.row.children[this.parent.allowMultiSelection ? i + 2 : i + 1];\n          break;\n        }\n      }\n    }\n\n    if (td) {\n      td.setAttribute('title', getValue('name', args.data));\n    }\n\n    if (this.parent.isLayoutChange && this.parent.isCut && this.parent.fileAction === 'move' && this.parent.selectedNodes && this.parent.selectedNodes.length !== 0) {\n      if (this.parent.selectedNodes.indexOf(getValue('name', args.data)) !== -1) {\n        addBlur(args.row);\n      }\n    }\n\n    if (!this.parent.showFileExtension && getValue('isFile', args.data)) {\n      var textEle = args.row.querySelector('.e-fe-text');\n\n      if (textEle) {\n        var name_1 = getValue('name', args.data);\n        var type = getValue('type', args.data);\n        textEle.innerHTML = name_1.substr(0, name_1.length - type.length);\n      }\n    }\n\n    if (getValue('size', args.data) !== undefined && args.row.querySelector('.e-fe-size')) {\n      var sizeEle = args.row.querySelector('.e-fe-size');\n      var modifiedSize = void 0;\n\n      if (!getValue('isFile', args.data)) {\n        modifiedSize = '';\n      } else {\n        var sizeValue = getValue('size', args.data);\n        var intl = new Internationalization(this.parent.locale);\n        var value = intl.formatNumber(sizeValue / 1024, {\n          format: 'n'\n        });\n        modifiedSize = value + ' ' + getLocaleText(this.parent, 'KB');\n      }\n\n      sizeEle.innerHTML = modifiedSize;\n    }\n\n    if (this.parent.isMobile) {\n      if (getValue('_fm_modified', args.data) !== undefined && args.row.querySelector('.e-fe-date')) {\n        var dateEle = args.row.querySelector('.e-fe-date');\n        var intl = new Internationalization(this.parent.locale);\n        var columns = this.parent.detailsViewSettings.columns;\n        var format = void 0;\n\n        for (var i = 0; i < columns.length; i++) {\n          if (columns[i].field === 'dateModified') {\n            format = columns[i].format;\n            break;\n          }\n        }\n\n        var formattedString = intl.formatDate(new Date(getValue('_fm_modified', args.data)), format);\n        dateEle.innerHTML = formattedString;\n      }\n    }\n\n    var checkWrap = args.row.querySelector('.' + CLS.CB_WRAP);\n\n    if (checkWrap) {\n      checkWrap.classList.add('e-small');\n    }\n\n    if (!hasEditAccess(args.data)) {\n      args.row.className += ' ' + getAccessClass(args.data);\n    }\n\n    var eventArgs = {\n      element: args.row,\n      fileDetails: args.data,\n      module: 'DetailsView'\n    };\n    this.parent.trigger('fileLoad', eventArgs);\n  };\n\n  DetailsView.prototype.onActionBegin = function (args) {\n    if (args.requestType === 'sorting') {\n      this.parent.sortOrder = args.direction;\n      this.parent.sortBy = args.columnName;\n\n      if (this.parent.selectedItems.length !== 0) {\n        this.sortItem = true;\n        var rows = this.gridObj.getSelectedRowIndexes();\n        var len = rows.length;\n        this.sortSelectedNodes = [];\n\n        while (len > 0) {\n          var data = this.gridObj.getRowsObject()[rows[len - 1]].data;\n          this.sortSelectedNodes.push(getValue(this.parent.hasId ? 'id' : 'name', data));\n          len--;\n        }\n      }\n\n      this.parent.notify(events.sortByChange, {});\n    }\n  };\n\n  DetailsView.prototype.onHeaderCellInfo = function (args) {\n    var checkWrap = args.node.querySelector('.' + CLS.CB_WRAP);\n\n    if (checkWrap) {\n      checkWrap.classList.add('e-small');\n    }\n  };\n\n  DetailsView.prototype.onBeforeDataBound = function (args) {\n    showSpinner(this.parent.element);\n    var items = getSortedData(this.parent, this.gridObj.dataSource);\n    args.result = items;\n  };\n  /* istanbul ignore next */\n\n\n  DetailsView.prototype.onDataBound = function () {\n    this.createDragObj();\n\n    if (this.parent.selectedItems.length !== 0) {\n      this.selectRecords(this.parent.selectedItems);\n    }\n\n    if (this.isPasteOperation === true) {\n      if (!this.isColumnRefresh) {\n        this.selectRecords(this.parent.pasteNodes);\n        this.isPasteOperation = false;\n      } else {\n        this.isColumnRefresh = false;\n      }\n    }\n\n    if (this.parent.createdItem) {\n      this.selectRecords([getValue(this.parent.hasId ? 'id' : 'name', this.parent.createdItem)]);\n      this.parent.createdItem = null;\n    }\n\n    if (this.parent.layoutSelectedItems.length) {\n      this.selectRecords(this.parent.layoutSelectedItems);\n    }\n\n    if (this.parent.renamedItem) {\n      this.addSelection(this.parent.renamedItem);\n      this.parent.renamedItem = null;\n    }\n\n    if (this.sortItem === true) {\n      this.selectRecords(this.sortSelectedNodes);\n      this.sortItem = false;\n    }\n\n    if (this.isSelectionUpdate) {\n      if (!this.isColumnRefresh) {\n        this.selectRecords(this.currentSelectedItem);\n        this.isSelectionUpdate = false;\n      } else {\n        this.isColumnRefresh = false;\n      }\n    }\n\n    if (this.uploadOperation === true) {\n      this.count++;\n      this.selectRecords(this.parent.uploadItem);\n\n      if (this.count === this.parent.uploadItem.length) {\n        this.uploadOperation = false;\n        this.parent.uploadItem = [];\n      }\n    }\n\n    if (this.gridObj.currentViewData.length * this.gridObj.getRowHeight() < this.gridObj.height) {\n      var hdTable = this.gridObj.getHeaderContent();\n      hdTable.style.paddingRight = '';\n      hdTable.style.paddingLeft = '';\n      var hdContent = select('.e-headercontent', hdTable);\n      hdContent.style.borderRightWidth = '0';\n      var cnTable = this.gridObj.getContent().querySelector('.e-content');\n      cnTable.style.overflowY = '';\n      cnTable.classList.add('e-scrollShow');\n    } else {\n      var hdTable = this.gridObj.getHeaderContent();\n\n      if (!this.parent.enableRtl) {\n        hdTable.style.paddingRight = '16px';\n      } else {\n        hdTable.style.paddingLeft = '16px';\n      }\n\n      var cnTable = this.gridObj.getContent().querySelector('.e-content');\n      cnTable.classList.remove('e-scrollShow');\n    }\n\n    this.isRendered = true;\n    this.parent.isLayoutChange = false;\n    hideSpinner(this.parent.element);\n    this.checkEmptyDiv(this.emptyArgs);\n    this.isInteracted = this.isLoaded ? true : this.isInteracted;\n    this.isLoaded = false;\n  };\n\n  DetailsView.prototype.selectRecords = function (nodes) {\n    var gridRecords = this.gridObj.getCurrentViewRecords();\n    var sRecords = [];\n\n    for (var i = 0, len = gridRecords.length; i < len; i++) {\n      var node = this.parent.hasId ? getValue('id', gridRecords[i]) : getName(this.parent, gridRecords[i]);\n\n      if (nodes.indexOf(node) !== -1) {\n        sRecords.push(i);\n      }\n    }\n\n    if (sRecords.length !== 0) {\n      this.gridObj.selectRows(sRecords);\n      this.addFocus(this.gridObj.selectedRowIndex);\n    }\n  };\n\n  DetailsView.prototype.addSelection = function (data) {\n    var items = this.gridObj.getCurrentViewRecords();\n    var rData = [];\n\n    if (this.parent.hasId) {\n      rData = new DataManager(items).executeLocal(new Query().where('id', 'equal', this.parent.renamedId, false));\n    } else {\n      var nData = new DataManager(items).executeLocal(new Query().where('name', 'equal', getValue('name', data), false));\n\n      if (nData.length > 0) {\n        rData = new DataManager(nData).executeLocal(new Query().where('filterPath', 'equal', this.parent.filterPath, false));\n      }\n    }\n\n    if (rData.length > 0) {\n      var index = items.indexOf(rData[0]);\n      this.gridObj.selectRows([index]);\n    }\n  };\n\n  DetailsView.prototype.onSortColumn = function () {\n    if (this.parent.sortOrder !== 'None') {\n      this.gridObj.sortModule.sortColumn(this.parent.sortBy, this.parent.sortOrder);\n    } else {\n      this.gridObj.dataSource = getSortedData(this.parent, this.gridObj.dataSource);\n    }\n  };\n\n  DetailsView.prototype.onPropertyChanged = function (e) {\n    if (e.module !== this.getModuleName() && e.module !== 'common') {\n      /* istanbul ignore next */\n      return;\n    }\n\n    for (var _i = 0, _a = Object.keys(e.newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'allowDragAndDrop':\n          this.createDragObj();\n          break;\n\n        case 'height':\n          this.adjustHeight();\n          break;\n\n        case 'detailsViewSettings':\n          if (!isNullOrUndefined(this.gridObj)) {\n            this.checkNameWidth();\n            var columns = this.getColumns();\n            this.gridObj.columns = columns;\n            this.gridObj.allowResizing = this.parent.detailsViewSettings.columnResizing;\n            this.gridObj.dataBind();\n            this.gridObj.refreshColumns();\n          }\n\n          break;\n\n        case 'selectedItems':\n          this.interaction = false;\n\n          if (this.parent.selectedItems.length !== 0) {\n            if (!this.parent.allowMultiSelection) {\n              var slItems = this.parent.selectedItems.slice(this.parent.selectedItems.length - 1);\n              this.parent.setProperties({\n                selectedItems: slItems\n              }, true);\n            }\n\n            this.selectRecords(this.parent.selectedItems);\n            this.parent.setProperties({\n              selectedItems: this.parent.selectedItems\n            }, true);\n          } else if (!isNOU(this.gridObj)) {\n            this.gridObj.clearSelection();\n          }\n\n          break;\n\n        case 'showFileExtension':\n          read(this.parent, events.pathChanged, this.parent.path);\n          break;\n\n        case 'showHiddenItems':\n          read(this.parent, events.pathChanged, this.parent.path);\n          break;\n\n        case 'allowMultiSelection':\n          if (!isNullOrUndefined(this.gridObj)) {\n            this.currentSelectedItem = this.parent.selectedItems;\n            this.gridObj.selectionSettings.type = e.newProp.allowMultiSelection ? 'Multiple' : 'Single';\n            this.isSelectionUpdate = true;\n            this.renderCheckBox();\n          }\n\n          break;\n\n        case 'view':\n          updateLayout(this.parent, 'Details');\n          break;\n\n        case 'width':\n          this.onDetailsResize();\n      }\n    }\n  };\n\n  DetailsView.prototype.onPathChanged = function (args) {\n    this.parent.isCut = false;\n\n    if (this.parent.breadcrumbbarModule.searchObj.element.value.trim() === '' && this.gridObj) {\n      this.parent.searchedItems = [];\n\n      if (!this.parent.isFiltered) {\n        this.removePathColumn(false);\n      } else {\n        this.updatePathColumn();\n      }\n    }\n\n    removeBlur(this.parent);\n\n    if (this.parent.view === 'Details') {\n      /* istanbul ignore next */\n      this.isInteracted = false;\n      showSpinner(this.parent.element);\n      this.parent.setProperties({\n        selectedItems: []\n      }, true);\n      this.gridObj.dataSource = getSortedData(this.parent, args.files);\n    }\n\n    this.emptyArgs = args;\n  };\n\n  DetailsView.prototype.updatePathColumn = function () {\n    var len = this.gridObj.columns.length;\n    var columnData = JSON.parse(JSON.stringify(this.gridObj.columns));\n\n    if (columnData[len - 1].field && columnData[len - 1].field !== 'filterPath' && !this.parent.isMobile) {\n      var pathColumn = {\n        field: 'filterPath',\n        headerText: getLocaleText(this.parent, 'Path'),\n        minWidth: 180,\n        width: 'auto'\n      };\n      this.gridObj.columns.push(pathColumn);\n      this.adjustWidth(this.gridObj.columns, 'filterPath');\n      this.adjustWidth(this.gridObj.columns, 'name');\n      this.isColumnRefresh = true;\n      this.gridObj.refreshColumns();\n    }\n  };\n\n  DetailsView.prototype.checkEmptyDiv = function (args) {\n    var items = getSortedData(this.parent, args.files);\n\n    if (items.length === 0 && !isNOU(this.element.querySelector('.' + CLS.GRID_VIEW))) {\n      createEmptyElement(this.parent, this.element, args);\n    } else if (items.length !== 0 && this.element.querySelector('.' + CLS.EMPTY)) {\n      if (this.element.querySelector('.' + CLS.GRID_VIEW).querySelector('.' + CLS.EMPTY)) {\n        var emptyDiv = this.element.querySelector('.' + CLS.GRID_VIEW).querySelector('.' + CLS.EMPTY);\n        this.element.querySelector('.' + CLS.GRID_VIEW).removeChild(emptyDiv);\n      } else {\n        this.element.removeChild(this.element.querySelector('.' + CLS.EMPTY));\n      }\n    }\n  };\n\n  DetailsView.prototype.onOpenInit = function () {\n    if (this.parent.activeModule === 'detailsview') {\n      var data = this.gridObj.getSelectedRecords()[0];\n      this.openContent(data);\n    }\n  };\n\n  DetailsView.prototype.DblClickEvents = function (args) {\n    this.gridObj.selectRows([args.rowIndex]);\n    var data;\n\n    if (args.rowData) {\n      data = JSON.parse(JSON.stringify(args.rowData));\n      this.openContent(data);\n    }\n  };\n\n  DetailsView.prototype.openContent = function (data) {\n    var _this = this;\n\n    if (!hasReadAccess(data)) {\n      createDeniedDialog(this.parent, data, events.permissionRead);\n      return;\n    }\n\n    var eventArgs = {\n      cancel: false,\n      fileDetails: data,\n      module: 'DetailsView'\n    };\n    this.parent.trigger('fileOpen', eventArgs, function (fileOpenArgs) {\n      if (!fileOpenArgs.cancel) {\n        var name_2 = getValue('name', data);\n\n        if (getValue('isFile', data)) {\n          var icon = fileType(data);\n\n          if (icon === CLS.ICON_IMAGE) {\n            var imgUrl = getImageUrl(_this.parent, data);\n            createImageDialog(_this.parent, name_2, imgUrl);\n          }\n        } else {\n          var val = _this.parent.breadcrumbbarModule.searchObj.element.value;\n\n          if (val === '' && !_this.parent.isFiltered) {\n            var id = getValue('id', data);\n            var newPath = _this.parent.path + (isNOU(id) ? name_2 : id) + '/';\n\n            _this.parent.setProperties({\n              path: newPath\n            }, true);\n\n            _this.parent.pathNames.push(name_2);\n\n            _this.parent.pathId.push(getValue('_fm_id', data));\n\n            _this.parent.itemData = [data];\n            openAction(_this.parent);\n          } else {\n            openSearchFolder(_this.parent, data);\n          }\n\n          _this.parent.isFiltered = false;\n        }\n\n        _this.element.focus();\n      }\n    });\n  };\n  /* istanbul ignore next */\n\n\n  DetailsView.prototype.onLayoutChange = function (args) {\n    if (this.parent.view === 'Details') {\n      if (!this.gridObj) {\n        this.render(args);\n      } else {\n        this.isLoaded = true;\n      }\n\n      if (this.parent.isFiltered) {\n        this.updatePathColumn();\n        this.parent.setProperties({\n          selectedItems: []\n        }, true);\n      }\n\n      this.gridObj.dataSource = getSortedData(this.parent, args.files);\n      this.parent.notify(events.hideLayout, {});\n      this.gridObj.element.classList.remove(CLS.DISPLAY_NONE);\n      this.isInteracted = false;\n      this.gridObj.clearSelection();\n\n      if (this.parent.breadcrumbbarModule.searchObj.element.value.trim() !== '') {\n        this.onSearchFiles(args);\n      }\n\n      this.adjustHeight();\n\n      if (this.gridObj.sortSettings.columns.length > 0 && this.gridObj.sortSettings.columns[0].field !== this.parent.sortBy) {\n        if (this.parent.sortOrder !== 'None') {\n          this.gridObj.sortColumn(this.parent.sortBy, this.parent.sortOrder);\n        }\n      }\n    }\n  };\n  /* istanbul ignore next */\n\n\n  DetailsView.prototype.onSearchFiles = function (args) {\n    if (this.parent.view === 'Details') {\n      this.parent.setProperties({\n        selectedItems: []\n      }, true);\n      this.parent.notify(events.selectionChanged, {});\n\n      if (!this.parent.isLayoutChange) {\n        this.parent.layoutSelectedItems = [];\n      }\n\n      this.updatePathColumn();\n      this.parent.searchedItems = args.files;\n      this.onPathChanged(args);\n    }\n  };\n\n  DetailsView.prototype.removePathColumn = function (isRefresh) {\n    var len = this.gridObj.columns.length;\n    var columnData = JSON.parse(JSON.stringify(this.gridObj.columns));\n\n    if (columnData[len - 1].field && columnData[len - 1].field === 'filterPath') {\n      /* istanbul ignore next */\n      if (this.gridObj.sortSettings.columns[0].field === 'filterPath') {\n        if (this.parent.sortOrder !== 'None') {\n          this.gridObj.sortColumn('name', this.parent.sortOrder);\n        } else {\n          this.gridObj.dataSource = getSortedData(this.parent, this.gridObj.dataSource);\n        }\n\n        this.parent.notify(events.sortByChange, {});\n      }\n\n      this.gridObj.columns.pop();\n\n      if (!isRefresh) {\n        this.isColumnRefresh = true;\n        this.gridObj.refreshColumns();\n      }\n    }\n  };\n\n  DetailsView.prototype.onFinalizeEnd = function (args) {\n    if (this.parent.view !== 'Details') {\n      return;\n    }\n\n    if (!this.gridObj) {\n      this.render(args);\n    } else {\n      this.onPathChanged(args);\n    }\n  };\n\n  DetailsView.prototype.onCreateEnd = function (args) {\n    if (this.parent.view !== 'Details') {\n      return;\n    }\n\n    this.onPathChanged(args);\n  };\n\n  DetailsView.prototype.onRenameInit = function () {\n    if (this.parent.activeModule === 'detailsview' && this.parent.selectedItems.length === 1) {\n      this.updateRenameData();\n    }\n  };\n\n  DetailsView.prototype.onSelectedData = function () {\n    if (this.parent.activeModule === 'detailsview') {\n      this.parent.itemData = this.gridObj.getSelectedRecords();\n    }\n  };\n\n  DetailsView.prototype.onDeleteInit = function () {\n    if (this.parent.activeModule === 'detailsview') {\n      Delete(this.parent, this.parent.selectedItems, this.parent.path, 'delete');\n    }\n  };\n  /* istanbul ignore next */\n\n\n  DetailsView.prototype.onDeleteEnd = function (args) {\n    if (this.parent.view !== 'Details') {\n      return;\n    }\n\n    this.onPathChanged(args);\n    this.parent.setProperties({\n      selectedItems: []\n    }, true);\n  };\n\n  DetailsView.prototype.onRefreshEnd = function (args) {\n    if (this.parent.view !== 'Details') {\n      return;\n    }\n\n    this.isInteracted = false;\n    this.removePathColumn(true);\n    this.gridObj.dataSource = getSortedData(this.parent, args.files);\n    this.emptyArgs = args;\n  };\n\n  DetailsView.prototype.onHideLayout = function () {\n    if (this.parent.view !== 'Details' && this.gridObj) {\n      this.gridObj.element.classList.add(CLS.DISPLAY_NONE);\n    }\n  };\n\n  DetailsView.prototype.onSelectAllInit = function () {\n    if (this.parent.view === 'Details') {\n      this.isInteracted = false;\n\n      if (this.parent.allowMultiSelection) {\n        this.gridObj.selectionModule.selectRowsByRange(0, this.gridObj.getRows().length);\n      } else {\n        this.gridObj.selectRow(this.gridObj.getRows().length - 1);\n      }\n\n      this.isInteracted = true;\n      this.interaction = true;\n    }\n  };\n\n  DetailsView.prototype.onClearAllInit = function () {\n    if (this.parent.view === 'Details') {\n      this.removeSelection();\n      this.interaction = true;\n    }\n  };\n  /* istanbul ignore next */\n\n\n  DetailsView.prototype.onSelectionChanged = function () {\n    removeClass([this.element], CLS.HEADER_CHECK);\n\n    if (this.parent.selectedItems.length > 0) {\n      addClass([this.element], CLS.HEADER_CHECK);\n    }\n  };\n\n  DetailsView.prototype.onLayoutRefresh = function () {\n    if (this.parent.view !== 'Details') {\n      return;\n    }\n\n    this.adjustHeight();\n  };\n\n  DetailsView.prototype.onBeforeRequest = function () {\n    this.isRendered = false;\n  };\n\n  DetailsView.prototype.onAfterRequest = function () {\n    this.isRendered = true;\n  };\n\n  DetailsView.prototype.onUpdateSelectionData = function () {\n    if (this.parent.view !== 'Details') {\n      return;\n    }\n\n    this.parent.itemData = this.gridObj.getSelectedRecords();\n  };\n\n  DetailsView.prototype.addEventListener = function () {\n    this.parent.on(events.finalizeEnd, this.onFinalizeEnd, this);\n    this.parent.on(events.destroy, this.destroy, this);\n    this.parent.on(events.layoutChange, this.onLayoutChange, this);\n    this.parent.on(events.pathChanged, this.onPathChanged, this);\n    this.parent.on(events.createEnd, this.onCreateEnd, this);\n    this.parent.on(events.dropInit, this.onDropInit, this);\n    this.parent.on(events.detailsInit, this.onDetailsInit, this);\n    this.parent.on(events.refreshEnd, this.onRefreshEnd, this);\n    this.parent.on(events.search, this.onSearchFiles, this);\n    this.parent.on(events.methodCall, this.onMethodCall, this);\n    this.parent.on(events.actionFailure, this.onActionFailure, this);\n    this.parent.on(events.modelChanged, this.onPropertyChanged, this);\n    this.parent.on(events.deleteInit, this.onDeleteInit, this);\n    this.parent.on(events.deleteEnd, this.onDeleteEnd, this);\n    this.parent.on(events.selectedData, this.onSelectedData, this);\n    this.parent.on(events.renameInit, this.onRenameInit, this);\n    this.parent.on(events.renameEnd, this.onPathChanged, this);\n    this.parent.on(events.openInit, this.onOpenInit, this);\n    this.parent.on(events.sortColumn, this.onSortColumn, this);\n    this.parent.on(events.openEnd, this.onPathChanged, this);\n    this.parent.on(events.filterEnd, this.onPathChanged, this);\n    this.parent.on(events.pasteInit, this.onPasteInit, this);\n    this.parent.on(events.hideLayout, this.onHideLayout, this);\n    this.parent.on(events.selectAllInit, this.onSelectAllInit, this);\n    this.parent.on(events.clearAllInit, this.onClearAllInit, this);\n    this.parent.on(events.pathColumn, this.onPathColumn, this);\n    this.parent.on(events.selectionChanged, this.onSelectionChanged, this);\n    this.parent.on(events.beforeRequest, this.onBeforeRequest, this);\n    this.parent.on(events.afterRequest, this.onAfterRequest, this);\n    this.parent.on(events.pasteEnd, this.onpasteEnd, this);\n    this.parent.on(events.cutCopyInit, this.oncutCopyInit, this);\n    this.parent.on(events.menuItemData, this.onMenuItemData, this);\n    this.parent.on(events.resizeEnd, this.onDetailsResizeHandler, this);\n    this.parent.on(events.splitterResize, this.onDetailsResize, this);\n    this.parent.on(events.layoutRefresh, this.onLayoutRefresh, this);\n    this.parent.on(events.dropPath, this.onDropPath, this);\n    this.parent.on(events.updateSelectionData, this.onUpdateSelectionData, this);\n  };\n\n  DetailsView.prototype.removeEventListener = function () {\n    this.parent.off(events.finalizeEnd, this.onFinalizeEnd);\n    this.parent.off(events.destroy, this.destroy);\n    this.parent.off(events.layoutChange, this.onLayoutChange);\n    this.parent.off(events.pathChanged, this.onPathChanged);\n    this.parent.off(events.pasteInit, this.onPasteInit);\n    this.parent.off(events.createEnd, this.onCreateEnd);\n    this.parent.off(events.refreshEnd, this.onRefreshEnd);\n    this.parent.off(events.search, this.onSearchFiles);\n    this.parent.off(events.methodCall, this.onMethodCall);\n    this.parent.off(events.actionFailure, this.onActionFailure);\n    this.parent.off(events.modelChanged, this.onPropertyChanged);\n    this.parent.off(events.renameInit, this.onRenameInit);\n    this.parent.off(events.renameEnd, this.onPathChanged);\n    this.parent.off(events.filterEnd, this.onPathChanged);\n    this.parent.off(events.openInit, this.onOpenInit);\n    this.parent.off(events.sortColumn, this.onSortColumn);\n    this.parent.off(events.openEnd, this.onPathChanged);\n    this.parent.off(events.hideLayout, this.onHideLayout);\n    this.parent.off(events.selectAllInit, this.onSelectAllInit);\n    this.parent.off(events.clearAllInit, this.onClearAllInit);\n    this.parent.off(events.deleteInit, this.onDeleteInit);\n    this.parent.off(events.deleteEnd, this.onDeleteEnd);\n    this.parent.off(events.pathColumn, this.onPathColumn);\n    this.parent.off(events.selectionChanged, this.onSelectionChanged);\n    this.parent.off(events.beforeRequest, this.onBeforeRequest);\n    this.parent.off(events.afterRequest, this.onAfterRequest);\n    this.parent.off(events.pasteEnd, this.onpasteEnd);\n    this.parent.off(events.cutCopyInit, this.oncutCopyInit);\n    this.parent.off(events.dropInit, this.onDropInit);\n    this.parent.off(events.selectedData, this.onSelectedData);\n    this.parent.off(events.detailsInit, this.onDetailsInit);\n    this.parent.off(events.menuItemData, this.onMenuItemData);\n    this.parent.off(events.resizeEnd, this.onDetailsResizeHandler);\n    this.parent.off(events.splitterResize, this.onDetailsResize);\n    this.parent.off(events.layoutRefresh, this.onLayoutRefresh);\n    this.parent.off(events.dropPath, this.onDropPath);\n    this.parent.off(events.updateSelectionData, this.onUpdateSelectionData);\n  };\n\n  DetailsView.prototype.onActionFailure = function () {\n    this.interaction = true;\n  };\n\n  DetailsView.prototype.onMenuItemData = function (args) {\n    if (this.parent.activeModule === this.getModuleName()) {\n      this.parent.itemData = [this.gridObj.getRowInfo(args.target).rowData];\n    }\n  };\n\n  DetailsView.prototype.onPasteInit = function () {\n    if (this.parent.activeModule === this.getModuleName()) {\n      this.parent.itemData = this.parent.folderPath !== '' ? this.gridObj.getSelectedRecords() : [getPathObject(this.parent)];\n    }\n  };\n\n  DetailsView.prototype.onDetailsInit = function () {\n    if (this.parent.activeModule === this.getModuleName()) {\n      if (this.parent.selectedItems.length !== 0) {\n        this.parent.itemData = this.gridObj.getSelectedRecords();\n      } else {\n        this.parent.itemData = [getValue(this.parent.pathId[this.parent.pathId.length - 1], this.parent.feParent)];\n      }\n    }\n  };\n\n  DetailsView.prototype.dragHelper = function (args) {\n    var dragTarget = args.sender.target;\n    var dragLi = dragTarget.closest('tr.e-row');\n\n    if (!dragLi) {\n      return null;\n    }\n\n    var name = dragLi.getElementsByClassName('e-fe-text')[0].innerText;\n\n    if (dragLi && !dragLi.querySelector('.e-active')) {\n      this.selectRecords([name]);\n    }\n\n    getModule(this.parent, dragLi);\n    this.parent.activeElements = [];\n    this.parent.dragData = [];\n    this.parent.dragData = this.gridObj.getSelectedRecords();\n    this.parent.dragPath = this.parent.path;\n    this.parent.activeElements = this.gridObj.getSelectedRows();\n    createVirtualDragElement(this.parent);\n    return this.parent.virtualDragElement;\n  };\n  /* istanbul ignore next */\n\n\n  DetailsView.prototype.onDetailsResize = function () {\n    if (this.parent.view === 'Details' && !this.parent.isMobile && !isNOU(this.gridObj)) {\n      var gridHeader = this.gridObj.getHeaderContent().querySelector('.e-headercontent');\n      var gridHeaderColGroup = gridHeader.firstChild.childNodes[0];\n      var gridContentColGroup = this.gridObj.getContent().querySelector('.e-content .e-table').children[0];\n      var gridHeaderColNames = this.gridObj.getColumns();\n\n      for (var i = 0; i < gridHeaderColNames.length; i++) {\n        if (!this.isNameWidth && gridHeaderColNames[i].field === 'name' || gridHeaderColNames[i].field === 'filterPath') {\n          if (this.parent.breadcrumbbarModule.searchObj.element.value === '' && !this.parent.isFiltered) {\n            if (this.element.clientWidth <= 500) {\n              gridHeaderColGroup.children[i].setAttribute('style', 'width: 120px');\n              gridContentColGroup.children[i].setAttribute('style', 'width: 120px');\n            } else if (this.element.clientWidth > 500) {\n              gridHeaderColGroup.children[i].setAttribute('style', 'width: auto');\n              gridContentColGroup.children[i].setAttribute('style', 'width: auto');\n            }\n          } else {\n            if (this.element.clientWidth <= 680) {\n              if (gridHeaderColNames[i].field === 'name') {\n                gridHeaderColGroup.children[i].setAttribute('style', 'width: 120px');\n                gridContentColGroup.children[i].setAttribute('style', 'width: 120px');\n              } else {\n                gridHeaderColGroup.children[i].setAttribute('style', 'width: 180px');\n                gridContentColGroup.children[i].setAttribute('style', 'width: 180px');\n              }\n            } else if (this.element.clientWidth > 680) {\n              gridHeaderColGroup.children[i].setAttribute('style', 'width: auto');\n              gridContentColGroup.children[i].setAttribute('style', 'width: auto');\n            }\n          }\n        }\n      }\n    }\n  };\n\n  DetailsView.prototype.onDetailsResizeHandler = function () {\n    this.onDetailsResize();\n\n    if (this.parent.view === 'Details' && !this.parent.isMobile && !isNOU(this.gridObj)) {\n      this.adjustHeight();\n    }\n  };\n\n  DetailsView.prototype.createDragObj = function () {\n    var _this = this;\n\n    if (!this.parent.isMobile && this.gridObj) {\n      if (this.parent.allowDragAndDrop) {\n        if (this.dragObj) {\n          this.dragObj.destroy();\n        }\n\n        this.dragObj = new Draggable(this.gridObj.element, {\n          cursorAt: this.parent.dragCursorPosition,\n          enableTailMode: true,\n          dragArea: this.parent.element,\n          dragTarget: '.' + CLS.ROW,\n          drag: draggingHandler.bind(this, this.parent),\n          dragStart: function (args) {\n            dragStartHandler(_this.parent, args, _this.dragObj);\n          },\n          dragStop: dragStopHandler.bind(this, this.parent),\n          enableAutoScroll: true,\n          helper: this.dragHelper.bind(this)\n        });\n      } else if (!this.parent.allowDragAndDrop && this.dragObj) {\n        this.dragObj.destroy();\n      }\n    }\n  };\n\n  DetailsView.prototype.onDropInit = function (args) {\n    if (this.parent.targetModule === this.getModuleName()) {\n      /* istanbul ignore next */\n      var cwdData = getValue(this.parent.pathId[this.parent.pathId.length - 1], this.parent.feParent);\n\n      if (!args.target.closest('tr')) {\n        this.parent.dropPath = this.parent.path;\n        this.parent.dropData = cwdData;\n      } else {\n        var info = null;\n        info = this.gridObj.getRowInfo(args.target).rowData;\n        this.parent.dropPath = info.isFile ? this.parent.path : getFullPath(this.parent, info, this.parent.path);\n        this.parent.dropData = info.isFile ? cwdData : info;\n      }\n    }\n  };\n\n  DetailsView.prototype.oncutCopyInit = function () {\n    if (this.parent.activeModule === this.getModuleName()) {\n      this.parent.activeRecords = this.gridObj.getSelectedRecords();\n      this.parent.activeElements = this.gridObj.getSelectedRows();\n    }\n  };\n\n  DetailsView.prototype.onpasteEnd = function (args) {\n    if (this.parent.view === 'Details') {\n      this.isPasteOperation = true;\n\n      if (this.parent.path === this.parent.destinationPath || this.parent.path === getDirectoryPath(this.parent, args)) {\n        this.onPathChanged(args);\n      }\n    }\n  };\n\n  DetailsView.prototype.onDropPath = function (args) {\n    if (this.parent.view === 'Details') {\n      this.isPasteOperation = true;\n      this.onPathChanged(args);\n    }\n  };\n  /**\n   * For internal use only - Get the module name.\n   * @private\n   */\n\n\n  DetailsView.prototype.getModuleName = function () {\n    return 'detailsview';\n  };\n\n  DetailsView.prototype.destroy = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.removeEventListener();\n\n    if (this.gridObj) {\n      this.unWireEvents();\n      this.gridObj.destroy();\n    }\n  };\n  /* istanbul ignore next */\n\n\n  DetailsView.prototype.onSelection = function (action, args) {\n    var eventArgs = {\n      action: action,\n      fileDetails: args.data,\n      isInteracted: this.interaction,\n      cancel: false,\n      target: args.target\n    };\n    this.parent.trigger('fileSelection', eventArgs);\n    args.cancel = eventArgs.cancel;\n  };\n  /* istanbul ignore next */\n\n\n  DetailsView.prototype.onSelected = function (args) {\n    this.parent.activeModule = 'detailsview';\n\n    if (!this.parent.isLayoutChange || this.parent.isFiltered) {\n      this.selectedRecords();\n    }\n\n    this.parent.notify(events.selectionChanged, {});\n\n    if (this.gridObj.getSelectedRowIndexes().length === 1) {\n      this.firstItemIndex = this.gridObj.selectedRowIndex;\n    }\n\n    this.gridObj.element.setAttribute('tabindex', '-1');\n    this.triggerSelect('select', args);\n    var item = this.gridObj.getRowByIndex(this.gridObj.selectedRowIndex);\n\n    if (!isNOU(item) && !isNOU(item.querySelector('.e-checkselect'))) {\n      if (this.gridObj.getSelectedRowIndexes().length !== 1) {\n        var lastItemIndex = this.gridObj.getSelectedRowIndexes()[this.gridObj.getSelectedRowIndexes().length - 2];\n        var lastItem = this.gridObj.getRowByIndex(lastItemIndex);\n        lastItem.querySelector('.e-checkselect').setAttribute('tabindex', '-1');\n      }\n\n      item.querySelector('.e-rowcell.e-fe-checkbox').removeAttribute('tabindex');\n    }\n\n    if (!isNOU(this.gridObj) && !isNOU(this.gridObj.element.querySelector('.e-checkselectall'))) {\n      this.gridObj.element.querySelector('.e-checkselectall').setAttribute('tabindex', '-1');\n    }\n\n    var rows = this.gridObj.getSelectedRowIndexes();\n\n    if (!this.parent.allowMultiSelection) {\n      for (var i = 0; i < rows.length; i++) {\n        if (rows[i] === this.gridObj.selectedRowIndex) {\n          this.gridObj.getRowByIndex(rows[i]).setAttribute('tabindex', '0');\n        } else {\n          this.gridObj.getRowByIndex(rows[i]).removeAttribute('tabindex');\n        }\n      }\n    }\n\n    var len = rows.length;\n\n    if (len > 0) {\n      var data = this.gridObj.getRowsObject()[rows[len - 1]].data;\n      this.parent.currentItemText = getValue('name', data);\n    }\n\n    var indexes = getValue('rowIndexes', args);\n    var multiSelect = getValue('enableSelectMultiTouch', this.gridObj.selectionModule);\n\n    if (this.parent.isDevice && isNOU(indexes) && args.target && !multiSelect && !args.target.closest('.e-headercell')) {\n      this.parent.isFile = getValue('isFile', args.data);\n\n      if (!this.parent.isFile) {\n        this.openContent(args.data);\n      }\n    }\n\n    this.parent.visitedItem = args.row;\n\n    if (this.parent.allowMultiSelection && !isNOU(item) && !isNOU(item.querySelector('.e-checkselect'))) {\n      var checkItem = item.querySelector('.e-checkselect');\n      checkItem.focus();\n    }\n\n    this.addFocus(this.gridObj.selectedRowIndex);\n\n    if (!this.parent.isLayoutChange) {\n      this.isInteracted = true;\n    }\n  };\n  /* istanbul ignore next */\n\n\n  DetailsView.prototype.onPathColumn = function () {\n    if (this.parent.view === 'Details' && !isNOU(this.gridObj)) {\n      if (this.parent.breadcrumbbarModule.searchObj.element.value === '' && !this.parent.isFiltered) {\n        this.removePathColumn(false);\n      }\n    }\n  };\n\n  DetailsView.prototype.selectedRecords = function () {\n    this.parent.setProperties({\n      selectedItems: []\n    }, true);\n    var selectedRecords = this.gridSelectNodes();\n    var selectSize = 0;\n\n    while (selectSize < selectedRecords.length) {\n      var record = selectedRecords[selectSize];\n      var name_3 = getItemName(this.parent, record);\n      this.parent.selectedItems.push(name_3);\n      selectSize++;\n    }\n\n    this.parent.setProperties({\n      selectedItems: this.parent.selectedItems\n    }, true);\n  };\n\n  DetailsView.prototype.onDeSelection = function (args) {\n    /* istanbul ignore next */\n    if (!this.parent.allowMultiSelection && isNOU(args.data)) {\n      this.gridObj.getRowByIndex(args.rowIndex).removeAttribute('tabindex');\n    } else if (this.gridObj.getSelectedRowIndexes().length > 1) {\n      var lastItemIndex = this.gridObj.getSelectedRowIndexes()[this.gridObj.getSelectedRowIndexes().length - 2];\n      this.gridObj.getRowByIndex(lastItemIndex).querySelector('.e-checkselect').removeAttribute('tabindex');\n    }\n\n    if (this.gridObj.selectedRowIndex === -1) {\n      this.gridObj.element.setAttribute('tabindex', '0');\n    }\n\n    if (!this.isInteracted) {\n      this.isInteracted = true;\n      return;\n    }\n\n    this.selectedRecords();\n\n    if (this.parent.selectedItems.length === 0) {\n      setValue('enableSelectMultiTouch', false, this.gridObj.selectionModule);\n      removeClass([this.parent.element], CLS.MULTI_SELECT);\n    }\n\n    this.parent.notify(events.selectionChanged, {});\n    this.triggerSelect('unselect', args);\n    this.parent.visitedItem = null;\n  };\n\n  DetailsView.prototype.triggerSelect = function (action, args) {\n    var eventArgs = {\n      action: action,\n      fileDetails: args.data,\n      isInteracted: this.interaction\n    };\n    this.parent.trigger('fileSelect', eventArgs);\n    this.interaction = true;\n  };\n\n  DetailsView.prototype.wireEvents = function () {\n    this.wireClickEvent(true);\n    this.keyboardModule = new KeyboardEvents(this.gridObj.element, {\n      keyAction: this.keyupHandler.bind(this),\n      keyConfigs: this.keyConfigs,\n      eventName: 'keyup'\n    });\n    this.keyboardDownModule = new KeyboardEvents(this.element, {\n      keyAction: this.keydownHandler.bind(this),\n      keyConfigs: this.keyConfigs,\n      eventName: 'keydown'\n    });\n    EventHandler.add(this.gridObj.element, 'blur', this.removeFocus, this);\n  };\n\n  DetailsView.prototype.unWireEvents = function () {\n    this.wireClickEvent(false);\n    this.keyboardModule.destroy();\n    this.keyboardDownModule.destroy();\n    EventHandler.remove(this.gridObj.element, 'blur', this.removeFocus);\n  };\n\n  DetailsView.prototype.wireClickEvent = function (toBind) {\n    if (toBind) {\n      var proxy_1 = this;\n      var ele = this.gridObj.getContent();\n      this.clickObj = new Touch(ele, {\n        tap: function (eve) {\n          if (eve.tapCount === 1 && eve.originalEvent.target.classList.contains('e-content')) {\n            proxy_1.onClearAllInit();\n          }\n        },\n        tapHold: function (e) {\n          if (proxy_1.parent.isDevice) {\n            e.originalEvent.preventDefault();\n\n            if (proxy_1.parent.allowMultiSelection) {\n              setValue('enableSelectMultiTouch', proxy_1.parent.allowMultiSelection, proxy_1.gridObj.selectionModule);\n              addClass([proxy_1.parent.element], CLS.MULTI_SELECT);\n            }\n\n            var target = e.originalEvent.target;\n\n            if (target) {\n              var row = closest(target, '.' + CLS.ROW);\n              var index = proxy_1.gridObj.getRows().indexOf(row);\n              proxy_1.gridObj.selectRow(index);\n            }\n          }\n        }\n      });\n    } else {\n      if (this.clickObj) {\n        this.clickObj.destroy();\n      }\n    }\n  };\n  /* istanbul ignore next */\n\n\n  DetailsView.prototype.removeSelection = function () {\n    removeClass([this.parent.element], CLS.MULTI_SELECT);\n    this.gridObj.clearSelection();\n    this.parent.setProperties({\n      selectedItems: []\n    }, true);\n    this.parent.notify(events.selectionChanged, {});\n\n    if (this.gridObj.selectedRowIndex === -1) {\n      this.startIndex = null;\n    }\n\n    this.isInteracted = true;\n  };\n\n  DetailsView.prototype.removeFocus = function () {\n    this.addFocus(null);\n  };\n\n  DetailsView.prototype.getFocusedItemIndex = function () {\n    return !isNOU(this.getFocusedItem()) ? parseInt(this.getFocusedItem().getAttribute('aria-rowindex'), 10) : null;\n  };\n  /* istanbul ignore next */\n  // tslint:disable-next-line:max-func-body-length\n\n\n  DetailsView.prototype.keydownHandler = function (e) {\n    if (!this.isRendered) {\n      return;\n    }\n\n    switch (e.action) {\n      case 'end':\n      case 'home':\n      case 'space':\n      case 'ctrlSpace':\n      case 'shiftSpace':\n      case 'csSpace':\n      case 'ctrlA':\n      case 'enter':\n      case 'altEnter':\n      case 'ctrlEnd':\n      case 'shiftEnd':\n      case 'csEnd':\n      case 'ctrlHome':\n      case 'shiftHome':\n      case 'csHome':\n      case 'ctrlDown':\n      case 'shiftDown':\n      case 'csDown':\n      case 'ctrlLeft':\n      case 'shiftLeft':\n      case 'csLeft':\n      case 'esc':\n      case 'del':\n      case 'shiftdel':\n      case 'ctrlC':\n      case 'ctrlV':\n      case 'ctrlX':\n      case 'f2':\n      case 'moveDown':\n      case 'moveUp':\n        e.preventDefault();\n        break;\n\n      default:\n        break;\n    }\n  };\n  /* istanbul ignore next */\n  // tslint:disable-next-line:max-func-body-length\n\n\n  DetailsView.prototype.keyupHandler = function (e) {\n    if (!this.isRendered) {\n      return;\n    }\n\n    e.preventDefault();\n    var action = e.action;\n    var gridItems = getSortedData(this.parent, this.gridObj.dataSource);\n    var gridLength = gridItems.length;\n    var focItem = this.getFocusedItem();\n    var focIndex = this.getFocusedItemIndex();\n    var selIndex = this.gridObj.selectedRowIndex;\n    var selRowIndeces = this.gridObj.getSelectedRowIndexes();\n\n    switch (action) {\n      case 'altEnter':\n        GetDetails(this.parent, this.parent.selectedItems, this.parent.path, 'details');\n        break;\n\n      case 'esc':\n        removeActive(this.parent);\n        break;\n\n      case 'del':\n      case 'shiftdel':\n        this.performDelete();\n        break;\n\n      case 'enter':\n        if (this.gridObj.selectedRowIndex === -1) {\n          break;\n        }\n\n        var rowData = this.gridObj.getRowsObject()[this.gridObj.selectedRowIndex].data;\n\n        if (rowData) {\n          var data = JSON.parse(JSON.stringify(rowData));\n          this.openContent(data);\n        }\n\n        break;\n\n      case 'ctrlC':\n        copyFiles(this.parent);\n        break;\n\n      case 'ctrlV':\n        this.parent.folderPath = '';\n        pasteHandler(this.parent);\n        break;\n\n      case 'ctrlX':\n        cutFiles(this.parent);\n        break;\n\n      case 'ctrlD':\n        this.doDownload();\n        break;\n\n      case 'f2':\n        this.performRename();\n        break;\n\n      case 'ctrlA':\n        if (!isNOU(gridItems[0]) && this.parent.allowMultiSelection) {\n          this.gridObj.selectionModule.selectRowsByRange(0, gridItems.length - 1);\n        }\n\n        break;\n\n      case 'ctrlHome':\n      case 'tab':\n        if (!isNOU(gridItems[0])) {\n          if (!this.parent.allowMultiSelection && e.action === 'ctrlHome') {\n            this.gridObj.selectRow(0);\n          } else if (this.gridObj.selectedRowIndex !== -1 && e.action === 'tab') {\n            return;\n          } else {\n            this.addFocus(0);\n          }\n        }\n\n        break;\n\n      case 'ctrlEnd':\n        if (!isNOU(gridItems[0])) {\n          !this.parent.allowMultiSelection ? this.gridObj.selectRow(gridLength - 1) : this.addFocus(gridLength - 1);\n        }\n\n        break;\n\n      case 'shiftHome':\n      case 'shiftEnd':\n      case 'csHome':\n      case 'csEnd':\n        if (!this.parent.allowMultiSelection) {\n          this.gridObj.selectRow(e.action === 'shiftHome' || e.action === 'csHome' ? 0 : gridItems.length - 1);\n        } else {\n          if (!isNOU(gridItems[0])) {\n            if (!isNOU(selIndex) && selIndex !== -1) {\n              this.checkRowsKey(gridItems, selIndex, null, e);\n            } else {\n              e.action === 'csHome' || e.action === 'shiftHome' ? this.gridObj.selectRow(0) : this.gridObj.selectionModule.selectRowsByRange(0, gridItems.length - 1);\n            }\n          }\n        }\n\n        break;\n\n      case 'space':\n      case 'csSpace':\n      case 'shiftSpace':\n      case 'ctrlSpace':\n        this.spaceSelection(selRowIndeces, focIndex, selIndex, e);\n        break;\n\n      case 'csUp':\n      case 'csDown':\n      case 'shiftUp':\n      case 'shiftDown':\n        this.shiftMoveMethod(gridItems, selIndex, focIndex, selRowIndeces, e);\n        break;\n\n      case 'ctrlUp':\n      case 'ctrlDown':\n        !this.parent.allowMultiSelection ? this.moveFunction(gridItems, e, selIndex) : this.ctrlMoveFunction(gridItems, e, selIndex);\n        break;\n\n      case 'home':\n        var firstItem = [getValue(this.parent.hasId ? 'id' : 'name', gridItems[0])];\n        this.parent.setProperties({\n          selectedItems: firstItem\n        }, true);\n        this.selectRecords(firstItem);\n        break;\n\n      case 'moveUp':\n      case 'moveDown':\n        this.moveFunction(gridItems, e, selIndex);\n        break;\n\n      case 'end':\n        var lastItem = [getValue(this.parent.hasId ? 'id' : 'name', gridItems[gridLength - 1])];\n        this.parent.setProperties({\n          selectedItems: lastItem\n        }, true);\n        this.selectRecords(lastItem);\n        break;\n    }\n  };\n\n  DetailsView.prototype.gridSelectNodes = function () {\n    return this.gridObj.getSelectedRecords();\n  };\n\n  DetailsView.prototype.doDownload = function () {\n    if (this.parent.selectedItems.length !== 0) {\n      this.parent.itemData = this.gridObj.getSelectedRecords();\n      var items = this.parent.itemData;\n\n      for (var i = 0; i < items.length; i++) {\n        if (!hasDownloadAccess(items[i])) {\n          createDeniedDialog(this.parent, items[i], events.permissionDownload);\n          return;\n        }\n      }\n\n      Download(this.parent, this.parent.path, this.parent.selectedItems);\n    }\n  };\n\n  DetailsView.prototype.performDelete = function () {\n    if (this.parent.selectedItems && this.parent.selectedItems.length > 0) {\n      this.parent.itemData = this.gridObj.getSelectedRecords();\n      var items = this.parent.itemData;\n\n      for (var i = 0; i < items.length; i++) {\n        if (!hasEditAccess(items[i])) {\n          createDeniedDialog(this.parent, items[i], events.permissionEdit);\n          return;\n        }\n      }\n\n      createDialog(this.parent, 'Delete');\n    }\n  };\n\n  DetailsView.prototype.performRename = function () {\n    if (this.parent.selectedItems.length === 1) {\n      this.updateRenameData();\n      doRename(this.parent);\n    }\n  };\n\n  DetailsView.prototype.updateRenameData = function () {\n    var data = this.gridSelectNodes()[0];\n    updateRenamingData(this.parent, data);\n  };\n\n  DetailsView.prototype.shiftMoveMethod = function (gridItems, selIndex, focIndex, selRowIndeces, e) {\n    if (!this.parent.allowMultiSelection) {\n      this.moveFunction(gridItems, e, selIndex);\n    } else {\n      if (selIndex === -1 && (e.action === 'csUp' || e.action === 'csDown')) {\n        this.ctrlMoveFunction(gridItems, e, selIndex);\n      } else if (selIndex !== -1 && focIndex !== selIndex && !((e.action === 'csUp' || e.action === 'csDown') && this.isSelected(selRowIndeces, focIndex))) {\n        this.shiftSelectFocusItem(selIndex, focIndex, selRowIndeces, e);\n      } else {\n        this.shiftSelectedItem(selIndex, selRowIndeces, gridItems, e);\n      }\n    }\n  };\n\n  DetailsView.prototype.moveFunction = function (selectedItems, e, rowIndex) {\n    if (!isNOU(this.getFocusedItem()) && this.parent.allowMultiSelection) {\n      if (e.action === 'moveDown') {\n        this.gridObj.selectRow(this.getFocusedItemIndex() + 1);\n      } else {\n        this.gridObj.selectRow(this.getFocusedItemIndex() - 1);\n      }\n    } else if (!isNOU(rowIndex) && rowIndex !== -1) {\n      if (e.action === 'moveDown' || e.action === 'ctrlDown' || e.action === 'shiftDown' || e.action === 'csDown') {\n        this.gridObj.selectRow(rowIndex + (rowIndex !== selectedItems.length - 1 ? 1 : 0));\n      } else {\n        this.gridObj.selectRow(rowIndex - (rowIndex !== 0 ? 1 : 0));\n      }\n    } else {\n      if (!isNOU(selectedItems[0])) {\n        this.gridObj.selectRow(0);\n      }\n    }\n  };\n\n  DetailsView.prototype.spaceSelection = function (selRowIndeces, focIndex, selIndex, e) {\n    if (!this.isSelected(selRowIndeces, focIndex) && selIndex !== -1 && (e.action === 'shiftSpace' || e.action === 'csSpace')) {\n      if (focIndex < selIndex) {\n        this.gridObj.selectionModule.selectRowsByRange(focIndex, selIndex);\n      } else {\n        this.gridObj.selectionModule.selectRowsByRange(selIndex, focIndex);\n      }\n    } else if (!isNOU(this.getFocusedItem()) && focIndex !== selIndex) {\n      selRowIndeces.push(this.getFocusedItemIndex());\n      this.gridObj.selectRows(selRowIndeces);\n    } else if (selIndex !== -1 && e.action === 'ctrlSpace' && this.parent.allowMultiSelection) {\n      var lItem = selIndex;\n      selRowIndeces.pop();\n      this.gridObj.selectRows(selRowIndeces);\n      this.addFocus(lItem);\n    } else if (e.action === 'shiftSpace') {\n      this.gridObj.selectRow(selIndex);\n    }\n  };\n\n  DetailsView.prototype.ctrlMoveFunction = function (items, e, rowIndex) {\n    var nextItem;\n\n    if (!isNOU(this.getFocusedItem())) {\n      var nextIndex = this.getFocusedItemIndex();\n      nextItem = e.action === 'ctrlDown' || e.action === 'csDown' ? nextIndex + (nextIndex < items.length - 1 ? 1 : 0) : nextIndex - (nextIndex < 1 ? 0 : 1);\n    } else if (!isNOU(rowIndex) && rowIndex !== -1) {\n      nextItem = e.action === 'ctrlDown' || e.action === 'csDown' ? rowIndex + (rowIndex < items.length ? 1 : 0) : rowIndex - (rowIndex < 1 ? 0 : 1);\n    } else {\n      if (!isNOU(items[0])) {\n        nextItem = 0;\n      }\n    }\n\n    this.addFocus(nextItem);\n  };\n\n  DetailsView.prototype.checkRowsKey = function (items, indexValue, focIndex, e) {\n    if (this.gridObj.checkAllRows === 'Uncheck' || this.gridObj.checkAllRows === 'Intermediate') {\n      if (e.action !== 'csHome' && e.action !== 'csEnd') {\n        if (isNOU(this.startIndex) && this.firstItemIndex !== indexValue) {\n          this.firstItemIndex = indexValue;\n        }\n\n        if (e.action === 'shiftEnd') {\n          this.gridObj.selectionModule.selectRowsByRange(this.firstItemIndex, items.length - 1);\n        } else {\n          this.gridObj.selectionModule.selectRowsByRange(0, this.firstItemIndex);\n        }\n\n        this.startIndex = indexValue;\n      } else {\n        if (e.action === 'csEnd') {\n          this.gridObj.selectRows(this.InnerItems(isNOU(indexValue) ? 0 : indexValue, isNOU(focIndex) ? items.length - 1 : focIndex, e));\n        } else {\n          isNOU(indexValue) ? this.gridObj.selectRow(0) : this.gridObj.selectRows(this.InnerItems(isNOU(focIndex) ? 0 : focIndex, indexValue, e));\n        }\n      }\n    } else {\n      this.gridObj.selectionModule.selectRow(e.action === 'shiftHome' || e.action === 'csHome' ? 0 : items.length - 1);\n    }\n  };\n\n  DetailsView.prototype.InnerItems = function (fItem, lItem, e) {\n    var itemArr = this.gridObj.getSelectedRowIndexes();\n\n    if (e.action === 'csEnd') {\n      for (var i = fItem + 1; i <= lItem; i++) {\n        itemArr.push(i);\n      }\n    } else {\n      for (var i = lItem - 1; fItem <= i; i--) {\n        itemArr.push(i);\n      }\n    }\n\n    return itemArr;\n  };\n\n  DetailsView.prototype.shiftSelectFocusItem = function (selIndex, fIndex, selRowIndexes, e) {\n    var lItem;\n    var fItem;\n    lItem = fIndex + (e.action === 'shiftDown' || e.action === 'csDown' ? 1 : -1);\n    fItem = isNOU(this.startIndex) ? selIndex : selRowIndexes[0];\n\n    if (fItem === lItem) {\n      this.gridObj.selectRow(fItem);\n    } else {\n      fItem < lItem ? e.action === 'shiftDown' || e.action === 'csDown' ? this.gridObj.selectionModule.selectRowsByRange(fItem, lItem) : this.gridObj.selectionModule.selectRowsByRange(lItem, fItem) : e.action === 'shiftDown' || e.action === 'csDown' ? this.gridObj.selectionModule.selectRowsByRange(lItem, fItem) : this.gridObj.selectionModule.selectRowsByRange(fItem, lItem);\n    }\n\n    this.startIndex = this.gridObj.selectedRowIndex;\n  };\n\n  DetailsView.prototype.addFocus = function (item) {\n    var fItem = this.getFocusedItem();\n    var itemElement = this.gridObj.getRowByIndex(item);\n\n    if (fItem) {\n      fItem.removeAttribute('tabindex');\n      removeClass([fItem], [CLS.FOCUS, CLS.FOCUSED]);\n    }\n\n    if (!isNOU(itemElement)) {\n      this.gridObj.element.setAttribute('tabindex', '-1');\n      itemElement.setAttribute('tabindex', '0');\n      itemElement.focus();\n      addClass([itemElement], [CLS.FOCUS, CLS.FOCUSED]);\n    }\n  };\n\n  DetailsView.prototype.getFocusedItem = function () {\n    return select('.' + CLS.FOCUSED, this.element);\n  };\n\n  DetailsView.prototype.isSelected = function (selRowIndexes, focIndex) {\n    var check = false;\n\n    for (var i = 0; i <= selRowIndexes.length - 1; i++) {\n      if (selRowIndexes[i] === focIndex) {\n        check = true;\n        break;\n      }\n    }\n\n    return check;\n  };\n\n  DetailsView.prototype.shiftSelectedItem = function (selIndex, selRowIndexes, gridItems, e) {\n    if (selIndex === -1) {\n      this.gridObj.selectRow(0);\n    } else {\n      if (isNOU(this.startIndex) && e.shiftKey) {\n        this.startIndex = this.gridObj.selectedRowIndex;\n        this.gridObj.selectRows([selIndex, e.action === 'shiftDown' || e.action === 'csDown' ? selIndex + (selIndex !== gridItems.length - 1 ? 1 : 0) : selIndex - (selIndex !== 0 ? 1 : 0)]);\n      } else {\n        if (e.action === 'shiftDown' || e.action === 'shiftUp') {\n          if (e.action === 'shiftDown' && selRowIndexes.indexOf(selIndex + 1) === -1) {\n            if (selIndex !== gridItems.length - 1) {\n              selRowIndexes.push(selIndex + 1);\n            }\n          } else if (e.action === 'shiftUp' && selRowIndexes.indexOf(selIndex - 1) === -1) {\n            if (selIndex !== 0) {\n              selRowIndexes.push(selIndex - 1);\n            }\n          } else {\n            selRowIndexes.pop();\n          }\n\n          this.gridObj.selectRows(selRowIndexes);\n        } else {\n          if (e.action === 'csDown') {\n            if (!this.isSelected(selRowIndexes, this.getFocusedItemIndex() + 1)) {\n              selRowIndexes.push(this.getFocusedItemIndex() + 1);\n              this.gridObj.selectRows(selRowIndexes);\n            } else {\n              this.addFocus(this.getFocusedItemIndex() + 1);\n            }\n          } else if (!this.isSelected(selRowIndexes, this.getFocusedItemIndex() - 1)) {\n            selRowIndexes.push(this.getFocusedItemIndex() - 1);\n            this.gridObj.selectRows(selRowIndexes);\n          } else {\n            this.addFocus(this.getFocusedItemIndex() - 1);\n          }\n        }\n      }\n    }\n  };\n\n  DetailsView.prototype.onMethodCall = function (e) {\n    if (this.parent.view !== 'Details') {\n      return;\n    }\n\n    var action = getValue('action', e);\n\n    switch (action) {\n      case 'deleteFiles':\n        this.deleteFiles(getValue('ids', e));\n        break;\n\n      case 'downloadFiles':\n        this.downloadFiles(getValue('ids', e));\n        break;\n\n      case 'openFile':\n        this.openFile(getValue('id', e));\n        break;\n\n      case 'createFolder':\n        this.interaction = false;\n        break;\n\n      case 'renameFile':\n        this.interaction = false;\n        this.renameFile(getValue('id', e), getValue('newName', e));\n        break;\n\n      case 'selectAll':\n        this.interaction = false;\n        this.onSelectAllInit();\n        break;\n\n      case 'clearSelection':\n        this.interaction = false;\n        this.onClearAllInit();\n        break;\n    }\n  };\n\n  DetailsView.prototype.getRecords = function (nodes) {\n    var gridRecords = this.gridObj.getCurrentViewRecords();\n    var records = [];\n    var hasFilter = this.parent.breadcrumbbarModule.searchObj.element.value !== '' || this.parent.isFiltered ? true : false;\n    var filter = this.parent.hasId ? 'id' : 'name';\n\n    if (this.parent.hasId || !hasFilter) {\n      for (var i = 0, len = gridRecords.length; i < len; i++) {\n        if (nodes.indexOf(getValue(filter, gridRecords[i])) !== -1) {\n          records.push(gridRecords[i]);\n        }\n      }\n    } else {\n      for (var i = 0, len = gridRecords.length; i < len; i++) {\n        var name_4 = getValue('filterPath', gridRecords[i]) + getValue('name', gridRecords[i]);\n\n        if (nodes.indexOf(name_4) !== -1) {\n          records.push(gridRecords[i]);\n        }\n      }\n    }\n\n    return records;\n  };\n\n  DetailsView.prototype.deleteFiles = function (ids) {\n    this.parent.activeModule = 'detailsview';\n\n    if (isNOU(ids)) {\n      this.performDelete();\n      return;\n    }\n\n    var records = this.getRecords(ids);\n\n    if (records.length === 0) {\n      return;\n    }\n\n    var data = [];\n    var newIds = [];\n\n    for (var i = 0; i < records.length; i++) {\n      data[i] = records[i];\n      newIds[i] = getItemName(this.parent, data[i]);\n    }\n\n    doDeleteFiles(this.parent, data, newIds);\n  };\n\n  DetailsView.prototype.downloadFiles = function (ids) {\n    if (isNOU(ids)) {\n      this.doDownload();\n      return;\n    }\n\n    var dRecords = this.getRecords(ids);\n\n    if (dRecords.length === 0) {\n      return;\n    }\n\n    var data = [];\n    var newIds = [];\n\n    for (var i = 0; i < dRecords.length; i++) {\n      data[i] = dRecords[i];\n      newIds[i] = getItemName(this.parent, data[i]);\n    }\n\n    doDownloadFiles(this.parent, data, newIds);\n  };\n\n  DetailsView.prototype.openFile = function (id) {\n    if (isNOU(id)) {\n      return;\n    }\n\n    var records = this.getRecords([id]);\n\n    if (records.length > 0) {\n      this.openContent(records[0]);\n    }\n  };\n\n  DetailsView.prototype.renameFile = function (id, name) {\n    this.parent.activeModule = 'detailsview';\n\n    if (isNOU(id)) {\n      this.performRename();\n      return;\n    }\n\n    var records = this.getRecords([id]);\n\n    if (records.length > 0) {\n      updateRenamingData(this.parent, records[0]);\n\n      if (!isNOU(name)) {\n        if (hasEditAccess(this.parent.itemData[0])) {\n          rename(this.parent, this.parent.path, name);\n        } else {\n          createDeniedDialog(this.parent, this.parent.itemData[0], events.permissionEdit);\n        }\n      } else {\n        doRename(this.parent);\n      }\n    }\n  };\n\n  return DetailsView;\n}();\n\nexport { DetailsView };","map":null,"metadata":{},"sourceType":"module"}