{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _api = require('../api');\n\nvar _api2 = _interopRequireDefault(_api);\n\nvar _onFailError = require('../utils/onFailError');\n\nvar _onFailError2 = _interopRequireDefault(_onFailError);\n\nvar _iconsSvg = require('../icons-svg');\n\nvar _iconsSvg2 = _interopRequireDefault(_iconsSvg);\n\nvar _translations = require('../translations');\n\nvar _translations2 = _interopRequireDefault(_translations);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar label = 'remove';\n\nfunction _handler(apiOptions, actions) {\n  var _this = this;\n\n  var showDialog = actions.showDialog,\n      hideDialog = actions.hideDialog,\n      navigateToDir = actions.navigateToDir,\n      updateNotifications = actions.updateNotifications,\n      getSelectedResources = actions.getSelectedResources,\n      getResource = actions.getResource,\n      getNotifications = actions.getNotifications;\n\n  var getMessage = _translations2.default.bind(null, apiOptions.locale);\n\n  var selectedResources = getSelectedResources();\n  var dialogFilesText = selectedResources.length > 1 ? selectedResources.length + ' ' + getMessage('files') : '\"' + selectedResources[0].name + '\"';\n  var dialogNameText = getMessage('reallyRemove', {\n    files: dialogFilesText\n  });\n  var rawDialogElement = {\n    elementType: 'ConfirmDialog',\n    elementProps: {\n      onHide: hideDialog,\n      onSubmit: function () {\n        var _ref = (0, _asyncToGenerator3.default)(\n        /*#__PURE__*/\n        _regenerator2.default.mark(function _callee() {\n          var resource;\n          return _regenerator2.default.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  hideDialog();\n                  _context.prev = 1;\n                  _context.next = 4;\n                  return _api2.default.removeResources(apiOptions, selectedResources);\n\n                case 4:\n                  resource = getResource();\n                  navigateToDir(resource.id, null, false);\n                  _context.next = 12;\n                  break;\n\n                case 8:\n                  _context.prev = 8;\n                  _context.t0 = _context['catch'](1);\n                  (0, _onFailError2.default)({\n                    getNotifications: getNotifications,\n                    label: getMessage(label),\n                    notificationId: 'delete',\n                    updateNotifications: updateNotifications\n                  });\n                  console.log(_context.t0);\n\n                case 12:\n                case 'end':\n                  return _context.stop();\n              }\n            }\n          }, _callee, _this, [[1, 8]]);\n        }));\n\n        return function onSubmit() {\n          return _ref.apply(this, arguments);\n        };\n      }(),\n      headerText: getMessage('remove'),\n      messageText: dialogNameText,\n      cancelButtonText: getMessage('cancel'),\n      submitButtonText: getMessage('confirm')\n    }\n  };\n  showDialog(rawDialogElement);\n}\n\nexports.default = function (apiOptions, actions) {\n  var localeLabel = (0, _translations2.default)(apiOptions.locale, label);\n  var getSelectedResources = actions.getSelectedResources;\n  return {\n    id: 'delete',\n    icon: {\n      svg: _iconsSvg2.default.delete\n    },\n    label: localeLabel,\n    shouldBeAvailable: function shouldBeAvailable(apiOptions) {\n      var selectedResources = getSelectedResources();\n\n      if (!selectedResources.length) {\n        return false;\n      }\n\n      return selectedResources.every(function (resource) {\n        return resource.capabilities.canDelete;\n      });\n    },\n    availableInContexts: ['row', 'toolbar'],\n    handler: function handler() {\n      return _handler(apiOptions, actions);\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}