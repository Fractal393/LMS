{"ast":null,"code":"/**\r\n * DevExtreme (ui/check_box.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../core/renderer\");\n\nvar eventsEngine = require(\"../events/core/events_engine\");\n\nvar devices = require(\"../core/devices\");\n\nvar extend = require(\"../core/utils/extend\").extend;\n\nvar inkRipple = require(\"./widget/utils.ink_ripple\");\n\nvar Editor = require(\"./editor/editor\");\n\nvar registerComponent = require(\"../core/component_registrator\");\n\nvar eventUtils = require(\"../events/utils\");\n\nvar clickEvent = require(\"../events/click\");\n\nvar CHECKBOX_CLASS = \"dx-checkbox\";\nvar CHECKBOX_ICON_CLASS = \"dx-checkbox-icon\";\nvar CHECKBOX_CHECKED_CLASS = \"dx-checkbox-checked\";\nvar CHECKBOX_CONTAINER_CLASS = \"dx-checkbox-container\";\nvar CHECKBOX_TEXT_CLASS = \"dx-checkbox-text\";\nvar CHECKBOX_HAS_TEXT_CLASS = \"dx-checkbox-has-text\";\nvar CHECKBOX_INDETERMINATE_CLASS = \"dx-checkbox-indeterminate\";\nvar CHECKBOX_FEEDBACK_HIDE_TIMEOUT = 100;\nvar CheckBox = Editor.inherit({\n  _supportedKeys: function () {\n    var click = function (e) {\n      e.preventDefault();\n\n      this._clickAction({\n        event: e\n      });\n    };\n\n    return extend(this.callBase(), {\n      space: click\n    });\n  },\n  _getDefaultOptions: function () {\n    return extend(this.callBase(), {\n      hoverStateEnabled: true,\n      activeStateEnabled: true,\n      value: false,\n      text: \"\",\n      useInkRipple: false\n    });\n  },\n  _defaultOptionsRules: function () {\n    return this.callBase().concat([{\n      device: function () {\n        return \"desktop\" === devices.real().deviceType && !devices.isSimulator();\n      },\n      options: {\n        focusStateEnabled: true\n      }\n    }]);\n  },\n  _canValueBeChangedByClick: function () {\n    return true;\n  },\n  _feedbackHideTimeout: CHECKBOX_FEEDBACK_HIDE_TIMEOUT,\n  _initMarkup: function () {\n    this._renderSubmitElement();\n\n    this._$container = $(\"<div>\").addClass(CHECKBOX_CONTAINER_CLASS);\n    this.setAria(\"role\", \"checkbox\");\n    this.$element().addClass(CHECKBOX_CLASS);\n\n    this._renderValue();\n\n    this._renderIcon();\n\n    this._renderText();\n\n    this.option(\"useInkRipple\") && this._renderInkRipple();\n    this.$element().append(this._$container);\n    this.callBase();\n  },\n  _render: function () {\n    this._renderClick();\n\n    this.callBase();\n  },\n  _renderSubmitElement: function () {\n    this._$submitElement = $(\"<input>\").attr(\"type\", \"hidden\").appendTo(this.$element());\n  },\n  _getSubmitElement: function () {\n    return this._$submitElement;\n  },\n  _renderInkRipple: function () {\n    this._inkRipple = inkRipple.render({\n      waveSizeCoefficient: 2.5,\n      useHoldAnimation: false,\n      wavesNumber: 2,\n      isCentered: true\n    });\n  },\n  _renderInkWave: function (element, dxEvent, doRender, waveIndex) {\n    if (!this._inkRipple) {\n      return;\n    }\n\n    var config = {\n      element: element,\n      event: dxEvent,\n      wave: waveIndex\n    };\n\n    if (doRender) {\n      this._inkRipple.showWave(config);\n    } else {\n      this._inkRipple.hideWave(config);\n    }\n  },\n  _updateFocusState: function (e, value) {\n    this.callBase.apply(this, arguments);\n\n    this._renderInkWave(this._$icon, e, value, 0);\n  },\n  _toggleActiveState: function ($element, value, e) {\n    this.callBase.apply(this, arguments);\n\n    this._renderInkWave(this._$icon, e, value, 1);\n  },\n  _renderIcon: function () {\n    this._$icon = $(\"<span>\").addClass(CHECKBOX_ICON_CLASS).prependTo(this._$container);\n  },\n  _renderText: function () {\n    var textValue = this.option(\"text\");\n\n    if (!textValue) {\n      if (this._$text) {\n        this._$text.remove();\n\n        this.$element().removeClass(CHECKBOX_HAS_TEXT_CLASS);\n      }\n\n      return;\n    }\n\n    if (!this._$text) {\n      this._$text = $(\"<span>\").addClass(CHECKBOX_TEXT_CLASS);\n    }\n\n    this._$text.text(textValue);\n\n    this._$container.append(this._$text);\n\n    this.$element().addClass(CHECKBOX_HAS_TEXT_CLASS);\n  },\n  _renderClick: function () {\n    var that = this;\n    var eventName = eventUtils.addNamespace(clickEvent.name, that.NAME);\n    that._clickAction = that._createAction(that._clickHandler);\n    eventsEngine.off(that.$element(), eventName);\n    eventsEngine.on(that.$element(), eventName, function (e) {\n      that._clickAction({\n        event: e\n      });\n    });\n  },\n  _clickHandler: function (args) {\n    var that = args.component;\n\n    that._saveValueChangeEvent(args.event);\n\n    that.option(\"value\", !that.option(\"value\"));\n  },\n  _renderValue: function () {\n    var $element = this.$element();\n    var checked = this.option(\"value\");\n    var indeterminate = void 0 === checked;\n    $element.toggleClass(CHECKBOX_CHECKED_CLASS, Boolean(checked));\n    $element.toggleClass(CHECKBOX_INDETERMINATE_CLASS, indeterminate);\n\n    this._getSubmitElement().val(checked);\n\n    this.setAria(\"checked\", indeterminate ? \"mixed\" : checked || \"false\");\n  },\n  _optionChanged: function (args) {\n    switch (args.name) {\n      case \"useInkRipple\":\n        this._invalidate();\n\n        break;\n\n      case \"value\":\n        this._renderValue();\n\n        this.callBase(args);\n        break;\n\n      case \"text\":\n        this._renderText();\n\n        this._renderDimensions();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _clean: function () {\n    delete this._inkRipple;\n    this.callBase();\n  }\n});\nregisterComponent(\"dxCheckBox\", CheckBox);\nmodule.exports = CheckBox;\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}