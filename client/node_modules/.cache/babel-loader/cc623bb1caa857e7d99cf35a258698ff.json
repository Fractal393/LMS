{"ast":null,"code":"/**\r\n * DevExtreme (ui/text_box/ui.text_editor.mask.strategy.default.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _uiText_editorMaskStrategy = require(\"./ui.text_editor.mask.strategy.base\");\n\nvar _uiText_editorMaskStrategy2 = _interopRequireDefault(_uiText_editorMaskStrategy);\n\nvar _utils = require(\"../../events/utils\");\n\nvar _promise = require(\"../../core/polyfills/promise\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) {\n    return;\n  }\n\n  if (\"string\" === typeof o) {\n    return _arrayLikeToArray(o, minLen);\n  }\n\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n\n  if (\"Object\" === n && o.constructor) {\n    n = o.constructor.name;\n  }\n\n  if (\"Map\" === n || \"Set\" === n) {\n    return Array.from(o);\n  }\n\n  if (\"Arguments\" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) {\n    return _arrayLikeToArray(o, minLen);\n  }\n}\n\nfunction _iterableToArray(iter) {\n  if (\"undefined\" !== typeof Symbol && Symbol.iterator in Object(iter)) {\n    return Array.from(iter);\n  }\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    return _arrayLikeToArray(arr);\n  }\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (null == len || len > arr.length) {\n    len = arr.length;\n  }\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nfunction _get(target, property, receiver) {\n  if (\"undefined\" !== typeof Reflect && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function (target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) {\n        return;\n      }\n\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n\n    if (null === object) {\n      break;\n    }\n  }\n\n  return object;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (\"function\" !== typeof superClass && null !== superClass) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (superClass) {\n    _setPrototypeOf(subClass, superClass);\n  }\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function (o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var result,\n        Super = _getPrototypeOf(Derived);\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (\"object\" === _typeof(call) || \"function\" === typeof call)) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (void 0 === self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (\"undefined\" === typeof Reflect || !Reflect.construct) {\n    return false;\n  }\n\n  if (Reflect.construct.sham) {\n    return false;\n  }\n\n  if (\"function\" === typeof Proxy) {\n    return true;\n  }\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function (o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar BACKSPACE_INPUT_TYPE = \"deleteContentBackward\";\nvar EMPTY_CHAR = \" \";\n\nvar DefaultMaskStrategy = function (_BaseMaskStrategy) {\n  _inherits(DefaultMaskStrategy, _BaseMaskStrategy);\n\n  var _super = _createSuper(DefaultMaskStrategy);\n\n  function DefaultMaskStrategy() {\n    _classCallCheck(this, DefaultMaskStrategy);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DefaultMaskStrategy, [{\n    key: \"_getStrategyName\",\n    value: function () {\n      return \"default\";\n    }\n  }, {\n    key: \"getHandleEventNames\",\n    value: function () {\n      return [].concat(_toConsumableArray(_get(_getPrototypeOf(DefaultMaskStrategy.prototype), \"getHandleEventNames\", this).call(this)), [\"keyPress\"]);\n    }\n  }, {\n    key: \"_keyPressHandler\",\n    value: function (event) {\n      if (this._keyPressHandled) {\n        return;\n      }\n\n      this._keyPressHandled = true;\n\n      if (this.editor._isControlKeyFired(event)) {\n        return;\n      }\n\n      var editor = this.editor;\n\n      editor._maskKeyHandler(event, function () {\n        return editor._handleKey((0, _utils.getChar)(event));\n      });\n    }\n  }, {\n    key: \"_inputHandler\",\n    value: function (event) {\n      if (this._backspaceInputHandled(event.originalEvent && event.originalEvent.inputType)) {\n        this._handleBackspaceInput(event);\n      }\n\n      if (event.originalEvent) {\n        this._autoFillHandler(event);\n      }\n\n      if (this._keyPressHandled) {\n        return;\n      }\n\n      this._keyPressHandled = true;\n      var inputValue = this.editorInput().val();\n      var caret = this.editorCaret();\n\n      if (!caret.end) {\n        return;\n      }\n\n      caret.start = caret.end - 1;\n      var oldValue = inputValue.substring(0, caret.start) + inputValue.substring(caret.end);\n      var char = inputValue[caret.start];\n      var editor = this.editor;\n      this.editorInput().val(oldValue);\n\n      editor._caret({\n        start: caret.start,\n        end: caret.start\n      });\n\n      editor._maskKeyHandler(event, function () {\n        return editor._handleKey(char);\n      });\n    }\n  }, {\n    key: \"_backspaceHandler\",\n    value: function (event) {\n      var _this = this;\n\n      var editor = this.editor;\n      this._keyPressHandled = true;\n\n      var afterBackspaceHandler = function (needAdjustCaret, callBack) {\n        if (needAdjustCaret) {\n          editor._direction(_this.DIRECTION.FORWARD);\n\n          editor._adjustCaret();\n        }\n\n        var currentCaret = _this.editorCaret();\n\n        return new _promise2.default(function (resolve) {\n          clearTimeout(_this._backspaceHandlerTimeout);\n          _this._backspaceHandlerTimeout = setTimeout(function () {\n            callBack(currentCaret);\n            resolve();\n          });\n        });\n      };\n\n      editor._maskKeyHandler(event, function () {\n        if (editor._hasSelection()) {\n          return afterBackspaceHandler(true, function (currentCaret) {\n            editor._displayMask(currentCaret);\n\n            editor._maskRulesChain.reset();\n          });\n        }\n\n        if (editor._tryMoveCaretBackward()) {\n          return afterBackspaceHandler(false, function (currentCaret) {\n            _this.editorCaret(currentCaret);\n          });\n        }\n\n        editor._handleKey(EMPTY_CHAR, _this.DIRECTION.BACKWARD);\n\n        return afterBackspaceHandler(true, function (currentCaret) {\n          editor._displayMask(currentCaret);\n\n          editor._maskRulesChain.reset();\n        });\n      });\n    }\n  }, {\n    key: \"_backspaceInputHandled\",\n    value: function (inputType) {\n      return inputType === BACKSPACE_INPUT_TYPE && !this._keyPressHandled;\n    }\n  }, {\n    key: \"_handleBackspaceInput\",\n    value: function (event) {\n      var _this$editorCaret = this.editorCaret(),\n          start = _this$editorCaret.start,\n          end = _this$editorCaret.end;\n\n      this.editorCaret({\n        start: start + 1,\n        end: end + 1\n      });\n\n      this._backspaceHandler(event);\n    }\n  }]);\n\n  return DefaultMaskStrategy;\n}(_uiText_editorMaskStrategy2.default);\n\nexports.default = DefaultMaskStrategy;","map":null,"metadata":{},"sourceType":"script"}