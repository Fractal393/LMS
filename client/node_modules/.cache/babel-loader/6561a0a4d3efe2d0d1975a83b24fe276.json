{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.filter_panel.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _uiGrid_core = require(\"./ui.grid_core.modules\");\n\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\n\nvar _uiGrid_core3 = require(\"./ui.grid_core.utils\");\n\nvar _uiGrid_core4 = _interopRequireDefault(_uiGrid_core3);\n\nvar _events_engine = require(\"../../events/core/events_engine\");\n\nvar _events_engine2 = _interopRequireDefault(_events_engine);\n\nvar _message = require(\"../../localization/message\");\n\nvar _message2 = _interopRequireDefault(_message);\n\nvar _check_box = require(\"../check_box\");\n\nvar _check_box2 = _interopRequireDefault(_check_box);\n\nvar _utils = require(\"../filter_builder/utils\");\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nvar _inflector = require(\"../../core/utils/inflector\");\n\nvar _inflector2 = _interopRequireDefault(_inflector);\n\nvar _uiGrid_core5 = require(\"./ui.grid_core.accessibility\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar FILTER_PANEL_CLASS = \"filter-panel\";\nvar FILTER_PANEL_TEXT_CLASS = FILTER_PANEL_CLASS + \"-text\";\nvar FILTER_PANEL_CHECKBOX_CLASS = FILTER_PANEL_CLASS + \"-checkbox\";\nvar FILTER_PANEL_CLEAR_FILTER_CLASS = FILTER_PANEL_CLASS + \"-clear-filter\";\nvar FILTER_PANEL_LEFT_CONTAINER = FILTER_PANEL_CLASS + \"-left\";\nvar FILTER_PANEL_TARGET = \"filterPanel\";\n\nvar FilterPanelView = _uiGrid_core2.default.View.inherit({\n  isVisible: function () {\n    return this.option(\"filterPanel.visible\") && this.getController(\"data\").dataSource();\n  },\n  init: function () {\n    var _this = this;\n\n    this.getController(\"data\").dataSourceChanged.add(function () {\n      return _this.render();\n    });\n  },\n  _renderCore: function () {\n    var that = this;\n    var $element = that.element();\n    $element.empty().addClass(that.addWidgetPrefix(FILTER_PANEL_CLASS));\n    var $leftContainer = (0, _renderer2.default)(\"<div>\").addClass(that.addWidgetPrefix(FILTER_PANEL_LEFT_CONTAINER)).appendTo($element);\n\n    if (that.option(\"filterValue\") || that._filterValueBuffer) {\n      $leftContainer.append(that._getCheckElement()).append(that._getFilterElement()).append(that._getTextElement());\n      $element.append(that._getRemoveButtonElement());\n    } else {\n      $leftContainer.append(that._getFilterElement()).append(that._getTextElement());\n    }\n  },\n  _getCheckElement: function () {\n    var that = this;\n    var $element = (0, _renderer2.default)(\"<div>\").addClass(this.addWidgetPrefix(FILTER_PANEL_CHECKBOX_CLASS));\n\n    that._createComponent($element, _check_box2.default, {\n      value: that.option(\"filterPanel.filterEnabled\"),\n      onValueChanged: function (e) {\n        that.option(\"filterPanel.filterEnabled\", e.value);\n      }\n    });\n\n    $element.attr(\"title\", this.option(\"filterPanel.texts.filterEnabledHint\"));\n    return $element;\n  },\n  _getFilterElement: function () {\n    var that = this;\n    var $element = (0, _renderer2.default)(\"<div>\").addClass(\"dx-icon-filter\");\n\n    _events_engine2.default.on($element, \"click\", function () {\n      return that._showFilterBuilder();\n    });\n\n    (0, _uiGrid_core5.registerKeyboardAction)(\"filterPanel\", that, $element, void 0, function () {\n      return that._showFilterBuilder();\n    });\n\n    that._addTabIndexToElement($element);\n\n    return $element;\n  },\n  _getTextElement: function () {\n    var that = this;\n    var $textElement = (0, _renderer2.default)(\"<div>\").addClass(that.addWidgetPrefix(FILTER_PANEL_TEXT_CLASS));\n    var filterText;\n    var filterValue = that.option(\"filterValue\");\n\n    if (filterValue) {\n      (0, _deferred.when)(that.getFilterText(filterValue, that.getController(\"filterSync\").getCustomFilterOperations())).done(function (filterText) {\n        var customizeText = that.option(\"filterPanel.customizeText\");\n\n        if (customizeText) {\n          var customText = customizeText({\n            component: that.component,\n            filterValue: filterValue,\n            text: filterText\n          });\n\n          if (\"string\" === typeof customText) {\n            filterText = customText;\n          }\n        }\n\n        $textElement.text(filterText);\n      });\n    } else {\n      filterText = that.option(\"filterPanel.texts.createFilter\");\n      $textElement.text(filterText);\n    }\n\n    _events_engine2.default.on($textElement, \"click\", function () {\n      return that._showFilterBuilder();\n    });\n\n    (0, _uiGrid_core5.registerKeyboardAction)(\"filterPanel\", that, $textElement, void 0, function () {\n      return that._showFilterBuilder();\n    });\n\n    that._addTabIndexToElement($textElement);\n\n    return $textElement;\n  },\n  _showFilterBuilder: function () {\n    this.option(\"filterBuilderPopup.visible\", true);\n  },\n  _getRemoveButtonElement: function () {\n    var that = this;\n\n    var clearFilterValue = function () {\n      return that.option(\"filterValue\", null);\n    };\n\n    var $element = (0, _renderer2.default)(\"<div>\").addClass(that.addWidgetPrefix(FILTER_PANEL_CLEAR_FILTER_CLASS)).text(that.option(\"filterPanel.texts.clearFilter\"));\n\n    _events_engine2.default.on($element, \"click\", clearFilterValue);\n\n    (0, _uiGrid_core5.registerKeyboardAction)(\"filterPanel\", this, $element, void 0, clearFilterValue);\n\n    that._addTabIndexToElement($element);\n\n    return $element;\n  },\n  _addTabIndexToElement: function ($element) {\n    if (!this.option(\"useLegacyKeyboardNavigation\")) {\n      var tabindex = this.option(\"tabindex\") || 0;\n      $element.attr(\"tabindex\", tabindex);\n    }\n  },\n  optionChanged: function (args) {\n    switch (args.name) {\n      case \"filterValue\":\n        this._invalidate();\n\n        this.option(\"filterPanel.filterEnabled\", true);\n        args.handled = true;\n        break;\n\n      case \"filterPanel\":\n        this._invalidate();\n\n        args.handled = true;\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _getConditionText: function (fieldText, operationText, valueText) {\n    var result = \"[\".concat(fieldText, \"] \").concat(operationText);\n\n    if ((0, _type.isDefined)(valueText)) {\n      result += valueText;\n    }\n\n    return result;\n  },\n  _getValueMaskedText: function (value) {\n    return Array.isArray(value) ? \"('\".concat(value.join(\"', '\"), \"')\") : \" '\".concat(value, \"'\");\n  },\n  _getValueText: function (field, customOperation, value) {\n    var _this2 = this;\n\n    var deferred = new _deferred.Deferred();\n    var hasCustomOperation = customOperation && customOperation.customizeText;\n\n    if ((0, _type.isDefined)(value) || hasCustomOperation) {\n      if (!hasCustomOperation && field.lookup) {\n        _utils2.default.getCurrentLookupValueText(field, value, function (data) {\n          deferred.resolve(_this2._getValueMaskedText(data));\n        });\n      } else {\n        var displayValue = Array.isArray(value) ? value : _uiGrid_core4.default.getDisplayValue(field, value);\n        (0, _deferred.when)(_utils2.default.getCurrentValueText(field, displayValue, customOperation, FILTER_PANEL_TARGET)).done(function (data) {\n          deferred.resolve(_this2._getValueMaskedText(data));\n        });\n      }\n    } else {\n      deferred.resolve(\"\");\n    }\n\n    return deferred.promise();\n  },\n  getConditionText: function (filterValue, options) {\n    var that = this;\n    var operation = filterValue[1];\n    var deferred = new _deferred.Deferred();\n\n    var customOperation = _utils2.default.getCustomOperation(options.customOperations, operation);\n\n    var operationText;\n\n    var field = _utils2.default.getField(filterValue[0], options.columns);\n\n    var fieldText = field.caption || \"\";\n    var value = filterValue[2];\n\n    if (customOperation) {\n      operationText = customOperation.caption || _inflector2.default.captionize(customOperation.name);\n    } else {\n      if (null === value) {\n        operationText = _utils2.default.getCaptionByOperation(\"=\" === operation ? \"isblank\" : \"isnotblank\", options.filterOperationDescriptions);\n      } else {\n        operationText = _utils2.default.getCaptionByOperation(operation, options.filterOperationDescriptions);\n      }\n    }\n\n    this._getValueText(field, customOperation, value).done(function (valueText) {\n      deferred.resolve(that._getConditionText(fieldText, operationText, valueText));\n    });\n\n    return deferred;\n  },\n  getGroupText: function (filterValue, options, isInnerGroup) {\n    var that = this;\n    var result = new _deferred.Deferred();\n    var textParts = [];\n\n    var groupValue = _utils2.default.getGroupValue(filterValue);\n\n    filterValue.forEach(function (item) {\n      if (_utils2.default.isCondition(item)) {\n        textParts.push(that.getConditionText(item, options));\n      } else {\n        if (_utils2.default.isGroup(item)) {\n          textParts.push(that.getGroupText(item, options, true));\n        }\n      }\n    });\n\n    _deferred.when.apply(this, textParts).done(function () {\n      var text;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      if (\"!\" === groupValue[0]) {\n        var groupText = options.groupOperationDescriptions[\"not\" + groupValue.substring(1, 2).toUpperCase() + groupValue.substring(2)].split(\" \");\n        text = \"\".concat(groupText[0], \" \").concat(args[0]);\n      } else {\n        text = args.join(\" \".concat(options.groupOperationDescriptions[groupValue], \" \"));\n      }\n\n      if (isInnerGroup) {\n        text = \"(\".concat(text, \")\");\n      }\n\n      result.resolve(text);\n    });\n\n    return result;\n  },\n  getFilterText: function (filterValue, customOperations) {\n    var that = this;\n    var options = {\n      customOperations: customOperations,\n      columns: that.getController(\"columns\").getFilteringColumns(),\n      filterOperationDescriptions: that.option(\"filterBuilder.filterOperationDescriptions\"),\n      groupOperationDescriptions: that.option(\"filterBuilder.groupOperationDescriptions\")\n    };\n    return _utils2.default.isCondition(filterValue) ? that.getConditionText(filterValue, options) : that.getGroupText(filterValue, options);\n  }\n});\n\nmodule.exports = {\n  defaultOptions: function () {\n    return {\n      filterPanel: {\n        visible: false,\n        filterEnabled: true,\n        texts: {\n          createFilter: _message2.default.format(\"dxDataGrid-filterPanelCreateFilter\"),\n          clearFilter: _message2.default.format(\"dxDataGrid-filterPanelClearFilter\"),\n          filterEnabledHint: _message2.default.format(\"dxDataGrid-filterPanelFilterEnabledHint\")\n        }\n      }\n    };\n  },\n  views: {\n    filterPanelView: FilterPanelView\n  },\n  extenders: {\n    controllers: {\n      data: {\n        optionChanged: function (args) {\n          switch (args.name) {\n            case \"filterPanel\":\n              this._applyFilter();\n\n              args.handled = true;\n              break;\n\n            default:\n              this.callBase(args);\n          }\n        }\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}