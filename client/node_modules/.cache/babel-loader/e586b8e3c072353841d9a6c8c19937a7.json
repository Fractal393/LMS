{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { extend } from './util';\nimport { Property, Complex, NotifyPropertyChanges, Event } from './notify-property-change';\nimport { Browser } from './browser';\nimport { Base } from './base';\nimport { ChildProperty } from './child-property';\nimport { EventHandler } from './event-handler';\n/**\n * SwipeSettings is a framework module that provides support to handle swipe event like swipe up, swipe right, etc..,\n */\n\nvar SwipeSettings =\n/** @class */\nfunction (_super) {\n  __extends(SwipeSettings, _super);\n\n  function SwipeSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property(50)], SwipeSettings.prototype, \"swipeThresholdDistance\", void 0);\n\n  return SwipeSettings;\n}(ChildProperty);\n\nexport { SwipeSettings };\nvar swipeRegex = /(Up|Down)/;\n/**\n * Touch class provides support to handle the touch event like tap, double tap, tap hold, etc..,\n * ```typescript\n *    let node: HTMLElement;\n * let touchObj: Touch = new Touch({\n *    element: node,\n *    tap: function (e) {\n *        // tap handler function code\n *    }\n *    tapHold: function (e) {\n *        // tap hold handler function code\n *    }\n *    scroll: function (e) {\n *        // scroll handler function code\n *    }\n *    swipe: function (e) {\n *        // swipe handler function code\n *    }\n * });\n * ```\n */\n\nvar Touch =\n/** @class */\nfunction (_super) {\n  __extends(Touch, _super);\n  /* End-Properties */\n\n\n  function Touch(element, options) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.touchAction = true;\n    _this.tapCount = 0;\n\n    _this.startEvent = function (evt) {\n      if (_this.touchAction === true) {\n        var point = _this.updateChangeTouches(evt);\n\n        if (evt.changedTouches !== undefined) {\n          _this.touchAction = false;\n        }\n\n        _this.isTouchMoved = false;\n        _this.movedDirection = '';\n        _this.startPoint = _this.lastMovedPoint = {\n          clientX: point.clientX,\n          clientY: point.clientY\n        };\n        _this.startEventData = point;\n        _this.hScrollLocked = _this.vScrollLocked = false;\n        _this.tStampStart = Date.now();\n        _this.timeOutTapHold = setTimeout(function () {\n          _this.tapHoldEvent(evt);\n        }, _this.tapHoldThreshold);\n        EventHandler.add(_this.element, Browser.touchMoveEvent, _this.moveEvent, _this);\n        EventHandler.add(_this.element, Browser.touchEndEvent, _this.endEvent, _this);\n        EventHandler.add(_this.element, Browser.touchCancelEvent, _this.cancelEvent, _this);\n      }\n    };\n\n    _this.moveEvent = function (evt) {\n      var point = _this.updateChangeTouches(evt);\n\n      _this.movedPoint = point;\n      _this.isTouchMoved = !(point.clientX === _this.startPoint.clientX && point.clientY === _this.startPoint.clientY);\n      var eScrollArgs = {};\n\n      if (_this.isTouchMoved) {\n        clearTimeout(_this.timeOutTapHold);\n\n        _this.calcScrollPoints(evt);\n\n        var scrollArg = {\n          startEvents: _this.startEventData,\n          originalEvent: evt,\n          startX: _this.startPoint.clientX,\n          startY: _this.startPoint.clientY,\n          distanceX: _this.distanceX,\n          distanceY: _this.distanceY,\n          scrollDirection: _this.scrollDirection,\n          velocity: _this.getVelocity(point)\n        };\n        eScrollArgs = extend(eScrollArgs, {}, scrollArg);\n\n        _this.trigger('scroll', eScrollArgs);\n\n        _this.lastMovedPoint = {\n          clientX: point.clientX,\n          clientY: point.clientY\n        };\n      }\n    };\n\n    _this.cancelEvent = function (evt) {\n      clearTimeout(_this.timeOutTapHold);\n      clearTimeout(_this.timeOutTap);\n      _this.tapCount = 0;\n\n      _this.swipeFn(evt);\n\n      EventHandler.remove(_this.element, Browser.touchCancelEvent, _this.cancelEvent);\n    };\n\n    _this.endEvent = function (evt) {\n      _this.swipeFn(evt);\n\n      if (!_this.isTouchMoved) {\n        if (typeof _this.tap === 'function') {\n          _this.trigger('tap', {\n            originalEvent: evt,\n            tapCount: ++_this.tapCount\n          });\n\n          _this.timeOutTap = setTimeout(function () {\n            _this.tapCount = 0;\n          }, _this.tapThreshold);\n        }\n      }\n\n      _this.modeclear();\n    };\n\n    _this.swipeFn = function (evt) {\n      clearTimeout(_this.timeOutTapHold);\n      clearTimeout(_this.timeOutTap);\n\n      var point = _this.updateChangeTouches(evt);\n\n      var diffX = point.clientX - _this.startPoint.clientX;\n      var diffY = point.clientY - _this.startPoint.clientY;\n      diffX = Math.floor(diffX < 0 ? -1 * diffX : diffX);\n      diffY = Math.floor(diffY < 0 ? -1 * diffY : diffX);\n      _this.isTouchMoved = diffX > 1 || diffY > 1;\n      _this.endPoint = point;\n\n      _this.calcPoints(evt);\n\n      var swipeArgs = {\n        originalEvent: evt,\n        startEvents: _this.startEventData,\n        startX: _this.startPoint.clientX,\n        startY: _this.startPoint.clientY,\n        distanceX: _this.distanceX,\n        distanceY: _this.distanceY,\n        swipeDirection: _this.movedDirection,\n        velocity: _this.getVelocity(point)\n      };\n\n      if (_this.isTouchMoved) {\n        var eSwipeArgs = void 0;\n        var tDistance = _this.swipeSettings.swipeThresholdDistance;\n        eSwipeArgs = extend(eSwipeArgs, _this.defaultArgs, swipeArgs);\n        var canTrigger = false;\n        var ele = _this.element;\n\n        var scrollBool = _this.isScrollable(ele);\n\n        var moved = swipeRegex.test(_this.movedDirection);\n\n        if (tDistance < _this.distanceX && !moved || tDistance < _this.distanceY && moved) {\n          if (!scrollBool) {\n            canTrigger = true;\n          } else {\n            canTrigger = _this.checkSwipe(ele, moved);\n          }\n        }\n\n        if (canTrigger) {\n          _this.trigger('swipe', eSwipeArgs);\n        }\n      }\n\n      _this.modeclear();\n    };\n\n    _this.modeclear = function () {\n      _this.modeClear = setTimeout(function () {\n        _this.touchAction = true;\n      }, typeof _this.tap !== 'function' ? 0 : 20);\n      _this.lastTapTime = new Date().getTime();\n      EventHandler.remove(_this.element, Browser.touchMoveEvent, _this.moveEvent);\n      EventHandler.remove(_this.element, Browser.touchEndEvent, _this.endEvent);\n      EventHandler.remove(_this.element, Browser.touchCancelEvent, _this.cancelEvent);\n    };\n\n    _this.bind();\n\n    return _this;\n  } // triggers when property changed \n\n  /**\n   * @private\n   * @param newProp\n   * @param oldProp\n   */\n\n\n  Touch.prototype.onPropertyChanged = function (newProp, oldProp) {//No Code to handle\n  };\n\n  Touch.prototype.bind = function () {\n    this.wireEvents();\n\n    if (Browser.isIE) {\n      this.element.classList.add('e-block-touch');\n    }\n  };\n  /**\n   * To destroy the touch instance.\n   * @return {void}\n   */\n\n\n  Touch.prototype.destroy = function () {\n    this.unwireEvents();\n\n    _super.prototype.destroy.call(this);\n  }; // Need to changes the event binding once we updated the event handler.\n\n\n  Touch.prototype.wireEvents = function () {\n    EventHandler.add(this.element, Browser.touchStartEvent, this.startEvent, this);\n  };\n\n  Touch.prototype.unwireEvents = function () {\n    EventHandler.remove(this.element, Browser.touchStartEvent, this.startEvent);\n  };\n  /**\n   * Returns module name as touch\n   * @returns {string}\n   * @private\n   */\n\n\n  Touch.prototype.getModuleName = function () {\n    return 'touch';\n  };\n  /**\n   * Returns if the HTML element is Scrollable.\n   * @param {HTMLElement} element - HTML Element to check if Scrollable.\n   * @returns {boolean}\n   */\n\n\n  Touch.prototype.isScrollable = function (element) {\n    var eleStyle = getComputedStyle(element);\n    var style = eleStyle.overflow + eleStyle.overflowX + eleStyle.overflowY;\n\n    if (/(auto|scroll)/.test(style)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  Touch.prototype.tapHoldEvent = function (evt) {\n    this.tapCount = 0;\n    this.touchAction = true;\n    var eTapArgs;\n    EventHandler.remove(this.element, Browser.touchMoveEvent, this.moveEvent);\n    EventHandler.remove(this.element, Browser.touchEndEvent, this.endEvent);\n    eTapArgs = {\n      originalEvent: evt\n    };\n    this.trigger('tapHold', eTapArgs);\n    EventHandler.remove(this.element, Browser.touchCancelEvent, this.cancelEvent);\n  };\n\n  Touch.prototype.calcPoints = function (evt) {\n    var point = this.updateChangeTouches(evt);\n    this.defaultArgs = {\n      originalEvent: evt\n    };\n    this.distanceX = Math.abs(Math.abs(point.clientX) - Math.abs(this.startPoint.clientX));\n    this.distanceY = Math.abs(Math.abs(point.clientY) - Math.abs(this.startPoint.clientY));\n\n    if (this.distanceX > this.distanceY) {\n      this.movedDirection = point.clientX > this.startPoint.clientX ? 'Right' : 'Left';\n    } else {\n      this.movedDirection = point.clientY < this.startPoint.clientY ? 'Up' : 'Down';\n    }\n  };\n\n  Touch.prototype.calcScrollPoints = function (evt) {\n    var point = this.updateChangeTouches(evt);\n    this.defaultArgs = {\n      originalEvent: evt\n    };\n    this.distanceX = Math.abs(Math.abs(point.clientX) - Math.abs(this.lastMovedPoint.clientX));\n    this.distanceY = Math.abs(Math.abs(point.clientY) - Math.abs(this.lastMovedPoint.clientY));\n\n    if ((this.distanceX > this.distanceY || this.hScrollLocked === true) && this.vScrollLocked === false) {\n      this.scrollDirection = point.clientX > this.lastMovedPoint.clientX ? 'Right' : 'Left';\n      this.hScrollLocked = true;\n    } else {\n      this.scrollDirection = point.clientY < this.lastMovedPoint.clientY ? 'Up' : 'Down';\n      this.vScrollLocked = true;\n    }\n  };\n\n  Touch.prototype.getVelocity = function (pnt) {\n    var newX = pnt.clientX;\n    var newY = pnt.clientY;\n    var newT = Date.now();\n    var xDist = newX - this.startPoint.clientX;\n    var yDist = newY - this.startPoint.clientX;\n    var interval = newT - this.tStampStart;\n    return Math.sqrt(xDist * xDist + yDist * yDist) / interval;\n  }; // tslint:disable-next-line:no-any\n\n\n  Touch.prototype.checkSwipe = function (ele, flag) {\n    var keys = ['scroll', 'offset'];\n    var temp = flag ? ['Height', 'Top'] : ['Width', 'Left'];\n\n    if (ele[keys[0] + temp[0]] <= ele[keys[1] + temp[0]]) {\n      return true;\n    }\n\n    return ele[keys[0] + temp[1]] === 0 || ele[keys[1] + temp[0]] + ele[keys[0] + temp[1]] >= ele[keys[0] + temp[0]];\n  };\n\n  Touch.prototype.updateChangeTouches = function (evt) {\n    // tslint:disable-next-line:max-line-length\n    var point = evt.changedTouches && evt.changedTouches.length !== 0 ? evt.changedTouches[0] : evt;\n    return point;\n  };\n\n  __decorate([Event()], Touch.prototype, \"tap\", void 0);\n\n  __decorate([Event()], Touch.prototype, \"tapHold\", void 0);\n\n  __decorate([Event()], Touch.prototype, \"swipe\", void 0);\n\n  __decorate([Event()], Touch.prototype, \"scroll\", void 0);\n\n  __decorate([Property(350)], Touch.prototype, \"tapThreshold\", void 0);\n\n  __decorate([Property(750)], Touch.prototype, \"tapHoldThreshold\", void 0);\n\n  __decorate([Complex({}, SwipeSettings)], Touch.prototype, \"swipeSettings\", void 0);\n\n  Touch = __decorate([NotifyPropertyChanges], Touch);\n  return Touch;\n}(Base);\n\nexport { Touch };","map":null,"metadata":{},"sourceType":"module"}