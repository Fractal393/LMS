{"ast":null,"code":"/**\r\n * DevExtreme (core/dom_component.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _config = require(\"./config\");\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _errors = require(\"./errors\");\n\nvar _errors2 = _interopRequireDefault(_errors);\n\nvar _resize_callbacks = require(\"../core/utils/resize_callbacks\");\n\nvar _resize_callbacks2 = _interopRequireDefault(_resize_callbacks);\n\nvar _component = require(\"./component\");\n\nvar _component2 = _interopRequireDefault(_component);\n\nvar _template_manager = require(\"./template_manager\");\n\nvar _template_manager2 = _interopRequireDefault(_template_manager);\n\nvar _public_component = require(\"./utils/public_component\");\n\nvar _element_data = require(\"./element_data\");\n\nvar _iterator = require(\"./utils/iterator\");\n\nvar _extend = require(\"./utils/extend\");\n\nvar _dom = require(\"../core/utils/dom\");\n\nvar _common = require(\"./utils/common\");\n\nvar _array = require(\"./utils/array\");\n\nvar _type = require(\"./utils/type\");\n\nvar _window = require(\"../core/utils/window\");\n\nvar _short = require(\"../events/short\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar abstract = _component2.default.abstract;\n\nvar DOMComponent = _component2.default.inherit({\n  _getDefaultOptions: function () {\n    return (0, _extend.extend)(this.callBase(), {\n      width: void 0,\n      height: void 0,\n      rtlEnabled: (0, _config2.default)().rtlEnabled,\n      elementAttr: {},\n      disabled: false,\n      integrationOptions: {}\n    }, this._useTemplates() ? _template_manager2.default.createDefaultOptions() : {});\n  },\n  ctor: function (element, options) {\n    this._createElement(element);\n\n    (0, _public_component.attachInstanceToElement)(this._$element, this, this._dispose);\n    this.callBase(options);\n  },\n  _createElement: function (element) {\n    this._$element = (0, _renderer2.default)(element);\n  },\n  _getSynchronizableOptionsForCreateComponent: function () {\n    return [\"rtlEnabled\", \"disabled\", \"templatesRenderAsynchronously\"];\n  },\n  _visibilityChanged: abstract,\n  _dimensionChanged: abstract,\n  _init: function () {\n    this.callBase();\n\n    this._attachWindowResizeCallback();\n\n    this._initTemplateManager();\n  },\n  _setOptionsByDevice: function (instanceCustomRules) {\n    this.callBase([].concat(this.constructor._classCustomRules || [], instanceCustomRules || []));\n  },\n  _isInitialOptionValue: function (name) {\n    var isCustomOption = this.constructor._classCustomRules && Object.prototype.hasOwnProperty.call(this._convertRulesToOptions(this.constructor._classCustomRules), name);\n    return !isCustomOption && this.callBase(name);\n  },\n  _attachWindowResizeCallback: function () {\n    if (this._isDimensionChangeSupported()) {\n      var windowResizeCallBack = this._windowResizeCallBack = this._dimensionChanged.bind(this);\n\n      _resize_callbacks2.default.add(windowResizeCallBack);\n    }\n  },\n  _isDimensionChangeSupported: function () {\n    return this._dimensionChanged !== abstract;\n  },\n  _renderComponent: function () {\n    this._initMarkup();\n\n    (0, _window.hasWindow)() && this._render();\n  },\n  _initMarkup: function () {\n    var _ref = this.option() || {},\n        rtlEnabled = _ref.rtlEnabled;\n\n    this._renderElementAttributes();\n\n    this._toggleRTLDirection(rtlEnabled);\n\n    this._renderVisibilityChange();\n\n    this._renderDimensions();\n  },\n  _render: function () {\n    this._attachVisibilityChangeHandlers();\n  },\n  _renderElementAttributes: function () {\n    var _ref2 = this.option() || {},\n        elementAttr = _ref2.elementAttr;\n\n    var attributes = (0, _extend.extend)({}, elementAttr);\n    var classNames = attributes.class;\n    delete attributes.class;\n    this.$element().attr(attributes).addClass(classNames);\n  },\n  _renderVisibilityChange: function () {\n    if (this._isDimensionChangeSupported()) {\n      this._attachDimensionChangeHandlers();\n    }\n\n    if (this._isVisibilityChangeSupported()) {\n      var $element = this.$element();\n      $element.addClass(\"dx-visibility-change-handler\");\n    }\n  },\n  _renderDimensions: function () {\n    var $element = this.$element();\n    var element = $element.get(0);\n\n    var width = this._getOptionValue(\"width\", element);\n\n    var height = this._getOptionValue(\"height\", element);\n\n    if (this._isCssUpdateRequired(element, height, width)) {\n      $element.css({\n        width: null === width ? \"\" : width,\n        height: null === height ? \"\" : height\n      });\n    }\n  },\n  _isCssUpdateRequired: function (element, height, width) {\n    return !!((0, _type.isDefined)(width) || (0, _type.isDefined)(height) || element.style.width || element.style.height);\n  },\n  _attachDimensionChangeHandlers: function () {\n    var _this = this;\n\n    var $el = this.$element();\n    var namespace = \"\".concat(this.NAME, \"VisibilityChange\");\n\n    _short.resize.off($el, {\n      namespace: namespace\n    });\n\n    _short.resize.on($el, function () {\n      return _this._dimensionChanged();\n    }, {\n      namespace: namespace\n    });\n  },\n  _attachVisibilityChangeHandlers: function () {\n    var _this2 = this;\n\n    if (this._isVisibilityChangeSupported()) {\n      var $el = this.$element();\n      var namespace = \"\".concat(this.NAME, \"VisibilityChange\");\n      this._isHidden = !this._isVisible();\n\n      _short.visibility.off($el, {\n        namespace: namespace\n      });\n\n      _short.visibility.on($el, function () {\n        return _this2._checkVisibilityChanged(\"shown\");\n      }, function () {\n        return _this2._checkVisibilityChanged(\"hiding\");\n      }, {\n        namespace: namespace\n      });\n    }\n  },\n  _isVisible: function () {\n    var $element = this.$element();\n    return $element.is(\":visible\");\n  },\n  _checkVisibilityChanged: function (action) {\n    var isVisible = this._isVisible();\n\n    if (isVisible) {\n      if (\"hiding\" === action && !this._isHidden) {\n        this._visibilityChanged(false);\n\n        this._isHidden = true;\n      } else {\n        if (\"shown\" === action && this._isHidden) {\n          this._isHidden = false;\n\n          this._visibilityChanged(true);\n        }\n      }\n    }\n  },\n  _isVisibilityChangeSupported: function () {\n    return this._visibilityChanged !== abstract && (0, _window.hasWindow)();\n  },\n  _clean: _common.noop,\n  _modelByElement: function () {\n    var _this$option = this.option(),\n        modelByElement = _this$option.modelByElement;\n\n    var $element = this.$element();\n    return modelByElement ? modelByElement($element) : void 0;\n  },\n  _invalidate: function () {\n    if (this._isUpdateAllowed()) {\n      throw _errors2.default.Error(\"E0007\");\n    }\n\n    this._requireRefresh = true;\n  },\n  _refresh: function () {\n    this._clean();\n\n    this._renderComponent();\n  },\n  _dispose: function () {\n    this._templateManager && this._templateManager.dispose();\n    this.callBase();\n\n    this._clean();\n\n    this._detachWindowResizeCallback();\n  },\n  _detachWindowResizeCallback: function () {\n    if (this._isDimensionChangeSupported()) {\n      _resize_callbacks2.default.remove(this._windowResizeCallBack);\n    }\n  },\n  _toggleRTLDirection: function (rtl) {\n    var $element = this.$element();\n    $element.toggleClass(\"dx-rtl\", rtl);\n  },\n  _createComponent: function (element, component) {\n    var _this3 = this;\n\n    var config = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};\n    var synchronizableOptions = (0, _common.grep)(this._getSynchronizableOptionsForCreateComponent(), function (value) {\n      return !(value in config);\n    });\n\n    var _this$option2 = this.option(),\n        integrationOptions = _this$option2.integrationOptions;\n\n    var _this$option3 = this.option(),\n        nestedComponentOptions = _this$option3.nestedComponentOptions;\n\n    nestedComponentOptions = nestedComponentOptions || _common.noop;\n    var nestedComponentConfig = (0, _extend.extend)({\n      integrationOptions: integrationOptions\n    }, nestedComponentOptions(this));\n    synchronizableOptions.forEach(function (optionName) {\n      return nestedComponentConfig[optionName] = _this3.option(optionName);\n    });\n\n    this._extendConfig(config, nestedComponentConfig);\n\n    var instance = void 0;\n\n    if ((0, _type.isString)(component)) {\n      var $element = (0, _renderer2.default)(element)[component](config);\n      instance = $element[component](\"instance\");\n    } else {\n      if (element) {\n        instance = component.getInstance(element);\n\n        if (instance) {\n          instance.option(config);\n        } else {\n          instance = new component(element, config);\n        }\n      }\n    }\n\n    if (instance) {\n      var optionChangedHandler = function (_ref3) {\n        var name = _ref3.name,\n            value = _ref3.value;\n\n        if ((0, _array.inArray)(name, synchronizableOptions) >= 0) {\n          instance.option(name, value);\n        }\n      };\n\n      this.on(\"optionChanged\", optionChangedHandler);\n      instance.on(\"disposing\", function () {\n        return _this3.off(\"optionChanged\", optionChangedHandler);\n      });\n    }\n\n    return instance;\n  },\n  _extendConfig: function (config, extendConfig) {\n    (0, _iterator.each)(extendConfig, function (key, value) {\n      !Object.prototype.hasOwnProperty.call(config, key) && (config[key] = value);\n    });\n  },\n  _defaultActionConfig: function () {\n    var $element = this.$element();\n\n    var context = this._modelByElement($element);\n\n    return (0, _extend.extend)(this.callBase(), {\n      context: context\n    });\n  },\n  _defaultActionArgs: function () {\n    var $element = this.$element();\n\n    var model = this._modelByElement($element);\n\n    var element = this.element();\n    return (0, _extend.extend)(this.callBase(), {\n      element: element,\n      model: model\n    });\n  },\n  _optionChanged: function (args) {\n    switch (args.name) {\n      case \"width\":\n      case \"height\":\n        this._renderDimensions();\n\n        break;\n\n      case \"rtlEnabled\":\n        this._invalidate();\n\n        break;\n\n      case \"elementAttr\":\n        this._renderElementAttributes();\n\n        break;\n\n      case \"disabled\":\n      case \"integrationOptions\":\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _removeAttributes: function (element) {\n    var attrs = element.attributes;\n\n    for (var i = attrs.length - 1; i >= 0; i--) {\n      var attr = attrs[i];\n\n      if (attr) {\n        var name = attr.name;\n\n        if (!name.indexOf(\"aria-\") || name.indexOf(\"dx-\") !== -1 || \"role\" === name || \"style\" === name || \"tabindex\" === name) {\n          element.removeAttribute(name);\n        }\n      }\n    }\n  },\n  _removeClasses: function (element) {\n    element.className = element.className.split(\" \").filter(function (cssClass) {\n      return 0 !== cssClass.lastIndexOf(\"dx-\", 0);\n    }).join(\" \");\n  },\n  _updateDOMComponent: function (renderRequired) {\n    if (renderRequired) {\n      this._renderComponent();\n    } else {\n      if (this._requireRefresh) {\n        this._requireRefresh = false;\n\n        this._refresh();\n      }\n    }\n  },\n  endUpdate: function () {\n    var renderRequired = this._isInitializingRequired();\n\n    this.callBase();\n    this._isUpdateAllowed() && this._updateDOMComponent(renderRequired);\n  },\n  $element: function () {\n    return this._$element;\n  },\n  element: function () {\n    var $element = this.$element();\n    return (0, _dom.getPublicElement)($element);\n  },\n  dispose: function () {\n    var element = this.$element().get(0);\n    (0, _element_data.cleanDataRecursive)(element, true);\n    element.textContent = \"\";\n\n    this._removeAttributes(element);\n\n    this._removeClasses(element);\n  },\n  resetOption: function (optionName) {\n    this.callBase(optionName);\n\n    if (\"width\" === optionName || \"height\" === optionName) {\n      var initialOption = this.initialOption(optionName);\n      !(0, _type.isDefined)(initialOption) && this.$element().css(optionName, \"\");\n    }\n  },\n  _getAnonymousTemplateName: function () {\n    return;\n  },\n  _initTemplateManager: function () {\n    if (this._templateManager || !this._useTemplates()) {\n      return;\n    }\n\n    var _this$option4 = this.option(),\n        _this$option4$integra = _this$option4.integrationOptions,\n        integrationOptions = void 0 === _this$option4$integra ? {} : _this$option4$integra;\n\n    var createTemplate = integrationOptions.createTemplate;\n    this._templateManager = new _template_manager2.default(createTemplate, this._getAnonymousTemplateName());\n\n    this._initTemplates();\n  },\n  _initTemplates: function () {\n    var _this4 = this;\n\n    var _this$_templateManage = this._templateManager.extractTemplates(this.$element()),\n        templates = _this$_templateManage.templates,\n        anonymousTemplateMeta = _this$_templateManage.anonymousTemplateMeta;\n\n    var anonymousTemplate = this.option(\"integrationOptions.templates.\".concat(anonymousTemplateMeta.name));\n    templates.forEach(function (_ref4) {\n      var name = _ref4.name,\n          template = _ref4.template;\n\n      _this4._options.silent(\"integrationOptions.templates.\".concat(name), template);\n    });\n\n    if (anonymousTemplateMeta.name && !anonymousTemplate) {\n      this._options.silent(\"integrationOptions.templates.\".concat(anonymousTemplateMeta.name), anonymousTemplateMeta.template);\n    }\n  },\n  _getTemplateByOption: function (optionName) {\n    return this._getTemplate(this.option(optionName));\n  },\n  _getTemplate: function (templateSource) {\n    var templates = this.option(\"integrationOptions.templates\");\n    var isAsyncTemplate = this.option(\"templatesRenderAsynchronously\");\n    var skipTemplates = this.option(\"integrationOptions.skipTemplates\");\n    return this._templateManager.getTemplate(templateSource, templates, {\n      isAsyncTemplate: isAsyncTemplate,\n      skipTemplates: skipTemplates\n    }, this);\n  },\n  _saveTemplate: function (name, template) {\n    this._setOptionWithoutOptionChange(\"integrationOptions.templates.\" + name, this._templateManager._createTemplate(template));\n  },\n  _useTemplates: function () {\n    return true;\n  }\n});\n\nDOMComponent.getInstance = function (element) {\n  return (0, _public_component.getInstanceByElement)((0, _renderer2.default)(element), this);\n};\n\nDOMComponent.defaultOptions = function (rule) {\n  this._classCustomRules = this._classCustomRules || [];\n\n  this._classCustomRules.push(rule);\n};\n\nmodule.exports = DOMComponent;\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}