{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Component, Property, NotifyPropertyChanges, isUndefined } from '@syncfusion/ej2-base';\nimport { Collection, Draggable, isNullOrUndefined, append, updateBlazorTemplate, setValue } from '@syncfusion/ej2-base';\nimport { Event, formatUnit, ChildProperty, compile, closest, isBlazor, SanitizeHtmlHelper, getValue } from '@syncfusion/ej2-base';\nimport { setStyleAttribute as setStyle, addClass, detach, removeClass, EventHandler, Browser, extend } from '@syncfusion/ej2-base'; // constant class definitions\n\nvar preventSelect = 'e-prevent';\nvar dragging = 'e-dragging';\nvar draggable = 'e-draggable';\nvar dragRestrict = 'e-drag-restrict';\nvar drag = 'e-drag';\nvar resize = 'e-resize';\nvar resizeicon = 'e-dl-icon';\nvar responsive = 'e-responsive';\nvar east = 'e-east';\nvar west = 'e-west';\nvar north = 'e-north';\nvar south = 'e-south';\nvar single = 'e-single';\nvar double = 'e-double';\nvar northEast = 'e-north-east';\nvar southEast = 'e-south-east';\nvar northWest = 'e-north-west';\nvar southWest = 'e-south-west';\nvar panel = 'e-panel';\nvar panelContent = 'e-panel-content';\nvar panelContainer = 'e-panel-container';\nvar disable = 'e-disabled';\nvar header = 'e-panel-header';\nvar panelTransition = 'e-panel-transition';\n/**\n * Defines the panel of the DashboardLayout component.\n */\n\nvar Panel =\n/** @class */\nfunction (_super) {\n  __extends(Panel, _super);\n\n  function Panel() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property('')], Panel.prototype, \"id\", void 0);\n\n  __decorate([Property('')], Panel.prototype, \"cssClass\", void 0);\n\n  __decorate([Property('')], Panel.prototype, \"header\", void 0);\n\n  __decorate([Property('')], Panel.prototype, \"content\", void 0);\n\n  __decorate([Property(true)], Panel.prototype, \"enabled\", void 0);\n\n  __decorate([Property(0)], Panel.prototype, \"row\", void 0);\n\n  __decorate([Property(0)], Panel.prototype, \"col\", void 0);\n\n  __decorate([Property(1)], Panel.prototype, \"sizeX\", void 0);\n\n  __decorate([Property(1)], Panel.prototype, \"sizeY\", void 0);\n\n  __decorate([Property(1)], Panel.prototype, \"minSizeY\", void 0);\n\n  __decorate([Property(1)], Panel.prototype, \"minSizeX\", void 0);\n\n  __decorate([Property(null)], Panel.prototype, \"maxSizeY\", void 0);\n\n  __decorate([Property(null)], Panel.prototype, \"maxSizeX\", void 0);\n\n  __decorate([Property(1000)], Panel.prototype, \"zIndex\", void 0);\n\n  return Panel;\n}(ChildProperty);\n\nexport { Panel };\n/**\n * The DashboardLayout is a grid structured layout control, that helps to create a dashboard with panels.\n * Panels hold the UI components or data to be visualized with flexible options like resize, reorder, drag-n-drop, remove and add,\n * that allows users to easily place the panels at a desired position within the grid layout.\n * ```html\n * <div id=\"default-layout\">\n * ```\n * ```typescript\n * <script>\n *   let dashBoardObject : DashboardLayout = new DashboardLayout();\n *   dashBoardObject.appendTo('#default-layout');\n * </script>\n * ```\n */\n\nvar DashboardLayout =\n/** @class */\nfunction (_super) {\n  __extends(DashboardLayout, _super);\n\n  function DashboardLayout(options, element) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.rows = 1;\n    _this.panelID = 0;\n    _this.movePanelCalled = false;\n    _this.resizeCalled = false;\n    _this.mOffX = 0;\n    _this.mOffY = 0;\n    _this.maxTop = 9999;\n    _this.maxRows = 100;\n    _this.mouseX = 0;\n    _this.mouseY = 0;\n    _this.minTop = 0;\n    _this.minLeft = 0;\n    _this.isBlazor = false;\n    _this.isInlineRendering = false;\n    _this.removeAllCalled = false;\n    setValue('mergePersistData', _this.mergePersistPanelData, _this);\n    return _this;\n  }\n  /**\n   * Initialize the event handler\n   * @private\n   */\n\n\n  DashboardLayout.prototype.preRender = function () {\n    this.isBlazor = isBlazor() && this.isServerRendered;\n    this.panelCollection = [];\n    this.sortedArray = [];\n    this.gridPanelCollection = [];\n    this.overlapElement = [];\n    this.overlapElementClone = [];\n    this.overlapSubElementClone = [];\n    this.collisionChecker = {};\n    this.dragCollection = [];\n    this.elementRef = {\n      top: '',\n      left: '',\n      height: '',\n      width: ''\n    };\n    this.dimensions = [];\n    this.allItems = [];\n    this.oldRowCol = {};\n    this.availableClasses = [];\n    this.setOldRowCol();\n    this.calculateCellSize();\n    this.contentTemplateChild = [].slice.call(this.element.children);\n  };\n\n  DashboardLayout.prototype.setOldRowCol = function () {\n    for (var i = 0; i < this.panels.length; i++) {\n      if (!this.panels[i].id) {\n        this.panelPropertyChange(this.panels[i], {\n          id: 'layout_' + this.panelID.toString()\n        });\n        this.panelID = this.panelID + 1;\n      }\n\n      this.oldRowCol[this.panels[i].id] = {\n        row: this.panels[i].row,\n        col: this.panels[i].col\n      };\n    }\n  };\n\n  DashboardLayout.prototype.createPanelElement = function (cssClass, idValue) {\n    var ele = this.createElement('div');\n\n    if (cssClass && cssClass.length > 0) {\n      addClass([ele], cssClass);\n    }\n\n    if (idValue) {\n      ele.setAttribute('id', idValue);\n    }\n\n    return ele;\n  };\n  /**\n   * To Initialize the control rendering.\n   * @returns void\n   * @private\n   */\n\n\n  DashboardLayout.prototype.render = function () {\n    this.initialize();\n    this.isRenderComplete = true;\n\n    if (this.showGridLines && !this.checkMediaQuery()) {\n      this.initGridLines();\n    }\n\n    this.updateDragArea();\n    this.renderComplete();\n    this.updateServerPanelData();\n  };\n\n  DashboardLayout.prototype.updateServerPanelData = function () {\n    if (isBlazor() && this.isServerRendered) {\n      this.setProperties({\n        panels: this.panels\n      }, true);\n      this.allowServerDataBinding = true;\n      this.serverDataBind();\n    }\n  };\n\n  DashboardLayout.prototype.initGridLines = function () {\n    this.table = document.createElement('table');\n    var tbody = document.createElement('tbody');\n    this.table.classList.add('e-dashboard-gridline-table');\n\n    for (var i = 0; i < this.maxRow(); i++) {\n      var tr = document.createElement('tr');\n\n      for (var j = 0; j < this.columns; j++) {\n        var td = document.createElement('td');\n        td.classList.add('e-dashboard-gridline');\n        this.setAttributes({\n          value: {\n            row: i.toString(),\n            col: j.toString(),\n            sizeX: '1',\n            sizeY: '1'\n          }\n        }, td);\n        td.setAttribute('id', '' + j);\n        this.setPanelPosition(td, i, j);\n        this.setHeightAndWidth(td, {\n          row: i,\n          col: j,\n          sizeX: 1,\n          sizeY: 1\n        });\n        tr.appendChild(td);\n      }\n\n      tbody.appendChild(tr);\n    }\n\n    this.table.appendChild(tbody);\n    this.element.appendChild(this.table);\n  };\n\n  DashboardLayout.prototype.initialize = function () {\n    this.updateRowHeight();\n\n    if (this.element.childElementCount > 0 && this.element.querySelectorAll('.e-panel').length > 0 && !(this.isBlazor && this.panels.length > 0)) {\n      var panelElements = [];\n      this.setProperties({\n        panels: []\n      }, true);\n      this.isInlineRendering = true;\n\n      for (var i = 0; i < this.element.querySelectorAll('.e-panel').length; i++) {\n        panelElements.push(this.element.querySelectorAll('.e-panel')[i]);\n      }\n\n      for (var i = 0; i < panelElements.length; i++) {\n        var panelElement = panelElements[i];\n\n        if (this.enableRtl) {\n          addClass([panelElement], 'e-rtl');\n        }\n\n        this.getInlinePanels(panelElement);\n        this.maxCol();\n        this.maxRow();\n      }\n\n      for (var i = 0; i < this.panels.length; i++) {\n        var panelElement = this.element.querySelector('#' + this.panels[i].id);\n        this.setMinMaxValues(this.panels[i]);\n\n        if (this.maxColumnValue < this.panels[i].col || this.maxColumnValue < this.panels[i].col + this.panels[i].sizeX) {\n          var colValue = this.maxColumnValue - this.panels[i].sizeX;\n          this.panelPropertyChange(this.panels[i], {\n            col: colValue < 0 ? 0 : colValue\n          });\n        }\n\n        this.setXYAttributes(panelElement, this.panels[i]);\n        this.isBlazor = false;\n        var panel_1 = this.renderPanels(panelElement, this.panels[i], this.panels[i].id, false);\n        this.isBlazor = isBlazor() && this.isServerRendered;\n        this.panelCollection.push(panel_1);\n        this.setHeightAndWidth(panelElement, this.panels[i]);\n        this.tempObject = this;\n\n        if (this.mediaQuery && !window.matchMedia('(' + this.mediaQuery + ')').matches) {\n          this.setPanelPosition(panelElement, this.panels[i].row, this.panels[i].col);\n          this.mainElement = panelElement;\n          this.updatePanelLayout(panelElement, this.panels[i]);\n          this.mainElement = null;\n        }\n\n        this.setClasses([panelElement]);\n      }\n\n      this.updateOldRowColumn();\n\n      if (this.checkMediaQuery()) {\n        this.checkMediaQuerySizing();\n      }\n    } else {\n      this.renderDashBoardCells(this.panels);\n    }\n\n    if (this.allowDragging && (this.mediaQuery ? !window.matchMedia('(' + this.mediaQuery + ')').matches : true)) {\n      this.enableDraggingContent(this.panelCollection);\n    }\n\n    this.sortedPanel();\n    this.bindEvents();\n    this.updatePanels();\n    this.updateCloneArrayObject();\n    this.checkColumnValue = this.maxColumnValue;\n\n    if (!this.checkMediaQuery()) {\n      this.panelResponsiveUpdate();\n    }\n\n    if (!this.isBlazor) {\n      this.setEnableRtl();\n    }\n  };\n\n  DashboardLayout.prototype.checkMediaQuery = function () {\n    return this.mediaQuery && window.matchMedia('(' + this.mediaQuery + ')').matches;\n  };\n\n  DashboardLayout.prototype.calculateCellSize = function () {\n    this.cellSize = [];\n\n    if (this.checkMediaQuery()) {\n      this.cellSize[1] = this.element.parentElement && this.element.parentElement.offsetWidth / this.cellAspectRatio;\n    } else {\n      this.cellSize[0] = this.element.parentElement && this.element.parentElement.offsetWidth;\n      this.cellSize[0] = this.element.parentElement && (this.element.parentElement.offsetWidth - (this.maxCol() - 1) * this.cellSpacing[0]) / this.maxCol();\n      this.cellSize[1] = this.cellSize[0] / this.cellAspectRatio;\n    }\n  };\n\n  DashboardLayout.prototype.maxRow = function (recheck) {\n    var maxRow = 1;\n\n    if (this.rows > 1 && isNullOrUndefined(recheck)) {\n      maxRow = this.rows;\n      return maxRow;\n    }\n\n    for (var i = 0; i < this.panels.length; i++) {\n      if (this.panels[i].sizeY + this.panels[i].row > maxRow) {\n        maxRow = this.panels[i].sizeY + this.panels[i].row;\n      }\n    }\n\n    if (this.panels.length === 0) {\n      maxRow = this.columns;\n    }\n\n    return maxRow;\n  };\n\n  DashboardLayout.prototype.maxCol = function () {\n    var maxCol = 1;\n    maxCol = this.columns;\n    this.maxColumnValue = maxCol;\n    return maxCol;\n  };\n\n  DashboardLayout.prototype.updateOldRowColumn = function () {\n    for (var i = 0; i < this.panels.length; i++) {\n      var id = this.panels[i].id;\n\n      if (document.getElementById(id)) {\n        var row = parseInt(document.getElementById(id).getAttribute('data-row'), 10);\n        var col = parseInt(document.getElementById(id).getAttribute('data-col'), 10);\n        this.oldRowCol[this.panels[i].id] = {\n          row: row,\n          col: col\n        };\n      } else {\n        continue;\n      }\n    }\n  };\n\n  DashboardLayout.prototype.createSubElement = function (cssClass, idValue, className) {\n    var element = this.createElement('div');\n\n    if (className) {\n      addClass([element], [className]);\n    }\n\n    if (cssClass && cssClass.length > 0) {\n      addClass([element], cssClass);\n    }\n\n    if (idValue) {\n      element.setAttribute('id', idValue);\n    }\n\n    return element;\n  };\n\n  DashboardLayout.prototype.templateParser = function (template) {\n    if (template) {\n      try {\n        if (document.querySelectorAll(template).length) {\n          return compile(document.querySelector(template).innerHTML.trim());\n        }\n      } catch (error) {\n        var sanitizedValue = SanitizeHtmlHelper.sanitize(template);\n        return compile(this.enableHtmlSanitizer && typeof template === 'string' ? sanitizedValue : template);\n      }\n    }\n\n    return undefined;\n  };\n\n  DashboardLayout.prototype.renderTemplate = function (content, appendElement, type, isStringTemplate) {\n    var templateFn = this.templateParser(content);\n    var templateElements = [];\n\n    for (var _i = 0, _a = templateFn({}, null, null, type, isStringTemplate); _i < _a.length; _i++) {\n      var item = _a[_i];\n      templateElements.push(item);\n    }\n\n    append([].slice.call(templateElements), appendElement);\n  };\n\n  DashboardLayout.prototype.renderPanels = function (cellElement, panelModel, panelId, isStringTemplate) {\n    if (!this.isBlazor) {\n      addClass([cellElement], [panel, panelTransition]);\n    }\n\n    var cssClass = panelModel.cssClass ? panelModel.cssClass.split(' ') : null;\n    this.panelContent = cellElement.querySelector('.e-panel-container') ? cellElement.querySelector('.e-panel-container') : this.createSubElement(cssClass, cellElement.id + '_content', panelContainer);\n\n    if (!this.isBlazor) {\n      cellElement.appendChild(this.panelContent);\n\n      if (!panelModel.enabled) {\n        this.disablePanel(cellElement);\n      }\n    }\n\n    if (panelModel.header) {\n      var headerTemplateElement = cellElement.querySelector('.e-panel-header') ? cellElement.querySelector('.e-panel-header') : this.createSubElement([], cellElement.id + 'template', '');\n\n      if (!this.isBlazor) {\n        addClass([headerTemplateElement], [header]);\n      }\n\n      if (!cellElement.querySelector('.e-panel-header') && !this.isBlazor) {\n        var id = this.element.id + 'HeaderTemplate' + panelId;\n        this.renderTemplate(panelModel.header, headerTemplateElement, id, isStringTemplate);\n        this.panelContent.appendChild(headerTemplateElement);\n        updateBlazorTemplate(id, 'HeaderTemplate', panelModel);\n      }\n    }\n\n    if (panelModel.content) {\n      var cssClass_1 = panelModel.cssClass ? panelModel.cssClass.split(' ') : null;\n      this.panelBody = cellElement.querySelector('.e-panel-content') ? cellElement.querySelector('.e-panel-content') : this.createSubElement(cssClass_1, cellElement.id + '_body', panelContent);\n      var headerHeight = this.panelContent.querySelector('.e-panel-header') ? window.getComputedStyle(this.panelContent.querySelector('.e-panel-header')).height : '0px';\n      var contentHeightValue = 'calc( 100% - ' + headerHeight + ')';\n      setStyle(this.panelBody, {\n        height: contentHeightValue\n      });\n\n      if (!cellElement.querySelector('.e-panel-content') && !this.isBlazor) {\n        var id = this.element.id + 'ContentTemplate' + panelId;\n        this.renderTemplate(panelModel.content, this.panelBody, id, isStringTemplate);\n        this.panelContent.appendChild(this.panelBody);\n        updateBlazorTemplate(id, 'ContentTemplate', panelModel);\n      }\n    }\n\n    return cellElement;\n  };\n\n  DashboardLayout.prototype.disablePanel = function (panelElement) {\n    addClass([panelElement], [disable]);\n  };\n\n  DashboardLayout.prototype.getInlinePanels = function (panelElement) {\n    var model = {\n      sizeX: panelElement.hasAttribute('data-sizex') ? parseInt(panelElement.getAttribute('data-sizex'), 10) : 1,\n      sizeY: panelElement.hasAttribute('data-sizey') ? parseInt(panelElement.getAttribute('data-sizey'), 10) : 1,\n      minSizeX: panelElement.hasAttribute('data-minsizex') ? parseInt(panelElement.getAttribute('data-minsizex'), 10) : 1,\n      minSizeY: panelElement.hasAttribute('data-minsizey') ? parseInt(panelElement.getAttribute('data-minsizey'), 10) : 1,\n      maxSizeX: panelElement.hasAttribute('data-maxsizex') ? parseInt(panelElement.getAttribute('data-maxsizex'), 10) : null,\n      maxSizeY: panelElement.hasAttribute('data-maxsizey') ? parseInt(panelElement.getAttribute('data-maxsizey'), 10) : null,\n      row: panelElement.hasAttribute('data-row') ? parseInt(panelElement.getAttribute('data-row'), 10) : 0,\n      col: panelElement.hasAttribute('data-col') ? parseInt(panelElement.getAttribute('data-col'), 10) : 0,\n      id: panelElement.getAttribute('id'),\n      zIndex: panelElement.hasAttribute('data-zindex') ? parseInt(panelElement.getAttribute('data-zIndex'), 10) : 1000,\n      header: panelElement.querySelector('.e-panel-header') && '.e-panel-header',\n      content: panelElement.querySelector('.e-panel-content') && '.e-panel-content'\n    };\n\n    if (!model.id) {\n      model.id = 'layout_' + this.panelID.toString();\n      panelElement.setAttribute('id', model.id);\n      this.panelID = this.panelID + 1;\n    }\n\n    if (isUndefined(model.enabled)) {\n      model.enabled = true;\n    }\n\n    panelElement.style.zIndex = '' + model.zIndex; // tslint:disable-next-line\n\n    var panelProp = new Panel(this, 'panels', model, true);\n    this.panels.push(panelProp);\n  };\n\n  DashboardLayout.prototype.resizeEvents = function () {\n    if (this.allowResizing) {\n      var panelElements = this.element.querySelectorAll('.e-panel .e-panel-container .e-resize');\n\n      for (var i = 0; i < panelElements.length; i++) {\n        var eventName = Browser.info.name === 'msie' ? 'mousedown pointerdown' : 'mousedown';\n        EventHandler.add(panelElements[i], eventName, this.downResizeHandler, this);\n\n        if (Browser.info.name !== 'msie') {\n          EventHandler.add(panelElements[i], 'touchstart', this.touchDownResizeHandler, this);\n        }\n      }\n    }\n  };\n\n  DashboardLayout.prototype.bindEvents = function () {\n    window.addEventListener('resize', this.refresh.bind(this));\n    this.resizeEvents();\n  };\n\n  DashboardLayout.prototype.downResizeHandler = function (e) {\n    this.downHandler(e);\n    this.lastMouseX = e.pageX;\n    this.lastMouseY = e.pageY;\n    var moveEventName = Browser.info.name === 'msie' ? 'mousemove pointermove' : 'mousemove';\n    var upEventName = Browser.info.name === 'msie' ? 'mouseup pointerup' : 'mouseup';\n\n    if (!this.isMouseMoveBound) {\n      EventHandler.add(document, moveEventName, this.moveResizeHandler, this);\n      this.isMouseMoveBound = true;\n    }\n\n    if (!this.isMouseUpBound) {\n      EventHandler.add(document, upEventName, this.upResizeHandler, this);\n      this.isMouseUpBound = true;\n    }\n  };\n\n  ;\n\n  DashboardLayout.prototype.downHandler = function (e) {\n    this.resizeCalled = false;\n    this.panelsInitialModel = this.cloneModels(this.panels);\n    var el = closest(e.currentTarget, '.e-panel');\n    var args = {\n      event: e,\n      element: el,\n      isInteracted: true\n    };\n    this.trigger('resizeStart', args);\n    this.downTarget = e.currentTarget;\n    this.shadowEle = document.createElement('div');\n    this.shadowEle.classList.add('e-holder');\n    addClass([this.element], [preventSelect]);\n    this.element.appendChild(this.shadowEle);\n    this.elementX = parseFloat(el.style.left);\n    this.elementY = parseFloat(el.style.top);\n    this.elementWidth = el.offsetWidth;\n    this.elementHeight = el.offsetHeight;\n    this.originalWidth = this.getCellInstance(el.id).sizeX;\n    this.originalHeight = this.getCellInstance(el.id).sizeY;\n    this.previousRow = this.getCellInstance(el.id).row;\n  };\n\n  DashboardLayout.prototype.touchDownResizeHandler = function (e) {\n    this.downHandler(e);\n    this.lastMouseX = e.changedTouches[0].pageX;\n    this.lastMouseY = e.changedTouches[0].pageY;\n\n    if (!this.isMouseMoveBound) {\n      EventHandler.add(document, 'touchmove', this.touchMoveResizeHandler, this);\n      this.isMouseMoveBound = true;\n    }\n\n    if (!this.isMouseUpBound) {\n      EventHandler.add(document, 'touchend', this.upResizeHandler, this);\n      this.isMouseUpBound = true;\n    }\n  };\n\n  DashboardLayout.prototype.getCellSize = function () {\n    return [this.cellSize[0], this.cellSize[1]];\n  };\n\n  DashboardLayout.prototype.updateMaxTopLeft = function (e) {\n    this.moveTarget = this.downTarget;\n    var el = closest(this.moveTarget, '.e-panel');\n    var args = {\n      event: e,\n      element: el,\n      isInteracted: true\n    };\n    this.trigger('resize', args);\n  };\n\n  DashboardLayout.prototype.updateResizeElement = function (el) {\n    this.maxLeft = this.element.offsetWidth - 1;\n    this.maxTop = this.cellSize[1] * this.maxRows - 1;\n    removeClass([el], 'e-panel-transition');\n    addClass([el], [dragging]);\n    var handleArray = [east, west, north, south, southEast, northEast, northWest, southWest];\n\n    for (var i = 0; i < this.moveTarget.classList.length; i++) {\n      if (handleArray.indexOf(this.moveTarget.classList[i]) !== -1) {\n        this.handleClass = this.moveTarget.classList[i];\n      }\n    }\n  };\n\n  DashboardLayout.prototype.moveResizeHandler = function (e) {\n    this.updateMaxTopLeft(e);\n    var el = closest(this.moveTarget, '.e-panel');\n\n    if (this.lastMouseX === e.pageX || this.lastMouseY === e.pageY) {\n      return;\n    }\n\n    this.updateResizeElement(el);\n    var panelModel = this.getCellInstance(el.getAttribute('id'));\n    this.mouseX = e.pageX;\n    this.mouseY = e.pageY;\n    var diffY = this.mouseY - this.lastMouseY + this.mOffY;\n    var diffX = this.mouseX - this.lastMouseX + this.mOffX;\n    this.mOffX = this.mOffY = 0;\n    this.lastMouseY = this.mouseY;\n    this.lastMouseX = this.mouseX;\n    this.resizingPanel(el, panelModel, diffX, diffY);\n  };\n\n  DashboardLayout.prototype.touchMoveResizeHandler = function (e) {\n    this.updateMaxTopLeft(e);\n    var el = closest(this.moveTarget, '.e-panel');\n\n    if (this.lastMouseX === e.changedTouches[0].pageX || this.lastMouseY === e.changedTouches[0].pageY) {\n      return;\n    }\n\n    this.updateResizeElement(el);\n    var panelModel = this.getCellInstance(el.getAttribute('id'));\n    this.mouseX = e.changedTouches[0].pageX;\n    this.mouseY = e.changedTouches[0].pageY;\n    var diffX = this.mouseX - this.lastMouseX + this.mOffX;\n    var diffY = this.mouseY - this.lastMouseY + this.mOffY;\n    this.mOffX = this.mOffY = 0;\n    this.lastMouseX = this.mouseX;\n    this.lastMouseY = this.mouseY;\n    this.resizingPanel(el, panelModel, diffX, diffY);\n  };\n  /* istanbul ignore next */\n\n\n  DashboardLayout.prototype.resizingPanel = function (el, panelModel, currentX, currentY) {\n    var oldSizeX = this.getCellInstance(el.id).sizeX;\n    var oldSizeY = this.getCellInstance(el.id).sizeY;\n    var dY = currentY;\n    var dX = currentX;\n\n    if (this.handleClass.indexOf('north') >= 0) {\n      if (this.elementHeight - dY < this.getMinHeight(panelModel)) {\n        currentY = this.elementHeight - this.getMinHeight(panelModel);\n        this.mOffY = dY - currentY;\n      } else if (panelModel.maxSizeY && this.elementHeight - dY > this.getMaxHeight(panelModel)) {\n        currentY = this.elementHeight - this.getMaxHeight(panelModel);\n        this.mOffY = dY - currentY;\n      } else if (this.elementY + dY < this.minTop) {\n        currentY = this.minTop - this.elementY;\n        this.mOffY = dY - currentY;\n      }\n\n      this.elementY += currentY;\n      this.elementHeight -= currentY;\n    }\n\n    if (this.handleClass.indexOf('south') >= 0) {\n      if (this.elementHeight + dY < this.getMinHeight(panelModel)) {\n        currentY = this.getMinHeight(panelModel) - this.elementHeight;\n        this.mOffY = dY - currentY;\n      } else if (panelModel.maxSizeY && this.elementHeight + dY > this.getMaxHeight(panelModel)) {\n        currentY = this.getMaxHeight(panelModel) - this.elementHeight;\n        this.mOffY = dY - currentY;\n      } else if (this.elementY + this.elementHeight + dY > this.maxTop) {\n        currentY = this.maxTop - this.elementY - this.elementHeight;\n        this.mOffY = dY - currentY;\n      }\n\n      this.elementHeight += currentY;\n    }\n\n    if (this.handleClass.indexOf('west') >= 0) {\n      if (this.elementWidth - dX < this.getMinWidth(panelModel)) {\n        currentX = this.elementWidth - this.getMinWidth(panelModel);\n        this.mOffX = dX - currentX;\n      } else if (panelModel.maxSizeX && this.elementWidth - dX > this.getMaxWidth(panelModel)) {\n        currentX = this.elementWidth - this.getMaxWidth(panelModel);\n        this.mOffX = dX - currentX;\n      } else if (this.elementX + dX < this.minLeft) {\n        currentX = this.minLeft - this.elementX;\n        this.mOffX = dX - currentX;\n      }\n\n      this.elementX += currentX;\n      this.elementWidth -= currentX;\n    }\n\n    if (this.handleClass.indexOf('east') >= 0) {\n      if (this.elementWidth + dX < this.getMinWidth(panelModel)) {\n        currentX = this.getMinWidth(panelModel) - this.elementWidth;\n        this.mOffX = dX - currentX;\n      } else if (panelModel.maxSizeX && this.elementWidth + dX > this.getMaxWidth(panelModel)) {\n        currentX = this.getMaxWidth(panelModel) - this.elementWidth;\n        this.mOffX = dX - currentX;\n      } else if (this.elementX + this.elementWidth + dX > this.maxLeft) {\n        currentX = this.maxLeft - this.elementX - this.elementWidth;\n        this.mOffX = dX - currentX;\n      }\n\n      this.elementWidth += currentX;\n    }\n\n    el.style.top = this.elementY + 'px';\n    el.style.left = this.elementX + 'px';\n    el.style.width = this.elementWidth + 'px';\n    el.style.height = this.elementHeight + 'px';\n    var item = this.getResizeRowColumn(panelModel, this.moveTarget);\n\n    if (item.col + item.sizeX > this.columns) {\n      this.panelPropertyChange(item, {\n        sizeX: item.sizeX - 1\n      });\n    }\n\n    this.shadowEle.style.top = item.row * this.getCellSize()[1] + item.row * this.cellSpacing[1] + 'px';\n    this.shadowEle.style.left = item.col * this.getCellSize()[0] + item.col * this.cellSpacing[0] + 'px';\n    this.shadowEle.style.height = item.sizeY * (this.getCellSize()[1] + this.cellSpacing[1]) + 'px';\n    this.shadowEle.style.width = item.sizeX * (this.getCellSize()[0] + this.cellSpacing[0]) + 'px';\n\n    if (oldSizeX !== item.sizeX || oldSizeY !== item.sizeY) {\n      oldSizeX = item.sizeX;\n      oldSizeY = item.sizeY;\n      var model = this.getCellInstance(el.id);\n      var value = {\n        attributes: {\n          row: model.row.toString(),\n          col: model.col.toString(),\n          sizeX: model.sizeX.toString(),\n          sizeY: model.sizeY.toString()\n        }\n      };\n      this.setAttributes(value, el);\n      this.mainElement = el;\n      this.updatePanelLayout(el, this.getCellInstance(el.id));\n      this.updateOldRowColumn();\n      this.sortedPanel();\n    }\n  };\n\n  DashboardLayout.prototype.upResizeHandler = function (e) {\n    if (isNullOrUndefined(this.downTarget)) {\n      return;\n    }\n\n    this.updateServerPanelData();\n    this.upTarget = this.downTarget;\n    var el = closest(this.upTarget, '.e-panel');\n    var args = {\n      event: e,\n      element: el,\n      isInteracted: true\n    };\n\n    if (el) {\n      addClass([el], 'e-panel-transition');\n      var moveEventName = Browser.info.name === 'msie' ? 'mousemove pointermove' : 'mousemove';\n      var upEventName = Browser.info.name === 'msie' ? 'mouseup pointerup' : 'mouseup';\n      EventHandler.remove(document, moveEventName, this.moveResizeHandler);\n      EventHandler.remove(document, upEventName, this.upResizeHandler);\n\n      if (Browser.info.name !== 'msie') {\n        EventHandler.remove(document, 'touchmove', this.touchMoveResizeHandler);\n        EventHandler.remove(document, 'touchend', this.upResizeHandler);\n      }\n\n      this.isMouseUpBound = false;\n      this.isMouseMoveBound = false;\n\n      if (this.shadowEle) {\n        detach(this.shadowEle);\n      }\n\n      this.shadowEle = null;\n      var panelModel = this.getCellInstance(el.getAttribute('id'));\n      this.setPanelPosition(el, panelModel.row, panelModel.col);\n      this.setHeightAndWidth(el, panelModel);\n    }\n\n    removeClass([el], [dragging]);\n    this.trigger('resizeStop', args);\n    this.resizeCalled = false;\n    this.lastMouseX = this.lastMouseY = undefined;\n    this.mOffX = this.mOffY = 0;\n    this.mainElement = null;\n\n    if (this.allowFloating) {\n      this.moveItemsUpwards();\n    }\n\n    this.updatePanels();\n    this.updateCloneArrayObject();\n    this.checkForChanges(true);\n  };\n\n  DashboardLayout.prototype.getResizeRowColumn = function (item, e) {\n    var isChanged = false;\n    var col = item.col;\n\n    if (['e-west', 'e-south-west'].indexOf(this.handleClass) !== -1) {\n      col = this.pixelsToColumns(this.elementX, false);\n    }\n\n    var row = item.row;\n\n    if (['e-north'].indexOf(this.handleClass) !== -1) {\n      row = this.pixelsToRows(this.elementY, false);\n\n      if (this.previousRow !== row) {\n        this.previousRow = row;\n        isChanged = true;\n      }\n    }\n\n    var sizeX = item.sizeX;\n\n    if (['e-north', 'e-south'].indexOf(this.handleClass) === -1) {\n      sizeX = this.pixelsToColumns(this.elementWidth - sizeX * this.cellSpacing[1], true);\n    }\n\n    var sizeY = item.sizeY;\n\n    if (['e-east', 'e-west'].indexOf(this.handleClass) === -1) {\n      if (this.handleClass === 'e-north' ? isChanged : true) {\n        sizeY = this.pixelsToRows(this.elementHeight - sizeY * this.cellSpacing[0], true);\n      }\n    }\n\n    if (item.col + item.sizeX > this.columns) {\n      item.sizeX = item.sizeX - 1;\n    }\n\n    var canOccupy = row > -1 && col > -1 && sizeX + col <= this.maxCol() && sizeY + row <= this.maxRow();\n\n    if (canOccupy && this.collisions(row, col, sizeX, sizeY, this.getPanelBase(item.id)).length === 0 || this.allowPushing !== false) {\n      this.panelPropertyChange(item, {\n        row: row,\n        col: col,\n        sizeX: sizeX,\n        sizeY: sizeY\n      });\n    }\n\n    return item;\n  };\n\n  DashboardLayout.prototype.pixelsToColumns = function (pixels, isCeil) {\n    var curColWidth = this.cellSize[0];\n\n    if (isCeil) {\n      return Math.ceil(pixels / curColWidth);\n    } else {\n      return Math.floor(pixels / curColWidth);\n    }\n  };\n\n  DashboardLayout.prototype.pixelsToRows = function (pixels, isCeil) {\n    if (isCeil) {\n      return Math.round(pixels / this.cellSize[1]);\n    } else {\n      return Math.round(pixels / (this.cellSize[1] + this.cellSpacing[0]));\n    }\n  };\n\n  DashboardLayout.prototype.getMinWidth = function (item) {\n    return item.minSizeX * this.getCellSize()[0];\n  };\n\n  ;\n\n  DashboardLayout.prototype.getMaxWidth = function (item) {\n    return item.maxSizeX * this.getCellSize()[0];\n  };\n\n  ;\n\n  DashboardLayout.prototype.getMinHeight = function (item) {\n    return item.minSizeY * this.getCellSize()[1];\n  };\n\n  ;\n\n  DashboardLayout.prototype.getMaxHeight = function (item) {\n    return item.maxSizeY * this.getCellSize()[1];\n  };\n\n  ;\n\n  DashboardLayout.prototype.sortedPanel = function () {\n    this.sortedArray = [];\n\n    for (var i = 0, l = this.panelCollection.length; i < l; ++i) {\n      this.sortItem(this.panelCollection[i]);\n    }\n  };\n\n  DashboardLayout.prototype.moveItemsUpwards = function () {\n    if (this.allowFloating === false) {\n      return;\n    }\n\n    for (var rowIndex = 0, l = this.sortedArray.length; rowIndex < l; ++rowIndex) {\n      var columns = this.sortedArray[rowIndex];\n\n      if (!columns) {\n        continue;\n      }\n\n      for (var colIndex = 0, len = columns.length; colIndex < len; ++colIndex) {\n        var item = columns[colIndex];\n\n        if (item) {\n          this.moveItemUpwards(item);\n        }\n      }\n    }\n\n    this.updateGridLines();\n  };\n\n  ;\n\n  DashboardLayout.prototype.moveItemUpwards = function (item) {\n    if (this.allowFloating === false || item === this.mainElement) {\n      return;\n    }\n\n    var colIndex = this.getCellInstance(item.id).col;\n    var sizeY = parseInt(item.getAttribute('data-sizeY'), 10);\n    var sizeX = parseInt(item.getAttribute('data-sizeX'), 10);\n    var availableRow = null;\n    var availableColumn = null;\n    var rowIndex = parseInt(item.getAttribute('data-row'), 10) - 1;\n\n    while (rowIndex > -1) {\n      var items = this.collisions(rowIndex, colIndex, sizeX, sizeY, item);\n\n      if (items.length !== 0) {\n        break;\n      }\n\n      availableRow = rowIndex;\n      availableColumn = colIndex;\n      --rowIndex;\n    }\n\n    if (availableRow !== null) {\n      this.sortItem(item, availableRow, availableColumn);\n    }\n  };\n\n  DashboardLayout.prototype.sortItem = function (item, rowValue, columnValue, ignoreItems) {\n    this.overlapElement = [];\n    var column = parseInt(item.getAttribute('data-col'), 10);\n    var row = parseInt(item.getAttribute('data-row'), 10);\n\n    if (!this.sortedArray[row]) {\n      this.sortedArray[row] = [];\n    }\n\n    this.sortedArray[row][column] = item;\n\n    if (item !== undefined && rowValue !== undefined && columnValue !== undefined) {\n      if (this.oldRowCol[item.id] !== undefined && this.oldRowCol[item.id].row !== null && typeof this.oldRowCol[item.id].col !== 'undefined') {\n        {\n          var oldRow = this.sortedArray[this.oldRowCol[item.id].row];\n\n          if (this.oldRowCol[item.id] && oldRow[this.oldRowCol[item.id].col] === item) {\n            delete oldRow[this.oldRowCol[item.id].col];\n            this.updateOldRowColumn();\n            this.sortedPanel();\n          }\n        }\n      }\n\n      this.oldRowCol[item.id].row = rowValue;\n      this.oldRowCol[item.id].row = columnValue;\n\n      if (!this.sortedArray[row]) {\n        this.sortedArray[row] = [];\n      }\n\n      this.sortedArray[row][column] = item;\n\n      if (this.allItems.indexOf(item) === -1) {\n        this.allItems.push(item);\n      }\n\n      this.panelPropertyChange(this.getCellInstance(item.id), {\n        row: rowValue,\n        col: columnValue\n      });\n      var panelModel = this.getCellInstance(item.id);\n      this.setAttributes({\n        value: {\n          col: panelModel.col.toString(),\n          row: panelModel.row.toString()\n        }\n      }, item);\n      this.updateLayout(item, this.getCellInstance(item.id));\n    }\n  };\n\n  DashboardLayout.prototype.updateLayout = function (element, panelModel) {\n    this.setPanelPosition(element, panelModel.row, panelModel.col);\n    this.setHeightAndWidth(element, panelModel);\n    this.updateRowHeight();\n    this.sortedPanel();\n  };\n\n  ;\n\n  DashboardLayout.prototype.refresh = function () {\n    this.updateDragArea();\n\n    if (this.checkMediaQuery()) {\n      this.checkMediaQuerySizing();\n    } else {\n      if (this.element.classList.contains(responsive)) {\n        removeClass([this.element], [responsive]);\n\n        for (var i = 0; i < this.element.querySelectorAll('.e-panel').length; i++) {\n          var ele = this.element.querySelectorAll('.e-panel')[i];\n          var cellInstance = this.getCellInstance(ele.id);\n          var row = parseInt(ele.getAttribute('data-row'), 10);\n          var col = parseInt(ele.getAttribute('data-col'), 10);\n          this.panelPropertyChange(cellInstance, {\n            row: row,\n            col: col\n          });\n          this.setHeightAndWidth(ele, this.getCellInstance(ele.id));\n          this.setPanelPosition(ele, row, col);\n          this.updateRowHeight();\n        }\n      }\n\n      this.panelResponsiveUpdate();\n      this.updateGridLines();\n    }\n\n    this.removeResizeClasses(this.panelCollection);\n    this.setClasses(this.panelCollection);\n    this.resizeEvents();\n    this.checkDragging(this.dragCollection);\n  };\n\n  DashboardLayout.prototype.updateGridLines = function () {\n    if (this.element.querySelector('.e-dashboard-gridline-table')) {\n      if (this.table) {\n        detach(this.table);\n      }\n\n      this.initGridLines();\n    }\n  };\n\n  DashboardLayout.prototype.checkDragging = function (dragCollection) {\n    if (this.checkMediaQuery() || !this.allowDragging) {\n      for (var i = 0; i < dragCollection.length; i++) {\n        dragCollection[i].destroy();\n      }\n    } else {\n      for (var i = 0; i < dragCollection.length; i++) {\n        dragCollection[i].destroy();\n      }\n\n      this.enableDraggingContent(this.panelCollection);\n    }\n  };\n\n  DashboardLayout.prototype.sortPanels = function () {\n    var model = [];\n\n    var _loop_1 = function (row) {\n      var _loop_2 = function (col) {\n        this_1.panels.filter(function (panel) {\n          if (panel.row === row && panel.col === col) {\n            model.push(panel);\n          }\n        });\n      };\n\n      for (var col = 0; col < this_1.columns; col++) {\n        _loop_2(col);\n      }\n    };\n\n    var this_1 = this;\n\n    for (var row = 0; row <= this.rows; row++) {\n      _loop_1(row);\n    }\n\n    return model;\n  };\n\n  DashboardLayout.prototype.checkMediaQuerySizing = function () {\n    addClass([this.element], [responsive]);\n    var updatedPanel = this.sortPanels();\n    this.updatedRows = updatedPanel.length;\n\n    for (var i = 0; i < updatedPanel.length; i++) {\n      var panelElement = document.getElementById(updatedPanel[i].id);\n\n      if (panelElement) {\n        setStyle(panelElement, {\n          'width': '100%'\n        });\n        panelElement.style.height = ' ' + (this.element.parentElement && this.element.parentElement.offsetWidth / this.cellAspectRatio) + 'px';\n        this.cellSize[1] = this.element.parentElement && this.element.parentElement.offsetWidth / this.cellAspectRatio;\n\n        if (this.addPanelCalled && this.isBlazor) {\n          var panelProp = this.getActualProperties(updatedPanel[i]);\n          panelProp.row = i;\n          panelProp.col = 0;\n          this.panelPropertyChange(updatedPanel[i], panelProp);\n          this.setPanelPosition(panelElement, i, 0);\n        } else {\n          this.panelPropertyChange(updatedPanel[i], {\n            row: i,\n            col: 0\n          });\n          this.setPanelPosition(panelElement, updatedPanel[i].row, updatedPanel[i].col);\n        }\n\n        this.setClasses(this.panelCollection);\n        this.checkDragging(this.dragCollection);\n        this.removeResizeClasses(this.panelCollection);\n      }\n    }\n\n    this.updateRowHeight();\n  };\n\n  DashboardLayout.prototype.panelResponsiveUpdate = function () {\n    this.element.classList.add('e-responsive');\n    this.calculateCellSize();\n\n    for (var i = 0; i < this.element.querySelectorAll('.e-panel').length; i++) {\n      var ele = this.element.querySelectorAll('.e-panel')[i];\n      var panelModel = this.getCellInstance(ele.id);\n      this.setHeightAndWidth(ele, panelModel);\n    }\n\n    for (var i = 0; i < this.panels.length; i++) {\n      this.setPanelPosition(document.getElementById(this.panels[i].id), this.panels[i].row, this.panels[i].col);\n    }\n\n    this.updateRowHeight();\n  };\n\n  DashboardLayout.prototype.updateRowHeight = function () {\n    this.getRowColumn();\n    this.setHeightWidth();\n  };\n\n  DashboardLayout.prototype.setHeightWidth = function () {\n    var heightValue;\n    var widthValue;\n\n    if (this.checkMediaQuery()) {\n      heightValue = this.maxRow() * (this.element.parentElement && this.element.parentElement.offsetWidth / this.cellAspectRatio) + (this.maxRow() - 1) * this.cellSpacing[1] + 'px';\n    } else {\n      heightValue = this.maxRow() * (this.cellSize[0] / this.cellAspectRatio) + (this.maxRow() - 1) * this.cellSpacing[1] + 'px';\n    }\n\n    setStyle(this.element, {\n      'height': heightValue\n    });\n    widthValue = window.getComputedStyle(this.element).width;\n    setStyle(this.element, {\n      'width': widthValue\n    });\n  };\n\n  DashboardLayout.prototype.setHeightAndWidth = function (panelElement, panelModel) {\n    setStyle(panelElement, {\n      'height': formatUnit(this.setXYDimensions(panelModel)[0])\n    });\n    setStyle(panelElement, {\n      'width': formatUnit(this.setXYDimensions(panelModel)[1])\n    });\n  };\n\n  DashboardLayout.prototype.renderCell = function (panel, isStringTemplate, index) {\n    var cellElement;\n    this.dimensions = this.setXYDimensions(panel);\n\n    if (isUndefined(panel.enabled)) {\n      panel.enabled = true;\n    }\n\n    if (this.isBlazor) {\n      cellElement = document.getElementById(panel.id);\n    } else {\n      if (this.contentTemplateChild.length > 0 && !isNullOrUndefined(index)) {\n        cellElement = this.contentTemplateChild[index];\n\n        if (panel.cssClass) {\n          addClass([cellElement], [panel.cssClass]);\n        }\n\n        if (panel.id) {\n          cellElement.setAttribute('id', panel.id);\n        }\n      } else {\n        cellElement = this.createPanelElement(panel.cssClass ? panel.cssClass.split(' ') : null, panel.id);\n      }\n\n      cellElement.style.zIndex = '' + panel.zIndex;\n      this.element.appendChild(cellElement);\n    }\n\n    var dashBoardCell = this.renderPanels(cellElement, panel, panel.id, isStringTemplate);\n    this.panelCollection.push(dashBoardCell);\n\n    if (!this.isBlazor) {\n      this.setXYAttributes(cellElement, panel);\n    } else {\n      var bodyElement = cellElement.querySelector('.e-panel-content');\n\n      if (bodyElement) {\n        var headerHeight = cellElement.querySelector('.e-panel-header') ? window.getComputedStyle(cellElement.querySelector('.e-panel-header')).height : '0px';\n        var contentHeightValue = 'calc( 100% - ' + headerHeight + ')';\n        setStyle(bodyElement, {\n          height: contentHeightValue\n        });\n      }\n    }\n\n    this.setHeightAndWidth(cellElement, panel);\n    return cellElement;\n  };\n\n  DashboardLayout.prototype.setPanelPosition = function (cellElement, row, col) {\n    if (!cellElement) {\n      return;\n    }\n\n    var heightValue = this.getCellSize()[1];\n    var widthValue = this.getCellSize()[0];\n    var left = col === 0 ? 0 : col * (widthValue + this.cellSpacing[0]);\n    var top = row === 0 ? 0 : row * (heightValue + this.cellSpacing[1]);\n    setStyle(cellElement, {\n      'left': left + 'px',\n      'top': top + 'px'\n    });\n  };\n\n  DashboardLayout.prototype.getRowColumn = function () {\n    this.rows = null;\n\n    if (this.element.querySelectorAll('.e-panel').length > 0 && !this.updatedRows) {\n      var panelElements = this.element.querySelectorAll('.e-panel');\n\n      for (var i = 0; i < panelElements.length; i++) {\n        var panelElement = panelElements[i];\n        var rowValue = parseInt(panelElement.getAttribute('data-row'), 10);\n        var xValue = parseInt(panelElement.getAttribute('data-sizeY'), 10);\n        this.rows = Math.max(this.rows, rowValue + xValue);\n      }\n    } else {\n      if (this.updatedRows) {\n        this.rows = this.updatedRows;\n        this.updatedRows = null;\n      }\n\n      for (var i = 0; i < this.panels.length; i++) {\n        this.rows = Math.max(this.rows, this.panels[i].row);\n      }\n    }\n  };\n\n  DashboardLayout.prototype.setMinMaxValues = function (panel) {\n    if (!panel.sizeX || panel.sizeX < panel.minSizeX) {\n      this.panelPropertyChange(panel, {\n        sizeX: panel.minSizeX\n      });\n    } else if (panel.maxSizeX && panel.sizeX > panel.maxSizeX) {\n      this.panelPropertyChange(panel, {\n        sizeX: panel.maxSizeX\n      });\n    } else if (panel.sizeX > this.columns) {\n      this.panelPropertyChange(panel, {\n        sizeX: this.columns\n      });\n    } else {\n      this.panelPropertyChange(panel, {\n        sizeX: panel.sizeX\n      });\n    }\n\n    if (!panel.sizeY || panel.sizeY < panel.minSizeY) {\n      this.panelPropertyChange(panel, {\n        sizeY: panel.minSizeY\n      });\n    } else if (panel.maxSizeY && panel.sizeY > panel.maxSizeY) {\n      this.panelPropertyChange(panel, {\n        sizeY: panel.maxSizeY\n      });\n    } else {\n      this.panelPropertyChange(panel, {\n        sizeY: panel.sizeY\n      });\n    }\n  };\n\n  DashboardLayout.prototype.checkMinMaxValues = function (panel) {\n    if (panel.col + panel.sizeX > this.columns) {\n      this.panelPropertyChange(panel, {\n        sizeX: panel.sizeX + (this.columns - (panel.col + panel.sizeX))\n      });\n    }\n  };\n\n  DashboardLayout.prototype.panelPropertyChange = function (panel, value) {\n    this.allowServerDataBinding = false; // tslint:disable-next-line\n\n    panel.setProperties(value, true);\n  };\n\n  DashboardLayout.prototype.renderDashBoardCells = function (cells) {\n    if (this.element.querySelectorAll('.e-panel').length > 0 || this.panels.length > 0) {\n      for (var j = 0; j < cells.length; j++) {\n        this.gridPanelCollection.push(cells[j]);\n\n        if (!(this.isBlazor && this.panels.length > 0)) {\n          this.setMinMaxValues(cells[j]);\n        }\n\n        if (this.maxColumnValue < cells[j].col || this.maxColumnValue < cells[j].col + cells[j].sizeX) {\n          this.panelPropertyChange(cells[j], {\n            col: this.maxColumnValue - cells[j].sizeX\n          });\n        }\n\n        var cell = this.renderCell(cells[j], false, j);\n\n        if (!this.isBlazor) {\n          if (this.enableRtl) {\n            addClass([cell], 'e-rtl');\n          }\n\n          this.element.appendChild(cell);\n        }\n\n        if (this.checkMediaQuery() && j === cells.length - 1) {\n          this.checkMediaQuerySizing();\n        } else {\n          this.setPanelPosition(cell, cells[j].row, cells[j].col);\n          this.mainElement = cell;\n          this.updatePanelLayout(cell, cells[j]);\n          this.mainElement = null;\n        }\n      }\n    }\n\n    this.setClasses(this.panelCollection);\n  };\n\n  DashboardLayout.prototype.collisions = function (row, col, sizeX, sizeY, ignore) {\n    var items = [];\n\n    if (!sizeX || !sizeY) {\n      sizeX = sizeY = 1;\n    }\n\n    if (ignore && !(ignore instanceof Array)) {\n      ignore = [ignore];\n    }\n\n    var item;\n\n    for (var h = 0; h < sizeY; ++h) {\n      for (var w = 0; w < sizeX; ++w) {\n        item = this.getPanel(row + h, col + w, ignore);\n\n        if (item && (!ignore || ignore.indexOf(document.getElementById(item.id)) === -1) && items.indexOf(document.getElementById(item.id)) === -1) {\n          items.push(document.getElementById(item.id));\n        }\n      }\n    }\n\n    return items;\n  };\n\n  ;\n\n  DashboardLayout.prototype.rightWardsSpaceChecking = function (rowElements, col, ele) {\n    var _this = this;\n\n    var columns = [];\n    var spacedColumns = [];\n    rowElements.forEach(function (element) {\n      var columnValue = parseInt(element.getAttribute('data-col'), 10);\n      var sizeXValue = parseInt(element.getAttribute('data-sizeX'), 10);\n\n      if (col < _this.columns && columnValue >= col) {\n        if (sizeXValue > 1) {\n          for (var i = columnValue; i < columnValue + sizeXValue; i++) {\n            columns.push(i);\n          }\n        } else {\n          columns.push(columnValue);\n        }\n      }\n    });\n\n    if (columns.length > 0) {\n      for (var i = col + 1; i <= this.columns - 1; i++) {\n        if (columns.indexOf(i) === -1 && i !== col) {\n          if (spacedColumns.indexOf(i) === -1) {\n            spacedColumns.push(i);\n          }\n        }\n      }\n    }\n\n    var occupiedValues = this.getOccupiedColumns(ele, 'right');\n    occupiedValues.forEach(function (colValue) {\n      if (colValue > col && spacedColumns.indexOf(colValue) !== -1) {\n        spacedColumns.splice(spacedColumns.indexOf(colValue), 1);\n      }\n    });\n    var eleOccupiedValues = this.getOccupiedColumns(this.checkingElement, 'left');\n    eleOccupiedValues.forEach(function (col) {\n      if (col > parseInt(ele.getAttribute('data-col'), 10) && occupiedValues.indexOf(col) === -1 && spacedColumns.indexOf(col) === -1) {\n        spacedColumns.push(col);\n      }\n    });\n    spacedColumns = spacedColumns.sort(function (next, previous) {\n      return next - previous;\n    });\n    return spacedColumns;\n  };\n\n  DashboardLayout.prototype.getOccupiedColumns = function (element, type) {\n    var occupiedItems = [];\n    var sizeX = parseInt(element.getAttribute('data-sizeX'), 10);\n    var col = parseInt(element.getAttribute('data-col'), 10);\n\n    for (var i = col; i < col + sizeX && i <= this.columns; i++) {\n      occupiedItems.push(i);\n    }\n\n    return occupiedItems;\n  };\n\n  DashboardLayout.prototype.leftWardsSpaceChecking = function (rowElements, col, ele) {\n    var _this = this;\n\n    var spacedColumns = [];\n    var columns = [];\n    rowElements.forEach(function (element) {\n      var colValue = parseInt(element.getAttribute('data-col'), 10);\n      var xValue = parseInt(element.getAttribute('data-sizeX'), 10);\n\n      if (col <= _this.columns && colValue <= col) {\n        if (xValue > 1) {\n          for (var i = colValue; i < colValue + xValue; i++) {\n            columns.push(i);\n          }\n        } else {\n          columns.push(colValue);\n        }\n      }\n    });\n\n    if (columns.length > 0) {\n      for (var i = 0; i <= col; i++) {\n        if (columns.indexOf(i) === -1 && i !== col) {\n          if (spacedColumns.indexOf(i) === -1) {\n            spacedColumns.push(i);\n          }\n        }\n      }\n    }\n\n    var occupiedValues = this.getOccupiedColumns(ele, 'left');\n    occupiedValues.forEach(function (colValue) {\n      if (colValue < col && spacedColumns.indexOf(colValue) !== -1) {\n        spacedColumns.splice(spacedColumns.indexOf(colValue), 1);\n      }\n    });\n    var eleOccupiedValues = this.getOccupiedColumns(this.checkingElement, 'left');\n    eleOccupiedValues.forEach(function (col) {\n      if (col < parseInt(ele.getAttribute('data-col'), 10) && occupiedValues.indexOf(col) === -1 && spacedColumns.indexOf(col) === -1) {\n        spacedColumns.push(col);\n      }\n    });\n    spacedColumns = spacedColumns.sort(function (next, prev) {\n      return next - prev;\n    });\n    spacedColumns = spacedColumns.reverse();\n    return spacedColumns;\n  };\n\n  DashboardLayout.prototype.adjustmentAvailable = function (row, col, sizeY, sizeX, ele) {\n    this.leftAdjustable = undefined;\n    this.rightAdjustable = undefined;\n    var isAdjustable = false;\n    var leftSpacing;\n    var rightSpacing;\n    var rowElement = [];\n    this.topAdjustable = undefined;\n    var eleSizeX = parseInt(ele.getAttribute('data-sizeX'), 10);\n    var eleCol = parseInt(ele.getAttribute('data-col'), 10);\n    rowElement = this.getRowElements(this.collisions(row, 0, this.columns, sizeY, []));\n\n    if (rowElement.indexOf(ele) === -1) {\n      rowElement.push(ele);\n    }\n\n    leftSpacing = this.leftWardsSpaceChecking(rowElement, col, ele);\n\n    if (leftSpacing.length > 0) {\n      this.leftAdjustable = this.isLeftAdjustable(leftSpacing, ele, row, col, sizeX, sizeY);\n\n      if (this.spacedColumnValue !== eleCol - this.getCellInstance(this.checkingElement.id).sizeX) {\n        this.leftAdjustable = false;\n      }\n\n      if (this.leftAdjustable) {\n        this.rightAdjustable = false;\n      } else {\n        this.leftAdjustable = false;\n        rightSpacing = this.rightWardsSpaceChecking(rowElement, col, ele);\n        this.rightAdjustable = rightSpacing.length > 0 ? this.isRightAdjustable(rightSpacing, ele, row, col, sizeX, sizeY) : false;\n\n        if (this.spacedColumnValue !== eleSizeX + eleCol) {\n          this.rightAdjustable = false;\n        }\n\n        if (!this.rightAdjustable) {\n          this.rightAdjustable = false;\n        }\n      }\n    } else {\n      rightSpacing = this.rightWardsSpaceChecking(rowElement, col, ele);\n      this.rightAdjustable = rightSpacing.length > 0 ? this.isRightAdjustable(rightSpacing, ele, row, col, sizeX, sizeY) : false;\n\n      if (this.spacedColumnValue !== eleSizeX + eleCol) {\n        this.rightAdjustable = false;\n      }\n\n      if (this.rightAdjustable) {\n        this.leftAdjustable = false;\n      }\n    }\n\n    if (!this.rightAdjustable && !this.leftAdjustable && row > 0) {\n      var endRow = this.getCellInstance(ele.id).row;\n      var topCheck = false;\n\n      if (this.startRow !== endRow) {\n        topCheck = true;\n      }\n\n      for (var rowValue = row; rowValue >= 0; rowValue--) {\n        var element = this.getCellInstance(ele.id).sizeY > 1 && topCheck ? this.checkingElement : ele;\n\n        if (rowValue !== endRow && rowValue === endRow - sizeY && this.collisions(rowValue, col, sizeX, sizeY, element).length === 0) {\n          topCheck = false;\n          this.topAdjustable = true;\n          this.spacedRowValue = isNullOrUndefined(this.spacedRowValue) ? rowValue : this.spacedRowValue;\n          this.spacedColumnValue = col;\n        }\n      }\n    }\n\n    if (this.rightAdjustable || this.leftAdjustable || this.topAdjustable) {\n      isAdjustable = true;\n\n      if (isNullOrUndefined(this.spacedRowValue)) {\n        this.spacedRowValue = row;\n      }\n    }\n\n    return isAdjustable;\n  };\n\n  DashboardLayout.prototype.isXSpacingAvailable = function (spacing, sizeX) {\n    var isSpaceAvailable = false;\n    var subSpacingColumns = [];\n\n    for (var i = 0; i < spacing.length; i++) {\n      if (spacing[i + 1] - spacing[i] === 1 || spacing[i + 1] - spacing[i] === -1) {\n        subSpacingColumns.push(spacing[i]);\n\n        if (sizeX === 2) {\n          subSpacingColumns.push(spacing[i + 1]);\n        }\n\n        if (i === spacing.length - 2) {\n          subSpacingColumns.push(spacing[i + 1]);\n\n          if (subSpacingColumns.length > sizeX) {\n            subSpacingColumns.splice(-1);\n          }\n        }\n\n        if (subSpacingColumns.length === sizeX) {\n          isSpaceAvailable = true;\n          this.spacedColumnValue = subSpacingColumns.sort(function (next, previous) {\n            return next - previous;\n          })[0];\n\n          if (this.spacedColumnValue < 0) {\n            this.spacedColumnValue = 1;\n          }\n\n          return isSpaceAvailable;\n        }\n      } else {\n        subSpacingColumns = [];\n        continue;\n      }\n    }\n\n    return isSpaceAvailable;\n  };\n\n  DashboardLayout.prototype.getRowElements = function (base) {\n    var rowElements = [];\n\n    for (var i = 0; i < base.length; i++) {\n      rowElements.push(base[i]);\n    }\n\n    return rowElements;\n  };\n\n  DashboardLayout.prototype.isLeftAdjustable = function (spaces, ele, row, col, sizeX, sizeY) {\n    var isLeftAdjudtable;\n\n    if (sizeX === 1 && sizeY === 1 && spaces.length > 0) {\n      this.spacedColumnValue = spaces[0];\n      isLeftAdjudtable = true;\n    } else if (sizeX > 1 && sizeY === 1) {\n      isLeftAdjudtable = this.isXSpacingAvailable(spaces, sizeX);\n    } else if (sizeY > 1) {\n      if (sizeX === 1) {\n        var xAdjust = void 0;\n\n        if (spaces.length >= 1) {\n          xAdjust = true;\n        }\n\n        if (xAdjust) {\n          for (var i = 0; i < spaces.length; i++) {\n            var collisionValue = this.collisions(row, spaces[i], sizeX, sizeY, this.checkingElement);\n\n            if (collisionValue.length === 0) {\n              this.spacedColumnValue = spaces[i];\n              isLeftAdjudtable = true;\n              return isLeftAdjudtable;\n            } else {\n              isLeftAdjudtable = false;\n            }\n          }\n        }\n      } else {\n        isLeftAdjudtable = this.replacable(spaces, sizeX, row, sizeY, ele);\n      }\n    }\n\n    return isLeftAdjudtable;\n  };\n\n  DashboardLayout.prototype.isRightAdjustable = function (spacing, ele, row, col, sizeX, sizeY) {\n    var isRightAdjudtable;\n\n    if (sizeX === 1 && sizeY === 1 && spacing.length > 0) {\n      this.spacedColumnValue = spacing[0];\n      isRightAdjudtable = true;\n    } else if (sizeX > 1 && sizeY === 1) {\n      isRightAdjudtable = this.isXSpacingAvailable(spacing, sizeX);\n    } else if (sizeY > 1) {\n      if (sizeX === 1) {\n        var xAdjust = void 0;\n\n        if (spacing.length >= 1) {\n          xAdjust = true;\n        }\n\n        if (xAdjust) {\n          for (var i = 0; i < spacing.length; i++) {\n            var collisionValue = this.collisions(row, spacing[i], sizeX, sizeY, this.checkingElement);\n\n            for (var collision = 0; collision < collisionValue.length; collision++) {\n              if (parseInt(ele.getAttribute('data-col'), 10) !== spacing[i]) {\n                collisionValue.splice(collisionValue.indexOf(collisionValue[collision]), 1);\n              }\n            }\n\n            if (collisionValue.length === 0) {\n              isRightAdjudtable = true;\n              this.spacedColumnValue = spacing[i];\n              return isRightAdjudtable;\n            } else {\n              isRightAdjudtable = false;\n            }\n          }\n        }\n      } else {\n        isRightAdjudtable = this.replacable(spacing, sizeX, row, sizeY, ele);\n      }\n    }\n\n    return isRightAdjudtable;\n  };\n\n  DashboardLayout.prototype.replacable = function (spacing, sizeX, row, sizeY, ele) {\n    var isRightAdjudtable;\n    var updatedCollision = [];\n\n    for (var j = 0; j < spacing.length; j++) {\n      var xAdjust = this.isXSpacingAvailable(spacing, sizeX);\n\n      if (xAdjust) {\n        var exclusions = [];\n        exclusions.push(this.checkingElement);\n        exclusions.push(ele);\n\n        if (updatedCollision.length === 0) {\n          isRightAdjudtable = true;\n          this.spacedColumnValue = this.spacedColumnValue;\n          return isRightAdjudtable;\n        } else {\n          isRightAdjudtable = false;\n        }\n      }\n    }\n\n    return isRightAdjudtable;\n  };\n\n  DashboardLayout.prototype.sortCollisionItems = function (collisionItems) {\n    var updatedCollision = [];\n    var rowElements;\n\n    var _loop_3 = function (row) {\n      rowElements = [];\n      collisionItems.forEach(function (element) {\n        if (element && element.getAttribute('data-row') === row.toString()) {\n          rowElements.push(element);\n        }\n      });\n\n      var _loop_4 = function (column) {\n        rowElements.forEach(function (item) {\n          if (item && item.getAttribute('data-col') === column.toString()) {\n            updatedCollision.push(item);\n          }\n        });\n      };\n\n      for (var column = this_2.columns - 1; column >= 0; column--) {\n        _loop_4(column);\n      }\n    };\n\n    var this_2 = this;\n\n    for (var row = this.rows - 1; row >= 0; row--) {\n      _loop_3(row);\n    }\n\n    return updatedCollision;\n  };\n\n  DashboardLayout.prototype.updatedModels = function (collisionItems, panelModel, ele) {\n    var _this = this;\n\n    var removeableElement = [];\n\n    if (!this.mainElement) {\n      this.sortedPanel();\n    }\n\n    collisionItems.forEach(function (element) {\n      _this.checkingElement = element;\n\n      var model = _this.getCellInstance(element.id);\n\n      var adjust = !_this.adjustmentAvailable(model.row, model.col, model.sizeY, model.sizeX, ele);\n\n      if (model.sizeX > 1 && adjust) {\n        for (var rowValue = model.row; rowValue < panelModel.row + panelModel.sizeY; rowValue++) {\n          var collisions = _this.collisions(rowValue, model.col, model.sizeX, model.sizeY, element);\n\n          collisions.forEach(function (item) {\n            if (collisionItems.indexOf(item) >= 0 && removeableElement.indexOf(item) === -1) {\n              removeableElement.push(item);\n            }\n          });\n        }\n      }\n    });\n    removeableElement.forEach(function (item) {\n      if (removeableElement.indexOf(item) >= 0) {\n        collisionItems.splice(collisionItems.indexOf(item), 1);\n      }\n    });\n    return collisionItems;\n  };\n\n  DashboardLayout.prototype.resetLayout = function (model, element) {\n    var collisions = this.collisions(model.row, model.col, model.sizeX, model.sizeY, this.mainElement);\n\n    if (!this.mainElement || this.addPanelCalled || this.resizeCalled || this.movePanelCalled) {\n      return collisions;\n    }\n\n    if (this.mainElement && this.oldRowCol !== this.cloneObject) {\n      for (var i = 0; i < this.panels.length; i++) {\n        var element_1 = document.getElementById(this.panels[i].id);\n\n        if (element_1 === this.mainElement) {\n          continue;\n        }\n\n        var rowValue = this.cloneObject[element_1.id].row;\n        var colValue = this.cloneObject[element_1.id].col;\n        this.setPanelPosition(element_1, rowValue, colValue);\n        this.panelPropertyChange(this.getCellInstance(element_1.id), {\n          row: rowValue,\n          col: colValue\n        });\n        this.setAttributes({\n          value: {\n            col: colValue.toString(),\n            row: rowValue.toString()\n          }\n        }, element_1);\n        this.updateOldRowColumn();\n      }\n    }\n\n    this.sortedArray = this.cloneArray;\n    collisions = this.collisions(model.row, model.col, model.sizeX, model.sizeY, this.mainElement);\n    this.sortedPanel();\n    this.updateOldRowColumn();\n\n    if (this.checkCollision && this.checkCollision.length > 0 && collisions.indexOf(this.checkCollision[0]) === -1 && this.cloneObject[this.checkCollision[0].id].row === model.row) {\n      collisions.push(this.checkCollision[0]);\n    }\n\n    return collisions;\n  };\n\n  DashboardLayout.prototype.swapAvailability = function (collisions, element) {\n    var available = true;\n    var eleModel = this.getCellInstance(element.id);\n\n    for (var count = 0; count < collisions.length; count++) {\n      var collideModel = this.getCellInstance(collisions[count].id);\n\n      for (var i = 1; i < eleModel.sizeY; i++) {\n        var excludeEle = [];\n        excludeEle.push(element);\n        excludeEle.push(collisions[count]);\n        var collision = void 0;\n        collision = this.collisions(eleModel.row + i, collideModel.col, collideModel.sizeX, collideModel.sizeY, excludeEle);\n\n        if (collision.length > 0) {\n          available = false;\n          return false;\n        } else {\n          continue;\n        }\n      }\n    }\n\n    return available;\n  };\n\n  DashboardLayout.prototype.checkForSwapping = function (collisions, element, panelModel) {\n    if (!this.mainElement || collisions.length === 0) {\n      return false;\n    }\n\n    var direction;\n    var eleSwapRow = parseInt(collisions[0].getAttribute('data-row'), 10);\n\n    if (this.startRow < eleSwapRow) {\n      direction = 1;\n    } else if (this.startRow > eleSwapRow) {\n      direction = 0;\n    }\n\n    if (!this.swapAvailability(collisions, element)) {\n      return false;\n    }\n\n    var isSwappable = false;\n\n    for (var count1 = 0; count1 < collisions.length; count1++) {\n      if (collisions.length >= 1 && this.cloneObject[this.mainElement.id].row === this.oldRowCol[this.mainElement.id].row) {\n        return false;\n      }\n    }\n\n    var updatedRow = direction === 0 ? this.getCellInstance(this.mainElement.id).row + this.getCellInstance(this.mainElement.id).sizeY : this.startRow;\n\n    for (var count = 0; count < collisions.length; count++) {\n      var collideInstance = this.getCellInstance(collisions[count].id);\n      var elementinstance = this.getCellInstance(element.id);\n      var ignore = [];\n\n      if (collideInstance.sizeY === 1 && ignore.indexOf(collisions[count]) === -1) {\n        ignore.push(collisions[count]);\n      } else if (collideInstance.sizeY > 1 && ignore.indexOf(collisions[count]) === -1) {\n        if (direction === 1 && elementinstance.row === this.cloneObject[collideInstance.id].row + collideInstance.sizeY - 1) {\n          ignore.push(collisions[count]);\n        } else if (direction === 0 && elementinstance.row === this.cloneObject[collideInstance.id].row) {\n          ignore.push(collisions[count]);\n        } else {\n          return false;\n        }\n      }\n\n      if (collideInstance.sizeY <= elementinstance.sizeY && ignore.indexOf(collisions[count]) === -1) {\n        ignore.push(collisions[count]);\n      }\n\n      var swapCollision = void 0;\n      ignore.push(this.mainElement);\n      swapCollision = this.collisions(updatedRow, collideInstance.col, collideInstance.sizeX, collideInstance.sizeY, ignore);\n\n      if (swapCollision.length > 0) {\n        isSwappable = false;\n        return isSwappable;\n      } else {\n        if (count === collisions.length - 1) {\n          isSwappable = true;\n        }\n\n        continue;\n      }\n    }\n\n    return isSwappable;\n  };\n\n  DashboardLayout.prototype.swapItems = function (collisions, element, panelModel) {\n    var _this = this;\n\n    var direction;\n    var swappedElements = [];\n    swappedElements.push(element);\n    var eleSwapRow = parseInt(collisions[0].getAttribute('data-row'), 10);\n\n    if (this.startRow < eleSwapRow) {\n      direction = 1;\n    } else if (this.startRow > eleSwapRow) {\n      direction = 0;\n    }\n\n    var collisionItemsRow = direction === 0 ? eleSwapRow + panelModel.sizeY : this.startRow;\n\n    if (!this.movePanelCalled) {\n      var collisionInstance = this.getCellInstance(collisions[0].id);\n      this.panelPropertyChange(panelModel, {\n        row: direction === 0 ? eleSwapRow : collisionItemsRow + collisionInstance.sizeY\n      });\n    }\n\n    for (var count = 0; count < collisions.length; count++) {\n      swappedElements.push(collisions[count]);\n      this.setPanelPosition(collisions[count], collisionItemsRow, this.getCellInstance(collisions[count].id).col);\n      this.panelPropertyChange(this.getCellInstance(collisions[count].id), {\n        row: collisionItemsRow\n      });\n      collisions[count].setAttribute('data-row', collisionItemsRow.toString());\n    }\n\n    element.setAttribute('data-row', panelModel.row.toString());\n    this.setPanelPosition(this.shadowEle, panelModel.row, panelModel.col);\n\n    for (var i = 0; i < this.panels.length; i++) {\n      this.oldRowCol[this.panels[i].id] = {\n        row: this.panels[i].row,\n        col: this.panels[i].col\n      };\n    }\n\n    this.startRow = panelModel.row;\n    this.updateOldRowColumn();\n    swappedElements.forEach(function (item) {\n      _this.cloneObject[item.id] = _this.oldRowCol[item.id];\n\n      var itemModel = _this.getCellInstance(item.id);\n\n      for (var i = 0; i < _this.sortedArray.length; i++) {\n        if (!_this.sortedArray[i]) {\n          continue;\n        }\n\n        for (var j = 0; j < _this.sortedArray[i].length; j++) {\n          if (_this.sortedArray[i][j] === item) {\n            _this.sortedArray[i][j] = undefined;\n          }\n        }\n      }\n\n      if (!_this.sortedArray[itemModel.row]) {\n        _this.sortedArray[itemModel.row] = [];\n      }\n\n      _this.sortedArray[itemModel.row][itemModel.col] = item;\n      _this.cloneArray = _this.sortedArray;\n    });\n  };\n\n  DashboardLayout.prototype.updatePanelLayout = function (element, panelModel) {\n    this.collisionChecker = {};\n    var initialModel = [];\n    var checkForAdjustment;\n    var collisionModels = [];\n    var swappingAvailable;\n\n    if (this.mainElement && this.isRenderComplete) {\n      initialModel = this.resetLayout(panelModel, element);\n    } else {\n      initialModel = this.collisions(panelModel.row, panelModel.col, panelModel.sizeX, panelModel.sizeY, element);\n    }\n\n    if (initialModel.length > 0) {\n      initialModel = this.sortCollisionItems(initialModel);\n      initialModel = this.updatedModels(initialModel, panelModel, element);\n      swappingAvailable = !isNullOrUndefined(this.startRow) ? this.checkForSwapping(initialModel, element, panelModel) : false;\n\n      if (swappingAvailable) {\n        this.swapItems(initialModel, element, panelModel);\n      } else {\n        for (var i = 0; i < initialModel.length; i++) {\n          var model = this.getCellInstance(initialModel[i].id);\n          this.checkingElement = initialModel[i];\n          this.spacedRowValue = null;\n          this.spacedColumnValue = null;\n          checkForAdjustment = this.adjustmentAvailable(model.row, model.col, model.sizeY, model.sizeX, element);\n\n          if (checkForAdjustment && !isNullOrUndefined(this.spacedColumnValue)) {\n            this.setPanelPosition(initialModel[i], this.spacedRowValue, this.spacedColumnValue);\n            this.oldRowCol[initialModel[i].id] = {\n              row: this.spacedRowValue,\n              col: this.spacedColumnValue\n            };\n            var value = {\n              attributes: {\n                row: this.spacedRowValue.toString(),\n                col: this.spacedColumnValue.toString()\n              }\n            };\n            this.setAttributes(value, initialModel[i]);\n            this.panelPropertyChange(model, {\n              col: this.spacedColumnValue,\n              row: this.spacedRowValue\n            }); // updated the panel model array as inTopAdjustable case with floating enabled instead of dragging and extra row\n\n            if (this.topAdjustable && this.allowFloating) {\n              this.updatePanels();\n              this.updateCloneArrayObject();\n            }\n\n            this.spacedRowValue = null;\n\n            if (i < initialModel.length) {\n              continue;\n            }\n          } else {\n            collisionModels.push(initialModel[i]);\n          }\n        }\n      }\n    }\n\n    if (collisionModels.length > 0) {\n      var proxy_1 = this;\n      collisionModels.forEach(function (item1) {\n        if (proxy_1.overlapElement.indexOf(item1) === -1) {\n          proxy_1.overlapElement.push(item1);\n        }\n      });\n\n      if (this.overlapElement && this.overlapElement.indexOf(element) !== -1) {\n        this.overlapElement.splice(this.overlapElement.indexOf(element), 1);\n      }\n\n      if (collisionModels.length > 0) {\n        this.updateRowColumn(panelModel.row, this.overlapElement, element);\n        this.checkForCompletePushing();\n      }\n    }\n\n    if (!this.isSubValue) {\n      this.sortedPanel();\n    }\n\n    this.updateRowHeight();\n    this.updateGridLines();\n  };\n\n  DashboardLayout.prototype.checkForCompletePushing = function () {\n    for (var i = 0; i < this.panels.length; i++) {\n      if (this.collisionChecker[this.panels[i].id] && this.collisionChecker[this.panels[i].id] !== null) {\n        this.overlapElement = [this.collisionChecker[this.panels[i].id].ele];\n        var key = this.panels[i].id;\n        this.updateRowColumn(this.collisionChecker[key].row, this.overlapElement, this.collisionChecker[key].srcEle);\n      }\n    }\n  };\n\n  DashboardLayout.prototype.updateCollisionChecked = function (item) {\n    for (var count = 0; count < Object.keys(this.collisionChecker).length; count++) {\n      this.collisionChecker[item.id] = null;\n    }\n  };\n\n  DashboardLayout.prototype.updateRowColumn = function (row, ele, srcEle) {\n    if (!srcEle) {\n      return;\n    }\n\n    var eleSizeY = parseInt(srcEle.getAttribute('data-sizeY'), 10);\n    var eleRow = parseInt(srcEle.getAttribute('data-row'), 10);\n    this.overlapElementClone = this.overlapElement && !this.shouldRestrict ? this.overlapElement : this.overlapElement;\n\n    for (var i = 0; i < this.overlapElementClone.length; i++) {\n      if (this.overlapElementClone.length === 0) {\n        return;\n      }\n\n      for (var i_1 = 0; i_1 < this.overlapElementClone.length; i_1++) {\n        this.collisionChecker[this.overlapElementClone[i_1].id] = {\n          ele: this.overlapElementClone[i_1],\n          row: row,\n          srcEle: srcEle\n        };\n      }\n\n      var updatedRow = eleRow + eleSizeY;\n      var collisionY = parseInt(this.overlapElementClone[i].getAttribute('data-sizeY'), 10);\n      var collisionCol = parseInt(this.overlapElementClone[i].getAttribute('data-col'), 10);\n      var collisionX = parseInt(this.overlapElementClone[i].getAttribute('data-sizeX'), 10);\n      var colValue = void 0;\n      var collisionModels = void 0;\n\n      if (this.overlapSubElementClone.indexOf(srcEle) === -1) {\n        this.overlapSubElementClone.push(srcEle);\n      }\n\n      if (this.overlapSubElementClone.indexOf(this.overlapElementClone[i]) === -1) {\n        this.overlapSubElementClone.push(this.overlapElementClone[i]);\n      }\n\n      if (collisionY > 1 || collisionX > 1) {\n        var overlapElementModel = this.getCellInstance(this.overlapElementClone[i].id);\n        colValue = overlapElementModel.col;\n        var ele_1 = document.getElementById(overlapElementModel.id);\n\n        for (var k = overlapElementModel.row; k < eleRow + eleSizeY; k++) {\n          this.isSubValue = true;\n          this.panelPropertyChange(overlapElementModel, {\n            row: overlapElementModel.row + 1\n          });\n          ele_1.setAttribute('data-row', overlapElementModel.row.toString());\n          this.setPanelPosition(ele_1, overlapElementModel.row, colValue);\n          this.updateCollisionChecked(ele_1);\n          this.oldRowCol[ele_1.id] = {\n            row: overlapElementModel.row,\n            col: colValue\n          };\n          var panelModel = this.getCellInstance(ele_1.id);\n          this.panelPropertyChange(panelModel, {\n            col: colValue,\n            row: overlapElementModel.row\n          });\n          var eleRow_1 = parseInt(ele_1.getAttribute('data-row'), 10);\n          var eleCol = parseInt(ele_1.getAttribute('data-col'), 10);\n          var sizeX = parseInt(ele_1.getAttribute('data-sizeX'), 10);\n          var sizeY = parseInt(ele_1.getAttribute('data-sizeY'), 10);\n          var excludeElements = [];\n          excludeElements.push(ele_1);\n          excludeElements.push(srcEle);\n          collisionModels = this.collisions(eleRow_1, eleCol, sizeX, sizeY, excludeElements);\n\n          if (this.mainElement && collisionModels.indexOf(this.mainElement) !== -1) {\n            collisionModels.splice(collisionModels.indexOf(this.mainElement), 1);\n          }\n\n          this.collisionPanel(collisionModels, eleCol, eleRow_1, ele_1);\n        }\n\n        this.isSubValue = false;\n      } else {\n        if (this.addPanelCalled) {\n          this.addPanelCalled = false;\n        }\n\n        this.overlapElementClone[i].setAttribute('data-row', updatedRow.toString());\n        var excludeEle = [];\n        excludeEle.push(this.overlapElementClone[i]);\n        excludeEle.push(srcEle);\n        collisionModels = this.collisions(updatedRow, collisionCol, collisionX, collisionY, excludeEle);\n\n        if (this.mainElement && collisionModels.indexOf(this.mainElement) !== -1) {\n          collisionModels.splice(collisionModels.indexOf(this.mainElement), 1);\n        }\n\n        colValue = parseInt(this.overlapElementClone[i].getAttribute('data-col'), 10);\n        this.setPanelPosition(this.overlapElementClone[i], updatedRow, colValue);\n        this.updateCollisionChecked(this.overlapElementClone[i]);\n        this.oldRowCol[this.overlapElementClone[i].id] = {\n          row: updatedRow,\n          col: colValue\n        };\n        var panelModel = this.getCellInstance(this.overlapElementClone[i].id);\n        this.panelPropertyChange(panelModel, {\n          col: colValue,\n          row: updatedRow\n        });\n        this.collisionPanel(collisionModels, colValue, updatedRow, this.overlapElementClone[i]);\n      }\n    }\n  };\n\n  DashboardLayout.prototype.collisionPanel = function (collisionModels, colValue, updatedRow, clone) {\n    var panelModel = this.getCellInstance(clone.id);\n    this.panelPropertyChange(panelModel, {\n      row: updatedRow,\n      col: colValue\n    });\n\n    if (collisionModels.length > 0) {\n      var proxy_2 = this;\n      this.overlapElement = [];\n      this.shouldRestrict = true;\n      collisionModels.forEach(function (item1) {\n        proxy_2.overlapElement.push(item1);\n      });\n      var overlapElementRow1 = parseInt(clone.getAttribute('data-row'), 10);\n\n      for (var m = 0; m < this.overlapElement.length; m++) {\n        this.updateRowColumn(overlapElementRow1, this.overlapElement, clone);\n      }\n\n      this.shouldRestrict = false;\n    } else {\n      if (!this.addPanelCalled) {\n        this.sortedPanel();\n      }\n\n      if (this.overlapSubElementClone.length > 0) {\n        var _loop_5 = function (p) {\n          var rowVal = parseInt(this_3.overlapSubElementClone[p].getAttribute('data-row'), 10);\n          var colValue_1 = parseInt(this_3.overlapSubElementClone[p].getAttribute('data-col'), 10);\n          var sizeX = parseInt(this_3.overlapSubElementClone[p].getAttribute('data-sizeX'), 10);\n          var sizeY = parseInt(this_3.overlapSubElementClone[p].getAttribute('data-sizeY'), 10);\n          var collisionModels1 = void 0;\n          collisionModels1 = this_3.collisions(rowVal, colValue_1, sizeX, sizeY, this_3.overlapSubElementClone);\n\n          if (this_3.mainElement && collisionModels1.indexOf(this_3.mainElement) !== -1) {\n            collisionModels1.splice(collisionModels1.indexOf(this_3.mainElement), 1);\n          }\n\n          var proxy = this_3;\n          collisionModels1.forEach(function (item1) {\n            proxy.overlapElement.push(item1);\n          });\n\n          if (collisionModels1.length > 0) {\n            this_3.updateRowColumn(rowVal, this_3.overlapElement, this_3.overlapSubElementClone[p]);\n          }\n        };\n\n        var this_3 = this;\n\n        for (var p = 0; p < this.overlapSubElementClone.length; p++) {\n          _loop_5(p);\n        }\n      }\n\n      this.overlapSubElementClone = [];\n    }\n  };\n\n  DashboardLayout.prototype.removeResizeClasses = function (panelElements) {\n    for (var i = 0; i < panelElements.length; i++) {\n      var element = panelElements[i];\n      var resizerElements = element.querySelectorAll('.e-resize');\n\n      for (var i_2 = 0; i_2 < resizerElements.length; i_2++) {\n        detach(resizerElements[i_2]);\n      }\n    }\n  };\n\n  DashboardLayout.prototype.ensureDrag = function () {\n    this.checkDragging(this.dragCollection);\n    var dragPanels = this.element.querySelectorAll('.' + drag);\n    removeClass(dragPanels, [drag]);\n    this.setClasses(this.panelCollection);\n  };\n\n  DashboardLayout.prototype.setClasses = function (panelCollection) {\n    for (var i = 0; i < panelCollection.length; i++) {\n      var element = panelCollection[i];\n      var containerEle = panelCollection[i].querySelector('.e-panel-container');\n\n      if (this.allowDragging) {\n        if (this.draggableHandle && element.querySelectorAll(this.draggableHandle)[0]) {\n          addClass([element.querySelectorAll(this.draggableHandle)[0]], [drag]);\n        } else {\n          addClass([element], [drag]);\n        }\n      }\n\n      if (this.allowResizing && this.mediaQuery ? !this.checkMediaQuery() : false) {\n        this.setResizingClass(element, containerEle);\n      }\n    }\n  };\n\n  DashboardLayout.prototype.setResizingClass = function (ele, container) {\n    this.availableClasses = this.resizableHandles;\n\n    for (var j = 0; j < this.availableClasses.length; j++) {\n      var spanEle = this.createElement('span');\n      var addClassValue = void 0;\n      container.appendChild(spanEle);\n\n      if (this.availableClasses[j] === 'e-east' || this.availableClasses[j] === 'e-west' || this.availableClasses[j] === 'e-north' || this.availableClasses[j] === 'e-south') {\n        addClassValue = single;\n      } else {\n        addClassValue = double;\n      }\n\n      addClass([spanEle], [addClassValue, this.availableClasses[j], resize, resizeicon]);\n    }\n  };\n\n  DashboardLayout.prototype.setXYAttributes = function (element, panelModel) {\n    var value = {\n      value: {\n        sizeX: panelModel.sizeX.toString(),\n        sizeY: panelModel.sizeY.toString(),\n        minSizeX: panelModel.minSizeX.toString(),\n        minSizeY: panelModel.minSizeY.toString(),\n        maxSizeX: !isNullOrUndefined(panelModel.maxSizeX) ? panelModel.maxSizeX.toString() : undefined,\n        maxSizeY: !isNullOrUndefined(panelModel.maxSizeY) ? panelModel.maxSizeY.toString() : undefined,\n        row: panelModel.row.toString(),\n        col: panelModel.col.toString()\n      }\n    };\n    this.setAttributes(value, element);\n  };\n\n  DashboardLayout.prototype.setXYDimensions = function (panelModel) {\n    var cellHeight = this.getCellSize()[1];\n    var cellWidth = this.getCellSize()[0];\n    var widthValue;\n    var heigthValue;\n\n    if (panelModel && typeof cellWidth === 'number' && typeof panelModel.sizeX === 'number' && panelModel.sizeX > 1) {\n      widthValue = panelModel.sizeX * cellWidth + (panelModel.sizeX - 1) * this.cellSpacing[0];\n    } else {\n      widthValue = cellWidth;\n    }\n\n    if (panelModel && typeof cellHeight === 'number' && panelModel.sizeY > 1 && typeof panelModel.sizeY === 'number') {\n      heigthValue = panelModel.sizeY * cellHeight + (panelModel.sizeY - 1) * this.cellSpacing[1];\n    } else {\n      heigthValue = formatUnit(cellHeight);\n    }\n\n    return [heigthValue, widthValue];\n  };\n\n  DashboardLayout.prototype.getRowColumnDragValues = function (args) {\n    var value = [];\n    var elementTop = parseFloat(args.element.style.top);\n    var elementLeft = parseFloat(args.element.style.left);\n    var row = Math.round(elementTop / (this.getCellSize()[1] + this.cellSpacing[1]));\n    var col = Math.round(elementLeft / (this.getCellSize()[0] + +this.cellSpacing[0]));\n    value = [row, col];\n    return value;\n  };\n\n  DashboardLayout.prototype.checkForChanges = function (isInteracted, added, removed) {\n    var changedPanels = [];\n\n    if (this.removeAllCalled) {\n      changedPanels = [];\n    } else {\n      for (var i = 0; i < this.panels.length; i++) {\n        if ((!isNullOrUndefined(added) ? this.panels[i].id !== added[0].id : true) && (!isNullOrUndefined(removed) ? this.panels[i].id !== removed[0].id : true) && (this.panels[i].row !== this.panelsInitialModel[i].row || this.panels[i].col !== this.panelsInitialModel[i].col)) {\n          changedPanels.push(this.panels[i]);\n        }\n      }\n    }\n\n    if (changedPanels.length > 0 || this.removeAllCalled) {\n      var changedArgs = {\n        changedPanels: changedPanels,\n        isInteracted: isInteracted,\n        addedPanels: !isNullOrUndefined(added) ? added : [],\n        removedPanels: !isNullOrUndefined(removed) ? removed : []\n      };\n      this.trigger('change', changedArgs);\n    }\n  };\n\n  DashboardLayout.prototype.enableDraggingContent = function (collections) {\n    var _this = this;\n\n    for (var i = 0; i < collections.length; i++) {\n      var abortArray = ['.e-resize', '.' + dragRestrict];\n      var cellElement = collections[i];\n      {\n        this.dragobj = new Draggable(cellElement, {\n          preventDefault: false,\n          clone: false,\n          dragArea: this.element,\n          isDragScroll: true,\n          handle: this.draggableHandle ? this.draggableHandle : '.e-panel',\n          abort: abortArray,\n          dragStart: this.onDraggingStart.bind(this),\n          dragStop: function (args) {\n            var model = _this.getCellInstance(_this.mainElement.id);\n\n            if (_this.allowPushing && _this.collisions(model.row, model.col, model.sizeX, model.sizeY, _this.mainElement).length > 0) {\n              _this.setHolderPosition(args);\n\n              _this.setPanelPosition(_this.mainElement, model.row, model.col);\n\n              _this.updatePanelLayout(_this.mainElement, model);\n            } else {\n              _this.setPanelPosition(_this.mainElement, model.row, model.col);\n            }\n\n            _this.mainElement = null;\n\n            var item = _this.getPanelBase(args);\n\n            if (_this.shadowEle) {\n              detach(_this.shadowEle);\n            }\n\n            removeClass([_this.element], [preventSelect]);\n            removeClass([args.element], [dragging]);\n            _this.shadowEle = null;\n            args.element.classList.remove('e-dragging');\n\n            var row = _this.getRowColumnDragValues(args)[0];\n\n            var col = _this.getRowColumnDragValues(args)[1];\n\n            var panelModel = _this.getCellInstance(args.element.id);\n\n            if (_this.allowPushing && _this.collisions(row, col, panelModel.sizeX, panelModel.sizeY, document.getElementById(item.id)).length === 0) {\n              _this.panelPropertyChange(_this.getCellInstance(args.element.id), {\n                row: row,\n                col: col\n              });\n\n              _this.oldRowCol[args.element.id].row = row;\n              _this.oldRowCol[args.element.id].col = col;\n\n              _this.setAttributes({\n                value: {\n                  col: col.toString(),\n                  row: row.toString()\n                }\n              }, args.element);\n\n              _this.sortedPanel();\n            } else {\n              _this.panelPropertyChange(_this.getCellInstance(args.element.id), {\n                row: _this.oldRowCol[args.element.id].row,\n                col: _this.oldRowCol[args.element.id].col\n              });\n\n              args.element.setAttribute('data-col', _this.getCellInstance(args.element.id).col.toString());\n              args.element.setAttribute('data-row', _this.getCellInstance(args.element.id).row.toString());\n\n              _this.sortedPanel();\n            }\n\n            var panelInstance = _this.getCellInstance(args.element.id);\n\n            _this.setPanelPosition(args.element, panelInstance.row, panelInstance.col);\n\n            _this.updatePanels();\n\n            _this.updateServerPanelData();\n\n            _this.updateCloneArrayObject();\n\n            _this.checkForChanges(true);\n\n            _this.dragStopEventArgs = {\n              event: args.event,\n              element: args.element\n            };\n\n            _this.trigger('dragStop', args);\n\n            _this.resizeEvents();\n\n            _this.rows = _this.maxRow(true);\n\n            _this.setHeightWidth();\n\n            _this.updateDragArea();\n          },\n          drag: function (args) {\n            _this.draggedEventArgs = {\n              event: args.event,\n              element: args.element,\n              target: closest(args.target, '.e-panel')\n            };\n\n            _this.trigger('drag', _this.draggedEventArgs);\n\n            _this.onDragStart(args);\n          }\n        });\n\n        if (this.dragCollection.indexOf(this.dragobj) === -1) {\n          this.dragCollection.push(this.dragobj);\n        }\n      }\n    }\n  };\n\n  ;\n\n  DashboardLayout.prototype.updatePanels = function () {\n    this.moveItemsUpwards();\n    this.updateOldRowColumn();\n    this.sortedPanel();\n  };\n\n  DashboardLayout.prototype.updateDragArea = function () {\n    this.dragCollection.forEach(function (dragobj) {\n      // tslint:disable-next-line\n      dragobj.setDragArea();\n    });\n  };\n\n  DashboardLayout.prototype.updateRowsHeight = function (row, sizeY, addRows) {\n    if (row + sizeY >= this.rows) {\n      this.rows = this.rows + addRows;\n      this.setHeightWidth();\n    }\n  };\n\n  DashboardLayout.prototype.onDraggingStart = function (args) {\n    var dragArgs = args;\n    this.trigger('dragStart', dragArgs, function (dragArgs) {\n      if (isBlazor()) {\n        dragArgs.bindEvents(args.element);\n      }\n    });\n    this.panelsInitialModel = this.cloneModels(this.panels);\n    this.mainElement = args.element;\n    this.cloneObject = JSON.parse(JSON.stringify(this.cloneObject));\n    var eleRowValue = this.startRow = parseInt(args.element.getAttribute('data-row'), 10);\n    this.startCol = parseInt(args.element.getAttribute('data-col'), 10);\n    var eleSizeY = parseInt(args.element.getAttribute('data-sizeY'), 10);\n    this.updateRowsHeight(eleRowValue, eleSizeY, eleSizeY);\n    this.updateDragArea();\n    this.shadowEle = document.createElement('div');\n    this.shadowEle.classList.add('e-holder');\n    this.shadowEle.classList.add('e-holder-transition');\n    setStyle(this.shadowEle, {\n      'position': 'absolute'\n    });\n    addClass([this.element], [preventSelect]);\n    addClass([args.element], [dragging]);\n    this.element.appendChild(this.shadowEle);\n    this.shadowEle = document.querySelector('.e-holder');\n    this.shadowEle.style.height = this.getCellInstance(args.element.id).sizeY * this.cellSize[1] + 'px';\n    this.shadowEle.style.width = this.getCellInstance(args.element.id).sizeX * this.cellSize[0] + 'px';\n    var panelInstance = this.getCellInstance(args.element.id);\n    this.setPanelPosition(this.shadowEle, panelInstance.row, panelInstance.col);\n  };\n\n  ; // tslint:disable-next-line\n\n  DashboardLayout.prototype.cloneModels = function (source, target) {\n    if (target === undefined) {\n      target = [];\n    }\n\n    for (var i = 0; i < source.length; i++) {\n      // tslint:disable-next-line\n      if (!target[i]) {\n        target[i] = {};\n      } // tslint:disable-next-line\n\n\n      for (var k in source[i]) {\n        target[i][k] = source[i][k];\n      }\n    }\n\n    return target;\n  };\n\n  ;\n\n  DashboardLayout.prototype.onDragStart = function (args) {\n    var endCol;\n    var endRow;\n    var dragCol;\n    var col = dragCol = this.getRowColumnDragValues(args)[1];\n    var row = this.getRowColumnDragValues(args)[0];\n\n    if (col < 0 || row < 0) {\n      return;\n    }\n\n    this.panelPropertyChange(this.getCellInstance(args.element.id), {\n      row: row,\n      col: col\n    });\n    var panelModel = this.getCellInstance(args.element.id);\n    this.updateRowsHeight(panelModel.row, panelModel.sizeY, 1);\n    this.updateDragArea();\n\n    if (this.allowPushing) {\n      this.setAttributes({\n        value: {\n          col: col.toString(),\n          row: row.toString()\n        }\n      }, args.element);\n      this.panelPropertyChange(this.getCellInstance(args.element.id), {\n        row: row,\n        col: col\n      });\n      endCol = this.oldRowCol[args.element.id].col;\n      endRow = this.oldRowCol[args.element.id].row;\n      this.oldRowCol[args.element.id] = {\n        row: row,\n        col: col\n      };\n      this.updateOldRowColumn();\n\n      if (this.startCol !== endCol || this.startRow !== endRow) {\n        this.setHolderPosition(args);\n\n        if (this.startCol !== endCol) {\n          this.startRow = endRow;\n        }\n\n        if (this.startRow !== endRow) {\n          this.startCol = endCol;\n        }\n\n        if (this.allowPushing) {\n          this.mainElement = args.element;\n          var model = panelModel;\n          this.checkCollision = this.collisions(model.row, model.col, model.sizeX, model.sizeY, args.element);\n\n          if (panelModel.col >= this.checkColumnValue) {\n            this.checkCollision = [];\n          }\n\n          this.updatePanelLayout(args.element, panelModel);\n          this.moveItemsUpwards();\n        }\n      }\n    }\n\n    if (this.allowPushing !== false) {\n      this.panelPropertyChange(this.getCellInstance(args.element.id), {\n        row: row,\n        col: col\n      });\n    }\n\n    if (this.oldRowCol[args.element.id].row !== row || this.oldRowCol[args.element.id].col !== col) {\n      this.panelPropertyChange(this.getCellInstance(args.element.id), {\n        row: row,\n        col: col\n      });\n      this.setAttributes({\n        value: {\n          col: col.toString(),\n          row: row.toString()\n        }\n      }, args.element);\n    }\n\n    if (this.startCol !== dragCol) {\n      this.startCol = endCol;\n      this.moveItemsUpwards();\n    }\n\n    if (!this.allowPushing) {\n      this.setHolderPosition(args);\n    }\n\n    this.removeResizeClasses(this.panelCollection);\n    this.setClasses(this.panelCollection);\n\n    if (this.allowPushing === false) {\n      return;\n    }\n  };\n\n  DashboardLayout.prototype.getPanelBase = function (args) {\n    var item;\n\n    for (var i = 0; i < this.panelCollection.length; i++) {\n      if (this.panelCollection[i].id === (args.element && args.element.id || args)) {\n        item = this.panelCollection[i];\n      }\n    }\n\n    return item;\n  };\n\n  DashboardLayout.prototype.getPanel = function (row, column, excludeItems) {\n    if (excludeItems && !(excludeItems instanceof Array)) {\n      excludeItems = [excludeItems];\n    }\n\n    var sizeY = 1;\n\n    while (row > -1) {\n      var sizeX = 1;\n      var col = column;\n\n      while (col > -1) {\n        var items = this.sortedArray[row];\n\n        if (items) {\n          var item = items[col];\n\n          if (item && (!excludeItems || excludeItems.indexOf(item) === -1) && parseInt(item.getAttribute('data-sizeX'), 10) >= sizeX && parseInt(item.getAttribute('data-sizeY'), 10) >= sizeY) {\n            return item;\n          }\n        }\n\n        ++sizeX;\n        --col;\n      }\n\n      --row;\n      ++sizeY;\n    }\n\n    return null;\n  };\n\n  ;\n\n  DashboardLayout.prototype.setHolderPosition = function (args) {\n    var cellSizeOne;\n    var cellSizeZero;\n    var sizeY = parseInt(args.element.getAttribute('data-sizeY'), 10);\n    var col = parseInt(args.element.getAttribute('data-col'), 10);\n    var row = parseInt(args.element.getAttribute('data-row'), 10);\n    var sizeX = parseInt(args.element.getAttribute('data-sizeX'), 10);\n    var widthValue = this.getCellSize()[0];\n    var heightValue = this.getCellSize()[1];\n    var top = row === 0 ? 0 : row * (heightValue + this.cellSpacing[1]);\n    var left = col === 0 ? 0 : col * (widthValue + this.cellSpacing[0]);\n    cellSizeOne = this.getCellSize()[1];\n    cellSizeZero = this.getCellSize()[0];\n    this.elementRef.top = this.shadowEle.style.top = top + 'px';\n    this.elementRef.left = this.shadowEle.style.left = left + 'px';\n    this.elementRef.height = this.shadowEle.style.height = sizeY * cellSizeOne + (sizeY - 1) * this.cellSpacing[1] + 'px';\n    this.elementRef.width = this.shadowEle.style.width = sizeX * cellSizeZero + (sizeX - 1) * this.cellSpacing[0] + 'px';\n  };\n\n  ;\n\n  DashboardLayout.prototype.getCellInstance = function (idValue) {\n    var currentCellInstance;\n\n    for (var i = 0; i < this.panels.length; i++) {\n      if (this.panels[i].id === idValue) {\n        currentCellInstance = this.panels[i];\n      }\n    }\n\n    return currentCellInstance;\n  };\n  /**\n   * Allows to add a panel to the Dashboardlayout.\n   * @param {panel: [`PanelModel`](./panelModel)} panel -  Defines the panel element.\n   * @returns void\n    */\n\n\n  DashboardLayout.prototype.addPanel = function (panel) {\n    this.allowServerDataBinding = false;\n    this.maxCol();\n\n    if (!panel.minSizeX) {\n      panel.minSizeX = 1;\n    }\n\n    if (!panel.minSizeY) {\n      panel.minSizeY = 1;\n    }\n\n    if (!panel.id) {\n      panel.id = 'layout_' + this.panelID.toString();\n      this.panelID = this.panelID + 1;\n    } // tslint:disable-next-line\n\n\n    var panelProp = new Panel(this, 'panels', panel, true);\n    this.panels.push(panelProp);\n    this.panelsInitialModel = this.cloneModels(this.panels);\n    this.setMinMaxValues(panelProp);\n\n    if (this.maxColumnValue < panelProp.col || this.maxColumnValue < panelProp.col + panelProp.sizeX) {\n      this.panelPropertyChange(panelProp, {\n        col: this.maxColumnValue - panelProp.sizeX\n      });\n    }\n\n    var cell = this.renderCell(panelProp, true, null);\n    this.oldRowCol[panelProp.id] = {\n      row: panelProp.row,\n      col: panelProp.col\n    };\n    this.cloneObject[panelProp.id] = {\n      row: panelProp.row,\n      col: panelProp.col\n    };\n    this.updateOldRowColumn();\n    this.element.insertAdjacentElement('afterbegin', cell);\n    this.addPanelCalled = true;\n\n    if (this.checkMediaQuery()) {\n      this.checkMediaQuerySizing();\n\n      if (this.isBlazor) {\n        cell.style.removeProperty('visibility');\n      }\n\n      this.removeResizeClasses(this.panelCollection);\n    } else {\n      this.mainElement = cell;\n\n      if (!this.checkCollision) {\n        this.checkCollision = [];\n      }\n\n      this.setPanelPosition(cell, panelProp.row, panelProp.col);\n\n      if (this.isBlazor) {\n        cell.style.removeProperty('visibility');\n      }\n\n      this.updatePanelLayout(cell, panelProp);\n    }\n\n    this.addPanelCalled = false;\n\n    if (this.allowDragging && this.mediaQuery ? !this.checkMediaQuery() : false) {\n      this.enableDraggingContent([document.getElementById(panelProp.id)]);\n    }\n\n    this.setClasses([cell]);\n\n    if (this.allowFloating) {\n      this.moveItemsUpwards();\n    }\n\n    this.updateOldRowColumn();\n    this.sortedPanel();\n    this.updateCloneArrayObject();\n\n    if (this.allowResizing) {\n      for (var i = 0; i < cell.querySelectorAll('.e-resize').length; i++) {\n        var eventName = Browser.info.name === 'msie' ? 'mousedown pointerdown' : 'mousedown';\n        EventHandler.add(cell.querySelectorAll('.e-resize')[i], eventName, this.downResizeHandler, this);\n\n        if (Browser.info.name !== 'msie') {\n          EventHandler.add(cell.querySelectorAll('.e-resize')[i], 'touchstart', this.touchDownResizeHandler, this);\n        }\n      }\n    }\n\n    this.checkForChanges(false, [panelProp]);\n    this.allowServerDataBinding = true;\n    this.serverDataBind();\n  };\n  /**\n   * Allows to update a panel in the DashboardLayout.\n   * @param {panel: [`panelModel`](./panelModel)} panel - Defines the panel element.\n   * @returns void\n    */\n\n\n  DashboardLayout.prototype.updatePanel = function (panel) {\n    if (!panel.id) {\n      return;\n    }\n\n    var panelInstance = this.getCellInstance(panel.id);\n\n    if (!panelInstance) {\n      return;\n    }\n\n    this.maxCol();\n    panel.col = panel.col < 1 ? 0 : panel.col > this.columns ? this.columns - 1 : panel.col;\n\n    if (isNullOrUndefined(panel.col)) {\n      panel.col = panelInstance.col;\n    }\n\n    this.panelPropertyChange(panelInstance, panel);\n    this.setMinMaxValues(panelInstance);\n    var cell = document.getElementById(panel.id);\n    this.mainElement = cell;\n    var cssClass = panelInstance.cssClass ? panelInstance.cssClass.split(' ') : null;\n    this.panelContent = cell.querySelector('.e-panel-container') ? cell.querySelector('.e-panel-container') : this.createSubElement(cssClass, cell.id + '_content', panelContainer);\n    cell.appendChild(this.panelContent);\n\n    if (panelInstance.header) {\n      var headerTemplateElement = cell.querySelector('.e-panel-header') ? cell.querySelector('.e-panel-header') : this.createSubElement([], cell.id + 'template', '');\n      addClass([headerTemplateElement], [header]);\n      headerTemplateElement.innerHTML = '';\n      var id = this.element.id + 'HeaderTemplate' + panelInstance.id;\n      this.renderTemplate(panelInstance.header, headerTemplateElement, id, true);\n      this.panelContent.appendChild(headerTemplateElement);\n    } else {\n      if (cell.querySelector('.e-panel-header')) {\n        detach(cell.querySelector('.e-panel-header'));\n      }\n    }\n\n    if (panelInstance.content) {\n      var cssClass_2 = panelInstance.cssClass ? panelInstance.cssClass.split(' ') : null;\n      this.panelBody = cell.querySelector('.e-panel-content') ? cell.querySelector('.e-panel-content') : this.createSubElement(cssClass_2, cell.id + '_body', panelContent);\n      this.panelBody.innerHTML = '';\n      var headerHeight = this.panelContent.querySelector('.e-panel-header') ? window.getComputedStyle(this.panelContent.querySelector('.e-panel-header')).height : '0px';\n      var contentHeightValue = 'calc( 100% - ' + headerHeight + ')';\n      setStyle(this.panelBody, {\n        height: contentHeightValue\n      });\n      var id = this.element.id + 'ContentTemplate' + panelInstance.id;\n      this.renderTemplate(panelInstance.content, this.panelBody, id, true);\n      this.panelContent.appendChild(this.panelBody);\n    } else {\n      if (cell.querySelector('.e-panel-content')) {\n        detach(cell.querySelector('.e-panel-content'));\n      }\n    }\n\n    this.setXYAttributes(cell, panelInstance);\n    this.setHeightAndWidth(cell, panelInstance);\n    this.setPanelPosition(cell, panelInstance.row, panelInstance.col);\n    this.updatePanelLayout(cell, panelInstance);\n    this.mainElement = null;\n    this.updatePanels();\n    this.updateCloneArrayObject();\n  };\n\n  DashboardLayout.prototype.updateCloneArrayObject = function () {\n    this.cloneArray = this.sortedArray;\n    this.cloneObject = JSON.parse(JSON.stringify(this.oldRowCol));\n  };\n  /**\n   * Returns the panels object of the DashboardLayout.\n   * @returns [`PanelModel[]`](./panelModel)\n   */\n\n\n  DashboardLayout.prototype.serialize = function () {\n    var cloneModel = this.cloneModels(this.panels);\n    var customObject = [];\n\n    for (var i = 0; i < cloneModel.length; i++) {\n      customObject.push({\n        id: cloneModel[i].id,\n        row: cloneModel[i].row,\n        col: cloneModel[i].col,\n        sizeX: cloneModel[i].sizeX,\n        sizeY: cloneModel[i].sizeY,\n        minSizeX: cloneModel[i].minSizeX,\n        minSizeY: cloneModel[i].minSizeY,\n        maxSizeX: cloneModel[i].maxSizeX,\n        maxSizeY: cloneModel[i].maxSizeY\n      });\n    }\n\n    return customObject;\n  };\n  /**\n   * Removes all the panels from the DashboardLayout.\n   */\n\n\n  DashboardLayout.prototype.removeAll = function () {\n    this.removeAllCalled = true;\n\n    for (var i = 0; i < this.panelCollection.length; i++) {\n      detach(this.panelCollection[i]);\n    }\n\n    this.removeAllPanel();\n    this.updateServerPanelData();\n    this.rows = 0;\n    this.gridPanelCollection = [];\n    this.setHeightWidth();\n    this.sortedPanel();\n    this.sortedArray = [];\n    this.overlapElementClone = [];\n    this.overlapElement = [];\n    this.overlapSubElementClone = [];\n    this.panelCollection = [];\n    this.oldRowCol = {};\n    this.cloneObject = {};\n    var clonedPanels = this.cloneModels(this.panels);\n    this.setProperties({\n      panels: []\n    }, true);\n    this.updatePanels();\n    this.updateCloneArrayObject();\n    this.checkForChanges(false, null, clonedPanels);\n    this.removeAllCalled = false;\n  };\n  /**\n   * Removes the panel from the DashboardLayout.\n   * @param {id: string} id -  Defines the panel ID.\n   * @returns void\n   */\n\n\n  DashboardLayout.prototype.removePanel = function (id) {\n    var _this = this;\n\n    this.panelsInitialModel = this.cloneModels(this.panels);\n    var removedPanel;\n\n    for (var i = 0; i < this.panelCollection.length; i++) {\n      if (this.panelCollection[i].id === id) {\n        detach(this.panelCollection[i]);\n        this.panelCollection.splice(i, 1);\n      }\n\n      if (this.panels[i].id === id) {\n        removedPanel = this.panels[i];\n        this.panels.splice(i, 1);\n        this.panelsInitialModel.splice(i, 1);\n        this.updateOldRowColumn();\n        this.sortedPanel();\n      }\n    }\n\n    this.updatePanels();\n    this.updateServerPanelData();\n    this.gridPanelCollection.forEach(function (item) {\n      if (item.id === id) {\n        _this.gridPanelCollection.splice(_this.gridPanelCollection.indexOf(item), 1);\n      }\n    });\n    this.updateCloneArrayObject();\n    this.checkForChanges(false, null, [removedPanel]);\n  };\n  /**\n   * Moves the panel in the DashboardLayout.\n   * @param {id: string} id - Defines the panel ID.\n   * @param {row: number} row - Defines the row of dashboard layout.\n   * @param {col: number} col - Defines the column of dashboard layout.\n   * @returns void\n   */\n\n\n  DashboardLayout.prototype.movePanel = function (id, row, col) {\n    this.movePanelCalled = true;\n    this.panelsInitialModel = this.cloneModels(this.panels);\n    var panelInstance = this.getCellInstance(id);\n\n    if (isNaN(row) || row === null || isNaN(col) || col === null || !panelInstance) {\n      return;\n    }\n\n    if (col < 0) {\n      col = 0;\n    } else if (col > this.columns) {\n      col = this.columns - panelInstance.sizeX;\n    }\n\n    this.panelPropertyChange(panelInstance, {\n      row: row,\n      col: col\n    });\n    var ele = document.getElementById(id);\n    this.mainElement = ele;\n    this.startRow = parseInt(ele.getAttribute('data-row'), 10);\n    this.startCol = parseInt(ele.getAttribute('data-col'), 10);\n    this.setAttributes({\n      value: {\n        col: col.toString(),\n        row: row.toString()\n      }\n    }, ele);\n    this.updateOldRowColumn();\n    this.setPanelPosition(ele, row, col);\n    this.updatePanelLayout(ele, panelInstance);\n    this.updateRowHeight();\n    this.updatePanels();\n    this.updateServerPanelData();\n    this.updateCloneArrayObject();\n    this.mainElement = null;\n\n    if (this.allowFloating) {\n      this.moveItemsUpwards();\n    }\n\n    this.movePanelCalled = false;\n    this.checkForChanges(false);\n  };\n\n  DashboardLayout.prototype.setAttributes = function (value, ele) {\n    for (var i = 0; i < Object.keys(value).length; i++) {\n      if (Object.keys(value)) {\n        if (value[Object.keys(value)[i]].col) {\n          ele.setAttribute('data-col', value[Object.keys(value)[i]].col.toString());\n        }\n\n        if (value[Object.keys(value)[i]].row) {\n          ele.setAttribute('data-row', value[Object.keys(value)[i]].row.toString());\n        }\n\n        if (value[Object.keys(value)[i]].sizeX) {\n          ele.setAttribute('data-sizeX', value[Object.keys(value)[i]].sizeX.toString());\n        }\n\n        if (value[Object.keys(value)[i]].sizeY) {\n          ele.setAttribute('data-sizeY', value[Object.keys(value)[i]].sizeY.toString());\n        }\n\n        if (value[Object.keys(value)[i]].minSizeX) {\n          ele.setAttribute('data-minSizeX', value[Object.keys(value)[i]].minSizeX.toString());\n        }\n\n        if (value[Object.keys(value)[i]].minSizeY) {\n          ele.setAttribute('data-minSizeY', value[Object.keys(value)[i]].minSizeY.toString());\n        }\n\n        if (value[Object.keys(value)[i]].maxSizeX) {\n          ele.setAttribute('data-maxSizeY', value[Object.keys(value)[i]].maxSizeX.toString());\n        }\n\n        if (value[Object.keys(value)[i]].maxSizeY) {\n          ele.setAttribute('data-maxSizeY', value[Object.keys(value)[i]].maxSizeY.toString());\n        }\n      }\n    }\n  };\n  /**\n   * Resize the panel in the DashboardLayout.\n   * @param {id: string} id - Defines the panel ID.\n   * @param {sizeX: number} sizeX - Defines the sizeX of dashboard layout.\n   * @param {sizeY: number} sizeY - Defines the sizeY of dashboard layout.\n   */\n\n\n  DashboardLayout.prototype.resizePanel = function (id, sizeX, sizeY) {\n    this.panelsInitialModel = this.cloneModels(this.panels);\n    var panelInstance = this.getCellInstance(id);\n    this.resizeCalled = true;\n    var ele = document.getElementById(id);\n    var args = {\n      event: null,\n      element: ele,\n      isInteracted: false\n    };\n    this.trigger('resizeStart', args);\n    this.panelPropertyChange(panelInstance, {\n      sizeX: sizeX,\n      sizeY: sizeY\n    });\n    this.setMinMaxValues(panelInstance);\n    this.checkMinMaxValues(panelInstance);\n    this.mainElement = ele;\n    this.setAttributes({\n      value: {\n        sizeX: panelInstance.sizeX.toString(),\n        sizeY: panelInstance.sizeY.toString()\n      }\n    }, ele);\n    this.setHeightAndWidth(ele, panelInstance);\n    this.updatePanelLayout(ele, panelInstance);\n    this.updatePanels();\n    this.updateServerPanelData();\n    this.updateRowHeight();\n    this.resizeCalled = false;\n    this.trigger('resizeStop', args);\n    this.checkForChanges(false);\n  };\n  /**\n   * Destroys the DashboardLayout component\n   * @returns void\n   */\n\n\n  DashboardLayout.prototype.destroy = function () {\n    removeClass([this.element], ['e-dashboardlayout', 'e-lib', 'e-responsive', 'e-control']);\n    this.element.removeAttribute('style');\n\n    for (var i = 0; i < this.dragCollection.length; i++) {\n      this.dragCollection[i].destroy();\n    }\n\n    this.removeAllPanel();\n\n    _super.prototype.destroy.call(this);\n  };\n\n  DashboardLayout.prototype.removeAllPanel = function () {\n    while (this.element.firstElementChild) {\n      detach(this.element.firstElementChild);\n    }\n  };\n\n  DashboardLayout.prototype.setEnableRtl = function () {\n    this.enableRtl ? addClass([this.element], 'e-rtl') : removeClass([this.element], 'e-rtl');\n  };\n  /**\n   * Called internally if any of the property value changed.\n   * returns void\n   * @private\n   */\n\n\n  DashboardLayout.prototype.updateCellSizeAndSpacing = function () {\n    this.panelResponsiveUpdate();\n    this.setHeightWidth();\n    this.getRowColumn();\n\n    for (var i = 0; i < this.element.querySelectorAll('.e-panel').length; i++) {\n      var ele = this.element.querySelectorAll('.e-panel')[i];\n      var panelModel = this.getCellInstance(ele.id);\n      this.setHeightAndWidth(ele, panelModel);\n      this.setPanelPosition(ele, panelModel.row, panelModel.col);\n    }\n  };\n\n  DashboardLayout.prototype.updatePanelsDynamically = function (panels) {\n    this.removeAll();\n    this.setProperties({\n      panels: panels\n    }, true);\n    this.setOldRowCol();\n\n    if (this.table) {\n      this.table.remove();\n    }\n\n    this.isBlazor = false;\n    this.initialize();\n    this.isBlazor = isBlazor() && this.isServerRendered;\n\n    if (this.showGridLines) {\n      this.initGridLines();\n    }\n  };\n\n  DashboardLayout.prototype.checkForIDValues = function (panels) {\n    var _this = this;\n\n    if (!isNullOrUndefined(panels) && panels.length > 0) {\n      this.panelID = 0;\n      panels.forEach(function (panel) {\n        if (!panel.id) {\n          _this.panelPropertyChange(panel, {\n            id: 'layout_' + _this.panelID.toString()\n          });\n\n          _this.panelID = _this.panelID + 1;\n        }\n      });\n    } else {\n      this.restrictDynamicUpdate = true;\n    }\n  };\n  /**\n   * Called internally if any of the property value changed.\n   * returns void\n   * @private\n   */\n\n\n  DashboardLayout.prototype.onPropertyChanged = function (newProp, oldProp) {\n    var _this = this;\n\n    if (newProp.panels && newProp.panels.length > 0) {\n      this.checkForIDValues(newProp.panels);\n    }\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'enableRtl':\n          this.setProperties({\n            enableRtl: newProp.enableRtl\n          }, true);\n          this.setEnableRtl();\n          break;\n\n        case 'mediaQuery':\n          this.setProperties({\n            mediaQuery: newProp.mediaQuery\n          }, true);\n\n          if (this.checkMediaQuery()) {\n            this.checkMediaQuerySizing();\n          }\n\n          break;\n\n        case 'allowDragging':\n          this.setProperties({\n            allowDragging: newProp.allowDragging\n          }, true);\n          this.ensureDrag();\n          break;\n\n        case 'allowResizing':\n          this.setProperties({\n            allowResizing: newProp.allowResizing\n          }, true);\n\n          if (this.allowResizing) {\n            this.setClasses(this.panelCollection);\n            this.resizeEvents();\n          } else {\n            var panelElements = this.element.querySelectorAll('.e-panel .e-panel-container .e-resize');\n\n            for (var i = 0; i < panelElements.length; i++) {\n              var eventName = Browser.info.name === 'msie' ? 'mousedown pointerdown' : 'mousedown';\n              var element = panelElements[i];\n              EventHandler.remove(element, eventName, this.downResizeHandler);\n\n              if (Browser.info.name !== 'msie') {\n                EventHandler.remove(element, 'touchstart', this.touchDownResizeHandler);\n              }\n            }\n\n            this.removeResizeClasses(this.panelCollection);\n          }\n\n          break;\n\n        case 'cellSpacing':\n          this.setProperties({\n            cellSpacing: newProp.cellSpacing\n          }, true);\n          this.updateCellSizeAndSpacing();\n          this.updateGridLines();\n          break;\n\n        case 'draggableHandle':\n          this.setProperties({\n            draggableHandle: newProp.draggableHandle\n          }, true);\n          this.ensureDrag();\n          break;\n\n        case 'allowFloating':\n          this.setProperties({\n            allowFloating: newProp.allowFloating\n          }, true);\n          this.moveItemsUpwards();\n          break;\n\n        case 'showGridLines':\n          if (this.showGridLines) {\n            this.setProperties({\n              showGridLines: newProp.showGridLines\n            }, true);\n            this.initGridLines();\n          } else {\n            if (this.table) {\n              detach(this.table);\n            }\n          }\n\n          break;\n\n        case 'allowPushing':\n          this.setProperties({\n            allowPushing: newProp.allowPushing\n          }, true);\n          break;\n\n        case 'panels':\n          if (!newProp.columns && !this.restrictDynamicUpdate) {\n            this.isRenderComplete = false;\n            this.updatePanelsDynamically(newProp.panels);\n            this.isRenderComplete = true;\n          } else {\n            this.restrictDynamicUpdate = false;\n          }\n\n          break;\n\n        case 'columns':\n          this.isRenderComplete = false;\n\n          if (newProp.panels) {\n            this.updatePanelsDynamically(newProp.panels);\n          }\n\n          this.setProperties({\n            columns: newProp.columns\n          }, true);\n          this.panelCollection = [];\n          this.maxColumnValue = this.columns;\n          this.calculateCellSize();\n          this.panels.forEach(function (panel) {\n            _this.setMinMaxValues(panel);\n\n            if (_this.maxColumnValue < panel.col || _this.maxColumnValue < panel.col + panel.sizeX) {\n              var colValue = _this.maxColumnValue - panel.sizeX;\n\n              _this.panelPropertyChange(panel, {\n                col: colValue < 0 ? 0 : colValue\n              });\n\n              _this.setXYAttributes(document.getElementById(panel.id), panel);\n            }\n\n            _this.setHeightAndWidth(document.getElementById(panel.id), panel);\n\n            _this.panelCollection.push(document.getElementById(panel.id));\n\n            _this.setPanelPosition(document.getElementById(panel.id), panel.row, panel.col);\n\n            _this.mainElement = document.getElementById(panel.id);\n\n            _this.updatePanelLayout(document.getElementById(panel.id), panel);\n\n            _this.mainElement = null;\n          });\n          this.updatePanels();\n          this.updateCloneArrayObject();\n          this.isRenderComplete = true;\n          this.updateGridLines();\n          break;\n      }\n    }\n  };\n  /**\n   * Gets the properties to be maintained upon browser refresh.\n   * @returns string\n   * @private\n   */\n\n\n  DashboardLayout.prototype.getPersistData = function () {\n    var keyEntity = ['panels'];\n    return this.addOnPersist(keyEntity);\n  };\n  /* istanbul ignore next */\n\n\n  DashboardLayout.prototype.mergePersistPanelData = function (persistedData) {\n    var data = window.localStorage.getItem(this.getModuleName() + this.element.id);\n\n    if (!(isNullOrUndefined(data) || data === '') || !isNullOrUndefined(persistedData)) {\n      var dataObj = !isNullOrUndefined(persistedData) ? persistedData : JSON.parse(data);\n      var keys = Object.keys(dataObj);\n      this.isProtectedOnChange = true;\n\n      for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n        var key = keys_1[_i];\n\n        if (typeof getValue(key, this) === 'object' && !isNullOrUndefined(getValue(key, this))) {\n          if (Array.isArray(getValue(key, this)) && key === 'panels') {\n            this.mergePanels(dataObj[key], this[key]);\n          }\n        }\n      }\n\n      this.isProtectedOnChange = false;\n    }\n  };\n  /* istanbul ignore next */\n\n\n  DashboardLayout.prototype.mergePanels = function (sortedPanels, panels) {\n    var storedColumns = sortedPanels;\n\n    var _loop_6 = function (i) {\n      this_4.checkForIDValues(panels);\n      var localPanel = panels.filter(function (pan) {\n        return pan.id === storedColumns[i].id;\n      })[0];\n\n      if (!isNullOrUndefined(localPanel)) {\n        storedColumns[i] = extend(localPanel, storedColumns[i], {}, true);\n      }\n    };\n\n    var this_4 = this;\n\n    for (var i = 0; i < storedColumns.length; i++) {\n      _loop_6(i);\n    }\n  };\n  /**\n   * Returns the current module name.\n   * @returns string\n   * @private\n   */\n\n\n  DashboardLayout.prototype.getModuleName = function () {\n    return 'DashboardLayout';\n  };\n\n  __decorate([Property(true)], DashboardLayout.prototype, \"allowDragging\", void 0);\n\n  __decorate([Property(false)], DashboardLayout.prototype, \"allowResizing\", void 0);\n\n  __decorate([Property(true)], DashboardLayout.prototype, \"allowPushing\", void 0);\n\n  __decorate([Property(true)], DashboardLayout.prototype, \"enableHtmlSanitizer\", void 0);\n\n  __decorate([Property(true)], DashboardLayout.prototype, \"allowFloating\", void 0);\n\n  __decorate([Property(1)], DashboardLayout.prototype, \"cellAspectRatio\", void 0);\n\n  __decorate([Property([5, 5])], DashboardLayout.prototype, \"cellSpacing\", void 0);\n\n  __decorate([Property(1)], DashboardLayout.prototype, \"columns\", void 0);\n\n  __decorate([Property(false)], DashboardLayout.prototype, \"showGridLines\", void 0);\n\n  __decorate([Property(null)], DashboardLayout.prototype, \"draggableHandle\", void 0);\n\n  __decorate([Property('en-US')], DashboardLayout.prototype, \"locale\", void 0);\n\n  __decorate([Property('max-width: 600px')], DashboardLayout.prototype, \"mediaQuery\", void 0);\n\n  __decorate([Collection([], Panel)], DashboardLayout.prototype, \"panels\", void 0);\n\n  __decorate([Property(['e-south-east'])], DashboardLayout.prototype, \"resizableHandles\", void 0);\n\n  __decorate([Event()], DashboardLayout.prototype, \"change\", void 0);\n\n  __decorate([Event()], DashboardLayout.prototype, \"dragStart\", void 0);\n\n  __decorate([Event()], DashboardLayout.prototype, \"drag\", void 0);\n\n  __decorate([Event()], DashboardLayout.prototype, \"dragStop\", void 0);\n\n  __decorate([Event()], DashboardLayout.prototype, \"resizeStart\", void 0);\n\n  __decorate([Event()], DashboardLayout.prototype, \"resize\", void 0);\n\n  __decorate([Event()], DashboardLayout.prototype, \"resizeStop\", void 0);\n\n  __decorate([Event()], DashboardLayout.prototype, \"created\", void 0);\n\n  __decorate([Event()], DashboardLayout.prototype, \"destroyed\", void 0);\n\n  DashboardLayout = __decorate([NotifyPropertyChanges], DashboardLayout);\n  return DashboardLayout;\n}(Component);\n\nexport { DashboardLayout };","map":null,"metadata":{},"sourceType":"module"}