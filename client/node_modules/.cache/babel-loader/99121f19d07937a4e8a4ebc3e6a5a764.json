{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _handler = function () {\n  var _ref = (0, _asyncToGenerator3.default)(\n  /*#__PURE__*/\n  _regenerator2.default.mark(function _callee(apiOptions, actions) {\n    var updateNotifications, getSelectedResources, getNotifications, getMessage, notificationId, notificationChildId, onStart, onSuccess, onProgress, resources, quantity, _resources$, id, name, downloadUrl, archiveName, content;\n\n    return _regenerator2.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            updateNotifications = actions.updateNotifications, getSelectedResources = actions.getSelectedResources, getNotifications = actions.getNotifications;\n            getMessage = _translations2.default.bind(null, apiOptions.locale);\n            notificationId = label;\n            notificationChildId = (0, _nanoid2.default)();\n\n            onStart = function onStart(_ref2) {\n              var archiveName = _ref2.archiveName,\n                  quantity = _ref2.quantity;\n              var notifications = getNotifications();\n\n              var notification = _notifications2.default.getNotification(notifications, notificationId);\n\n              var childElement = {\n                elementType: 'NotificationProgressItem',\n                elementProps: {\n                  title: getMessage('creatingName', {\n                    name: archiveName\n                  }),\n                  progress: 0\n                }\n              };\n\n              var newChildren = _notifications2.default.addChild(notification && notification.children || [], notificationChildId, childElement);\n\n              var newNotification = {\n                title: quantity > 1 ? getMessage('zippingItems', {\n                  quantity: quantity\n                }) : getMessage('zippingItem'),\n                children: newChildren\n              };\n              var newNotifications = notification ? _notifications2.default.updateNotification(notifications, notificationId, newNotification) : _notifications2.default.addNotification(notifications, notificationId, newNotification);\n              updateNotifications(newNotifications);\n            };\n\n            onSuccess = function onSuccess(_) {\n              var notifications = getNotifications();\n\n              var notification = _notifications2.default.getNotification(notifications, notificationId);\n\n              var notificationChildrenCount = notification.children.length;\n              var newNotifications = void 0;\n\n              if (notificationChildrenCount > 1) {\n                newNotifications = _notifications2.default.updateNotification(notifications, notificationId, {\n                  children: _notifications2.default.removeChild(notification.children, notificationChildId)\n                });\n              } else {\n                newNotifications = _notifications2.default.removeNotification(notifications, notificationId);\n              }\n\n              updateNotifications(newNotifications);\n            };\n\n            onProgress = function onProgress(progress) {\n              var notifications = getNotifications();\n\n              var notification = _notifications2.default.getNotification(notifications, notificationId);\n\n              var child = _notifications2.default.getChild(notification.children, notificationChildId);\n\n              var newChild = (0, _extends3.default)({}, child, {\n                element: (0, _extends3.default)({}, child.element, {\n                  elementProps: (0, _extends3.default)({}, child.element.elementProps, {\n                    progress: progress\n                  })\n                })\n              });\n\n              var newChildren = _notifications2.default.updateChild(notification.children, notificationChildId, newChild);\n\n              var newNotifications = _notifications2.default.updateNotification(notifications, notificationId, {\n                children: newChildren\n              });\n\n              updateNotifications(newNotifications);\n            };\n\n            _context.prev = 7;\n            resources = getSelectedResources();\n            quantity = resources.length;\n\n            if (!(quantity === 1)) {\n              _context.next = 18;\n              break;\n            }\n\n            _resources$ = resources[0], id = _resources$.id, name = _resources$.name;\n            downloadUrl = apiOptions.apiRoot + '/download?items=' + id; // check if the file is available and trigger native browser saving prompt\n            // if server is down the error will be catched and trigger relevant notification\n\n            _context.next = 15;\n            return _api2.default.getResourceById(apiOptions, id);\n\n          case 15:\n            (0, _download.promptToSaveBlob)({\n              name: name,\n              downloadUrl: downloadUrl\n            });\n            _context.next = 25;\n            break;\n\n          case 18:\n            // multiple resources -> download as a single archive\n            archiveName = apiOptions.archiveName || 'archive.zip';\n            onStart({\n              archiveName: archiveName,\n              quantity: quantity\n            });\n            _context.next = 22;\n            return _api2.default.downloadResources({\n              resources: resources,\n              apiOptions: apiOptions,\n              onProgress: onProgress\n            });\n\n          case 22:\n            content = _context.sent;\n            setTimeout(onSuccess, 1000);\n            (0, _download.promptToSaveBlob)({\n              content: content,\n              name: archiveName\n            });\n\n          case 25:\n            _context.next = 31;\n            break;\n\n          case 27:\n            _context.prev = 27;\n            _context.t0 = _context['catch'](7);\n            (0, _onFailError2.default)({\n              getNotifications: getNotifications,\n              label: getMessage(label),\n              notificationId: notificationId,\n              updateNotifications: updateNotifications\n            });\n            console.log(_context.t0);\n\n          case 31:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, this, [[7, 27]]);\n  }));\n\n  return function _handler(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar _api = require('../api');\n\nvar _api2 = _interopRequireDefault(_api);\n\nvar _notifications = require('../utils/notifications');\n\nvar _notifications2 = _interopRequireDefault(_notifications);\n\nvar _download = require('../utils/download');\n\nvar _onFailError = require('../utils/onFailError');\n\nvar _onFailError2 = _interopRequireDefault(_onFailError);\n\nvar _nanoid = require('nanoid');\n\nvar _nanoid2 = _interopRequireDefault(_nanoid);\n\nvar _iconsSvg = require('../icons-svg');\n\nvar _iconsSvg2 = _interopRequireDefault(_iconsSvg);\n\nvar _translations = require('../translations');\n\nvar _translations2 = _interopRequireDefault(_translations);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar label = 'download';\n\nexports.default = function (apiOptions, actions) {\n  var localeLabel = (0, _translations2.default)(apiOptions.locale, label);\n  var getSelectedResources = actions.getSelectedResources;\n  return {\n    id: label,\n    icon: {\n      svg: _iconsSvg2.default.fileDownload\n    },\n    label: localeLabel,\n    shouldBeAvailable: function shouldBeAvailable(apiOptions) {\n      var selectedResources = getSelectedResources();\n      return selectedResources.length > 0 && !selectedResources.some(function (r) {\n        return r.type === 'dir';\n      }) && selectedResources.every(function (r) {\n        return r.capabilities.canDownload;\n      });\n    },\n    availableInContexts: ['row', 'toolbar'],\n    handler: function handler() {\n      return _handler(apiOptions, actions);\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}