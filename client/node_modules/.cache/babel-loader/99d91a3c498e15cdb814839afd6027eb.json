{"ast":null,"code":"import { initialLoad } from '../base/constant';\nimport { RenderType } from '../base/enum';\nimport { VirtualContentRenderer, VirtualHeaderRenderer } from '../renderer/virtual-content-renderer';\nimport * as events from '../base/constant';\nimport { isBlazor } from '@syncfusion/ej2-base';\n/**\n * Virtual Scrolling class\n */\n\nvar VirtualScroll =\n/** @class */\nfunction () {\n  function VirtualScroll(parent, locator) {\n    this.parent = parent;\n    this.locator = locator;\n    this.addEventListener();\n  }\n\n  VirtualScroll.prototype.getModuleName = function () {\n    return 'virtualscroll';\n  };\n\n  VirtualScroll.prototype.instantiateRenderer = function () {\n    this.parent.log(['limitation', 'virtual_height'], 'virtualization');\n    var renderer = this.locator.getService('rendererFactory');\n\n    if (!this.parent.getFrozenColumns()) {\n      if (this.parent.enableColumnVirtualization) {\n        renderer.addRenderer(RenderType.Header, new VirtualHeaderRenderer(this.parent, this.locator));\n      }\n\n      renderer.addRenderer(RenderType.Content, new VirtualContentRenderer(this.parent, this.locator));\n    }\n\n    this.ensurePageSize();\n  };\n\n  VirtualScroll.prototype.ensurePageSize = function () {\n    var rowHeight = this.parent.getRowHeight();\n    var vHeight = this.parent.height.toString().indexOf('%') < 0 ? this.parent.height : this.parent.element.getBoundingClientRect().height;\n    this.blockSize = ~~(vHeight / rowHeight);\n    var height = this.blockSize * 2;\n    var size = this.parent.pageSettings.pageSize;\n    this.parent.setProperties({\n      pageSettings: {\n        pageSize: size < height ? height : size\n      }\n    }, true);\n\n    if (isBlazor() && this.parent.isServerRendered) {\n      this.parent.notify('refresh-virtual-indices', {});\n    }\n  };\n\n  VirtualScroll.prototype.addEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.on(initialLoad, this.instantiateRenderer, this);\n    this.parent.on(events.columnWidthChanged, this.refreshVirtualElement, this);\n  };\n\n  VirtualScroll.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(initialLoad, this.instantiateRenderer);\n    this.parent.off(events.columnWidthChanged, this.refreshVirtualElement);\n  };\n\n  VirtualScroll.prototype.refreshVirtualElement = function (args) {\n    if (this.parent.enableColumnVirtualization && args.module === 'resize') {\n      var renderer = this.locator.getService('rendererFactory');\n      renderer.getRenderer(RenderType.Content).refreshVirtualElement();\n    }\n  };\n\n  VirtualScroll.prototype.destroy = function () {\n    this.removeEventListener();\n  };\n\n  return VirtualScroll;\n}();\n\nexport { VirtualScroll };","map":null,"metadata":{},"sourceType":"module"}