{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Component, Property, ChildProperty, NotifyPropertyChanges } from '@syncfusion/ej2-base';\nimport { Event, EventHandler, KeyboardEvents, Touch } from '@syncfusion/ej2-base';\nimport { Animation } from '@syncfusion/ej2-base';\nimport { Browser, Collection, setValue, getValue, getUniqueID, getInstance, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { select, selectAll, closest, detach, append, rippleEffect, isVisible, Complex, addClass, removeClass } from '@syncfusion/ej2-base';\nimport { ListBase } from '@syncfusion/ej2-lists';\nimport { getZindexPartial, calculatePosition, isCollide, fit, Popup } from '@syncfusion/ej2-popups';\nimport { updateBlazorTemplate, resetBlazorTemplate, blazorTemplates, extend, SanitizeHtmlHelper, isBlazor } from '@syncfusion/ej2-base';\nimport { getScrollableParent } from '@syncfusion/ej2-popups';\nimport { HScroll } from '../common/h-scroll';\nimport { VScroll } from '../common/v-scroll';\nvar ENTER = 'enter';\nvar ESCAPE = 'escape';\nvar FOCUSED = 'e-focused';\nvar HEADER = 'e-menu-header';\nvar SELECTED = 'e-selected';\nvar SEPARATOR = 'e-separator';\nvar UPARROW = 'uparrow';\nvar DOWNARROW = 'downarrow';\nvar LEFTARROW = 'leftarrow';\nvar RIGHTARROW = 'rightarrow';\nvar HOME = 'home';\nvar END = 'end';\nvar CARET = 'e-caret';\nvar ITEM = 'e-menu-item';\nvar DISABLED = 'e-disabled';\nvar HIDE = 'e-menu-hide';\nvar ICONS = 'e-icons';\nvar RTL = 'e-rtl';\nvar POPUP = 'e-menu-popup';\nvar TEMPLATE_PROPERTY = 'Template';\n/**\n * Configures the field options of the Menu.\n */\n\nvar FieldSettings =\n/** @class */\nfunction (_super) {\n  __extends(FieldSettings, _super);\n\n  function FieldSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property('id')], FieldSettings.prototype, \"itemId\", void 0);\n\n  __decorate([Property('parentId')], FieldSettings.prototype, \"parentId\", void 0);\n\n  __decorate([Property('text')], FieldSettings.prototype, \"text\", void 0);\n\n  __decorate([Property('iconCss')], FieldSettings.prototype, \"iconCss\", void 0);\n\n  __decorate([Property('url')], FieldSettings.prototype, \"url\", void 0);\n\n  __decorate([Property('separator')], FieldSettings.prototype, \"separator\", void 0);\n\n  __decorate([Property('items')], FieldSettings.prototype, \"children\", void 0);\n\n  return FieldSettings;\n}(ChildProperty);\n\nexport { FieldSettings };\n/**\n * Specifies menu items.\n */\n\nvar MenuItem =\n/** @class */\nfunction (_super) {\n  __extends(MenuItem, _super);\n\n  function MenuItem() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property(null)], MenuItem.prototype, \"iconCss\", void 0);\n\n  __decorate([Property('')], MenuItem.prototype, \"id\", void 0);\n\n  __decorate([Property(false)], MenuItem.prototype, \"separator\", void 0);\n\n  __decorate([Collection([], MenuItem)], MenuItem.prototype, \"items\", void 0);\n\n  __decorate([Property('')], MenuItem.prototype, \"text\", void 0);\n\n  __decorate([Property('')], MenuItem.prototype, \"url\", void 0);\n\n  return MenuItem;\n}(ChildProperty);\n\nexport { MenuItem };\n/**\n * Animation configuration settings.\n */\n\nvar MenuAnimationSettings =\n/** @class */\nfunction (_super) {\n  __extends(MenuAnimationSettings, _super);\n\n  function MenuAnimationSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property('SlideDown')], MenuAnimationSettings.prototype, \"effect\", void 0);\n\n  __decorate([Property(400)], MenuAnimationSettings.prototype, \"duration\", void 0);\n\n  __decorate([Property('ease')], MenuAnimationSettings.prototype, \"easing\", void 0);\n\n  return MenuAnimationSettings;\n}(ChildProperty);\n\nexport { MenuAnimationSettings };\n/**\n * @private\n * Base class for Menu and ContextMenu components.\n */\n\nvar MenuBase =\n/** @class */\nfunction (_super) {\n  __extends(MenuBase, _super);\n  /**\n   * Constructor for creating the widget.\n   * @private\n   */\n\n\n  function MenuBase(options, element) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.navIdx = [];\n    _this.animation = new Animation({});\n    _this.isTapHold = false;\n    _this.tempItem = [];\n    return _this;\n  }\n  /**\n   * Initialized third party configuration settings.\n   * @private\n   */\n\n\n  MenuBase.prototype.preRender = function () {\n    if (!this.isMenu) {\n      var ul = void 0;\n\n      if (this.element.tagName === 'EJS-CONTEXTMENU') {\n        ul = this.createElement('ul', {\n          id: getUniqueID(this.getModuleName()),\n          className: 'e-control e-lib e-' + this.getModuleName()\n        });\n        var ejInst = getValue('ej2_instances', this.element);\n        removeClass([this.element], ['e-control', 'e-lib', 'e-' + this.getModuleName()]);\n        this.clonedElement = this.element;\n        this.element = ul;\n        setValue('ej2_instances', ejInst, this.element);\n      } else {\n        ul = this.createElement('ul', {\n          id: getUniqueID(this.getModuleName())\n        });\n        append([].slice.call(this.element.cloneNode(true).children), ul);\n        var refEle = this.element.nextElementSibling;\n        refEle ? this.element.parentElement.insertBefore(ul, refEle) : this.element.parentElement.appendChild(ul);\n        this.clonedElement = ul;\n      }\n\n      this.clonedElement.style.display = 'none';\n    }\n\n    if (this.element.tagName === 'EJS-MENU') {\n      var ele = this.element;\n      var ejInstance = getValue('ej2_instances', ele);\n      var ul = this.createElement('ul');\n      var wrapper = this.createElement('EJS-MENU', {\n        className: 'e-' + this.getModuleName() + '-wrapper'\n      });\n\n      for (var idx = 0, len = ele.attributes.length; idx < len; idx++) {\n        ul.setAttribute(ele.attributes[idx].nodeName, ele.attributes[idx].nodeValue);\n      }\n\n      ele.parentNode.insertBefore(wrapper, ele);\n      detach(ele);\n      ele = ul;\n      wrapper.appendChild(ele);\n      setValue('ej2_instances', ejInstance, ele);\n      this.clonedElement = wrapper;\n      this.element = ele;\n\n      if (!this.element.id) {\n        this.element.id = getUniqueID(this.getModuleName());\n      }\n    }\n  };\n  /**\n   * Initialize the control rendering\n   * @private\n   */\n\n\n  MenuBase.prototype.render = function () {\n    this.initialize();\n    this.renderItems();\n\n    if (this.isMenu && this.template && isBlazor()) {\n      var menuTemplateId = this.element.id + TEMPLATE_PROPERTY;\n      resetBlazorTemplate(menuTemplateId, TEMPLATE_PROPERTY);\n\n      if (Object.keys(blazorTemplates).length) {\n        extend(this.tempItem, blazorTemplates[menuTemplateId], [], true);\n      }\n\n      updateBlazorTemplate(menuTemplateId, TEMPLATE_PROPERTY, this);\n    }\n\n    this.wireEvents();\n    this.renderComplete();\n  };\n\n  MenuBase.prototype.initialize = function () {\n    var wrapper = this.getWrapper();\n\n    if (!wrapper) {\n      wrapper = this.createElement('div', {\n        className: 'e-' + this.getModuleName() + '-wrapper'\n      });\n\n      if (this.isMenu) {\n        this.element.parentElement.insertBefore(wrapper, this.element);\n      } else {\n        document.body.appendChild(wrapper);\n      }\n    }\n\n    if (this.cssClass) {\n      addClass([wrapper], this.cssClass.split(' '));\n    }\n\n    if (this.enableRtl) {\n      wrapper.classList.add(RTL);\n    }\n\n    wrapper.appendChild(this.element);\n\n    if (this.isMenu && this.hamburgerMode) {\n      if (!this.target) {\n        this.createHeaderContainer(wrapper);\n      }\n    }\n  };\n\n  MenuBase.prototype.renderItems = function () {\n    if (!this.items.length) {\n      var items = ListBase.createJsonFromElement(this.element, {\n        fields: {\n          child: 'items'\n        }\n      });\n      this.setProperties({\n        items: items\n      }, true);\n\n      if (isBlazor()) {\n        this.element = this.removeChildElement(this.element);\n      } else {\n        this.element.innerHTML = '';\n      }\n    }\n\n    var ul = this.createItems(this.items);\n    append(Array.prototype.slice.call(ul.children), this.element);\n    this.element.classList.add('e-menu-parent');\n\n    if (this.isMenu) {\n      var wrapper = this.getWrapper();\n      this.element.classList.contains('e-vertical') ? this.addScrolling(wrapper, this.element, 'vscroll', wrapper.offsetHeight, this.element.offsetHeight) : this.addScrolling(wrapper, this.element, 'hscroll', wrapper.offsetWidth, this.element.offsetWidth);\n    }\n  };\n\n  MenuBase.prototype.wireEvents = function () {\n    var wrapper = this.getWrapper();\n\n    if (this.target) {\n      var target = void 0;\n      var targetElems = selectAll(this.target);\n\n      for (var i = 0, len = targetElems.length; i < len; i++) {\n        target = targetElems[i];\n\n        if (this.isMenu) {\n          EventHandler.add(target, 'click', this.menuHeaderClickHandler, this);\n        } else {\n          if (Browser.isIos) {\n            new Touch(target, {\n              tapHold: this.touchHandler.bind(this)\n            });\n          } else {\n            EventHandler.add(target, 'contextmenu', this.cmenuHandler, this);\n          }\n        }\n      }\n\n      this.targetElement = target;\n\n      if (!this.isMenu) {\n        EventHandler.add(this.targetElement, 'scroll', this.scrollHandler, this);\n\n        for (var _i = 0, _a = getScrollableParent(this.targetElement); _i < _a.length; _i++) {\n          var parent_1 = _a[_i];\n          EventHandler.add(parent_1, 'scroll', this.scrollHandler, this);\n        }\n      }\n    }\n\n    if (!Browser.isDevice) {\n      this.delegateMoverHandler = this.moverHandler.bind(this);\n      this.delegateMouseDownHandler = this.mouseDownHandler.bind(this);\n      EventHandler.add(this.isMenu ? document : wrapper, 'mouseover', this.delegateMoverHandler, this);\n      EventHandler.add(document, 'mousedown', this.delegateMouseDownHandler, this);\n    }\n\n    this.delegateClickHandler = this.clickHandler.bind(this);\n    EventHandler.add(document, 'click', this.delegateClickHandler, this);\n    this.wireKeyboardEvent(wrapper);\n    this.rippleFn = rippleEffect(wrapper, {\n      selector: '.' + ITEM\n    });\n  };\n\n  MenuBase.prototype.wireKeyboardEvent = function (element) {\n    var keyConfigs = {\n      downarrow: DOWNARROW,\n      uparrow: UPARROW,\n      enter: ENTER,\n      leftarrow: LEFTARROW,\n      rightarrow: RIGHTARROW,\n      escape: ESCAPE\n    };\n\n    if (this.isMenu) {\n      keyConfigs.home = HOME;\n      keyConfigs.end = END;\n    }\n\n    new KeyboardEvents(element, {\n      keyAction: this.keyBoardHandler.bind(this),\n      keyConfigs: keyConfigs\n    });\n  };\n\n  MenuBase.prototype.mouseDownHandler = function (e) {\n    if (closest(e.target, '.e-' + this.getModuleName() + '-wrapper') !== this.getWrapper() && !closest(e.target, '.e-' + this.getModuleName() + '-popup')) {\n      this.closeMenu(this.isMenu ? null : this.navIdx.length, e);\n    }\n  };\n\n  MenuBase.prototype.keyBoardHandler = function (e) {\n    var actionName = '';\n    var trgt = e.target;\n    var actionNeeded = this.isMenu && !this.hamburgerMode && !this.element.classList.contains('e-vertical') && this.navIdx.length < 1;\n    e.preventDefault();\n\n    if (this.enableScrolling && e.keyCode === 13 && trgt.classList.contains('e-scroll-nav')) {\n      this.removeLIStateByClass([FOCUSED, SELECTED], [closest(trgt, '.e-' + this.getModuleName() + '-wrapper')]);\n    }\n\n    if (actionNeeded) {\n      switch (e.action) {\n        case RIGHTARROW:\n          actionName = RIGHTARROW;\n          e.action = DOWNARROW;\n          break;\n\n        case LEFTARROW:\n          actionName = LEFTARROW;\n          e.action = UPARROW;\n          break;\n\n        case DOWNARROW:\n          actionName = DOWNARROW;\n          e.action = RIGHTARROW;\n          break;\n\n        case UPARROW:\n          actionName = UPARROW;\n          e.action = '';\n          break;\n      }\n    } else if (this.enableRtl) {\n      switch (e.action) {\n        case LEFTARROW:\n          actionNeeded = true;\n          actionName = LEFTARROW;\n          e.action = RIGHTARROW;\n          break;\n\n        case RIGHTARROW:\n          actionNeeded = true;\n          actionName = RIGHTARROW;\n          e.action = LEFTARROW;\n          break;\n      }\n    }\n\n    switch (e.action) {\n      case DOWNARROW:\n      case UPARROW:\n      case END:\n      case HOME:\n        this.upDownKeyHandler(e);\n        break;\n\n      case RIGHTARROW:\n        this.rightEnterKeyHandler(e);\n        break;\n\n      case LEFTARROW:\n        this.leftEscKeyHandler(e);\n        break;\n\n      case ENTER:\n        if (this.hamburgerMode && trgt.tagName === 'SPAN' && trgt.classList.contains('e-menu-icon')) {\n          this.menuHeaderClickHandler(e);\n        } else {\n          this.rightEnterKeyHandler(e);\n        }\n\n        break;\n\n      case ESCAPE:\n        this.leftEscKeyHandler(e);\n        break;\n    }\n\n    if (actionNeeded) {\n      e.action = actionName;\n    }\n  };\n\n  MenuBase.prototype.upDownKeyHandler = function (e) {\n    var cul = this.getUlByNavIdx();\n    var defaultIdx = e.action === DOWNARROW || e.action === HOME ? 0 : cul.childElementCount - 1;\n    var fliIdx = defaultIdx;\n    var fli = this.getLIByClass(cul, FOCUSED);\n\n    if (fli) {\n      if (e.action !== END && e.action !== HOME) {\n        fliIdx = this.getIdx(cul, fli);\n      }\n\n      fli.classList.remove(FOCUSED);\n\n      if (e.action !== END && e.action !== HOME) {\n        e.action === DOWNARROW ? fliIdx++ : fliIdx--;\n\n        if (fliIdx === (e.action === DOWNARROW ? cul.childElementCount : -1)) {\n          fliIdx = defaultIdx;\n        }\n      }\n    }\n\n    var cli = cul.children[fliIdx];\n    fliIdx = this.isValidLI(cli, fliIdx, e.action);\n    cul.children[fliIdx].classList.add(FOCUSED);\n    cul.children[fliIdx].focus();\n  };\n\n  MenuBase.prototype.isValidLI = function (cli, index, action) {\n    var wrapper = this.getWrapper();\n    var cul = this.getUlByNavIdx();\n\n    if (cli.classList.contains(SEPARATOR) || cli.classList.contains(DISABLED) || cli.classList.contains(HIDE)) {\n      action === DOWNARROW || action === RIGHTARROW ? index++ : index--;\n    }\n\n    cli = cul.children[index];\n\n    if (cli.classList.contains(SEPARATOR) || cli.classList.contains(DISABLED) || cli.classList.contains(HIDE)) {\n      index = this.isValidLI(cli, index, action);\n    }\n\n    return index;\n  };\n\n  MenuBase.prototype.getUlByNavIdx = function (navIdxLen) {\n    if (navIdxLen === void 0) {\n      navIdxLen = this.navIdx.length;\n    }\n\n    if (this.isMenu) {\n      var popup = [this.getWrapper()].concat([].slice.call(selectAll('.' + POPUP)))[navIdxLen];\n      return isNullOrUndefined(popup) ? null : select('.e-menu-parent', popup);\n    } else {\n      return this.getWrapper().children[navIdxLen];\n    }\n  };\n\n  MenuBase.prototype.rightEnterKeyHandler = function (e) {\n    var eventArgs;\n    var cul = this.getUlByNavIdx();\n    var fli = this.getLIByClass(cul, FOCUSED);\n\n    if (fli) {\n      var fliIdx = this.getIdx(cul, fli);\n      var navIdx = this.navIdx.concat(fliIdx);\n      var index = void 0;\n      var item = this.getItem(navIdx);\n\n      if (item.items.length) {\n        this.navIdx.push(fliIdx);\n        this.keyType = 'right';\n        this.action = e.action;\n        this.openMenu(fli, item, -1, -1, e);\n      } else {\n        if (e.action === ENTER) {\n          if (this.isMenu && this.navIdx.length === 0) {\n            this.removeLIStateByClass([SELECTED], [this.getWrapper()]);\n          } else {\n            fli.classList.remove(FOCUSED);\n          }\n\n          fli.classList.add(SELECTED);\n          eventArgs = {\n            element: fli,\n            item: item,\n            event: e\n          };\n          this.trigger('select', eventArgs);\n          this.closeMenu(null, e);\n        }\n      }\n    }\n  };\n\n  MenuBase.prototype.leftEscKeyHandler = function (e) {\n    if (this.navIdx.length) {\n      this.keyType = 'left';\n      this.closeMenu(this.navIdx.length, e);\n    } else {\n      if (e.action === ESCAPE) {\n        this.closeMenu(null, e);\n      }\n    }\n  };\n\n  MenuBase.prototype.scrollHandler = function (e) {\n    this.closeMenu(null, e);\n  };\n\n  MenuBase.prototype.touchHandler = function (e) {\n    this.isTapHold = true;\n    this.cmenuHandler(e.originalEvent);\n  };\n\n  MenuBase.prototype.cmenuHandler = function (e) {\n    e.preventDefault();\n    this.isCMenu = true;\n    this.pageX = e.changedTouches ? e.changedTouches[0].pageX + 1 : e.pageX + 1;\n    this.pageY = e.changedTouches ? e.changedTouches[0].pageY + 1 : e.pageY + 1;\n    this.closeMenu(null, e);\n\n    if (this.isCMenu) {\n      if (this.canOpen(e.target)) {\n        this.openMenu(null, null, this.pageY, this.pageX, e);\n      }\n\n      this.isCMenu = false;\n    }\n  };\n\n  MenuBase.prototype.closeMenu = function (ulIndex, e) {\n    var _this = this;\n\n    if (ulIndex === void 0) {\n      ulIndex = 0;\n    }\n\n    if (e === void 0) {\n      e = null;\n    }\n\n    if (this.isMenuVisible()) {\n      var sli = void 0;\n      var ul_1;\n      var item_1;\n      var items_1;\n      var beforeCloseArgs = void 0;\n      var wrapper = this.getWrapper();\n      var popups = this.getPopups();\n      var isClose = false;\n      var cnt = this.isMenu ? popups.length + 1 : wrapper.childElementCount;\n      ul_1 = this.isMenu && cnt !== 1 ? select('.e-ul', popups[cnt - 2]) : selectAll('.e-menu-parent', wrapper)[cnt - 1];\n\n      if (this.isMenu && ul_1.classList.contains('e-menu')) {\n        sli = this.getLIByClass(ul_1, SELECTED);\n\n        if (sli) {\n          sli.classList.remove(SELECTED);\n        }\n\n        isClose = true;\n      }\n\n      if (!isClose) {\n        var liElem_1 = e && e.target && this.getLI(e.target);\n        item_1 = this.navIdx.length ? this.getItem(this.navIdx) : null;\n        items_1 = item_1 ? item_1.items : this.items;\n        beforeCloseArgs = {\n          element: ul_1,\n          parentItem: this.isMenu && isBlazor() ? this.getMenuItemModel(item_1, ulIndex) : item_1,\n          items: items_1,\n          event: e,\n          cancel: false\n        };\n        this.trigger('beforeClose', beforeCloseArgs, function (observedCloseArgs) {\n          var popupEle;\n          var closeArgs;\n          var popupId = '';\n          var popupObj;\n          var isOpen = !observedCloseArgs.cancel;\n\n          if (isOpen || _this.isCMenu) {\n            if (_this.isMenu) {\n              popupEle = closest(ul_1, '.' + POPUP);\n\n              if (_this.hamburgerMode) {\n                popupEle.parentElement.style.minHeight = '';\n                closest(ul_1, '.e-menu-item').setAttribute('aria-expanded', 'false');\n              }\n\n              _this.unWireKeyboardEvent(popupEle);\n\n              _this.destroyScrollObj(getInstance(popupEle.children[0], VScroll), popupEle.children[0]);\n\n              popupObj = getInstance(popupEle, Popup);\n              popupObj.hide();\n              popupId = popupEle.id;\n              popupObj.destroy();\n              detach(popupEle);\n            } else {\n              _this.toggleAnimation(ul_1, false);\n            }\n\n            closeArgs = {\n              element: ul_1,\n              parentItem: item_1,\n              items: items_1\n            };\n\n            _this.trigger('onClose', closeArgs);\n\n            _this.navIdx.pop();\n          }\n\n          var trgtliId;\n          var closedLi;\n          var trgtLi;\n\n          var trgtpopUp = _this.getWrapper() && _this.getUlByNavIdx();\n\n          if (_this.isCMenu) {\n            if (_this.canOpen(e.target)) {\n              _this.openMenu(null, null, _this.pageY, _this.pageX, e);\n            }\n\n            _this.isCMenu = false;\n          }\n\n          if (_this.isMenu && trgtpopUp && popupId.length) {\n            trgtliId = new RegExp('(.*)-ej2menu-' + _this.element.id + '-popup').exec(popupId)[1];\n            closedLi = trgtpopUp.querySelector('[id=\"' + trgtliId + '\"]');\n            trgtLi = liElem_1 && trgtpopUp.querySelector('[id=\"' + liElem_1.id + '\"]');\n          }\n\n          var submenus = liElem_1 && liElem_1.querySelectorAll('.e-menu-item');\n\n          if (isOpen && _this.hamburgerMode && ulIndex && !submenus.length) {\n            _this.afterCloseMenu(e);\n          } else if (isOpen && !_this.hamburgerMode && _this.navIdx.length && closedLi && !trgtLi) {\n            _this.closeMenu(_this.navIdx[_this.navIdx.length - 1], e);\n          } else if (isOpen && !ulIndex && (_this.hamburgerMode && _this.navIdx.length || _this.navIdx.length === 1)) {\n            _this.closeMenu(null, e);\n          } else if (isOpen && isNullOrUndefined(ulIndex) && _this.navIdx.length) {\n            _this.closeMenu(null, e);\n          } else if (isOpen && !_this.isMenu && !ulIndex && _this.navIdx.length === 0 && !_this.isMenusClosed) {\n            _this.isMenusClosed = true;\n\n            _this.closeMenu(0, e);\n          } else if (isOpen && _this.isMenu && e && e.target && _this.navIdx.length !== 0 && closest(e.target, '.e-menu-parent.e-control')) {\n            _this.closeMenu(0, e);\n          } else {\n            if (isOpen && (_this.keyType === 'right' || _this.keyType === 'click')) {\n              _this.afterCloseMenu(e);\n            } else {\n              var cul = _this.getUlByNavIdx();\n\n              var sli_1 = _this.getLIByClass(cul, SELECTED);\n\n              if (sli_1) {\n                sli_1.setAttribute('aria-expanded', 'false');\n                sli_1.classList.remove(SELECTED);\n\n                if (liElem_1) {\n                  sli_1.classList.add(FOCUSED);\n                  sli_1.focus();\n                }\n              }\n\n              if (!isOpen && _this.hamburgerMode && liElem_1 && liElem_1.getAttribute('aria-expanded') === 'false' && liElem_1.getAttribute('aria-haspopup') === 'true') {\n                if (closest(liElem_1, '.e-menu-parent.e-control')) {\n                  _this.navIdx = [];\n                } else {\n                  _this.navIdx.pop();\n                }\n\n                _this.navIdx.push(_this.cliIdx);\n\n                var item_2 = _this.getItem(_this.navIdx);\n\n                liElem_1.setAttribute('aria-expanded', 'true');\n\n                _this.openMenu(liElem_1, item_2, -1, -1, e);\n              }\n            }\n          }\n\n          _this.removeStateWrapper();\n        });\n      }\n    }\n  };\n\n  MenuBase.prototype.getMenuItemModel = function (item, level) {\n    if (isNullOrUndefined(item)) {\n      return null;\n    }\n\n    if (isNullOrUndefined(level)) {\n      level = 0;\n    }\n\n    var fields = this.getFields(level);\n    return {\n      text: item[fields.text],\n      id: item[fields.id],\n      items: item[fields.child],\n      separator: item[fields.separator],\n      iconCss: item[fields.iconCss],\n      url: item[fields.url]\n    };\n  };\n\n  MenuBase.prototype.destroyScrollObj = function (scrollObj, scrollEle) {\n    if (scrollObj) {\n      scrollObj.destroy();\n      scrollEle.parentElement.appendChild(select('.e-menu-parent', scrollEle));\n      detach(scrollEle);\n    }\n  };\n\n  MenuBase.prototype.getPopups = function () {\n    var _this = this;\n\n    var popups = [];\n    [].slice.call(document.querySelectorAll('.' + POPUP)).forEach(function (elem) {\n      if (_this.getIndex(elem.querySelector('.' + ITEM).id, true).length) {\n        popups.push(elem);\n      }\n    });\n    return popups;\n  };\n\n  MenuBase.prototype.isMenuVisible = function () {\n    return this.navIdx.length > 0 || this.element.classList.contains('e-contextmenu') && isVisible(this.element).valueOf();\n  };\n\n  MenuBase.prototype.canOpen = function (target) {\n    var canOpen = true;\n\n    if (this.filter) {\n      canOpen = false;\n      var filter = this.filter.split(' ');\n\n      for (var i = 0, len = filter.length; i < len; i++) {\n        if (closest(target, '.' + filter[i])) {\n          canOpen = true;\n          break;\n        }\n      }\n    }\n\n    return canOpen;\n  };\n\n  MenuBase.prototype.openMenu = function (li, item, top, left, e, target) {\n    if (top === void 0) {\n      top = 0;\n    }\n\n    if (left === void 0) {\n      left = 0;\n    }\n\n    if (e === void 0) {\n      e = null;\n    }\n\n    if (target === void 0) {\n      target = this.targetElement;\n    }\n\n    var eventArgs;\n    var wrapper = this.getWrapper();\n    this.lItem = li;\n    var elemId = this.element.id !== '' ? this.element.id : 'menu';\n    this.isMenusClosed = false;\n\n    if (isNullOrUndefined(top)) {\n      top = -1;\n    }\n\n    if (isNullOrUndefined(left)) {\n      left = -1;\n    }\n\n    if (li) {\n      this.uList = this.createItems(item[this.getField('children', this.navIdx.length - 1)]);\n\n      if (!this.isMenu && Browser.isDevice) {\n        wrapper.lastChild.style.display = 'none';\n        var data = {\n          text: item[this.getField('text')].toString(),\n          iconCss: ICONS + ' e-previous'\n        };\n        var hdata = new MenuItem(this.items[0], 'items', data, true);\n        var hli = this.createItems([hdata]).children[0];\n        hli.classList.add(HEADER);\n        this.uList.insertBefore(hli, this.uList.children[0]);\n      }\n\n      if (this.isMenu) {\n        this.popupWrapper = this.createElement('div', {\n          className: 'e-' + this.getModuleName() + '-wrapper ' + POPUP,\n          id: li.id + '-ej2menu-' + elemId + '-popup'\n        });\n\n        if (this.hamburgerMode) {\n          top = li.offsetHeight;\n          li.appendChild(this.popupWrapper);\n        } else {\n          document.body.appendChild(this.popupWrapper);\n        }\n\n        this.isNestedOrVertical = this.element.classList.contains('e-vertical') || this.navIdx.length !== 1;\n        this.popupObj = this.generatePopup(this.popupWrapper, this.uList, li, this.isNestedOrVertical);\n\n        if (this.hamburgerMode) {\n          this.calculateIndentSize(this.uList, li);\n        } else {\n          if (this.cssClass) {\n            addClass([this.popupWrapper], this.cssClass.split(' '));\n          }\n\n          this.popupObj.hide();\n        }\n\n        this.triggerBeforeOpen(li, this.uList, item, e, 0, 0, 'menu');\n      } else {\n        this.uList.style.zIndex = this.element.style.zIndex;\n        wrapper.appendChild(this.uList);\n        this.triggerBeforeOpen(li, this.uList, item, e, top, left, 'none');\n      }\n    } else {\n      this.uList = this.element;\n      this.uList.style.zIndex = getZindexPartial(target ? target : this.element).toString();\n      this.triggerBeforeOpen(li, this.uList, item, e, top, left, 'none');\n    }\n\n    if (this.isMenu && this.template && isBlazor()) {\n      var menuTemplateId = this.element.id + TEMPLATE_PROPERTY;\n\n      if (Object.keys(blazorTemplates).length) {\n        var itemFromBlazorTemplate = blazorTemplates[menuTemplateId];\n        this.tempItem = this.tempItem.concat(itemFromBlazorTemplate);\n        blazorTemplates[menuTemplateId] = this.tempItem;\n      }\n\n      updateBlazorTemplate(menuTemplateId, TEMPLATE_PROPERTY, this);\n    }\n  };\n\n  MenuBase.prototype.calculateIndentSize = function (ul, li) {\n    var liStyle = getComputedStyle(li);\n    var liIndent = parseInt(liStyle.textIndent, 10);\n\n    if (this.navIdx.length < 2 && !li.classList.contains('e-blankicon')) {\n      liIndent *= 2;\n    } else {\n      liIndent += liIndent / 4;\n    }\n\n    ul.style.textIndent = liIndent + 'px';\n    var blankIconElem = ul.querySelectorAll('.e-blankicon');\n\n    if (blankIconElem && blankIconElem.length) {\n      var menuIconElem = ul.querySelector('.e-menu-icon');\n      var menuIconElemStyle = getComputedStyle(menuIconElem);\n      var blankIconIndent = parseInt(menuIconElemStyle.marginRight, 10) + menuIconElem.offsetWidth + liIndent;\n\n      for (var i = 0; i < blankIconElem.length; i++) {\n        blankIconElem[i].style.textIndent = blankIconIndent + 'px';\n      }\n    }\n  };\n\n  MenuBase.prototype.generatePopup = function (popupWrapper, ul, li, isNestedOrVertical) {\n    var _this = this;\n\n    var popupObj = new Popup(popupWrapper, {\n      actionOnScroll: this.hamburgerMode ? 'none' : 'reposition',\n      relateTo: li,\n      collision: this.hamburgerMode ? {\n        X: 'none',\n        Y: 'none'\n      } : {\n        X: isNestedOrVertical || this.enableRtl ? 'none' : 'flip',\n        Y: 'fit'\n      },\n      position: isNestedOrVertical && !this.hamburgerMode ? {\n        X: 'right',\n        Y: 'top'\n      } : {\n        X: 'left',\n        Y: 'bottom'\n      },\n      targetType: 'relative',\n      enableRtl: this.enableRtl,\n      content: ul,\n      open: function () {\n        var scrollEle = select('.e-menu-vscroll', popupObj.element);\n\n        if (scrollEle) {\n          scrollEle.style.height = 'inherit';\n          scrollEle.style.maxHeight = '';\n        }\n\n        var ul = select('.e-ul', popupObj.element);\n        popupObj.element.style.maxHeight = '';\n        ul.focus();\n\n        _this.triggerOpen(ul);\n      }\n    });\n    return popupObj;\n  };\n\n  MenuBase.prototype.createHeaderContainer = function (wrapper) {\n    wrapper = wrapper || this.getWrapper();\n    var spanElem = this.createElement('span', {\n      className: 'e-' + this.getModuleName() + '-header'\n    });\n    var tempTitle = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(this.title) : this.title;\n    var spanTitle = this.createElement('span', {\n      className: 'e-' + this.getModuleName() + '-title',\n      innerHTML: tempTitle\n    });\n    var spanIcon = this.createElement('span', {\n      className: 'e-icons e-' + this.getModuleName() + '-icon',\n      attrs: {\n        'tabindex': '0'\n      }\n    });\n    spanElem.appendChild(spanTitle);\n    spanElem.appendChild(spanIcon);\n    wrapper.insertBefore(spanElem, this.element);\n  };\n\n  MenuBase.prototype.openHamburgerMenu = function (e) {\n    if (this.hamburgerMode) {\n      var eventArgs = void 0;\n      this.triggerBeforeOpen(null, this.element, null, e, 0, 0, 'hamburger');\n    }\n  };\n\n  MenuBase.prototype.closeHamburgerMenu = function (e) {\n    var _this = this;\n\n    if (this.hamburgerMode) {\n      var beforeCloseArgs = void 0;\n      beforeCloseArgs = {\n        element: this.element,\n        parentItem: null,\n        event: e,\n        items: this.items,\n        cancel: false\n      };\n      this.trigger('beforeClose', beforeCloseArgs, function (observedHamburgerCloseArgs) {\n        if (!observedHamburgerCloseArgs.cancel) {\n          _this.closeMenu(null, e);\n\n          _this.element.classList.add('e-hide-menu');\n\n          _this.trigger('onClose', {\n            element: _this.element,\n            parentItem: null,\n            items: _this.items\n          });\n        }\n      });\n    }\n  };\n\n  MenuBase.prototype.callFit = function (element, x, y, top, left) {\n    return fit(element, null, {\n      X: x,\n      Y: y\n    }, {\n      top: top,\n      left: left\n    });\n  };\n\n  MenuBase.prototype.triggerBeforeOpen = function (li, ul, item, e, top, left, type) {\n    var _this = this;\n\n    var navIdx = this.getIndex(li ? li.id : null, true);\n    var items = li ? item[this.getField('children', this.navIdx.length - 1)] : this.items;\n    var eventArgs = {\n      element: ul,\n      items: items,\n      parentItem: this.isMenu && isBlazor() ? this.getMenuItemModel(item, this.navIdx.length - 1) : item,\n      event: e,\n      cancel: false,\n      top: top,\n      left: left\n    };\n    var menuType = type;\n    var collide;\n    this.trigger('beforeOpen', eventArgs, function (observedOpenArgs) {\n      switch (menuType) {\n        case 'menu':\n          if (!_this.hamburgerMode) {\n            _this.top = observedOpenArgs.top;\n            _this.left = observedOpenArgs.left;\n          }\n\n          _this.popupWrapper.style.display = 'block';\n\n          if (!_this.hamburgerMode) {\n            _this.popupWrapper.style.maxHeight = _this.popupWrapper.getBoundingClientRect().height + 'px';\n\n            _this.addScrolling(_this.popupWrapper, _this.uList, 'vscroll', _this.popupWrapper.offsetHeight, _this.uList.offsetHeight);\n\n            _this.checkScrollOffset(e);\n          }\n\n          if (!_this.hamburgerMode && !_this.left && !_this.top) {\n            _this.popupObj.refreshPosition(_this.lItem, true);\n\n            _this.left = parseInt(_this.popupWrapper.style.left, 10);\n            _this.top = parseInt(_this.popupWrapper.style.top, 10);\n\n            if (_this.enableRtl) {\n              _this.left = _this.isNestedOrVertical ? _this.left - _this.popupWrapper.offsetWidth - _this.lItem.parentElement.offsetWidth + 2 : _this.left - _this.popupWrapper.offsetWidth + _this.lItem.offsetWidth;\n            }\n\n            collide = isCollide(_this.popupWrapper, null, _this.left, _this.top);\n\n            if ((_this.isNestedOrVertical || _this.enableRtl) && (collide.indexOf('right') > -1 || collide.indexOf('left') > -1)) {\n              _this.popupObj.collision.X = 'none';\n              var offWidth = closest(_this.lItem, '.e-' + _this.getModuleName() + '-wrapper').offsetWidth;\n              _this.left = _this.enableRtl ? calculatePosition(_this.lItem, _this.isNestedOrVertical ? 'right' : 'left', 'top').left : _this.left - _this.popupWrapper.offsetWidth - offWidth + 2;\n            }\n\n            collide = isCollide(_this.popupWrapper, null, _this.left, _this.top);\n\n            if (collide.indexOf('left') > -1 || collide.indexOf('right') > -1) {\n              _this.left = _this.callFit(_this.popupWrapper, true, false, _this.top, _this.left).left;\n            }\n\n            _this.popupWrapper.style.left = _this.left + 'px';\n          } else {\n            _this.popupObj.collision = {\n              X: 'none',\n              Y: 'none'\n            };\n          }\n\n          _this.popupWrapper.style.display = '';\n          break;\n\n        case 'none':\n          _this.top = observedOpenArgs.top;\n          _this.left = observedOpenArgs.left;\n          break;\n\n        case 'hamburger':\n          if (!observedOpenArgs.cancel) {\n            _this.element.classList.remove('e-hide-menu');\n\n            _this.triggerOpen(_this.element);\n          }\n\n          break;\n      }\n\n      if (menuType !== 'hamburger') {\n        if (observedOpenArgs.cancel) {\n          if (_this.isMenu) {\n            _this.popupObj.destroy();\n\n            detach(_this.popupWrapper);\n          } else if (ul.className.indexOf('e-ul') > -1) {\n            detach(ul);\n          }\n\n          _this.navIdx.pop();\n        } else {\n          if (_this.isMenu) {\n            if (_this.hamburgerMode) {\n              _this.popupWrapper.style.top = _this.top + 'px';\n              _this.popupWrapper.style.left = 0 + 'px';\n\n              _this.toggleAnimation(_this.popupWrapper);\n            } else {\n              _this.wireKeyboardEvent(_this.popupWrapper);\n\n              rippleEffect(_this.popupWrapper, {\n                selector: '.' + ITEM\n              });\n              _this.popupWrapper.style.left = _this.left + 'px';\n              _this.popupWrapper.style.top = _this.top + 'px';\n              var animationOptions = _this.animationSettings.effect !== 'None' ? {\n                name: _this.animationSettings.effect,\n                duration: _this.animationSettings.duration,\n                timingFunction: _this.animationSettings.easing\n              } : null;\n\n              _this.popupObj.show(animationOptions, _this.lItem);\n            }\n          } else {\n            _this.setPosition(_this.lItem, _this.uList, _this.top, _this.left);\n\n            _this.toggleAnimation(_this.uList);\n          }\n        }\n      }\n\n      if (_this.keyType === 'right') {\n        var cul = _this.getUlByNavIdx();\n\n        li.classList.remove(FOCUSED);\n        var index = void 0;\n\n        if (_this.isMenu && _this.navIdx.length === 1) {\n          _this.removeLIStateByClass([SELECTED], [_this.getWrapper()]);\n        }\n\n        li.classList.add(SELECTED);\n\n        if (_this.action === ENTER) {\n          var eventArgs_1 = {\n            element: li,\n            item: item,\n            event: e\n          };\n\n          _this.trigger('select', eventArgs_1);\n        }\n\n        li.focus();\n        cul = _this.getUlByNavIdx();\n        index = _this.isValidLI(cul.children[0], 0, _this.action);\n        cul.children[index].classList.add(FOCUSED);\n        cul.children[index].focus();\n      }\n    });\n  };\n\n  MenuBase.prototype.checkScrollOffset = function (e) {\n    var wrapper = this.getWrapper();\n\n    if (wrapper.children[0].classList.contains('e-menu-hscroll') && this.navIdx.length === 1) {\n      var trgt = isNullOrUndefined(e) ? this.element : closest(e.target, '.' + ITEM);\n      var offsetEle = select('.e-hscroll-bar', wrapper);\n      var offsetLeft = void 0;\n      var offsetRight = void 0;\n\n      if (offsetEle.scrollLeft > trgt.offsetLeft) {\n        offsetEle.scrollLeft -= offsetEle.scrollLeft - trgt.offsetLeft;\n      }\n\n      offsetLeft = offsetEle.scrollLeft + offsetEle.offsetWidth;\n      offsetRight = trgt.offsetLeft + trgt.offsetWidth;\n\n      if (offsetLeft < offsetRight) {\n        offsetEle.scrollLeft += offsetRight - offsetLeft;\n      }\n    }\n  };\n\n  MenuBase.prototype.addScrolling = function (wrapper, ul, scrollType, wrapperOffset, contentOffset) {\n    if (this.enableScrolling && wrapperOffset < contentOffset) {\n      var scrollEle = this.createElement('div', {\n        className: 'e-menu-' + scrollType\n      });\n      wrapper.appendChild(scrollEle);\n      scrollEle.appendChild(ul);\n      scrollEle.style.maxHeight = wrapper.style.maxHeight;\n      var scrollObj = void 0;\n      wrapper.style.overflow = 'hidden';\n\n      if (scrollType === 'vscroll') {\n        scrollObj = new VScroll({\n          enableRtl: this.enableRtl\n        }, scrollEle);\n        scrollObj.scrollStep = select('.e-' + scrollType + '-bar', wrapper).offsetHeight / 2;\n      } else {\n        scrollObj = new HScroll({\n          enableRtl: this.enableRtl\n        }, scrollEle);\n        scrollObj.scrollStep = select('.e-' + scrollType + '-bar', wrapper).offsetWidth;\n      }\n    }\n  };\n\n  MenuBase.prototype.setPosition = function (li, ul, top, left) {\n    var px = 'px';\n    this.toggleVisiblity(ul);\n\n    if (ul === this.element || left > -1 && top > -1) {\n      var collide = isCollide(ul, null, left, top);\n\n      if (collide.indexOf('right') > -1) {\n        left = left - ul.offsetWidth;\n      }\n\n      if (collide.indexOf('bottom') > -1) {\n        var offset = this.callFit(ul, false, true, top, left);\n        top = offset.top - 20;\n      }\n\n      collide = isCollide(ul, null, left, top);\n\n      if (collide.indexOf('left') > -1) {\n        var offset = this.callFit(ul, true, false, top, left);\n        left = offset.left;\n      }\n    } else {\n      if (Browser.isDevice) {\n        top = Number(this.element.style.top.replace(px, ''));\n        left = Number(this.element.style.left.replace(px, ''));\n      } else {\n        var x = this.enableRtl ? 'left' : 'right';\n        var offset = calculatePosition(li, x, 'top');\n        top = offset.top;\n        left = offset.left;\n        var collide = isCollide(ul, null, this.enableRtl ? left - ul.offsetWidth : left, top);\n        var xCollision = collide.indexOf('left') > -1 || collide.indexOf('right') > -1;\n\n        if (xCollision) {\n          offset = calculatePosition(li, this.enableRtl ? 'right' : 'left', 'top');\n          left = offset.left;\n        }\n\n        if (this.enableRtl || xCollision) {\n          left = this.enableRtl && xCollision ? left : left - ul.offsetWidth;\n        }\n\n        if (collide.indexOf('bottom') > -1) {\n          offset = this.callFit(ul, false, true, top, left);\n          top = offset.top;\n        }\n      }\n    }\n\n    this.toggleVisiblity(ul, false);\n    ul.style.top = top + px;\n    ul.style.left = left + px;\n  };\n\n  MenuBase.prototype.toggleVisiblity = function (ul, isVisible) {\n    if (isVisible === void 0) {\n      isVisible = true;\n    }\n\n    ul.style.visibility = isVisible ? 'hidden' : '';\n    ul.style.display = isVisible ? 'block' : 'none';\n  };\n\n  MenuBase.prototype.createItems = function (items) {\n    var _this = this;\n\n    var level = this.navIdx ? this.navIdx.length : 0;\n    var fields = this.getFields(level); // tslint:disable-next-line:no-any\n\n    if (isBlazor() && this.template && items.length && items[0].properties) {\n      var itemsObj_1 = [];\n      items.forEach(function (item, index) {\n        itemsObj_1.push({});\n        itemsObj_1[index][fields.text] = item[fields.text];\n\n        if (!item[fields.id]) {\n          item[fields.id] = getUniqueID('menuitem');\n        }\n\n        itemsObj_1[index][fields.id] = item[fields.id];\n        itemsObj_1[index][fields.iconCss] = item[fields.iconCss];\n        itemsObj_1[index][fields.url] = item[fields.url];\n        itemsObj_1[index][fields.child] = item[fields.child];\n        itemsObj_1[index][fields.separator] = item[fields.separator];\n      });\n      items = itemsObj_1;\n    }\n\n    var showIcon = this.hasField(items, this.getField('iconCss', level));\n    var listBaseOptions = {\n      showIcon: showIcon,\n      moduleName: 'menu',\n      fields: fields,\n      template: this.template,\n      itemNavigable: true,\n      itemCreating: function (args) {\n        if (!args.curData[args.fields[fields.id]]) {\n          args.curData[args.fields[fields.id]] = getUniqueID('menuitem');\n        }\n\n        args.curData.htmlAttributes = {\n          role: 'menuitem',\n          tabindex: '-1'\n        };\n\n        if (_this.isMenu && !args.curData[_this.getField('separator', level)]) {\n          args.curData.htmlAttributes['aria-label'] = args.curData[args.fields.text];\n        }\n\n        if (args.curData[args.fields[fields.iconCss]] === '') {\n          args.curData[args.fields[fields.iconCss]] = null;\n        }\n      },\n      itemCreated: function (args) {\n        if (args.curData[_this.getField('separator', level)]) {\n          args.item.classList.add(SEPARATOR);\n          args.item.removeAttribute('role');\n        }\n\n        if (showIcon && !args.curData[args.fields.iconCss] && !args.curData[_this.getField('separator', level)]) {\n          args.item.classList.add('e-blankicon');\n        }\n\n        if (args.curData[args.fields.child] && args.curData[args.fields.child].length) {\n          var span = _this.createElement('span', {\n            className: ICONS + ' ' + CARET\n          });\n\n          args.item.appendChild(span);\n          args.item.setAttribute('aria-haspopup', 'true');\n          args.item.setAttribute('aria-expanded', 'false');\n\n          if (!_this.isMenu) {\n            args.item.removeAttribute('role');\n          }\n\n          args.item.classList.add('e-menu-caret-icon');\n        }\n\n        if (_this.isMenu && _this.template) {\n          args.item.setAttribute('id', args.curData[args.fields.id].toString());\n          args.item.removeAttribute('data-uid');\n\n          if (args.item.classList.contains('e-level-1')) {\n            args.item.classList.remove('e-level-1');\n          }\n\n          if (args.item.classList.contains('e-has-child')) {\n            args.item.classList.remove('e-has-child');\n          }\n        }\n\n        var eventArgs = {\n          item: args.curData,\n          element: args.item\n        };\n\n        _this.trigger('beforeItemRender', eventArgs);\n      }\n    };\n    this.setProperties({\n      'items': this.items\n    }, true);\n\n    if (this.isMenu) {\n      listBaseOptions.templateID = this.element.id + TEMPLATE_PROPERTY;\n    }\n\n    var ul = ListBase.createList(this.createElement, items, listBaseOptions, !this.template);\n    ul.setAttribute('tabindex', '0');\n\n    if (this.isMenu) {\n      ul.setAttribute('role', 'menu');\n    }\n\n    return ul;\n  };\n\n  MenuBase.prototype.moverHandler = function (e) {\n    var trgt = e.target;\n    this.liTrgt = trgt;\n    var cli = this.getLI(trgt);\n    var wrapper = cli ? closest(cli, '.e-' + this.getModuleName() + '-wrapper') : this.getWrapper();\n    var hdrWrapper = this.getWrapper();\n    var regex = new RegExp('-ej2menu-(.*)-popup');\n    var ulId;\n    var isDifferentElem = false;\n\n    if (!wrapper) {\n      return;\n    }\n\n    if (wrapper.id !== '') {\n      ulId = regex.exec(wrapper.id)[1];\n    } else {\n      ulId = wrapper.querySelector('ul').id;\n    }\n\n    if (ulId !== this.element.id) {\n      this.removeLIStateByClass([FOCUSED, SELECTED], [this.getWrapper()]);\n\n      if (this.navIdx.length) {\n        isDifferentElem = true;\n      } else {\n        return;\n      }\n    }\n\n    if (cli && closest(cli, '.e-' + this.getModuleName() + '-wrapper') && !isDifferentElem) {\n      this.removeLIStateByClass([FOCUSED], this.isMenu ? [wrapper].concat(this.getPopups()) : [wrapper]);\n      this.removeLIStateByClass([FOCUSED], this.isMenu ? [hdrWrapper].concat(this.getPopups()) : [hdrWrapper]);\n      cli.classList.add(FOCUSED);\n\n      if (!this.showItemOnClick) {\n        this.clickHandler(e);\n      }\n    } else if (this.isMenu && this.showItemOnClick && !isDifferentElem) {\n      this.removeLIStateByClass([FOCUSED], [wrapper].concat(this.getPopups()));\n    }\n\n    if (this.isMenu) {\n      if (!this.showItemOnClick && trgt.parentElement !== wrapper && !closest(trgt, '.e-' + this.getModuleName() + '-popup') && (!cli || cli && !this.getIndex(cli.id, true).length)) {\n        this.removeLIStateByClass([FOCUSED], [wrapper]);\n\n        if (this.navIdx.length) {\n          this.isClosed = true;\n          this.closeMenu(null, e);\n        }\n      } else if (isDifferentElem && !this.showItemOnClick) {\n        if (this.navIdx.length) {\n          this.isClosed = true;\n          this.closeMenu(null, e);\n        }\n      }\n\n      if (!this.isClosed) {\n        this.removeStateWrapper();\n      }\n\n      this.isClosed = false;\n    }\n  };\n\n  MenuBase.prototype.removeStateWrapper = function () {\n    if (this.liTrgt) {\n      var wrapper = closest(this.liTrgt, '.e-menu-vscroll');\n\n      if (this.liTrgt.tagName === 'DIV' && wrapper) {\n        this.removeLIStateByClass([FOCUSED, SELECTED], [wrapper]);\n      }\n    }\n  };\n\n  MenuBase.prototype.removeLIStateByClass = function (classList, element) {\n    var li;\n\n    var _loop_1 = function (i) {\n      classList.forEach(function (className) {\n        li = select('.' + className, element[i]);\n\n        if (li) {\n          li.classList.remove(className);\n        }\n      });\n    };\n\n    for (var i = 0; i < element.length; i++) {\n      _loop_1(i);\n    }\n  };\n\n  MenuBase.prototype.getField = function (propName, level) {\n    if (level === void 0) {\n      level = 0;\n    }\n\n    var fieldName = this.fields[propName];\n    return typeof fieldName === 'string' ? fieldName : !fieldName[level] ? fieldName[fieldName.length - 1].toString() : fieldName[level].toString();\n  };\n\n  MenuBase.prototype.getFields = function (level) {\n    if (level === void 0) {\n      level = 0;\n    }\n\n    return {\n      id: this.getField('itemId', level),\n      iconCss: this.getField('iconCss', level),\n      text: this.getField('text', level),\n      url: this.getField('url', level),\n      child: this.getField('children', level),\n      separator: this.getField('separator', level)\n    };\n  };\n\n  MenuBase.prototype.hasField = function (items, field) {\n    for (var i = 0, len = items.length; i < len; i++) {\n      if (items[i][field]) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  MenuBase.prototype.menuHeaderClickHandler = function (e) {\n    if (closest(e.target, '.e-menu-wrapper').querySelector('ul.e-menu-parent').id !== this.element.id) {\n      return;\n    }\n\n    this.element.classList.contains('e-hide-menu') ? this.openHamburgerMenu(e) : this.closeHamburgerMenu(e);\n  };\n\n  MenuBase.prototype.clickHandler = function (e) {\n    if (this.isTapHold) {\n      this.isTapHold = false;\n    } else {\n      var wrapper = this.getWrapper();\n      var trgt = e.target;\n      var cli = this.cli = this.getLI(trgt);\n      var regex = new RegExp('-ej2menu-(.*)-popup');\n      var cliWrapper = cli ? closest(cli, '.e-' + this.getModuleName() + '-wrapper') : null;\n      var isInstLI = cli && cliWrapper && (this.isMenu ? this.getIndex(cli.id, true).length > 0 : wrapper.firstElementChild.id === cliWrapper.firstElementChild.id);\n\n      if (Browser.isDevice && this.isMenu) {\n        this.removeLIStateByClass([FOCUSED], [wrapper].concat(this.getPopups()));\n        this.mouseDownHandler(e);\n      }\n\n      if (cli && cliWrapper && this.isMenu) {\n        var cliWrapperId = cliWrapper.id ? regex.exec(cliWrapper.id)[1] : cliWrapper.querySelector('.e-menu-parent').id;\n\n        if (this.element.id !== cliWrapperId) {\n          return;\n        }\n      }\n\n      if (isInstLI && e.type === 'click' && !cli.classList.contains(HEADER)) {\n        this.setLISelected(cli);\n        var navIdx = this.getIndex(cli.id, true);\n        var item = this.getItem(navIdx);\n        var eventArgs = {\n          element: cli,\n          item: item,\n          event: e\n        };\n        this.trigger('select', eventArgs);\n      }\n\n      if (isInstLI && (e.type === 'mouseover' || Browser.isDevice || this.showItemOnClick)) {\n        var ul = void 0;\n\n        if (cli.classList.contains(HEADER)) {\n          ul = wrapper.children[this.navIdx.length - 1];\n          this.toggleAnimation(ul);\n          var sli = this.getLIByClass(ul, SELECTED);\n\n          if (sli) {\n            sli.classList.remove(SELECTED);\n          }\n\n          detach(cli.parentNode);\n          this.navIdx.pop();\n        } else {\n          if (!cli.classList.contains(SEPARATOR)) {\n            this.showSubMenu = true;\n            var cul = cli.parentNode;\n            this.cliIdx = this.getIdx(cul, cli);\n\n            if (this.isMenu || !Browser.isDevice) {\n              var culIdx = this.isMenu ? Array.prototype.indexOf.call([wrapper].concat(this.getPopups()), closest(cul, '.' + 'e-' + this.getModuleName() + '-wrapper')) : this.getIdx(wrapper, cul);\n\n              if (this.navIdx[culIdx] === this.cliIdx) {\n                this.showSubMenu = false;\n              }\n\n              if (culIdx !== this.navIdx.length && (e.type !== 'mouseover' || this.showSubMenu)) {\n                var sli = this.getLIByClass(cul, SELECTED);\n\n                if (sli) {\n                  sli.classList.remove(SELECTED);\n                }\n\n                this.isClosed = true;\n                this.keyType = 'click';\n\n                if (this.showItemOnClick) {\n                  this.setLISelected(cli);\n                }\n\n                this.closeMenu(culIdx + 1, e);\n\n                if (this.showItemOnClick) {\n                  this.setLISelected(cli);\n                }\n              }\n            }\n\n            if (!this.isClosed) {\n              this.afterCloseMenu(e);\n            }\n\n            this.isClosed = false;\n          }\n        }\n      } else {\n        if (this.isMenu && trgt.tagName === 'DIV' && this.navIdx.length && closest(trgt, '.e-menu-vscroll')) {\n          var popupEle = closest(trgt, '.' + POPUP);\n          var cIdx = Array.prototype.indexOf.call(this.getPopups(), popupEle) + 1;\n\n          if (cIdx < this.navIdx.length) {\n            this.closeMenu(cIdx + 1, e);\n            this.removeLIStateByClass([FOCUSED, SELECTED], [popupEle]);\n          }\n        } else if (this.isMenu && this.hamburgerMode && trgt.tagName === 'SPAN' && trgt.classList.contains('e-menu-icon')) {\n          this.menuHeaderClickHandler(e);\n        } else {\n          if (trgt.tagName !== 'UL' || (this.isMenu ? trgt.parentElement.classList.contains('e-menu-wrapper') && !this.getIndex(trgt.querySelector('.' + ITEM).id, true).length : trgt.parentElement !== wrapper)) {\n            if (!cli) {\n              this.removeLIStateByClass([SELECTED], [wrapper]);\n            }\n\n            if (!cli || !cli.querySelector('.' + CARET)) {\n              this.closeMenu(null, e);\n            }\n          }\n        }\n      }\n    }\n  };\n\n  MenuBase.prototype.afterCloseMenu = function (e) {\n    var isHeader;\n\n    if (this.showSubMenu) {\n      if (this.showItemOnClick && this.navIdx.length === 0) {\n        isHeader = closest(e.target, '.e-menu-parent.e-control');\n      } else {\n        isHeader = closest(this.element, '.e-menu-parent.e-control');\n      }\n\n      var idx = this.navIdx.concat(this.cliIdx);\n      var item = this.getItem(idx);\n\n      if (item && item[this.getField('children', idx.length - 1)] && item[this.getField('children', idx.length - 1)].length) {\n        if (e.type === 'mouseover' || Browser.isDevice && this.isMenu) {\n          this.setLISelected(this.cli);\n        }\n\n        if (!this.hamburgerMode && isHeader || this.hamburgerMode && this.cli.getAttribute('aria-expanded') === 'false') {\n          this.cli.setAttribute('aria-expanded', 'true');\n          this.navIdx.push(this.cliIdx);\n          this.openMenu(this.cli, item, null, null, e);\n        }\n      } else {\n        if (e.type !== 'mouseover') {\n          this.closeMenu(null, e);\n        }\n      }\n\n      if (!isHeader) {\n        var cul = this.getUlByNavIdx();\n        var sli = this.getLIByClass(cul, SELECTED);\n\n        if (sli) {\n          sli.setAttribute('aria-expanded', 'false');\n          sli.classList.remove(SELECTED);\n        }\n      }\n    }\n\n    this.keyType = '';\n  };\n\n  MenuBase.prototype.setLISelected = function (li) {\n    var sli = this.getLIByClass(li.parentElement, SELECTED);\n\n    if (sli) {\n      sli.classList.remove(SELECTED);\n    }\n\n    if (!this.isMenu) {\n      li.classList.remove(FOCUSED);\n    }\n\n    li.classList.add(SELECTED);\n  };\n\n  MenuBase.prototype.getLIByClass = function (ul, classname) {\n    for (var i = 0, len = ul.children.length; i < len; i++) {\n      if (ul.children[i].classList.contains(classname)) {\n        return ul.children[i];\n      }\n    }\n\n    return null;\n  };\n  /**\n   * This method is used to get the index of the menu item in the Menu based on the argument.\n   * @param item - item be passed to get the index | id to be passed to get the item index.\n   * @param isUniqueId - Set `true` if it is a unique id.\n   * @returns void\n   */\n\n\n  MenuBase.prototype.getItemIndex = function (item, isUniqueId) {\n    var idx;\n\n    if (typeof item === 'string') {\n      idx = item;\n    } else {\n      idx = item.id;\n    }\n\n    var isText = isUniqueId === false ? false : true;\n    var navIdx = this.getIndex(idx, isText);\n    return navIdx;\n  };\n  /**\n   * This method is used to set the menu item in the Menu based on the argument.\n   * @param item - item need to be updated.\n   * @param id - id to be passed to update the item.\n   * @param isUniqueId - Set `true` if it is a unique id.\n   * @returns void\n   */\n\n\n  MenuBase.prototype.setItem = function (item, id, isUniqueId) {\n    var idx = id ? id : item.id;\n    var isText = isUniqueId === false ? false : true;\n    var navIdx = this.getIndex(idx, isText);\n    var newItem = this.getItem(navIdx);\n    newItem.iconCss = item.iconCss;\n    newItem.id = item.id;\n    newItem.text = item.text;\n    newItem.url = item.url;\n    newItem.separator = item.separator;\n    newItem.items = item.items;\n  };\n\n  MenuBase.prototype.getItem = function (navIdx) {\n    navIdx = navIdx.slice();\n    var idx = navIdx.pop();\n    var items = this.getItems(navIdx);\n    return items[idx];\n  };\n\n  MenuBase.prototype.getItems = function (navIdx) {\n    var items = this.items;\n\n    for (var i = 0; i < navIdx.length; i++) {\n      items = items[navIdx[i]][this.getField('children', i)];\n    }\n\n    return items;\n  };\n\n  MenuBase.prototype.setItems = function (newItems, navIdx) {\n    var items = this.getItems(navIdx);\n    items.splice(0, items.length);\n\n    for (var i = 0; i < newItems.length; i++) {\n      items.splice(i, 0, newItems[i]);\n    }\n  };\n\n  MenuBase.prototype.getIdx = function (ul, li, skipHdr) {\n    if (skipHdr === void 0) {\n      skipHdr = true;\n    }\n\n    var idx = Array.prototype.indexOf.call(ul.querySelectorAll('li'), li);\n\n    if (this.isMenu && this.template && isBlazor()) {\n      idx = Array.prototype.indexOf.call(ul.querySelectorAll(li.tagName), li);\n    } else {\n      idx = Array.prototype.indexOf.call(ul.children, li);\n    }\n\n    if (skipHdr && ul.children[0].classList.contains(HEADER)) {\n      idx--;\n    }\n\n    return idx;\n  };\n\n  MenuBase.prototype.getLI = function (elem) {\n    if (elem.tagName === 'LI' && elem.classList.contains('e-menu-item')) {\n      return elem;\n    }\n\n    return closest(elem, 'li.e-menu-item');\n  };\n\n  MenuBase.prototype.updateItemsByNavIdx = function () {\n    var items = this.items;\n    var count = 0;\n\n    for (var index = 0; index < this.navIdx.length; index++) {\n      items = items[index].items;\n\n      if (!items) {\n        break;\n      }\n\n      count++;\n      var ul = this.getUlByNavIdx(count);\n\n      if (!ul) {\n        break;\n      }\n\n      this.updateItem(ul, items);\n    }\n  };\n\n  MenuBase.prototype.removeChildElement = function (elem) {\n    while (elem.firstElementChild) {\n      elem.removeChild(elem.firstElementChild);\n    }\n\n    return elem;\n  };\n  /**\n   * Called internally if any of the property value changed\n   * @private\n   * @param {MenuBaseModel} newProp\n   * @param {MenuBaseModel} oldProp\n   * @returns void\n   */\n\n\n  MenuBase.prototype.onPropertyChanged = function (newProp, oldProp) {\n    var _this = this;\n\n    var wrapper = this.getWrapper();\n\n    var _loop_2 = function (prop) {\n      switch (prop) {\n        case 'cssClass':\n          if (oldProp.cssClass) {\n            removeClass([wrapper], oldProp.cssClass.split(' '));\n          }\n\n          if (newProp.cssClass) {\n            addClass([wrapper], newProp.cssClass.split(' '));\n          }\n\n          break;\n\n        case 'enableRtl':\n          wrapper.classList.toggle(RTL);\n          break;\n\n        case 'showItemOnClick':\n          this_1.unWireEvents();\n          this_1.showItemOnClick = newProp.showItemOnClick;\n          this_1.wireEvents();\n          break;\n\n        case 'enableScrolling':\n          if (newProp.enableScrolling) {\n            var ul_2;\n            this_1.element.classList.contains('e-vertical') ? this_1.addScrolling(wrapper, this_1.element, 'vscroll', wrapper.offsetHeight, this_1.element.offsetHeight) : this_1.addScrolling(wrapper, this_1.element, 'hscroll', wrapper.offsetWidth, this_1.element.offsetWidth);\n            this_1.getPopups().forEach(function (wrapper) {\n              ul_2 = select('.e-ul', wrapper);\n\n              _this.addScrolling(wrapper, ul_2, 'vscroll', wrapper.offsetHeight, ul_2.offsetHeight);\n            });\n          } else {\n            var ul_3 = wrapper.children[0];\n            this_1.element.classList.contains('e-vertical') ? this_1.destroyScrollObj(getInstance(ul_3, VScroll), ul_3) : this_1.destroyScrollObj(getInstance(ul_3, HScroll), ul_3);\n            wrapper.style.overflow = '';\n            wrapper.appendChild(this_1.element);\n            this_1.getPopups().forEach(function (wrapper) {\n              ul_3 = wrapper.children[0];\n\n              _this.destroyScrollObj(getInstance(ul_3, VScroll), ul_3);\n\n              wrapper.style.overflow = '';\n            });\n          }\n\n          break;\n\n        case 'items':\n          var idx = void 0;\n          var navIdx = void 0;\n          var item = void 0;\n\n          if (!Object.keys(oldProp.items).length) {\n            this_1.updateItem(this_1.element, this_1.items);\n\n            for (var i = 1, count = wrapper.childElementCount; i < count; i++) {\n              detach(wrapper.lastElementChild);\n            }\n\n            if (this_1.isMenu && isBlazor()) {\n              this_1.updateItemsByNavIdx();\n            } else {\n              this_1.navIdx = [];\n            }\n          } else {\n            var keys = Object.keys(newProp.items);\n\n            for (var i = 0; i < keys.length; i++) {\n              navIdx = this_1.getChangedItemIndex(newProp, [], Number(keys[i]));\n\n              if (navIdx.length <= this_1.getWrapper().children.length) {\n                idx = navIdx.pop();\n                item = this_1.getItems(navIdx);\n                this_1.insertAfter([item[idx]], item[idx].text);\n                this_1.removeItem(item, navIdx, idx);\n                this_1.setItems(item, navIdx);\n              }\n\n              navIdx.length = 0;\n            }\n          }\n\n          break;\n      }\n    };\n\n    var this_1 = this;\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      _loop_2(prop);\n    }\n  };\n\n  MenuBase.prototype.updateItem = function (ul, items) {\n    if (isBlazor()) {\n      ul = this.removeChildElement(ul);\n    } else {\n      ul.innerHTML = '';\n    }\n\n    var lis = [].slice.call(this.createItems(items).children);\n    lis.forEach(function (li) {\n      ul.appendChild(li);\n    });\n  };\n\n  MenuBase.prototype.getChangedItemIndex = function (newProp, index, idx) {\n    index.push(idx);\n    var key = Object.keys(newProp.items[idx]).pop();\n\n    if (key === 'items') {\n      var item = newProp.items[idx];\n      var popStr = Object.keys(item.items).pop();\n\n      if (popStr) {\n        this.getChangedItemIndex(item, index, Number(popStr));\n      }\n    } else {\n      if (key === 'isParentArray' && index.length > 1) {\n        index.pop();\n      }\n    }\n\n    return index;\n  };\n\n  MenuBase.prototype.removeItem = function (item, navIdx, idx) {\n    item.splice(idx, 1);\n    var uls = this.getWrapper().children;\n\n    if (navIdx.length < uls.length) {\n      detach(uls[navIdx.length].children[idx]);\n    }\n  };\n  /**\n   * Used to unwire the bind events.\n   * @private\n   */\n\n\n  MenuBase.prototype.unWireEvents = function (targetSelctor) {\n    if (targetSelctor === void 0) {\n      targetSelctor = this.target;\n    }\n\n    var wrapper = this.getWrapper();\n\n    if (targetSelctor) {\n      var target = void 0;\n      var touchModule = void 0;\n      var targetElems = selectAll(targetSelctor);\n\n      for (var i = 0, len = targetElems.length; i < len; i++) {\n        target = targetElems[i];\n\n        if (this.isMenu) {\n          EventHandler.remove(target, 'click', this.menuHeaderClickHandler);\n        } else {\n          if (Browser.isIos) {\n            touchModule = getInstance(target, Touch);\n\n            if (touchModule) {\n              touchModule.destroy();\n            }\n          } else {\n            EventHandler.remove(target, 'contextmenu', this.cmenuHandler);\n          }\n        }\n      }\n\n      if (!this.isMenu) {\n        EventHandler.remove(this.targetElement, 'scroll', this.scrollHandler);\n\n        for (var _i = 0, _a = getScrollableParent(this.targetElement); _i < _a.length; _i++) {\n          var parent_2 = _a[_i];\n          EventHandler.remove(parent_2, 'scroll', this.scrollHandler);\n        }\n      }\n    }\n\n    if (!Browser.isDevice) {\n      EventHandler.remove(this.isMenu ? document : wrapper, 'mouseover', this.delegateMoverHandler);\n      EventHandler.remove(document, 'mousedown', this.delegateMouseDownHandler);\n    }\n\n    EventHandler.remove(document, 'click', this.delegateClickHandler);\n    this.unWireKeyboardEvent(wrapper);\n    this.rippleFn();\n  };\n\n  MenuBase.prototype.unWireKeyboardEvent = function (element) {\n    var keyboardModule = getInstance(element, KeyboardEvents);\n\n    if (keyboardModule) {\n      keyboardModule.destroy();\n    }\n  };\n\n  MenuBase.prototype.toggleAnimation = function (ul, isMenuOpen) {\n    var _this = this;\n\n    if (isMenuOpen === void 0) {\n      isMenuOpen = true;\n    }\n\n    var pUlHeight;\n    var pElement;\n\n    if (this.animationSettings.effect === 'None' || !isMenuOpen) {\n      this.end(ul, isMenuOpen);\n    } else {\n      this.animation.animate(ul, {\n        name: this.animationSettings.effect,\n        duration: this.animationSettings.duration,\n        timingFunction: this.animationSettings.easing,\n        begin: function (options) {\n          if (_this.hamburgerMode) {\n            pElement = options.element.parentElement;\n            options.element.style.position = 'absolute';\n            pUlHeight = pElement.offsetHeight;\n            options.element.style.maxHeight = options.element.offsetHeight + 'px';\n            pElement.style.maxHeight = '';\n          } else {\n            options.element.style.display = 'block';\n            options.element.style.maxHeight = options.element.getBoundingClientRect().height + 'px';\n          }\n        },\n        progress: function (options) {\n          if (_this.hamburgerMode) {\n            pElement.style.minHeight = pUlHeight + options.element.offsetHeight + 'px';\n          }\n        },\n        end: function (options) {\n          if (_this.hamburgerMode) {\n            options.element.style.position = '';\n            options.element.style.maxHeight = '';\n            pElement.style.minHeight = '';\n            options.element.style.top = 0 + 'px';\n            options.element.children[0].focus();\n\n            _this.triggerOpen(options.element.children[0]);\n          } else {\n            _this.end(options.element, isMenuOpen);\n          }\n        }\n      });\n    }\n  };\n\n  MenuBase.prototype.triggerOpen = function (ul) {\n    var item = this.navIdx.length ? this.getItem(this.navIdx) : null;\n    var eventArgs = {\n      element: ul,\n      parentItem: item,\n      items: item ? item.items : this.items\n    };\n    this.trigger('onOpen', eventArgs);\n  };\n\n  MenuBase.prototype.end = function (ul, isMenuOpen) {\n    if (isMenuOpen) {\n      ul.style.display = 'block';\n      ul.style.maxHeight = '';\n      this.triggerOpen(ul);\n\n      if (ul.querySelector('.' + FOCUSED)) {\n        ul.querySelector('.' + FOCUSED).focus();\n      } else {\n        var ele = void 0;\n        ele = this.getWrapper().children[this.getIdx(this.getWrapper(), ul) - 1];\n\n        if (ele) {\n          ele.querySelector('.' + SELECTED).focus();\n        } else {\n          this.element.focus();\n        }\n      }\n    } else {\n      if (ul === this.element) {\n        var fli = this.getLIByClass(this.element, FOCUSED);\n\n        if (fli) {\n          fli.classList.remove(FOCUSED);\n        }\n\n        var sli = this.getLIByClass(this.element, SELECTED);\n\n        if (sli) {\n          sli.classList.remove(SELECTED);\n        }\n\n        ul.style.display = 'none';\n      } else {\n        detach(ul);\n      }\n    }\n  };\n  /**\n   * Get the properties to be maintained in the persisted state.\n   * @returns string\n   */\n\n\n  MenuBase.prototype.getPersistData = function () {\n    return '';\n  };\n  /**\n   * Get wrapper element.\n   * @returns Element\n   * @private\n   */\n\n\n  MenuBase.prototype.getWrapper = function () {\n    return closest(this.element, '.e-' + this.getModuleName() + '-wrapper');\n  };\n\n  MenuBase.prototype.getIndex = function (data, isUniqueId, items, nIndex, isCallBack, level) {\n    if (items === void 0) {\n      items = this.items;\n    }\n\n    if (nIndex === void 0) {\n      nIndex = [];\n    }\n\n    if (isCallBack === void 0) {\n      isCallBack = false;\n    }\n\n    if (level === void 0) {\n      level = 0;\n    }\n\n    var item;\n    level = isCallBack ? level + 1 : 0;\n\n    for (var i = 0, len = items.length; i < len; i++) {\n      item = items[i];\n\n      if ((isUniqueId ? item[this.getField('itemId', level)] : item[this.getField('text', level)]) === data) {\n        nIndex.push(i);\n        break;\n      } else if (item[this.getField('children', level)] && item[this.getField('children', level)].length) {\n        nIndex = this.getIndex(data, isUniqueId, item[this.getField('children', level)], nIndex, true, level);\n\n        if (nIndex[nIndex.length - 1] === -1) {\n          if (i !== len - 1) {\n            nIndex.pop();\n          }\n        } else {\n          nIndex.unshift(i);\n          break;\n        }\n      } else {\n        if (i === len - 1) {\n          nIndex.push(-1);\n        }\n      }\n    }\n\n    return !isCallBack && nIndex[0] === -1 ? [] : nIndex;\n  };\n  /**\n   * This method is used to enable or disable the menu items in the Menu based on the items and enable argument.\n   * @param items Text items that needs to be enabled/disabled.\n   * @param enable Set `true`/`false` to enable/disable the list items.\n   * @param isUniqueId - Set `true` if it is a unique id.\n   * @returns void\n   */\n\n\n  MenuBase.prototype.enableItems = function (items, enable, isUniqueId) {\n    if (enable === void 0) {\n      enable = true;\n    }\n\n    var ul;\n    var idx;\n    var navIdx;\n    var disabled = DISABLED;\n    var skipItem;\n\n    for (var i = 0; i < items.length; i++) {\n      navIdx = this.getIndex(items[i], isUniqueId);\n\n      if (this.navIdx.length) {\n        if (navIdx.length !== 1) {\n          skipItem = false;\n\n          for (var i_1 = 0, len = navIdx.length - 1; i_1 < len; i_1++) {\n            if (navIdx[i_1] !== this.navIdx[i_1]) {\n              skipItem = true;\n              break;\n            }\n          }\n\n          if (skipItem) {\n            continue;\n          }\n        }\n      } else {\n        if (navIdx.length !== 1) {\n          continue;\n        }\n      }\n\n      idx = navIdx.pop();\n      ul = this.getUlByNavIdx(navIdx.length);\n\n      if (ul) {\n        if (enable) {\n          if (this.isMenu) {\n            ul.children[idx].classList.remove(disabled);\n            ul.children[idx].removeAttribute('aria-disabled');\n          } else {\n            if (Browser.isDevice && !ul.classList.contains('e-contextmenu')) {\n              ul.children[idx + 1].classList.remove(disabled);\n            } else {\n              ul.children[idx].classList.remove(disabled);\n            }\n          }\n        } else {\n          if (this.isMenu) {\n            ul.children[idx].classList.add(disabled);\n            ul.children[idx].setAttribute('aria-disabled', 'true');\n          } else {\n            if (Browser.isDevice && !ul.classList.contains('e-contextmenu')) {\n              ul.children[idx + 1].classList.add(disabled);\n            } else {\n              ul.children[idx].classList.add(disabled);\n            }\n          }\n        }\n      }\n    }\n  };\n  /**\n   * This method is used to show the menu items in the Menu based on the items text.\n   * @param items Text items that needs to be shown.\n   * @param isUniqueId - Set `true` if it is a unique id.\n   * @returns void\n   */\n\n\n  MenuBase.prototype.showItems = function (items, isUniqueId) {\n    this.showHideItems(items, false, isUniqueId);\n  };\n  /**\n   * This method is used to hide the menu items in the Menu based on the items text.\n   * @param items Text items that needs to be hidden.\n   * @returns void\n   */\n\n\n  MenuBase.prototype.hideItems = function (items, isUniqueId) {\n    this.showHideItems(items, true, isUniqueId);\n  };\n\n  MenuBase.prototype.showHideItems = function (items, ishide, isUniqueId) {\n    var ul;\n    var index;\n    var navIdx;\n\n    for (var i = 0; i < items.length; i++) {\n      navIdx = this.getIndex(items[i], isUniqueId);\n      index = navIdx.pop();\n      ul = this.getUlByNavIdx(navIdx.length);\n\n      if (ul) {\n        if (ishide) {\n          if (Browser.isDevice && !ul.classList.contains('e-contextmenu')) {\n            ul.children[index + 1].classList.add(HIDE);\n          } else {\n            ul.children[index].classList.add(HIDE);\n          }\n        } else {\n          if (Browser.isDevice && !ul.classList.contains('e-contextmenu')) {\n            ul.children[index + 1].classList.remove(HIDE);\n          } else {\n            ul.children[index].classList.remove(HIDE);\n          }\n        }\n      }\n    }\n  };\n  /**\n   * It is used to remove the menu items from the Menu based on the items text.\n   * @param items Text items that needs to be removed.\n   * @returns void\n   */\n\n\n  MenuBase.prototype.removeItems = function (items, isUniqueId) {\n    var idx;\n    var navIdx;\n    var iitems;\n\n    for (var i = 0; i < items.length; i++) {\n      navIdx = this.getIndex(items[i], isUniqueId);\n      idx = navIdx.pop();\n      iitems = this.getItems(navIdx);\n      this.removeItem(iitems, navIdx, idx);\n    }\n  };\n  /**\n   * It is used to insert the menu items after the specified menu item text.\n   * @param items Items that needs to be inserted.\n   * @param text Text item after that the element to be inserted.\n   * @returns void\n   */\n\n\n  MenuBase.prototype.insertAfter = function (items, text, isUniqueId) {\n    this.insertItems(items, text, isUniqueId);\n  };\n  /**\n   * It is used to insert the menu items before the specified menu item text.\n   * @param items Items that needs to be inserted.\n   * @param text Text item before that the element to be inserted.\n   * @param isUniqueId - Set `true` if it is a unique id.\n   * @returns void\n   */\n\n\n  MenuBase.prototype.insertBefore = function (items, text, isUniqueId) {\n    this.insertItems(items, text, isUniqueId, false);\n  };\n\n  MenuBase.prototype.insertItems = function (items, text, isUniqueId, isAfter) {\n    if (isAfter === void 0) {\n      isAfter = true;\n    }\n\n    var li;\n    var idx;\n    var navIdx;\n    var iitems;\n    var menuitem;\n    var showIcon;\n\n    for (var i = 0; i < items.length; i++) {\n      navIdx = this.getIndex(text, isUniqueId);\n      idx = navIdx.pop();\n      iitems = this.getItems(navIdx);\n      menuitem = new MenuItem(iitems[0], 'items', items[i], true);\n      iitems.splice(isAfter ? idx + 1 : idx, 0, menuitem);\n      var uls = this.isMenu ? [this.getWrapper()].concat(this.getPopups()) : [].slice.call(this.getWrapper().children);\n\n      if (navIdx.length < uls.length) {\n        idx = isAfter ? idx + 1 : idx;\n        showIcon = this.hasField(iitems, this.getField('iconCss', navIdx.length - 1));\n        li = this.createItems(iitems).children[idx];\n        var ul = this.isMenu ? select('.e-menu-parent', uls[navIdx.length]) : uls[navIdx.length];\n        ul.insertBefore(li, ul.children[idx]);\n      }\n    }\n  };\n\n  MenuBase.prototype.removeAttributes = function () {\n    var _this = this;\n\n    ['top', 'left', 'display', 'z-index'].forEach(function (key) {\n      _this.element.style.removeProperty(key);\n    });\n    ['role', 'tabindex', 'class', 'style'].forEach(function (key) {\n      if (key === 'class' && _this.element.classList.contains('e-menu-parent')) {\n        _this.element.classList.remove('e-menu-parent');\n      }\n\n      if (['class', 'style'].indexOf(key) === -1 || !_this.element.getAttribute(key)) {\n        _this.element.removeAttribute(key);\n      }\n\n      if (_this.isMenu && key === 'class' && _this.element.classList.contains('e-vertical')) {\n        _this.element.classList.remove('e-vertical');\n      }\n    });\n  };\n  /**\n   * Destroys the widget.\n   * @returns void\n   */\n\n\n  MenuBase.prototype.destroy = function () {\n    var wrapper = this.getWrapper();\n\n    if (wrapper) {\n      this.unWireEvents();\n\n      if (!this.isMenu) {\n        this.clonedElement.style.display = '';\n\n        if (this.clonedElement.tagName === 'EJS-CONTEXTMENU') {\n          addClass([this.clonedElement], ['e-control', 'e-lib', 'e-' + this.getModuleName()]);\n          this.element = this.clonedElement;\n        } else {\n          if (this.refreshing && this.clonedElement.childElementCount && this.clonedElement.children[0].tagName === 'LI') {\n            this.setProperties({\n              'items': []\n            }, true);\n          }\n\n          if (document.getElementById(this.clonedElement.id)) {\n            var refEle = this.clonedElement.nextElementSibling;\n            refEle && refEle !== wrapper ? this.clonedElement.parentElement.insertBefore(this.element, refEle) : this.clonedElement.parentElement.appendChild(this.element);\n\n            if (isBlazor()) {\n              this.element = this.removeChildElement(this.element);\n            } else {\n              this.element.innerHTML = '';\n            }\n\n            append([].slice.call(this.clonedElement.children), this.element);\n            detach(this.clonedElement);\n            this.removeAttributes();\n          }\n        }\n\n        this.clonedElement = null;\n      } else {\n        this.closeMenu();\n\n        if (isBlazor()) {\n          this.element = this.removeChildElement(this.element);\n        } else {\n          this.element.innerHTML = '';\n        }\n\n        this.removeAttributes();\n        wrapper.parentNode.insertBefore(this.element, wrapper);\n      }\n\n      if (this.isMenu && this.clonedElement) {\n        detach(this.element);\n        wrapper.style.display = '';\n        wrapper.classList.remove('e-' + this.getModuleName() + '-wrapper');\n        wrapper.removeAttribute('data-ripple');\n      } else {\n        detach(wrapper);\n      }\n\n      _super.prototype.destroy.call(this);\n    }\n  };\n\n  __decorate([Event()], MenuBase.prototype, \"beforeItemRender\", void 0);\n\n  __decorate([Event()], MenuBase.prototype, \"beforeOpen\", void 0);\n\n  __decorate([Event()], MenuBase.prototype, \"onOpen\", void 0);\n\n  __decorate([Event()], MenuBase.prototype, \"beforeClose\", void 0);\n\n  __decorate([Event()], MenuBase.prototype, \"onClose\", void 0);\n\n  __decorate([Event()], MenuBase.prototype, \"select\", void 0);\n\n  __decorate([Event()], MenuBase.prototype, \"created\", void 0);\n\n  __decorate([Property('')], MenuBase.prototype, \"cssClass\", void 0);\n\n  __decorate([Property(false)], MenuBase.prototype, \"showItemOnClick\", void 0);\n\n  __decorate([Property('')], MenuBase.prototype, \"target\", void 0);\n\n  __decorate([Property('')], MenuBase.prototype, \"filter\", void 0);\n\n  __decorate([Property(null)], MenuBase.prototype, \"template\", void 0);\n\n  __decorate([Property(false)], MenuBase.prototype, \"enableScrolling\", void 0);\n\n  __decorate([Property(false)], MenuBase.prototype, \"enableHtmlSanitizer\", void 0);\n\n  __decorate([Complex({\n    itemId: \"id\",\n    text: \"text\",\n    parentId: \"parentId\",\n    iconCss: \"iconCss\",\n    url: \"url\",\n    separator: \"separator\",\n    children: \"items\"\n  }, FieldSettings)], MenuBase.prototype, \"fields\", void 0);\n\n  __decorate([Collection([], MenuItem)], MenuBase.prototype, \"items\", void 0);\n\n  __decorate([Complex({\n    duration: 400,\n    easing: 'ease',\n    effect: 'SlideDown'\n  }, MenuAnimationSettings)], MenuBase.prototype, \"animationSettings\", void 0);\n\n  MenuBase = __decorate([NotifyPropertyChanges], MenuBase);\n  return MenuBase;\n}(Component);\n\nexport { MenuBase };","map":null,"metadata":{},"sourceType":"module"}