{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { GetResourceEventHandler } from './../pdf-graphics';\nimport { PdfBrush } from './pdf-brush';\nimport { PointF, SizeF, RectangleF, Rectangle } from './../../drawing/pdf-drawing';\nimport { DictionaryProperties } from './../../input-output/pdf-dictionary-properties';\nimport { PdfArray } from './../../primitives/pdf-array';\nimport { PdfNumber } from './../../primitives/pdf-number';\nimport { PdfGraphics } from './../pdf-graphics';\nimport { PdfResources } from './../pdf-resources';\nimport { PdfStream } from './../../primitives/pdf-stream';\nimport { PdfPage } from './../../pages/pdf-page';\n/**\n * `PdfTilingBrush` Implements a colored tiling brush.\n */\n\nvar PdfTilingBrush =\n/** @class */\nfunction (_super) {\n  __extends(PdfTilingBrush, _super);\n  /**\n   * Initializes a new instance of the `PdfTilingBrush` class.\n   * @public\n   */\n\n\n  function PdfTilingBrush(arg1, arg2) {\n    var _this = _super.call(this) || this;\n    /**\n     * Local variable to store Stroking.\n     * @private\n     */\n\n\n    _this.mStroking = false;\n    /**\n     * Local variable to store the tile start location.\n     * @private\n     */\n\n    _this.mLocation = new PointF(0, 0);\n    /**\n     * Local variable to store the dictionary properties.\n     * @private\n     */\n\n    _this.mDictionaryProperties = new DictionaryProperties();\n    var rect = null;\n\n    if (arg1 instanceof Rectangle) {\n      rect = arg1;\n    } else if (arg1 instanceof SizeF) {\n      rect = new Rectangle(0, 0, arg1.width, arg1.height);\n    }\n\n    if (arg2 !== null && arg2 instanceof PdfPage) {\n      _this.mPage = arg2;\n    }\n\n    _this.brushStream = new PdfStream();\n    _this.mResources = new PdfResources();\n\n    _this.brushStream.items.setValue(_this.mDictionaryProperties.resources, _this.mResources);\n\n    _this.setBox(rect);\n\n    _this.setObligatoryFields();\n\n    if (arg2 !== null && arg2 instanceof PdfPage) {\n      _this.mPage = arg2;\n      _this.graphics.colorSpace = arg2.document.colorSpace;\n    }\n\n    return _this;\n  }\n  /**\n   * Initializes a new instance of the `PdfTilingBrush` class.\n   * @private\n   * @param rectangle The size of the smallest brush cell.\n   * @param page The Current Page Object.\n   * @param location The Tile start location.\n   * @param matrix The matrix.\n   */\n\n\n  PdfTilingBrush.prototype.initialize = function (rectangle, page, location, matrix) {\n    this.mPage = page;\n    this.mLocation = location;\n    this.mTransformationMatrix = matrix;\n    this.tempBrushStream = this.brushStream;\n    this.brushStream = new PdfStream();\n    var tempResource = new PdfResources();\n    this.brushStream.items.setValue(this.mDictionaryProperties.resources, tempResource);\n    this.setBox(rectangle);\n    this.setObligatoryFields();\n    return this;\n  };\n\n  Object.defineProperty(PdfTilingBrush.prototype, \"location\", {\n    //Properties\n\n    /**\n     * Location representing the start position of the tiles.\n     * @public\n     */\n    get: function () {\n      return this.mLocation;\n    },\n    set: function (value) {\n      this.mLocation = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Sets the obligatory fields.\n   * @private\n   */\n\n  PdfTilingBrush.prototype.setObligatoryFields = function () {\n    this.brushStream.items.setValue(this.mDictionaryProperties.patternType, new PdfNumber(1)); //  Tiling brush.\n\n    this.brushStream.items.setValue(this.mDictionaryProperties.paintType, new PdfNumber(1)); //  Coloured.\n\n    this.brushStream.items.setValue(this.mDictionaryProperties.tilingType, new PdfNumber(1)); //  Constant spacing.\n\n    this.brushStream.items.setValue(this.mDictionaryProperties.xStep, new PdfNumber(this.mBox.right - this.mBox.left));\n    this.brushStream.items.setValue(this.mDictionaryProperties.yStep, new PdfNumber(this.mBox.bottom - this.mBox.top));\n\n    if (this.mPage != null && this.mLocation != null) {\n      if (this.mTransformationMatrix == null && typeof this.mTransformationMatrix === 'undefined') {\n        // Transform the tile origin to fit the location\n        var tileTransform = this.mPage.size.height % this.rectangle.size.height - this.mLocation.y;\n        /* tslint:disable-next-line:max-line-length */\n\n        this.brushStream.items.setValue(this.mDictionaryProperties.matrix, new PdfArray([1, 0, 0, 1, this.mLocation.x, tileTransform]));\n      } else {\n        var tileTransform = 0; // Transform the tile origin to fit the location\n\n        var elements = this.mTransformationMatrix.matrix.elements;\n\n        if (this.mPage.size.height > this.rectangle.size.height) {\n          tileTransform = this.mTransformationMatrix.matrix.offsetY - this.mPage.size.height % this.rectangle.size.height;\n        } else {\n          tileTransform = this.mPage.size.height % this.rectangle.size.height + this.mTransformationMatrix.matrix.offsetY;\n        }\n\n        this.brushStream.items.setValue(this.mDictionaryProperties.matrix, new PdfArray([elements[0], elements[1], elements[2], elements[3], elements[4], tileTransform]));\n      }\n    }\n  };\n  /**\n   * Sets the BBox coordinates.\n   * @private\n   */\n\n\n  PdfTilingBrush.prototype.setBox = function (box) {\n    this.mBox = box;\n    var rect = new RectangleF(this.mBox.left, this.mBox.top, this.mBox.right, this.mBox.bottom);\n    this.brushStream.items.setValue(this.mDictionaryProperties.bBox, PdfArray.fromRectangle(rect));\n  };\n\n  Object.defineProperty(PdfTilingBrush.prototype, \"rectangle\", {\n    //Properties\n\n    /**\n     * Gets the boundary box of the smallest brush cell.\n     * @public\n     */\n    get: function () {\n      return this.mBox;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTilingBrush.prototype, \"size\", {\n    /**\n     * Gets the size of the smallest brush cell.\n     * @public\n     */\n    get: function () {\n      return this.mBox.size;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTilingBrush.prototype, \"graphics\", {\n    /**\n     * Gets Graphics context of the brush.\n     */\n    get: function () {\n      if (this.mGraphics == null && typeof this.mGraphics === 'undefined') {\n        var gr = new GetResourceEventHandler(this);\n        var g = new PdfGraphics(this.size, gr, this.brushStream);\n        this.mGraphics = g;\n        this.mResources = this.getResources();\n        this.mGraphics.initializeCoordinates();\n      }\n\n      return this.mGraphics;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Gets the resources and modifies the template dictionary.\n   * @public\n   */\n\n  PdfTilingBrush.prototype.getResources = function () {\n    return this.mResources;\n  };\n\n  Object.defineProperty(PdfTilingBrush.prototype, \"stroking\", {\n    /**\n     * Gets or sets a value indicating whether this PdfTilingBrush\n     * is used for stroking operations.\n     */\n    get: function () {\n      return this.mStroking;\n    },\n    set: function (value) {\n      this.mStroking = value;\n    },\n    enumerable: true,\n    configurable: true\n  }); //PdfBrush methods\n\n  /**\n   * Creates a new copy of a brush.\n   * @public\n   */\n\n  PdfTilingBrush.prototype.clone = function () {\n    var brush = this.initialize(this.rectangle, this.mPage, this.location, this.mTransformationMatrix);\n\n    if (this.mTransformationMatrix != null && this.mTransformationMatrix.matrix != null) {\n      /* tslint:disable-next-line:max-line-length */\n      brush.brushStream.items.setValue(this.mDictionaryProperties.matrix, new PdfArray(this.mTransformationMatrix.matrix.elements));\n    }\n\n    brush.brushStream.data = this.tempBrushStream.data;\n    brush.mResources = new PdfResources(this.mResources);\n    brush.brushStream.items.setValue(this.mDictionaryProperties.resources, brush.mResources);\n    return brush;\n  };\n  /**\n   * Monitors the changes of the brush and modify PDF state respectfully.\n   * @param brush The brush\n   * @param streamWriter The stream writer\n   * @param getResources The get resources delegate.\n   * @param saveChanges if set to true the changes should be saved anyway.\n   * @param currentColorSpace The current color space.\n   */\n\n  /* tslint:disable-next-line:max-line-length */\n\n\n  PdfTilingBrush.prototype.monitorChanges = function (brush, streamWriter, getResources, saveChanges, currentColorSpace) {\n    var diff = false;\n\n    if (brush !== this) {\n      //  Set the Pattern colour space.\n      streamWriter.setColorSpace('Pattern', this.mStroking); //  Set the pattern for non-stroking operations.\n\n      var resources1 = getResources.getResources();\n      var name1 = resources1.getName(this);\n      streamWriter.setColourWithPattern(null, name1, this.mStroking);\n      diff = true;\n    } else if (brush instanceof PdfTilingBrush) {\n      //  Set the /Pattern colour space.\n      streamWriter.setColorSpace('Pattern', this.mStroking); //  Set the pattern for non-stroking operations.\n\n      var resources = getResources.getResources();\n      var name_1 = resources.getName(this);\n      streamWriter.setColourWithPattern(null, name_1, this.mStroking);\n      diff = true;\n    }\n\n    return diff;\n  };\n  /**\n   * Resets the changes, which were made by the brush.\n   * In other words resets the state to the initial one.\n   * @param streamWriter The stream writer.\n   */\n\n\n  PdfTilingBrush.prototype.resetChanges = function (streamWriter) {//  We shouldn't do anything to reset changes.\n    //  All changes will be reset automatically by setting a new colour space.\n  };\n\n  Object.defineProperty(PdfTilingBrush.prototype, \"element\", {\n    /* tslint:enable */\n    // IPdfWrapper Members\n\n    /**\n     * Gets the `element`.\n     * @public\n     */\n    get: function () {\n      return this.brushStream;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfTilingBrush;\n}(PdfBrush);\n\nexport { PdfTilingBrush };","map":null,"metadata":{},"sourceType":"module"}