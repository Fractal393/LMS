{"ast":null,"code":"import { SizeF } from './../../drawing/pdf-drawing';\nimport { PdfGraphicsUnit } from './../enum';\nimport { PdfUnitConverter } from './../unit-convertor';\n/**\n * `PdfImage` class represents the base class for images and provides functionality for the 'PdfBitmap' class.\n * @private\n */\n\nvar PdfImage =\n/** @class */\nfunction () {\n  function PdfImage() {}\n\n  Object.defineProperty(PdfImage.prototype, \"width\", {\n    /**\n     * Gets and Sets the `width` of an image.\n     * @private\n     */\n    get: function () {\n      return this.imageWidth;\n    },\n    set: function (value) {\n      this.imageWidth = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfImage.prototype, \"height\", {\n    /**\n     * Gets and Sets the `height` of an image.\n     * @private\n     */\n    get: function () {\n      return this.imageHeight;\n    },\n    set: function (value) {\n      this.imageHeight = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfImage.prototype, \"size\", {\n    /**\n     * Gets or sets the size of the image.\n     * @private\n     */\n    set: function (value) {\n      this.width = value.width;\n      this.height = value.height;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfImage.prototype, \"physicalDimension\", {\n    /**\n     * Gets the `physical dimension` of an image.\n     * @private\n     */\n    get: function () {\n      this.imagePhysicalDimension = this.getPointSize(this.width, this.height, this.horizontalResolution, this.verticalResolution);\n      return new SizeF(this.width, this.height);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfImage.prototype, \"element\", {\n    // /**\n    //  * Gets the `image stream as string`.\n    //  * @private\n    //  */\n    // public static fromString(string : string) : PdfImage {\n    //     let image : PdfImage = new PdfBitmap(string);\n    //     return image;\n    // }\n\n    /**\n     * Gets the `element` image stream.\n     * @private\n     */\n    get: function () {\n      return this.imageStream;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PdfImage.prototype.getPointSize = function (width, height, horizontalResolution, verticalResolution) {\n    if (typeof horizontalResolution === 'undefined') {\n      var dpiX = PdfUnitConverter.horizontalResolution;\n      var dpiY = PdfUnitConverter.verticalResolution;\n      var size = this.getPointSize(width, height, dpiX, dpiY);\n      return size;\n    } else {\n      var ucX = new PdfUnitConverter(horizontalResolution);\n      var ucY = new PdfUnitConverter(verticalResolution);\n      var ptWidth = ucX.convertUnits(width, PdfGraphicsUnit.Pixel, PdfGraphicsUnit.Point);\n      var ptHeight = ucY.convertUnits(height, PdfGraphicsUnit.Pixel, PdfGraphicsUnit.Point);\n      var size = new SizeF(ptWidth, ptHeight);\n      return size;\n    }\n  };\n\n  return PdfImage;\n}();\n\nexport { PdfImage };","map":null,"metadata":{},"sourceType":"module"}