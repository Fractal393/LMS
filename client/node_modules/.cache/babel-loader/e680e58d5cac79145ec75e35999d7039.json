{"ast":null,"code":"/**\r\n * DevExtreme (ui/list/ui.list.edit.decorator.switchable.slide.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\");\n\nvar eventsEngine = require(\"../../events/core/events_engine\");\n\nvar noop = require(\"../../core/utils/common\").noop;\n\nvar clickEvent = require(\"../../events/click\");\n\nvar messageLocalization = require(\"../../localization/message\");\n\nvar translator = require(\"../../animation/translator\");\n\nvar eventUtils = require(\"../../events/utils\");\n\nvar feedbackEvents = require(\"../../events/core/emitter.feedback\");\n\nvar EditDecoratorMenuHelperMixin = require(\"./ui.list.edit.decorator_menu_helper\");\n\nvar registerDecorator = require(\"./ui.list.edit.decorator_registry\").register;\n\nvar SwitchableEditDecorator = require(\"./ui.list.edit.decorator.switchable\");\n\nvar fx = require(\"../../animation/fx\");\n\nvar themes = require(\"../themes\");\n\nvar ActionSheet = require(\"../action_sheet\");\n\nvar LIST_EDIT_DECORATOR = \"dxListEditDecorator\";\nvar CLICK_EVENT_NAME = eventUtils.addNamespace(clickEvent.name, LIST_EDIT_DECORATOR);\nvar ACTIVE_EVENT_NAME = eventUtils.addNamespace(feedbackEvents.active, LIST_EDIT_DECORATOR);\nvar SLIDE_MENU_CLASS = \"dx-list-slide-menu\";\nvar SLIDE_MENU_WRAPPER_CLASS = \"dx-list-slide-menu-wrapper\";\nvar SLIDE_MENU_CONTENT_CLASS = \"dx-list-slide-menu-content\";\nvar SLIDE_MENU_BUTTONS_CONTAINER_CLASS = \"dx-list-slide-menu-buttons-container\";\nvar SLIDE_MENU_BUTTONS_CLASS = \"dx-list-slide-menu-buttons\";\nvar SLIDE_MENU_BUTTON_CLASS = \"dx-list-slide-menu-button\";\nvar SLIDE_MENU_BUTTON_MENU_CLASS = \"dx-list-slide-menu-button-menu\";\nvar SLIDE_MENU_BUTTON_DELETE_CLASS = \"dx-list-slide-menu-button-delete\";\nvar SLIDE_MENU_ANIMATION_DURATION = 400;\nvar SLIDE_MENU_ANIMATION_EASING = \"cubic-bezier(0.075, 0.82, 0.165, 1)\";\nregisterDecorator(\"menu\", \"slide\", SwitchableEditDecorator.inherit({\n  _shouldHandleSwipe: true,\n  _init: function () {\n    this.callBase.apply(this, arguments);\n    this._$buttonsContainer = $(\"<div>\").addClass(SLIDE_MENU_BUTTONS_CONTAINER_CLASS);\n    eventsEngine.on(this._$buttonsContainer, ACTIVE_EVENT_NAME, noop);\n    this._$buttons = $(\"<div>\").addClass(SLIDE_MENU_BUTTONS_CLASS).appendTo(this._$buttonsContainer);\n\n    this._renderMenu();\n\n    this._renderDeleteButton();\n  },\n  _renderMenu: function () {\n    if (!this._menuEnabled()) {\n      return;\n    }\n\n    var menuItems = this._menuItems();\n\n    if (1 === menuItems.length) {\n      var menuItem = menuItems[0];\n\n      this._renderMenuButton(menuItem.text, function (e) {\n        e.stopPropagation();\n\n        this._fireAction(menuItem);\n      }.bind(this));\n    } else {\n      var $menu = $(\"<div>\").addClass(SLIDE_MENU_CLASS);\n      this._menu = this._list._createComponent($menu, ActionSheet, {\n        showTitle: false,\n        items: menuItems,\n        onItemClick: function (args) {\n          this._fireAction(args.itemData);\n        }.bind(this),\n        integrationOptions: {}\n      });\n      $menu.appendTo(this._list.$element());\n\n      var $menuButton = this._renderMenuButton(messageLocalization.format(\"dxListEditDecorator-more\"), function (e) {\n        e.stopPropagation();\n\n        this._menu.show();\n      }.bind(this));\n\n      this._menu.option(\"target\", $menuButton);\n    }\n  },\n  _renderMenuButton: function (text, action) {\n    var $menuButton = $(\"<div>\").addClass(SLIDE_MENU_BUTTON_CLASS).addClass(SLIDE_MENU_BUTTON_MENU_CLASS).text(text);\n\n    this._$buttons.append($menuButton);\n\n    eventsEngine.on($menuButton, CLICK_EVENT_NAME, action);\n    return $menuButton;\n  },\n  _renderDeleteButton: function () {\n    if (!this._deleteEnabled()) {\n      return;\n    }\n\n    var $deleteButton = $(\"<div>\").addClass(SLIDE_MENU_BUTTON_CLASS).addClass(SLIDE_MENU_BUTTON_DELETE_CLASS).text(themes.isMaterial() ? \"\" : messageLocalization.format(\"dxListEditDecorator-delete\"));\n    eventsEngine.on($deleteButton, CLICK_EVENT_NAME, function (e) {\n      e.stopPropagation();\n\n      this._deleteItem();\n    }.bind(this));\n\n    this._$buttons.append($deleteButton);\n  },\n  _fireAction: function (menuItem) {\n    this._fireMenuAction($(this._cachedNode), menuItem.action);\n\n    this._cancelDeleteReadyItem();\n  },\n  modifyElement: function (config) {\n    this.callBase.apply(this, arguments);\n    var $itemElement = config.$itemElement;\n    $itemElement.addClass(SLIDE_MENU_WRAPPER_CLASS);\n    var $slideMenuContent = $(\"<div>\").addClass(SLIDE_MENU_CONTENT_CLASS);\n    $itemElement.wrapInner($slideMenuContent);\n  },\n  _getDeleteButtonContainer: function () {\n    return this._$buttonsContainer;\n  },\n  handleClick: function (_, e) {\n    if ($(e.target).closest(\".\" + SLIDE_MENU_CONTENT_CLASS).length) {\n      return this.callBase.apply(this, arguments);\n    }\n\n    return false;\n  },\n  _swipeStartHandler: function ($itemElement) {\n    this._enablePositioning($itemElement);\n\n    this._cacheItemData($itemElement);\n\n    this._setPositions(this._getPositions(0));\n  },\n  _swipeUpdateHandler: function ($itemElement, args) {\n    var rtl = this._isRtlEnabled();\n\n    var signCorrection = rtl ? -1 : 1;\n\n    var isItemReadyToDelete = this._isReadyToDelete($itemElement);\n\n    var moveJustStarted = this._getCurrentPositions().content === this._getStartPositions().content;\n\n    if (moveJustStarted && !isItemReadyToDelete && args.offset * signCorrection > 0) {\n      args.cancel = true;\n      return;\n    }\n\n    var offset = this._cachedItemWidth * args.offset;\n    var startOffset = isItemReadyToDelete ? -this._cachedButtonWidth * signCorrection : 0;\n    var correctedOffset = (offset + startOffset) * signCorrection;\n    var percent = correctedOffset < 0 ? Math.abs((offset + startOffset) / this._cachedButtonWidth) : 0;\n\n    this._setPositions(this._getPositions(percent));\n\n    return true;\n  },\n  _getStartPositions: function () {\n    var rtl = this._isRtlEnabled();\n\n    var signCorrection = rtl ? -1 : 1;\n    return {\n      content: 0,\n      buttonsContainer: rtl ? -this._cachedButtonWidth : this._cachedItemWidth,\n      buttons: -this._cachedButtonWidth * signCorrection\n    };\n  },\n  _getPositions: function (percent) {\n    var rtl = this._isRtlEnabled();\n\n    var signCorrection = rtl ? -1 : 1;\n\n    var startPositions = this._getStartPositions();\n\n    return {\n      content: startPositions.content - percent * this._cachedButtonWidth * signCorrection,\n      buttonsContainer: startPositions.buttonsContainer - Math.min(percent, 1) * this._cachedButtonWidth * signCorrection,\n      buttons: startPositions.buttons + Math.min(percent, 1) * this._cachedButtonWidth * signCorrection\n    };\n  },\n  _getCurrentPositions: function () {\n    return {\n      content: translator.locate(this._$cachedContent).left,\n      buttonsContainer: translator.locate(this._$buttonsContainer).left,\n      buttons: translator.locate(this._$buttons).left\n    };\n  },\n  _setPositions: function (positions) {\n    translator.move(this._$cachedContent, {\n      left: positions.content\n    });\n    translator.move(this._$buttonsContainer, {\n      left: positions.buttonsContainer\n    });\n    translator.move(this._$buttons, {\n      left: positions.buttons\n    });\n  },\n  _cacheItemData: function ($itemElement) {\n    if ($itemElement[0] === this._cachedNode) {\n      return;\n    }\n\n    this._$cachedContent = $itemElement.find(\".\" + SLIDE_MENU_CONTENT_CLASS);\n    this._cachedItemWidth = $itemElement.outerWidth();\n    this._cachedButtonWidth = this._cachedButtonWidth || this._$buttons.outerWidth();\n\n    this._$buttonsContainer.width(this._cachedButtonWidth);\n\n    if (this._$cachedContent.length) {\n      this._cachedNode = $itemElement[0];\n    }\n  },\n  _minButtonContainerLeftOffset: function () {\n    return this._cachedItemWidth - this._cachedButtonWidth;\n  },\n  _swipeEndHandler: function ($itemElement, args) {\n    this._cacheItemData($itemElement);\n\n    var signCorrection = this._isRtlEnabled() ? 1 : -1;\n    var offset = this._cachedItemWidth * args.offset;\n    var endedAtReadyToDelete = !this._isReadyToDelete($itemElement) && offset * signCorrection > .2 * this._cachedButtonWidth;\n    var readyToDelete = args.targetOffset === signCorrection && endedAtReadyToDelete;\n\n    this._toggleDeleteReady($itemElement, readyToDelete);\n\n    return true;\n  },\n  _enablePositioning: function ($itemElement) {\n    fx.stop(this._$cachedContent, true);\n    this.callBase.apply(this, arguments);\n\n    this._$buttonsContainer.appendTo($itemElement);\n  },\n  _disablePositioning: function () {\n    this.callBase.apply(this, arguments);\n\n    this._$buttonsContainer.detach();\n  },\n  _animatePrepareDeleteReady: function () {\n    return this._animateToPositions(this._getPositions(1));\n  },\n  _animateForgetDeleteReady: function ($itemElement) {\n    this._cacheItemData($itemElement);\n\n    return this._animateToPositions(this._getPositions(0));\n  },\n  _animateToPositions: function (positions) {\n    var that = this;\n\n    var currentPosition = this._getCurrentPositions();\n\n    var durationTimePart = Math.min(Math.abs(currentPosition.content - positions.content) / this._cachedButtonWidth, 1);\n    return fx.animate(this._$cachedContent, {\n      from: currentPosition,\n      to: positions,\n      easing: SLIDE_MENU_ANIMATION_EASING,\n      duration: SLIDE_MENU_ANIMATION_DURATION * durationTimePart,\n      strategy: \"frame\",\n      draw: function (positions) {\n        that._setPositions(positions);\n      }\n    });\n  },\n  dispose: function () {\n    if (this._menu) {\n      this._menu.$element().remove();\n    }\n\n    if (this._$buttonsContainer) {\n      this._$buttonsContainer.remove();\n    }\n\n    this.callBase.apply(this, arguments);\n  }\n}).include(EditDecoratorMenuHelperMixin));","map":null,"metadata":{},"sourceType":"script"}