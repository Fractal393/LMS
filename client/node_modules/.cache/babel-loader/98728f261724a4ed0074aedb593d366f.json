{"ast":null,"code":"/**\r\n * DevExtreme (ui/file_manager/ui.file_manager.dialog.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _message = require(\"../../localization/message\");\n\nvar _message2 = _interopRequireDefault(_message);\n\nvar _ui = require(\"../widget/ui.widget\");\n\nvar _ui2 = _interopRequireDefault(_ui);\n\nvar _popup = require(\"../popup\");\n\nvar _popup2 = _interopRequireDefault(_popup);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nfunction _get(target, property, receiver) {\n  if (\"undefined\" !== typeof Reflect && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function (target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) {\n        return;\n      }\n\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n\n    if (null === object) {\n      break;\n    }\n  }\n\n  return object;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (\"function\" !== typeof superClass && null !== superClass) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (superClass) {\n    _setPrototypeOf(subClass, superClass);\n  }\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function (o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var result,\n        Super = _getPrototypeOf(Derived);\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (\"object\" === _typeof(call) || \"function\" === typeof call)) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (void 0 === self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (\"undefined\" === typeof Reflect || !Reflect.construct) {\n    return false;\n  }\n\n  if (Reflect.construct.sham) {\n    return false;\n  }\n\n  if (\"function\" === typeof Proxy) {\n    return true;\n  }\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function (o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar FILE_MANAGER_DIALOG_CONTENT = \"dx-filemanager-dialog\";\nvar FILE_MANAGER_DIALOG_POPUP = \"dx-filemanager-dialog-popup\";\n\nvar FileManagerDialogBase = function (_Widget) {\n  _inherits(FileManagerDialogBase, _Widget);\n\n  var _super = _createSuper(FileManagerDialogBase);\n\n  function FileManagerDialogBase() {\n    _classCallCheck(this, FileManagerDialogBase);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FileManagerDialogBase, [{\n    key: \"_initMarkup\",\n    value: function () {\n      var _this = this;\n\n      _get(_getPrototypeOf(FileManagerDialogBase.prototype), \"_initMarkup\", this).call(this);\n\n      this._createOnClosedAction();\n\n      var options = this._getDialogOptions();\n\n      var $popup = (0, _renderer2.default)(\"<div>\").addClass(FILE_MANAGER_DIALOG_POPUP).appendTo(this.$element());\n\n      if (options.popupCssClass) {\n        $popup.addClass(options.popupCssClass);\n      }\n\n      this._popup = this._createComponent($popup, _popup2.default, {\n        showTitle: true,\n        title: options.title,\n        visible: false,\n        closeOnOutsideClick: true,\n        contentTemplate: this._createContentTemplate.bind(this),\n        toolbarItems: [{\n          widget: \"dxButton\",\n          toolbar: \"bottom\",\n          location: \"after\",\n          options: {\n            text: options.buttonText,\n            onClick: this._applyDialogChanges.bind(this)\n          }\n        }, {\n          widget: \"dxButton\",\n          toolbar: \"bottom\",\n          location: \"after\",\n          options: {\n            text: _message2.default.format(\"dxFileManager-dialogButtonCancel\"),\n            onClick: this._closeDialog.bind(this)\n          }\n        }],\n        onInitialized: function (_ref) {\n          var component = _ref.component;\n          component.registerKeyHandler(\"enter\", _this._applyDialogChanges.bind(_this));\n        },\n        onHidden: this._onPopupHidden.bind(this),\n        onShown: this._onPopupShown.bind(this)\n      });\n    }\n  }, {\n    key: \"show\",\n    value: function () {\n      this._dialogResult = null;\n\n      this._popup.show();\n    }\n  }, {\n    key: \"_getDialogOptions\",\n    value: function () {\n      return {\n        title: \"Title\",\n        buttonText: \"ButtonText\",\n        contentCssClass: \"\",\n        popupCssClass: \"\"\n      };\n    }\n  }, {\n    key: \"_createContentTemplate\",\n    value: function (element) {\n      this._$contentElement = (0, _renderer2.default)(\"<div>\").appendTo(element).addClass(FILE_MANAGER_DIALOG_CONTENT);\n\n      var cssClass = this._getDialogOptions().contentCssClass;\n\n      if (cssClass) {\n        this._$contentElement.addClass(cssClass);\n      }\n    }\n  }, {\n    key: \"_getDialogResult\",\n    value: function () {\n      return null;\n    }\n  }, {\n    key: \"_applyDialogChanges\",\n    value: function () {\n      var result = this._getDialogResult();\n\n      if (result) {\n        this._dialogResult = result;\n\n        this._popup.hide();\n      }\n    }\n  }, {\n    key: \"_closeDialog\",\n    value: function () {\n      this._popup.hide();\n    }\n  }, {\n    key: \"_onPopupHidden\",\n    value: function () {\n      this._onClosedAction({\n        dialogResult: this._dialogResult\n      });\n    }\n  }, {\n    key: \"_onPopupShown\",\n    value: function () {}\n  }, {\n    key: \"_createOnClosedAction\",\n    value: function () {\n      this._onClosedAction = this._createActionByOption(\"onClosed\");\n    }\n  }, {\n    key: \"_setTitle\",\n    value: function (newTitle) {\n      this._popup.option(\"title\", newTitle);\n    }\n  }, {\n    key: \"_setButtonText\",\n    value: function (newText) {\n      this._popup.option(\"toolbarItems[0].options.text\", newText);\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function () {\n      return (0, _extend.extend)(_get(_getPrototypeOf(FileManagerDialogBase.prototype), \"_getDefaultOptions\", this).call(this), {\n        onClosed: null\n      });\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function (args) {\n      var name = args.name;\n\n      switch (name) {\n        case \"onClosed\":\n          this._createOnPathChangedAction();\n\n          break;\n\n        default:\n          _get(_getPrototypeOf(FileManagerDialogBase.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }]);\n\n  return FileManagerDialogBase;\n}(_ui2.default);\n\nmodule.exports = FileManagerDialogBase;","map":null,"metadata":{},"sourceType":"script"}