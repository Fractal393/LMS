{"ast":null,"code":"import { PdfNumber } from './pdf-number';\nimport { Operators } from './../input-output/pdf-operators';\n/**\n * `PdfArray` class is used to perform array related primitive operations.\n * @private\n */\n\nvar PdfArray =\n/** @class */\nfunction () {\n  function PdfArray(array) {\n    //Fields\n\n    /**\n     * `startMark` - '['\n     * @private\n     */\n    this.startMark = '[';\n    /**\n     * `endMark` - ']'.\n     * @private\n     */\n\n    this.endMark = ']';\n    /**\n     * Internal variable to store the `position`.\n     * @default -1\n     * @private\n     */\n\n    this.position9 = -1;\n    /**\n     * Internal variable to hold `cloned object`.\n     * @default null\n     * @private\n     */\n\n    this.clonedObject9 = null;\n    /**\n     * Represents the Font dictionary.\n     * @hidden\n     * @private\n     */\n\n    this.isFont = false;\n\n    if (typeof array === 'undefined') {\n      this.internalElements = [];\n    } else {\n      if (typeof array !== 'undefined' && !(array instanceof PdfArray)) {\n        var tempNumberArray = array;\n\n        for (var index = 0; index < tempNumberArray.length; index++) {\n          var pdfNumber = new PdfNumber(tempNumberArray[index]);\n          this.add(pdfNumber);\n        } // } else if (typeof array !== 'undefined' && (array instanceof PdfArray)) {\n\n      } else {\n        var tempArray = array; // if (tempArray.Elements.length > 0) {\n\n        this.internalElements = [];\n\n        for (var index = 0; index < tempArray.elements.length; index++) {\n          this.internalElements.push(tempArray.elements[index]);\n        } // }\n\n      }\n    }\n  } //property\n\n  /**\n   * Gets the `IPdfSavable` at the specified index.\n   * @private\n   */\n\n\n  PdfArray.prototype.items = function (index) {\n    // if (index < 0 || index >= this.Count) {\n    //     throw new Error('ArgumentOutOfRangeException : index, The index can\"t be less then zero or greater then Count.');\n    // }\n    return this.internalElements[index];\n  };\n\n  Object.defineProperty(PdfArray.prototype, \"count\", {\n    /**\n     * Gets the `count`.\n     * @private\n     */\n    get: function () {\n      return this.internalElements.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfArray.prototype, \"status\", {\n    /**\n     * Gets or sets the `Status` of the specified object.\n     * @private\n     */\n    get: function () {\n      return this.status9;\n    },\n    set: function (value) {\n      this.status9 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfArray.prototype, \"isSaving\", {\n    /**\n     * Gets or sets a value indicating whether this document `is saving` or not.\n     * @private\n     */\n    get: function () {\n      return this.isSaving9;\n    },\n    set: function (value) {\n      this.isSaving9 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfArray.prototype, \"clonedObject\", {\n    /**\n     * Returns `cloned object`.\n     * @private\n     */\n    get: function () {\n      return this.clonedObject9;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfArray.prototype, \"position\", {\n    /**\n     * Gets or sets the `position` of the object.\n     * @private\n     */\n    get: function () {\n      return this.position9;\n    },\n    set: function (value) {\n      this.position9 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfArray.prototype, \"objectCollectionIndex\", {\n    /**\n     * Gets or sets the `index` value of the specified object.\n     * @private\n     */\n    get: function () {\n      return this.index9;\n    },\n    set: function (value) {\n      this.index9 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfArray.prototype, \"CrossTable\", {\n    /**\n     * Returns `PdfCrossTable` associated with the object.\n     * @private\n     */\n    get: function () {\n      return this.pdfCrossTable;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfArray.prototype, \"elements\", {\n    /**\n     * Gets the `elements` of the Pdf Array.\n     * @private\n     */\n    get: function () {\n      return this.internalElements;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * `Adds` the specified element to the PDF array.\n   * @private\n   */\n\n  PdfArray.prototype.add = function (element) {\n    // if (element === null) {\n    //     throw new Error('ArgumentNullException : obj');\n    // }\n    if (typeof this.internalElements === 'undefined') {\n      this.internalElements = [];\n    }\n\n    this.internalElements.push(element);\n    this.markedChange();\n  };\n  /**\n   * `Marks` the object changed.\n   * @private\n   */\n\n\n  PdfArray.prototype.markedChange = function () {\n    this.bChanged = true;\n  };\n  /**\n   * `Determines` whether the specified element is within the array.\n   * @private\n   */\n\n\n  PdfArray.prototype.contains = function (element) {\n    var returnValue = false;\n\n    for (var index = 0; index < this.internalElements.length; index++) {\n      var tempElement = this.internalElements[index];\n      var inputElement = element;\n\n      if (tempElement != null && typeof tempElement !== 'undefined' && inputElement != null && typeof inputElement !== 'undefined') {\n        if (tempElement.value === inputElement.value) {\n          return true;\n        }\n      } // if (this.internalElements[index] === element) {\n      //     returnValue = true;\n      // }\n\n    }\n\n    return returnValue;\n  };\n  /**\n   * Returns the `primitive object` of input index.\n   * @private\n   */\n\n\n  PdfArray.prototype.getItems = function (index) {\n    // if (index < 0 || index >= this.Count) {\n    //     throw new Error('ArgumentOutOfRangeException : index , The index can\"t be less then zero or greater then Count.');\n    // }\n    return this.internalElements[index];\n  };\n  /**\n   * `Saves` the object using the specified writer.\n   * @private\n   */\n\n\n  PdfArray.prototype.save = function (writer) {\n    // if (writer === null) {\n    //     throw new Error('ArgumentNullException : writer');\n    // }\n    writer.write(this.startMark);\n\n    for (var i = 0, len = this.count; i < len; i++) {\n      this.getItems(i).save(writer);\n\n      if (i + 1 !== len) {\n        writer.write(Operators.whiteSpace);\n      }\n    }\n\n    writer.write(this.endMark);\n  };\n  /**\n   * Creates a `copy of PdfArray`.\n   * @private\n   */\n\n\n  PdfArray.prototype.clone = function (crossTable) {\n    // if (this.clonedObject9 !== null && this.clonedObject9.CrossTable === crossTable) {\n    //     return this.clonedObject9;\n    // } else {\n    this.clonedObject9 = null; // Else clone the object.\n\n    var newArray = new PdfArray();\n\n    for (var index = 0; index < this.internalElements.length; index++) {\n      var obj = this.internalElements[index];\n      newArray.add(obj.clone(crossTable));\n    }\n\n    newArray.pdfCrossTable = crossTable;\n    this.clonedObject9 = newArray;\n    return newArray;\n  };\n  /**\n   * Creates filled PDF array `from the rectangle`.\n   * @private\n   */\n\n\n  PdfArray.fromRectangle = function (bounds) {\n    var values = [bounds.x, bounds.y, bounds.width, bounds.height];\n    var array = new PdfArray(values);\n    return array;\n  }; // /**\n  //  * Creates the rectangle from filled PDF array.\n  //  * @private\n  //  */\n  // public ToRectangle() : RectangleF {\n  //     if (this.Count < 4) {\n  //         throw Error('InvalidOperationException-Can not convert to rectangle.');\n  //     }\n  //     let x1 : number;\n  //     let x2 : number;\n  //     let y1 : number;\n  //     let y2 : number;\n  //     let num : PdfNumber = this.getItems(0) as PdfNumber;\n  //     x1 = num.IntValue;\n  //     num = this.getItems(1) as PdfNumber;\n  //     y1 = num.IntValue;\n  //     num = this.getItems(2) as PdfNumber;\n  //     x2 = num.IntValue;\n  //     num = this.getItems(3) as PdfNumber;\n  //     y2 = num.IntValue;\n  //     let x : number = Math.min(x1, x2);\n  //     let y : number = Math.min(y1, y2);\n  //     let width : number = Math.abs(x1 - x2);\n  //     let height : number = Math.abs(y1 - y2);\n  //     let rect : RectangleF = new RectangleF(new PointF(x, y), new SizeF(width, height));\n  //     return rect;\n  // }\n\n  /**\n   * `Inserts` the element into the array.\n   * @private\n   */\n\n\n  PdfArray.prototype.insert = function (index, element) {\n    if (index < this.internalElements.length && index > 0) {\n      var tempElements = [];\n\n      for (var i = 0; i < index; i++) {\n        tempElements.push(this.internalElements[i]);\n      }\n\n      tempElements.push(element);\n\n      for (var i = index; i < this.internalElements.length; i++) {\n        tempElements.push(this.internalElements[i]);\n      }\n\n      this.internalElements = tempElements;\n    } else {\n      this.internalElements.push(element);\n    }\n\n    this.markChanged();\n  };\n  /**\n   * `Checks whether array contains the element`.\n   * @private\n   */\n\n\n  PdfArray.prototype.indexOf = function (element) {\n    return this.internalElements.indexOf(element);\n  };\n  /**\n   * `Removes` element from the array.\n   * @private\n   */\n\n\n  PdfArray.prototype.remove = function (element) {\n    // if (element === null) {\n    //     throw new Error('ArgumentNullException : element');\n    // }\n    var index = this.internalElements.indexOf(element); // if (index >= 0 && index < this.internalElements.length) {\n\n    this.internalElements[index] = null; // }\n\n    this.markChanged();\n  };\n  /**\n   * `Remove` the element from the array by its index.\n   * @private\n   */\n\n\n  PdfArray.prototype.removeAt = function (index) {\n    // this.internalElements.RemoveAt(index);\n    if (this.internalElements.length > index) {\n      var tempArray = [];\n\n      for (var i = 0; i < index; i++) {\n        tempArray.push(this.internalElements[i]);\n      }\n\n      for (var i = index + 1; i < this.internalElements.length; i++) {\n        tempArray.push(this.internalElements[i]);\n      }\n\n      this.internalElements = tempArray;\n    }\n\n    this.markChanged();\n  };\n  /**\n   * `Clear` the array.\n   * @private\n   */\n\n\n  PdfArray.prototype.clear = function () {\n    this.internalElements = [];\n    this.markChanged();\n  };\n  /**\n   * `Marks` the object changed.\n   * @private\n   */\n\n\n  PdfArray.prototype.markChanged = function () {\n    this.bChanged = true;\n  };\n\n  return PdfArray;\n}();\n\nexport { PdfArray };","map":null,"metadata":{},"sourceType":"module"}