{"ast":null,"code":"import { extend, getValue } from '@syncfusion/ej2-base';\nimport { MultiSelect } from '@syncfusion/ej2-dropdowns';\nimport { getComplexFieldID } from '../base/util';\n/**\n * `MultiSelectEditCell` is used to handle multiselect dropdown cell type editing.\n * @hidden\n */\n\nvar MultiSelectEditCell =\n/** @class */\nfunction () {\n  function MultiSelectEditCell(parentObj) {\n    //constructor\n    this.parent = parentObj;\n  }\n\n  MultiSelectEditCell.prototype.create = function (args) {\n    //create\n    var colName = getComplexFieldID(args.column.field);\n    return this.parent.createElement('input', {\n      className: 'e-field',\n      attrs: {\n        id: this.parent.element.id + colName,\n        name: colName,\n        type: 'text',\n        'e-mappinguid': args.column.uid\n      }\n    });\n  };\n\n  MultiSelectEditCell.prototype.read = function (element) {\n    return element.ej2_instances[0].value;\n  };\n\n  MultiSelectEditCell.prototype.write = function (args) {\n    this.column = args.column;\n    var isInline = this.parent.editSettings.mode !== 'Dialog';\n    this.obj = new MultiSelect(extend({\n      fields: {\n        text: args.column.field,\n        value: args.column.field\n      },\n      value: getValue(args.column.field, args.rowData),\n      enableRtl: this.parent.enableRtl,\n      placeholder: isInline ? '' : args.column.headerText,\n      popupHeight: '200px',\n      floatLabelType: isInline ? 'Never' : 'Always'\n    }, args.column.edit.params));\n    this.obj.appendTo(args.element);\n    args.element.setAttribute('name', getComplexFieldID(args.column.field));\n  };\n\n  MultiSelectEditCell.prototype.destroy = function () {\n    if (this.obj) {\n      this.obj.destroy();\n    }\n  };\n\n  return MultiSelectEditCell;\n}();\n\nexport { MultiSelectEditCell };","map":null,"metadata":{},"sourceType":"module"}