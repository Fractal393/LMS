{"ast":null,"code":"// >>> INTERFACES <<<\n// >>> HELPERS <<<\nvar castComparer = function (comparer) {\n  return function (a, b, order) {\n    return comparer(a, b, order) * order;\n  };\n};\n\nvar throwInvalidConfigErrorIfTrue = function (condition, context) {\n  if (condition) throw Error(\"Invalid sort config: \" + context);\n};\n\nvar unpackObjectSorter = function (sortByObj) {\n  var _a = sortByObj || {},\n      asc = _a.asc,\n      desc = _a.desc;\n\n  var order = asc ? 1 : -1;\n  var sortBy = asc || desc; // Validate object config\n\n  throwInvalidConfigErrorIfTrue(!sortBy, 'Expected `asc` or `desc` property');\n  throwInvalidConfigErrorIfTrue(asc && desc, 'Ambiguous object with `asc` and `desc` config properties');\n  var comparer = sortByObj.comparer && castComparer(sortByObj.comparer);\n  return {\n    order: order,\n    sortBy: sortBy,\n    comparer: comparer\n  };\n}; // >>> SORTERS <<<\n\n\nvar multiPropertySorterProvider = function (defaultComparer) {\n  return function multiPropertySorter(sortBy, sortByArr, depth, order, comparer, a, b) {\n    var valA;\n    var valB;\n\n    if (typeof sortBy === 'string') {\n      valA = a[sortBy];\n      valB = b[sortBy];\n    } else if (typeof sortBy === 'function') {\n      valA = sortBy(a);\n      valB = sortBy(b);\n    } else {\n      var objectSorterConfig = unpackObjectSorter(sortBy);\n      return multiPropertySorter(objectSorterConfig.sortBy, sortByArr, depth, objectSorterConfig.order, objectSorterConfig.comparer || defaultComparer, a, b);\n    }\n\n    var equality = comparer(valA, valB, order);\n\n    if ((equality === 0 || valA == null && valB == null) && sortByArr.length > depth) {\n      return multiPropertySorter(sortByArr[depth], sortByArr, depth + 1, order, comparer, a, b);\n    }\n\n    return equality;\n  };\n};\n\nfunction getSortStrategy(sortBy, comparer, order) {\n  // Flat array sorter\n  if (sortBy === undefined || sortBy === true) {\n    return function (a, b) {\n      return comparer(a, b, order);\n    };\n  } // Sort list of objects by single object key\n\n\n  if (typeof sortBy === 'string') {\n    throwInvalidConfigErrorIfTrue(sortBy.includes('.'), 'String syntax not allowed for nested properties.');\n    return function (a, b) {\n      return comparer(a[sortBy], b[sortBy], order);\n    };\n  } // Sort list of objects by single function sorter\n\n\n  if (typeof sortBy === 'function') {\n    return function (a, b) {\n      return comparer(sortBy(a), sortBy(b), order);\n    };\n  } // Sort by multiple properties\n\n\n  if (Array.isArray(sortBy)) {\n    var multiPropSorter_1 = multiPropertySorterProvider(comparer);\n    return function (a, b) {\n      return multiPropSorter_1(sortBy[0], sortBy, 1, order, comparer, a, b);\n    };\n  } // Unpack object config to get actual sorter strategy\n\n\n  var objectSorterConfig = unpackObjectSorter(sortBy);\n  return getSortStrategy(objectSorterConfig.sortBy, objectSorterConfig.comparer || comparer, objectSorterConfig.order);\n}\n\nvar sort = function (order, ctx, sortBy, comparer) {\n  var _a;\n\n  if (!Array.isArray(ctx)) {\n    return ctx;\n  } // Unwrap sortBy if array with only 1 value to get faster sort strategy\n\n\n  if (Array.isArray(sortBy) && sortBy.length < 2) {\n    _a = sortBy, sortBy = _a[0];\n  }\n\n  return ctx.sort(getSortStrategy(sortBy, comparer, order));\n}; // >>> Public <<<\n\n\nfunction createSortInstance(opts) {\n  var comparer = castComparer(opts.comparer);\n  return function (ctx) {\n    return {\n      /**\r\n       * Sort array in ascending order. Mutates provided array by sorting it.\r\n       * @example\r\n       * sort([3, 1, 4]).asc();\r\n       * sort(users).asc(u => u.firstName);\r\n       * sort(users).asc([\r\n       *   U => u.firstName\r\n       *   u => u.lastName,\r\n       * ]);\r\n       */\n      asc: function (sortBy) {\n        return sort(1, ctx, sortBy, comparer);\n      },\n\n      /**\r\n       * Sort array in descending order. Mutates provided array by sorting it.\r\n       * @example\r\n       * sort([3, 1, 4]).desc();\r\n       * sort(users).desc(u => u.firstName);\r\n       * sort(users).desc([\r\n       *   U => u.firstName\r\n       *   u => u.lastName,\r\n       * ]);\r\n       */\n      desc: function (sortBy) {\n        return sort(-1, ctx, sortBy, comparer);\n      },\n\n      /**\r\n       * Sort array in ascending or descending order. It allows sorting on multiple props\r\n       * in different order for each of them. Mutates provided array by sorting it.\r\n       * @example\r\n       * sort(users).by([\r\n       *  { asc: u => u.score }\r\n       *  { desc: u => u.age }\r\n       * ]);\r\n       */\n      by: function (sortBy) {\n        return sort(1, ctx, sortBy, comparer);\n      }\n    };\n  };\n}\n\nvar defaultSort = createSortInstance({\n  comparer: function (a, b, order) {\n    if (a == null) return order;\n    if (b == null) return -order;\n    if (a < b) return -1;\n    if (a === b) return 0;\n    return 1;\n  }\n}); // Attach createNewInstance to sort function\n\ndefaultSort['createNewInstance'] = createSortInstance;\nexport default defaultSort;","map":null,"metadata":{},"sourceType":"module"}