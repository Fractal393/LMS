{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * Worksheet class\n * @private\n */\n\n\nvar Worksheet =\n/** @class */\nfunction () {\n  function Worksheet() {\n    this.isSummaryRowBelow = true;\n    this.showGridLines = true;\n  }\n\n  return Worksheet;\n}();\n\nexport { Worksheet };\n/**\n * Hyperlink class\n * @private\n */\n\nvar HyperLink =\n/** @class */\nfunction () {\n  function HyperLink() {}\n\n  return HyperLink;\n}();\n\nexport { HyperLink };\n/**\n * Grouping class\n * @private\n */\n\nvar Grouping =\n/** @class */\nfunction () {\n  function Grouping() {}\n\n  return Grouping;\n}();\n\nexport { Grouping };\n/**\n * FreezePane class\n * @private\n */\n\nvar FreezePane =\n/** @class */\nfunction () {\n  function FreezePane() {}\n\n  return FreezePane;\n}();\n\nexport { FreezePane };\n/**\n * MergeCell\n * @private\n */\n\nvar MergeCell =\n/** @class */\nfunction () {\n  function MergeCell() {}\n\n  return MergeCell;\n}();\n\nexport { MergeCell };\n/**\n * MergeCells class\n * @private\n */\n\nvar MergeCells =\n/** @class */\nfunction (_super) {\n  __extends(MergeCells, _super);\n\n  function MergeCells() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.add = function (mergeCell) {\n      var inserted = false;\n      var count = 0;\n\n      for (var _i = 0, _a = _this; _i < _a.length; _i++) {\n        var mCell = _a[_i];\n\n        if (MergeCells.isIntersecting(mCell, mergeCell)) {\n          var intersectingCell = new MergeCell();\n          intersectingCell.x = Math.min(mCell.x, mergeCell.x);\n          intersectingCell.y = Math.min(mCell.Y, mergeCell.y);\n          intersectingCell.width = Math.max(mCell.Width + mCell.X, mergeCell.width + mergeCell.x);\n          intersectingCell.height = Math.max(mCell.Height + mCell.Y, mergeCell.height + mergeCell.y);\n          intersectingCell.ref = _this[count].ref.split(':')[0] + ':' + mergeCell.ref.split(':')[1];\n          _this[count] = intersectingCell;\n          mergeCell = intersectingCell;\n          inserted = true;\n        }\n\n        count++;\n      }\n\n      if (!inserted) {\n        _this.push(mergeCell);\n      }\n\n      return mergeCell;\n    };\n\n    return _this;\n  }\n\n  MergeCells.isIntersecting = function (base, compare) {\n    return base.x <= compare.x + compare.width && compare.x <= base.x + base.width && base.y <= compare.y + compare.height && compare.y <= base.y + base.height;\n  };\n\n  return MergeCells;\n}(Array);\n\nexport { MergeCells };","map":null,"metadata":{},"sourceType":"module"}