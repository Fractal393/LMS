{"ast":null,"code":"/**\r\n * DevExtreme (ui/file_manager/ui.file_manager.context_menu.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _ui = require(\"../widget/ui.widget\");\n\nvar _ui2 = _interopRequireDefault(_ui);\n\nvar _ui3 = require(\"../context_menu/ui.context_menu\");\n\nvar _ui4 = _interopRequireDefault(_ui3);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nfunction _get(target, property, receiver) {\n  if (\"undefined\" !== typeof Reflect && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function (target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) {\n        return;\n      }\n\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n\n    if (null === object) {\n      break;\n    }\n  }\n\n  return object;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (\"function\" !== typeof superClass && null !== superClass) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (superClass) {\n    _setPrototypeOf(subClass, superClass);\n  }\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function (o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var result,\n        Super = _getPrototypeOf(Derived);\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (\"object\" === _typeof(call) || \"function\" === typeof call)) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (void 0 === self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (\"undefined\" === typeof Reflect || !Reflect.construct) {\n    return false;\n  }\n\n  if (Reflect.construct.sham) {\n    return false;\n  }\n\n  if (\"function\" === typeof Proxy) {\n    return true;\n  }\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function (o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar FILEMANAGER_CONTEXT_MEMU_CLASS = \"dx-filemanager-context-menu\";\nvar DEFAULT_CONTEXT_MENU_ITEMS = {\n  create: {},\n  upload: {},\n  download: {},\n  rename: {},\n  move: {},\n  copy: {},\n  \"delete\": {},\n  refresh: {\n    beginGroup: true\n  }\n};\n\nvar FileManagerContextMenu = function (_Widget) {\n  _inherits(FileManagerContextMenu, _Widget);\n\n  var _super = _createSuper(FileManagerContextMenu);\n\n  function FileManagerContextMenu() {\n    _classCallCheck(this, FileManagerContextMenu);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FileManagerContextMenu, [{\n    key: \"_initMarkup\",\n    value: function () {\n      var _this = this;\n\n      this._initActions();\n\n      this._isVisible = false;\n      var $menu = (0, _renderer2.default)(\"<div>\").appendTo(this.$element());\n      this._contextMenu = this._createComponent($menu, _ui4.default, {\n        cssClass: FILEMANAGER_CONTEXT_MEMU_CLASS,\n        showEvent: \"\",\n        onItemClick: function (args) {\n          return _this._onContextMenuItemClick(args.itemData.name, args);\n        },\n        onHidden: function () {\n          return _this._onContextMenuHidden();\n        }\n      });\n\n      _get(_getPrototypeOf(FileManagerContextMenu.prototype), \"_initMarkup\", this).call(this);\n    }\n  }, {\n    key: \"showAt\",\n    value: function (fileItems, element, offset) {\n      if (this._isVisible) {\n        this._raiseContextMenuHidden();\n      }\n\n      this._isVisible = true;\n      var items = this.createContextMenuItems(fileItems);\n      var position = {\n        of: element,\n        at: \"top left\",\n        my: \"top left\",\n        offset: \"\"\n      };\n\n      if (offset) {\n        position.offset = offset.offsetX + \" \" + offset.offsetY;\n      } else {\n        position.my = \"left top\";\n        position.at = \"left bottom\";\n        position.boundaryOffset = \"1\";\n      }\n\n      this._contextMenu.option({\n        dataSource: items,\n        target: element,\n        position: position\n      });\n\n      this._contextMenu.show();\n    }\n  }, {\n    key: \"createContextMenuItems\",\n    value: function (fileItems, contextMenuItems) {\n      var _this2 = this;\n\n      this._targetFileItems = fileItems;\n      var result = [];\n      var itemArray = contextMenuItems || this.option(\"items\");\n      itemArray.forEach(function (srcItem) {\n        var commandName = (0, _type.isString)(srcItem) ? srcItem : srcItem.name;\n\n        var item = _this2._configureItemByCommandName(commandName, srcItem, fileItems);\n\n        if (_this2._isContextMenuItemAvailable(item, fileItems)) {\n          result.push(item);\n        }\n      });\n      return result;\n    }\n  }, {\n    key: \"_isContextMenuItemAvailable\",\n    value: function (menuItem, fileItems) {\n      if (!this._isDefaultItem(menuItem.name) || !menuItem._autoHide) {\n        return (0, _common.ensureDefined)(menuItem.visible, true);\n      }\n\n      if (this._isIsolatedCreationItemCommand(menuItem.name) && fileItems && fileItems.length) {\n        return false;\n      }\n\n      return this._commandManager.isCommandAvailable(menuItem.name, fileItems);\n    }\n  }, {\n    key: \"_isIsolatedCreationItemCommand\",\n    value: function (commandName) {\n      return (\"create\" === commandName || \"upload\" === commandName) && this.option(\"isolateCreationItemCommands\");\n    }\n  }, {\n    key: \"_isDefaultItem\",\n    value: function (commandName) {\n      return !!DEFAULT_CONTEXT_MENU_ITEMS[commandName];\n    }\n  }, {\n    key: \"_extendAttributes\",\n    value: function (targetObject, sourceObject, objectKeysArray) {\n      objectKeysArray.forEach(function (objectKey) {\n        (0, _extend.extend)(targetObject, sourceObject[objectKey] ? _defineProperty({}, objectKey, sourceObject[objectKey]) : {});\n      });\n    }\n  }, {\n    key: \"_configureItemByCommandName\",\n    value: function (commandName, item, fileItems) {\n      if (!this._isDefaultItem(commandName)) {\n        var res = (0, _extend.extend)(true, {}, item);\n        res.originalItemData = item;\n\n        this._addItemClickHandler(commandName, res);\n\n        if (Array.isArray(item.items)) {\n          res.items = this.createContextMenuItems(fileItems, item.items);\n        }\n\n        return res;\n      }\n\n      var result = this._createMenuItemByCommandName(commandName);\n\n      var defaultConfig = DEFAULT_CONTEXT_MENU_ITEMS[commandName];\n      (0, _extend.extend)(result, defaultConfig);\n      result.originalItemData = item;\n\n      this._extendAttributes(result, item, [\"visible\", \"beginGroup\", \"text\", \"icon\"]);\n\n      if (!(0, _type.isDefined)(result.visible)) {\n        result._autoHide = true;\n      } else {\n        this._extendAttributes(result, item, [\"visible\", \"disabled\"]);\n      }\n\n      if (commandName && !result.name) {\n        (0, _extend.extend)(result, {\n          name: commandName\n        });\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_createMenuItemByCommandName\",\n    value: function (commandName) {\n      var _this$_commandManager = this._commandManager.getCommandByName(commandName),\n          text = _this$_commandManager.text,\n          icon = _this$_commandManager.icon;\n\n      var menuItem = {\n        name: commandName,\n        text: text,\n        icon: icon\n      };\n\n      this._addItemClickHandler(commandName, menuItem);\n\n      return menuItem;\n    }\n  }, {\n    key: \"_addItemClickHandler\",\n    value: function (commandName, contextMenuItem) {\n      var _this3 = this;\n\n      contextMenuItem.onItemClick = function (args) {\n        return _this3._onContextMenuItemClick(commandName, args);\n      };\n    }\n  }, {\n    key: \"_onContextMenuItemClick\",\n    value: function (commandName, args) {\n      var changedArgs = (0, _extend.extend)(true, {}, args);\n      changedArgs.itemData = args.itemData.originalItemData;\n\n      this._actions.onItemClick(changedArgs);\n\n      if (this._isDefaultItem(commandName)) {\n        var targetFileItems = this._isIsolatedCreationItemCommand(commandName) ? null : this._targetFileItems;\n\n        this._commandManager.executeCommand(commandName, targetFileItems);\n      }\n    }\n  }, {\n    key: \"_initActions\",\n    value: function () {\n      this._actions = {\n        onContextMenuHidden: this._createActionByOption(\"onContextMenuHidden\"),\n        onItemClick: this._createActionByOption(\"onItemClick\")\n      };\n    }\n  }, {\n    key: \"_onContextMenuHidden\",\n    value: function () {\n      this._isVisible = false;\n\n      this._raiseContextMenuHidden();\n    }\n  }, {\n    key: \"_raiseContextMenuHidden\",\n    value: function () {\n      this._actions.onContextMenuHidden();\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function () {\n      return (0, _extend.extend)(_get(_getPrototypeOf(FileManagerContextMenu.prototype), \"_getDefaultOptions\", this).call(this), {\n        commandManager: null,\n        onContextMenuHidden: null,\n        onItemClick: null\n      });\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function (args) {\n      var name = args.name;\n\n      switch (name) {\n        case \"commandManager\":\n          this.repaint();\n          break;\n\n        case \"items\":\n          if (this._isVisible) {\n            var items = this.createContextMenuItems(this._targetFileItems);\n\n            this._contextMenu.option(\"dataSource\", items);\n          }\n\n          break;\n\n        case \"onItemClick\":\n        case \"onContextMenuHidden\":\n          this._actions[name] = this._createActionByOption(name);\n          break;\n\n        default:\n          _get(_getPrototypeOf(FileManagerContextMenu.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }, {\n    key: \"_commandManager\",\n    get: function () {\n      return this.option(\"commandManager\");\n    }\n  }]);\n\n  return FileManagerContextMenu;\n}(_ui2.default);\n\nmodule.exports = FileManagerContextMenu;","map":null,"metadata":{},"sourceType":"script"}