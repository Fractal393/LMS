{"ast":null,"code":"/**\r\n * DevExtreme (ui/list/ui.list.edit.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _utils = require(\"../../events/utils\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _uiListEditStrategy = require(\"./ui.list.edit.strategy.grouped\");\n\nvar _uiListEditStrategy2 = _interopRequireDefault(_uiListEditStrategy);\n\nvar _message = require(\"../../localization/message\");\n\nvar _uiListEdit = require(\"./ui.list.edit.provider\");\n\nvar _uiListEdit2 = _interopRequireDefault(_uiListEdit);\n\nvar _uiList = require(\"./ui.list.base\");\n\nvar _uiList2 = _interopRequireDefault(_uiList);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar LIST_ITEM_SELECTED_CLASS = \"dx-list-item-selected\";\nvar LIST_ITEM_RESPONSE_WAIT_CLASS = \"dx-list-item-response-wait\";\n\nvar ListEdit = _uiList2.default.inherit({\n  _supportedKeys: function () {\n    var _this = this;\n\n    var that = this;\n    var parent = this.callBase();\n\n    var deleteFocusedItem = function (e) {\n      if (that.option(\"allowItemDeleting\")) {\n        e.preventDefault();\n        that.deleteItem(that.option(\"focusedElement\"));\n      }\n    };\n\n    var moveFocusedItem = function (e, moveUp) {\n      var editStrategy = _this._editStrategy;\n\n      var focusedElement = _this.option(\"focusedElement\");\n\n      var focusedItemIndex = editStrategy.getNormalizedIndex(focusedElement);\n\n      var isLastIndexFocused = focusedItemIndex === _this._getLastItemIndex();\n\n      if (isLastIndexFocused && _this._isDataSourceLoading()) {\n        return;\n      }\n\n      if (e.shiftKey && that.option(\"itemDragging.allowReordering\")) {\n        var nextItemIndex = focusedItemIndex + (moveUp ? -1 : 1);\n        var $nextItem = editStrategy.getItemElement(nextItemIndex);\n\n        _this.reorderItem(focusedElement, $nextItem);\n\n        _this.scrollToItem(focusedElement);\n\n        e.preventDefault();\n      } else {\n        var editProvider = _this._editProvider;\n        var isInternalMoving = editProvider.handleKeyboardEvents(focusedItemIndex, moveUp);\n\n        if (!isInternalMoving) {\n          moveUp ? parent.upArrow(e) : parent.downArrow(e);\n        }\n      }\n    };\n\n    var enter = function (e) {\n      if (!this._editProvider.handleEnterPressing()) {\n        parent.enter.apply(this, arguments);\n      }\n    };\n\n    var space = function (e) {\n      if (!this._editProvider.handleEnterPressing()) {\n        parent.space.apply(this, arguments);\n      }\n    };\n\n    return (0, _extend.extend)({}, parent, {\n      del: deleteFocusedItem,\n      upArrow: function (e) {\n        return moveFocusedItem(e, true);\n      },\n      downArrow: function (e) {\n        return moveFocusedItem(e);\n      },\n      enter: enter,\n      space: space\n    });\n  },\n  _updateSelection: function () {\n    this._editProvider.afterItemsRendered();\n\n    this.callBase();\n  },\n  _getLastItemIndex: function () {\n    return this._itemElements().length - 1;\n  },\n  _refreshItemElements: function () {\n    this.callBase();\n\n    var excludedSelectors = this._editProvider.getExcludedItemSelectors();\n\n    if (excludedSelectors.length) {\n      this._itemElementsCache = this._itemElementsCache.not(excludedSelectors);\n    }\n  },\n  _setDeprecatedOptions: function () {\n    this.callBase();\n    (0, _extend.extend)(this._deprecatedOptions, {\n      allowItemReordering: {\n        since: \"19.2\",\n        alias: \"itemDragging.allowReordering\"\n      }\n    });\n  },\n  _getDefaultOptions: function () {\n    return (0, _extend.extend)(this.callBase(), {\n      showSelectionControls: false,\n      selectionMode: \"none\",\n      selectAllMode: \"page\",\n      onSelectAllValueChanged: null,\n      selectAllText: (0, _message.format)(\"dxList-selectAll\"),\n      menuItems: [],\n      menuMode: \"context\",\n      allowItemDeleting: false,\n      itemDeleteMode: \"static\",\n      allowItemReordering: false,\n      itemDragging: {}\n    });\n  },\n  _defaultOptionsRules: function () {\n    return this.callBase().concat([{\n      device: function (_device) {\n        return \"ios\" === _device.platform;\n      },\n      options: {\n        menuMode: \"slide\",\n        itemDeleteMode: \"slideItem\"\n      }\n    }, {\n      device: {\n        platform: \"android\"\n      },\n      options: {\n        itemDeleteMode: \"swipe\"\n      }\n    }]);\n  },\n  _init: function () {\n    this.callBase();\n\n    this._initEditProvider();\n  },\n  _initDataSource: function () {\n    this.callBase();\n\n    if (!this._isPageSelectAll()) {\n      this._dataSource && this._dataSource.requireTotalCount(true);\n    }\n  },\n  _isPageSelectAll: function () {\n    return \"page\" === this.option(\"selectAllMode\");\n  },\n  _initEditProvider: function () {\n    this._editProvider = new _uiListEdit2.default(this);\n  },\n  _disposeEditProvider: function () {\n    if (this._editProvider) {\n      this._editProvider.dispose();\n    }\n  },\n  _refreshEditProvider: function () {\n    this._disposeEditProvider();\n\n    this._initEditProvider();\n  },\n  _initEditStrategy: function () {\n    if (this.option(\"grouped\")) {\n      this._editStrategy = new _uiListEditStrategy2.default(this);\n    } else {\n      this.callBase();\n    }\n  },\n  _initMarkup: function () {\n    this._refreshEditProvider();\n\n    this.callBase();\n  },\n  _renderItems: function () {\n    this.callBase.apply(this, arguments);\n\n    this._editProvider.afterItemsRendered();\n  },\n  _selectedItemClass: function () {\n    return LIST_ITEM_SELECTED_CLASS;\n  },\n  _itemResponseWaitClass: function () {\n    return LIST_ITEM_RESPONSE_WAIT_CLASS;\n  },\n  _itemClickHandler: function (e) {\n    var $itemElement = (0, _renderer2.default)(e.currentTarget);\n\n    if ($itemElement.is(\".dx-state-disabled, .dx-state-disabled *\")) {\n      return;\n    }\n\n    var handledByEditProvider = this._editProvider.handleClick($itemElement, e);\n\n    if (handledByEditProvider) {\n      return;\n    }\n\n    this.callBase.apply(this, arguments);\n  },\n  _shouldFireContextMenuEvent: function () {\n    return this.callBase.apply(this, arguments) || this._editProvider.contextMenuHandlerExists();\n  },\n  _itemHoldHandler: function (e) {\n    var $itemElement = (0, _renderer2.default)(e.currentTarget);\n\n    if ($itemElement.is(\".dx-state-disabled, .dx-state-disabled *\")) {\n      return;\n    }\n\n    var handledByEditProvider = (0, _utils.isTouchEvent)(e) && this._editProvider.handleContextMenu($itemElement, e);\n\n    if (handledByEditProvider) {\n      e.handledByEditProvider = true;\n      return;\n    }\n\n    this.callBase.apply(this, arguments);\n  },\n  _itemContextMenuHandler: function (e) {\n    var $itemElement = (0, _renderer2.default)(e.currentTarget);\n\n    if ($itemElement.is(\".dx-state-disabled, .dx-state-disabled *\")) {\n      return;\n    }\n\n    var handledByEditProvider = !e.handledByEditProvider && this._editProvider.handleContextMenu($itemElement, e);\n\n    if (handledByEditProvider) {\n      e.preventDefault();\n      return;\n    }\n\n    this.callBase.apply(this, arguments);\n  },\n  _postprocessRenderItem: function (args) {\n    this.callBase.apply(this, arguments);\n\n    this._editProvider.modifyItemElement(args);\n  },\n  _clean: function () {\n    this._disposeEditProvider();\n\n    this.callBase();\n  },\n  focusListItem: function (index) {\n    var $item = this._editStrategy.getItemElement(index);\n\n    this.option(\"focusedElement\", $item);\n    this.focus();\n    this.scrollToItem(this.option(\"focusedElement\"));\n  },\n  _optionChanged: function (args) {\n    switch (args.name) {\n      case \"selectAllMode\":\n        this._initDataSource();\n\n        this._dataSource.pageIndex(0);\n\n        this._dataSource.load();\n\n        break;\n\n      case \"grouped\":\n        this._clearSelectedItems();\n\n        delete this._renderingGroupIndex;\n\n        this._initEditStrategy();\n\n        this.callBase(args);\n        break;\n\n      case \"showSelectionControls\":\n      case \"menuItems\":\n      case \"menuMode\":\n      case \"allowItemDeleting\":\n      case \"itemDeleteMode\":\n      case \"allowItemReordering\":\n      case \"itemDragging\":\n      case \"selectAllText\":\n        this._invalidate();\n\n        break;\n\n      case \"onSelectAllValueChanged\":\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  selectAll: function () {\n    return this._selection.selectAll(this._isPageSelectAll());\n  },\n  unselectAll: function () {\n    return this._selection.deselectAll(this._isPageSelectAll());\n  },\n  isSelectAll: function () {\n    return this._selection.getSelectAllState(this._isPageSelectAll());\n  },\n  getFlatIndexByItemElement: function (itemElement) {\n    return this._itemElements().index(itemElement);\n  },\n  getItemElementByFlatIndex: function (flatIndex) {\n    var $itemElements = this._itemElements();\n\n    if (flatIndex < 0 || flatIndex >= $itemElements.length) {\n      return (0, _renderer2.default)();\n    }\n\n    return $itemElements.eq(flatIndex);\n  },\n  getItemByIndex: function (index) {\n    return this._editStrategy.getItemDataByIndex(index);\n  }\n});\n\nmodule.exports = ListEdit;","map":null,"metadata":{},"sourceType":"script"}