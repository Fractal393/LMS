{"ast":null,"code":"/**\r\n * DevExtreme (ui/drop_down_editor/ui.drop_down_editor.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _events_engine = require(\"../../events/core/events_engine\");\n\nvar _events_engine2 = _interopRequireDefault(_events_engine);\n\nvar _guid = require(\"../../core/guid\");\n\nvar _guid2 = _interopRequireDefault(_guid);\n\nvar _component_registrator = require(\"../../core/component_registrator\");\n\nvar _component_registrator2 = _interopRequireDefault(_component_registrator);\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _selectors = require(\"../widget/selectors\");\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _dom = require(\"../../core/utils/dom\");\n\nvar _ui = require(\"../widget/ui.errors\");\n\nvar _ui2 = _interopRequireDefault(_ui);\n\nvar _position = require(\"../../animation/position\");\n\nvar _position2 = require(\"../../core/utils/position\");\n\nvar _ui3 = require(\"./ui.drop_down_button\");\n\nvar _ui4 = _interopRequireDefault(_ui3);\n\nvar _ui5 = require(\"../widget/ui.widget\");\n\nvar _ui6 = _interopRequireDefault(_ui5);\n\nvar _message = require(\"../../localization/message\");\n\nvar _utils = require(\"../../events/utils\");\n\nvar _text_box = require(\"../text_box\");\n\nvar _text_box2 = _interopRequireDefault(_text_box);\n\nvar _click = require(\"../../events/click\");\n\nvar _click2 = _interopRequireDefault(_click);\n\nvar _devices = require(\"../../core/devices\");\n\nvar _devices2 = _interopRequireDefault(_devices);\n\nvar _function_template = require(\"../../core/templates/function_template\");\n\nvar _popup = require(\"../popup\");\n\nvar _popup2 = _interopRequireDefault(_popup);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar DROP_DOWN_EDITOR_CLASS = \"dx-dropdowneditor\";\nvar DROP_DOWN_EDITOR_INPUT_WRAPPER = \"dx-dropdowneditor-input-wrapper\";\nvar DROP_DOWN_EDITOR_BUTTON_ICON = \"dx-dropdowneditor-icon\";\nvar DROP_DOWN_EDITOR_OVERLAY = \"dx-dropdowneditor-overlay\";\nvar DROP_DOWN_EDITOR_OVERLAY_FLIPPED = \"dx-dropdowneditor-overlay-flipped\";\nvar DROP_DOWN_EDITOR_ACTIVE = \"dx-dropdowneditor-active\";\nvar DROP_DOWN_EDITOR_FIELD_CLICKABLE = \"dx-dropdowneditor-field-clickable\";\nvar DROP_DOWN_EDITOR_FIELD_TEMPLATE_WRAPPER = \"dx-dropdowneditor-field-template-wrapper\";\n\nvar isIOs = \"ios\" === _devices2.default.current().platform;\n\nvar DropDownEditor = _text_box2.default.inherit({\n  _supportedKeys: function () {\n    return (0, _extend.extend)({}, this.callBase(), {\n      tab: function (e) {\n        if (!this.option(\"opened\")) {\n          return;\n        }\n\n        if (\"instantly\" === this.option(\"applyValueMode\")) {\n          this.close();\n          return;\n        }\n\n        var $focusableElement = e.shiftKey ? this._getLastPopupElement() : this._getFirstPopupElement();\n        $focusableElement && _events_engine2.default.trigger($focusableElement, \"focus\");\n        e.preventDefault();\n      },\n      escape: function (e) {\n        if (this.option(\"opened\")) {\n          e.preventDefault();\n        }\n\n        this.close();\n        return true;\n      },\n      upArrow: function (e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (e.altKey) {\n          this.close();\n          return false;\n        }\n\n        return true;\n      },\n      downArrow: function (e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (e.altKey) {\n          this._validatedOpening();\n\n          return false;\n        }\n\n        return true;\n      },\n      enter: function (e) {\n        if (this.option(\"opened\")) {\n          e.preventDefault();\n\n          this._valueChangeEventHandler(e);\n        }\n\n        return true;\n      }\n    });\n  },\n  _getDefaultButtons: function () {\n    return this.callBase().concat([{\n      name: \"dropDown\",\n      Ctor: _ui4.default\n    }]);\n  },\n  _getDefaultOptions: function () {\n    return (0, _extend.extend)(this.callBase(), {\n      value: null,\n      onOpened: null,\n      onClosed: null,\n      opened: false,\n      acceptCustomValue: true,\n      applyValueMode: \"instantly\",\n      deferRendering: true,\n      activeStateEnabled: true,\n      dropDownButtonTemplate: \"dropDownButton\",\n      fieldTemplate: null,\n      openOnFieldClick: false,\n      showDropDownButton: true,\n      buttons: void 0,\n      dropDownOptions: {\n        showTitle: false\n      },\n      popupPosition: this._getDefaultPopupPosition(),\n      onPopupInitialized: null,\n      applyButtonText: (0, _message.format)(\"OK\"),\n      cancelButtonText: (0, _message.format)(\"Cancel\"),\n      buttonsLocation: \"default\",\n      useHiddenSubmitElement: false\n    });\n  },\n  _getDefaultPopupPosition: function (isRtlEnabled) {\n    var position = (0, _position2.getDefaultAlignment)(isRtlEnabled);\n    return {\n      offset: {\n        h: 0,\n        v: -1\n      },\n      my: position + \" top\",\n      at: position + \" bottom\",\n      collision: \"flip flip\"\n    };\n  },\n  _defaultOptionsRules: function () {\n    return this.callBase().concat([{\n      device: function (_device) {\n        var isGeneric = \"generic\" === _device.platform;\n        return isGeneric;\n      },\n      options: {\n        popupPosition: {\n          offset: {\n            v: 0\n          }\n        }\n      }\n    }]);\n  },\n  _inputWrapper: function () {\n    return this.$element().find(\".\" + DROP_DOWN_EDITOR_INPUT_WRAPPER);\n  },\n  _init: function () {\n    this.callBase();\n\n    this._initVisibilityActions();\n\n    this._initPopupInitializedAction();\n\n    this._updatePopupPosition(this.option(\"rtlEnabled\"));\n\n    this._options.cache(\"dropDownOptions\", this.option(\"dropDownOptions\"));\n  },\n  _updatePopupPosition: function (isRtlEnabled) {\n    var _this$_getDefaultPopu = this._getDefaultPopupPosition(isRtlEnabled),\n        my = _this$_getDefaultPopu.my,\n        at = _this$_getDefaultPopu.at;\n\n    var currentPosition = this.option(\"popupPosition\");\n    this.option(\"popupPosition\", (0, _extend.extend)({}, currentPosition, {\n      my: my,\n      at: at\n    }));\n  },\n  _initVisibilityActions: function () {\n    this._openAction = this._createActionByOption(\"onOpened\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n    this._closeAction = this._createActionByOption(\"onClosed\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n  },\n  _initPopupInitializedAction: function () {\n    this._popupInitializedAction = this._createActionByOption(\"onPopupInitialized\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n  },\n  _initMarkup: function () {\n    this._renderSubmitElement();\n\n    this.callBase();\n    this.$element().addClass(DROP_DOWN_EDITOR_CLASS);\n    this.setAria(\"role\", \"combobox\");\n  },\n  _render: function () {\n    this.callBase();\n\n    this._renderOpenHandler();\n\n    this._attachFocusOutHandler();\n\n    this._renderOpenedState();\n  },\n  _renderContentImpl: function () {\n    if (!this.option(\"deferRendering\")) {\n      this._createPopup();\n    }\n  },\n  _renderInput: function () {\n    this.callBase();\n    this.$element().wrapInner((0, _renderer2.default)(\"<div>\").addClass(DROP_DOWN_EDITOR_INPUT_WRAPPER));\n    this._$container = this.$element().children().eq(0);\n\n    this._setDefaultAria();\n  },\n  _setDefaultAria: function () {\n    this.setAria({\n      haspopup: \"true\",\n      autocomplete: \"list\"\n    });\n  },\n  _readOnlyPropValue: function () {\n    return !this.option(\"acceptCustomValue\") || this.callBase();\n  },\n  _cleanFocusState: function () {\n    this.callBase();\n\n    if (this.option(\"fieldTemplate\")) {\n      this._detachFocusEvents();\n    }\n  },\n  _getFieldTemplate: function () {\n    return this.option(\"fieldTemplate\") && this._getTemplateByOption(\"fieldTemplate\");\n  },\n  _renderMask: function () {\n    if (this.option(\"fieldTemplate\")) {\n      return;\n    }\n\n    this.callBase();\n  },\n  _renderField: function () {\n    var fieldTemplate = this._getFieldTemplate();\n\n    fieldTemplate && this._renderTemplatedField(fieldTemplate, this._fieldRenderData());\n  },\n  _renderPlaceholder: function () {\n    var hasFieldTemplate = !!this._getFieldTemplate();\n\n    if (!hasFieldTemplate) {\n      this.callBase();\n    }\n  },\n  _renderValue: function () {\n    if (this.option(\"useHiddenSubmitElement\")) {\n      this._setSubmitValue();\n    }\n\n    var promise = this.callBase();\n    promise.always(this._renderField.bind(this));\n  },\n  _renderTemplatedField: function (fieldTemplate, data) {\n    var _this = this;\n\n    var isFocused = (0, _selectors.focused)(this._input());\n    var $container = this._$container;\n\n    this._detachKeyboardEvents();\n\n    var beforeButtonsContainerParent = this._$beforeButtonsContainer && this._$beforeButtonsContainer[0].parentNode;\n    var afterButtonsContainerParent = this._$afterButtonsContainer && this._$afterButtonsContainer[0].parentNode;\n    beforeButtonsContainerParent && beforeButtonsContainerParent.removeChild(this._$beforeButtonsContainer[0]);\n    afterButtonsContainerParent && afterButtonsContainerParent.removeChild(this._$afterButtonsContainer[0]);\n\n    this._detachFocusEvents();\n\n    $container.empty();\n    var $templateWrapper = (0, _renderer2.default)(\"<div>\").addClass(DROP_DOWN_EDITOR_FIELD_TEMPLATE_WRAPPER).appendTo($container);\n    fieldTemplate.render({\n      model: data,\n      container: (0, _dom.getPublicElement)($templateWrapper),\n      onRendered: function () {\n        var $input = _this._input();\n\n        if (!$input.length) {\n          throw _ui2.default.Error(\"E1010\");\n        }\n\n        _this._refreshEvents();\n\n        _this._refreshValueChangeEvent();\n\n        _this._renderFocusState();\n\n        isFocused && _events_engine2.default.trigger($input, \"focus\");\n      }\n    });\n    $container.prepend(this._$beforeButtonsContainer);\n    $container.append(this._$afterButtonsContainer);\n  },\n  _fieldRenderData: function () {\n    return this.option(\"value\");\n  },\n  _initTemplates: function () {\n    this._templateManager.addDefaultTemplates({\n      dropDownButton: new _function_template.FunctionTemplate(function (options) {\n        var $icon = (0, _renderer2.default)(\"<div>\").addClass(DROP_DOWN_EDITOR_BUTTON_ICON);\n        (0, _renderer2.default)(options.container).append($icon);\n      })\n    });\n\n    this.callBase();\n  },\n  _renderOpenHandler: function () {\n    var $inputWrapper = this._inputWrapper();\n\n    var eventName = (0, _utils.addNamespace)(_click2.default.name, this.NAME);\n    var openOnFieldClick = this.option(\"openOnFieldClick\");\n\n    _events_engine2.default.off($inputWrapper, eventName);\n\n    _events_engine2.default.on($inputWrapper, eventName, this._getInputClickHandler(openOnFieldClick));\n\n    this.$element().toggleClass(DROP_DOWN_EDITOR_FIELD_CLICKABLE, openOnFieldClick);\n\n    if (openOnFieldClick) {\n      this._openOnFieldClickAction = this._createAction(this._openHandler.bind(this));\n    }\n  },\n  _attachFocusOutHandler: function () {\n    var _this2 = this;\n\n    if (isIOs) {\n      this._detachFocusOutEvents();\n\n      _events_engine2.default.on(this._inputWrapper(), (0, _utils.addNamespace)(\"focusout\", this.NAME), function (event) {\n        var newTarget = event.relatedTarget;\n        var popupWrapper = _this2.content ? (0, _renderer2.default)(_this2.content()).closest(\".\" + DROP_DOWN_EDITOR_OVERLAY) : _this2._$popup;\n\n        if (newTarget && _this2.option(\"opened\")) {\n          var isNewTargetOutside = 0 === (0, _renderer2.default)(newTarget).closest(\".\" + DROP_DOWN_EDITOR_OVERLAY, popupWrapper).length;\n\n          if (isNewTargetOutside) {\n            _this2.close();\n          }\n        }\n      });\n    }\n  },\n  _detachFocusOutEvents: function () {\n    isIOs && _events_engine2.default.off(this._inputWrapper(), (0, _utils.addNamespace)(\"focusout\", this.NAME));\n  },\n  _getInputClickHandler: function (openOnFieldClick) {\n    var _this3 = this;\n\n    return openOnFieldClick ? function (e) {\n      _this3._executeOpenAction(e);\n    } : function (e) {\n      _this3._focusInput();\n    };\n  },\n  _openHandler: function () {\n    this._toggleOpenState();\n  },\n  _executeOpenAction: function (e) {\n    this._openOnFieldClickAction({\n      event: e\n    });\n  },\n  _keyboardEventBindingTarget: function () {\n    return this._input();\n  },\n  _focusInput: function () {\n    if (this.option(\"disabled\")) {\n      return false;\n    }\n\n    if (this.option(\"focusStateEnabled\") && !(0, _selectors.focused)(this._input())) {\n      _events_engine2.default.trigger(this._input(), \"focus\");\n    }\n\n    return true;\n  },\n  _toggleOpenState: function (isVisible) {\n    if (!this._focusInput()) {\n      return;\n    }\n\n    if (!this.option(\"readOnly\")) {\n      isVisible = arguments.length ? isVisible : !this.option(\"opened\");\n      this.option(\"opened\", isVisible);\n    }\n  },\n  _renderOpenedState: function () {\n    var opened = this.option(\"opened\");\n\n    if (opened) {\n      this._createPopup();\n    }\n\n    this.$element().toggleClass(DROP_DOWN_EDITOR_ACTIVE, opened);\n\n    this._setPopupOption(\"visible\", opened);\n\n    this.setAria({\n      expanded: opened\n    });\n    this.setAria(\"owns\", (opened || void 0) && this._popupContentId, this.$element());\n  },\n  _createPopup: function () {\n    if (this._$popup) {\n      return;\n    }\n\n    this._$popup = (0, _renderer2.default)(\"<div>\").addClass(DROP_DOWN_EDITOR_OVERLAY).addClass(this.option(\"customOverlayCssClass\")).appendTo(this.$element());\n\n    this._renderPopup();\n\n    this._renderPopupContent();\n  },\n  _renderPopupContent: _common.noop,\n  _renderPopup: function () {\n    var popupConfig = (0, _extend.extend)(this._popupConfig(), this._options.cache(\"dropDownOptions\"));\n    this._popup = this._createComponent(this._$popup, _popup2.default, popupConfig);\n\n    this._popup.on({\n      showing: this._popupShowingHandler.bind(this),\n      shown: this._popupShownHandler.bind(this),\n      hiding: this._popupHidingHandler.bind(this),\n      hidden: this._popupHiddenHandler.bind(this),\n      contentReady: this._contentReadyHandler.bind(this)\n    });\n\n    this._contentReadyHandler();\n\n    this._setPopupContentId(this._popup.$content());\n\n    this._bindInnerWidgetOptions(this._popup, \"dropDownOptions\");\n  },\n  _setPopupContentId: function ($popupContent) {\n    this._popupContentId = \"dx-\" + new _guid2.default();\n    this.setAria(\"id\", this._popupContentId, $popupContent);\n  },\n  _contentReadyHandler: _common.noop,\n  _popupConfig: function () {\n    return {\n      onInitialized: this._popupInitializedHandler(),\n      position: (0, _extend.extend)(this.option(\"popupPosition\"), {\n        of: this.$element()\n      }),\n      showTitle: this.option(\"dropDownOptions.showTitle\"),\n      width: \"auto\",\n      height: \"auto\",\n      shading: false,\n      closeOnTargetScroll: true,\n      closeOnOutsideClick: this._closeOutsideDropDownHandler.bind(this),\n      animation: {\n        show: {\n          type: \"fade\",\n          duration: 0,\n          from: 0,\n          to: 1\n        },\n        hide: {\n          type: \"fade\",\n          duration: 400,\n          from: 1,\n          to: 0\n        }\n      },\n      deferRendering: false,\n      focusStateEnabled: false,\n      showCloseButton: false,\n      toolbarItems: this._getPopupToolbarItems(),\n      onPositioned: this._popupPositionedHandler.bind(this),\n      fullScreen: false,\n      contentTemplate: null\n    };\n  },\n  _popupInitializedHandler: function () {\n    var _this4 = this;\n\n    if (!this.option(\"onPopupInitialized\")) {\n      return;\n    }\n\n    return function (e) {\n      _this4._popupInitializedAction({\n        popup: e.component\n      });\n    };\n  },\n  _popupPositionedHandler: function (e) {\n    e.position && this._popup.overlayContent().toggleClass(DROP_DOWN_EDITOR_OVERLAY_FLIPPED, e.position.v.flip);\n  },\n  _popupShowingHandler: _common.noop,\n  _popupHidingHandler: function () {\n    this.option(\"opened\", false);\n  },\n  _popupShownHandler: function () {\n    this._openAction();\n\n    if (this._$validationMessage) {\n      this._$validationMessage.dxOverlay(\"option\", \"position\", this._getValidationMessagePosition());\n    }\n  },\n  _popupHiddenHandler: function () {\n    this._closeAction();\n\n    if (this._$validationMessage) {\n      this._$validationMessage.dxOverlay(\"option\", \"position\", this._getValidationMessagePosition());\n    }\n  },\n  _getValidationMessagePosition: function () {\n    var positionRequest = \"below\";\n\n    if (this._popup && this._popup.option(\"visible\")) {\n      var _setupPosition = (0, _position.setup)(this.$element()),\n          myTop = _setupPosition.top;\n\n      var _setupPosition2 = (0, _position.setup)(this._popup.$content()),\n          popupTop = _setupPosition2.top;\n\n      positionRequest = myTop + this.option(\"popupPosition\").offset.v > popupTop ? \"below\" : \"above\";\n    }\n\n    return this.callBase(positionRequest);\n  },\n  _closeOutsideDropDownHandler: function (_ref) {\n    var target = _ref.target;\n    var $target = (0, _renderer2.default)(target);\n    var dropDownButton = this.getButton(\"dropDown\");\n    var $dropDownButton = dropDownButton && dropDownButton.$element();\n    var isInputClicked = !!$target.closest(this.$element()).length;\n    var isDropDownButtonClicked = !!$target.closest($dropDownButton).length;\n    var isOutsideClick = !isInputClicked && !isDropDownButtonClicked;\n    return isOutsideClick;\n  },\n  _clean: function () {\n    delete this._openOnFieldClickAction;\n\n    if (this._$popup) {\n      this._$popup.remove();\n\n      delete this._$popup;\n      delete this._popup;\n    }\n\n    this.callBase();\n  },\n  _setPopupOption: function (optionName, value) {\n    this._setWidgetOption(\"_popup\", arguments);\n  },\n  _validatedOpening: function () {\n    if (!this.option(\"readOnly\")) {\n      this._toggleOpenState(true);\n    }\n  },\n  _getPopupToolbarItems: function () {\n    return \"useButtons\" === this.option(\"applyValueMode\") ? this._popupToolbarItemsConfig() : [];\n  },\n  _getFirstPopupElement: function () {\n    return this._popup._wrapper().find(\".dx-popup-done.dx-button\");\n  },\n  _getLastPopupElement: function () {\n    return this._popup._wrapper().find(\".dx-popup-cancel.dx-button\");\n  },\n  _popupElementTabHandler: function (e) {\n    var $element = (0, _renderer2.default)(e.currentTarget);\n\n    if (e.shiftKey && $element.is(this._getFirstPopupElement()) || !e.shiftKey && $element.is(this._getLastPopupElement())) {\n      _events_engine2.default.trigger(this._input(), \"focus\");\n\n      e.preventDefault();\n    }\n  },\n  _popupElementEscHandler: function () {\n    _events_engine2.default.trigger(this._input(), \"focus\");\n\n    this.close();\n  },\n  _popupButtonInitializedHandler: function (e) {\n    e.component.registerKeyHandler(\"tab\", this._popupElementTabHandler.bind(this));\n    e.component.registerKeyHandler(\"escape\", this._popupElementEscHandler.bind(this));\n  },\n  _popupToolbarItemsConfig: function () {\n    var buttonsConfig = [{\n      shortcut: \"done\",\n      options: {\n        onClick: this._applyButtonHandler.bind(this),\n        text: this.option(\"applyButtonText\"),\n        onInitialized: this._popupButtonInitializedHandler.bind(this)\n      }\n    }, {\n      shortcut: \"cancel\",\n      options: {\n        onClick: this._cancelButtonHandler.bind(this),\n        text: this.option(\"cancelButtonText\"),\n        onInitialized: this._popupButtonInitializedHandler.bind(this)\n      }\n    }];\n    return this._applyButtonsLocation(buttonsConfig);\n  },\n  _applyButtonsLocation: function (buttonsConfig) {\n    var buttonsLocation = this.option(\"buttonsLocation\");\n    var resultConfig = buttonsConfig;\n\n    if (\"default\" !== buttonsLocation) {\n      var position = (0, _common.splitPair)(buttonsLocation);\n      (0, _iterator.each)(resultConfig, function (_, element) {\n        (0, _extend.extend)(element, {\n          toolbar: position[0],\n          location: position[1]\n        });\n      });\n    }\n\n    return resultConfig;\n  },\n  _applyButtonHandler: function () {\n    this.close();\n    this.option(\"focusStateEnabled\") && this.focus();\n  },\n  _cancelButtonHandler: function () {\n    this.close();\n    this.option(\"focusStateEnabled\") && this.focus();\n  },\n  _updatePopupWidth: _common.noop,\n  _popupOptionChanged: function (args) {\n    var options = _ui6.default.getOptionsFromContainer(args);\n\n    this._setPopupOption(options);\n\n    if (Object.keys(options).indexOf(\"width\") !== -1 && void 0 === options.width) {\n      this._updatePopupWidth();\n    }\n  },\n  _renderSubmitElement: function () {\n    if (this.option(\"useHiddenSubmitElement\")) {\n      this._$submitElement = (0, _renderer2.default)(\"<input>\").attr(\"type\", \"hidden\").appendTo(this.$element());\n    }\n  },\n  _setSubmitValue: function () {\n    this._getSubmitElement().val(this.option(\"value\"));\n  },\n  _getSubmitElement: function () {\n    if (this.option(\"useHiddenSubmitElement\")) {\n      return this._$submitElement;\n    } else {\n      return this.callBase();\n    }\n  },\n  _dispose: function () {\n    this._detachFocusOutEvents();\n\n    this.callBase();\n  },\n  _setDeprecatedOptions: function () {\n    this.callBase();\n    (0, _extend.extend)(this._deprecatedOptions, {\n      showPopupTitle: {\n        since: \"20.1\",\n        alias: \"dropDownOptions.showTitle\"\n      }\n    });\n  },\n  _optionChanged: function (args) {\n    switch (args.name) {\n      case \"opened\":\n        this._renderOpenedState();\n\n        break;\n\n      case \"onOpened\":\n      case \"onClosed\":\n        this._initVisibilityActions();\n\n        break;\n\n      case \"onPopupInitialized\":\n        this._initPopupInitializedAction();\n\n        break;\n\n      case \"fieldTemplate\":\n        if ((0, _type.isDefined)(args.value)) {\n          this._renderField();\n        } else {\n          this._invalidate();\n        }\n\n        break;\n\n      case \"acceptCustomValue\":\n      case \"openOnFieldClick\":\n        this._invalidate();\n\n        break;\n\n      case \"dropDownButtonTemplate\":\n      case \"showDropDownButton\":\n        this._updateButtons([\"dropDown\"]);\n\n        break;\n\n      case \"dropDownOptions\":\n        this._popupOptionChanged(args);\n\n        this._options.cache(\"dropDownOptions\", this.option(\"dropDownOptions\"));\n\n        break;\n\n      case \"popupPosition\":\n      case \"deferRendering\":\n        break;\n\n      case \"applyValueMode\":\n      case \"applyButtonText\":\n      case \"cancelButtonText\":\n      case \"buttonsLocation\":\n        this._setPopupOption(\"toolbarItems\", this._getPopupToolbarItems());\n\n        break;\n\n      case \"showPopupTitle\":\n        this._setPopupOption(\"showTitle\", args.value);\n\n        break;\n\n      case \"useHiddenSubmitElement\":\n        if (this._$submitElement) {\n          this._$submitElement.remove();\n\n          this._$submitElement = void 0;\n        }\n\n        this._renderSubmitElement();\n\n        break;\n\n      case \"rtlEnabled\":\n        this._updatePopupPosition(args.value);\n\n        this.callBase(args);\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  open: function () {\n    this.option(\"opened\", true);\n  },\n  close: function () {\n    this.option(\"opened\", false);\n  },\n  field: function () {\n    return (0, _dom.getPublicElement)(this._input());\n  },\n  content: function () {\n    return this._popup ? this._popup.content() : null;\n  }\n});\n\n(0, _component_registrator2.default)(\"dxDropDownEditor\", DropDownEditor);\nmodule.exports = DropDownEditor;\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}