{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Property, NotifyPropertyChanges, Event } from './notify-property-change';\nimport { Base } from './base';\nvar keyCode = {\n  'backspace': 8,\n  'tab': 9,\n  'enter': 13,\n  'shift': 16,\n  'control': 17,\n  'alt': 18,\n  'pause': 19,\n  'capslock': 20,\n  'space': 32,\n  'escape': 27,\n  'pageup': 33,\n  'pagedown': 34,\n  'end': 35,\n  'home': 36,\n  'leftarrow': 37,\n  'uparrow': 38,\n  'rightarrow': 39,\n  'downarrow': 40,\n  'insert': 45,\n  'delete': 46,\n  'f1': 112,\n  'f2': 113,\n  'f3': 114,\n  'f4': 115,\n  'f5': 116,\n  'f6': 117,\n  'f7': 118,\n  'f8': 119,\n  'f9': 120,\n  'f10': 121,\n  'f11': 122,\n  'f12': 123,\n  'semicolon': 186,\n  'plus': 187,\n  'comma': 188,\n  'minus': 189,\n  'dot': 190,\n  'forwardslash': 191,\n  'graveaccent': 192,\n  'openbracket': 219,\n  'backslash': 220,\n  'closebracket': 221,\n  'singlequote': 222\n};\n/**\n * KeyboardEvents class enables you to bind key action desired key combinations for ex., Ctrl+A, Delete, Alt+Space etc.\n * ```html\n * <div id='testEle'>  </div>;\n * <script>\n *   let node: HTMLElement = document.querySelector('#testEle');\n *   let kbInstance = new KeyboardEvents({\n *       element: node,\n *       keyConfigs:{ selectAll : 'ctrl+a' },\n *       keyAction: function (e:KeyboardEvent, action:string) {\n *           // handler function code\n *       }\n *   });\n * </script>\n * ```\n */\n\nvar KeyboardEvents =\n/** @class */\nfunction (_super) {\n  __extends(KeyboardEvents, _super);\n  /**\n   * Initializes the KeyboardEvents\n   * @param {HTMLElement} element\n   * @param {KeyboardEventsModel} options\n   */\n\n\n  function KeyboardEvents(element, options) {\n    var _this = _super.call(this, options, element) || this;\n    /**\n     * To handle a key press event returns null\n     */\n\n\n    _this.keyPressHandler = function (e) {\n      var isAltKey = e.altKey;\n      var isCtrlKey = e.ctrlKey;\n      var isShiftKey = e.shiftKey;\n      var curkeyCode = e.which;\n      var keys = Object.keys(_this.keyConfigs);\n\n      for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n        var key = keys_1[_i];\n\n        var configCollection = _this.keyConfigs[key].split(',');\n\n        for (var _a = 0, configCollection_1 = configCollection; _a < configCollection_1.length; _a++) {\n          var rconfig = configCollection_1[_a];\n          var rKeyObj = KeyboardEvents_1.getKeyConfigData(rconfig.trim());\n\n          if (isAltKey === rKeyObj.altKey && isCtrlKey === rKeyObj.ctrlKey && isShiftKey === rKeyObj.shiftKey && curkeyCode === rKeyObj.keyCode) {\n            e.action = key;\n\n            if (_this.keyAction) {\n              _this.keyAction(e);\n            }\n          }\n        }\n      }\n    };\n\n    _this.bind();\n\n    return _this;\n  }\n\n  KeyboardEvents_1 = KeyboardEvents;\n  /**\n   * Unwire bound events and destroy the instance.\n   * @return {void}\n   */\n\n  KeyboardEvents.prototype.destroy = function () {\n    this.unwireEvents();\n\n    _super.prototype.destroy.call(this);\n  };\n  /**\n   * Function can be used to specify certain action if a property is changed\n   * @param newProp\n   * @param oldProp\n   * @returns {void}\n   * @private\n   */\n\n\n  KeyboardEvents.prototype.onPropertyChanged = function (newProp, oldProp) {// No code are needed\n  };\n\n  ;\n\n  KeyboardEvents.prototype.bind = function () {\n    this.wireEvents();\n  };\n  /**\n   * To get the module name, returns 'keyboard'.\n   * @private\n   */\n\n\n  KeyboardEvents.prototype.getModuleName = function () {\n    return 'keyboard';\n  };\n  /**\n   * Wiring event handlers to events\n   */\n\n\n  KeyboardEvents.prototype.wireEvents = function () {\n    this.element.addEventListener(this.eventName, this.keyPressHandler);\n  };\n  /**\n   * Unwiring event handlers to events\n   */\n\n\n  KeyboardEvents.prototype.unwireEvents = function () {\n    this.element.removeEventListener(this.eventName, this.keyPressHandler);\n  };\n  /**\n   * To get the key configuration data\n   * @param {string} config - configuration data\n   * returns {KeyData}\n   */\n\n\n  KeyboardEvents.getKeyConfigData = function (config) {\n    if (config in this.configCache) {\n      return this.configCache[config];\n    }\n\n    var keys = config.toLowerCase().split('+');\n    var keyData = {\n      altKey: keys.indexOf('alt') !== -1 ? true : false,\n      ctrlKey: keys.indexOf('ctrl') !== -1 ? true : false,\n      shiftKey: keys.indexOf('shift') !== -1 ? true : false,\n      keyCode: null\n    };\n\n    if (keys[keys.length - 1].length > 1 && !!Number(keys[keys.length - 1])) {\n      keyData.keyCode = Number(keys[keys.length - 1]);\n    } else {\n      keyData.keyCode = KeyboardEvents_1.getKeyCode(keys[keys.length - 1]);\n    }\n\n    KeyboardEvents_1.configCache[config] = keyData;\n    return keyData;\n  }; // Return the keycode value as string \n\n\n  KeyboardEvents.getKeyCode = function (keyVal) {\n    return keyCode[keyVal] || keyVal.toUpperCase().charCodeAt(0);\n  };\n\n  var KeyboardEvents_1;\n  KeyboardEvents.configCache = {};\n\n  __decorate([Property({})], KeyboardEvents.prototype, \"keyConfigs\", void 0);\n\n  __decorate([Property('keyup')], KeyboardEvents.prototype, \"eventName\", void 0);\n\n  __decorate([Event()], KeyboardEvents.prototype, \"keyAction\", void 0);\n\n  KeyboardEvents = KeyboardEvents_1 = __decorate([NotifyPropertyChanges], KeyboardEvents);\n  return KeyboardEvents;\n}(Base);\n\nexport { KeyboardEvents };","map":null,"metadata":{},"sourceType":"module"}