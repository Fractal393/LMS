{"ast":null,"code":"/**\r\n * DevExtreme (core/postponed_operations.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PostponedOperations = void 0;\n\nvar _deferred = require(\"./utils/deferred\");\n\nvar _type = require(\"./utils/type\");\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) {\n    return;\n  }\n\n  if (\"string\" === typeof o) {\n    return _arrayLikeToArray(o, minLen);\n  }\n\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n\n  if (\"Object\" === n && o.constructor) {\n    n = o.constructor.name;\n  }\n\n  if (\"Map\" === n || \"Set\" === n) {\n    return Array.from(o);\n  }\n\n  if (\"Arguments\" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) {\n    return _arrayLikeToArray(o, minLen);\n  }\n}\n\nfunction _iterableToArray(iter) {\n  if (\"undefined\" !== typeof Symbol && Symbol.iterator in Object(iter)) {\n    return Array.from(iter);\n  }\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    return _arrayLikeToArray(arr);\n  }\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (null == len || len > arr.length) {\n    len = arr.length;\n  }\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nvar PostponedOperations = exports.PostponedOperations = function () {\n  function PostponedOperations() {\n    _classCallCheck(this, PostponedOperations);\n\n    this._postponedOperations = {};\n  }\n\n  _createClass(PostponedOperations, [{\n    key: \"add\",\n    value: function (key, fn, postponedPromise) {\n      if (key in this._postponedOperations) {\n        postponedPromise && this._postponedOperations[key].promises.push(postponedPromise);\n      } else {\n        var completePromise = new _deferred.Deferred();\n        this._postponedOperations[key] = {\n          fn: fn,\n          completePromise: completePromise,\n          promises: postponedPromise ? [postponedPromise] : []\n        };\n      }\n\n      return this._postponedOperations[key].completePromise.promise();\n    }\n  }, {\n    key: \"callPostponedOperations\",\n    value: function () {\n      for (var key in this._postponedOperations) {\n        var operation = this._postponedOperations[key];\n\n        if ((0, _type.isDefined)(operation)) {\n          if (operation.promises && operation.promises.length) {\n            _deferred.when.apply(void 0, _toConsumableArray(operation.promises)).done(operation.fn).then(operation.completePromise.resolve);\n          } else {\n            operation.fn().done(operation.completePromise.resolve);\n          }\n        }\n      }\n\n      this._postponedOperations = {};\n    }\n  }]);\n\n  return PostponedOperations;\n}();","map":null,"metadata":{},"sourceType":"script"}