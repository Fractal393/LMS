{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * PdfAutomaticField.ts class for EJ2-PDF\n */\n\n\nimport { RectangleF, SizeF, PointF } from './../../drawing/pdf-drawing';\nimport { PdfSolidBrush } from './../../graphics/brushes/pdf-solid-brush';\nimport { PdfColor } from './../../graphics/pdf-color';\nimport { PdfDocument } from './../pdf-document';\nimport { PdfGraphicsElement } from './../../graphics/figures/base/graphics-element';\nimport { PdfAutomaticFieldInfo } from './automatic-field-info';\n/**\n * Represents a fields which is calculated before the document saves.\n */\n\nvar PdfAutomaticField =\n/** @class */\nfunction (_super) {\n  __extends(PdfAutomaticField, _super); // Constructors\n\n\n  function PdfAutomaticField() {\n    var _this = _super.call(this) || this; // Fields\n\n\n    _this.internalBounds = new RectangleF(0, 0, 0, 0);\n    _this.internalTemplateSize = new SizeF(0, 0);\n    return _this;\n  }\n\n  Object.defineProperty(PdfAutomaticField.prototype, \"bounds\", {\n    // Properties\n    get: function () {\n      return this.internalBounds;\n    },\n    set: function (value) {\n      this.internalBounds = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfAutomaticField.prototype, \"size\", {\n    get: function () {\n      return new SizeF(this.bounds.width, this.bounds.height);\n    },\n    set: function (value) {\n      this.bounds.width = value.width;\n      this.bounds.height = value.height;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfAutomaticField.prototype, \"location\", {\n    get: function () {\n      return new PointF(this.bounds.x, this.bounds.y);\n    },\n    set: function (value) {\n      this.bounds.x = value.x;\n      this.bounds.y = value.y;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfAutomaticField.prototype, \"font\", {\n    get: function () {\n      return this.internalFont;\n    },\n    set: function (value) {\n      this.internalFont = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfAutomaticField.prototype, \"brush\", {\n    get: function () {\n      return this.internalBrush;\n    },\n    set: function (value) {\n      this.internalBrush = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfAutomaticField.prototype, \"pen\", {\n    get: function () {\n      return this.internalPen;\n    },\n    set: function (value) {\n      this.internalPen = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfAutomaticField.prototype, \"stringFormat\", {\n    get: function () {\n      return this.internalStringFormat;\n    },\n    set: function (value) {\n      this.internalStringFormat = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PdfAutomaticField.prototype.performDrawHelper = function (graphics, location, scalingX, scalingY) {\n    if (this.bounds.height === 0 || this.bounds.width === 0) {\n      var text = this.getValue(graphics);\n      this.internalTemplateSize = this.getFont().measureString(text, this.size, this.stringFormat);\n    }\n  };\n\n  PdfAutomaticField.prototype.draw = function (arg1, arg2, arg3) {\n    if (typeof arg2 === 'undefined') {\n      var location_1 = new PointF(0, 0);\n      this.draw(arg1, location_1);\n    } else if (arg2 instanceof PointF) {\n      this.draw(arg1, arg2.x, arg2.y);\n    } else {\n      this.drawHelper(arg1, arg2, arg3);\n      var info = new PdfAutomaticFieldInfo(this, new PointF(arg2, arg3));\n      arg1.automaticFields.add(info);\n    }\n  };\n\n  PdfAutomaticField.prototype.getSize = function () {\n    if (this.bounds.height === 0 || this.bounds.width === 0) {\n      return this.internalTemplateSize;\n    } else {\n      return this.size;\n    }\n  };\n\n  PdfAutomaticField.prototype.drawInternal = function (graphics) {//\n  };\n  /* tslint:disable */\n\n\n  PdfAutomaticField.prototype.getBrush = function () {\n    return typeof this.internalBrush === 'undefined' || this.internalBrush == null ? new PdfSolidBrush(new PdfColor(0, 0, 0)) : this.internalBrush;\n  };\n\n  PdfAutomaticField.prototype.getFont = function () {\n    return typeof this.internalFont === 'undefined' || this.internalFont == null ? PdfDocument.defaultFont : this.internalFont;\n  };\n  /* tslint:enable */\n\n\n  PdfAutomaticField.prototype.getPageFromGraphics = function (graphics) {\n    if (typeof graphics.page !== 'undefined' && graphics.page !== null) {\n      var page = graphics.page;\n      return page;\n    } else {\n      var page = graphics.currentPage;\n      return page;\n    }\n  };\n\n  return PdfAutomaticField;\n}(PdfGraphicsElement);\n\nexport { PdfAutomaticField };","map":null,"metadata":{},"sourceType":"module"}