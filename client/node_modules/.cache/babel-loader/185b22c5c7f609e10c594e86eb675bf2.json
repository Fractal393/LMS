{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { isNullOrUndefined, isBlazor } from '@syncfusion/ej2-base';\nimport { CellRenderer } from './cell-renderer';\nimport { appendChildren, templateCompiler } from '../base/util';\n/**\n * GroupCaptionCellRenderer class which responsible for building group caption cell.\n * @hidden\n */\n\nvar GroupCaptionCellRenderer =\n/** @class */\nfunction (_super) {\n  __extends(GroupCaptionCellRenderer, _super);\n\n  function GroupCaptionCellRenderer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.element = _this.parent.createElement('TD', {\n      className: 'e-groupcaption',\n      attrs: {\n        id: _this.parent.element.id + 'captioncell',\n        role: 'gridcell',\n        tabindex: '-1'\n      }\n    });\n    return _this;\n  }\n  /**\n   * Function to render the cell content based on Column object.\n   * @param  {Cell} cell\n   * @param  {Object} data\n   */\n\n\n  GroupCaptionCellRenderer.prototype.render = function (cell, data) {\n    var node = this.element.cloneNode();\n    var gObj = this.parent;\n    var result;\n    var helper = {};\n    var fKeyValue;\n    data.headerText = cell.column.headerText;\n\n    if (cell.isForeignKey) {\n      fKeyValue = this.format(cell.column, cell.column.valueAccessor('foreignKey', data, cell.column));\n    }\n\n    var value = cell.isForeignKey ? fKeyValue : cell.column.enableGroupByFormat ? data.key : this.format(cell.column, cell.column.valueAccessor('key', data, cell.column));\n\n    if (!isNullOrUndefined(gObj.groupSettings.captionTemplate)) {\n      if (isBlazor()) {\n        var tempID = gObj.element.id + 'captionTemplate';\n        result = templateCompiler(gObj.groupSettings.captionTemplate)(data, null, null, tempID);\n      } else {\n        result = templateCompiler(gObj.groupSettings.captionTemplate)(data);\n      }\n\n      appendChildren(node, result);\n    } else {\n      node.innerHTML = cell.column.headerText + ': ' + value + ' - ' + data.count + ' ' + (data.count < 2 ? this.localizer.getConstant('Item') : this.localizer.getConstant('Items'));\n    }\n\n    node.setAttribute('colspan', cell.colSpan.toString());\n    node.setAttribute('aria-label', node.innerHTML + ' is groupcaption cell');\n    node.setAttribute('title', node.innerHTML);\n    return node;\n  };\n\n  return GroupCaptionCellRenderer;\n}(CellRenderer);\n\nexport { GroupCaptionCellRenderer };\n/**\n * GroupCaptionEmptyCellRenderer class which responsible for building group caption empty cell.\n * @hidden\n */\n\nvar GroupCaptionEmptyCellRenderer =\n/** @class */\nfunction (_super) {\n  __extends(GroupCaptionEmptyCellRenderer, _super);\n\n  function GroupCaptionEmptyCellRenderer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.element = _this.parent.createElement('TD', {\n      className: 'e-groupcaption'\n    });\n    return _this;\n  }\n  /**\n   * Function to render the cell content based on Column object.\n   * @param  {Cell} cell\n   * @param  {Object} data\n   */\n\n\n  GroupCaptionEmptyCellRenderer.prototype.render = function (cell, data) {\n    var node = this.element.cloneNode();\n    node.innerHTML = '&nbsp;';\n    node.setAttribute('colspan', cell.colSpan.toString());\n    return node;\n  };\n\n  return GroupCaptionEmptyCellRenderer;\n}(CellRenderer);\n\nexport { GroupCaptionEmptyCellRenderer };","map":null,"metadata":{},"sourceType":"module"}