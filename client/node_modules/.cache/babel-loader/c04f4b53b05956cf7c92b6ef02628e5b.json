{"ast":null,"code":"import { EventHandler, closest, isNullOrUndefined, KeyboardEvents } from '@syncfusion/ej2-base';\nimport { getValue, addClass, removeClass, remove, createElement } from '@syncfusion/ej2-base';\nimport { TextBox } from '@syncfusion/ej2-inputs';\nimport { DropDownButton } from '@syncfusion/ej2-splitbuttons';\nimport { read } from '../common/operations';\nimport { getLocaleText, searchWordHandler } from '../common/utility';\nimport * as events from '../base/constant';\nimport * as CLS from '../base/classes';\n/**\n * BreadCrumbBar module\n */\n\nvar BreadCrumbBar =\n/** @class */\nfunction () {\n  /**\n   * constructor for addressbar module\n   * @hidden\n   */\n  function BreadCrumbBar(parent) {\n    this.addressPath = '';\n    this.addressBarLink = '';\n    this.searchTimer = null;\n    this.searchWrapWidth = null;\n    this.parent = parent;\n    this.keyConfigs = {\n      enter: 'enter'\n    };\n    this.render();\n  }\n\n  BreadCrumbBar.prototype.onPropertyChanged = function (e) {\n    if (e.module !== this.getModuleName() && e.module !== 'common') {\n      return;\n    }\n\n    for (var _i = 0, _a = Object.keys(e.newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'searchSettings':\n          var value = e.newProp.searchSettings;\n\n          if (!isNullOrUndefined(value.allowSearchOnTyping)) {\n            this.searchEventBind(value.allowSearchOnTyping);\n          }\n\n          if (this.parent.breadcrumbbarModule.searchObj.value && this.parent.breadcrumbbarModule.searchObj.value !== '' && !(!isNullOrUndefined(value.allowSearchOnTyping) && isNullOrUndefined(value.filterType) && isNullOrUndefined(value.ignoreCase))) {\n            searchWordHandler(this.parent, this.parent.breadcrumbbarModule.searchObj.value, false);\n          }\n\n          break;\n      }\n    }\n  };\n\n  BreadCrumbBar.prototype.render = function () {\n    this.addEventListener();\n  };\n\n  BreadCrumbBar.prototype.onPathChange = function () {\n    var pathNames = this.parent.pathNames;\n    var paths = this.parent.path.split('/');\n    var addressbarUL = this.parent.createElement('ul', {\n      className: 'e-addressbar-ul'\n    });\n    var addressbarLI = null;\n    var pathNamesLen = pathNames.length;\n\n    if (pathNames.length > 0) {\n      var id = '';\n\n      for (var i = 0; i < pathNamesLen; i++) {\n        var addressATag = null;\n        addressbarLI = this.parent.createElement('li', {\n          className: 'e-address-list-item'\n        });\n\n        for (var j = 0; j <= i; j++) {\n          id = id + paths[j] + '/';\n        }\n\n        addressbarLI.setAttribute('data-utext', id);\n\n        if (i !== 0) {\n          var icon = createElement('span', {\n            className: CLS.ICONS\n          });\n          addressbarLI.appendChild(icon);\n        }\n\n        if (pathNamesLen - i !== 1) {\n          addressATag = createElement('a', {\n            className: CLS.LIST_TEXT\n          });\n          addressbarLI.setAttribute('tabindex', '0');\n        } else {\n          addressATag = createElement('span', {\n            className: CLS.LIST_TEXT\n          });\n        }\n\n        id = '';\n        addressATag.innerText = pathNames[i];\n        addressbarLI.appendChild(addressATag);\n        addressbarUL.appendChild(addressbarLI);\n      }\n\n      var ulElement = this.parent.breadCrumbBarNavigation.querySelector('.e-addressbar-ul');\n\n      if (!isNullOrUndefined(ulElement)) {\n        if (!isNullOrUndefined(this.subMenuObj)) {\n          this.subMenuObj.destroy();\n        }\n\n        remove(ulElement);\n      }\n\n      var searchWrap = this.parent.breadCrumbBarNavigation.querySelector('.e-search-wrap');\n\n      if (!searchWrap) {\n        this.parent.breadCrumbBarNavigation.insertBefore(addressbarUL, searchWrap);\n      } else {\n        this.parent.breadCrumbBarNavigation.appendChild(addressbarUL);\n      }\n\n      this.updateBreadCrumbBar(addressbarUL);\n    }\n  };\n  /* istanbul ignore next */\n\n\n  BreadCrumbBar.prototype.updateBreadCrumbBar = function (addresBarUL) {\n    var liElements = addresBarUL.querySelectorAll('li');\n    var ulElement = this.parent.breadCrumbBarNavigation.querySelector('.e-addressbar-ul');\n    var style = window.getComputedStyle(ulElement, null);\n    var pRight = parseFloat(style.getPropertyValue('padding-right'));\n    var pLeft = parseFloat(style.getPropertyValue('padding-left'));\n    var breadCrumbBarWidth = ulElement.offsetWidth - pRight - pLeft;\n    var addressbarUL = this.parent.createElement('ul', {\n      className: 'e-addressbar-ul'\n    });\n    var liElementsWidth = 0;\n    var liElementsWidths = [];\n\n    for (var i = 0; i < liElements.length; i++) {\n      var width = liElements[i].clientWidth;\n      liElementsWidths.push(width);\n      liElementsWidth = liElementsWidth + width;\n    }\n\n    if (!isNullOrUndefined(ulElement)) {\n      remove(ulElement);\n    }\n\n    var searchContainer = this.parent.createElement('div');\n    searchContainer.setAttribute('class', 'e-search-wrap');\n    var id = this.parent.element.id + CLS.SEARCH_ID;\n    var searchInput = createElement('input', {\n      id: id,\n      attrs: {\n        autocomplete: 'off',\n        'aria-label': getLocaleText(this.parent, 'Search')\n      }\n    });\n    searchContainer.appendChild(searchInput);\n    var searchEle = this.parent.breadCrumbBarNavigation.querySelector('.e-search-wrap .e-input');\n\n    if (isNullOrUndefined(searchEle)) {\n      this.parent.breadCrumbBarNavigation.appendChild(searchContainer);\n      var span = createElement('span', {\n        className: 'e-icons e-fe-search'\n      });\n      EventHandler.add(span, 'click', this.onShowInput, this);\n      searchInput.parentElement.insertBefore(span, searchInput);\n      this.searchObj = new TextBox({\n        value: '',\n        showClearButton: true,\n        placeholder: getLocaleText(this.parent, 'Search'),\n        focus: this.onFocus.bind(this),\n        blur: this.onBlur.bind(this)\n      });\n      this.searchObj.appendTo('#' + this.parent.element.id + CLS.SEARCH_ID);\n      this.searchEventBind(this.parent.searchSettings.allowSearchOnTyping);\n      var search = this.searchObj.element.nextElementSibling;\n      EventHandler.add(search, 'mousedown', this.searchChangeHandler.bind(this), this);\n      EventHandler.add(this.searchObj.element, 'keyup', this.onKeyUp.bind(this), this);\n    }\n\n    var searchWrap = this.parent.breadCrumbBarNavigation.querySelector('.e-search-wrap');\n    breadCrumbBarWidth = breadCrumbBarWidth - (this.searchWrapWidth ? this.searchWrapWidth : searchWrap.offsetWidth);\n\n    if (liElementsWidth > breadCrumbBarWidth) {\n      var i = liElements.length;\n\n      while (i--) {\n        var diff = breadCrumbBarWidth - liElementsWidths[i];\n\n        if (diff > 40) {\n          addressbarUL.insertBefore(liElements[i], addressbarUL.querySelector('li'));\n          breadCrumbBarWidth = diff;\n        } else {\n          var items = [];\n\n          for (var j = 0; j <= i; j++) {\n            var liElement = liElements[j];\n            items.push({\n              text: liElement.innerText,\n              utext: liElement.getAttribute('data-utext')\n            });\n          }\n\n          var subMenuLi = this.parent.createElement('li', {\n            className: 'e-breadcrumb-menu'\n          });\n          var attributes = {\n            className: 'e-breadcrumb-submenu'\n          };\n          var subMenuSpan = this.parent.createElement('button', attributes);\n          subMenuLi.appendChild(subMenuSpan);\n          addressbarUL.insertBefore(subMenuLi, addressbarUL.querySelector('li'));\n          this.subMenuObj = new DropDownButton({\n            items: items,\n            cssClass: 'e-caret-hide e-submenu',\n            iconCss: CLS.ICON_BREADCRUMB,\n            iconPosition: 'Top',\n            enableHtmlSanitizer: this.parent.enableHtmlSanitizer,\n            beforeItemRender: this.addSubMenuAttributes.bind(this),\n            select: this.subMenuSelectOperations.bind(this)\n          });\n          this.subMenuObj.isStringTemplate = true;\n          this.subMenuObj.appendTo(subMenuSpan);\n          break;\n        }\n      }\n\n      this.parent.breadCrumbBarNavigation.insertBefore(addressbarUL, searchWrap);\n    } else {\n      this.parent.breadCrumbBarNavigation.insertBefore(addresBarUL, searchWrap);\n    }\n  };\n  /* istanbul ignore next */\n\n\n  BreadCrumbBar.prototype.onFocus = function () {\n    var wrap = closest(this.searchObj.element, '.e-search-wrap');\n    wrap.classList.add('e-focus');\n  };\n  /* istanbul ignore next */\n\n\n  BreadCrumbBar.prototype.onKeyUp = function () {\n    this.parent.notify(events.pathColumn, {\n      args: this.parent\n    });\n  };\n  /* istanbul ignore next */\n\n\n  BreadCrumbBar.prototype.onBlur = function () {\n    var wrap = closest(this.searchObj.element, '.e-search-wrap');\n    wrap.classList.remove('e-focus');\n  };\n  /* istanbul ignore next */\n\n\n  BreadCrumbBar.prototype.subMenuSelectOperations = function (event) {\n    var args = {\n      target: event.element\n    };\n    this.addressPathClickHandler(args);\n  };\n  /* istanbul ignore next */\n\n\n  BreadCrumbBar.prototype.addSubMenuAttributes = function (args) {\n    args.element.setAttribute('data-utext', getValue('utext', args.item));\n    var anchor = this.parent.createElement('a', {\n      className: 'e-list-text'\n    });\n    args.element.appendChild(anchor);\n  };\n\n  BreadCrumbBar.prototype.searchEventBind = function (allow) {\n    if (allow) {\n      this.searchObj.input = this.searchChangeHandler.bind(this);\n      this.searchObj.change = null;\n    } else {\n      this.searchObj.change = this.searchChangeHandler.bind(this);\n      this.searchObj.input = null;\n    }\n  };\n\n  BreadCrumbBar.prototype.searchChangeHandler = function (args) {\n    var _this = this;\n\n    if (!isNullOrUndefined(args.value)) {\n      this.parent.isFiltered = false;\n\n      if (this.parent.searchSettings.allowSearchOnTyping) {\n        window.clearTimeout(this.searchTimer);\n        this.searchTimer = window.setTimeout(function () {\n          searchWordHandler(_this.parent, args.value, false);\n        }, 300);\n      } else {\n        searchWordHandler(this.parent, args.value, false);\n      }\n    }\n  };\n\n  BreadCrumbBar.prototype.addressPathClickHandler = function (e) {\n    var li = e.target;\n\n    if (li.nodeName === 'LI' || li.nodeName === 'A') {\n      var node = li.nodeName === 'LI' ? li.children[0] : li;\n\n      if (!isNullOrUndefined(node)) {\n        this.parent.isFiltered = false;\n        var currentPath = this.updatePath(node);\n        this.parent.itemData = [getValue(this.parent.pathId[this.parent.pathId.length - 1], this.parent.feParent)];\n        this.triggerFileOpen(this.parent.itemData[0]);\n        read(this.parent, events.pathChanged, currentPath);\n        var treeNodeId = this.parent.pathId[this.parent.pathId.length - 1];\n        this.parent.notify(events.updateTreeSelection, {\n          module: 'treeview',\n          selectedNode: treeNodeId\n        });\n      }\n    }\n  };\n\n  BreadCrumbBar.prototype.triggerFileOpen = function (data) {\n    var eventArgs = {\n      cancel: false,\n      fileDetails: data,\n      module: 'BreadCrumbBar'\n    };\n    delete eventArgs.cancel;\n    this.parent.trigger('fileOpen', eventArgs);\n  };\n  /* istanbul ignore next */\n\n\n  BreadCrumbBar.prototype.onShowInput = function () {\n    if (this.parent.isMobile) {\n      if (this.parent.element.classList.contains(CLS.FILTER)) {\n        removeClass([this.parent.element], CLS.FILTER);\n        this.searchWrapWidth = null;\n      } else {\n        var searchWrap = this.parent.breadCrumbBarNavigation.querySelector('.e-search-wrap');\n        this.searchWrapWidth = searchWrap.offsetWidth;\n        addClass([this.parent.element], CLS.FILTER);\n        this.searchObj.element.focus();\n      }\n    }\n  };\n\n  BreadCrumbBar.prototype.updatePath = function (list) {\n    var li = closest(list, 'li');\n    var liElementId = li.getAttribute('data-utext');\n    this.addressBarLink = liElementId;\n    var link = this.addressBarLink.split('/');\n    var ids = this.parent.pathId;\n    var names = this.parent.pathNames;\n    this.parent.pathId = [];\n    this.parent.pathNames = [];\n    var newpath = '';\n\n    for (var i = 0, len = link.length - 1; i < len; i++) {\n      this.parent.pathId.push(ids[i]);\n      this.parent.pathNames.push(names[i]);\n      newpath += link[i] + '/';\n    }\n\n    this.parent.setProperties({\n      path: newpath\n    }, true);\n    return newpath;\n  };\n\n  BreadCrumbBar.prototype.onUpdatePath = function () {\n    this.onPathChange();\n    this.removeSearchValue();\n  };\n\n  BreadCrumbBar.prototype.onCreateEnd = function () {\n    this.onPathChange();\n  };\n\n  BreadCrumbBar.prototype.onRenameEnd = function () {\n    this.onPathChange();\n  };\n  /* istanbul ignore next */\n\n\n  BreadCrumbBar.prototype.onDeleteEnd = function () {\n    this.onUpdatePath();\n  };\n  /* istanbul ignore next */\n\n\n  BreadCrumbBar.prototype.removeSearchValue = function () {\n    this.parent.isFiltered = false;\n\n    if (this.searchObj && (this.searchObj.value !== '' || this.searchObj.element.value !== '')) {\n      this.searchObj.value = '';\n      this.searchObj.element.value = '';\n      this.searchObj.dataBind();\n    }\n  };\n\n  BreadCrumbBar.prototype.onResize = function () {\n    this.onPathChange();\n  };\n\n  BreadCrumbBar.prototype.onPasteEnd = function (args) {\n    this.onPathChange();\n  };\n\n  BreadCrumbBar.prototype.addEventListener = function () {\n    this.keyboardModule = new KeyboardEvents(this.parent.breadCrumbBarNavigation, {\n      keyAction: this.keyActionHandler.bind(this),\n      keyConfigs: this.keyConfigs,\n      eventName: 'keydown'\n    });\n    this.parent.on(events.modelChanged, this.onPropertyChanged, this);\n    EventHandler.add(this.parent.breadCrumbBarNavigation, 'click', this.addressPathClickHandler, this);\n    this.parent.on(events.destroy, this.destroy, this);\n    this.parent.on(events.pathChanged, this.onUpdatePath, this);\n    this.parent.on(events.finalizeEnd, this.onUpdatePath, this);\n    this.parent.on(events.refreshEnd, this.onUpdatePath, this);\n    this.parent.on(events.openEnd, this.onUpdatePath, this);\n    this.parent.on(events.createEnd, this.onCreateEnd, this);\n    this.parent.on(events.renameEnd, this.onRenameEnd, this);\n    this.parent.on(events.deleteEnd, this.onDeleteEnd, this);\n    this.parent.on(events.splitterResize, this.onResize, this);\n    this.parent.on(events.pasteEnd, this.onPasteEnd, this);\n    this.parent.on(events.resizeEnd, this.onResize, this);\n    this.parent.on(events.searchTextChange, this.onSearchTextChange, this);\n    this.parent.on(events.dropInit, this.onDropInit, this);\n    this.parent.on(events.layoutRefresh, this.onResize, this);\n    this.parent.on(events.dropPath, this.onPathChange, this);\n  };\n\n  BreadCrumbBar.prototype.keyActionHandler = function (e) {\n    switch (e.action) {\n      case 'enter':\n        this.addressPathClickHandler(e);\n        break;\n    }\n  };\n\n  BreadCrumbBar.prototype.removeEventListener = function () {\n    this.keyboardModule.destroy();\n    this.parent.off(events.pathChanged, this.onUpdatePath);\n    this.parent.off(events.finalizeEnd, this.onUpdatePath);\n    this.parent.off(events.refreshEnd, this.onUpdatePath);\n    this.parent.off(events.openEnd, this.onUpdatePath);\n    this.parent.off(events.pasteEnd, this.onPasteEnd);\n    this.parent.off(events.createEnd, this.onCreateEnd);\n    this.parent.off(events.renameEnd, this.onRenameEnd);\n    this.parent.off(events.deleteEnd, this.onDeleteEnd);\n    this.parent.off(events.splitterResize, this.onResize);\n    this.parent.off(events.resizeEnd, this.onResize);\n    this.parent.off(events.searchTextChange, this.onSearchTextChange);\n    this.parent.off(events.dropInit, this.onDropInit);\n    this.parent.off(events.layoutRefresh, this.onResize);\n    this.parent.off(events.dropPath, this.onPathChange);\n  };\n  /* istanbul ignore next */\n\n\n  BreadCrumbBar.prototype.onDropInit = function (args) {\n    if (this.parent.targetModule === this.getModuleName()) {\n      var liEle = args.target.closest('li');\n      this.parent.dropPath = this.updatePath(liEle.children[0]);\n      this.parent.dropData = getValue(this.parent.pathId[this.parent.pathId.length - 1], this.parent.feParent);\n      this.triggerFileOpen(this.parent.dropData);\n      var treeNodeId = this.parent.pathId[this.parent.pathId.length - 1];\n      this.parent.notify(events.updateTreeSelection, {\n        module: 'treeview',\n        selectedNode: treeNodeId\n      });\n    }\n  };\n  /**\n   * For internal use only - Get the module name.\n   *  @private\n   */\n\n\n  BreadCrumbBar.prototype.getModuleName = function () {\n    return 'breadcrumbbar';\n  };\n\n  BreadCrumbBar.prototype.destroy = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.removeEventListener();\n    /* istanbul ignore next */\n\n    if (!isNullOrUndefined(this.subMenuObj)) {\n      this.subMenuObj.destroy();\n    }\n\n    if (!isNullOrUndefined(this.searchObj)) {\n      this.searchObj.destroy();\n    }\n  };\n\n  BreadCrumbBar.prototype.onSearchTextChange = function (args) {\n    this.searchObj.element.placeholder = getLocaleText(this.parent, 'Search') + ' ' + args.cwd.name;\n  };\n\n  return BreadCrumbBar;\n}();\n\nexport { BreadCrumbBar };","map":null,"metadata":{},"sourceType":"module"}