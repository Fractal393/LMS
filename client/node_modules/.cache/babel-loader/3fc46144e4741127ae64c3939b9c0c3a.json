{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useInternalFileActionRequester = exports.useInternalFileActionDispatcher = void 0;\n\nvar react_1 = require(\"react\");\n\nvar recoil_1 = require(\"recoil\");\n\nvar file_actions_recoil_1 = require(\"../recoil/file-actions.recoil\");\n\nvar files_recoil_1 = require(\"../recoil/files.recoil\");\n\nvar options_recoil_1 = require(\"../recoil/options.recoil\");\n\nvar selection_recoil_1 = require(\"../recoil/selection.recoil\");\n\nvar sort_recoil_1 = require(\"../recoil/sort.recoil\");\n\nvar special_actions_recoil_1 = require(\"../recoil/special-actions.recoil\");\n\nvar sort_types_1 = require(\"../types/sort.types\");\n\nvar special_actions_types_1 = require(\"../types/special-actions.types\");\n\nvar hooks_helpers_1 = require(\"./hooks-helpers\");\n\nvar logger_1 = require(\"./logger\");\n\nvar selection_1 = require(\"./selection\");\n\nvar validation_1 = require(\"./validation\");\n\nexports.useInternalFileActionDispatcher = function (externalFileActonHandler) {\n  var externalFileActonHandlerRef = hooks_helpers_1.useInstanceVariable(externalFileActonHandler);\n  var fileActionMapRef = hooks_helpers_1.useInstanceVariable(recoil_1.useRecoilValue(file_actions_recoil_1.fileActionMapState));\n  var dispatchFileAction = react_1.useCallback(function (actionData) {\n    logger_1.Logger.debug(\"FILE ACTION DISPATCH:\", actionData);\n    var actionId = actionData.actionId;\n    var action = fileActionMapRef.current[actionId];\n\n    if (action) {\n      if (validation_1.isFunction(externalFileActonHandlerRef.current)) {\n        Promise.resolve(externalFileActonHandlerRef.current(action, actionData)).catch(function (error) {\n          return logger_1.Logger.error(\"User-defined \\\"onAction\\\" handler threw an error: \" + error.message);\n        });\n      }\n    } else {\n      logger_1.Logger.error(\"Internal components dispatched a \\\"\" + actionId + \"\\\" file action, \" + \"but such action was not registered.\");\n    }\n  }, [externalFileActonHandlerRef, fileActionMapRef]);\n  return dispatchFileAction;\n};\n\nexports.useInternalFileActionRequester = function () {\n  // Write Recoil state to instance variables so we can access these values from\n  // the callback below without re-creating the callback function\n  var fileActionMapRef = hooks_helpers_1.useInstanceVariable(recoil_1.useRecoilValue(file_actions_recoil_1.fileActionMapState));\n  var setSortConfigRef = hooks_helpers_1.useInstanceVariable(recoil_1.useSetRecoilState(sort_recoil_1.sortConfigState));\n  var setOptionMapRef = hooks_helpers_1.useInstanceVariable(recoil_1.useSetRecoilState(options_recoil_1.optionMapState));\n  var dispatchFileActionRef = hooks_helpers_1.useInstanceVariable(recoil_1.useRecoilValue(file_actions_recoil_1.dispatchFileActionState));\n  var dispatchSpecialActionRef = hooks_helpers_1.useInstanceVariable(recoil_1.useRecoilValue(special_actions_recoil_1.dispatchSpecialActionState));\n  var filesRef = hooks_helpers_1.useInstanceVariable(recoil_1.useRecoilValue(files_recoil_1.filesState));\n  var selectionRef = hooks_helpers_1.useInstanceVariable(recoil_1.useRecoilValue(selection_recoil_1.selectionState));\n  return react_1.useCallback(function (fileActionId) {\n    logger_1.Logger.debug(\"FILE ACTION REQUEST:\", fileActionId);\n    var action = fileActionMapRef.current[fileActionId];\n\n    if (!action) {\n      logger_1.Logger.warn(\"Internal components requested the \\\"\" + fileActionId + \"\\\" file \" + \"action, but such action was not registered.\");\n      return;\n    } // Determine files for the action if action requires selection\n\n\n    var selectedFilesForAction = action.requiresSelection ? selection_1.SelectionHelper.getSelectedFiles(filesRef.current, selectionRef.current, action.fileFilter) : undefined;\n\n    if (action.requiresSelection && (!selectedFilesForAction || selectedFilesForAction.length === 0)) {\n      logger_1.Logger.warn(\"Internal components requested the \\\"\" + fileActionId + \"\\\" file \" + \"action, but the selection for this action was empty. This \" + \"might a bug in the code of the presentational components.\");\n      return;\n    }\n\n    var actionData = {\n      actionId: action.id,\n      target: undefined,\n      files: selectedFilesForAction\n    }; //\n    // === Dispatch a normal action, as usual\n\n    dispatchFileActionRef.current(actionData); //\n    // === Update sort state if necessary\n\n    var sortKeySelector = action.sortKeySelector;\n\n    if (sortKeySelector) {\n      setSortConfigRef.current(function (sortConfig) {\n        var order = sort_types_1.SortOrder.Asc;\n\n        if (sortConfig.fileActionId === action.id) {\n          order = sortConfig.order === sort_types_1.SortOrder.Asc ? sort_types_1.SortOrder.Desc : sort_types_1.SortOrder.Asc;\n        }\n\n        return {\n          fileActionId: action.id,\n          sortKeySelector: sortKeySelector,\n          order: order\n        };\n      });\n    } //\n    // === Update option state if necessary\n\n\n    var option = action.option;\n\n    if (option) {\n      setOptionMapRef.current(function (optionMap) {\n        var newOptionMap = __assign({}, optionMap);\n\n        newOptionMap[option.id] = !optionMap[option.id];\n        return newOptionMap;\n      });\n    } //\n    // === Dispatch a special action if file action defines it\n\n\n    var specialActionId = action.specialActionToDispatch;\n\n    if (specialActionId) {\n      // We can only dispatch \"simple\" special actions, i.e. special\n      // actions that do not require additional parameters.\n      switch (specialActionId) {\n        case special_actions_types_1.SpecialAction.OpenParentFolder:\n        case special_actions_types_1.SpecialAction.ToggleSearchBar:\n        case special_actions_types_1.SpecialAction.SelectAllFiles:\n        case special_actions_types_1.SpecialAction.ClearSelection:\n          dispatchSpecialActionRef.current({\n            actionId: specialActionId\n          });\n          break;\n\n        default:\n          logger_1.Logger.warn(\"File action \\\"\" + action.id + \"\\\" tried to dispatch a \" + (\"special action \\\"\" + specialActionId + \"\\\", but that \") + \"special action was not marked as simple. File \" + \"actions can only trigger simple special actions.\");\n      }\n    }\n  }, [fileActionMapRef, setSortConfigRef, setOptionMapRef, dispatchFileActionRef, dispatchSpecialActionRef, filesRef, selectionRef]);\n};","map":null,"metadata":{},"sourceType":"script"}