{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * ShapeLayouter.ts class for EJ2-PDF\n * @private\n */\n\n\nimport { ElementLayouter, PdfLayoutResult } from './element-layouter';\nimport { RectangleF, PointF } from './../../../drawing/pdf-drawing';\nimport { PdfLayoutBreakType, PdfLayoutType } from './../../figures/enum';\nimport { BeginPageLayoutEventArgs, EndPageLayoutEventArgs } from './../../../structured-elements/grid/layout/grid-layouter';\n/**\n * ShapeLayouter class.\n * @private\n */\n\nvar ShapeLayouter =\n/** @class */\nfunction (_super) {\n  __extends(ShapeLayouter, _super); // Constructors\n\n  /**\n   * Initializes a new instance of the `ShapeLayouter` class.\n   * @private\n   */\n\n\n  function ShapeLayouter(element) {\n    var _this = _super.call(this, element) || this; // Fields\n\n    /**\n     * Initializes the object to store `older form elements` of previous page.\n     * @default 0\n     * @private\n     */\n\n\n    _this.olderPdfForm = 0;\n    /**\n     * The `bounds` of the shape element.\n     * * @default new RectangleF()\n     * @private\n     */\n\n    _this.shapeBounds = new RectangleF();\n    /**\n     * Total Page size of the web page.\n     * * @default 0\n     * @private\n     */\n\n    _this.totalPageSize = 0;\n    return _this;\n  }\n\n  Object.defineProperty(ShapeLayouter.prototype, \"element\", {\n    // Properties\n\n    /**\n     * Gets shape element.\n     * @private\n     */\n    get: function () {\n      return this.elements;\n    },\n    enumerable: true,\n    configurable: true\n  }); // Implementation\n\n  /**\n   * Layouts the element.\n   * @private\n   */\n\n  ShapeLayouter.prototype.layoutInternal = function (param) {\n    var currentPage = param.page;\n    var currentBounds = param.bounds;\n    var shapeLayoutBounds = this.element.getBounds();\n    shapeLayoutBounds.x = 0;\n    shapeLayoutBounds.y = 0;\n    /* tslint:disable */\n\n    var isEmpty = this.shapeBounds.x === this.shapeBounds.y && this.shapeBounds.y === this.shapeBounds.width && this.shapeBounds.width === this.shapeBounds.height && this.shapeBounds.height === 0 ? true : false;\n    /* tslint:enable */\n\n    if (this.isPdfGrid && !isEmpty) {\n      shapeLayoutBounds = this.shapeBounds;\n    }\n\n    var result = null;\n    var pageResult = new ShapeLayoutResult();\n    pageResult.page = currentPage;\n    /*tslint:disable:no-constant-condition */\n\n    while (true) {\n      // Raise event.\n      var result1 = this.raiseBeforePageLayout(currentPage, currentBounds);\n      currentBounds = result1.currentBounds;\n      var endArgs = null;\n\n      if (!result1.cancel) {\n        pageResult = this.layoutOnPage(currentPage, currentBounds, shapeLayoutBounds, param); // Raise event.\n\n        endArgs = this.raiseEndPageLayout(pageResult);\n        result1.cancel = endArgs === null ? false : endArgs.cancel;\n      }\n\n      if (!pageResult.end && !result1.cancel) {\n        currentBounds = this.getPaginateBounds(param);\n        shapeLayoutBounds = this.getNextShapeBounds(shapeLayoutBounds, pageResult);\n        currentPage = endArgs === null || endArgs.nextPage === null ? this.getNextPage(currentPage) : endArgs.nextPage;\n\n        if (this.isPdfGrid) {\n          result = this.getLayoutResult(pageResult);\n          break;\n        }\n      } else {\n        result = this.getLayoutResult(pageResult);\n        break;\n      }\n    }\n\n    return result;\n  };\n  /**\n   * Raises BeforePageLayout event.\n   * @private\n   */\n\n\n  ShapeLayouter.prototype.raiseBeforePageLayout = function (currentPage, currentBounds) {\n    var cancel = false;\n\n    if (this.element.raiseBeginPageLayout) {\n      var args = new BeginPageLayoutEventArgs(currentBounds, currentPage);\n      this.element.onBeginPageLayout(args);\n      cancel = args.cancel;\n      currentBounds = args.bounds;\n    }\n\n    return {\n      currentBounds: currentBounds,\n      cancel: cancel\n    };\n  };\n  /**\n   * Raises PageLayout event if needed.\n   * @private\n   */\n\n\n  ShapeLayouter.prototype.raiseEndPageLayout = function (pageResult) {\n    var args = null;\n\n    if (this.element.raiseEndPageLayout) {\n      var res = this.getLayoutResult(pageResult);\n      args = new EndPageLayoutEventArgs(res);\n      this.element.onEndPageLayout(args);\n    }\n\n    return args;\n  };\n  /**\n   * Creates layout result.\n   * @private\n   */\n\n\n  ShapeLayouter.prototype.getLayoutResult = function (pageResult) {\n    var result = new PdfLayoutResult(pageResult.page, pageResult.bounds);\n    return result;\n  };\n  /**\n   * Calculates the next active shape bounds.\n   * @private\n   */\n\n\n  ShapeLayouter.prototype.getNextShapeBounds = function (shapeLayoutBounds, pageResult) {\n    var layoutedBounds = pageResult.bounds;\n    shapeLayoutBounds.y = shapeLayoutBounds.y + layoutedBounds.height;\n    shapeLayoutBounds.height = shapeLayoutBounds.height - layoutedBounds.height;\n    return shapeLayoutBounds;\n  };\n  /**\n   * Layouts the element on the current page.\n   * @private\n   */\n\n\n  ShapeLayouter.prototype.layoutOnPage = function (currentPage, curBounds, sBounds, param) {\n    var result = new ShapeLayoutResult();\n    curBounds = this.checkCorrectCurrentBounds(currentPage, curBounds, param);\n    var fitToPage = this.fitsToBounds(curBounds, sBounds);\n    var canDraw = !(param.format.break === PdfLayoutBreakType.FitElement && !fitToPage && currentPage === param.page);\n    var shapeFinished = false;\n\n    if (canDraw) {\n      var drawRectangle = this.getDrawBounds(curBounds, sBounds);\n      this.drawShape(currentPage.graphics, curBounds, drawRectangle);\n      result.bounds = this.getPageResultBounds(curBounds, sBounds);\n      shapeFinished = curBounds.height >= sBounds.height;\n    }\n\n    result.end = shapeFinished || param.format.layout === PdfLayoutType.OnePage;\n    result.page = currentPage;\n    return result;\n  };\n  /**\n   * Returns Rectangle for element drawing on the page.\n   * @private\n   */\n\n\n  ShapeLayouter.prototype.getDrawBounds = function (currentBounds, shapeLayoutBounds) {\n    var result = currentBounds;\n    result.y = result.y - shapeLayoutBounds.y;\n    result.height = result.height + shapeLayoutBounds.y;\n    return result;\n  };\n  /**\n   * Draws the shape.\n   * @private\n   */\n\n\n  ShapeLayouter.prototype.drawShape = function (g, currentBounds, drawRectangle) {\n    var gState = g.save();\n\n    try {\n      g.setClip(currentBounds);\n      this.element.drawGraphicsHelper(g, new PointF(drawRectangle.x, drawRectangle.y));\n    } finally {\n      g.restore(gState);\n    }\n  };\n  /**\n   * Corrects current bounds on the page.\n   * @protected\n   */\n\n\n  ShapeLayouter.prototype.checkCorrectCurrentBounds = function (currentPage, curBounds, param) {\n    var pageSize = currentPage.graphics.clientSize;\n    curBounds.width = curBounds.width > 0 ? curBounds.width : pageSize.width - curBounds.x;\n    curBounds.height = curBounds.height > 0 ? curBounds.height : pageSize.height - curBounds.y;\n\n    if (this.isPdfGrid) {\n      curBounds.height = curBounds.height - this.bottomCellPadding;\n    }\n\n    return curBounds;\n  };\n  /**\n   * Calculates bounds where the shape was layout on the page.\n   * @private\n   */\n\n\n  ShapeLayouter.prototype.getPageResultBounds = function (currentBounds, shapeLayoutBounds) {\n    var result = currentBounds;\n    result.height = Math.min(result.height, shapeLayoutBounds.height);\n    return result;\n  };\n  /**\n   * Checks whether shape rectangle fits to the lay outing bounds.\n   * @private\n   */\n\n\n  ShapeLayouter.prototype.fitsToBounds = function (currentBounds, shapeLayoutBounds) {\n    var fits = shapeLayoutBounds.height <= currentBounds.height;\n    return fits;\n  };\n  /**\n   * Initializes the offset `index`.\n   * * @default 0\n   * @private\n   */\n\n\n  ShapeLayouter.index = 0;\n  /**\n   * Initializes the `difference in page height`.\n   * * @default 0\n   * @private\n   */\n\n  ShapeLayouter.splitDiff = 0;\n  /**\n   * Determines the `end of Vertical offset` values.\n   * * @default false\n   * @private\n   */\n\n  ShapeLayouter.last = false;\n  /**\n   * Determines the document link annotation `border width`.\n   * * @default 0\n   * @private\n   */\n\n  ShapeLayouter.borderWidth = 0;\n  return ShapeLayouter;\n}(ElementLayouter);\n\nexport { ShapeLayouter };\n/**\n * Contains lay outing result settings.\n * @private\n */\n\nvar ShapeLayoutResult =\n/** @class */\nfunction () {\n  function ShapeLayoutResult() {}\n\n  return ShapeLayoutResult;\n}();","map":null,"metadata":{},"sourceType":"module"}