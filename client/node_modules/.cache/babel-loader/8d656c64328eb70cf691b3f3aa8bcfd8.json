{"ast":null,"code":"import Helper from './Helper';\nexport default class FuzzySearch {\n  constructor(haystack = [], keys = [], options = {}) {\n    if (!Array.isArray(keys)) {\n      options = keys;\n      keys = [];\n    }\n\n    this.haystack = haystack;\n    this.keys = keys;\n    this.options = Object.assign({\n      caseSensitive: false,\n      sort: false\n    }, options);\n  }\n\n  search(query = '') {\n    if (query === '') {\n      return this.haystack;\n    }\n\n    const results = [];\n\n    for (let i = 0; i < this.haystack.length; i++) {\n      const item = this.haystack[i];\n\n      if (this.keys.length === 0) {\n        const score = FuzzySearch.isMatch(item, query, this.options.caseSensitive);\n\n        if (score) {\n          results.push({\n            item,\n            score\n          });\n        }\n      } else {\n        for (let y = 0; y < this.keys.length; y++) {\n          const propertyValues = Helper.getDescendantProperty(item, this.keys[y]);\n          let found = false;\n\n          for (let z = 0; z < propertyValues.length; z++) {\n            const score = FuzzySearch.isMatch(propertyValues[z], query, this.options.caseSensitive);\n\n            if (score) {\n              found = true;\n              results.push({\n                item,\n                score\n              });\n              break;\n            }\n          }\n\n          if (found) {\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.options.sort) {\n      results.sort((a, b) => a.score - b.score);\n    }\n\n    return results.map(result => result.item);\n  }\n\n  static isMatch(item, query, caseSensitive) {\n    item = String(item);\n    query = String(query);\n\n    if (!caseSensitive) {\n      item = item.toLocaleLowerCase();\n      query = query.toLocaleLowerCase();\n    }\n\n    const indexes = FuzzySearch.nearestIndexesFor(item, query);\n\n    if (!indexes) {\n      return false;\n    } // Exact matches should be first.\n\n\n    if (item === query) {\n      return 1;\n    } // If we have more than 2 letters, matches close to each other should be first.\n\n\n    if (indexes.length > 1) {\n      return 2 + (indexes[indexes.length - 1] - indexes[0]);\n    } // Matches closest to the start of the string should be first.\n\n\n    return 2 + indexes[0];\n  }\n\n  static nearestIndexesFor(item, query) {\n    const letters = query.split('');\n    let indexes = [];\n    const indexesOfFirstLetter = FuzzySearch.indexesOfFirstLetter(item, query);\n    indexesOfFirstLetter.forEach((startingIndex, loopingIndex) => {\n      let index = startingIndex + 1;\n      indexes[loopingIndex] = [startingIndex];\n\n      for (let i = 1; i < letters.length; i++) {\n        const letter = letters[i];\n        index = item.indexOf(letter, index);\n\n        if (index === -1) {\n          indexes[loopingIndex] = false;\n          break;\n        }\n\n        indexes[loopingIndex].push(index);\n        index++;\n      }\n    });\n    indexes = indexes.filter(letterIndexes => letterIndexes !== false);\n\n    if (!indexes.length) {\n      return false;\n    }\n\n    return indexes.sort((a, b) => {\n      if (a.length === 1) {\n        return a[0] - b[0];\n      }\n\n      a = a[a.length - 1] - a[0];\n      b = b[b.length - 1] - b[0];\n      return a - b;\n    })[0];\n  }\n\n  static indexesOfFirstLetter(item, query) {\n    const match = query[0];\n    return item.split('').map((letter, index) => {\n      if (letter !== match) {\n        return false;\n      }\n\n      return index;\n    }).filter(index => index !== false);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}