{"ast":null,"code":"/**\r\n * DevExtreme (ui/text_box/texteditor_button_collection/index.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _renderer = require(\"../../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _custom = require(\"./custom\");\n\nvar _custom2 = _interopRequireDefault(_custom);\n\nvar _extend = require(\"../../../core/utils/extend\");\n\nvar _array = require(\"../../../core/utils/array\");\n\nvar _ui = require(\"../../widget/ui.errors\");\n\nvar _ui2 = _interopRequireDefault(_ui);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar TEXTEDITOR_BUTTONS_CONTAINER_CLASS = \"dx-texteditor-buttons-container\";\n\nfunction checkButtonInfo(buttonInfo) {\n  var checkButtonType = function () {\n    if (!buttonInfo || \"object\" !== _typeof(buttonInfo) || Array.isArray(buttonInfo)) {\n      throw _ui2.default.Error(\"E1053\");\n    }\n  };\n\n  var checkLocation = function () {\n    var location = buttonInfo.location;\n\n    if (\"location\" in buttonInfo && \"after\" !== location && \"before\" !== location) {\n      buttonInfo.location = \"after\";\n    }\n  };\n\n  var checkNameIsDefined = function () {\n    if (!(\"name\" in buttonInfo)) {\n      throw _ui2.default.Error(\"E1054\");\n    }\n  };\n\n  var checkNameIsString = function () {\n    var name = buttonInfo.name;\n\n    if (\"string\" !== typeof name) {\n      throw _ui2.default.Error(\"E1055\");\n    }\n  };\n\n  checkButtonType();\n  checkNameIsDefined();\n  checkNameIsString();\n  checkLocation();\n}\n\nfunction checkNamesUniqueness(existingNames, newName) {\n  if (existingNames.indexOf(newName) !== -1) {\n    throw _ui2.default.Error(\"E1055\", newName);\n  }\n\n  existingNames.push(newName);\n}\n\nfunction isPredefinedButtonName(name, predefinedButtonsInfo) {\n  return !!(0, _array.find)(predefinedButtonsInfo, function (info) {\n    return info.name === name;\n  });\n}\n\nvar TextEditorButtonCollection = function () {\n  function TextEditorButtonCollection(editor, defaultButtonsInfo) {\n    _classCallCheck(this, TextEditorButtonCollection);\n\n    this.buttons = [];\n    this.defaultButtonsInfo = defaultButtonsInfo;\n    this.editor = editor;\n  }\n\n  _createClass(TextEditorButtonCollection, [{\n    key: \"_compileButtonInfo\",\n    value: function (buttons) {\n      var _this = this;\n\n      var names = [];\n      return buttons.map(function (button) {\n        var isStringButton = \"string\" === typeof button;\n\n        if (!isStringButton) {\n          checkButtonInfo(button);\n        }\n\n        var isDefaultButton = isStringButton || isPredefinedButtonName(button.name, _this.defaultButtonsInfo);\n\n        if (isDefaultButton) {\n          var defaultButtonInfo = (0, _array.find)(_this.defaultButtonsInfo, function (_ref) {\n            var name = _ref.name;\n            return name === button || name === button.name;\n          });\n\n          if (!defaultButtonInfo) {\n            throw _ui2.default.Error(\"E1056\", _this.editor.NAME, button);\n          }\n\n          checkNamesUniqueness(names, button);\n          return defaultButtonInfo;\n        } else {\n          var name = button.name;\n          checkNamesUniqueness(names, name);\n          return (0, _extend.extend)(button, {\n            Ctor: _custom2.default\n          });\n        }\n      });\n    }\n  }, {\n    key: \"_createButton\",\n    value: function (buttonsInfo) {\n      var Ctor = buttonsInfo.Ctor,\n          options = buttonsInfo.options,\n          name = buttonsInfo.name;\n      var button = new Ctor(name, this.editor, options);\n      this.buttons.push(button);\n      return button;\n    }\n  }, {\n    key: \"_renderButtons\",\n    value: function (buttons, $container, targetLocation) {\n      var _this2 = this;\n\n      var $buttonsContainer = null;\n      var buttonsInfo = buttons ? this._compileButtonInfo(buttons) : this.defaultButtonsInfo;\n\n      var getButtonsContainer = function () {\n        $buttonsContainer = $buttonsContainer || (0, _renderer2.default)(\"<div>\").addClass(TEXTEDITOR_BUTTONS_CONTAINER_CLASS);\n        \"before\" === targetLocation ? $container.prepend($buttonsContainer) : $container.append($buttonsContainer);\n        return $buttonsContainer;\n      };\n\n      buttonsInfo.forEach(function (buttonsInfo) {\n        var _buttonsInfo$location = buttonsInfo.location,\n            location = void 0 === _buttonsInfo$location ? \"after\" : _buttonsInfo$location;\n\n        if (location === targetLocation) {\n          _this2._createButton(buttonsInfo).render(getButtonsContainer());\n        }\n      });\n      return $buttonsContainer;\n    }\n  }, {\n    key: \"clean\",\n    value: function () {\n      this.buttons.forEach(function (button) {\n        return button.dispose();\n      });\n      this.buttons = [];\n    }\n  }, {\n    key: \"getButton\",\n    value: function (buttonName) {\n      var button = (0, _array.find)(this.buttons, function (_ref2) {\n        var name = _ref2.name;\n        return name === buttonName;\n      });\n      return button && button.instance;\n    }\n  }, {\n    key: \"renderAfterButtons\",\n    value: function (buttons, $container) {\n      return this._renderButtons(buttons, $container, \"after\");\n    }\n  }, {\n    key: \"renderBeforeButtons\",\n    value: function (buttons, $container) {\n      return this._renderButtons(buttons, $container, \"before\");\n    }\n  }, {\n    key: \"updateButtons\",\n    value: function (names) {\n      this.buttons.forEach(function (button) {\n        if (!names || names.indexOf(button.name) !== -1) {\n          button.update();\n        }\n      });\n    }\n  }]);\n\n  return TextEditorButtonCollection;\n}();\n\nexports.default = TextEditorButtonCollection;","map":null,"metadata":{},"sourceType":"script"}