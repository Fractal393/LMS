{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.row_dragging.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _sortable = require(\"../sortable\");\n\nvar _sortable2 = _interopRequireDefault(_sortable);\n\nvar _uiGrid_core = require(\"./ui.grid_core.utils\");\n\nvar _browser = require(\"../../core/utils/browser\");\n\nvar _browser2 = _interopRequireDefault(_browser);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar COMMAND_HANDLE_CLASS = \"dx-command-drag\";\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nvar HANDLE_ICON_CLASS = \"drag-icon\";\nvar ROWS_VIEW = \"rowsview\";\nvar SORTABLE_WITHOUT_HANDLE_CLASS = \"dx-sortable-without-handle\";\nvar RowDraggingExtender = {\n  init: function () {\n    this.callBase.apply(this, arguments);\n\n    this._updateHandleColumn();\n  },\n  _allowReordering: function () {\n    var rowDragging = this.option(\"rowDragging\");\n    return !!(rowDragging && (rowDragging.allowReordering || rowDragging.allowDropInsideItem || rowDragging.group));\n  },\n  _updateHandleColumn: function () {\n    var rowDragging = this.option(\"rowDragging\");\n\n    var allowReordering = this._allowReordering();\n\n    var columnsController = this._columnsController;\n    var isHandleColumnVisible = allowReordering && rowDragging.showDragIcons;\n    columnsController && columnsController.addCommandColumn({\n      type: \"drag\",\n      command: \"drag\",\n      visibleIndex: -2,\n      alignment: \"center\",\n      cssClass: COMMAND_HANDLE_CLASS,\n      width: \"auto\",\n      cellTemplate: this._getHandleTemplate(),\n      visible: isHandleColumnVisible\n    });\n    columnsController.columnOption(\"type:drag\", \"visible\", isHandleColumnVisible);\n  },\n  _renderContent: function () {\n    var _this = this;\n\n    var rowDragging = this.option(\"rowDragging\");\n\n    var allowReordering = this._allowReordering();\n\n    var $content = this.callBase.apply(this, arguments);\n    var isFixedTableRendering = this._isFixedTableRendering;\n    var sortableName = \"_sortable\";\n    var sortableFixedName = \"_sortableFixed\";\n    var currentSortableName = isFixedTableRendering ? sortableFixedName : sortableName;\n    var anotherSortableName = isFixedTableRendering ? sortableName : sortableFixedName;\n\n    if (allowReordering && $content.length) {\n      this[currentSortableName] = this._createComponent($content, _sortable2.default, (0, _extend.extend)({\n        component: this.component,\n        contentTemplate: null,\n        filter: \"> table > tbody > .dx-row:not(.dx-freespace-row):not(.dx-virtual-row)\",\n        dragTemplate: this._getDraggableRowTemplate(),\n        handle: rowDragging.showDragIcons && \".\".concat(COMMAND_HANDLE_CLASS),\n        dropFeedbackMode: \"indicate\"\n      }, rowDragging, {\n        onDragStart: function (e) {\n          var _rowDragging$onDragSt;\n\n          var row = e.component.getVisibleRows()[e.fromIndex];\n          e.itemData = row && row.data;\n          var isDataRow = row && \"data\" === row.rowType;\n          e.cancel = !isDataRow;\n          null === (_rowDragging$onDragSt = rowDragging.onDragStart) || void 0 === _rowDragging$onDragSt ? void 0 : _rowDragging$onDragSt.call(rowDragging, e);\n        },\n        dropFeedbackMode: _browser2.default.msie ? \"indicate\" : rowDragging.dropFeedbackMode,\n        onOptionChanged: function (e) {\n          var hasFixedSortable = _this[sortableFixedName];\n\n          if (hasFixedSortable) {\n            if (\"fromIndex\" === e.name || \"toIndex\" === e.name) {\n              _this[anotherSortableName].option(e.name, e.value);\n            }\n          }\n        }\n      }));\n      $content.toggleClass(SORTABLE_WITHOUT_HANDLE_CLASS, !rowDragging.showDragIcons);\n    }\n\n    return $content;\n  },\n  _getDraggableGridOptions: function (options) {\n    var gridOptions = this.option();\n    var columns = this.getColumns();\n    var $rowElement = (0, _renderer2.default)(this.getRowElement(options.rowIndex));\n    return {\n      dataSource: [{\n        id: 1,\n        parentId: 0\n      }],\n      showBorders: true,\n      showColumnHeaders: false,\n      scrolling: {\n        useNative: false,\n        showScrollbar: false\n      },\n      pager: {\n        visible: false\n      },\n      loadingTimeout: void 0,\n      columnFixing: gridOptions.columnFixing,\n      columnAutoWidth: gridOptions.columnAutoWidth,\n      showColumnLines: gridOptions.showColumnLines,\n      columns: columns.map(function (column) {\n        return {\n          width: column.width || column.visibleWidth,\n          fixed: column.fixed,\n          fixedPosition: column.fixedPosition\n        };\n      }),\n      onRowPrepared: function (e) {\n        var rowsView = e.component.getView(\"rowsView\");\n        (0, _renderer2.default)(e.rowElement).replaceWith($rowElement.eq(rowsView._isFixedTableRendering ? 1 : 0).clone());\n      }\n    };\n  },\n  _getDraggableRowTemplate: function () {\n    var _this2 = this;\n\n    return function (options) {\n      var $rootElement = _this2.component.$element();\n\n      var $dataGridContainer = (0, _renderer2.default)(\"<div>\").width($rootElement.width());\n\n      var items = _this2._dataController.items();\n\n      var row = items && items[options.fromIndex];\n\n      var gridOptions = _this2._getDraggableGridOptions(row);\n\n      _this2._createComponent($dataGridContainer, _this2.component.NAME, gridOptions);\n\n      $dataGridContainer.find(\".dx-gridbase-container\").children(\":not(.\".concat(_this2.addWidgetPrefix(ROWS_VIEW), \")\")).hide();\n      return $dataGridContainer;\n    };\n  },\n  _getHandleTemplate: function () {\n    var _this3 = this;\n\n    return function (container, options) {\n      if (\"data\" === options.rowType) {\n        (0, _renderer2.default)(container).addClass(CELL_FOCUS_DISABLED_CLASS);\n        return (0, _renderer2.default)(\"<span>\").addClass(_this3.addWidgetPrefix(HANDLE_ICON_CLASS));\n      } else {\n        (0, _uiGrid_core.setEmptyText)((0, _renderer2.default)(container));\n      }\n    };\n  },\n  optionChanged: function (args) {\n    if (\"rowDragging\" === args.name) {\n      this._updateHandleColumn();\n\n      this._invalidate(true, true);\n\n      args.handled = true;\n    }\n\n    this.callBase.apply(this, arguments);\n  }\n};\nmodule.exports = {\n  defaultOptions: function () {\n    return {\n      rowDragging: {\n        showDragIcons: true,\n        dropFeedbackMode: \"indicate\",\n        allowReordering: false,\n        allowDropInsideItem: false\n      }\n    };\n  },\n  extenders: {\n    views: {\n      rowsView: RowDraggingExtender\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}