{"ast":null,"code":"import { ObjectStatus } from './../input-output/enum';\nimport { PdfDictionary } from './../primitives/pdf-dictionary';\nimport { DictionaryProperties } from './pdf-dictionary-properties';\nimport { Operators } from './pdf-operators';\nimport { Dictionary } from './../collections/dictionary';\nimport { PdfReference } from './../primitives/pdf-reference';\nimport { ObjectType } from './cross-table';\nimport { PdfStream } from './../primitives/pdf-stream';\nimport { PdfNumber } from './../primitives/pdf-number';\nimport { PdfCatalog } from './../document/pdf-catalog';\n/**\n * `PdfCrossTable` is responsible for intermediate level parsing\n * and savingof a PDF document.\n * @private\n */\n\nvar PdfCrossTable =\n/** @class */\nfunction () {\n  function PdfCrossTable() {\n    /**\n     * The modified `objects` that should be saved.\n     * @private\n     */\n    this.objects = new Dictionary();\n    /**\n     * Holds `maximal generation number` or offset to object.\n     * @default 0\n     * @private\n     */\n\n    this.maxGenNumIndex = 0;\n    /**\n     * The `number of the objects`.\n     * @default 0\n     * @private\n     */\n\n    this.objectCount = 0;\n    /**\n     * Internal variable for accessing fields from `DictionryProperties` class.\n     * @default new PdfDictionaryProperties()\n     * @private\n     */\n\n    this.dictionaryProperties = new DictionaryProperties();\n  }\n\n  Object.defineProperty(PdfCrossTable.prototype, \"isMerging\", {\n    //Properties\n\n    /**\n     * Gets or sets if the document `is merged`.\n     * @private\n     */\n    get: function () {\n      return this.merging;\n    },\n    set: function (value) {\n      this.merging = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfCrossTable.prototype, \"trailer\", {\n    /**\n     * Gets the `trailer`.\n     * @private\n     */\n    get: function () {\n      if (this.internalTrailer == null) {\n        this.internalTrailer = new PdfStream();\n      }\n\n      return this.internalTrailer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfCrossTable.prototype, \"document\", {\n    /**\n     * Gets or sets the main `PdfDocument` class instance.\n     * @private\n     */\n    get: function () {\n      return this.pdfDocument;\n    },\n    set: function (value) {\n      this.pdfDocument = value;\n      this.items = this.pdfDocument.pdfObjects;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfCrossTable.prototype, \"pdfObjects\", {\n    /**\n     * Gets the catched `PDF object` main collection.\n     * @private\n     */\n    get: function () {\n      return this.items;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfCrossTable.prototype, \"objectCollection\", {\n    /**\n     * Gets the `object collection`.\n     * @private\n     */\n    get: function () {\n      return this.pdfDocument.pdfObjects;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfCrossTable.prototype, \"count\", {\n    /**\n     * Gets or sets the `number of the objects` within the document.\n     * @private\n     */\n    get: function () {\n      return this.objectCount;\n    },\n    set: function (value) {\n      this.objectCount = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfCrossTable.prototype, \"nextObjNumber\", {\n    /**\n     * Returns `next available object number`.\n     * @private\n     */\n    get: function () {\n      this.count = this.count + 1;\n      return this.count;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PdfCrossTable.prototype.save = function (writer, filename) {\n    this.saveHead(writer);\n    var state = false;\n    this.mappedReferences = null;\n    this.objects.clear();\n    this.markTrailerReferences();\n    this.saveObjects(writer);\n    var saveCount = this.count;\n    var xrefPos = writer.position;\n    this.registerObject(0, new PdfReference(0, -1), true);\n    var prevXRef = 0;\n    writer.write(Operators.xref);\n    writer.write(Operators.newLine);\n    this.saveSections(writer);\n    this.saveTrailer(writer, this.count, prevXRef);\n    this.saveTheEndess(writer, xrefPos);\n    this.count = saveCount;\n\n    for (var i = 0; i < this.objectCollection.count; ++i) {\n      var oi = this.objectCollection.items(i);\n      oi.object.isSaving = false;\n    }\n\n    if (typeof filename === 'undefined') {\n      return writer.stream.buffer;\n    } else {\n      writer.stream.save(filename);\n    }\n  };\n  /**\n   * `Saves the endess` of the file.\n   * @private\n   */\n\n\n  PdfCrossTable.prototype.saveTheEndess = function (writer, xrefPos) {\n    writer.write(Operators.newLine + Operators.startxref + Operators.newLine);\n    writer.write(xrefPos.toString() + Operators.newLine);\n    writer.write(Operators.eof + Operators.newLine);\n  };\n  /**\n   * `Saves the new trailer` dictionary.\n   * @private\n   */\n\n\n  PdfCrossTable.prototype.saveTrailer = function (writer, count, prevXRef) {\n    writer.write(Operators.trailer + Operators.newLine); // Save the dictionary.\n\n    var trailer = this.trailer;\n    trailer.items.setValue(this.dictionaryProperties.size, new PdfNumber(this.objectCount + 1));\n    trailer = new PdfDictionary(trailer); // Make it real dictionary.\n\n    trailer.setEncrypt(false);\n    trailer.save(writer);\n  };\n  /**\n   * `Saves the xref section`.\n   * @private\n   */\n\n\n  PdfCrossTable.prototype.saveSections = function (writer) {\n    var objectNum = 0;\n    var count = 0;\n\n    do {\n      count = this.prepareSubsection(objectNum);\n      this.saveSubsection(writer, objectNum, count);\n      objectNum += count;\n    } while (count !== 0);\n  };\n  /**\n   * `Saves a subsection`.\n   * @private\n   */\n\n\n  PdfCrossTable.prototype.saveSubsection = function (writer, objectNum, count) {\n    if (count <= 0 || objectNum >= this.count) {\n      return;\n    }\n\n    var subsectionHead = '{0} {1}{2}';\n    writer.write(objectNum + ' ' + (count + 1) + Operators.newLine);\n\n    for (var i = objectNum; i <= objectNum + count; ++i) {\n      var obj = this.objects.getValue(i);\n      var str = '';\n\n      if (obj.type === ObjectType.Free) {\n        str = this.getItem(obj.offset, 65535, true);\n      } else {\n        str = this.getItem(obj.offset, obj.generation, false);\n      }\n\n      writer.write(str);\n    }\n  };\n  /**\n   * Generates string for `xref table item`.\n   * @private\n   */\n\n\n  PdfCrossTable.prototype.getItem = function (offset, genNumber, isFree) {\n    var returnString = '';\n    var addOffsetLength = 10 - offset.toString().length;\n\n    if (genNumber <= 0) {\n      genNumber = 0;\n    }\n\n    var addGenNumberLength = 5 - genNumber.toString().length <= 0 ? 0 : 5 - genNumber.toString().length;\n\n    for (var index = 0; index < addOffsetLength; index++) {\n      returnString = returnString + '0';\n    }\n\n    returnString = returnString + offset.toString() + ' ';\n\n    for (var index = 0; index < addGenNumberLength; index++) {\n      returnString = returnString + '0';\n    }\n\n    returnString = returnString + genNumber.toString() + ' ';\n    returnString = returnString + (isFree ? Operators.f : Operators.n) + Operators.newLine;\n    return returnString;\n  };\n  /**\n   * `Prepares a subsection` of the current section within the cross-reference table.\n   * @private\n   */\n\n\n  PdfCrossTable.prototype.prepareSubsection = function (objectNum) {\n    var count = 0;\n    var i;\n    var total = this.count;\n\n    for (var k = 0; k < this.document.pdfObjects.count; k++) {\n      var reference = this.document.pdfObjects.items(k).reference;\n      var refString = reference.toString();\n      var refArray = refString.split(' ');\n    }\n\n    if (objectNum >= total) {\n      return count;\n    } // search for first changed indirect object.\n\n\n    for (i = objectNum; i < total; ++i) {\n      break;\n    }\n\n    objectNum = i; // look up for all indirect objects in one subsection.\n\n    for (; i < total; ++i) {\n      ++count;\n    }\n\n    return count;\n  };\n  /**\n   * `Marks the trailer references` being saved.\n   * @private\n   */\n\n\n  PdfCrossTable.prototype.markTrailerReferences = function () {\n    var tempArray;\n    var keys = this.trailer.items.keys();\n    var values = this.trailer.items.values();\n  };\n  /**\n   * `Saves the head`.\n   * @private\n   */\n\n\n  PdfCrossTable.prototype.saveHead = function (writer) {\n    var version = this.generateFileVersion(writer.document);\n    writer.write('%PDF-' + version);\n    writer.write(Operators.newLine);\n  };\n  /**\n   * Generates the `version` of the file.\n   * @private\n   */\n\n\n  PdfCrossTable.prototype.generateFileVersion = function (document) {\n    var iVersion = 4;\n    var version = '1.' + iVersion.toString();\n    return version;\n  };\n\n  PdfCrossTable.prototype.getReference = function (obj, bNew) {\n    if (typeof bNew === 'undefined') {\n      var wasNew = false;\n      return this.getReference(obj, wasNew);\n    } else {\n      //code splitted for reducing lines of code exceeds 100.\n      return this.getSubReference(obj, bNew);\n    }\n  };\n  /**\n   * Retrieves the `reference` of the object given.\n   * @private\n   */\n\n\n  PdfCrossTable.prototype.getSubReference = function (obj, bNew) {\n    var isNew = false;\n    var wasNew;\n    var reference = null; // if (obj.IsSaving) {\n\n    if (this.items.count > 0 && obj.objectCollectionIndex > 0 && this.items.count > obj.objectCollectionIndex - 1) {\n      var tempObj = this.document.pdfObjects.getReference(obj, wasNew);\n      reference = tempObj.reference;\n      wasNew = tempObj.wasNew;\n    }\n\n    if (reference == null) {\n      if (obj.status === ObjectStatus.Registered) {\n        wasNew = false;\n      } else {\n        wasNew = true;\n      }\n    } else {\n      wasNew = false;\n    } // need to add mapped reference code\n\n\n    if (reference == null) {\n      var objnumber = this.nextObjNumber;\n      reference = new PdfReference(objnumber, 0);\n      var found = void 0;\n\n      if (wasNew) {\n        this.document.pdfObjects.add(obj);\n        this.document.pdfObjects.trySetReference(obj, reference, found);\n        var tempIndex = this.document.pdfObjects.count - 1;\n        var tempkey = this.document.pdfObjects.objectCollections[tempIndex].reference.objNumber;\n        var tempvalue = this.document.pdfObjects.objectCollections[this.document.pdfObjects.count - 1];\n        this.document.pdfObjects.mainObjectCollection.setValue(tempkey, tempvalue);\n        obj.position = -1;\n      } else {\n        this.document.pdfObjects.trySetReference(obj, reference, found);\n      }\n\n      obj.objectCollectionIndex = reference.objNumber;\n      obj.status = ObjectStatus.None;\n      isNew = true;\n    }\n\n    bNew = isNew || this.bForceNew;\n    return reference;\n  };\n  /**\n   * `Saves all objects` in the collection.\n   * @private\n   */\n\n\n  PdfCrossTable.prototype.saveObjects = function (writer) {\n    var objectCollection = this.objectCollection;\n\n    for (var i = 0; i < objectCollection.count; ++i) {\n      var oi = objectCollection.items(i);\n      var obj = oi.object;\n      obj.isSaving = true;\n      this.saveIndirectObject(obj, writer);\n    }\n  };\n  /**\n   * `Saves indirect object`.\n   * @private\n   */\n\n\n  PdfCrossTable.prototype.saveIndirectObject = function (obj, writer) {\n    var reference = this.getReference(obj);\n\n    if (obj instanceof PdfCatalog) {\n      this.trailer.items.setValue(this.dictionaryProperties.root, reference);\n    } // NOTE :  This is needed for correct string objects encryption.\n\n\n    this.pdfDocument.currentSavingObj = reference;\n    var tempArchive = false;\n    tempArchive = obj.getArchive();\n    var allowedType = !(obj instanceof PdfStream || !tempArchive || obj instanceof PdfCatalog);\n    var sigFlag = false;\n    this.registerObject(writer.position, reference);\n    this.doSaveObject(obj, reference, writer);\n  };\n  /**\n   * Performs `real saving` of the save object.\n   * @private\n   */\n\n\n  PdfCrossTable.prototype.doSaveObject = function (obj, reference, writer) {\n    var correctPosition = writer.length;\n    writer.write(reference.objNumber.toString());\n    writer.write(Operators.whiteSpace);\n    writer.write(reference.genNumber.toString());\n    writer.write(Operators.whiteSpace);\n    writer.write(Operators.obj);\n    writer.write(Operators.newLine);\n    obj.save(writer);\n    var stream = writer.stream;\n    writer.write(Operators.endObj);\n    writer.write(Operators.newLine);\n  };\n\n  PdfCrossTable.prototype.registerObject = function (offset, reference, free) {\n    if (typeof free === 'boolean') {\n      // Register the object by its number.\n      this.objects.setValue(reference.objNumber, new RegisteredObject(offset, reference, free));\n      this.maxGenNumIndex = Math.max(this.maxGenNumIndex, reference.genNumber);\n    } else if (typeof free === 'undefined') {\n      // Register the object by its number.\n      this.objects.setValue(reference.objNumber, new RegisteredObject(offset, reference));\n      this.maxGenNumIndex = Math.max(this.maxGenNumIndex, reference.genNumber);\n    }\n  };\n  /**\n   * `Dereferences` the specified primitive object.\n   * @private\n   */\n\n\n  PdfCrossTable.dereference = function (obj) {\n    var rh = obj;\n\n    if (rh != null) {\n      obj = rh.object;\n    }\n\n    return obj;\n  };\n\n  return PdfCrossTable;\n}();\n\nexport { PdfCrossTable };\n\nvar RegisteredObject =\n/** @class */\nfunction () {\n  function RegisteredObject(offset, reference, free) {\n    var tempOffset = offset;\n    this.offsetNumber = tempOffset;\n    var tempReference = reference;\n    this.generation = tempReference.genNumber;\n    this.object = tempReference.objNumber;\n\n    if (typeof free === 'undefined') {\n      this.type = ObjectType.Normal;\n    } else {\n      this.type = ObjectType.Free;\n    }\n  }\n\n  Object.defineProperty(RegisteredObject.prototype, \"objectNumber\", {\n    //Properties\n\n    /**\n     * Gets the `object number`.\n     * @private\n     */\n    get: function () {\n      return this.object;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RegisteredObject.prototype, \"offset\", {\n    /**\n     * Gets the `offset`.\n     * @private\n     */\n    get: function () {\n      var result;\n      result = this.offsetNumber;\n      return result;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return RegisteredObject;\n}();\n\nexport { RegisteredObject };","map":null,"metadata":{},"sourceType":"module"}