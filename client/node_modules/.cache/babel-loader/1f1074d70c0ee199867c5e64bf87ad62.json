{"ast":null,"code":"/**\r\n * DevExtreme (ui/scroll_view/ui.scroll_view.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\");\n\nvar devices = require(\"../../core/devices\");\n\nvar windowUtils = require(\"../../core/utils/window\");\n\nvar messageLocalization = require(\"../../localization/message\");\n\nvar registerComponent = require(\"../../core/component_registrator\");\n\nvar getPublicElement = require(\"../../core/utils/dom\").getPublicElement;\n\nvar extend = require(\"../../core/utils/extend\").extend;\n\nvar noop = require(\"../../core/utils/common\").noop;\n\nvar PullDownStrategy = require(\"./ui.scroll_view.native.pull_down\");\n\nvar SwipeDownStrategy = require(\"./ui.scroll_view.native.swipe_down\");\n\nvar SimulatedStrategy = require(\"./ui.scroll_view.simulated\");\n\nvar Scrollable = require(\"./ui.scrollable\");\n\nvar LoadIndicator = require(\"../load_indicator\");\n\nvar themes = require(\"./../themes\");\n\nvar LoadPanel = require(\"../load_panel\");\n\nvar SCROLLVIEW_CLASS = \"dx-scrollview\";\nvar SCROLLVIEW_CONTENT_CLASS = SCROLLVIEW_CLASS + \"-content\";\nvar SCROLLVIEW_TOP_POCKET_CLASS = SCROLLVIEW_CLASS + \"-top-pocket\";\nvar SCROLLVIEW_BOTTOM_POCKET_CLASS = SCROLLVIEW_CLASS + \"-bottom-pocket\";\nvar SCROLLVIEW_PULLDOWN_CLASS = SCROLLVIEW_CLASS + \"-pull-down\";\nvar SCROLLVIEW_REACHBOTTOM_CLASS = SCROLLVIEW_CLASS + \"-scrollbottom\";\nvar SCROLLVIEW_REACHBOTTOM_INDICATOR_CLASS = SCROLLVIEW_REACHBOTTOM_CLASS + \"-indicator\";\nvar SCROLLVIEW_REACHBOTTOM_TEXT_CLASS = SCROLLVIEW_REACHBOTTOM_CLASS + \"-text\";\nvar SCROLLVIEW_LOADPANEL = SCROLLVIEW_CLASS + \"-loadpanel\";\nvar refreshStrategies = {\n  pullDown: PullDownStrategy,\n  swipeDown: SwipeDownStrategy,\n  simulated: SimulatedStrategy\n};\nvar isServerSide = !windowUtils.hasWindow();\nvar scrollViewServerConfig = {\n  finishLoading: noop,\n  release: noop,\n  refresh: noop,\n  _optionChanged: function (args) {\n    if (\"onUpdated\" !== args.name) {\n      return this.callBase.apply(this, arguments);\n    }\n  }\n};\nvar ScrollView = Scrollable.inherit(isServerSide ? scrollViewServerConfig : {\n  _getDefaultOptions: function () {\n    return extend(this.callBase(), {\n      pullingDownText: messageLocalization.format(\"dxScrollView-pullingDownText\"),\n      pulledDownText: messageLocalization.format(\"dxScrollView-pulledDownText\"),\n      refreshingText: messageLocalization.format(\"dxScrollView-refreshingText\"),\n      reachBottomText: messageLocalization.format(\"dxScrollView-reachBottomText\"),\n      onPullDown: null,\n      onReachBottom: null,\n      refreshStrategy: \"pullDown\"\n    });\n  },\n  _defaultOptionsRules: function () {\n    return this.callBase().concat([{\n      device: function () {\n        var realDevice = devices.real();\n        return \"android\" === realDevice.platform;\n      },\n      options: {\n        refreshStrategy: \"swipeDown\"\n      }\n    }, {\n      device: function () {\n        return themes.isMaterial();\n      },\n      options: {\n        pullingDownText: \"\",\n        pulledDownText: \"\",\n        refreshingText: \"\",\n        reachBottomText: \"\"\n      }\n    }]);\n  },\n  _init: function () {\n    this.callBase();\n    this._loadingIndicatorEnabled = true;\n  },\n  _initScrollableMarkup: function () {\n    this.callBase();\n    this.$element().addClass(SCROLLVIEW_CLASS);\n\n    this._initContent();\n\n    this._initTopPocket();\n\n    this._initBottomPocket();\n\n    this._initLoadPanel();\n  },\n  _initContent: function () {\n    var $content = $(\"<div>\").addClass(SCROLLVIEW_CONTENT_CLASS);\n\n    this._$content.wrapInner($content);\n  },\n  _initTopPocket: function () {\n    var $topPocket = this._$topPocket = $(\"<div>\").addClass(SCROLLVIEW_TOP_POCKET_CLASS);\n    var $pullDown = this._$pullDown = $(\"<div>\").addClass(SCROLLVIEW_PULLDOWN_CLASS);\n    $topPocket.append($pullDown);\n\n    this._$content.prepend($topPocket);\n  },\n  _initBottomPocket: function () {\n    var $bottomPocket = this._$bottomPocket = $(\"<div>\").addClass(SCROLLVIEW_BOTTOM_POCKET_CLASS);\n    var $reachBottom = this._$reachBottom = $(\"<div>\").addClass(SCROLLVIEW_REACHBOTTOM_CLASS);\n    var $loadContainer = $(\"<div>\").addClass(SCROLLVIEW_REACHBOTTOM_INDICATOR_CLASS);\n    var $loadIndicator = new LoadIndicator($(\"<div>\")).$element();\n    var $text = this._$reachBottomText = $(\"<div>\").addClass(SCROLLVIEW_REACHBOTTOM_TEXT_CLASS);\n\n    this._updateReachBottomText();\n\n    $reachBottom.append($loadContainer.append($loadIndicator)).append($text);\n    $bottomPocket.append($reachBottom);\n\n    this._$content.append($bottomPocket);\n  },\n  _initLoadPanel: function () {\n    var $loadPanelElement = $(\"<div>\").addClass(SCROLLVIEW_LOADPANEL).appendTo(this.$element());\n    var loadPanelOptions = {\n      shading: false,\n      delay: 400,\n      message: this.option(\"refreshingText\"),\n      position: {\n        of: this.$element()\n      }\n    };\n    this._loadPanel = this._createComponent($loadPanelElement, LoadPanel, loadPanelOptions);\n  },\n  _updateReachBottomText: function () {\n    this._$reachBottomText.text(this.option(\"reachBottomText\"));\n  },\n  _createStrategy: function () {\n    var strategyName = this.option(\"useNative\") ? this.option(\"refreshStrategy\") : \"simulated\";\n    var strategyClass = refreshStrategies[strategyName];\n\n    if (!strategyClass) {\n      throw Error(\"E1030\", this.option(\"refreshStrategy\"));\n    }\n\n    this._strategy = new strategyClass(this);\n\n    this._strategy.pullDownCallbacks.add(this._pullDownHandler.bind(this));\n\n    this._strategy.releaseCallbacks.add(this._releaseHandler.bind(this));\n\n    this._strategy.reachBottomCallbacks.add(this._reachBottomHandler.bind(this));\n  },\n  _createActions: function () {\n    this.callBase();\n    this._pullDownAction = this._createActionByOption(\"onPullDown\");\n    this._reachBottomAction = this._createActionByOption(\"onReachBottom\");\n\n    this._tryRefreshPocketState();\n  },\n  _tryRefreshPocketState: function () {\n    this._pullDownEnable(this.hasActionSubscription(\"onPullDown\"));\n\n    this._reachBottomEnable(this.hasActionSubscription(\"onReachBottom\"));\n  },\n  on: function (eventName) {\n    var result = this.callBase.apply(this, arguments);\n\n    if (\"pullDown\" === eventName || \"reachBottom\" === eventName) {\n      this._tryRefreshPocketState();\n    }\n\n    return result;\n  },\n  _pullDownEnable: function (enabled) {\n    if (0 === arguments.length) {\n      return this._pullDownEnabled;\n    }\n\n    if (this._$pullDown && this._strategy) {\n      this._$pullDown.toggle(enabled);\n\n      this._strategy.pullDownEnable(enabled);\n\n      this._pullDownEnabled = enabled;\n    }\n  },\n  _reachBottomEnable: function (enabled) {\n    if (0 === arguments.length) {\n      return this._reachBottomEnabled;\n    }\n\n    if (this._$reachBottom && this._strategy) {\n      this._$reachBottom.toggle(enabled);\n\n      this._strategy.reachBottomEnable(enabled);\n\n      this._reachBottomEnabled = enabled;\n    }\n  },\n  _pullDownHandler: function () {\n    this._loadingIndicator(false);\n\n    this._pullDownLoading();\n  },\n  _loadingIndicator: function (value) {\n    if (arguments.length < 1) {\n      return this._loadingIndicatorEnabled;\n    }\n\n    this._loadingIndicatorEnabled = value;\n  },\n  _pullDownLoading: function () {\n    this.startLoading();\n\n    this._pullDownAction();\n  },\n  _reachBottomHandler: function () {\n    this._loadingIndicator(false);\n\n    this._reachBottomLoading();\n  },\n  _reachBottomLoading: function () {\n    this.startLoading();\n\n    this._reachBottomAction();\n  },\n  _releaseHandler: function () {\n    this.finishLoading();\n\n    this._loadingIndicator(true);\n  },\n  _optionChanged: function (args) {\n    switch (args.name) {\n      case \"onPullDown\":\n      case \"onReachBottom\":\n        this._createActions();\n\n        break;\n\n      case \"pullingDownText\":\n      case \"pulledDownText\":\n      case \"refreshingText\":\n      case \"refreshStrategy\":\n        this._invalidate();\n\n        break;\n\n      case \"reachBottomText\":\n        this._updateReachBottomText();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  isEmpty: function () {\n    return !$(this.content()).children().length;\n  },\n  content: function () {\n    return getPublicElement(this._$content.children().eq(1));\n  },\n  release: function (preventReachBottom) {\n    if (void 0 !== preventReachBottom) {\n      this.toggleLoading(!preventReachBottom);\n    }\n\n    return this._strategy.release();\n  },\n  toggleLoading: function (showOrHide) {\n    this._reachBottomEnable(showOrHide);\n  },\n  isFull: function () {\n    return $(this.content()).height() > this._$container.height();\n  },\n  refresh: function () {\n    if (!this.hasActionSubscription(\"onPullDown\")) {\n      return;\n    }\n\n    this._strategy.pendingRelease();\n\n    this._pullDownLoading();\n  },\n  startLoading: function () {\n    if (this._loadingIndicator() && this.$element().is(\":visible\")) {\n      this._loadPanel.show();\n    }\n\n    this._lock();\n  },\n  finishLoading: function () {\n    this._loadPanel.hide();\n\n    this._unlock();\n  },\n  _dispose: function () {\n    this._strategy.dispose();\n\n    this.callBase();\n\n    if (this._loadPanel) {\n      this._loadPanel.$element().remove();\n    }\n  }\n});\nregisterComponent(\"dxScrollView\", ScrollView);\nmodule.exports = ScrollView;","map":null,"metadata":{},"sourceType":"script"}