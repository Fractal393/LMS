{"version":3,"file":"Button.IconWithTooltip.Example.js","sourceRoot":"../src/","sources":["components/Button/examples/Button.IconWithTooltip.Example.tsx"],"names":[],"mappings":";;;IAUA,kDAAkD;IAClD,wCAAe,EAAE,CAAC;IAElB,IAAM,SAAS,GAAe,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;IAErD,IAAM,YAAY,GAAG,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC;IACrC,wDAAwD;IACxD,iGAAiG;IACjG,IAAM,UAAU,GAAgC,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,cAAc,EAAE,EAAE,CAAC;IAEzE,QAAA,4BAA4B,GAAiD,UAAA,KAAK;QAC7F,2DAA2D;QAC3D,wEAAwE;QACxE,IAAM,SAAS,GAAG,mBAAK,CAAC,SAAS,CAAC,CAAC;QAE3B,IAAA,yBAAQ,EAAE,uBAAO,CAAW;QAEpC,OAAO,CACL;YACE,oBAAC,qBAAW,IACV,OAAO,EAAC,OAAO;gBACf,sDAAsD;gBACtD,qEAAqE;gBACrE,EAAE,EAAE,SAAS,EACb,YAAY,EAAE,YAAY,EAC1B,MAAM,EAAE,UAAU;gBAElB,oBAAC,mCAAU,IAAC,SAAS,EAAE,SAAS,EAAE,KAAK,EAAC,OAAO,EAAC,SAAS,EAAC,OAAO,EAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,GAAI,CAC9F;YACd,uNAGI,CACA,CACP,CAAC;IACJ,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { IconButton, IIconProps, initializeIcons } from 'office-ui-fabric-react';\nimport { TooltipHost, ITooltipHostStyles } from 'office-ui-fabric-react/lib/Tooltip';\nimport { useId } from '@uifabric/react-hooks';\n\nexport interface IButtonExampleProps {\n  // These are set based on the toggles shown above the examples (not needed in real code)\n  disabled?: boolean;\n  checked?: boolean;\n}\n// Initialize icons in case this example uses them\ninitializeIcons();\n\nconst emojiIcon: IIconProps = { iconName: 'Emoji2' };\n\nconst calloutProps = { gapSpace: 0 };\n// The TooltipHost root uses display: inline by default.\n// If that's causing sizing issues or tooltip positioning issues, try overriding to inline-block.\nconst hostStyles: Partial<ITooltipHostStyles> = { root: { display: 'inline-block' } };\n\nexport const ButtonIconWithTooltipExample: React.FunctionComponent<IButtonExampleProps> = props => {\n  // Use useId() to ensure that the ID is unique on the page.\n  // (It's also okay to use a plain string and manually ensure uniqueness.\n  const tooltipId = useId('tooltip');\n\n  const { disabled, checked } = props;\n\n  return (\n    <div>\n      <TooltipHost\n        content=\"Emoji\"\n        // This id is used on the tooltip itself, not the host\n        // (so an element with this id only exists when the tooltip is shown)\n        id={tooltipId}\n        calloutProps={calloutProps}\n        styles={hostStyles}\n      >\n        <IconButton iconProps={emojiIcon} title=\"Emoji\" ariaLabel=\"Emoji\" disabled={disabled} checked={checked} />\n      </TooltipHost>\n      <p>\n        For now, we advise you to take this approach of wrapping IconButton with a Tooltip. We'll address providing this\n        behavior out of the box in next version of this component in Fluent.\n      </p>\n    </div>\n  );\n};\n"]}