{"version":3,"file":"Callout.Status.Example.js","sourceRoot":"../src/","sources":["components/Callout/examples/Callout.Status.Example.tsx"],"names":[],"mappings":";;;IAIA,IAAM,KAAK,GAAG,iCAAQ,EAAE,CAAC;IACzB,IAAM,MAAM,GAAG,uCAAc,CAAC;QAC5B,UAAU,EAAE;YACV,aAAa,EAAE,KAAK;YACpB,OAAO,EAAE,cAAc;YACvB,SAAS,EAAE,QAAQ;YACnB,MAAM,EAAE,SAAS;YACjB,QAAQ,EAAE,GAAG;YACb,MAAM,EAAE,EAAE;SACX;QACD,OAAO,EAAE;YACP,QAAQ,EAAE,GAAG;SACd;QACD,OAAO,EAAE;YACP,KAAK,CAAC,KAAK,CAAC,KAAK;YACjB;gBACE,MAAM,EAAE,CAAC;gBACT,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE,WAAW;gBACpB,UAAU,EAAE,oCAAW,CAAC,SAAS;aAClC;SACF;KACF,CAAC,CAAC;IAEU,QAAA,oBAAoB,GAA4B;QACrD,IAAA,oCAA0E,EAAzE,wBAAgB,EAAI,qCAAqD,CAAC;QACjF,OAAO,CACL;YACE,6BAAK,SAAS,EAAE,MAAM,CAAC,UAAU;gBAC/B,oBAAC,sCAAa,IACZ,OAAO,EAAE,sBAAsB,EAC/B,IAAI,EAAE,gBAAgB,CAAC,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC,oBAAoB,GACpE,CACE;YACL,gBAAgB,IAAI,CACnB,oBAAC,gCAAO,IACN,SAAS,EAAE,MAAM,CAAC,OAAO,EACzB,MAAM,EAAE,MAAI,MAAM,CAAC,UAAY,EAC/B,SAAS,EAAE,sBAAsB,EACjC,IAAI,EAAC,QAAQ,eACH,WAAW;gBAErB,oBAAC,sCAAa;oBACZ,2BAAG,SAAS,EAAE,MAAM,CAAC,OAAO,iIAGxB,CACU,CACR,CACX,CACA,CACJ,CAAC;IACJ,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { DefaultButton, getTheme, FontWeights, mergeStyleSets, DelayedRender, Callout } from 'office-ui-fabric-react';\nimport { useBoolean } from '@uifabric/react-hooks';\n\nconst theme = getTheme();\nconst styles = mergeStyleSets({\n  buttonArea: {\n    verticalAlign: 'top',\n    display: 'inline-block',\n    textAlign: 'center',\n    margin: '0 100px',\n    minWidth: 130,\n    height: 32,\n  },\n  callout: {\n    maxWidth: 300,\n  },\n  subtext: [\n    theme.fonts.small,\n    {\n      margin: 0,\n      height: '100%',\n      padding: '24px 20px',\n      fontWeight: FontWeights.semilight,\n    },\n  ],\n});\n\nexport const StatusCalloutExample: React.FunctionComponent = () => {\n  const [isCalloutVisible, { toggle: toggleIsCalloutVisible }] = useBoolean(false);\n  return (\n    <>\n      <div className={styles.buttonArea}>\n        <DefaultButton\n          onClick={toggleIsCalloutVisible}\n          text={isCalloutVisible ? 'Hide StatusCallout' : 'Show StatusCallout'}\n        />\n      </div>\n      {isCalloutVisible && (\n        <Callout\n          className={styles.callout}\n          target={`.${styles.buttonArea}`}\n          onDismiss={toggleIsCalloutVisible}\n          role=\"status\"\n          aria-live=\"assertive\"\n        >\n          <DelayedRender>\n            <p className={styles.subtext}>\n              This message is treated as an aria-live assertive status message, and will be read by a screen reader\n              regardless of focus.\n            </p>\n          </DelayedRender>\n        </Callout>\n      )}\n    </>\n  );\n};\n"]}