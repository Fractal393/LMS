{"version":3,"file":"Announced.LazyLoading.Example.js","sourceRoot":"../src/","sources":["components/Announced/examples/Announced.LazyLoading.Example.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Announced } from 'office-ui-fabric-react/lib/Announced';\nimport { createArray } from 'office-ui-fabric-react/lib/Utilities';\nimport { Image } from 'office-ui-fabric-react/lib/Image';\nimport { FocusZone } from 'office-ui-fabric-react/lib/FocusZone';\nimport { Text } from 'office-ui-fabric-react/lib/Text';\nimport { Stack, IStackTokens, IStackStyles } from 'office-ui-fabric-react/lib/Stack';\nimport { DefaultButton, IButtonStyles } from 'office-ui-fabric-react/lib/Button';\nimport { ProgressIndicator } from 'office-ui-fabric-react/lib/ProgressIndicator';\nimport { mergeStyles } from 'office-ui-fabric-react/lib/Styling';\nimport { useBoolean, useSetInterval, useConst } from '@uifabric/react-hooks';\n\nconst PHOTO_COUNT = 40;\n\nconst stackTokens: IStackTokens = { childrenGap: 10 };\nconst photoStackTokens: IStackTokens = { childrenGap: '6 6' };\n\nconst defaultButtonStyles: Partial<IButtonStyles> = { root: { width: 150 } };\n\nconst photoStackStyles: Partial<IStackStyles> = {\n  inner: {\n    padding: 0,\n  },\n};\n\nconst photoCellClass = mergeStyles({\n  display: 'block',\n  boxSizing: 'border-box',\n  width: 100,\n  height: 100,\n});\n\ninterface IPhoto {\n  url: string;\n  width: number;\n  height: number;\n}\n\nexport const AnnouncedLazyLoadingExample = () => {\n  const [total, setTotal] = React.useState<number>(0);\n  const [announcedMessage, setAnnouncedMessage] = React.useState<string | undefined>(undefined);\n  const [loading, { toggle: toggleLoading }] = useBoolean(false);\n  const percentComplete = total / PHOTO_COUNT;\n\n  const { setInterval, clearInterval } = useSetInterval();\n\n  const photos: IPhoto[] = useConst(() => {\n    const width = 100;\n    const height = 100;\n    return createArray(PHOTO_COUNT, () => ({\n      url: `http://placehold.it/${width}x${height}`,\n      width,\n      height,\n    }));\n  });\n\n  React.useEffect(() => {\n    if (loading) {\n      setTotal(0);\n\n      const itemIntervalId = setInterval(() => {\n        setTotal((t: number) => {\n          if (t < PHOTO_COUNT) {\n            return t + 1;\n          }\n          clearInterval(itemIntervalId);\n          clearInterval(announceIntervalId);\n          toggleLoading();\n          return t;\n        });\n      }, 500);\n\n      const announceIntervalId = setInterval(() => {\n        // Refering to total directly would cause the effect to dispose.\n        // Instead pull the total value from the setter to apply to the announcement.\n        setTotal((t: number) => {\n          setAnnouncedMessage(`${t} of ${PHOTO_COUNT} photos loaded`);\n          return t;\n        });\n      }, 4000);\n\n      return () => {\n        clearInterval(itemIntervalId);\n        clearInterval(announceIntervalId);\n      };\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clearInterval, setInterval, loading]);\n\n  return (\n    <>\n      <Stack tokens={stackTokens}>\n        <Text>\n          Turn on Narrator and press the button to start loading photos. The number of photos loaded will be announced\n          every four seconds.\n        </Text>\n        <DefaultButton text={loading ? 'Cancel' : 'Load photos'} onClick={toggleLoading} styles={defaultButtonStyles} />\n        <ProgressIndicator label={!loading ? 'Paused' : 'Loading photos'} percentComplete={percentComplete} />\n        <FocusZone>\n          <Stack\n            horizontal\n            wrap\n            tokens={photoStackTokens}\n            styles={photoStackStyles}\n            slots={{ inner: { component: 'ul' } }}\n          >\n            {photos.slice(0, total).map((photo: IPhoto, index: number) => (\n              <li\n                key={index}\n                className={photoCellClass}\n                aria-posinset={index + 1}\n                aria-setsize={PHOTO_COUNT}\n                aria-label=\"Photo\"\n                data-is-focusable\n              >\n                <Image src={photo.url} width={photo.width} height={photo.height} />\n              </li>\n            ))}\n          </Stack>\n        </FocusZone>\n      </Stack>\n      {loading && <Announced message={announcedMessage} />}\n    </>\n  );\n};\n"]}