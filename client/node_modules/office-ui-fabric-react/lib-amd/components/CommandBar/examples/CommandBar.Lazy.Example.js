define(["require", "exports", "tslib", "react", "office-ui-fabric-react/lib/CommandBar", "office-ui-fabric-react/lib/ContextualMenu", "@uifabric/react-hooks"], function (require, exports, tslib_1, React, CommandBar_1, ContextualMenu_1, react_hooks_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CommandBarLazyExample = function () {
        var _a = React.useState(undefined), menuItems = _a[0], setMenuItems = _a[1];
        var timeoutRef = React.useRef();
        var onMenuDismissed = react_hooks_1.useConstCallback(function () {
            setMenuItems(undefined);
        });
        var loadItems = react_hooks_1.useConstCallback(function () {
            var itemCount = Math.floor(Math.random() * 5) + 1;
            var newMenuItems = [];
            for (var i = 0; i < itemCount; i++) {
                newMenuItems.push({
                    key: "sub-item-" + i,
                    name: "Item " + i,
                });
            }
            if (timeoutRef.current) {
                clearTimeout(timeoutRef.current);
            }
            timeoutRef.current = setTimeout(function () {
                setMenuItems(newMenuItems);
            }, 2000);
        });
        var items = React.useMemo(function () {
            return [
                {
                    key: 'a',
                    name: 'Test',
                },
                {
                    key: 'menu',
                    name: 'Lazy-loaded menu',
                    subMenuProps: {
                        items: menuItems
                            ? tslib_1.__spreadArrays(menuItems, [
                                {
                                    key: 'divider',
                                    name: '-',
                                    itemType: ContextualMenu_1.ContextualMenuItemType.Divider,
                                },
                                {
                                    key: 'permanent',
                                    name: 'Permanent option',
                                },
                            ]) : [],
                        onMenuOpened: loadItems,
                        onMenuDismissed: onMenuDismissed,
                    },
                },
            ];
        }, [menuItems, loadItems, onMenuDismissed]);
        return (React.createElement("div", null,
            React.createElement(CommandBar_1.CommandBar, { items: items })));
    };
});
//# sourceMappingURL=CommandBar.Lazy.Example.js.map