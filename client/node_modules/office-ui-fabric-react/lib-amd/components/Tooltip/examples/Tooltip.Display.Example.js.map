{"version":3,"file":"Tooltip.Display.Example.js","sourceRoot":"../src/","sources":["components/Tooltip/examples/Tooltip.Display.Example.tsx"],"names":[],"mappings":";;;IAKA,IAAM,KAAK,GAAG,kBAAQ,EAAE,CAAC;IACzB,IAAM,WAAW,GAAG,EAAE,QAAQ,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC;IAC3E,IAAM,YAAY,GAAG,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC;IAErC,+CAA+C;IAC/C,IAAM,gBAAgB,GAAgC;QACpD,IAAI,EAAE,EAAE,OAAO,EAAE,cAAc,EAAE;KAClC,CAAC;IAEW,QAAA,qBAAqB,GAA4B;QAC5D,2DAA2D;QAC3D,yEAAyE;QACzE,IAAM,UAAU,GAAG,mBAAK,CAAC,UAAU,CAAC,CAAC;QACrC,IAAM,UAAU,GAAG,mBAAK,CAAC,UAAU,CAAC,CAAC;QAErC,OAAO,CACL;;YAC+C,iDAAyB;;YAAI,2CAAmB;;YACI,GAAG;YACpG,4CAAoB;;YAAa,iDAAyB;;YAC1D,+BAAM;YACN,+BAAM;YACN,oBAAC,qBAAW,IAAC,OAAO,EAAC,uBAAuB,EAAC,EAAE,EAAE,UAAU,EAAE,YAAY,EAAE,YAAY;gBACrF,gCAAQ,KAAK,EAAE,WAAW,sBAAoB,UAAU,sCAE/C,CACG;YAAC,GAAG;YAClB,oBAAC,qBAAW,IACV,OAAO,EAAC,qBAAqB;gBAC7B,8BAA8B;gBAC9B,MAAM,EAAE,gBAAgB,EACxB,EAAE,EAAE,UAAU,EACd,YAAY,EAAE,YAAY;gBAE1B,gCAAQ,KAAK,EAAE,WAAW,sBAAoB,UAAU,oCAE/C,CACG,CACV,CACP,CAAC;IACJ,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { TooltipHost, ITooltipHostStyles } from 'office-ui-fabric-react/lib/Tooltip';\nimport { getTheme } from 'office-ui-fabric-react/lib/Styling';\nimport { useId } from '@uifabric/react-hooks';\n\nconst theme = getTheme();\nconst buttonStyle = { fontSize: theme.fonts.medium.fontSize, padding: 10 };\nconst calloutProps = { gapSpace: 0 };\n\n// Important for correct positioning--see below\nconst inlineBlockStyle: Partial<ITooltipHostStyles> = {\n  root: { display: 'inline-block' },\n};\n\nexport const TooltipDisplayExample: React.FunctionComponent = () => {\n  // Use useId() to ensure that the ID is unique on the page.\n  // (It's also okay to use a plain string and manually ensure uniqueness.)\n  const tooltip1Id = useId('tooltip1');\n  const tooltip2Id = useId('tooltip2');\n\n  return (\n    <div>\n      In some cases when a TooltipHost is wrapping <code>inline-block</code> or <code>inline</code> elements, the\n      positioning of the Tooltip may be off. In these cases, it's recommended to set the TooltipHost's{' '}\n      <code>display</code> property to <code>inline-block</code>, as in the following example.\n      <br />\n      <br />\n      <TooltipHost content=\"Incorrect positioning\" id={tooltip1Id} calloutProps={calloutProps}>\n        <button style={buttonStyle} aria-describedby={tooltip1Id}>\n          Hover for incorrect positioning\n        </button>\n      </TooltipHost>{' '}\n      <TooltipHost\n        content=\"Correct positioning\"\n        // This is the important part!\n        styles={inlineBlockStyle}\n        id={tooltip2Id}\n        calloutProps={calloutProps}\n      >\n        <button style={buttonStyle} aria-describedby={tooltip2Id}>\n          Hover for correct positioning\n        </button>\n      </TooltipHost>\n    </div>\n  );\n};\n"]}