{"version":3,"file":"ComboBox.Controlled.Example.js","sourceRoot":"../src/","sources":["components/ComboBox/examples/ComboBox.Controlled.Example.tsx"],"names":[],"mappings":";;;IAGA,IAAM,KAAK,GAAsB;QAC/B,EAAE,GAAG,EAAE,SAAS,EAAE,IAAI,EAAE,eAAe,EAAE,QAAQ,EAAE,oCAA4B,CAAC,MAAM,EAAE;QACxF,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE;QAC9B,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE;QAC9B,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE;QAC9B,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE;QAC9B,EAAE,GAAG,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,oCAA4B,CAAC,OAAO,EAAE;QAC7E,EAAE,GAAG,EAAE,SAAS,EAAE,IAAI,EAAE,gBAAgB,EAAE,QAAQ,EAAE,oCAA4B,CAAC,MAAM,EAAE;QACzF,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE;QAC9B,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,IAAI,EAAE;QAC9C,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE;QAC9B,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE;QAC9B,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE;QAC9B,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE;KAC/B,CAAC;IAEF,IAAM,aAAa,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC;IAE3B,QAAA,yBAAyB,GAAa;QAC3C,IAAA,wBAAgF,EAA/E,mBAAW,EAAE,sBAAkE,CAAC;QAEvF,IAAM,QAAQ,GAAG,KAAK,CAAC,WAAW,CAChC,UAAC,EAA8B,EAAE,MAAwB;;YACvD,cAAc,OAAC,MAAM,0CAAE,GAAG,CAAC,CAAC;QAC9B,CAAC,EACD,CAAC,cAAc,CAAC,CACjB,CAAC;QAEF,OAAO,CACL,oBAAC,gBAAQ,IACP,KAAK,EAAE,aAAa,EACpB,WAAW,EAAE,WAAW,EACxB,KAAK,EAAC,sDAAsD,EAC5D,aAAa,QACb,YAAY,EAAC,IAAI,EACjB,OAAO,EAAE,KAAK,EACd,QAAQ,EAAE,QAAQ,GAClB,CACH,CAAC;IACJ,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { ComboBox, IComboBoxOption, IComboBox, SelectableOptionMenuItemType } from 'office-ui-fabric-react/lib/index';\n\nconst items: IComboBoxOption[] = [\n  { key: 'Header1', text: 'First heading', itemType: SelectableOptionMenuItemType.Header },\n  { key: 'A', text: 'Option A' },\n  { key: 'B', text: 'Option B' },\n  { key: 'C', text: 'Option C' },\n  { key: 'D', text: 'Option D' },\n  { key: 'divider', text: '-', itemType: SelectableOptionMenuItemType.Divider },\n  { key: 'Header2', text: 'Second heading', itemType: SelectableOptionMenuItemType.Header },\n  { key: 'E', text: 'Option E' },\n  { key: 'F', text: 'Option F', disabled: true },\n  { key: 'G', text: 'Option G' },\n  { key: 'H', text: 'Option H' },\n  { key: 'I', text: 'Option I' },\n  { key: 'J', text: 'Option J' },\n];\n\nconst comboBoxStyle = { maxWidth: 300 };\n\nexport const ComboBoxControlledExample: React.FC = () => {\n  const [selectedKey, setSelectedKey] = React.useState<string | number | undefined>('C');\n\n  const onChange = React.useCallback(\n    (ev: React.FormEvent<IComboBox>, option?: IComboBoxOption): void => {\n      setSelectedKey(option?.key);\n    },\n    [setSelectedKey],\n  );\n\n  return (\n    <ComboBox\n      style={comboBoxStyle}\n      selectedKey={selectedKey}\n      label=\"Controlled single-select ComboBox (allowFreeform: T)\"\n      allowFreeform\n      autoComplete=\"on\"\n      options={items}\n      onChange={onChange}\n    />\n  );\n};\n"]}