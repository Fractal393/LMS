{"version":3,"file":"ComboBox.CustomStyled.Example.js","sourceRoot":"../src/","sources":["components/ComboBox/examples/ComboBox.CustomStyled.Example.tsx"],"names":[],"mappings":";;;;IASA,IAAM,gBAAgB,GAAG,mBAAW,CAAC;QACnC,SAAS,EAAE;YACT,OAAO,EAAE,EAAE,YAAY,EAAE,MAAM,EAAE;YACjC,gBAAgB,EAAE,EAAE,QAAQ,EAAE,OAAO,EAAE;SACxC;KACF,CAAC,CAAC;IAEH,IAAM,WAAW;QACf,GAAC,aAAa,IAAG,wDAAwD;QACzE,GAAC,iBAAiB,IAAG,2DAA2D;QAChF,GAAC,eAAe,IAAG,yDAAyD;QAC5E,GAAC,SAAS,IAAG,4CAA4C;WAC1D,CAAC;IAEF,IAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAEvC,IAAM,iCAAiC,GAAG;QACxC,SAAS,EAAE;YACT,QAAQ,EAAE,OAAO;SAClB;QACD,IAAI,EAAE;YACJ,eAAe,EAAE,SAAS;SAC3B;QACD,KAAK,EAAE;YACL,eAAe,EAAE,SAAS;SAC3B;KACF,CAAC;IAEF,IAAM,wBAAwB,GAAsB,KAAK,CAAC,GAAG,CAAC,UAAC,QAAgB,IAAK,OAAA,CAAC;QACnF,GAAG,EAAE,QAAQ;QACb,IAAI,EAAE,QAAQ;QACd,MAAM,EAAE;YACN,UAAU,EAAE;gBACV,UAAU,EAAE,WAAW,CAAC,QAAQ,CAAC;aAClC;SACF;KACF,CAAC,EARkF,CAQlF,CAAC,CAAC;IAEJ,IAAM,sBAAsB;QAC1B,EAAE,GAAG,EAAE,SAAS,EAAE,IAAI,EAAE,aAAa,EAAE,QAAQ,EAAE,oCAA4B,CAAC,MAAM,EAAE;OACnF,KAAK,CAAC,GAAG,CAAC,UAAC,QAAgB,IAAK,OAAA,CAAC,EAAE,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,EAAnC,CAAmC,CAAC;QACvE,EAAE,GAAG,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,oCAA4B,CAAC,OAAO,EAAE;QAC7E,EAAE,GAAG,EAAE,SAAS,EAAE,IAAI,EAAE,eAAe,EAAE,QAAQ,EAAE,oCAA4B,CAAC,MAAM,EAAE;MACzF,CAAC;IAEF,IAAM,cAAc,GAAG,UAAC,IAAqB;QAC3C,QAAQ,IAAI,CAAC,QAAQ,EAAE;YACrB,KAAK,oCAA4B,CAAC,MAAM,CAAC;YACzC,KAAK,oCAA4B,CAAC,OAAO;gBACvC,OAAO,kCAAO,IAAI,CAAC,IAAI,CAAQ,CAAC;YAElC;gBACE,IAAI,UAAU,GAAG,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAExC,IAAI,CAAC,UAAU,EAAE;oBACf,IAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC;oBAC9B,UAAU,GAAG,WAAW,CAAC,WAAW,CAAC,GAAG,OAAI,WAAW,sCAAgC,CAAC;iBACzF;gBAED,OAAO,8BAAM,KAAK,EAAE,EAAE,UAAU,EAAE,UAAU,EAAE,IAAG,IAAI,CAAC,IAAI,CAAQ,CAAC;SACtE;IACH,CAAC,CAAC;IAEW,QAAA,2BAA2B,GAAa,cAAM,OAAA,CACzD,oBAAC,cAAM,IAAC,SAAS,EAAE,gBAAgB;QACjC,oBAAC,gBAAQ,IACP,kBAAkB,EAAC,SAAS,EAC5B,KAAK,EAAC,wBAAwB,EAC9B,OAAO,EAAE,wBAAwB,EACjC,MAAM,EAAE,iCAAiC,GACzC;QACF,oBAAC,gBAAQ,IACP,kBAAkB,EAAC,SAAS,EAC5B,KAAK,EAAE,yGAAyG,EAChH,aAAa,QACb,YAAY,EAAC,IAAI,EACjB,OAAO,EAAE,sBAAsB,EAC/B,cAAc,EAAE,cAAc,GAC9B,CACK,CACV,EAjB0D,CAiB1D,CAAC","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  ComboBox,\r\n  IComboBoxOption,\r\n  SelectableOptionMenuItemType,\r\n  Fabric,\r\n  mergeStyles,\r\n} from 'office-ui-fabric-react/lib/index';\r\n\r\nconst wrapperClassName = mergeStyles({\r\n  selectors: {\r\n    '& > *': { marginBottom: '20px' },\r\n    '& .ms-ComboBox': { maxWidth: '300px' },\r\n  },\r\n});\r\n\r\nconst fontMapping: { [fontName: string]: string } = {\r\n  ['Arial Black']: '\"Arial Black\", \"Arial Black_MSFontService\", sans-serif',\r\n  ['Times New Roman']: '\"Times New Roman\", \"Times New Roman_MSFontService\", serif',\r\n  ['Comic Sans MS']: '\"Comic Sans MS\", \"Comic Sans MS_MSFontService\", fantasy',\r\n  ['Calibri']: 'Calibri, Calibri_MSFontService, sans-serif',\r\n};\r\n\r\nconst fonts = Object.keys(fontMapping);\r\n\r\nconst ComboBoxCustomStyledExampleStyles = {\r\n  container: {\r\n    maxWidth: '300px',\r\n  },\r\n  root: {\r\n    backgroundColor: '#b4a0ff',\r\n  },\r\n  input: {\r\n    backgroundColor: '#b4a0ff',\r\n  },\r\n};\r\n\r\nconst optionsWithCustomStyling: IComboBoxOption[] = fonts.map((fontName: string) => ({\r\n  key: fontName,\r\n  text: fontName,\r\n  styles: {\r\n    optionText: {\r\n      fontFamily: fontMapping[fontName],\r\n    },\r\n  },\r\n}));\r\n\r\nconst optionsForCustomRender: IComboBoxOption[] = [\r\n  { key: 'header1', text: 'Theme Fonts', itemType: SelectableOptionMenuItemType.Header },\r\n  ...fonts.map((fontName: string) => ({ key: fontName, text: fontName })),\r\n  { key: 'divider', text: '-', itemType: SelectableOptionMenuItemType.Divider },\r\n  { key: 'header2', text: 'Other Options', itemType: SelectableOptionMenuItemType.Header },\r\n];\r\n\r\nconst onRenderOption = (item: IComboBoxOption) => {\r\n  switch (item.itemType) {\r\n    case SelectableOptionMenuItemType.Header:\r\n    case SelectableOptionMenuItemType.Divider:\r\n      return <span>{item.text}</span>;\r\n\r\n    default:\r\n      let fontFamily = fontMapping[item.text];\r\n\r\n      if (!fontFamily) {\r\n        const newFontName = item.text;\r\n        fontFamily = fontMapping[newFontName] = `\"${newFontName}\",\"Segoe UI\",Tahoma,Sans-Serif`;\r\n      }\r\n\r\n      return <span style={{ fontFamily: fontFamily }}>{item.text}</span>;\r\n  }\r\n};\r\n\r\nexport const ComboBoxCustomStyledExample: React.FC = () => (\r\n  <Fabric className={wrapperClassName}>\r\n    <ComboBox\r\n      defaultSelectedKey=\"Calibri\"\r\n      label=\"Custom styled ComboBox\"\r\n      options={optionsWithCustomStyling}\r\n      styles={ComboBoxCustomStyledExampleStyles}\r\n    />\r\n    <ComboBox\r\n      defaultSelectedKey=\"Calibri\"\r\n      label={'ComboBox with custom option rendering (type the name of a font and the option will render in that font)'}\r\n      allowFreeform\r\n      autoComplete=\"on\"\r\n      options={optionsForCustomRender}\r\n      onRenderOption={onRenderOption}\r\n    />\r\n  </Fabric>\r\n);\r\n"]}