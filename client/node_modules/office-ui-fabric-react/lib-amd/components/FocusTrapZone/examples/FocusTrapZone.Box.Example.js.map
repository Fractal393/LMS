{"version":3,"file":"FocusTrapZone.Box.Example.js","sourceRoot":"../src/","sources":["components/FocusTrapZone/examples/FocusTrapZone.Box.Example.tsx"],"names":[],"mappings":";;;IAWA,IAAM,cAAc,GAAG,2BAAe,CACpC,UAAC,WAAoB,IAA4B,OAAA,CAAC;QAChD,IAAI,EAAE,EAAE,MAAM,EAAE,gBAAa,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,aAAa,CAAE,EAAE,OAAO,EAAE,EAAE,EAAE;KACtF,CAAC,EAF+C,CAE/C,CACH,CAAC;IACF,IAAM,eAAe,GAA8B,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE,CAAC;IAC5E,IAAM,WAAW,GAAG,EAAE,WAAW,EAAE,CAAC,EAAE,CAAC;IAE1B,QAAA,uBAAuB,GAA4B;QAC9D,IAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAU,IAAI,CAAC,CAAC;QACrC,IAAA,oCAAgE,EAA/D,mBAAW,EAAI,gCAAgD,CAAC;QACvE,OAAO,CACL,oBAAC,aAAK,IAAC,MAAM,EAAE,WAAW;YACxB,oBAAC,aAAK,CAAC,IAAI;gBACT,oBAAC,WAAI,kIAGE,CACI;YACb,oBAAC,aAAK,CAAC,IAAI;gBACT,oBAAC,sBAAa,IAAC,OAAO,EAAE,iBAAiB,EAAE,IAAI,EAAC,YAAY,GAAG,CACpD;YACb,oBAAC,6BAAa,IAAC,QAAQ,EAAE,CAAC,WAAW;gBACnC,oBAAC,aAAK,IAAC,eAAe,EAAC,OAAO,EAAC,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,cAAc,CAAC,WAAW,CAAC;oBACrF,oBAAC,eAAM,IACL,KAAK,EAAC,eAAe,EACrB,YAAY,EAAE,MAAM,EACpB,OAAO,EAAE,WAAW,EACpB,QAAQ,EAAE,iBAAiB,EAC3B,MAAM,EAAC,qBAAqB,EAC5B,OAAO,EAAC,KAAK,GACb;oBACF,oBAAC,qBAAS,IAAC,KAAK,EAAC,wBAAwB,EAAC,MAAM,EAAE,eAAe,GAAI;oBACrE,oBAAC,WAAI,IAAC,IAAI,EAAC,kBAAkB,EAAC,MAAM,EAAC,QAAQ,iCAEtC,CACD,CACM,CACV,CACT,CAAC;IACJ,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { DefaultButton } from 'office-ui-fabric-react/lib/Button';\nimport { FocusTrapZone } from 'office-ui-fabric-react/lib/FocusTrapZone';\nimport { Link } from 'office-ui-fabric-react/lib/Link';\nimport { Stack, IStackStyles } from 'office-ui-fabric-react/lib/Stack';\nimport { Text } from 'office-ui-fabric-react/lib/Text';\nimport { TextField, ITextFieldStyles } from 'office-ui-fabric-react/lib/TextField';\nimport { Toggle, IToggle } from 'office-ui-fabric-react/lib/Toggle';\nimport { memoizeFunction } from 'office-ui-fabric-react/lib/Utilities';\nimport { useBoolean } from '@uifabric/react-hooks';\n\nconst getStackStyles = memoizeFunction(\n  (useTrapZone: boolean): Partial<IStackStyles> => ({\n    root: { border: `2px solid ${useTrapZone ? '#ababab' : 'transparent'}`, padding: 10 },\n  }),\n);\nconst textFieldStyles: Partial<ITextFieldStyles> = { root: { width: 300 } };\nconst stackTokens = { childrenGap: 8 };\n\nexport const FocusTrapZoneBoxExample: React.FunctionComponent = () => {\n  const toggle = React.useRef<IToggle>(null);\n  const [useTrapZone, { toggle: toggleUseTrapZone }] = useBoolean(false);\n  return (\n    <Stack tokens={stackTokens}>\n      <Stack.Item>\n        <Text>\n          If this button is used to enable FocusTrapZone, focus should return to this button after the FocusTrapZone is\n          disabled.\n        </Text>\n      </Stack.Item>\n      <Stack.Item>\n        <DefaultButton onClick={toggleUseTrapZone} text=\"Trap Focus\" />\n      </Stack.Item>\n      <FocusTrapZone disabled={!useTrapZone}>\n        <Stack horizontalAlign=\"start\" tokens={stackTokens} styles={getStackStyles(useTrapZone)}>\n          <Toggle\n            label=\"Use trap zone\"\n            componentRef={toggle}\n            checked={useTrapZone}\n            onChange={toggleUseTrapZone}\n            onText=\"On (toggle to exit)\"\n            offText=\"Off\"\n          />\n          <TextField label=\"Input inside trap zone\" styles={textFieldStyles} />\n          <Link href=\"https://bing.com\" target=\"_blank\">\n            Hyperlink inside trap zone\n          </Link>\n        </Stack>\n      </FocusTrapZone>\n    </Stack>\n  );\n};\n"]}