{"version":3,"file":"TagPicker.Basic.Example.js","sourceRoot":"../src/","sources":["components/pickers/examples/TagPicker.Basic.Example.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport {\n  TagPicker,\n  IBasePicker,\n  ITag,\n  IInputProps,\n  IBasePickerSuggestionsProps,\n} from 'office-ui-fabric-react/lib/Pickers';\nimport { Toggle, IToggleStyles } from 'office-ui-fabric-react/lib/Toggle';\nimport { mergeStyles } from 'office-ui-fabric-react/lib/Styling';\nimport { useBoolean } from '@uifabric/react-hooks';\n\nconst rootClass = mergeStyles({\n  maxWidth: 500,\n});\n\nconst toggleStyles: Partial<IToggleStyles> = { root: { margin: '10px 0' } };\n\nconst inputProps: IInputProps = {\n  onBlur: (ev: React.FocusEvent<HTMLInputElement>) => console.log('onBlur called'),\n  onFocus: (ev: React.FocusEvent<HTMLInputElement>) => console.log('onFocus called'),\n  'aria-label': 'Tag picker',\n};\n\nconst pickerSuggestionsProps: IBasePickerSuggestionsProps = {\n  suggestionsHeaderText: 'Suggested tags',\n  noResultsFoundText: 'No color tags found',\n};\n\nconst testTags: ITag[] = [\n  'black',\n  'blue',\n  'brown',\n  'cyan',\n  'green',\n  'magenta',\n  'mauve',\n  'orange',\n  'pink',\n  'purple',\n  'red',\n  'rose',\n  'violet',\n  'white',\n  'yellow',\n].map(item => ({ key: item, name: item }));\n\nconst listContainsTagList = (tag: ITag, tagList?: ITag[]) => {\n  if (!tagList || !tagList.length || tagList.length === 0) {\n    return false;\n  }\n  return tagList.some(compareTag => compareTag.key === tag.key);\n};\n\nconst filterSuggestedTags = (filterText: string, tagList: ITag[]): ITag[] => {\n  return filterText\n    ? testTags.filter(\n        tag => tag.name.toLowerCase().indexOf(filterText.toLowerCase()) === 0 && !listContainsTagList(tag, tagList),\n      )\n    : [];\n};\n\nconst filterSelectedTags = (filterText: string, tagList: ITag[]): ITag[] => {\n  return filterText ? testTags.filter(tag => tag.name.toLowerCase().indexOf(filterText.toLowerCase()) === 0) : [];\n};\n\nconst getTextFromItem = (item: ITag) => item.name;\n\nexport const TagPickerBasicExample: React.FunctionComponent = () => {\n  // All pickers extend from BasePicker specifying the item type.\n  const picker = React.useRef<IBasePicker<ITag>>(null);\n  const [tagPicker, { toggle: toggleIsTagPickerVisible }] = useBoolean(false);\n\n  const onItemSelected = React.useCallback((item: ITag): ITag | null => {\n    if (picker.current && listContainsTagList(item, picker.current.items)) {\n      return null;\n    }\n    return item;\n  }, []);\n\n  return (\n    <div className={rootClass}>\n      <Toggle\n        styles={toggleStyles}\n        label=\"Disable tag picker\"\n        checked={tagPicker}\n        onChange={toggleIsTagPickerVisible}\n      />\n      Filter items in suggestions: This picker will filter added items from the search suggestions.\n      <TagPicker\n        removeButtonAriaLabel=\"Remove\"\n        onResolveSuggestions={filterSuggestedTags}\n        getTextFromItem={getTextFromItem}\n        pickerSuggestionsProps={pickerSuggestionsProps}\n        itemLimit={2}\n        disabled={tagPicker}\n        inputProps={inputProps}\n      />\n      <br />\n      Filter items on selected: This picker will show already-added suggestions but will not add duplicate tags.\n      <TagPicker\n        removeButtonAriaLabel=\"Remove\"\n        componentRef={picker}\n        onResolveSuggestions={filterSelectedTags}\n        onItemSelected={onItemSelected}\n        getTextFromItem={getTextFromItem}\n        pickerSuggestionsProps={pickerSuggestionsProps}\n        itemLimit={2}\n        disabled={tagPicker}\n        inputProps={inputProps}\n      />\n    </div>\n  );\n};\n"]}