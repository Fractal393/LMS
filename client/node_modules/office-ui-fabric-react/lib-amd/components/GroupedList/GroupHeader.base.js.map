{"version":3,"file":"GroupHeader.base.js","sourceRoot":"../src/","sources":["components/GroupedList/GroupHeader.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { IProcessedStyleSet, ITheme } from '../../Styling';\nimport { composeRenderFunction, classNamesFunction, getRTL, getRTLSafeKeyCode, KeyCodes } from '../../Utilities';\nimport { SelectionMode } from '../../utilities/selection/index';\nimport { Check } from '../../Check';\nimport { Icon } from '../../Icon';\nimport { GroupSpacer } from './GroupSpacer';\nimport { Spinner } from '../../Spinner';\nimport {\n  IGroupHeaderStyleProps,\n  IGroupHeaderStyles,\n  IGroupHeaderProps,\n  IGroupHeaderCheckboxProps,\n} from './GroupHeader.types';\n\nconst getClassNames = classNamesFunction<IGroupHeaderStyleProps, IGroupHeaderStyles>();\n\nexport interface IGroupHeaderState {\n  isCollapsed: boolean;\n  isLoadingVisible: boolean;\n}\n\nexport class GroupHeaderBase extends React.Component<IGroupHeaderProps, IGroupHeaderState> {\n  public static defaultProps: IGroupHeaderProps = {\n    expandButtonProps: { 'aria-label': 'expand collapse group' },\n  };\n\n  private _classNames: IProcessedStyleSet<IGroupHeaderStyles>;\n\n  constructor(props: IGroupHeaderProps) {\n    super(props);\n\n    this.state = {\n      isCollapsed: (this.props.group && this.props.group.isCollapsed) as boolean,\n      isLoadingVisible: false,\n    };\n  }\n\n  public UNSAFE_componentWillReceiveProps(newProps: IGroupHeaderProps): void {\n    if (newProps.group) {\n      const newCollapsed = newProps.group.isCollapsed;\n      const isGroupLoading = newProps.isGroupLoading;\n      const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(newProps.group);\n\n      this.setState({\n        isCollapsed: newCollapsed || false,\n        isLoadingVisible: newLoadingVisible || false,\n      });\n    }\n  }\n\n  public render(): JSX.Element | null {\n    const {\n      group,\n      groupLevel = 0,\n      viewport,\n      selectionMode,\n      loadingText,\n      // eslint-disable-next-line deprecation/deprecation\n      isSelected = false,\n      selected = false,\n      indentWidth,\n      onRenderTitle = this._onRenderTitle,\n      onRenderGroupHeaderCheckbox,\n      isCollapsedGroupSelectVisible = true,\n      expandButtonProps,\n      expandButtonIcon,\n      selectAllButtonProps,\n      theme,\n      styles,\n      className,\n      groupedListId,\n      compact,\n      ariaPosInSet,\n      ariaSetSize,\n      useFastIcons,\n    } = this.props;\n\n    const defaultCheckboxRender = useFastIcons ? this._fastDefaultCheckboxRender : this._defaultCheckboxRender;\n\n    const onRenderCheckbox = onRenderGroupHeaderCheckbox\n      ? composeRenderFunction(onRenderGroupHeaderCheckbox, defaultCheckboxRender)\n      : defaultCheckboxRender;\n\n    const { isCollapsed, isLoadingVisible } = this.state;\n\n    const canSelectGroup = selectionMode === SelectionMode.multiple;\n    const isSelectionCheckVisible = canSelectGroup && (isCollapsedGroupSelectVisible || !(group && group.isCollapsed));\n    const currentlySelected = selected || isSelected;\n\n    const isRTL = getRTL(theme);\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      selected: currentlySelected,\n      isCollapsed,\n      compact,\n    });\n\n    if (!group) {\n      return null;\n    }\n    return (\n      <div\n        className={this._classNames.root}\n        style={viewport ? { minWidth: viewport.width } : {}}\n        onClick={this._onHeaderClick}\n        aria-label={group.ariaLabel || group.name}\n        aria-setsize={ariaSetSize}\n        aria-posinset={ariaPosInSet}\n        data-is-focusable={true}\n        onKeyUp={this._onKeyUp}\n        aria-expanded={!this.state.isCollapsed}\n        aria-level={groupLevel + 1}\n      >\n        <div className={this._classNames.groupHeaderContainer}>\n          {isSelectionCheckVisible ? (\n            <button\n              data-is-focusable={false}\n              type=\"button\"\n              className={this._classNames.check}\n              role=\"checkbox\"\n              aria-checked={currentlySelected}\n              data-selection-toggle={true}\n              onClick={this._onToggleSelectGroupClick}\n              {...selectAllButtonProps}\n            >\n              {onRenderCheckbox({ checked: currentlySelected, theme }, onRenderCheckbox)}\n            </button>\n          ) : (\n            selectionMode !== SelectionMode.none && <GroupSpacer indentWidth={indentWidth} count={1} />\n          )}\n\n          <GroupSpacer indentWidth={indentWidth} count={groupLevel!} />\n\n          <div className={this._classNames.dropIcon}>\n            <Icon iconName=\"Tag\" />\n          </div>\n          <button\n            data-is-focusable={false}\n            type=\"button\"\n            className={this._classNames.expand}\n            onClick={this._onToggleClick}\n            aria-expanded={group ? !group.isCollapsed : undefined}\n            aria-controls={group && !group.isCollapsed ? groupedListId : undefined}\n            {...expandButtonProps}\n          >\n            <Icon\n              className={this._classNames.expandIsCollapsed}\n              iconName={expandButtonIcon || (isRTL ? 'ChevronLeftMed' : 'ChevronRightMed')}\n            />\n          </button>\n\n          {onRenderTitle(this.props, this._onRenderTitle)}\n          {isLoadingVisible && <Spinner label={loadingText} />}\n        </div>\n      </div>\n    );\n  }\n\n  private _toggleCollapse = () => {\n    const { group, onToggleCollapse, isGroupLoading } = this.props;\n    const { isCollapsed } = this.state;\n\n    const newCollapsed = !isCollapsed;\n    const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(group!);\n\n    this.setState({\n      isCollapsed: newCollapsed,\n      isLoadingVisible: newLoadingVisible as boolean,\n    });\n    if (onToggleCollapse) {\n      onToggleCollapse(group!);\n    }\n  };\n\n  private _onKeyUp = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    const shouldOpen = this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.right, this.props.theme);\n    const shouldClose = !this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.left, this.props.theme);\n    if (shouldClose || shouldOpen) {\n      this._toggleCollapse();\n      ev.stopPropagation();\n      ev.preventDefault();\n    }\n  };\n\n  private _onToggleClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    this._toggleCollapse();\n    ev.stopPropagation();\n    ev.preventDefault();\n  };\n\n  private _onToggleSelectGroupClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { onToggleSelectGroup, group } = this.props;\n\n    if (onToggleSelectGroup) {\n      onToggleSelectGroup(group!);\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  };\n\n  private _onHeaderClick = (): void => {\n    const { group, onGroupHeaderClick, onToggleSelectGroup } = this.props;\n\n    if (onGroupHeaderClick) {\n      onGroupHeaderClick(group!);\n    } else if (onToggleSelectGroup) {\n      onToggleSelectGroup(group!);\n    }\n  };\n\n  private _defaultCheckboxRender(checkboxProps: IGroupHeaderCheckboxProps) {\n    return <Check checked={checkboxProps.checked} />;\n  }\n\n  private _fastDefaultCheckboxRender(checkboxProps: IGroupHeaderCheckboxProps) {\n    return <FastCheck theme={checkboxProps.theme} checked={checkboxProps.checked} />;\n  }\n\n  private _onRenderTitle = (props: IGroupHeaderProps): JSX.Element | null => {\n    const { group } = props;\n\n    if (!group) {\n      return null;\n    }\n\n    return (\n      <div className={this._classNames.title}>\n        <span>{group.name}</span>\n        {\n          // hasMoreData flag is set when grouping is throttled by SPO server which in turn resorts to regular\n          // sorting to simulate grouping behaviors, in which case group count is the number of items returned\n          // so far. That's the reason we need to use \"+\" to show we might have more items than count\n          // indicates.\n        }\n        <span className={this._classNames.headerCount}>\n          ({group.count}\n          {group.hasMoreData && '+'})\n        </span>\n      </div>\n    );\n  };\n}\n\nconst FastCheck = React.memo((props: { theme?: ITheme; checked?: boolean; className?: string }) => {\n  return <Check theme={props.theme} checked={props.checked} className={props.className} useFastIcons />;\n});\n"]}