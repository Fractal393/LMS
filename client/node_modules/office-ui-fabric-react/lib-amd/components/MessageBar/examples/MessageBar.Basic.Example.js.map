{"version":3,"file":"MessageBar.Basic.Example.js","sourceRoot":"../src/","sources":["components/MessageBar/examples/MessageBar.Basic.Example.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  MessageBarButton,\n  Link,\n  Stack,\n  StackItem,\n  MessageBar,\n  MessageBarType,\n  ChoiceGroup,\n  IStackProps,\n} from 'office-ui-fabric-react';\n\ninterface IExampleProps {\n  resetChoice?: () => void;\n}\n\nconst horizontalStackProps: IStackProps = {\n  horizontal: true,\n  tokens: { childrenGap: 16 },\n};\nconst verticalStackProps: IStackProps = {\n  styles: { root: { overflow: 'hidden', width: '100%' } },\n  tokens: { childrenGap: 20 },\n};\n\nconst choiceGroupStyles = {\n  label: {\n    maxWidth: 250,\n  },\n};\n\nconst DefaultExample = () => (\n  <MessageBar>\n    Info/Default MessageBar.\n    <Link href=\"www.bing.com\" target=\"_blank\">\n      Visit our website.\n    </Link>\n  </MessageBar>\n);\n\nconst ErrorExample = (p: IExampleProps) => (\n  <MessageBar\n    messageBarType={MessageBarType.error}\n    isMultiline={false}\n    onDismiss={p.resetChoice}\n    dismissButtonAriaLabel=\"Close\"\n  >\n    Error MessageBar with single line, with dismiss button.\n    <Link href=\"www.bing.com\" target=\"_blank\">\n      Visit our website.\n    </Link>\n  </MessageBar>\n);\n\nconst BlockedExample = (p: IExampleProps) => (\n  <MessageBar\n    messageBarType={MessageBarType.blocked}\n    isMultiline={false}\n    onDismiss={p.resetChoice}\n    dismissButtonAriaLabel=\"Close\"\n    truncated={true}\n    overflowButtonAriaLabel=\"See more\"\n  >\n    <b>Blocked MessageBar - single line, with dismiss button and truncated text.</b> Truncation is not available if you\n    use action buttons or multiline and should be used sparingly. Lorem ipsum dolor sit amet, consectetur adipiscing\n    elit. Morbi luctus, purus a lobortis tristique, odio augue pharetra metus, ac placerat nunc mi nec dui. Vestibulum\n    aliquam et nunc semper scelerisque. Curabitur vitae orci nec quam condimentum porttitor et sed lacus. Vivamus ac\n    efficitur leo. Cras faucibus mauris libero, ac placerat erat euismod et. Donec pulvinar commodo odio sit amet\n    faucibus. In hac habitasse platea dictumst. Duis eu ante commodo, condimentum nibh pellentesque, laoreet enim. Fusce\n    massa lorem, ultrices eu mi a, fermentum suscipit magna. Integer porta purus pulvinar, hendrerit felis eget,\n    condimentum mauris.\n  </MessageBar>\n);\n\nconst SevereExample = (p: IExampleProps) => (\n  <MessageBar\n    messageBarType={MessageBarType.severeWarning}\n    actions={\n      <div>\n        <MessageBarButton>Yes</MessageBarButton>\n        <MessageBarButton>No</MessageBarButton>\n      </div>\n    }\n  >\n    SevereWarning MessageBar with action buttons which defaults to multiline.\n    <Link href=\"www.bing.com\" target=\"_blank\">\n      Visit our website.\n    </Link>\n  </MessageBar>\n);\n\nconst SuccessExample = () => (\n  <MessageBar\n    actions={\n      <div>\n        <MessageBarButton>Yes</MessageBarButton>\n        <MessageBarButton>No</MessageBarButton>\n      </div>\n    }\n    messageBarType={MessageBarType.success}\n    isMultiline={false}\n  >\n    Success MessageBar with single line and action buttons.\n    <Link href=\"www.bing.com\" target=\"_blank\">\n      Visit our website.\n    </Link>\n  </MessageBar>\n);\n\nconst WarningExample = (p: IExampleProps) => (\n  <MessageBar\n    messageBarType={MessageBarType.warning}\n    isMultiline={false}\n    onDismiss={p.resetChoice}\n    dismissButtonAriaLabel=\"Close\"\n    actions={\n      <div>\n        <MessageBarButton>Action</MessageBarButton>\n      </div>\n    }\n  >\n    Warning MessageBar content.\n    <Link href=\"www.bing.com\" target=\"_blank\">\n      Visit our website.\n    </Link>\n  </MessageBar>\n);\n\nconst WarningExample2 = (p: IExampleProps) => (\n  <MessageBar\n    onDismiss={p.resetChoice}\n    dismissButtonAriaLabel=\"Close\"\n    messageBarType={MessageBarType.warning}\n    actions={\n      <div>\n        <MessageBarButton>Yes</MessageBarButton>\n        <MessageBarButton>No</MessageBarButton>\n      </div>\n    }\n  >\n    <b>Warning defaults to multiline</b>. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi luctus, purus a\n    lobortis tristique, odio augue pharetra metus, ac placerat nunc mi nec dui. Vestibulum aliquam et nunc semper\n    scelerisque. Curabitur vitae orci nec quam condimentum porttitor et sed lacus. Vivamus ac efficitur leo. Cras\n    faucibus mauris libero, ac placerat erat euismod et. Donec pulvinar commodo odio sit amet faucibus. In hac habitasse\n    platea dictumst. Duis eu ante commodo, condimentum nibh pellentesque, laoreet enim. Fusce massa lorem, ultrices eu\n    mi a, fermentum suscipit magna. Integer porta purus pulvinar, hendrerit felis eget, condimentum mauris.\n    <Link href=\"www.bing.com\" target=\"_blank\">\n      Visit our website.\n    </Link>\n  </MessageBar>\n);\n\nconst choiceOptions = [\n  {\n    key: 'default',\n    text: 'Default',\n  },\n  {\n    key: 'error',\n    text: 'Error MessageBar',\n  },\n  {\n    key: 'blocked',\n    text: 'Blocked MessageBar',\n  },\n  {\n    key: 'severe',\n    text: 'SevereWarning MessageBar',\n  },\n  {\n    key: 'success',\n    text: 'Success MessageBar',\n  },\n  {\n    key: 'warning',\n    text: 'Warning MessageBar - single line',\n  },\n  {\n    key: 'warning2',\n    text: 'Warning MessageBar - multiline',\n  },\n  {\n    key: 'all',\n    text: 'Show All',\n  },\n];\n\nexport const MessageBarBasicExample: React.FunctionComponent = () => {\n  const [choice, setChoice] = React.useState<string | undefined>(undefined);\n  const showAll = choice === 'all';\n\n  const resetChoice = React.useCallback(() => setChoice(undefined), []);\n\n  return (\n    <Stack {...horizontalStackProps}>\n      <StackItem disableShrink>\n        <ChoiceGroup\n          styles={choiceGroupStyles}\n          label=\"Select a MessageBar Example Below. To test in narrator, show one message at a time.\"\n          selectedKey={choice}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={(e, v) => setChoice(v!.key)}\n          options={choiceOptions}\n        />\n      </StackItem>\n      <Stack {...verticalStackProps}>\n        {(choice === 'default' || showAll) && <DefaultExample />}\n\n        {(choice === 'error' || showAll) && <ErrorExample resetChoice={resetChoice} />}\n\n        {(choice === 'blocked' || showAll) && <BlockedExample resetChoice={resetChoice} />}\n\n        {(choice === 'severe' || showAll) && <SevereExample resetChoice={resetChoice} />}\n\n        {(choice === 'success' || showAll) && <SuccessExample />}\n\n        {(choice === 'warning' || showAll) && <WarningExample resetChoice={resetChoice} />}\n\n        {(choice === 'warning2' || showAll) && <WarningExample2 resetChoice={resetChoice} />}\n      </Stack>\n    </Stack>\n  );\n};\n"]}