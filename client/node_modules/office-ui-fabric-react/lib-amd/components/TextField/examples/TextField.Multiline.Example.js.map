{"version":3,"file":"TextField.Multiline.Example.js","sourceRoot":"../src/","sources":["components/TextField/examples/TextField.Multiline.Example.tsx"],"names":[],"mappings":";;;IAMA,IAAM,WAAW,GAA0B,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE,CAAC;IACpE,IAAM,WAAW,GAAG,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC;IACxC,IAAM,SAAS,GAAW,oBAAK,CAAC,GAAG,CAAC,CAAC;IACrC,IAAM,WAAW,GAAyB;QACxC,MAAM,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE;QAC3B,MAAM,EAAE,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE;KACjC,CAAC;IAEW,QAAA,yBAAyB,GAA4B;QAC1D,IAAA,oCAA4D,EAA3D,iBAAS,EAAI,8BAA8C,CAAC;QACnE,IAAM,QAAQ,GAAG,UAAC,EAA2D,EAAE,OAAe;YAC5F,IAAM,YAAY,GAAG,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC;YACzC,IAAI,YAAY,KAAK,SAAS,EAAE;gBAC9B,eAAe,EAAE,CAAC;aACnB;QACH,CAAC,CAAC;QACF,OAAO,CACL,oBAAC,aAAK,IAAC,UAAU,QAAC,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,WAAW;YACxD,oBAAC,aAAK,uBAAK,WAAW;gBACpB,oBAAC,qBAAS,IAAC,KAAK,EAAC,UAAU,EAAC,SAAS,QAAC,IAAI,EAAE,CAAC,GAAI;gBACjD,oBAAC,qBAAS,IAAC,KAAK,EAAC,UAAU,EAAC,SAAS,QAAC,IAAI,EAAE,CAAC,EAAE,QAAQ,QAAC,YAAY,EAAE,SAAS,GAAI;gBACnF,oBAAC,qBAAS,IAAC,KAAK,EAAC,eAAe,EAAC,SAAS,QAAC,SAAS,EAAE,KAAK,GAAI,CACzD;YAER,oBAAC,aAAK,uBAAK,WAAW;gBACpB,oBAAC,qBAAS,IAAC,KAAK,EAAC,4BAA4B,EAAC,SAAS,QAAC,gBAAgB,SAAG;gBAC3E,oBAAC,qBAAS,IACR,KAAK,EAAC,0EAA0E,EAChF,SAAS,EAAE,SAAS;oBACpB,6CAA6C;oBAC7C,QAAQ,EAAE,QAAQ,GAClB,CACI,CACF,CACT,CAAC;IACJ,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { TextField } from 'office-ui-fabric-react/lib/TextField';\nimport { useBoolean } from '@uifabric/react-hooks';\nimport { lorem } from '@uifabric/example-data';\nimport { Stack, IStackProps, IStackStyles } from 'office-ui-fabric-react/lib/Stack';\n\nconst stackStyles: Partial<IStackStyles> = { root: { width: 650 } };\nconst stackTokens = { childrenGap: 50 };\nconst dummyText: string = lorem(100);\nconst columnProps: Partial<IStackProps> = {\n  tokens: { childrenGap: 15 },\n  styles: { root: { width: 300 } },\n};\n\nexport const TextFieldMultilineExample: React.FunctionComponent = () => {\n  const [multiline, { toggle: toggleMultiline }] = useBoolean(false);\n  const onChange = (ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newText: string): void => {\n    const newMultiline = newText.length > 50;\n    if (newMultiline !== multiline) {\n      toggleMultiline();\n    }\n  };\n  return (\n    <Stack horizontal tokens={stackTokens} styles={stackStyles}>\n      <Stack {...columnProps}>\n        <TextField label=\"Standard\" multiline rows={3} />\n        <TextField label=\"Disabled\" multiline rows={3} disabled defaultValue={dummyText} />\n        <TextField label=\"Non-resizable\" multiline resizable={false} />\n      </Stack>\n\n      <Stack {...columnProps}>\n        <TextField label=\"With auto adjusting height\" multiline autoAdjustHeight />\n        <TextField\n          label=\"Switches from single to multiline if more than 50 characters are entered\"\n          multiline={multiline}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={onChange}\n        />\n      </Stack>\n    </Stack>\n  );\n};\n"]}