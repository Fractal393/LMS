{"version":3,"file":"TextField.ErrorMessage.Example.js","sourceRoot":"../src/","sources":["components/TextField/examples/TextField.ErrorMessage.Example.tsx"],"names":[],"mappings":";;;IAMA,IAAM,WAAW,GAAiB;QAChC,WAAW,EAAE,EAAE;QACf,QAAQ,EAAE,GAAG;KACd,CAAC;IAEF,IAAM,eAAe,GAAG,UAAC,KAAa;QACpC,OAAO,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,8DAA4D,KAAK,CAAC,MAAM,MAAG,CAAC;IAC7G,CAAC,CAAC;IAEF,IAAM,sBAAsB,GAAG,UAAC,KAAa;QAC3C,OAAO,IAAI,OAAO,CAAC,UAAA,OAAO;YACxB,UAAU,CAAC,cAAM,OAAA,OAAO,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,EAA/B,CAA+B,EAAE,IAAI,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEW,QAAA,4BAA4B,GAA4B;QAC7D,IAAA,oCAA8D,EAA7D,kBAAU,EAAI,+BAA+C,CAAC;QAErE,OAAO,CACL,oBAAC,aAAK,IAAC,MAAM,EAAE,WAAW;YACxB,oBAAC,eAAM,IAAC,KAAK,EAAC,kBAAkB,EAAC,WAAW,QAAC,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,gBAAgB,GAAI;YAC/F,UAAU,IAAI,CACb;gBACE,kFAA4D;gBAC5D,oBAAC,qBAAS,IAAC,KAAK,EAAC,yBAAyB,EAAC,iBAAiB,EAAE,eAAe,GAAI;gBACjF,oBAAC,qBAAS,IAAC,KAAK,EAAC,0BAA0B,EAAC,iBAAiB,EAAE,sBAAsB,GAAI;gBACzF,oBAAC,qBAAS,IACR,KAAK,EAAC,mCAAmC,EACzC,YAAY,EAAC,kCAAkC,EAC/C,iBAAiB,EAAE,eAAe,GAClC;gBACF,oBAAC,qBAAS,IACR,KAAK,EAAC,wCAAwC,EAC9C,YAAY,EAAC,+CAA+C,EAC5D,iBAAiB,EAAE,eAAe,EAClC,cAAc,EAAE,KAAK,GACrB;gBACF,oBAAC,qBAAS,IACR,KAAK,EAAC,0BAA0B,EAChC,YAAY,EAAC,+CAA+C,EAC5D,iBAAiB,EAAE,sBAAsB,GACzC;gBACF,oBAAC,qBAAS,IACR,KAAK,EAAC,oCAAoC,EAC1C,YAAY,EAAC,+CAA+C,EAC5D,WAAW,EAAC,mBAAmB,EAC/B,iBAAiB,EAAE,eAAe,GAClC;gBACF,oBAAC,qBAAS,IACR,KAAK,EAAC,kCAAkC,EACxC,WAAW,EAAC,iDAAiD,EAC7D,iBAAiB,EAAE,eAAe,EAClC,sBAAsB,EAAE,IAAI,GAC5B;gBACF,oBAAC,qBAAS,IACR,KAAK,EAAC,kCAAkC,EACxC,WAAW,EAAC,wCAAwC,EACpD,iBAAiB,EAAE,eAAe,EAClC,iBAAiB,QACjB,kBAAkB,SAClB;gBACF,oBAAC,qBAAS,IACR,KAAK,EAAC,wBAAwB,EAC9B,WAAW,EAAC,8BAA8B,EAC1C,iBAAiB,EAAE,eAAe,EAClC,kBAAkB,SAClB;gBACF,oBAAC,qBAAS,IACR,KAAK,EAAC,mBAAmB,EACzB,YAAY,EAAC,wBAAwB,EACrC,UAAU,QACV,iBAAiB,EAAE,eAAe,GAClC;gBACF,oBAAC,qBAAS,IACR,KAAK,EAAC,sDAAsD,EAC5D,WAAW,EAAC,gCAAgC,EAC5C,YAAY,EAAC,wCAAwC,GACrD,CACD,CACJ,CACK,CACT,CAAC;IACJ,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { TextField } from 'office-ui-fabric-react/lib/TextField';\nimport { Stack, IStackTokens } from 'office-ui-fabric-react/lib/Stack';\nimport { Toggle } from 'office-ui-fabric-react/lib/Toggle';\nimport { useBoolean } from '@uifabric/react-hooks';\n\nconst stackTokens: IStackTokens = {\n  childrenGap: 20,\n  maxWidth: 350,\n};\n\nconst getErrorMessage = (value: string): string => {\n  return value.length < 3 ? '' : `Input value length must be less than 3. Actual length is ${value.length}.`;\n};\n\nconst getErrorMessagePromise = (value: string): Promise<string> => {\n  return new Promise(resolve => {\n    setTimeout(() => resolve(getErrorMessage(value)), 5000);\n  });\n};\n\nexport const TextFieldErrorMessageExample: React.FunctionComponent = () => {\n  const [showFields, { toggle: toggleShowFields }] = useBoolean(false);\n\n  return (\n    <Stack tokens={stackTokens}>\n      <Toggle label=\"Show text fields\" inlineLabel checked={showFields} onChange={toggleShowFields} />\n      {showFields && (\n        <>\n          <strong>Hint: the input length must be less than 3.</strong>\n          <TextField label=\"String-based validation\" onGetErrorMessage={getErrorMessage} />\n          <TextField label=\"Promise-based validation\" onGetErrorMessage={getErrorMessagePromise} />\n          <TextField\n            label=\"String-based validation on render\"\n            defaultValue=\"Shows an error message on render\"\n            onGetErrorMessage={getErrorMessage}\n          />\n          <TextField\n            label=\"String-based validation only on change\"\n            defaultValue=\"Validates only on input change, not on render\"\n            onGetErrorMessage={getErrorMessage}\n            validateOnLoad={false}\n          />\n          <TextField\n            label=\"Promise-based validation\"\n            defaultValue=\"Shows an error message 5 seconds after render\"\n            onGetErrorMessage={getErrorMessagePromise}\n          />\n          <TextField\n            label=\"Both description and error message\"\n            defaultValue=\"Shows description and error message on render\"\n            description=\"Field description\"\n            onGetErrorMessage={getErrorMessage}\n          />\n          <TextField\n            label=\"Deferred string-based validation\"\n            placeholder=\"Validates after user stops typing for 2 seconds\"\n            onGetErrorMessage={getErrorMessage}\n            deferredValidationTime={2000}\n          />\n          <TextField\n            label=\"Validates only on focus and blur\"\n            placeholder=\"Validates only on input focus and blur\"\n            onGetErrorMessage={getErrorMessage}\n            validateOnFocusIn\n            validateOnFocusOut\n          />\n          <TextField\n            label=\"Validates only on blur\"\n            placeholder=\"Validates only on input blur\"\n            onGetErrorMessage={getErrorMessage}\n            validateOnFocusOut\n          />\n          <TextField\n            label=\"Underlined field:\"\n            defaultValue=\"This value is too long\"\n            underlined\n            onGetErrorMessage={getErrorMessage}\n          />\n          <TextField\n            label=\"Uses the errorMessage property to set an error state\"\n            placeholder=\"This field always has an error\"\n            errorMessage=\"This is a statically set error message\"\n          />\n        </>\n      )}\n    </Stack>\n  );\n};\n"]}