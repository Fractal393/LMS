{"version":3,"file":"Selection.Basic.Example.js","sourceRoot":"../src/","sources":["utilities/selection/examples/Selection.Basic.Example.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { ICommandBarItemProps, CommandBar } from 'office-ui-fabric-react/lib/CommandBar';\nimport { Check } from 'office-ui-fabric-react/lib/Check';\nimport { MarqueeSelection } from 'office-ui-fabric-react/lib/MarqueeSelection';\nimport { ISelection, Selection, SelectionMode, SelectionZone } from 'office-ui-fabric-react/lib/Selection';\nimport { IExampleItem, createListItems } from '@uifabric/example-data';\nimport { IRawStyle, mergeStyleSets } from 'office-ui-fabric-react/lib/Styling';\nimport { useConst, useForceUpdate } from '@uifabric/react-hooks';\n\ninterface ISelectionItemExampleProps {\n  item: IExampleItem;\n  itemIndex?: number;\n  selection?: ISelection;\n  selectionMode?: SelectionMode;\n}\n\nconst commonStyles: IRawStyle = {\n  display: 'inline-block',\n  cursor: 'default',\n  boxSizing: 'border-box',\n  verticalAlign: 'top',\n  background: 'none',\n  backgroundColor: 'transparent',\n  border: 'none',\n};\nconst classNames = mergeStyleSets({\n  item: {\n    selectors: {\n      '&:hover': { background: '#eee' },\n    },\n  },\n  // Overwrites the default style for Button\n  check: [commonStyles, { padding: '11px 8px' }],\n  cell: [\n    commonStyles,\n    {\n      overflow: 'hidden',\n      height: 36,\n      padding: 8,\n      userSelect: 'none',\n    },\n  ],\n});\n\nconst alertItem = (item: IExampleItem): void => {\n  alert('item invoked: ' + item.name);\n};\n\nconst startsWithVowel = (item: IExampleItem): boolean => {\n  return /^[aeiou]/.test(item.name || '');\n};\n\nconst selectionModes = {\n  [SelectionMode[SelectionMode.none]]: 'None',\n  [SelectionMode[SelectionMode.single]]: 'Single select',\n  [SelectionMode[SelectionMode.multiple]]: 'Multi select',\n};\nconst selectableItemTypes = {\n  all: 'All items',\n  vowels: 'Names starting with vowels',\n};\n\nconst ITEM_COUNT = 100;\n\nconst SelectionItemExample: React.FunctionComponent<ISelectionItemExampleProps> = (\n  props: ISelectionItemExampleProps,\n) => {\n  const { item, itemIndex, selection } = props;\n  let isSelected = false;\n\n  if (selection && itemIndex !== undefined) {\n    isSelected = selection.isIndexSelected(itemIndex);\n  }\n\n  return (\n    <div className={classNames.item} data-is-focusable data-selection-index={itemIndex}>\n      {selection && selection.canSelectItem(item) && selection.mode !== SelectionMode.none && (\n        <div className={classNames.check} data-is-focusable data-selection-toggle>\n          <Check checked={isSelected} />\n        </div>\n      )}\n      <span className={classNames.cell}>{item.name}</span>\n      <a className={classNames.cell} href=\"https://bing.com\" target=\"_blank\">\n        Link that avoids selection\n      </a>\n      <a className={classNames.cell} data-selection-select href=\"https://bing.com\" target=\"_blank\">\n        Link that selects first\n      </a>\n    </div>\n  );\n};\n\nexport const SelectionBasicExample: React.FunctionComponent = () => {\n  const [selectableItemType, setSelectableItemType] = React.useState<'all' | 'vowels'>('all');\n  const [selectionMode, setSelectionMode] = React.useState(SelectionMode.multiple);\n  const forceUpdate = useForceUpdate();\n  const items = useConst<IExampleItem[]>(() => createListItems(ITEM_COUNT));\n  const selection = React.useMemo(\n    () =>\n      new Selection({\n        canSelectItem: selectableItemType === 'vowels' ? startsWithVowel : undefined,\n        selectionMode,\n        onSelectionChanged: forceUpdate,\n        items,\n      }),\n    [selectableItemType, selectionMode, forceUpdate, items],\n  );\n\n  const commandItems = React.useMemo<ICommandBarItemProps[]>(\n    () => [\n      {\n        key: 'selectionMode',\n        text: 'Selection mode: ' + selectionModes[SelectionMode[selectionMode]],\n        subMenuProps: {\n          items: Object.keys(selectionModes).map((mode: keyof typeof SelectionMode) => ({\n            key: mode,\n            name: selectionModes[mode],\n            canCheck: true,\n            checked: selectionMode === SelectionMode[mode],\n            onClick: () => setSelectionMode(SelectionMode[mode]),\n          })),\n        },\n      },\n      {\n        key: 'allowCanSelect',\n        text: 'Selectable item type: ' + selectableItemType,\n        subMenuProps: {\n          items: Object.keys(selectableItemTypes).map((itemType: keyof typeof selectableItemTypes) => ({\n            key: itemType,\n            name: selectableItemTypes[itemType],\n            checked: selectableItemType === itemType,\n            onClick: () => setSelectableItemType(itemType),\n          })),\n        },\n      },\n      {\n        key: 'selectAll',\n        text: 'Toggle select all',\n        iconProps: { iconName: 'CheckMark' },\n        onClick: () => selection.toggleAllSelected(),\n        disabled: selectionMode !== SelectionMode.multiple,\n      },\n    ],\n    [selectionMode, selection, selectableItemType],\n  );\n\n  return (\n    <div>\n      <CommandBar items={commandItems} />\n      <MarqueeSelection selection={selection} isEnabled={selection.mode === SelectionMode.multiple}>\n        <SelectionZone selection={selection} onItemInvoked={alertItem}>\n          {items.map((item: IExampleItem, index: number) => (\n            <SelectionItemExample key={item.key} item={item} itemIndex={index} selection={selection} />\n          ))}\n        </SelectionZone>\n      </MarqueeSelection>\n    </div>\n  );\n};\n"]}