{"version":3,"file":"ComboBox.CustomStyled.Example.js","sourceRoot":"../src/","sources":["components/ComboBox/examples/ComboBox.CustomStyled.Example.tsx"],"names":[],"mappings":";;;;AAAA,6BAA+B;AAC/B,0DAM0C;AAE1C,IAAM,gBAAgB,GAAG,mBAAW,CAAC;IACnC,SAAS,EAAE;QACT,OAAO,EAAE,EAAE,YAAY,EAAE,MAAM,EAAE;QACjC,gBAAgB,EAAE,EAAE,QAAQ,EAAE,OAAO,EAAE;KACxC;CACF,CAAC,CAAC;AAEH,IAAM,WAAW;IACf,GAAC,aAAa,IAAG,wDAAwD;IACzE,GAAC,iBAAiB,IAAG,2DAA2D;IAChF,GAAC,eAAe,IAAG,yDAAyD;IAC5E,GAAC,SAAS,IAAG,4CAA4C;OAC1D,CAAC;AAEF,IAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AAEvC,IAAM,iCAAiC,GAAG;IACxC,SAAS,EAAE;QACT,QAAQ,EAAE,OAAO;KAClB;IACD,IAAI,EAAE;QACJ,eAAe,EAAE,SAAS;KAC3B;IACD,KAAK,EAAE;QACL,eAAe,EAAE,SAAS;KAC3B;CACF,CAAC;AAEF,IAAM,wBAAwB,GAAsB,KAAK,CAAC,GAAG,CAAC,UAAC,QAAgB,IAAK,OAAA,CAAC;IACnF,GAAG,EAAE,QAAQ;IACb,IAAI,EAAE,QAAQ;IACd,MAAM,EAAE;QACN,UAAU,EAAE;YACV,UAAU,EAAE,WAAW,CAAC,QAAQ,CAAC;SAClC;KACF;CACF,CAAC,EARkF,CAQlF,CAAC,CAAC;AAEJ,IAAM,sBAAsB;IAC1B,EAAE,GAAG,EAAE,SAAS,EAAE,IAAI,EAAE,aAAa,EAAE,QAAQ,EAAE,oCAA4B,CAAC,MAAM,EAAE;GACnF,KAAK,CAAC,GAAG,CAAC,UAAC,QAAgB,IAAK,OAAA,CAAC,EAAE,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,EAAnC,CAAmC,CAAC;IACvE,EAAE,GAAG,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,oCAA4B,CAAC,OAAO,EAAE;IAC7E,EAAE,GAAG,EAAE,SAAS,EAAE,IAAI,EAAE,eAAe,EAAE,QAAQ,EAAE,oCAA4B,CAAC,MAAM,EAAE;EACzF,CAAC;AAEF,IAAM,cAAc,GAAG,UAAC,IAAqB;IAC3C,QAAQ,IAAI,CAAC,QAAQ,EAAE;QACrB,KAAK,oCAA4B,CAAC,MAAM,CAAC;QACzC,KAAK,oCAA4B,CAAC,OAAO;YACvC,OAAO,kCAAO,IAAI,CAAC,IAAI,CAAQ,CAAC;QAElC;YACE,IAAI,UAAU,GAAG,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAExC,IAAI,CAAC,UAAU,EAAE;gBACf,IAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC;gBAC9B,UAAU,GAAG,WAAW,CAAC,WAAW,CAAC,GAAG,OAAI,WAAW,sCAAgC,CAAC;aACzF;YAED,OAAO,8BAAM,KAAK,EAAE,EAAE,UAAU,EAAE,UAAU,EAAE,IAAG,IAAI,CAAC,IAAI,CAAQ,CAAC;KACtE;AACH,CAAC,CAAC;AAEW,QAAA,2BAA2B,GAAa,cAAM,OAAA,CACzD,oBAAC,cAAM,IAAC,SAAS,EAAE,gBAAgB;IACjC,oBAAC,gBAAQ,IACP,kBAAkB,EAAC,SAAS,EAC5B,KAAK,EAAC,wBAAwB,EAC9B,OAAO,EAAE,wBAAwB,EACjC,MAAM,EAAE,iCAAiC,GACzC;IACF,oBAAC,gBAAQ,IACP,kBAAkB,EAAC,SAAS,EAC5B,KAAK,EAAE,yGAAyG,EAChH,aAAa,QACb,YAAY,EAAC,IAAI,EACjB,OAAO,EAAE,sBAAsB,EAC/B,cAAc,EAAE,cAAc,GAC9B,CACK,CACV,EAjB0D,CAiB1D,CAAC","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  ComboBox,\r\n  IComboBoxOption,\r\n  SelectableOptionMenuItemType,\r\n  Fabric,\r\n  mergeStyles,\r\n} from 'office-ui-fabric-react/lib/index';\r\n\r\nconst wrapperClassName = mergeStyles({\r\n  selectors: {\r\n    '& > *': { marginBottom: '20px' },\r\n    '& .ms-ComboBox': { maxWidth: '300px' },\r\n  },\r\n});\r\n\r\nconst fontMapping: { [fontName: string]: string } = {\r\n  ['Arial Black']: '\"Arial Black\", \"Arial Black_MSFontService\", sans-serif',\r\n  ['Times New Roman']: '\"Times New Roman\", \"Times New Roman_MSFontService\", serif',\r\n  ['Comic Sans MS']: '\"Comic Sans MS\", \"Comic Sans MS_MSFontService\", fantasy',\r\n  ['Calibri']: 'Calibri, Calibri_MSFontService, sans-serif',\r\n};\r\n\r\nconst fonts = Object.keys(fontMapping);\r\n\r\nconst ComboBoxCustomStyledExampleStyles = {\r\n  container: {\r\n    maxWidth: '300px',\r\n  },\r\n  root: {\r\n    backgroundColor: '#b4a0ff',\r\n  },\r\n  input: {\r\n    backgroundColor: '#b4a0ff',\r\n  },\r\n};\r\n\r\nconst optionsWithCustomStyling: IComboBoxOption[] = fonts.map((fontName: string) => ({\r\n  key: fontName,\r\n  text: fontName,\r\n  styles: {\r\n    optionText: {\r\n      fontFamily: fontMapping[fontName],\r\n    },\r\n  },\r\n}));\r\n\r\nconst optionsForCustomRender: IComboBoxOption[] = [\r\n  { key: 'header1', text: 'Theme Fonts', itemType: SelectableOptionMenuItemType.Header },\r\n  ...fonts.map((fontName: string) => ({ key: fontName, text: fontName })),\r\n  { key: 'divider', text: '-', itemType: SelectableOptionMenuItemType.Divider },\r\n  { key: 'header2', text: 'Other Options', itemType: SelectableOptionMenuItemType.Header },\r\n];\r\n\r\nconst onRenderOption = (item: IComboBoxOption) => {\r\n  switch (item.itemType) {\r\n    case SelectableOptionMenuItemType.Header:\r\n    case SelectableOptionMenuItemType.Divider:\r\n      return <span>{item.text}</span>;\r\n\r\n    default:\r\n      let fontFamily = fontMapping[item.text];\r\n\r\n      if (!fontFamily) {\r\n        const newFontName = item.text;\r\n        fontFamily = fontMapping[newFontName] = `\"${newFontName}\",\"Segoe UI\",Tahoma,Sans-Serif`;\r\n      }\r\n\r\n      return <span style={{ fontFamily: fontFamily }}>{item.text}</span>;\r\n  }\r\n};\r\n\r\nexport const ComboBoxCustomStyledExample: React.FC = () => (\r\n  <Fabric className={wrapperClassName}>\r\n    <ComboBox\r\n      defaultSelectedKey=\"Calibri\"\r\n      label=\"Custom styled ComboBox\"\r\n      options={optionsWithCustomStyling}\r\n      styles={ComboBoxCustomStyledExampleStyles}\r\n    />\r\n    <ComboBox\r\n      defaultSelectedKey=\"Calibri\"\r\n      label={'ComboBox with custom option rendering (type the name of a font and the option will render in that font)'}\r\n      allowFreeform\r\n      autoComplete=\"on\"\r\n      options={optionsForCustomRender}\r\n      onRenderOption={onRenderOption}\r\n    />\r\n  </Fabric>\r\n);\r\n"]}