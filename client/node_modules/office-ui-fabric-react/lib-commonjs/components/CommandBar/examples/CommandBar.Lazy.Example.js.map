{"version":3,"file":"CommandBar.Lazy.Example.js","sourceRoot":"../src/","sources":["components/CommandBar/examples/CommandBar.Lazy.Example.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,oEAAyF;AACzF,4EAAmF;AACnF,qDAAyD;AAE5C,QAAA,qBAAqB,GAA4B;IACtD,IAAA,8BAAyF,EAAxF,iBAAS,EAAE,oBAA6E,CAAC;IAEhG,IAAM,UAAU,GAAG,KAAK,CAAC,MAAM,EAAiB,CAAC;IAEjD,IAAM,eAAe,GAAG,8BAAgB,CAAC;QACvC,YAAY,CAAC,SAAS,CAAC,CAAC;IAC1B,CAAC,CAAC,CAAC;IAEH,IAAM,SAAS,GAAG,8BAAgB,CAAC;QACjC,IAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;QAEpD,IAAM,YAAY,GAA2B,EAAE,CAAC;QAEhD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;YAClC,YAAY,CAAC,IAAI,CAAC;gBAChB,GAAG,EAAE,cAAY,CAAG;gBACpB,IAAI,EAAE,UAAQ,CAAG;aAClB,CAAC,CAAC;SACJ;QAED,IAAI,UAAU,CAAC,OAAO,EAAE;YACtB,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;SAClC;QAED,UAAU,CAAC,OAAO,GAAI,UAAU,CAAC;YAC/B,YAAY,CAAC,YAAY,CAAC,CAAC;QAC7B,CAAC,EAAE,IAAI,CAAuB,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,IAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC;QAC1B,OAAO;YACL;gBACE,GAAG,EAAE,GAAG;gBACR,IAAI,EAAE,MAAM;aACb;YACD;gBACE,GAAG,EAAE,MAAM;gBACX,IAAI,EAAE,kBAAkB;gBACxB,YAAY,EAAE;oBACZ,KAAK,EAAE,SAAS;wBACd,CAAC,wBACM,SAAS;4BACZ;gCACE,GAAG,EAAE,SAAS;gCACd,IAAI,EAAE,GAAG;gCACT,QAAQ,EAAE,uCAAsB,CAAC,OAAO;6BACzC;4BACD;gCACE,GAAG,EAAE,WAAW;gCAChB,IAAI,EAAE,kBAAkB;6BACzB;2BAEL,CAAC,CAAC,EAAE;oBACN,YAAY,EAAE,SAAS;oBACvB,eAAe,EAAE,eAAe;iBACjC;aACF;SACF,CAAC;IACJ,CAAC,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,eAAe,CAAC,CAAC,CAAC;IAE5C,OAAO,CACL;QACE,oBAAC,uBAAU,IAAC,KAAK,EAAE,KAAK,GAAI,CACxB,CACP,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { CommandBar, ICommandBarItemProps } from 'office-ui-fabric-react/lib/CommandBar';\nimport { ContextualMenuItemType } from 'office-ui-fabric-react/lib/ContextualMenu';\nimport { useConstCallback } from '@uifabric/react-hooks';\n\nexport const CommandBarLazyExample: React.FunctionComponent = () => {\n  const [menuItems, setMenuItems] = React.useState<ICommandBarItemProps[] | undefined>(undefined);\n\n  const timeoutRef = React.useRef<number | null>();\n\n  const onMenuDismissed = useConstCallback(() => {\n    setMenuItems(undefined);\n  });\n\n  const loadItems = useConstCallback(() => {\n    const itemCount = Math.floor(Math.random() * 5) + 1;\n\n    const newMenuItems: ICommandBarItemProps[] = [];\n\n    for (let i = 0; i < itemCount; i++) {\n      newMenuItems.push({\n        key: `sub-item-${i}`,\n        name: `Item ${i}`,\n      });\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = (setTimeout(() => {\n      setMenuItems(newMenuItems);\n    }, 2000) as unknown) as number;\n  });\n\n  const items = React.useMemo((): ICommandBarItemProps[] => {\n    return [\n      {\n        key: 'a',\n        name: 'Test',\n      },\n      {\n        key: 'menu',\n        name: 'Lazy-loaded menu',\n        subMenuProps: {\n          items: menuItems\n            ? [\n                ...menuItems,\n                {\n                  key: 'divider',\n                  name: '-',\n                  itemType: ContextualMenuItemType.Divider,\n                },\n                {\n                  key: 'permanent',\n                  name: 'Permanent option',\n                },\n              ]\n            : [],\n          onMenuOpened: loadItems,\n          onMenuDismissed: onMenuDismissed,\n        },\n      },\n    ];\n  }, [menuItems, loadItems, onMenuDismissed]);\n\n  return (\n    <div>\n      <CommandBar items={items} />\n    </div>\n  );\n};\n"]}