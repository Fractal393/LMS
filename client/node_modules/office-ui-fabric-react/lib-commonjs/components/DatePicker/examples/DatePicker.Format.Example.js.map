{"version":3,"file":"DatePicker.Format.Example.js","sourceRoot":"../src/","sources":["components/DatePicker/examples/DatePicker.Format.Example.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { DefaultButton } from 'office-ui-fabric-react/lib/Button';\nimport { DatePicker, DayOfWeek, IDatePickerStrings } from 'office-ui-fabric-react/lib/DatePicker';\nimport { mergeStyleSets } from 'office-ui-fabric-react/lib/Styling';\n\nconst DayPickerStrings: IDatePickerStrings = {\n  months: [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ],\n\n  shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n\n  days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n\n  shortDays: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n\n  goToToday: 'Go to today',\n  prevMonthAriaLabel: 'Go to previous month',\n  nextMonthAriaLabel: 'Go to next month',\n  prevYearAriaLabel: 'Go to previous year',\n  nextYearAriaLabel: 'Go to next year',\n  closeButtonAriaLabel: 'Close date picker',\n\n  isRequiredErrorMessage: 'Start date is required.',\n\n  invalidInputErrorMessage: 'Invalid date format.',\n};\n\nconst controlClass = mergeStyleSets({\n  control: {\n    margin: '0 0 15px 0',\n    maxWidth: '300px',\n  },\n});\n\nconst onFormatDate = (date: Date): string => {\n  return date.getDate() + '/' + (date.getMonth() + 1) + '/' + (date.getFullYear() % 100);\n};\n\nconst desc = 'This field is required. One of the support input formats is year dash month dash day.';\nconst firstDayOfWeek = DayOfWeek.Sunday;\n\nexport const DatePickerFormatExample: React.FC = () => {\n  const [value, setValue] = React.useState<Date | null | undefined>(null);\n\n  const onSelectDate = (date: Date | null | undefined): void => {\n    setValue(date);\n  };\n\n  const onClick = (): void => {\n    setValue(null);\n  };\n\n  const onParseDateFromString = (val: string): Date => {\n    const date = value || new Date();\n    const values = (val || '').trim().split('/');\n    const day = val.length > 0 ? Math.max(1, Math.min(31, parseInt(values[0], 10))) : date.getDate();\n    const month = val.length > 1 ? Math.max(1, Math.min(12, parseInt(values[1], 10))) - 1 : date.getMonth();\n    let year = val.length > 2 ? parseInt(values[2], 10) : date.getFullYear();\n    if (year < 100) {\n      year += date.getFullYear() - (date.getFullYear() % 100);\n    }\n    return new Date(year, month, day);\n  };\n\n  return (\n    <div>\n      <p>\n        Applications can customize how dates are formatted and parsed. Formatted dates can be ambiguous, so the control\n        will avoid parsing the formatted strings of dates selected using the UI when text input is allowed. In this\n        example, we are formatting and parsing dates as dd/MM/yy.\n      </p>\n      <DatePicker\n        className={controlClass.control}\n        label=\"Start date\"\n        isRequired={false}\n        allowTextInput={true}\n        ariaLabel={desc}\n        firstDayOfWeek={firstDayOfWeek}\n        strings={DayPickerStrings}\n        value={value!}\n        // eslint-disable-next-line react/jsx-no-bind\n        onSelectDate={onSelectDate}\n        formatDate={onFormatDate}\n        // eslint-disable-next-line react/jsx-no-bind\n        parseDateFromString={onParseDateFromString}\n      />\n      <DefaultButton\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={onClick}\n        text=\"Clear\"\n      />\n      <div>{(value || '').toString()}</div>\n    </div>\n  );\n};\n"]}