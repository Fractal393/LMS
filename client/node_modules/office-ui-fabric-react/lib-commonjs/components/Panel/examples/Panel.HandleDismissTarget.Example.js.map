{"version":3,"file":"Panel.HandleDismissTarget.Example.js","sourceRoot":"../src/","sources":["components/Panel/examples/Panel.HandleDismissTarget.Example.tsx"],"names":[],"mappings":";;AAAA,6BAA+B;AAC/B,4DAAkE;AAClE,0DAAyD;AACzD,qDAAyD;AAEzD,IAAM,WAAW,GACf,2FAA2F;IAC3F,4DAA4D,CAAC;AAElD,QAAA,+BAA+B,GAA4B;IAChE,IAAA,0BAA2C,EAA1C,cAAM,EAAE,iBAAkC,CAAC;IAElD,IAAM,SAAS,GAAG,8BAAgB,CAAC,cAAM,OAAA,SAAS,CAAC,IAAI,CAAC,EAAf,CAAe,CAAC,CAAC;IAC1D,IAAM,YAAY,GAAG,8BAAgB,CAAC,cAAM,OAAA,SAAS,CAAC,KAAK,CAAC,EAAhB,CAAgB,CAAC,CAAC;IAE9D,IAAM,SAAS,GAAG,8BAAgB,CAAC,UAAC,EAAsC;QACxE,IAAI,CAAC,EAAE,EAAE;YACP,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;YAChC,OAAO;SACR;QAED,6FAA6F;QAC7F,OAAO,CAAC,GAAG,CAAC,0CAA0C,CAAC,CAAC;QACxD,mDAAmD;QACnD,IAAM,UAAU,GAAG,EAAE,CAAC,WAAW,CAAC,UAA4B,CAAC;QAC/D,IAAI,UAAU,IAAI,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,EAAE;YACvE,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;SACtC;QACD,IAAI,UAAU,IAAI,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,EAAE;YACnE,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;SACjC;QACD,YAAY,EAAE,CAAC;IACjB,CAAC,CAAC,CAAC;IAEH,OAAO,CACL;QACG,WAAW;QACZ,+BAAM;QACN,+BAAM;QACN,oBAAC,sBAAa,IAAC,IAAI,EAAC,YAAY,EAAC,OAAO,EAAE,SAAS,GAAI;QACvD,oBAAC,aAAK,IACJ,MAAM,EAAE,MAAM,EACd,SAAS,EAAE,SAAS,EACpB,UAAU,EAAC,uDAAuD,EAClE,oBAAoB,EAAC,OAAO,EAC5B,cAAc,EAAE,IAAI;YAEpB;gBACE,+BAAI,WAAW,CAAK;gBACpB,mGAAwE,CACpE,CACA,CACJ,CACP,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { DefaultButton } from 'office-ui-fabric-react/lib/Button';\nimport { Panel } from 'office-ui-fabric-react/lib/Panel';\nimport { useConstCallback } from '@uifabric/react-hooks';\n\nconst explanation =\n  'This example demonstrates detecting whether a panel was dismissed using the close button ' +\n  'or using \"light dismiss\" (a click outside the panel area).';\n\nexport const PanelHandleDismissTargetExample: React.FunctionComponent = () => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const openPanel = useConstCallback(() => setIsOpen(true));\n  const dismissPanel = useConstCallback(() => setIsOpen(false));\n\n  const onDismiss = useConstCallback((ev?: React.SyntheticEvent<HTMLElement>) => {\n    if (!ev) {\n      console.log('Panel dismissed.');\n      return;\n    }\n\n    // Demonstrates how to do different things depending on how which element dismissed the panel\n    console.log('Close button clicked or light dismissed.');\n    // eslint-disable-next-line deprecation/deprecation\n    const srcElement = ev.nativeEvent.srcElement as Element | null;\n    if (srcElement && srcElement.className.indexOf('ms-Button-icon') !== -1) {\n      console.log('Close button clicked.');\n    }\n    if (srcElement && srcElement.className.indexOf('ms-Overlay') !== -1) {\n      console.log('Light dismissed.');\n    }\n    dismissPanel();\n  });\n\n  return (\n    <div>\n      {explanation}\n      <br />\n      <br />\n      <DefaultButton text=\"Open panel\" onClick={openPanel} />\n      <Panel\n        isOpen={isOpen}\n        onDismiss={onDismiss}\n        headerText=\"Panel - Handle close button clicks or light dismissal\"\n        closeButtonAriaLabel=\"Close\"\n        isLightDismiss={true}\n      >\n        <div>\n          <p>{explanation}</p>\n          <p>(Check the debug console for results after dismissing the panel.)</p>\n        </div>\n      </Panel>\n    </div>\n  );\n};\n"]}