{"version":3,"file":"GroupedList.CustomCheckbox.Example.js","sourceRoot":"../src/","sources":["components/GroupedList/examples/GroupedList.CustomCheckbox.Example.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,sEAMgD;AAChD,sEAA6F;AAC7F,kEAAiE;AACjE,kEAA+F;AAC/F,4DAA2D;AAC3D,qDAAiD;AACjD,uDAAqF;AAErF,IAAM,UAAU,GAAG,CAAC,CAAC;AACrB,IAAM,UAAU,GAAG,CAAC,CAAC;AAErB,IAAM,UAAU,GAAsB;IACpC,cAAc,EAAE,UAAC,KAAyB,IAAkB,OAAA,CAC1D,oBAAC,yBAAW,qBAAC,2BAA2B,EAAE,2BAA2B,IAAM,KAAK,EAAI,CACrF,EAF2D,CAE3D;CACF,CAAC;AAEF,IAAM,2BAA2B,GAAG,UAAC,KAAiC,IAAK,OAAA,CACzE,oBAAC,eAAM,IAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,GAAI,CACvD,EAF0E,CAE1E,CAAC;AAEW,QAAA,gCAAgC,GAA4B;IACvE,IAAM,KAAK,GAAqB,sBAAQ,CAAC,cAAM,OAAA,8BAAe,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,UAAU,GAAG,CAAC,CAAC,CAAC,EAArD,CAAqD,CAAC,CAAC;IACtG,IAAM,MAAM,GAAG,sBAAQ,CAAC,cAAM,OAAA,2BAAY,CAAC,UAAU,EAAE,UAAU,EAAE,CAAC,EAAE,UAAU,CAAC,EAAnD,CAAmD,CAAC,CAAC;IACnF,IAAM,OAAO,GAAG,sBAAQ,CAAC;QACvB,OAAA,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;aAClB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;aACX,GAAG,CACF,UAAC,GAAW,IAAc,OAAA,CAAC;YACzB,GAAG,EAAE,GAAG;YACR,IAAI,EAAE,GAAG;YACT,SAAS,EAAE,GAAG;YACd,QAAQ,EAAE,GAAG;SACd,CAAC,EALwB,CAKxB,CACH;IATH,CASG,CACJ,CAAC;IACF,IAAM,SAAS,GAAG,sBAAQ,CAAC,cAAM,OAAA,IAAI,qBAAS,CAAC,EAAE,KAAK,OAAA,EAAE,CAAC,EAAxB,CAAwB,CAAC,CAAC;IAE3D,IAAM,YAAY,GAAG,KAAK,CAAC,WAAW,CACpC,UAAC,YAAqB,EAAE,IAAmB,EAAE,SAAkB,IAAsB,OAAA,CACnF,oBAAC,wBAAU,IACT,OAAO,EAAE,OAAO,EAChB,iBAAiB,EAAE,YAAY,EAC/B,IAAI,EAAE,IAAI,EACV,SAAS,EAAE,SAAU,EACrB,SAAS,EAAE,SAAS,EACpB,aAAa,EAAE,yBAAa,CAAC,QAAQ,GACrC,CACH,EAToF,CASpF,EACD,CAAC,OAAO,EAAE,SAAS,CAAC,CACrB,CAAC;IAEF,OAAO,CACL;QACE,oBAAC,qBAAS;YACR,oBAAC,yBAAa,IAAC,SAAS,EAAE,SAAS,EAAE,aAAa,EAAE,yBAAa,CAAC,QAAQ;gBACxE,oBAAC,yBAAW,IACV,KAAK,EAAE,KAAK,EACZ,YAAY,EAAE,YAAY,EAC1B,SAAS,EAAE,SAAS,EACpB,aAAa,EAAE,yBAAa,CAAC,QAAQ,EACrC,MAAM,EAAE,MAAM,EACd,UAAU,EAAE,UAAU,GACtB,CACY,CACN,CACR,CACP,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport {\n  GroupHeader,\n  GroupedList,\n  IGroupHeaderCheckboxProps,\n  IGroupHeaderProps,\n  IGroupRenderProps,\n} from 'office-ui-fabric-react/lib/GroupedList';\nimport { IColumn, IObjectWithKey, DetailsRow } from 'office-ui-fabric-react/lib/DetailsList';\nimport { FocusZone } from 'office-ui-fabric-react/lib/FocusZone';\nimport { Selection, SelectionMode, SelectionZone } from 'office-ui-fabric-react/lib/Selection';\nimport { Toggle } from 'office-ui-fabric-react/lib/Toggle';\nimport { useConst } from '@uifabric/react-hooks';\nimport { createListItems, createGroups, IExampleItem } from '@uifabric/example-data';\n\nconst groupCount = 3;\nconst groupDepth = 1;\n\nconst groupProps: IGroupRenderProps = {\n  onRenderHeader: (props?: IGroupHeaderProps): JSX.Element => (\n    <GroupHeader onRenderGroupHeaderCheckbox={onRenderGroupHeaderCheckbox} {...props} />\n  ),\n};\n\nconst onRenderGroupHeaderCheckbox = (props?: IGroupHeaderCheckboxProps) => (\n  <Toggle checked={props ? props.checked : undefined} />\n);\n\nexport const GroupedListCustomCheckboxExample: React.FunctionComponent = () => {\n  const items: IObjectWithKey[] = useConst(() => createListItems(Math.pow(groupCount, groupDepth + 1)));\n  const groups = useConst(() => createGroups(groupCount, groupDepth, 0, groupCount));\n  const columns = useConst(() =>\n    Object.keys(items[0])\n      .slice(0, 3)\n      .map(\n        (key: string): IColumn => ({\n          key: key,\n          name: key,\n          fieldName: key,\n          minWidth: 300,\n        }),\n      ),\n  );\n  const selection = useConst(() => new Selection({ items }));\n\n  const onRenderCell = React.useCallback(\n    (nestingDepth?: number, item?: IExampleItem, itemIndex?: number): React.ReactNode => (\n      <DetailsRow\n        columns={columns}\n        groupNestingDepth={nestingDepth}\n        item={item}\n        itemIndex={itemIndex!}\n        selection={selection}\n        selectionMode={SelectionMode.multiple}\n      />\n    ),\n    [columns, selection],\n  );\n\n  return (\n    <div>\n      <FocusZone>\n        <SelectionZone selection={selection} selectionMode={SelectionMode.multiple}>\n          <GroupedList\n            items={items}\n            onRenderCell={onRenderCell}\n            selection={selection}\n            selectionMode={SelectionMode.multiple}\n            groups={groups}\n            groupProps={groupProps}\n          />\n        </SelectionZone>\n      </FocusZone>\n    </div>\n  );\n};\n"]}