{"version":3,"file":"Tooltip.Overflow.Example.js","sourceRoot":"../src/","sources":["components/Tooltip/examples/Tooltip.Overflow.Example.tsx"],"names":[],"mappings":";;AAAA,6BAA+B;AAC/B,4DAA2D;AAC3D,0DAAyD;AACzD,8DAA0G;AAC1G,8DAA8E;AAC9E,kEAA2D;AAC3D,qDAA8C;AAE9C,IAAM,aAAa,GACjB,gHAAgH,CAAC;AACnH,IAAM,WAAW,GACf,0GAA0G,CAAC;AAE7G,2FAA2F;AAC3F,uFAAuF;AACvF,IAAM,KAAK,GAAG,kBAAQ,EAAE,CAAC;AACzB,IAAM,UAAU,GAAgC;IAC9C,IAAI,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE,EAAE,eAAe,EAAE,KAAK,CAAC,OAAO,CAAC,YAAY,EAAE;CACrF,CAAC;AACF,IAAM,UAAU,GAAG,wBAAc,CAAC;IAChC,2DAA2D;IAC3D,QAAQ,EAAE;QACR,QAAQ,EAAE,QAAQ;QAClB,YAAY,EAAE,UAAU;QACxB,UAAU,EAAE,QAAQ;QACpB,KAAK,EAAE,GAAG;KACX;IACD,oBAAoB;IACpB,OAAO,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE,SAAS,EAAE,EAAE,iBAAiB,EAAE,EAAE,aAAa,EAAE,EAAE,EAAE,EAAE,EAAE;IACnF,MAAM,EAAE;QACN,OAAO,EAAE,EAAE;QACX,MAAM,EAAE,aAAa,GAAG,KAAK,CAAC,OAAO,CAAC,eAAe;QACrD,SAAS,EAAE,EAAE,gBAAgB,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE,EAAE;KACnD;CACF,CAAC,CAAC;AAEU,QAAA,sBAAsB,GAA4B;IAC7D,IAAM,eAAe,GAAG,mBAAK,CAAC,cAAc,CAAC,CAAC;IACxC,IAAA,0BAA2D,EAA1D,sBAAc,EAAE,yBAA0C,CAAC;IAC5D,IAAA,0BAA2E,EAA1E,8BAAsB,EAAE,iCAAkD,CAAC;IAElF,IAAM,gBAAgB,GAAG,KAAK,CAAC,WAAW,CAAC,cAAM,OAAA,iBAAiB,CAAC,CAAC,cAAc,CAAC,EAAlC,CAAkC,EAAE,CAAC,cAAc,CAAC,CAAC,CAAC;IAEvG,OAAO,CACL;QACE,oBAAC,eAAM,IAAC,KAAK,EAAC,wBAAwB,EAAC,WAAW,QAAC,OAAO,EAAE,cAAc,EAAE,QAAQ,EAAE,gBAAgB,GAAI;QAG1G,6BAAK,SAAS,EAAE,UAAU,CAAC,OAAO;YAChC,oBAAC,aAAK,uDAAqD;YAG3D,6BAAK,SAAS,EAAE,eAAG,CAAC,UAAU,CAAC,MAAM,EAAE,cAAc,IAAI,UAAU,CAAC,QAAQ,CAAC;;gBAE3E,oBAAC,qBAAW,IACV,YAAY,EAAE,6BAAmB,CAAC,MAAM;oBACxC,4FAA4F;oBAC5F,OAAO,EAAE,aAAa;oBACtB,oFAAoF;oBACpF,oEAAoE;oBACpE,eAAe,EAAE,yBAAyB,EAC1C,EAAE,EAAE,eAAe,EACnB,MAAM,EAAE,UAAU;;oBAEY,GAAG;oBACjC,kDAAwB,sBAAsB,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,SAAS,IAAG,aAAa,CAAQ,CACxF,CACV,CACF;QAGN,6BAAK,SAAS,EAAE,UAAU,CAAC,OAAO;YAChC,oBAAC,aAAK,4DAA0D;YAEhE,oBAAC,qBAAW,IACV,YAAY,EAAE,6BAAmB,CAAC,IAAI;gBACtC,uCAAuC;gBACvC,aAAa,EAAE,eAAG,CAAC,cAAc,IAAI,UAAU,CAAC,QAAQ,CAAC,EACzD,OAAO,EAAE,WAAW,EACpB,eAAe,EAAE,yBAAyB,EAC1C,MAAM,EAAE,UAAU;;gBAGa,WAAW,CAC9B,CACV,CACF,CACP,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { Toggle } from 'office-ui-fabric-react/lib/Toggle';\nimport { Label } from 'office-ui-fabric-react/lib/Label';\nimport { TooltipHost, TooltipOverflowMode, ITooltipHostStyles } from 'office-ui-fabric-react/lib/Tooltip';\nimport { mergeStyleSets, getTheme } from 'office-ui-fabric-react/lib/Styling';\nimport { css } from 'office-ui-fabric-react/lib/Utilities';\nimport { useId } from '@uifabric/react-hooks';\n\nconst contentParent =\n  \"If the parent element's content overflows, hovering here will show a tooltip (anchored to the parent element).\";\nconst contentSelf =\n  \"If the TooltipHost's content overflows, hovering here will show a tooltip (anchored to the TooltipHost).\";\n\n// The TooltipHost uses display: inline by default, which causes issues with this example's\n// styling and layout. Use display: block instead. (other styles are just to look nice)\nconst theme = getTheme();\nconst hostStyles: Partial<ITooltipHostStyles> = {\n  root: { display: 'block', padding: 10, backgroundColor: theme.palette.themeLighter },\n};\nconst classNames = mergeStyleSets({\n  // Applied to make content overflow (and tooltips activate)\n  overflow: {\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    width: 200,\n  },\n  // Just to look nice\n  example: { marginTop: 20, selectors: { '> *:first-child': { paddingBottom: 10 } } },\n  parent: {\n    padding: 10,\n    border: '2px dashed ' + theme.palette.neutralTertiary,\n    selectors: { '> *:last-child': { marginTop: 10 } },\n  },\n});\n\nexport const TooltipOverflowExample: React.FunctionComponent = () => {\n  const parentTooltipId = useId('text-tooltip');\n  const [shouldOverflow, setShouldOverflow] = React.useState(false);\n  const [isParentTooltipVisible, setIsParentTooltipVisible] = React.useState(false);\n\n  const onOverflowChange = React.useCallback(() => setShouldOverflow(!shouldOverflow), [shouldOverflow]);\n\n  return (\n    <div>\n      <Toggle label=\"Force text to overflow\" inlineLabel checked={shouldOverflow} onChange={onOverflowChange} />\n\n      {/* Example of TooltipOverflowMode.Parent */}\n      <div className={classNames.example}>\n        <Label>Show tooltip when parent's content overflows</Label>\n\n        {/* This parent element will overflow */}\n        <div className={css(classNames.parent, shouldOverflow && classNames.overflow)}>\n          This is the parent element.\n          <TooltipHost\n            overflowMode={TooltipOverflowMode.Parent}\n            // In a case like this, you should usually display the non-truncated content in the tooltip.\n            content={contentParent}\n            // If targeting the tooltip to the parent, it's necessary to manually set and remove\n            // aria-describedby for the content when the tooltip is shown/hidden\n            onTooltipToggle={setIsParentTooltipVisible}\n            id={parentTooltipId}\n            styles={hostStyles}\n          >\n            This is the TooltipHost area.{' '}\n            <span aria-describedby={isParentTooltipVisible ? parentTooltipId : undefined}>{contentParent}</span>\n          </TooltipHost>\n        </div>\n      </div>\n\n      {/* Example of TooltipOverflowMode.Self */}\n      <div className={classNames.example}>\n        <Label>Show tooltip when TooltipHost's content overflows</Label>\n\n        <TooltipHost\n          overflowMode={TooltipOverflowMode.Self}\n          // The TooltipHost itself will overflow\n          hostClassName={css(shouldOverflow && classNames.overflow)}\n          content={contentSelf}\n          onTooltipToggle={setIsParentTooltipVisible}\n          styles={hostStyles}\n          // In this mode, aria-describedby is automatically added/removed based on tooltip visibility\n        >\n          This is the TooltipHost area. {contentSelf}\n        </TooltipHost>\n      </div>\n    </div>\n  );\n};\n"]}