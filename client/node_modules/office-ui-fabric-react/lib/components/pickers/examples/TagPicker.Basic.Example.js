import * as React from 'react';
import { TagPicker, } from 'office-ui-fabric-react/lib/Pickers';
import { Toggle } from 'office-ui-fabric-react/lib/Toggle';
import { mergeStyles } from 'office-ui-fabric-react/lib/Styling';
import { useBoolean } from '@uifabric/react-hooks';
var rootClass = mergeStyles({
    maxWidth: 500,
});
var toggleStyles = { root: { margin: '10px 0' } };
var inputProps = {
    onBlur: function (ev) { return console.log('onBlur called'); },
    onFocus: function (ev) { return console.log('onFocus called'); },
    'aria-label': 'Tag picker',
};
var pickerSuggestionsProps = {
    suggestionsHeaderText: 'Suggested tags',
    noResultsFoundText: 'No color tags found',
};
var testTags = [
    'black',
    'blue',
    'brown',
    'cyan',
    'green',
    'magenta',
    'mauve',
    'orange',
    'pink',
    'purple',
    'red',
    'rose',
    'violet',
    'white',
    'yellow',
].map(function (item) { return ({ key: item, name: item }); });
var listContainsTagList = function (tag, tagList) {
    if (!tagList || !tagList.length || tagList.length === 0) {
        return false;
    }
    return tagList.some(function (compareTag) { return compareTag.key === tag.key; });
};
var filterSuggestedTags = function (filterText, tagList) {
    return filterText
        ? testTags.filter(function (tag) { return tag.name.toLowerCase().indexOf(filterText.toLowerCase()) === 0 && !listContainsTagList(tag, tagList); })
        : [];
};
var filterSelectedTags = function (filterText, tagList) {
    return filterText ? testTags.filter(function (tag) { return tag.name.toLowerCase().indexOf(filterText.toLowerCase()) === 0; }) : [];
};
var getTextFromItem = function (item) { return item.name; };
export var TagPickerBasicExample = function () {
    // All pickers extend from BasePicker specifying the item type.
    var picker = React.useRef(null);
    var _a = useBoolean(false), tagPicker = _a[0], toggleIsTagPickerVisible = _a[1].toggle;
    var onItemSelected = React.useCallback(function (item) {
        if (picker.current && listContainsTagList(item, picker.current.items)) {
            return null;
        }
        return item;
    }, []);
    return (React.createElement("div", { className: rootClass },
        React.createElement(Toggle, { styles: toggleStyles, label: "Disable tag picker", checked: tagPicker, onChange: toggleIsTagPickerVisible }),
        "Filter items in suggestions: This picker will filter added items from the search suggestions.",
        React.createElement(TagPicker, { removeButtonAriaLabel: "Remove", onResolveSuggestions: filterSuggestedTags, getTextFromItem: getTextFromItem, pickerSuggestionsProps: pickerSuggestionsProps, itemLimit: 2, disabled: tagPicker, inputProps: inputProps }),
        React.createElement("br", null),
        "Filter items on selected: This picker will show already-added suggestions but will not add duplicate tags.",
        React.createElement(TagPicker, { removeButtonAriaLabel: "Remove", componentRef: picker, onResolveSuggestions: filterSelectedTags, onItemSelected: onItemSelected, getTextFromItem: getTextFromItem, pickerSuggestionsProps: pickerSuggestionsProps, itemLimit: 2, disabled: tagPicker, inputProps: inputProps })));
};
//# sourceMappingURL=TagPicker.Basic.Example.js.map