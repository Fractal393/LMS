{"version":3,"file":"Announced.SearchResults.Example.js","sourceRoot":"../src/","sources":["components/Announced/examples/Announced.SearchResults.Example.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Announced } from 'office-ui-fabric-react/lib/Announced';\nimport { TagPicker, ITag, IInputProps, IBasePickerSuggestionsProps } from 'office-ui-fabric-react/lib/Pickers';\nimport { Text } from 'office-ui-fabric-react/lib/Text';\nimport { IStackTokens, Stack } from 'office-ui-fabric-react/lib/Stack';\nimport { useConstCallback } from '@uifabric/react-hooks';\n\nconst inputProps: IInputProps = {\n  'aria-label': 'Tag Picker',\n};\nconst pickerSuggestionsProps: IBasePickerSuggestionsProps = {\n  suggestionsHeaderText: 'Suggested tags',\n  noResultsFoundText: 'No color tags found',\n};\nconst _testTags: ITag[] = [\n  'black',\n  'blue',\n  'brown',\n  'cyan',\n  'green',\n  'magenta',\n  'mauve',\n  'orange',\n  'pink',\n  'purple',\n  'red',\n  'rose',\n  'violet',\n  'white',\n  'yellow',\n].map(item => ({ key: item, name: item }));\n\nconst stackTokens: IStackTokens = { childrenGap: 10 };\n\nconst getTextFromItem = (item: ITag): string => {\n  return item.name;\n};\n\nconst listContainsDocument = (tag: ITag, tagList: ITag[]) => {\n  if (!tagList || !tagList.length || tagList.length === 0) {\n    return false;\n  }\n  return tagList.filter(compareTag => compareTag.key === tag.key).length > 0;\n};\n\nexport const AnnouncedSearchResultsExample: React.FunctionComponent = () => {\n  const [hasFilterText, setHasFilterText] = React.useState(false);\n  const [suggestionCount, setSuggestionCount] = React.useState(0);\n\n  const onFilterChanged = useConstCallback((filterText: string, tagList: ITag[]): ITag[] => {\n    setHasFilterText(!!filterText);\n    const filteredTags = filterText\n      ? _testTags\n          .filter(tag => tag.name.toLowerCase().indexOf(filterText.toLowerCase()) === 0)\n          .filter(tag => !listContainsDocument(tag, tagList))\n      : [];\n    setSuggestionCount(filteredTags.length);\n    return filteredTags;\n  });\n\n  return (\n    <Stack tokens={stackTokens}>\n      <Text>\n        Turn on Narrator and type a letter or two into the TagPicker. This picker will filter added items from the\n        search suggestions.\n      </Text>\n      {hasFilterText && <Announced message={`${suggestionCount} color tag${suggestionCount === 1 ? '' : 's'} found`} />}\n      <TagPicker\n        onResolveSuggestions={onFilterChanged}\n        getTextFromItem={getTextFromItem}\n        pickerSuggestionsProps={pickerSuggestionsProps}\n        inputProps={inputProps}\n      />\n    </Stack>\n  );\n};\n"]}