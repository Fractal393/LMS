{"version":3,"file":"Announced.LazyLoading.Example.js","sourceRoot":"../src/","sources":["components/Announced/examples/Announced.LazyLoading.Example.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Announced } from 'office-ui-fabric-react/lib/Announced';\nimport { createArray } from 'office-ui-fabric-react/lib/Utilities';\nimport { Image } from 'office-ui-fabric-react/lib/Image';\nimport { FocusZone } from 'office-ui-fabric-react/lib/FocusZone';\nimport { Text } from 'office-ui-fabric-react/lib/Text';\nimport { Stack, IStackTokens, IStackStyles } from 'office-ui-fabric-react/lib/Stack';\nimport { DefaultButton, IButtonStyles } from 'office-ui-fabric-react/lib/Button';\nimport { ProgressIndicator } from 'office-ui-fabric-react/lib/ProgressIndicator';\nimport { mergeStyles } from 'office-ui-fabric-react/lib/Styling';\nimport { useBoolean, useSetInterval, useConst } from '@uifabric/react-hooks';\n\nconst PHOTO_COUNT = 40;\n\nconst stackTokens: IStackTokens = { childrenGap: 10 };\nconst photoStackTokens: IStackTokens = { childrenGap: '6 6' };\n\nconst defaultButtonStyles: Partial<IButtonStyles> = { root: { width: 150 } };\n\nconst photoStackStyles: Partial<IStackStyles> = {\n  inner: {\n    padding: 0,\n  },\n};\n\nconst photoCellClass = mergeStyles({\n  display: 'block',\n  boxSizing: 'border-box',\n  width: 100,\n  height: 100,\n});\n\ninterface IPhoto {\n  url: string;\n  width: number;\n  height: number;\n}\n\nexport const AnnouncedLazyLoadingExample = () => {\n  const [total, setTotal] = React.useState<number>(0);\n  const [announcedMessage, setAnnouncedMessage] = React.useState<string | undefined>(undefined);\n  const [loading, { toggle: toggleLoading }] = useBoolean(false);\n  const percentComplete = total / PHOTO_COUNT;\n\n  const { setInterval, clearInterval } = useSetInterval();\n\n  const photos: IPhoto[] = useConst(() => {\n    const width = 100;\n    const height = 100;\n    return createArray(PHOTO_COUNT, () => ({\n      url: `http://placehold.it/${width}x${height}`,\n      width,\n      height,\n    }));\n  });\n\n  React.useEffect(() => {\n    if (loading) {\n      setTotal(0);\n\n      const itemIntervalId = setInterval(() => {\n        setTotal((t: number) => {\n          if (t < PHOTO_COUNT) {\n            return t + 1;\n          }\n          clearInterval(itemIntervalId);\n          clearInterval(announceIntervalId);\n          toggleLoading();\n          return t;\n        });\n      }, 500);\n\n      const announceIntervalId = setInterval(() => {\n        // Refering to total directly would cause the effect to dispose.\n        // Instead pull the total value from the setter to apply to the announcement.\n        setTotal((t: number) => {\n          setAnnouncedMessage(`${t} of ${PHOTO_COUNT} photos loaded`);\n          return t;\n        });\n      }, 4000);\n\n      return () => {\n        clearInterval(itemIntervalId);\n        clearInterval(announceIntervalId);\n      };\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clearInterval, setInterval, loading]);\n\n  return (\n    <>\n      <Stack tokens={stackTokens}>\n        <Text>\n          Turn on Narrator and press the button to start loading photos. The number of photos loaded will be announced\n          every four seconds.\n        </Text>\n        <DefaultButton text={loading ? 'Cancel' : 'Load photos'} onClick={toggleLoading} styles={defaultButtonStyles} />\n        <ProgressIndicator label={!loading ? 'Paused' : 'Loading photos'} percentComplete={percentComplete} />\n        <FocusZone>\n          <Stack\n            horizontal\n            wrap\n            tokens={photoStackTokens}\n            styles={photoStackStyles}\n            slots={{ inner: { component: 'ul' } }}\n          >\n            {photos.slice(0, total).map((photo: IPhoto, index: number) => (\n              <li\n                key={index}\n                className={photoCellClass}\n                aria-posinset={index + 1}\n                aria-setsize={PHOTO_COUNT}\n                aria-label=\"Photo\"\n                data-is-focusable\n              >\n                <Image src={photo.url} width={photo.width} height={photo.height} />\n              </li>\n            ))}\n          </Stack>\n        </FocusZone>\n      </Stack>\n      {loading && <Announced message={announcedMessage} />}\n    </>\n  );\n};\n"]}