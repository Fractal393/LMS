{"version":3,"file":"ChoiceGroup.Label.Example.js","sourceRoot":"../src/","sources":["components/ChoiceGroup/examples/ChoiceGroup.Label.Example.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,WAAW,EAAsB,MAAM,wCAAwC,CAAC;AACzF,OAAO,EAAE,KAAK,EAAE,MAAM,kCAAkC,CAAC;AACzD,OAAO,EAAE,IAAI,EAAE,MAAM,iCAAiC,CAAC;AACvD,OAAO,EAAE,KAAK,EAAE,MAAM,kCAAkC,CAAC;AACzD,OAAO,EAAE,KAAK,EAAE,MAAM,uBAAuB,CAAC;AAE9C,IAAM,OAAO,GAAyB;IACpC,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE;IAC9B,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE;IAC9B,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,IAAI,EAAE;IAC9C,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE;CAC/B,CAAC;AAEF,MAAM,CAAC,IAAM,uBAAuB,GAA4B;IAC9D,iFAAiF;IACjF,6EAA6E;IAC7E,gGAAgG;IAChG,qGAAqG;IACrG,IAAM,OAAO,GAAG,KAAK,CAAC,cAAc,CAAC,CAAC;IAEtC,OAAO,CACL;QAGE,oBAAC,KAAK,IAAC,EAAE,EAAE,OAAO;YAChB,oBAAC,KAAK,IAAC,UAAU,QAAC,aAAa,EAAC,QAAQ;gBACtC,6DAAqC;gBACrC,oBAAC,IAAI,IAAC,QAAQ,EAAC,QAAQ,GAAG,CACpB,CACF;QACR,oBAAC,WAAW;QACV,qCAAqC;QACrC,uBAAuB;;YADvB,qCAAqC;YACrC,uBAAuB;YACvB,kBAAkB,EAAC,GAAG,EACtB,OAAO,EAAE,OAAO,EAChB,QAAQ,EAAE,SAAS,EACnB,cAAc,EAAE,OAAO,GACvB,CACE,CACP,CAAC;AACJ,CAAC,CAAC;AAEF,SAAS,SAAS,CAAC,EAAqC,EAAE,MAA0B;IAClF,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;AACtB,CAAC","sourcesContent":["import * as React from 'react';\nimport { ChoiceGroup, IChoiceGroupOption } from 'office-ui-fabric-react/lib/ChoiceGroup';\nimport { Label } from 'office-ui-fabric-react/lib/Label';\nimport { Icon } from 'office-ui-fabric-react/lib/Icon';\nimport { Stack } from 'office-ui-fabric-react/lib/Stack';\nimport { useId } from '@uifabric/react-hooks';\n\nconst options: IChoiceGroupOption[] = [\n  { key: 'A', text: 'Option A' },\n  { key: 'B', text: 'Option B' },\n  { key: 'C', text: 'Option C', disabled: true },\n  { key: 'D', text: 'Option D' },\n];\n\nexport const ChoiceGroupLabelExample: React.FunctionComponent = () => {\n  // Use the useId() hook to ensure that the label ID is unique on the page. Notes:\n  // - It's also okay to use a plain string and manually ensure its uniqueness.\n  // - In a function component, we get the ID with the useId() hook so that it will stay the same.\n  //   (In a class, you'd create the ID in the constructor with getId and save it in a private member.)\n  const labelId = useId('labelElement');\n\n  return (\n    <div>\n      {/* ONLY do this if you need to customize the label.\n      In most cases you should use ChoiceGroup's built-in `label` prop instead. */}\n      <Label id={labelId}>\n        <Stack horizontal verticalAlign=\"center\">\n          <span>Custom label&nbsp;&nbsp;</span>\n          <Icon iconName=\"Filter\" />\n        </Stack>\n      </Label>\n      <ChoiceGroup\n        // This is usually what you should do\n        // label=\"Normal label\"\n        defaultSelectedKey=\"B\"\n        options={options}\n        onChange={_onChange}\n        ariaLabelledBy={labelId}\n      />\n    </div>\n  );\n};\n\nfunction _onChange(ev: React.FormEvent<HTMLInputElement>, option: IChoiceGroupOption): void {\n  console.dir(option);\n}\n"]}