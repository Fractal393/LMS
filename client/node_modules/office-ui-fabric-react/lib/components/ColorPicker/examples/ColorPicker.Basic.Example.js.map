{"version":3,"file":"ColorPicker.Basic.Example.js","sourceRoot":"../src/","sources":["components/ColorPicker/examples/ColorPicker.Basic.Example.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  ColorPicker,\n  ChoiceGroup,\n  IChoiceGroupOption,\n  Toggle,\n  getColorFromString,\n  IColor,\n  IColorPickerStyles,\n  IColorPickerProps,\n  updateA,\n} from 'office-ui-fabric-react/lib/index';\nimport { mergeStyleSets } from 'office-ui-fabric-react/lib/Styling';\nimport { useConstCallback } from '@uifabric/react-hooks';\n\nconst white = getColorFromString('#ffffff')!;\n\nexport const ColorPickerBasicExample: React.FunctionComponent = () => {\n  const [color, setColor] = React.useState(white);\n  const [showPreview, setShowPreview] = React.useState(true);\n  const [alphaType, setAlphaType] = React.useState<IColorPickerProps['alphaType']>('alpha');\n\n  const updateColor = useConstCallback((ev: any, colorObj: IColor) => setColor(colorObj));\n  const onShowPreviewClick = useConstCallback((ev: any, checked?: boolean) => setShowPreview(!!checked));\n  const onAlphaTypeChange = React.useCallback(\n    (ev: any, option: IChoiceGroupOption = alphaOptions[0]) => {\n      if (option.key === 'none') {\n        // If hiding the alpha slider, remove transparency from the color\n        setColor(updateA(color, 100));\n      }\n      setAlphaType(option.key as IColorPickerProps['alphaType']);\n    },\n    [color],\n  );\n\n  return (\n    <div className={classNames.wrapper}>\n      <ColorPicker\n        color={color}\n        onChange={updateColor}\n        alphaType={alphaType}\n        showPreview={showPreview}\n        styles={colorPickerStyles}\n        // The ColorPicker provides default English strings for visible text.\n        // If your app is localized, you MUST provide the `strings` prop with localized strings.\n        strings={{\n          // By default, the sliders will use the text field labels as their aria labels.\n          // If you'd like to provide more detailed instructions, you can use these props.\n          alphaAriaLabel: 'Alpha slider: Use left and right arrow keys to change value, hold shift for a larger jump',\n          transparencyAriaLabel:\n            'Transparency slider: Use left and right arrow keys to change value, hold shift for a larger jump',\n          hueAriaLabel: 'Hue slider: Use left and right arrow keys to change value, hold shift for a larger jump',\n        }}\n      />\n\n      <div className={classNames.column2}>\n        <Toggle label=\"Show preview box\" onChange={onShowPreviewClick} checked={showPreview} />\n        <ChoiceGroup\n          label=\"Alpha slider type\"\n          options={alphaOptions}\n          defaultSelectedKey={alphaOptions[0].key}\n          onChange={onAlphaTypeChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst alphaOptions: IChoiceGroupOption[] = [\n  { key: 'alpha', text: 'Alpha' },\n  { key: 'transparency', text: 'Transparency' },\n  { key: 'none', text: 'None' },\n];\n\nconst classNames = mergeStyleSets({\n  wrapper: { display: 'flex' },\n  column2: { marginLeft: 10 },\n});\n\nconst colorPickerStyles: Partial<IColorPickerStyles> = {\n  panel: { padding: 12 },\n  root: {\n    maxWidth: 352,\n    minWidth: 352,\n  },\n  colorRectangle: { height: 268 },\n};\n"]}