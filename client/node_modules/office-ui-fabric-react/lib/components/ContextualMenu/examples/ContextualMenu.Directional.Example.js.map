{"version":3,"file":"ContextualMenu.Directional.Example.js","sourceRoot":"../src/","sources":["components/ContextualMenu/examples/ContextualMenu.Directional.Example.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useConstCallback } from '@uifabric/react-hooks';\nimport { DefaultButton } from 'office-ui-fabric-react/lib/Button';\nimport { Checkbox, ICheckboxStyles } from 'office-ui-fabric-react/lib/Checkbox';\nimport {\n  ContextualMenuItemType,\n  DirectionalHint,\n  IContextualMenuProps,\n  IContextualMenuItem,\n} from 'office-ui-fabric-react/lib/ContextualMenu';\nimport { Dropdown, IDropdownOption } from 'office-ui-fabric-react/lib/Dropdown';\nimport { getRTL } from 'office-ui-fabric-react/lib/Utilities';\nimport './ContextualMenuExample.scss';\n\nconst DIRECTION_OPTIONS = [\n  { key: DirectionalHint.topLeftEdge, text: 'Top Left Edge' },\n  { key: DirectionalHint.topCenter, text: 'Top Center' },\n  { key: DirectionalHint.topRightEdge, text: 'Top Right Edge' },\n  { key: DirectionalHint.topAutoEdge, text: 'Top Auto Edge' },\n  { key: DirectionalHint.bottomLeftEdge, text: 'Bottom Left Edge' },\n  { key: DirectionalHint.bottomCenter, text: 'Bottom Center' },\n  { key: DirectionalHint.bottomRightEdge, text: 'Bottom Right Edge' },\n  { key: DirectionalHint.bottomAutoEdge, text: 'Bottom Auto Edge' },\n  { key: DirectionalHint.leftTopEdge, text: 'Left Top Edge' },\n  { key: DirectionalHint.leftCenter, text: 'Left Center' },\n  { key: DirectionalHint.leftBottomEdge, text: 'Left Bottom Edge' },\n  { key: DirectionalHint.rightTopEdge, text: 'Right Top Edge' },\n  { key: DirectionalHint.rightCenter, text: 'Right Center' },\n  { key: DirectionalHint.rightBottomEdge, text: 'Right Bottom Edge' },\n];\n\nconst checkboxStyles: Partial<ICheckboxStyles> = { root: { margin: '10px 0' } };\n\nexport const ContextualMenuDirectionalExample: React.FunctionComponent = () => {\n  const [isBeakVisible, setIsBeakVisible] = React.useState(false);\n  const [useDirectionalHintForRTL, setUseDirectionalHintForRTL] = React.useState(false);\n  const [directionalHint, setDirectionalHint] = React.useState<DirectionalHint>(DirectionalHint.bottomLeftEdge);\n  const [directionalHintForRTL, setDirectionalHintForRTL] = React.useState<DirectionalHint>(\n    DirectionalHint.bottomLeftEdge,\n  );\n\n  const onShowBeakChange = useConstCallback((event: React.FormEvent<HTMLElement>, isVisible: boolean): void => {\n    setIsBeakVisible(isVisible);\n  });\n\n  const onUseRtlHintChange = useConstCallback((event: React.FormEvent<HTMLElement>, isVisible: boolean): void => {\n    setUseDirectionalHintForRTL(isVisible);\n  });\n\n  const onDirectionalChanged = useConstCallback(\n    (event: React.FormEvent<HTMLDivElement>, option: IDropdownOption): void => {\n      setDirectionalHint(option.key as DirectionalHint);\n    },\n  );\n\n  const onDirectionalRtlChanged = useConstCallback(\n    (event: React.FormEvent<HTMLDivElement>, option: IDropdownOption): void => {\n      setDirectionalHintForRTL(option.key as DirectionalHint);\n    },\n  );\n\n  const menuProps: IContextualMenuProps = React.useMemo(\n    () => ({\n      isBeakVisible: isBeakVisible,\n      directionalHint: directionalHint,\n      directionalHintForRTL: useDirectionalHintForRTL ? directionalHintForRTL : undefined,\n      gapSpace: 0,\n      beakWidth: 20,\n      directionalHintFixed: false,\n      items: menuItems,\n    }),\n    [isBeakVisible, directionalHint, directionalHintForRTL, useDirectionalHintForRTL],\n  );\n\n  return (\n    <div className=\"ms-ContextualMenuDirectionalExample\">\n      <div className=\"ms-ContextualMenuDirectionalExample-configArea\">\n        <Checkbox styles={checkboxStyles} label=\"Show beak\" checked={isBeakVisible} onChange={onShowBeakChange} />\n        <Dropdown\n          label=\"Directional hint\"\n          selectedKey={directionalHint!}\n          options={DIRECTION_OPTIONS}\n          onChange={onDirectionalChanged}\n        />\n        {getRTL() && (\n          <Checkbox label=\"Use RTL directional hint\" checked={useDirectionalHintForRTL} onChange={onUseRtlHintChange} />\n        )}\n        {getRTL() && (\n          <Dropdown\n            label=\"Directional hint for RTL\"\n            selectedKey={directionalHintForRTL!}\n            options={DIRECTION_OPTIONS}\n            onChange={onDirectionalRtlChanged}\n            disabled={!useDirectionalHintForRTL}\n          />\n        )}\n      </div>\n      <div className=\"ms-ContextualMenuDirectionalExample-buttonArea\">\n        <DefaultButton text=\"Show context menu\" menuProps={menuProps} />\n      </div>\n    </div>\n  );\n};\n\nconst menuItems: IContextualMenuItem[] = [\n  {\n    key: 'newItem',\n    text: 'New',\n  },\n  {\n    key: 'divider_1',\n    itemType: ContextualMenuItemType.Divider,\n  },\n  {\n    key: 'rename',\n    text: 'Rename',\n  },\n  {\n    key: 'edit',\n    text: 'Edit',\n  },\n  {\n    key: 'properties',\n    text: 'Properties',\n  },\n  {\n    key: 'disabled',\n    text: 'Disabled item',\n    disabled: true,\n  },\n];\n"]}