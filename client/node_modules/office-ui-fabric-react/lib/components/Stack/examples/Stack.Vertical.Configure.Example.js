import { __assign } from "tslib";
import * as React from 'react';
import { Checkbox } from 'office-ui-fabric-react/lib/Checkbox';
import { Dropdown } from 'office-ui-fabric-react/lib/Dropdown';
import { Slider } from 'office-ui-fabric-react/lib/Slider';
import { Stack } from 'office-ui-fabric-react/lib/Stack';
import { mergeStyles, DefaultPalette } from 'office-ui-fabric-react/lib/Styling';
import { TextField } from 'office-ui-fabric-react/lib/TextField';
import { useBoolean } from '@uifabric/react-hooks';
import { range } from '@uifabric/example-data';
var checkboxStyles = { root: { marginRight: 10 } };
// Alignment options
var verticalAlignmentOptions = [
    { key: 'start', text: 'Top' },
    { key: 'center', text: 'Center' },
    { key: 'end', text: 'Bottom' },
    { key: 'space-around', text: 'Space around' },
    { key: 'space-between', text: 'Space between' },
    { key: 'space-evenly', text: 'Space evenly' },
];
var horizontalAlignmentOptions = [
    { key: 'start', text: 'Left' },
    { key: 'center', text: 'Center' },
    { key: 'end', text: 'Right' },
];
// Non-mutating tokens definition
var sectionStackTokens = { childrenGap: 10 };
var configureStackTokens = { childrenGap: 20 };
var VerticalStackConfigureExampleContent = function (props) {
    var numItems = props.numItems, showBoxShadow = props.showBoxShadow, preventOverflow = props.preventOverflow, disableShrink = props.disableShrink, wrap = props.wrap, stackHeight = props.stackHeight, autoHeight = props.autoHeight, childrenGap = props.childrenGap, paddingLeft = props.paddingLeft, paddingRight = props.paddingRight, paddingTop = props.paddingTop, paddingBottom = props.paddingBottom, verticalAlignment = props.verticalAlignment, horizontalAlignment = props.horizontalAlignment, hideEmptyChildren = props.hideEmptyChildren, emptyChildren = props.emptyChildren;
    // Styles definition
    var stackStyles = {
        root: [
            {
                background: DefaultPalette.themeTertiary,
                height: autoHeight ? 'auto' : stackHeight,
                marginLeft: 10,
                marginRight: 10,
            },
            preventOverflow && {
                overflow: 'hidden',
            },
        ],
    };
    var stackItemStyles = {
        root: {
            alignItems: 'center',
            background: DefaultPalette.themePrimary,
            boxShadow: showBoxShadow ? "0px 0px 10px 5px " + DefaultPalette.themeDarker : '',
            color: DefaultPalette.white,
            display: 'flex',
            height: 50,
            justifyContent: 'center',
            width: 50,
        },
    };
    // Tokens definition
    var exampleStackTokens = {
        childrenGap: childrenGap + ' ' + 0,
        padding: paddingTop + "px " + paddingRight + "px " + paddingBottom + "px " + paddingLeft + "px",
    };
    return (React.createElement(Stack, { disableShrink: disableShrink, wrap: wrap, verticalAlign: verticalAlignment, horizontalAlign: horizontalAlignment, styles: stackStyles, tokens: exampleStackTokens }, range(1, numItems).map(function (value, index) {
        if (emptyChildren.indexOf(value.toString()) !== -1) {
            return hideEmptyChildren ? (React.createElement(Stack.Item, { key: index, styles: stackItemStyles })) : (React.createElement("span", { key: index, className: mergeStyles(stackItemStyles.root) }));
        }
        return (React.createElement("span", { key: index, className: mergeStyles(stackItemStyles.root) }, value));
    })));
};
export var VerticalStackConfigureExample = function () {
    var _a = React.useState(5), numItems = _a[0], setNumItems = _a[1];
    var _b = useBoolean(false), showBoxShadow = _b[0], toggleShowBoxShadow = _b[1].toggle;
    var _c = useBoolean(false), preventOverflow = _c[0], togglePreventOverflow = _c[1].toggle;
    var _d = useBoolean(false), wrap = _d[0], toggleWrap = _d[1].toggle;
    var _e = useBoolean(true), disableShrink = _e[0], toggleDisableShrink = _e[1].toggle;
    var _f = React.useState(200), stackHeight = _f[0], setStackHeight = _f[1];
    var _g = useBoolean(true), autoHeight = _g[0], toggleAutoHeight = _g[1].toggle;
    var _h = React.useState(0), childrenGap = _h[0], setChildrenGap = _h[1];
    var _j = React.useState(0), paddingLeft = _j[0], setPaddingLeft = _j[1];
    var _k = React.useState(0), paddingRight = _k[0], setPaddingRight = _k[1];
    var _l = React.useState(0), paddingTop = _l[0], setPaddingTop = _l[1];
    var _m = React.useState(0), paddingBottom = _m[0], setPaddingBottom = _m[1];
    var _o = React.useState('start'), horizontalAlignment = _o[0], setHorizontalAlignment = _o[1];
    var _p = React.useState('start'), verticalAlignment = _p[0], setVerticalAlignment = _p[1];
    var _q = useBoolean(false), hideEmptyChildren = _q[0], toggleHideEmptyChildren = _q[1].toggle;
    var _r = React.useState([]), emptyChildren = _r[0], setEmptyChildren = _r[1];
    return (React.createElement(Stack, { tokens: sectionStackTokens },
        React.createElement(Stack, { horizontal: true, tokens: configureStackTokens },
            React.createElement(Stack.Item, { grow: true },
                React.createElement(Stack, null,
                    React.createElement(Slider, { label: "Number of items:", min: 1, max: 10, step: 1, defaultValue: 5, onChange: setNumItems }),
                    React.createElement(Stack, { horizontal: true },
                        React.createElement(Checkbox, { label: "Shadow around items", onChange: toggleShowBoxShadow, styles: checkboxStyles }),
                        React.createElement(Checkbox, { label: "Prevent item overflow", onChange: togglePreventOverflow, styles: checkboxStyles }),
                        React.createElement(Checkbox, { label: "Shrink items", onChange: toggleDisableShrink, styles: checkboxStyles }),
                        React.createElement(Checkbox, { label: "Wrap items", onChange: toggleWrap })))),
            React.createElement(Stack.Item, { grow: true },
                React.createElement(Stack, null,
                    React.createElement(Slider, { label: "Container height:", min: 1, max: 400, step: 1, defaultValue: 200, showValue: true, onChange: setStackHeight, disabled: autoHeight }),
                    React.createElement(Checkbox, { label: "Automatic height (based on items)", defaultChecked: true, onChange: toggleAutoHeight })))),
        React.createElement(Stack, { horizontal: true, tokens: configureStackTokens },
            React.createElement(Stack.Item, { grow: true },
                React.createElement(Stack, null,
                    React.createElement(Slider, { label: "Vertical gap between items:", min: 0, max: 50, step: 1, defaultValue: 0, showValue: true, onChange: setChildrenGap }),
                    React.createElement(Stack, { horizontal: true, verticalAlign: "end", tokens: configureStackTokens },
                        React.createElement(Stack.Item, { grow: true },
                            React.createElement(Dropdown, { selectedKey: verticalAlignment, placeholder: "Select Vertical Alignment", label: "Vertical alignment:", options: verticalAlignmentOptions, 
                                // eslint-disable-next-line react/jsx-no-bind
                                onChange: function (ev, option) {
                                    return setVerticalAlignment(option.key);
                                } })),
                        React.createElement(Stack.Item, { grow: true },
                            React.createElement(Dropdown, { selectedKey: horizontalAlignment, placeholder: "Select Horizontal Alignment", label: "Horizontal alignment:", options: horizontalAlignmentOptions, 
                                // eslint-disable-next-line react/jsx-no-bind
                                onChange: function (ev, option) {
                                    return setHorizontalAlignment(option.key);
                                } })),
                        React.createElement(Stack.Item, null,
                            React.createElement(Checkbox, { label: "Hide empty children", onChange: toggleHideEmptyChildren })),
                        React.createElement(Stack.Item, { grow: true },
                            React.createElement(TextField, { label: "List of empty children (e.g. 1 2 3):", 
                                // eslint-disable-next-line react/jsx-no-bind
                                onChange: function (ev, value) {
                                    if (value === undefined) {
                                        return;
                                    }
                                    setEmptyChildren(value.replace(/,/g, '').split(' '));
                                } }))))),
            React.createElement(Stack.Item, { grow: true },
                React.createElement(Stack, null,
                    React.createElement(Slider, { label: "Left padding:", min: 0, max: 50, step: 1, defaultValue: 0, showValue: true, onChange: setPaddingLeft }),
                    React.createElement(Slider, { label: "Right padding:", min: 0, max: 50, step: 1, defaultValue: 0, showValue: true, onChange: setPaddingRight }))),
            React.createElement(Stack.Item, { grow: true },
                React.createElement(Stack, null,
                    React.createElement(Slider, { label: "Top padding:", min: 0, max: 50, step: 1, defaultValue: 0, showValue: true, onChange: setPaddingTop }),
                    React.createElement(Slider, { label: "Bottom padding:", min: 0, max: 50, step: 1, defaultValue: 0, showValue: true, onChange: setPaddingBottom })))),
        React.createElement(VerticalStackConfigureExampleContent, __assign({}, {
            numItems: numItems,
            showBoxShadow: showBoxShadow,
            preventOverflow: preventOverflow,
            disableShrink: disableShrink,
            wrap: wrap,
            stackHeight: stackHeight,
            autoHeight: autoHeight,
            childrenGap: childrenGap,
            paddingLeft: paddingLeft,
            paddingRight: paddingRight,
            paddingTop: paddingTop,
            paddingBottom: paddingBottom,
            verticalAlignment: verticalAlignment,
            horizontalAlignment: horizontalAlignment,
            hideEmptyChildren: hideEmptyChildren,
            emptyChildren: emptyChildren,
        }))));
};
//# sourceMappingURL=Stack.Vertical.Configure.Example.js.map