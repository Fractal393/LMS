{"version":3,"file":"Tooltip.Display.Example.js","sourceRoot":"../src/","sources":["components/Tooltip/examples/Tooltip.Display.Example.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,WAAW,EAAsB,MAAM,oCAAoC,CAAC;AACrF,OAAO,EAAE,QAAQ,EAAE,MAAM,oCAAoC,CAAC;AAC9D,OAAO,EAAE,KAAK,EAAE,MAAM,uBAAuB,CAAC;AAE9C,IAAM,KAAK,GAAG,QAAQ,EAAE,CAAC;AACzB,IAAM,WAAW,GAAG,EAAE,QAAQ,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC;AAC3E,IAAM,YAAY,GAAG,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC;AAErC,+CAA+C;AAC/C,IAAM,gBAAgB,GAAgC;IACpD,IAAI,EAAE,EAAE,OAAO,EAAE,cAAc,EAAE;CAClC,CAAC;AAEF,MAAM,CAAC,IAAM,qBAAqB,GAA4B;IAC5D,2DAA2D;IAC3D,yEAAyE;IACzE,IAAM,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC;IACrC,IAAM,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC;IAErC,OAAO,CACL;;QAC+C,iDAAyB;;QAAI,2CAAmB;;QACI,GAAG;QACpG,4CAAoB;;QAAa,iDAAyB;;QAC1D,+BAAM;QACN,+BAAM;QACN,oBAAC,WAAW,IAAC,OAAO,EAAC,uBAAuB,EAAC,EAAE,EAAE,UAAU,EAAE,YAAY,EAAE,YAAY;YACrF,gCAAQ,KAAK,EAAE,WAAW,sBAAoB,UAAU,sCAE/C,CACG;QAAC,GAAG;QAClB,oBAAC,WAAW,IACV,OAAO,EAAC,qBAAqB;YAC7B,8BAA8B;YAC9B,MAAM,EAAE,gBAAgB,EACxB,EAAE,EAAE,UAAU,EACd,YAAY,EAAE,YAAY;YAE1B,gCAAQ,KAAK,EAAE,WAAW,sBAAoB,UAAU,oCAE/C,CACG,CACV,CACP,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { TooltipHost, ITooltipHostStyles } from 'office-ui-fabric-react/lib/Tooltip';\nimport { getTheme } from 'office-ui-fabric-react/lib/Styling';\nimport { useId } from '@uifabric/react-hooks';\n\nconst theme = getTheme();\nconst buttonStyle = { fontSize: theme.fonts.medium.fontSize, padding: 10 };\nconst calloutProps = { gapSpace: 0 };\n\n// Important for correct positioning--see below\nconst inlineBlockStyle: Partial<ITooltipHostStyles> = {\n  root: { display: 'inline-block' },\n};\n\nexport const TooltipDisplayExample: React.FunctionComponent = () => {\n  // Use useId() to ensure that the ID is unique on the page.\n  // (It's also okay to use a plain string and manually ensure uniqueness.)\n  const tooltip1Id = useId('tooltip1');\n  const tooltip2Id = useId('tooltip2');\n\n  return (\n    <div>\n      In some cases when a TooltipHost is wrapping <code>inline-block</code> or <code>inline</code> elements, the\n      positioning of the Tooltip may be off. In these cases, it's recommended to set the TooltipHost's{' '}\n      <code>display</code> property to <code>inline-block</code>, as in the following example.\n      <br />\n      <br />\n      <TooltipHost content=\"Incorrect positioning\" id={tooltip1Id} calloutProps={calloutProps}>\n        <button style={buttonStyle} aria-describedby={tooltip1Id}>\n          Hover for incorrect positioning\n        </button>\n      </TooltipHost>{' '}\n      <TooltipHost\n        content=\"Correct positioning\"\n        // This is the important part!\n        styles={inlineBlockStyle}\n        id={tooltip2Id}\n        calloutProps={calloutProps}\n      >\n        <button style={buttonStyle} aria-describedby={tooltip2Id}>\n          Hover for correct positioning\n        </button>\n      </TooltipHost>\n    </div>\n  );\n};\n"]}