import { IPartialTheme } from './ITheme';
import { IStyleFunctionOrObject } from '@uifabric/utilities';
/**
 * A baseline set of color plates.
 */
export declare type ColorTokens = Partial<{
    background: string;
    contentColor: string;
    subTextColor: string;
    linkColor: string;
    iconColor: string;
    borderColor: string;
    dividerColor: string;
    focusColor: string;
    focusInnerColor: string;
    opacity: string;
}>;
/**
 * A set of states for each color plate to use.
 *
 * Note:
 *
 * State names here align to a consistent naming convention:
 *
 * The component is _____
 *
 * Bad: "hover", Good: "hovered"
 *
 * Additional considerations:
 *
 * The term "active" in css means that the keyboard or mouse button
 * which activates the component is pressed down. It is however ambiguous
 * with a focused state, as the HTML object model refers to the focused
 * element as the "activeElement". To resolve ambiguity and to be more
 * compatible with other platforms reusing token names, we have decided to snap
 * to "pressed".
 */
export declare type ColorTokenStates = Partial<{
    hovered: ColorTokens;
    pressed: ColorTokens;
    disabled: ColorTokens;
    checked: ColorTokens;
    checkedHovered: ColorTokens;
    checkedPressed: ColorTokens;
}>;
export declare type ColorTokenSet = ColorTokens & ColorTokenStates;
export declare type FontTokens = Partial<{
    fontFamily: string;
    fontSize: string;
    fontWeight: string;
}>;
/**
 * A token set can provide a single string or object, mapping additional sub-parts of a token set.
 */
export declare type TokenSetType = {
    [key: string]: TokenSetType | string | number | undefined;
};
/**
 * Recursive partial type.
 */
export declare type RecursivePartial<T> = {
    [P in keyof T]?: T[P] extends Array<infer I> ? Array<RecursivePartial<I>> : RecursivePartial<T[P]>;
};
export interface Tokens {
    body: ColorTokenSet & TokenSetType;
    [key: string]: TokenSetType;
}
/**
 * A prepared (fully expanded) theme object.
 */
export interface Theme extends IPartialTheme {
    components?: {
        [componentName: string]: {
            styles?: IStyleFunctionOrObject<any, any>;
        };
    };
    tokens?: Tokens;
    stylesheets?: string[];
}
/**
 * A partial theme, provided by the customer. The internal `createTheme` helper will fill in the rest.
 */
export interface PartialTheme extends Omit<Theme, 'tokens'> {
    tokens?: RecursivePartial<Tokens>;
}
