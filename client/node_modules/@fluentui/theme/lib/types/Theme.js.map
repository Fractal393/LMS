{"version":3,"file":"Theme.js","sourceRoot":"../src/","sources":["types/Theme.ts"],"names":[],"mappings":"","sourcesContent":["import { IPartialTheme } from './ITheme';\nimport { IStyleFunctionOrObject } from '@uifabric/utilities';\n\n/**\n * A baseline set of color plates.\n */\nexport type ColorTokens = Partial<{\n  background: string;\n  contentColor: string;\n  subTextColor: string;\n  linkColor: string;\n  iconColor: string;\n  borderColor: string;\n  dividerColor: string;\n  focusColor: string;\n  focusInnerColor: string;\n  opacity: string;\n}>;\n\n/**\n * A set of states for each color plate to use.\n *\n * Note:\n *\n * State names here align to a consistent naming convention:\n *\n * The component is _____\n *\n * Bad: \"hover\", Good: \"hovered\"\n *\n * Additional considerations:\n *\n * The term \"active\" in css means that the keyboard or mouse button\n * which activates the component is pressed down. It is however ambiguous\n * with a focused state, as the HTML object model refers to the focused\n * element as the \"activeElement\". To resolve ambiguity and to be more\n * compatible with other platforms reusing token names, we have decided to snap\n * to \"pressed\".\n */\nexport type ColorTokenStates = Partial<{\n  hovered: ColorTokens;\n  pressed: ColorTokens;\n  disabled: ColorTokens;\n  checked: ColorTokens;\n  checkedHovered: ColorTokens;\n  checkedPressed: ColorTokens;\n}>;\n\nexport type ColorTokenSet = ColorTokens & ColorTokenStates;\n\nexport type FontTokens = Partial<{\n  fontFamily: string;\n  fontSize: string;\n  fontWeight: string;\n}>;\n\n/**\n * A token set can provide a single string or object, mapping additional sub-parts of a token set.\n */\nexport type TokenSetType = { [key: string]: TokenSetType | string | number | undefined };\n\n/**\n * Recursive partial type.\n */\nexport type RecursivePartial<T> = {\n  [P in keyof T]?: T[P] extends Array<infer I> ? Array<RecursivePartial<I>> : RecursivePartial<T[P]>;\n};\n\nexport interface Tokens {\n  body: ColorTokenSet & TokenSetType;\n  [key: string]: TokenSetType;\n}\n\n/**\n * A prepared (fully expanded) theme object.\n */\nexport interface Theme extends IPartialTheme {\n  components?: {\n    [componentName: string]: {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      styles?: IStyleFunctionOrObject<any, any>;\n    };\n  };\n\n  tokens?: Tokens;\n\n  stylesheets?: string[];\n}\n\n/**\n * A partial theme, provided by the customer. The internal `createTheme` helper will fill in the rest.\n */\nexport interface PartialTheme extends Omit<Theme, 'tokens'> {\n  tokens?: RecursivePartial<Tokens>;\n}\n"]}